/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "FbsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

FbsApiException::FbsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int FbsApiException::getStatus() const
{
    return m_status;
}
const char* FbsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

FbsApiCampaignsCampaignIdHidden-offersResource::FbsApiCampaignsCampaignIdHidden-offersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/hidden-offers/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdHidden-offersResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdHidden-offersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdHidden-offersResource::~FbsApiCampaignsCampaignIdHidden-offersResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdHidden-offersResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdHidden-offersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdHidden-offersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdHidden-offersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdHidden-offersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdHidden-offersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdHidden-offersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto addHiddenOffersRequest = extractJsonModelBodyParam<AddHiddenOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, addHiddenOffersRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Настройки скрытия получены и скоро вступят в силу." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void FbsApiCampaignsCampaignIdHidden-offersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken_x_extension(request);

    const int32_t limit = getQueryParam_limit_x_extension(request);

    const int32_t offset = getQueryParam_offset_x_extension(request);

    const int32_t page = getQueryParam_page_x_extension(request);

    const int32_t pageSize = getQueryParam_pageSize_x_extension(request);


    int status_code = 500;
    std::shared_ptr<GetHiddenOffersResponse> resultObject = std::make_shared<GetHiddenOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, offerId, pageToken, limit, offset, page, pageSize);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о скрытых вами товарах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdHidden-offersResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<AddHiddenOffersRequest> const & addHiddenOffersRequest)
{
    throw FbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<GetHiddenOffersResponse>> FbsApiCampaignsCampaignIdHidden-offersResource::handler_GET(
    int64_t const & campaignId, std::vector<std::shared_ptr<std::string>> const & offerId, std::string const & pageToken, int32_t const & limit, int32_t const & offset, int32_t const & page, int32_t const & pageSize)
{
    throw FbsApiException(501, "Not implemented");
}

std::string FbsApiCampaignsCampaignIdHidden-offersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/archive/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::~FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto addOffersToArchiveRequest = extractJsonModelBodyParam<AddOffersToArchiveRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<AddOffersToArchiveResponse> resultObject = std::make_shared<AddOffersToArchiveResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, addOffersToArchiveRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<AddOffersToArchiveResponse>> FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<AddOffersToArchiveRequest> const & addOffersToArchiveRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiTariffsCalculateResource::FbsApiTariffsCalculateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/tariffs/calculate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiTariffsCalculateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiTariffsCalculateResource::~FbsApiTariffsCalculateResource()
{
}

std::pair<int, std::string> FbsApiTariffsCalculateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiTariffsCalculateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiTariffsCalculateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiTariffsCalculateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiTariffsCalculateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiTariffsCalculateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiTariffsCalculateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto calculateTariffsRequest = extractJsonModelBodyParam<CalculateTariffsRequest>(bodyContent);




    int status_code = 500;
    std::shared_ptr<CalculateTariffsResponse> resultObject = std::make_shared<CalculateTariffsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(calculateTariffsRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Стоимость услуг." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<CalculateTariffsResponse>> FbsApiTariffsCalculateResource::handler_POST(
        std::shared_ptr<CalculateTariffsRequest> const & calculateTariffsRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiTariffsCalculateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/price-quarantine/confirm/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::~FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto confirmPricesRequest = extractJsonModelBodyParam<ConfirmPricesRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, confirmPricesRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Ответ 200 обозначает, что цены подтверждены." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<ConfirmPricesRequest> const & confirmPricesRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/price-quarantine/confirm/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::~FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto confirmPricesRequest = extractJsonModelBodyParam<ConfirmPricesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, confirmPricesRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Ответ 200 обозначает, что цены подтверждены." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<ConfirmPricesRequest> const & confirmPricesRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/confirm/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto confirmShipmentRequest = extractJsonModelBodyParam<ConfirmShipmentRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, shipmentId, confirmShipmentRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handler_POST(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<ConfirmShipmentRequest> const & confirmShipmentRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdChatsNewResource::FbsApiBusinessesBusinessIdChatsNewResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/chats/new/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdChatsNewResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdChatsNewResource::~FbsApiBusinessesBusinessIdChatsNewResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsNewResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsNewResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsNewResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdChatsNewResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdChatsNewResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdChatsNewResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdChatsNewResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto createChatRequest = extractJsonModelBodyParam<CreateChatRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<CreateChatResponse> resultObject = std::make_shared<CreateChatResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, createChatRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Все получилось: чат создан. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<CreateChatResponse>> FbsApiBusinessesBusinessIdChatsNewResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<CreateChatRequest> const & createChatRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdChatsNewResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOffersDeleteResource::FbsApiCampaignsCampaignIdOffersDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offers/delete/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOffersDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOffersDeleteResource::~FbsApiCampaignsCampaignIdOffersDeleteResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersDeleteResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOffersDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOffersDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOffersDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOffersDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteCampaignOffersRequest = extractJsonModelBodyParam<DeleteCampaignOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<DeleteCampaignOffersResponse> resultObject = std::make_shared<DeleteCampaignOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, deleteCampaignOffersRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<DeleteCampaignOffersResponse>> FbsApiCampaignsCampaignIdOffersDeleteResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<DeleteCampaignOffersRequest> const & deleteCampaignOffersRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOffersDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments/delete/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::~FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteGoodsFeedbackCommentRequest = extractJsonModelBodyParam<DeleteGoodsFeedbackCommentRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, deleteGoodsFeedbackCommentRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteGoodsFeedbackCommentRequest> const & deleteGoodsFeedbackCommentRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdHidden-offersDeleteResource::FbsApiCampaignsCampaignIdHidden-offersDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/hidden-offers/delete/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdHidden-offersDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdHidden-offersDeleteResource::~FbsApiCampaignsCampaignIdHidden-offersDeleteResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdHidden-offersDeleteResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdHidden-offersDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdHidden-offersDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdHidden-offersDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdHidden-offersDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdHidden-offersDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdHidden-offersDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteHiddenOffersRequest = extractJsonModelBodyParam<DeleteHiddenOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, deleteHiddenOffersRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Показ товаров возобновлен." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdHidden-offersDeleteResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<DeleteHiddenOffersRequest> const & deleteHiddenOffersRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdHidden-offersDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/delete/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::~FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteOffersRequest = extractJsonModelBodyParam<DeleteOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<DeleteOffersResponse> resultObject = std::make_shared<DeleteOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, deleteOffersRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<DeleteOffersResponse>> FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteOffersRequest> const & deleteOffersRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/unarchive/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::~FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteOffersFromArchiveRequest = extractJsonModelBodyParam<DeleteOffersFromArchiveRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<DeleteOffersFromArchiveResponse> resultObject = std::make_shared<DeleteOffersFromArchiveResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, deleteOffersFromArchiveRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<DeleteOffersFromArchiveResponse>> FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteOffersFromArchiveRequest> const & deleteOffersFromArchiveRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdPromosOffersDeleteResource::FbsApiBusinessesBusinessIdPromosOffersDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/promos/offers/delete/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdPromosOffersDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdPromosOffersDeleteResource::~FbsApiBusinessesBusinessIdPromosOffersDeleteResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosOffersDeleteResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosOffersDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosOffersDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdPromosOffersDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdPromosOffersDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdPromosOffersDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdPromosOffersDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deletePromoOffersRequest = extractJsonModelBodyParam<DeletePromoOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<DeletePromoOffersResponse> resultObject = std::make_shared<DeletePromoOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, deletePromoOffersRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Результат удаления товаров из акции." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<DeletePromoOffersResponse>> FbsApiBusinessesBusinessIdPromosOffersDeleteResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<DeletePromoOffersRequest> const & deletePromoOffersRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdPromosOffersDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/act/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Акт приема-передачи для отгрузки в формате PDF." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/discrepancy-act/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Акт расхождений в формате XLSX." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/inbound-act/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Акт в формате PDF." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/pallet/labels/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);

    // Getting the query params


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "PDF‑файл с ярлыками на все упаковки в отгрузке." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<ShipmentPalletLabelPageFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/shipments/reception-transfer-act/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::~FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const int32_t warehouseId = getQueryParam_warehouseId(request);


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, warehouseId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Акт приема-передачи в формате PDF." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handler_GET(
        int64_t const & campaignId, int32_t const & warehouseId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/transportation-waybill/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Транспортная накладная в формате XLSX." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsBoost-consolidatedGenerateResource::FbsApiReportsBoost-consolidatedGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/boost-consolidated/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsBoost-consolidatedGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsBoost-consolidatedGenerateResource::~FbsApiReportsBoost-consolidatedGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsBoost-consolidatedGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsBoost-consolidatedGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsBoost-consolidatedGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsBoost-consolidatedGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsBoost-consolidatedGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsBoost-consolidatedGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsBoost-consolidatedGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateBoostConsolidatedRequest = extractJsonModelBodyParam<GenerateBoostConsolidatedRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateBoostConsolidatedRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsBoost-consolidatedGenerateResource::handler_POST(
        std::shared_ptr<GenerateBoostConsolidatedRequest> const & generateBoostConsolidatedRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsBoost-consolidatedGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsCompetitors-positionGenerateResource::FbsApiReportsCompetitors-positionGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/competitors-position/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsCompetitors-positionGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsCompetitors-positionGenerateResource::~FbsApiReportsCompetitors-positionGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsCompetitors-positionGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsCompetitors-positionGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsCompetitors-positionGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsCompetitors-positionGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsCompetitors-positionGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsCompetitors-positionGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsCompetitors-positionGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateCompetitorsPositionReportRequest = extractJsonModelBodyParam<GenerateCompetitorsPositionReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateCompetitorsPositionReportRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsCompetitors-positionGenerateResource::handler_POST(
        std::shared_ptr<GenerateCompetitorsPositionReportRequest> const & generateCompetitorsPositionReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsCompetitors-positionGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsGoods-feedbackGenerateResource::FbsApiReportsGoods-feedbackGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/goods-feedback/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsGoods-feedbackGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsGoods-feedbackGenerateResource::~FbsApiReportsGoods-feedbackGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsGoods-feedbackGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsGoods-feedbackGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsGoods-feedbackGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsGoods-feedbackGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsGoods-feedbackGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsGoods-feedbackGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsGoods-feedbackGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateGoodsFeedbackRequest = extractJsonModelBodyParam<GenerateGoodsFeedbackRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateGoodsFeedbackRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsGoods-feedbackGenerateResource::handler_POST(
        std::shared_ptr<GenerateGoodsFeedbackRequest> const & generateGoodsFeedbackRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsGoods-feedbackGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsGoods-realizationGenerateResource::FbsApiReportsGoods-realizationGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/goods-realization/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsGoods-realizationGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsGoods-realizationGenerateResource::~FbsApiReportsGoods-realizationGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsGoods-realizationGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsGoods-realizationGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsGoods-realizationGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsGoods-realizationGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsGoods-realizationGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsGoods-realizationGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsGoods-realizationGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateGoodsRealizationReportRequest = extractJsonModelBodyParam<GenerateGoodsRealizationReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateGoodsRealizationReportRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsGoods-realizationGenerateResource::handler_POST(
        std::shared_ptr<GenerateGoodsRealizationReportRequest> const & generateGoodsRealizationReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsGoods-realizationGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsDocumentsLabelsGenerateResource::FbsApiReportsDocumentsLabelsGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/documents/labels/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsDocumentsLabelsGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsDocumentsLabelsGenerateResource::~FbsApiReportsDocumentsLabelsGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsDocumentsLabelsGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsDocumentsLabelsGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsDocumentsLabelsGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsDocumentsLabelsGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsDocumentsLabelsGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsDocumentsLabelsGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsDocumentsLabelsGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateMassOrderLabelsRequest = extractJsonModelBodyParam<GenerateMassOrderLabelsRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateMassOrderLabelsRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.  Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус &#x60;RESOURCE_NOT_FOUND&#x60;. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsDocumentsLabelsGenerateResource::handler_POST(
        std::shared_ptr<GenerateMassOrderLabelsRequest> const & generateMassOrderLabelsRequest, std::shared_ptr<PageFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsDocumentsLabelsGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/shipments/{shipmentId: .*}/boxes/{boxId: .*}/label/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::~FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);
    const int64_t boxId = getPathParam_boxId(request);

    // Getting the query params


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId, shipmentId, boxId, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "PDF‑файл с ярлыками для коробки. Файл содержит одну страницу с ярлыком." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & shipmentId, int64_t const & boxId, std::shared_ptr<PageFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/labels/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::~FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);

    // Getting the query params


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "PDF‑файл с ярлыками на все коробки." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<PageFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsPricesGenerateResource::FbsApiReportsPricesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/prices/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsPricesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsPricesGenerateResource::~FbsApiReportsPricesGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsPricesGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsPricesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsPricesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsPricesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsPricesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsPricesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsPricesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generatePricesReportRequest = extractJsonModelBodyParam<GeneratePricesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generatePricesReportRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsPricesGenerateResource::handler_POST(
        std::shared_ptr<GeneratePricesReportRequest> const & generatePricesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsPricesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsShelf-statisticsGenerateResource::FbsApiReportsShelf-statisticsGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/shelf-statistics/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsShelf-statisticsGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsShelf-statisticsGenerateResource::~FbsApiReportsShelf-statisticsGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsShelf-statisticsGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsShelf-statisticsGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsShelf-statisticsGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsShelf-statisticsGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsShelf-statisticsGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsShelf-statisticsGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsShelf-statisticsGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateShelfsStatisticsRequest = extractJsonModelBodyParam<GenerateShelfsStatisticsRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateShelfsStatisticsRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsShelf-statisticsGenerateResource::handler_POST(
        std::shared_ptr<GenerateShelfsStatisticsRequest> const & generateShelfsStatisticsRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsShelf-statisticsGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsDocumentsShipment-listGenerateResource::FbsApiReportsDocumentsShipment-listGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/documents/shipment-list/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsDocumentsShipment-listGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsDocumentsShipment-listGenerateResource::~FbsApiReportsDocumentsShipment-listGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsDocumentsShipment-listGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsDocumentsShipment-listGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsDocumentsShipment-listGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsDocumentsShipment-listGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsDocumentsShipment-listGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsDocumentsShipment-listGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsDocumentsShipment-listGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateShipmentListDocumentReportRequest = extractJsonModelBodyParam<GenerateShipmentListDocumentReportRequest>(bodyContent);




    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateShipmentListDocumentReportRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый документ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsDocumentsShipment-listGenerateResource::handler_POST(
        std::shared_ptr<GenerateShipmentListDocumentReportRequest> const & generateShipmentListDocumentReportRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsDocumentsShipment-listGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsShows-salesGenerateResource::FbsApiReportsShows-salesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/shows-sales/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsShows-salesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsShows-salesGenerateResource::~FbsApiReportsShows-salesGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsShows-salesGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsShows-salesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsShows-salesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsShows-salesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsShows-salesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsShows-salesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsShows-salesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateShowsSalesReportRequest = extractJsonModelBodyParam<GenerateShowsSalesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateShowsSalesReportRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsShows-salesGenerateResource::handler_POST(
        std::shared_ptr<GenerateShowsSalesReportRequest> const & generateShowsSalesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsShows-salesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsStocks-on-warehousesGenerateResource::FbsApiReportsStocks-on-warehousesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/stocks-on-warehouses/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsStocks-on-warehousesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsStocks-on-warehousesGenerateResource::~FbsApiReportsStocks-on-warehousesGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsStocks-on-warehousesGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsStocks-on-warehousesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsStocks-on-warehousesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsStocks-on-warehousesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsStocks-on-warehousesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsStocks-on-warehousesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsStocks-on-warehousesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateStocksOnWarehousesReportRequest = extractJsonModelBodyParam<GenerateStocksOnWarehousesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateStocksOnWarehousesReportRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsStocks-on-warehousesGenerateResource::handler_POST(
        std::shared_ptr<GenerateStocksOnWarehousesReportRequest> const & generateStocksOnWarehousesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsStocks-on-warehousesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsUnited-marketplace-servicesGenerateResource::FbsApiReportsUnited-marketplace-servicesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/united-marketplace-services/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsUnited-marketplace-servicesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsUnited-marketplace-servicesGenerateResource::~FbsApiReportsUnited-marketplace-servicesGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsUnited-marketplace-servicesGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsUnited-marketplace-servicesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsUnited-marketplace-servicesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsUnited-marketplace-servicesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsUnited-marketplace-servicesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsUnited-marketplace-servicesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsUnited-marketplace-servicesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateUnitedMarketplaceServicesReportRequest = extractJsonModelBodyParam<GenerateUnitedMarketplaceServicesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateUnitedMarketplaceServicesReportRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsUnited-marketplace-servicesGenerateResource::handler_POST(
        std::shared_ptr<GenerateUnitedMarketplaceServicesReportRequest> const & generateUnitedMarketplaceServicesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsUnited-marketplace-servicesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsUnited-nettingGenerateResource::FbsApiReportsUnited-nettingGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/united-netting/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsUnited-nettingGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsUnited-nettingGenerateResource::~FbsApiReportsUnited-nettingGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsUnited-nettingGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsUnited-nettingGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsUnited-nettingGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsUnited-nettingGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsUnited-nettingGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsUnited-nettingGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsUnited-nettingGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateUnitedNettingReportRequest = extractJsonModelBodyParam<GenerateUnitedNettingReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateUnitedNettingReportRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsUnited-nettingGenerateResource::handler_POST(
        std::shared_ptr<GenerateUnitedNettingReportRequest> const & generateUnitedNettingReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsUnited-nettingGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsUnited-ordersGenerateResource::FbsApiReportsUnited-ordersGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/united-orders/generate/");
	this->set_method_handler("POST",
		std::bind(&FbsApiReportsUnited-ordersGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiReportsUnited-ordersGenerateResource::~FbsApiReportsUnited-ordersGenerateResource()
{
}

std::pair<int, std::string> FbsApiReportsUnited-ordersGenerateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsUnited-ordersGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsUnited-ordersGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsUnited-ordersGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsUnited-ordersGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsUnited-ordersGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsUnited-ordersGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateUnitedOrdersRequest = extractJsonModelBodyParam<GenerateUnitedOrdersRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateUnitedOrdersRequest, format);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> FbsApiReportsUnited-ordersGenerateResource::handler_POST(
        std::shared_ptr<GenerateUnitedOrdersRequest> const & generateUnitedOrdersRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsUnited-ordersGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOffersAllResource::FbsApiCampaignsCampaignIdOffersAllResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offers/all/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOffersAllResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOffersAllResource::~FbsApiCampaignsCampaignIdOffersAllResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersAllResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersAllResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersAllResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOffersAllResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOffersAllResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOffersAllResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOffersAllResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const int64_t feedId = getQueryParam_feedId(request);
    const int32_t chunk = getQueryParam_chunk(request);


    int status_code = 500;
    std::shared_ptr<GetAllOffersResponse> resultObject = std::make_shared<GetAllOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, feedId, chunk);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Предложения магазина." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetAllOffersResponse>> FbsApiCampaignsCampaignIdOffersAllResource::handler_GET(
        int64_t const & campaignId, int64_t const & feedId, int32_t const & chunk)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOffersAllResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdBidsInfoResource::FbsApiBusinessesBusinessIdBidsInfoResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/bids/info/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdBidsInfoResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdBidsInfoResource::~FbsApiBusinessesBusinessIdBidsInfoResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdBidsInfoResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdBidsInfoResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdBidsInfoResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdBidsInfoResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdBidsInfoResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdBidsInfoResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdBidsInfoResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getBidsInfoRequest = extractJsonModelBodyParam<GetBidsInfoRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetBidsInfoResponse> resultObject = std::make_shared<GetBidsInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, pageToken, limit, getBidsInfoRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBidsInfoResponse>> FbsApiBusinessesBusinessIdBidsInfoResource::handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetBidsInfoRequest> const & getBidsInfoRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdBidsInfoResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdBidsRecommendationsResource::FbsApiBusinessesBusinessIdBidsRecommendationsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/bids/recommendations/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdBidsRecommendationsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdBidsRecommendationsResource::~FbsApiBusinessesBusinessIdBidsRecommendationsResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdBidsRecommendationsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdBidsRecommendationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdBidsRecommendationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdBidsRecommendationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdBidsRecommendationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdBidsRecommendationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdBidsRecommendationsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getBidsRecommendationsRequest = extractJsonModelBodyParam<GetBidsRecommendationsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetBidsRecommendationsResponse> resultObject = std::make_shared<GetBidsRecommendationsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getBidsRecommendationsRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Рекомендованные ставки для заданных товаров." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBidsRecommendationsResponse>> FbsApiBusinessesBusinessIdBidsRecommendationsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetBidsRecommendationsRequest> const & getBidsRecommendationsRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdBidsRecommendationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdPrice-quarantineResource::FbsApiBusinessesBusinessIdPrice-quarantineResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/price-quarantine/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdPrice-quarantineResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdPrice-quarantineResource::~FbsApiBusinessesBusinessIdPrice-quarantineResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPrice-quarantineResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPrice-quarantineResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPrice-quarantineResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdPrice-quarantineResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdPrice-quarantineResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdPrice-quarantineResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdPrice-quarantineResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getQuarantineOffersRequest = extractJsonModelBodyParam<GetQuarantineOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetQuarantineOffersResponse> resultObject = std::make_shared<GetQuarantineOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getQuarantineOffersRequest, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров в карантине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetQuarantineOffersResponse>> FbsApiBusinessesBusinessIdPrice-quarantineResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetQuarantineOffersRequest> const & getQuarantineOffersRequest, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdPrice-quarantineResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdSettingsResource::FbsApiBusinessesBusinessIdSettingsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/settings/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdSettingsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdSettingsResource::~FbsApiBusinessesBusinessIdSettingsResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdSettingsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdSettingsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdSettingsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdSettingsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdSettingsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdSettingsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdSettingsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetBusinessSettingsResponse> resultObject = std::make_shared<GetBusinessSettingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Настройки кабинета." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBusinessSettingsResponse>> FbsApiBusinessesBusinessIdSettingsResource::handler_POST(
        int64_t const & businessId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdSettingsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdResource::FbsApiCampaignsCampaignIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdResource::~FbsApiCampaignsCampaignIdResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetCampaignResponse> resultObject = std::make_shared<GetCampaignResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о магазине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignResponse>> FbsApiCampaignsCampaignIdResource::handler_GET(
        int64_t const & campaignId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdLoginsResource::FbsApiCampaignsCampaignIdLoginsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/logins/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdLoginsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdLoginsResource::~FbsApiCampaignsCampaignIdLoginsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdLoginsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdLoginsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdLoginsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdLoginsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdLoginsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdLoginsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdLoginsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetCampaignLoginsResponse> resultObject = std::make_shared<GetCampaignLoginsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список логинов, связанных с магазином." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignLoginsResponse>> FbsApiCampaignsCampaignIdLoginsResource::handler_GET(
        int64_t const & campaignId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdLoginsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOffersResource::FbsApiCampaignsCampaignIdOffersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offers/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOffersResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOffersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOffersResource::~FbsApiCampaignsCampaignIdOffersResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOffersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOffersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOffersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOffersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getCampaignOffersRequest = extractJsonModelBodyParam<GetCampaignOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetCampaignOffersResponse> resultObject = std::make_shared<GetCampaignOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, getCampaignOffersRequest, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров, размещенных в заданном магазине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void FbsApiCampaignsCampaignIdOffersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);

    // Getting the query params
    const std::string query = getQueryParam_query_x_extension(request);

    const int64_t feedId = getQueryParam_feedId_x_extension(request);

    const std::string shopCategoryId = getQueryParam_shopCategoryId_x_extension(request);

    const bool matched = getQueryParam_matched_x_extension(request);

    const int32_t page = getQueryParam_page_x_extension(request);

    const int32_t pageSize = getQueryParam_pageSize_x_extension(request);


    int status_code = 500;
    std::shared_ptr<GetOffersResponse> resultObject = std::make_shared<GetOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, query, feedId, shopCategoryId, currency, matched, page, pageSize);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Предложения магазина." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<GetCampaignOffersResponse>> FbsApiCampaignsCampaignIdOffersResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetCampaignOffersRequest> const & getCampaignOffersRequest, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<GetOffersResponse>> FbsApiCampaignsCampaignIdOffersResource::handler_GET(
    int64_t const & campaignId, std::string const & query, int64_t const & feedId, std::string const & shopCategoryId, std::shared_ptr<CurrencyType> const & currency, bool const & matched, int32_t const & page, int32_t const & pageSize)
{
    throw FbsApiException(501, "Not implemented");
}

std::string FbsApiCampaignsCampaignIdOffersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdPrice-quarantineResource::FbsApiCampaignsCampaignIdPrice-quarantineResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/price-quarantine/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdPrice-quarantineResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdPrice-quarantineResource::~FbsApiCampaignsCampaignIdPrice-quarantineResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdPrice-quarantineResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdPrice-quarantineResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdPrice-quarantineResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdPrice-quarantineResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdPrice-quarantineResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdPrice-quarantineResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdPrice-quarantineResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getQuarantineOffersRequest = extractJsonModelBodyParam<GetQuarantineOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetQuarantineOffersResponse> resultObject = std::make_shared<GetQuarantineOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, getQuarantineOffersRequest, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров в карантине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetQuarantineOffersResponse>> FbsApiCampaignsCampaignIdPrice-quarantineResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetQuarantineOffersRequest> const & getQuarantineOffersRequest, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdPrice-quarantineResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdRegionResource::FbsApiCampaignsCampaignIdRegionResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/region/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdRegionResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdRegionResource::~FbsApiCampaignsCampaignIdRegionResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdRegionResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdRegionResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdRegionResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdRegionResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdRegionResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdRegionResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdRegionResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetCampaignRegionResponse> resultObject = std::make_shared<GetCampaignRegionResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-| " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignRegionResponse>> FbsApiCampaignsCampaignIdRegionResource::handler_GET(
        int64_t const & campaignId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdRegionResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdSettingsResource::FbsApiCampaignsCampaignIdSettingsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/settings/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdSettingsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdSettingsResource::~FbsApiCampaignsCampaignIdSettingsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdSettingsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdSettingsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdSettingsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdSettingsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdSettingsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdSettingsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdSettingsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetCampaignSettingsResponse> resultObject = std::make_shared<GetCampaignSettingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Настройки магазина." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignSettingsResponse>> FbsApiCampaignsCampaignIdSettingsResource::handler_GET(
        int64_t const & campaignId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdSettingsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsResource::FbsApiCampaignsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsResource::~FbsApiCampaignsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();


    // Getting the query params
    const int32_t page = getQueryParam_page(request);
    const int32_t pageSize = getQueryParam_pageSize(request);


    int status_code = 500;
    std::shared_ptr<GetCampaignsResponse> resultObject = std::make_shared<GetCampaignsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(page, pageSize);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Магазины пользователя." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignsResponse>> FbsApiCampaignsResource::handler_GET(
        int32_t const & page, int32_t const & pageSize)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsBy_loginLoginResource::FbsApiCampaignsBy_loginLoginResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/by_login/{login: .*}/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsBy_loginLoginResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsBy_loginLoginResource::~FbsApiCampaignsBy_loginLoginResource()
{
}

std::pair<int, std::string> FbsApiCampaignsBy_loginLoginResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsBy_loginLoginResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsBy_loginLoginResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsBy_loginLoginResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsBy_loginLoginResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsBy_loginLoginResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsBy_loginLoginResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string login = getPathParam_login(request);

    // Getting the query params
    const int32_t page = getQueryParam_page(request);
    const int32_t pageSize = getQueryParam_pageSize(request);


    int status_code = 500;
    std::shared_ptr<GetCampaignsResponse> resultObject = std::make_shared<GetCampaignsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(login, page, pageSize);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о магазинах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignsResponse>> FbsApiCampaignsBy_loginLoginResource::handler_GET(
        std::string const & login, int32_t const & page, int32_t const & pageSize)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsBy_loginLoginResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCategoriesMax-sale-quantumResource::FbsApiCategoriesMax-sale-quantumResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/categories/max-sale-quantum/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCategoriesMax-sale-quantumResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCategoriesMax-sale-quantumResource::~FbsApiCategoriesMax-sale-quantumResource()
{
}

std::pair<int, std::string> FbsApiCategoriesMax-sale-quantumResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCategoriesMax-sale-quantumResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCategoriesMax-sale-quantumResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCategoriesMax-sale-quantumResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCategoriesMax-sale-quantumResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCategoriesMax-sale-quantumResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCategoriesMax-sale-quantumResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getCategoriesMaxSaleQuantumRequest = extractJsonModelBodyParam<GetCategoriesMaxSaleQuantumRequest>(bodyContent);




    int status_code = 500;
    std::shared_ptr<GetCategoriesMaxSaleQuantumResponse> resultObject = std::make_shared<GetCategoriesMaxSaleQuantumResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(getCategoriesMaxSaleQuantumRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Лимит на установку кванта и минимального количества товаров." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCategoriesMaxSaleQuantumResponse>> FbsApiCategoriesMax-sale-quantumResource::handler_POST(
        std::shared_ptr<GetCategoriesMaxSaleQuantumRequest> const & getCategoriesMaxSaleQuantumRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCategoriesMax-sale-quantumResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCategoriesTreeResource::FbsApiCategoriesTreeResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/categories/tree/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCategoriesTreeResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCategoriesTreeResource::~FbsApiCategoriesTreeResource()
{
}

std::pair<int, std::string> FbsApiCategoriesTreeResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCategoriesTreeResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCategoriesTreeResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCategoriesTreeResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCategoriesTreeResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCategoriesTreeResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCategoriesTreeResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getCategoriesRequest = extractJsonModelBodyParam<GetCategoriesRequest>(bodyContent);




    int status_code = 500;
    std::shared_ptr<GetCategoriesResponse> resultObject = std::make_shared<GetCategoriesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(getCategoriesRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Категории Маркета." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCategoriesResponse>> FbsApiCategoriesTreeResource::handler_POST(
        std::shared_ptr<GetCategoriesRequest> const & getCategoriesRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCategoriesTreeResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCategoryCategoryIdParametersResource::FbsApiCategoryCategoryIdParametersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/category/{categoryId: .*}/parameters/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCategoryCategoryIdParametersResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCategoryCategoryIdParametersResource::~FbsApiCategoryCategoryIdParametersResource()
{
}

std::pair<int, std::string> FbsApiCategoryCategoryIdParametersResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCategoryCategoryIdParametersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCategoryCategoryIdParametersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCategoryCategoryIdParametersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCategoryCategoryIdParametersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCategoryCategoryIdParametersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCategoryCategoryIdParametersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t categoryId = getPathParam_categoryId(request);



    int status_code = 500;
    std::shared_ptr<GetCategoryContentParametersResponse> resultObject = std::make_shared<GetCategoryContentParametersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(categoryId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список характеристик товаров из заданной категории." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCategoryContentParametersResponse>> FbsApiCategoryCategoryIdParametersResource::handler_POST(
        int64_t const & categoryId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCategoryCategoryIdParametersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdChatsHistoryResource::FbsApiBusinessesBusinessIdChatsHistoryResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/chats/history/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdChatsHistoryResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdChatsHistoryResource::~FbsApiBusinessesBusinessIdChatsHistoryResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsHistoryResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsHistoryResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsHistoryResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdChatsHistoryResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdChatsHistoryResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdChatsHistoryResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdChatsHistoryResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getChatHistoryRequest = extractJsonModelBodyParam<GetChatHistoryRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const int64_t chatId = getQueryParam_chatId(request);
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetChatHistoryResponse> resultObject = std::make_shared<GetChatHistoryResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, chatId, getChatHistoryRequest, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "История сообщений успешно получена. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetChatHistoryResponse>> FbsApiBusinessesBusinessIdChatsHistoryResource::handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::shared_ptr<GetChatHistoryRequest> const & getChatHistoryRequest, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdChatsHistoryResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdChatsResource::FbsApiBusinessesBusinessIdChatsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/chats/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdChatsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdChatsResource::~FbsApiBusinessesBusinessIdChatsResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdChatsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdChatsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdChatsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdChatsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getChatsRequest = extractJsonModelBodyParam<GetChatsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetChatsResponse> resultObject = std::make_shared<GetChatsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getChatsRequest, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список чатов. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetChatsResponse>> FbsApiBusinessesBusinessIdChatsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetChatsRequest> const & getChatsRequest, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdChatsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiDeliveryServicesResource::FbsApiDeliveryServicesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/delivery/services/");
	this->set_method_handler("GET",
		std::bind(&FbsApiDeliveryServicesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiDeliveryServicesResource::~FbsApiDeliveryServicesResource()
{
}

std::pair<int, std::string> FbsApiDeliveryServicesResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiDeliveryServicesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiDeliveryServicesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiDeliveryServicesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiDeliveryServicesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiDeliveryServicesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiDeliveryServicesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();




    int status_code = 500;
    std::shared_ptr<GetDeliveryServicesResponse> resultObject = std::make_shared<GetDeliveryServicesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET();
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о службах доставки." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetDeliveryServicesResponse>> FbsApiDeliveryServicesResource::handler_GET(
        )
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiDeliveryServicesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFeedsFeedIdResource::FbsApiCampaignsCampaignIdFeedsFeedIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feeds/{feedId: .*}/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdFeedsFeedIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFeedsFeedIdResource::~FbsApiCampaignsCampaignIdFeedsFeedIdResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFeedsFeedIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFeedsFeedIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFeedsFeedIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFeedsFeedIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t feedId = getPathParam_feedId(request);



    int status_code = 500;
    std::shared_ptr<GetFeedResponse> resultObject = std::make_shared<GetFeedResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, feedId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о прайс-листе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetFeedResponse>> FbsApiCampaignsCampaignIdFeedsFeedIdResource::handler_GET(
        int64_t const & campaignId, int64_t const & feedId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFeedsFeedIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feeds/{feedId: .*}/index-logs/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::~FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t feedId = getPathParam_feedId(request);

    // Getting the query params
    const int32_t limit = getQueryParam_limit(request);
    const std::string publishedTimeFrom = getQueryParam_publishedTimeFrom(request);
    const std::string publishedTimeTo = getQueryParam_publishedTimeTo(request);


    int status_code = 500;
    std::shared_ptr<GetFeedIndexLogsResponse> resultObject = std::make_shared<GetFeedIndexLogsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, feedId, limit, publishedTimeFrom, publishedTimeTo, status);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Отчет по индексации прайс-листа." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetFeedIndexLogsResponse>> FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handler_GET(
        int64_t const & campaignId, int64_t const & feedId, int32_t const & limit, std::string const & publishedTimeFrom, std::string const & publishedTimeTo, std::shared_ptr<FeedIndexLogsStatusType> const & status)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFeedbackUpdatesResource::FbsApiCampaignsCampaignIdFeedbackUpdatesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feedback/updates/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdFeedbackUpdatesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFeedbackUpdatesResource::~FbsApiCampaignsCampaignIdFeedbackUpdatesResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedbackUpdatesResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedbackUpdatesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedbackUpdatesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFeedbackUpdatesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFeedbackUpdatesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFeedbackUpdatesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFeedbackUpdatesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);
    const std::string fromDate = getQueryParam_fromDate(request);


    int status_code = 500;
    std::shared_ptr<GetFeedbackListResponse> resultObject = std::make_shared<GetFeedbackListResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, pageToken, limit, fromDate);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список отзывов для магазина." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetFeedbackListResponse>> FbsApiCampaignsCampaignIdFeedbackUpdatesResource::handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::string const & fromDate)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFeedbackUpdatesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFeedsResource::FbsApiCampaignsCampaignIdFeedsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feeds/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdFeedsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFeedsResource::~FbsApiCampaignsCampaignIdFeedsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFeedsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFeedsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFeedsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFeedsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetFeedsResponse> resultObject = std::make_shared<GetFeedsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список прайс-листов." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetFeedsResponse>> FbsApiCampaignsCampaignIdFeedsResource::handler_GET(
        int64_t const & campaignId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFeedsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::~FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getGoodsFeedbackCommentsRequest = extractJsonModelBodyParam<GetGoodsFeedbackCommentsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetGoodsFeedbackCommentsResponse> resultObject = std::make_shared<GetGoodsFeedbackCommentsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getGoodsFeedbackCommentsRequest, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Дерево комментариев к отзыву." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetGoodsFeedbackCommentsResponse>> FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetGoodsFeedbackCommentsRequest> const & getGoodsFeedbackCommentsRequest, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdGoods-feedbackResource::FbsApiBusinessesBusinessIdGoods-feedbackResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdGoods-feedbackResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdGoods-feedbackResource::~FbsApiBusinessesBusinessIdGoods-feedbackResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdGoods-feedbackResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdGoods-feedbackResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdGoods-feedbackResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdGoods-feedbackResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getGoodsFeedbackRequest = extractJsonModelBodyParam<GetGoodsFeedbackRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetGoodsFeedbackResponse> resultObject = std::make_shared<GetGoodsFeedbackResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, pageToken, limit, getGoodsFeedbackRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список отзывов." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetGoodsFeedbackResponse>> FbsApiBusinessesBusinessIdGoods-feedbackResource::handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetGoodsFeedbackRequest> const & getGoodsFeedbackRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdGoods-feedbackResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdStatsSkusResource::FbsApiCampaignsCampaignIdStatsSkusResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/stats/skus/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdStatsSkusResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdStatsSkusResource::~FbsApiCampaignsCampaignIdStatsSkusResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdStatsSkusResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdStatsSkusResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdStatsSkusResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdStatsSkusResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdStatsSkusResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdStatsSkusResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdStatsSkusResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getGoodsStatsRequest = extractJsonModelBodyParam<GetGoodsStatsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetGoodsStatsResponse> resultObject = std::make_shared<GetGoodsStatsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, getGoodsStatsRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Отчет по товарам." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetGoodsStatsResponse>> FbsApiCampaignsCampaignIdStatsSkusResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetGoodsStatsRequest> const & getGoodsStatsRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdStatsSkusResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdOffer-cardsResource::FbsApiBusinessesBusinessIdOffer-cardsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-cards/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdOffer-cardsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdOffer-cardsResource::~FbsApiBusinessesBusinessIdOffer-cardsResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-cardsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-cardsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-cardsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdOffer-cardsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdOffer-cardsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdOffer-cardsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdOffer-cardsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getOfferCardsContentStatusRequest = extractJsonModelBodyParam<GetOfferCardsContentStatusRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOfferCardsContentStatusResponse> resultObject = std::make_shared<GetOfferCardsContentStatusResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, pageToken, limit, getOfferCardsContentStatusRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о карточках указанных товаров." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOfferCardsContentStatusResponse>> FbsApiBusinessesBusinessIdOffer-cardsResource::handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOfferCardsContentStatusRequest> const & getOfferCardsContentStatusRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdOffer-cardsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::FbsApiCampaignsCampaignIdOffer-mapping-entriesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-mapping-entries/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::~FbsApiCampaignsCampaignIdOffer-mapping-entriesResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOfferMappingEntriesResponse> resultObject = std::make_shared<GetOfferMappingEntriesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, offerId, shopSku, mappingKind, status, availability, categoryId, vendor, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о товарах в каталоге." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOfferMappingEntriesResponse>> FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handler_GET(
        int64_t const & campaignId, std::vector<std::string> const & offerId, std::vector<std::shared_ptr<std::string>> const & shopSku, std::shared_ptr<OfferMappingKindType> const & mappingKind, std::vector<std::shared_ptr<OfferProcessingStatusType>> const & status, std::vector<std::shared_ptr<OfferAvailabilityStatusType>> const & availability, std::vector<int32_t> const & categoryId, std::vector<std::string> const & vendor, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOffer-mapping-entriesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdOffer-mappingsResource::FbsApiBusinessesBusinessIdOffer-mappingsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdOffer-mappingsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdOffer-mappingsResource::~FbsApiBusinessesBusinessIdOffer-mappingsResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdOffer-mappingsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdOffer-mappingsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getOfferMappingsRequest = extractJsonModelBodyParam<GetOfferMappingsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOfferMappingsResponse> resultObject = std::make_shared<GetOfferMappingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, pageToken, limit, getOfferMappingsRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о товарах в каталоге." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOfferMappingsResponse>> FbsApiBusinessesBusinessIdOffer-mappingsResource::handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOfferMappingsRequest> const & getOfferMappingsRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdOffer-mappingsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdOffersRecommendationsResource::FbsApiBusinessesBusinessIdOffersRecommendationsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offers/recommendations/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdOffersRecommendationsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdOffersRecommendationsResource::~FbsApiBusinessesBusinessIdOffersRecommendationsResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffersRecommendationsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffersRecommendationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffersRecommendationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdOffersRecommendationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdOffersRecommendationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdOffersRecommendationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdOffersRecommendationsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getOfferRecommendationsRequest = extractJsonModelBodyParam<GetOfferRecommendationsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOfferRecommendationsResponse> resultObject = std::make_shared<GetOfferRecommendationsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getOfferRecommendationsRequest, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров с рекомендациями." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOfferRecommendationsResponse>> FbsApiBusinessesBusinessIdOffersRecommendationsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetOfferRecommendationsRequest> const & getOfferRecommendationsRequest, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdOffersRecommendationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdResource::FbsApiCampaignsCampaignIdOrdersOrderIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdResource::~FbsApiCampaignsCampaignIdOrdersOrderIdResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<GetOrderResponse> resultObject = std::make_shared<GetOrderResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о заказе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrderResponse>> FbsApiCampaignsCampaignIdOrdersOrderIdResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/business-buyer/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::~FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<GetBusinessBuyerInfoResponse> resultObject = std::make_shared<GetBusinessBuyerInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, orderId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о покупателе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBusinessBuyerInfoResponse>> FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handler_POST(
        int64_t const & campaignId, int64_t const & orderId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/documents/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::~FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<GetBusinessDocumentsInfoResponse> resultObject = std::make_shared<GetBusinessDocumentsInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, orderId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о документах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBusinessDocumentsInfoResponse>> FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handler_POST(
        int64_t const & campaignId, int64_t const & orderId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/labels/data/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::~FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<GetOrderLabelsDataResponse> resultObject = std::make_shared<GetOrderLabelsDataResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация для печати ярлыков." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrderLabelsDataResponse>> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersResource::FbsApiCampaignsCampaignIdOrdersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOrdersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersResource::~FbsApiCampaignsCampaignIdOrdersResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string fromDate = getQueryParam_fromDate(request);
    const std::string toDate = getQueryParam_toDate(request);
    const std::string supplierShipmentDateFrom = getQueryParam_supplierShipmentDateFrom(request);
    const std::string supplierShipmentDateTo = getQueryParam_supplierShipmentDateTo(request);
    const std::string updatedAtFrom = getQueryParam_updatedAtFrom(request);
    const std::string updatedAtTo = getQueryParam_updatedAtTo(request);
    const bool fake = getQueryParam_fake(request);
    const bool hasCis = getQueryParam_hasCis(request);
    const bool onlyWaitingForCancellationApprove = getQueryParam_onlyWaitingForCancellationApprove(request);
    const bool onlyEstimatedDelivery = getQueryParam_onlyEstimatedDelivery(request);
    const int32_t page = getQueryParam_page(request);
    const int32_t pageSize = getQueryParam_pageSize(request);
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOrdersResponse> resultObject = std::make_shared<GetOrdersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderIds, status, substatus, fromDate, toDate, supplierShipmentDateFrom, supplierShipmentDateTo, updatedAtFrom, updatedAtTo, dispatchType, fake, hasCis, onlyWaitingForCancellationApprove, onlyEstimatedDelivery, buyerType, page, pageSize, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о заказах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrdersResponse>> FbsApiCampaignsCampaignIdOrdersResource::handler_GET(
        int64_t const & campaignId, std::vector<int64_t> const & orderIds, Set<std::shared_ptr<OrderStatusType>> const & status, Set<std::shared_ptr<OrderSubstatusType>> const & substatus, std::string const & fromDate, std::string const & toDate, std::string const & supplierShipmentDateFrom, std::string const & supplierShipmentDateTo, std::string const & updatedAtFrom, std::string const & updatedAtTo, std::shared_ptr<OrderDeliveryDispatchType> const & dispatchType, bool const & fake, bool const & hasCis, bool const & onlyWaitingForCancellationApprove, bool const & onlyEstimatedDelivery, std::shared_ptr<OrderBuyerType> const & buyerType, int32_t const & page, int32_t const & pageSize, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdStatsOrdersResource::FbsApiCampaignsCampaignIdStatsOrdersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/stats/orders/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdStatsOrdersResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdStatsOrdersResource::~FbsApiCampaignsCampaignIdStatsOrdersResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdStatsOrdersResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdStatsOrdersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdStatsOrdersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdStatsOrdersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdStatsOrdersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdStatsOrdersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdStatsOrdersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getOrdersStatsRequest = extractJsonModelBodyParam<GetOrdersStatsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOrdersStatsResponse> resultObject = std::make_shared<GetOrdersStatsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, pageToken, limit, getOrdersStatsRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация по заказам." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrdersStatsResponse>> FbsApiCampaignsCampaignIdStatsOrdersResource::handler_POST(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOrdersStatsRequest> const & getOrdersStatsRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdStatsOrdersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOffer-pricesResource::FbsApiCampaignsCampaignIdOffer-pricesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-prices/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOffer-pricesResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOffer-pricesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOffer-pricesResource::~FbsApiCampaignsCampaignIdOffer-pricesResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-pricesResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-pricesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-pricesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOffer-pricesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOffer-pricesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOffer-pricesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOffer-pricesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);
    const bool archived = getQueryParam_archived(request);


    int status_code = 500;
    std::shared_ptr<GetPricesResponse> resultObject = std::make_shared<GetPricesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, pageToken, limit, archived);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список всех товаров с установленными ценами." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void FbsApiCampaignsCampaignIdOffer-pricesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto campaignId = std::make_shared<>(bodyContent);
    auto pageToken = std::make_shared<>(bodyContent);
    auto limit = std::make_shared<>(bodyContent);
    auto getPricesByOfferIdsRequest = extractJsonModelBodyParam<GetPricesByOfferIdsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken_x_extension(request);

    const int32_t limit = getQueryParam_limit_x_extension(request);


    int status_code = 500;
    std::shared_ptr<GetPricesByOfferIdsResponse> resultObject = std::make_shared<GetPricesByOfferIdsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_POST(campaignId, pageToken, limit, getPricesByOfferIdsRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров с установленными для заданного магазина ценами." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<GetPricesResponse>> FbsApiCampaignsCampaignIdOffer-pricesResource::handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, bool const & archived)
{
    throw FbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<GetPricesByOfferIdsResponse>> FbsApiCampaignsCampaignIdOffer-pricesResource::handler_POST(
    int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetPricesByOfferIdsRequest> const & getPricesByOfferIdsRequest)
{
    throw FbsApiException(501, "Not implemented");
}

std::string FbsApiCampaignsCampaignIdOffer-pricesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdPromosOffersResource::FbsApiBusinessesBusinessIdPromosOffersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/promos/offers/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdPromosOffersResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdPromosOffersResource::~FbsApiBusinessesBusinessIdPromosOffersResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosOffersResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosOffersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosOffersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdPromosOffersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdPromosOffersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdPromosOffersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdPromosOffersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getPromoOffersRequest = extractJsonModelBodyParam<GetPromoOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetPromoOffersResponse> resultObject = std::make_shared<GetPromoOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getPromoOffersRequest, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров, которые участвуют или могут участвовать в акции." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetPromoOffersResponse>> FbsApiBusinessesBusinessIdPromosOffersResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetPromoOffersRequest> const & getPromoOffersRequest, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdPromosOffersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdPromosResource::FbsApiBusinessesBusinessIdPromosResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/promos/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdPromosResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdPromosResource::~FbsApiBusinessesBusinessIdPromosResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdPromosResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdPromosResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdPromosResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdPromosResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getPromosRequest = extractJsonModelBodyParam<GetPromosRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetPromosResponse> resultObject = std::make_shared<GetPromosResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getPromosRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список акций Маркета." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetPromosResponse>> FbsApiBusinessesBusinessIdPromosResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetPromosRequest> const & getPromosRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdPromosResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::FbsApiCampaignsCampaignIdRatingsQualityDetailsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/ratings/quality/details/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::~FbsApiCampaignsCampaignIdRatingsQualityDetailsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetQualityRatingDetailsResponse> resultObject = std::make_shared<GetQualityRatingDetailsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о заказах, которые повлияли на индекс качества." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetQualityRatingDetailsResponse>> FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handler_POST(
        int64_t const & campaignId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdRatingsQualityDetailsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdRatingsQualityResource::FbsApiBusinessesBusinessIdRatingsQualityResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/ratings/quality/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdRatingsQualityResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdRatingsQualityResource::~FbsApiBusinessesBusinessIdRatingsQualityResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdRatingsQualityResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdRatingsQualityResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdRatingsQualityResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdRatingsQualityResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdRatingsQualityResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdRatingsQualityResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdRatingsQualityResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getQualityRatingRequest = extractJsonModelBodyParam<GetQualityRatingRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetQualityRatingResponse> resultObject = std::make_shared<GetQualityRatingResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getQualityRatingRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Значение индекса качества магазинов и его составляющие." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetQualityRatingResponse>> FbsApiBusinessesBusinessIdRatingsQualityResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetQualityRatingRequest> const & getQualityRatingRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdRatingsQualityResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiReportsInfoReportIdResource::FbsApiReportsInfoReportIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/info/{reportId: .*}/");
	this->set_method_handler("GET",
		std::bind(&FbsApiReportsInfoReportIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiReportsInfoReportIdResource::~FbsApiReportsInfoReportIdResource()
{
}

std::pair<int, std::string> FbsApiReportsInfoReportIdResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiReportsInfoReportIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiReportsInfoReportIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiReportsInfoReportIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiReportsInfoReportIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiReportsInfoReportIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiReportsInfoReportIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string reportId = getPathParam_reportId(request);



    int status_code = 500;
    std::shared_ptr<GetReportInfoResponse> resultObject = std::make_shared<GetReportInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(reportId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — &#x60;FAILED&#x60; или &#x60;NO_DATA&#x60;, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetReportInfoResponse>> FbsApiReportsInfoReportIdResource::handler_GET(
        std::string const & reportId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiReportsInfoReportIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/returns/{returnId: .*}/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::~FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t returnId = getPathParam_returnId(request);



    int status_code = 500;
    std::shared_ptr<GetReturnResponse> resultObject = std::make_shared<GetReturnResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId, returnId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Детали возврата." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetReturnResponse>> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/returns/{returnId: .*}/application/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::~FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t returnId = getPathParam_returnId(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId, returnId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Заявление на возврат." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/returns/{returnId: .*}/decision/{itemId: .*}/image/{imageHash: .*}/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::~FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t returnId = getPathParam_returnId(request);
    const int64_t itemId = getPathParam_itemId(request);
    const std::string imageHash = getPathParam_imageHash(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId, returnId, itemId, imageHash);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Фотография возврата." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId, int64_t const & itemId, std::string const & imageHash)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdReturnsResource::FbsApiCampaignsCampaignIdReturnsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/returns/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdReturnsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdReturnsResource::~FbsApiCampaignsCampaignIdReturnsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdReturnsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdReturnsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdReturnsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdReturnsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdReturnsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdReturnsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdReturnsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);
    const std::string fromDate = getQueryParam_fromDate(request);
    const std::string toDate = getQueryParam_toDate(request);
    const std::string fromDate2 = getQueryParam_fromDate2(request);
    const std::string toDate2 = getQueryParam_toDate2(request);


    int status_code = 500;
    std::shared_ptr<GetReturnsResponse> resultObject = std::make_shared<GetReturnsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, pageToken, limit, orderIds, statuses, type, fromDate, toDate, fromDate2, toDate2);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Постраничные возвраты партнера." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetReturnsResponse>> FbsApiCampaignsCampaignIdReturnsResource::handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::vector<int64_t> const & orderIds, std::vector<std::shared_ptr<RefundStatusType>> const & statuses, std::shared_ptr<ReturnType> const & type, std::string const & fromDate, std::string const & toDate, std::string const & fromDate2, std::string const & toDate2)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdReturnsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);

    // Getting the query params
    const bool cancelledOrders = getQueryParam_cancelledOrders(request);


    int status_code = 500;
    std::shared_ptr<GetShipmentResponse> resultObject = std::make_shared<GetShipmentResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId, cancelledOrders);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Найденная отгрузка." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetShipmentResponse>> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId, bool const & cancelledOrders)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/orders/info/");
	this->set_method_handler("GET",
		std::bind(&FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::shared_ptr<GetShipmentOrdersInfoResponse> resultObject = std::make_shared<GetShipmentOrdersInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация по годным/негодным для печати ярлыков заказам в отгрузке." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetShipmentOrdersInfoResponse>> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOffersStocksResource::FbsApiCampaignsCampaignIdOffersStocksResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offers/stocks/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOffersStocksResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PUT",
		std::bind(&FbsApiCampaignsCampaignIdOffersStocksResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOffersStocksResource::~FbsApiCampaignsCampaignIdOffersStocksResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersStocksResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersStocksResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersStocksResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOffersStocksResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOffersStocksResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOffersStocksResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOffersStocksResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getWarehouseStocksRequest = extractJsonModelBodyParam<GetWarehouseStocksRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetWarehouseStocksResponse> resultObject = std::make_shared<GetWarehouseStocksResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, pageToken, limit, getWarehouseStocksRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Остатки товаров на складах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void FbsApiCampaignsCampaignIdOffersStocksResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto campaignId = std::make_shared<>(bodyContent);
    auto updateStocksRequest = extractJsonModelBodyParam<UpdateStocksRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_PUT(campaignId, updateStocksRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<GetWarehouseStocksResponse>> FbsApiCampaignsCampaignIdOffersStocksResource::handler_POST(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetWarehouseStocksRequest> const & getWarehouseStocksRequest)
{
    throw FbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdOffersStocksResource::handler_PUT(
    int64_t const & campaignId, std::shared_ptr<UpdateStocksRequest> const & updateStocksRequest)
{
    throw FbsApiException(501, "Not implemented");
}

std::string FbsApiCampaignsCampaignIdOffersStocksResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-mapping-entries/suggestions/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::~FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getSuggestedOfferMappingEntriesRequest = extractJsonModelBodyParam<GetSuggestedOfferMappingEntriesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetSuggestedOfferMappingEntriesResponse> resultObject = std::make_shared<GetSuggestedOfferMappingEntriesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, getSuggestedOfferMappingEntriesRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о товарах в каталоге." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetSuggestedOfferMappingEntriesResponse>> FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetSuggestedOfferMappingEntriesRequest> const & getSuggestedOfferMappingEntriesRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/suggestions/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::~FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getSuggestedOfferMappingsRequest = extractJsonModelBodyParam<GetSuggestedOfferMappingsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetSuggestedOfferMappingsResponse> resultObject = std::make_shared<GetSuggestedOfferMappingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getSuggestedOfferMappingsRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetSuggestedOfferMappingsResponse>> FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetSuggestedOfferMappingsRequest> const & getSuggestedOfferMappingsRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-prices/suggestions/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::~FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto suggestPricesRequest = extractJsonModelBodyParam<SuggestPricesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<SuggestPricesResponse> resultObject = std::make_shared<SuggestPricesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, suggestPricesRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список цен для продвижения на Маркете." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<SuggestPricesResponse>> FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<SuggestPricesRequest> const & suggestPricesRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdWarehousesResource::FbsApiBusinessesBusinessIdWarehousesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/warehouses/");
	this->set_method_handler("GET",
		std::bind(&FbsApiBusinessesBusinessIdWarehousesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdWarehousesResource::~FbsApiBusinessesBusinessIdWarehousesResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdWarehousesResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdWarehousesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdWarehousesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdWarehousesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdWarehousesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdWarehousesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdWarehousesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetWarehousesResponse> resultObject = std::make_shared<GetWarehousesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(businessId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список складов и групп складов." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetWarehousesResponse>> FbsApiBusinessesBusinessIdWarehousesResource::handler_GET(
        int64_t const & businessId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdWarehousesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/identifiers/");
	this->set_method_handler("PUT",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::~FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto provideOrderItemIdentifiersRequest = extractJsonModelBodyParam<ProvideOrderItemIdentifiersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<ProvideOrderItemIdentifiersResponse> resultObject = std::make_shared<ProvideOrderItemIdentifiersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, provideOrderItemIdentifiersRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<ProvideOrderItemIdentifiersResponse>> FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<ProvideOrderItemIdentifiersRequest> const & provideOrderItemIdentifiersRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdBidsResource::FbsApiBusinessesBusinessIdBidsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/bids/");
	this->set_method_handler("PUT",
		std::bind(&FbsApiBusinessesBusinessIdBidsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdBidsResource::~FbsApiBusinessesBusinessIdBidsResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdBidsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdBidsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdBidsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdBidsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdBidsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdBidsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdBidsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto putSkuBidsRequest = extractJsonModelBodyParam<PutSkuBidsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(businessId, putSkuBidsRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiBusinessesBusinessIdBidsResource::handler_PUT(
        int64_t const & businessId, std::shared_ptr<PutSkuBidsRequest> const & putSkuBidsRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdBidsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdBidsResource::FbsApiCampaignsCampaignIdBidsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/bids/");
	this->set_method_handler("PUT",
		std::bind(&FbsApiCampaignsCampaignIdBidsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdBidsResource::~FbsApiCampaignsCampaignIdBidsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdBidsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdBidsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdBidsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdBidsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdBidsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdBidsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdBidsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto putSkuBidsRequest = extractJsonModelBodyParam<PutSkuBidsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, putSkuBidsRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdBidsResource::handler_PUT(
        int64_t const & campaignId, std::shared_ptr<PutSkuBidsRequest> const & putSkuBidsRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdBidsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feeds/{feedId: .*}/refresh/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::~FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t feedId = getPathParam_feedId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, feedId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handler_POST(
        int64_t const & campaignId, int64_t const & feedId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiRegionsRegionIdChildrenResource::FbsApiRegionsRegionIdChildrenResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/regions/{regionId: .*}/children/");
	this->set_method_handler("GET",
		std::bind(&FbsApiRegionsRegionIdChildrenResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiRegionsRegionIdChildrenResource::~FbsApiRegionsRegionIdChildrenResource()
{
}

std::pair<int, std::string> FbsApiRegionsRegionIdChildrenResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiRegionsRegionIdChildrenResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiRegionsRegionIdChildrenResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiRegionsRegionIdChildrenResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiRegionsRegionIdChildrenResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiRegionsRegionIdChildrenResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiRegionsRegionIdChildrenResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t regionId = getPathParam_regionId(request);

    // Getting the query params
    const int32_t page = getQueryParam_page(request);
    const int32_t pageSize = getQueryParam_pageSize(request);


    int status_code = 500;
    std::shared_ptr<GetRegionWithChildrenResponse> resultObject = std::make_shared<GetRegionWithChildrenResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(regionId, page, pageSize);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Регионы, являющиеся дочерними к указанному в запросе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetRegionWithChildrenResponse>> FbsApiRegionsRegionIdChildrenResource::handler_GET(
        int64_t const & regionId, int32_t const & page, int32_t const & pageSize)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiRegionsRegionIdChildrenResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiRegionsRegionIdResource::FbsApiRegionsRegionIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/regions/{regionId: .*}/");
	this->set_method_handler("GET",
		std::bind(&FbsApiRegionsRegionIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiRegionsRegionIdResource::~FbsApiRegionsRegionIdResource()
{
}

std::pair<int, std::string> FbsApiRegionsRegionIdResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiRegionsRegionIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiRegionsRegionIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiRegionsRegionIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiRegionsRegionIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiRegionsRegionIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiRegionsRegionIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t regionId = getPathParam_regionId(request);



    int status_code = 500;
    std::shared_ptr<GetRegionsResponse> resultObject = std::make_shared<GetRegionsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(regionId);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Найденный регион." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetRegionsResponse>> FbsApiRegionsRegionIdResource::handler_GET(
        int64_t const & regionId)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiRegionsRegionIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiRegionsResource::FbsApiRegionsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/regions/");
	this->set_method_handler("GET",
		std::bind(&FbsApiRegionsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

FbsApiRegionsResource::~FbsApiRegionsResource()
{
}

std::pair<int, std::string> FbsApiRegionsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiRegionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiRegionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiRegionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiRegionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiRegionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiRegionsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();


    // Getting the query params
    const std::string name = getQueryParam_name(request);
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetRegionsResponse> resultObject = std::make_shared<GetRegionsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(name, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список найденных регионов." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetRegionsResponse>> FbsApiRegionsResource::handler_GET(
        std::string const & name, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiRegionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::FbsApiCampaignsCampaignIdFirst-mileShipmentsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/");
	this->set_method_handler("PUT",
		std::bind(&FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::~FbsApiCampaignsCampaignIdFirst-mileShipmentsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto searchShipmentsRequest = extractJsonModelBodyParam<SearchShipmentsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<SearchShipmentsResponse> resultObject = std::make_shared<SearchShipmentsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, searchShipmentsRequest, pageToken, limit);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Найденные отгрузки." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<SearchShipmentsResponse>> FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::handler_PUT(
        int64_t const & campaignId, std::shared_ptr<SearchShipmentsRequest> const & searchShipmentsRequest, std::string const & pageToken, int32_t const & limit)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFirst-mileShipmentsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdChatsFileSendResource::FbsApiBusinessesBusinessIdChatsFileSendResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/chats/file/send/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdChatsFileSendResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdChatsFileSendResource::~FbsApiBusinessesBusinessIdChatsFileSendResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsFileSendResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsFileSendResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsFileSendResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdChatsFileSendResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdChatsFileSendResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdChatsFileSendResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdChatsFileSendResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const int64_t chatId = getQueryParam_chatId(request);


    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, chatId, file);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ. Означает, что файл отправлен." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiBusinessesBusinessIdChatsFileSendResource::handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::string const & file)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdChatsFileSendResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdChatsMessageResource::FbsApiBusinessesBusinessIdChatsMessageResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/chats/message/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdChatsMessageResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdChatsMessageResource::~FbsApiBusinessesBusinessIdChatsMessageResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsMessageResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsMessageResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdChatsMessageResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdChatsMessageResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdChatsMessageResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdChatsMessageResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdChatsMessageResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto sendMessageToChatRequest = extractJsonModelBodyParam<SendMessageToChatRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const int64_t chatId = getQueryParam_chatId(request);


    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, chatId, sendMessageToChatRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ. Означает, что сообщение отправлено." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiBusinessesBusinessIdChatsMessageResource::handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::shared_ptr<SendMessageToChatRequest> const & sendMessageToChatRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdChatsMessageResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feeds/{feedId: .*}/params/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::~FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setFeedParamsRequest = extractJsonModelBodyParam<SetFeedParamsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t feedId = getPathParam_feedId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, feedId, setFeedParamsRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Статус выполнения операции." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handler_POST(
        int64_t const & campaignId, int64_t const & feedId, std::shared_ptr<SetFeedParamsRequest> const & setFeedParamsRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/boxes/");
	this->set_method_handler("PUT",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::~FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setOrderBoxLayoutRequest = extractJsonModelBodyParam<SetOrderBoxLayoutRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<SetOrderBoxLayoutResponse> resultObject = std::make_shared<SetOrderBoxLayoutResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, setOrderBoxLayoutRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<SetOrderBoxLayoutResponse>> FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<SetOrderBoxLayoutRequest> const & setOrderBoxLayoutRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/shipments/{shipmentId: .*}/boxes/");
	this->set_method_handler("PUT",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::~FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setOrderShipmentBoxesRequest = extractJsonModelBodyParam<SetOrderShipmentBoxesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::shared_ptr<SetOrderShipmentBoxesResponse> resultObject = std::make_shared<SetOrderShipmentBoxesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, shipmentId, setOrderShipmentBoxesRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество грузомест записано." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<SetOrderShipmentBoxesResponse>> FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & shipmentId, std::shared_ptr<SetOrderShipmentBoxesRequest> const & setOrderShipmentBoxesRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/pallets/");
	this->set_method_handler("PUT",
		std::bind(&FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setShipmentPalletsCountRequest = extractJsonModelBodyParam<SetShipmentPalletsCountRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, shipmentId, setShipmentPalletsCountRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество упаковок записано." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handler_PUT(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<SetShipmentPalletsCountRequest> const & setShipmentPalletsCountRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/skip-reaction/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::~FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto skipGoodsFeedbackReactionRequest = extractJsonModelBodyParam<SkipGoodsFeedbackReactionRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, skipGoodsFeedbackReactionRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<SkipGoodsFeedbackReactionRequest> const & skipGoodsFeedbackReactionRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/orders/transfer/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto transferOrdersFromShipmentRequest = extractJsonModelBodyParam<TransferOrdersFromShipmentRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, shipmentId, transferOrdersFromShipmentRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Запрос на перенос заказов проверен и принят, и они будут перенесены спустя несколько минут." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handler_POST(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<TransferOrdersFromShipmentRequest> const & transferOrdersFromShipmentRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-prices/updates/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::~FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateBusinessPricesRequest = extractJsonModelBodyParam<UpdateBusinessPricesRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updateBusinessPricesRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Маркет принял информацию о новых ценах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateBusinessPricesRequest> const & updateBusinessPricesRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOffersUpdateResource::FbsApiCampaignsCampaignIdOffersUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offers/update/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOffersUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOffersUpdateResource::~FbsApiCampaignsCampaignIdOffersUpdateResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersUpdateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffersUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOffersUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOffersUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOffersUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOffersUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateCampaignOffersRequest = extractJsonModelBodyParam<UpdateCampaignOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, updateCampaignOffersRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Ответ 200 обозначает, что новые параметры получены Маркетом и скоро вступят в силу." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdOffersUpdateResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateCampaignOffersRequest> const & updateCampaignOffersRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOffersUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments/update/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::~FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateGoodsFeedbackCommentRequest = extractJsonModelBodyParam<UpdateGoodsFeedbackCommentRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<UpdateGoodsFeedbackCommentResponse> resultObject = std::make_shared<UpdateGoodsFeedbackCommentResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updateGoodsFeedbackCommentRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о добавленном или измененном комментарии." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateGoodsFeedbackCommentResponse>> FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateGoodsFeedbackCommentRequest> const & updateGoodsFeedbackCommentRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::FbsApiBusinessesBusinessIdOffer-cardsUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-cards/update/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::~FbsApiBusinessesBusinessIdOffer-cardsUpdateResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOfferContentRequest = extractJsonModelBodyParam<UpdateOfferContentRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<UpdateOfferContentResponse> resultObject = std::make_shared<UpdateOfferContentResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updateOfferContentRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Запрос выполнен корректно, данные обработаны.  {% note warning \&quot;Ответ 200 сам по себе не значит, что переданные значения корректны\&quot; %}  Обязательно посмотрите детали ответа: &#x60;status&#x60; и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в &#x60;status&#x60; вернулось &#x60;ERROR&#x60;, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля &#x60;errors&#x60; и &#x60;warnings&#x60;. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateOfferContentResponse>> FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateOfferContentRequest> const & updateOfferContentRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdOffer-cardsUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-mapping-entries/updates/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::~FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOfferMappingEntryRequest = extractJsonModelBodyParam<UpdateOfferMappingEntryRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, updateOfferMappingEntryRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Статус выполнения операции." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateOfferMappingEntryRequest> const & updateOfferMappingEntryRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/update/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::~FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOfferMappingsRequest = extractJsonModelBodyParam<UpdateOfferMappingsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<UpdateOfferMappingsResponse> resultObject = std::make_shared<UpdateOfferMappingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updateOfferMappingsRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateOfferMappingsResponse>> FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateOfferMappingsRequest> const & updateOfferMappingsRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/items/");
	this->set_method_handler("PUT",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::~FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOrderItemRequest = extractJsonModelBodyParam<UpdateOrderItemRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_PUT(campaignId, orderId, updateOrderItemRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Маркет успешно обработал ваш запрос. Выходные данные не ожидаются." : result, contentType);
        return;
    }
    if (status_code == 400) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<UpdateOrderItemRequest> const & updateOrderItemRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/status/");
	this->set_method_handler("PUT",
		std::bind(&FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::~FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOrderStatusRequest = extractJsonModelBodyParam<UpdateOrderStatusRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<UpdateOrderStatusResponse> resultObject = std::make_shared<UpdateOrderStatusResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, updateOrderStatusRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В случае успешного изменения статуса заказа возвращается обновленная информация о заказе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateOrderStatusResponse>> FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<UpdateOrderStatusRequest> const & updateOrderStatusRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOrdersStatus-updateResource::FbsApiCampaignsCampaignIdOrdersStatus-updateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/status-update/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOrdersStatus-updateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOrdersStatus-updateResource::~FbsApiCampaignsCampaignIdOrdersStatus-updateResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersStatus-updateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersStatus-updateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOrdersStatus-updateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOrdersStatus-updateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOrdersStatus-updateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOrdersStatus-updateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOrdersStatus-updateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOrderStatusesRequest = extractJsonModelBodyParam<UpdateOrderStatusesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<UpdateOrderStatusesResponse> resultObject = std::make_shared<UpdateOrderStatusesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, updateOrderStatusesRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Возвращается информация об обновленных статусах заказов." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateOrderStatusesResponse>> FbsApiCampaignsCampaignIdOrdersStatus-updateResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateOrderStatusesRequest> const & updateOrderStatusesRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOrdersStatus-updateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-prices/updates/");
	this->set_method_handler("POST",
		std::bind(&FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::~FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource()
{
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updatePricesRequest = extractJsonModelBodyParam<UpdatePricesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, updatePricesRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Маркет принял информацию о новых ценах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdatePricesRequest> const & updatePricesRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
FbsApiBusinessesBusinessIdPromosOffersUpdateResource::FbsApiBusinessesBusinessIdPromosOffersUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/promos/offers/update/");
	this->set_method_handler("POST",
		std::bind(&FbsApiBusinessesBusinessIdPromosOffersUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

FbsApiBusinessesBusinessIdPromosOffersUpdateResource::~FbsApiBusinessesBusinessIdPromosOffersUpdateResource()
{
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosOffersUpdateResource::handleFbsApiException(const FbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosOffersUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FbsApiBusinessesBusinessIdPromosOffersUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FbsApiBusinessesBusinessIdPromosOffersUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FbsApiBusinessesBusinessIdPromosOffersUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void FbsApiBusinessesBusinessIdPromosOffersUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FbsApiBusinessesBusinessIdPromosOffersUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updatePromoOffersRequest = extractJsonModelBodyParam<UpdatePromoOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<UpdatePromoOffersResponse> resultObject = std::make_shared<UpdatePromoOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updatePromoOffersRequest);
    }
    catch(const FbsApiException& e) {
        std::tie(status_code, result) = handleFbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Результат добавления товаров в акцию или обновления их цен." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdatePromoOffersResponse>> FbsApiBusinessesBusinessIdPromosOffersUpdateResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdatePromoOffersRequest> const & updatePromoOffersRequest)
{
    throw FbsApiException(501, "Not implemented");
}


std::string FbsApiBusinessesBusinessIdPromosOffersUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

FbsApi::FbsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

FbsApi::~FbsApi() {}

void FbsApi::setFbsApiCampaignsCampaignIdHidden-offersResource(std::shared_ptr<FbsApiCampaignsCampaignIdHidden-offersResource> spFbsApiCampaignsCampaignIdHidden-offersResource) {
    m_spFbsApiCampaignsCampaignIdHidden-offersResource = spFbsApiCampaignsCampaignIdHidden-offersResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdHidden-offersResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdOffer-mappingsArchiveResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource> spFbsApiBusinessesBusinessIdOffer-mappingsArchiveResource) {
    m_spFbsApiBusinessesBusinessIdOffer-mappingsArchiveResource = spFbsApiBusinessesBusinessIdOffer-mappingsArchiveResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdOffer-mappingsArchiveResource);
}
void FbsApi::setFbsApiTariffsCalculateResource(std::shared_ptr<FbsApiTariffsCalculateResource> spFbsApiTariffsCalculateResource) {
    m_spFbsApiTariffsCalculateResource = spFbsApiTariffsCalculateResource;
    m_service->publish(m_spFbsApiTariffsCalculateResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdPrice-quarantineConfirmResource(std::shared_ptr<FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource> spFbsApiBusinessesBusinessIdPrice-quarantineConfirmResource) {
    m_spFbsApiBusinessesBusinessIdPrice-quarantineConfirmResource = spFbsApiBusinessesBusinessIdPrice-quarantineConfirmResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdPrice-quarantineConfirmResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdPrice-quarantineConfirmResource(std::shared_ptr<FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource> spFbsApiCampaignsCampaignIdPrice-quarantineConfirmResource) {
    m_spFbsApiCampaignsCampaignIdPrice-quarantineConfirmResource = spFbsApiCampaignsCampaignIdPrice-quarantineConfirmResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdPrice-quarantineConfirmResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource) {
    m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource = spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdChatsNewResource(std::shared_ptr<FbsApiBusinessesBusinessIdChatsNewResource> spFbsApiBusinessesBusinessIdChatsNewResource) {
    m_spFbsApiBusinessesBusinessIdChatsNewResource = spFbsApiBusinessesBusinessIdChatsNewResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdChatsNewResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOffersDeleteResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffersDeleteResource> spFbsApiCampaignsCampaignIdOffersDeleteResource) {
    m_spFbsApiCampaignsCampaignIdOffersDeleteResource = spFbsApiCampaignsCampaignIdOffersDeleteResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOffersDeleteResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource> spFbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource) {
    m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource = spFbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdHidden-offersDeleteResource(std::shared_ptr<FbsApiCampaignsCampaignIdHidden-offersDeleteResource> spFbsApiCampaignsCampaignIdHidden-offersDeleteResource) {
    m_spFbsApiCampaignsCampaignIdHidden-offersDeleteResource = spFbsApiCampaignsCampaignIdHidden-offersDeleteResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdHidden-offersDeleteResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdOffer-mappingsDeleteResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource> spFbsApiBusinessesBusinessIdOffer-mappingsDeleteResource) {
    m_spFbsApiBusinessesBusinessIdOffer-mappingsDeleteResource = spFbsApiBusinessesBusinessIdOffer-mappingsDeleteResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdOffer-mappingsDeleteResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource> spFbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource) {
    m_spFbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource = spFbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdPromosOffersDeleteResource(std::shared_ptr<FbsApiBusinessesBusinessIdPromosOffersDeleteResource> spFbsApiBusinessesBusinessIdPromosOffersDeleteResource) {
    m_spFbsApiBusinessesBusinessIdPromosOffersDeleteResource = spFbsApiBusinessesBusinessIdPromosOffersDeleteResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdPromosOffersDeleteResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource) {
    m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource = spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource) {
    m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource = spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource) {
    m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource = spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource) {
    m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource = spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource(std::shared_ptr<FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource> spFbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource) {
    m_spFbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource = spFbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource) {
    m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource = spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource);
}
void FbsApi::setFbsApiReportsBoost-consolidatedGenerateResource(std::shared_ptr<FbsApiReportsBoost-consolidatedGenerateResource> spFbsApiReportsBoost-consolidatedGenerateResource) {
    m_spFbsApiReportsBoost-consolidatedGenerateResource = spFbsApiReportsBoost-consolidatedGenerateResource;
    m_service->publish(m_spFbsApiReportsBoost-consolidatedGenerateResource);
}
void FbsApi::setFbsApiReportsCompetitors-positionGenerateResource(std::shared_ptr<FbsApiReportsCompetitors-positionGenerateResource> spFbsApiReportsCompetitors-positionGenerateResource) {
    m_spFbsApiReportsCompetitors-positionGenerateResource = spFbsApiReportsCompetitors-positionGenerateResource;
    m_service->publish(m_spFbsApiReportsCompetitors-positionGenerateResource);
}
void FbsApi::setFbsApiReportsGoods-feedbackGenerateResource(std::shared_ptr<FbsApiReportsGoods-feedbackGenerateResource> spFbsApiReportsGoods-feedbackGenerateResource) {
    m_spFbsApiReportsGoods-feedbackGenerateResource = spFbsApiReportsGoods-feedbackGenerateResource;
    m_service->publish(m_spFbsApiReportsGoods-feedbackGenerateResource);
}
void FbsApi::setFbsApiReportsGoods-realizationGenerateResource(std::shared_ptr<FbsApiReportsGoods-realizationGenerateResource> spFbsApiReportsGoods-realizationGenerateResource) {
    m_spFbsApiReportsGoods-realizationGenerateResource = spFbsApiReportsGoods-realizationGenerateResource;
    m_service->publish(m_spFbsApiReportsGoods-realizationGenerateResource);
}
void FbsApi::setFbsApiReportsDocumentsLabelsGenerateResource(std::shared_ptr<FbsApiReportsDocumentsLabelsGenerateResource> spFbsApiReportsDocumentsLabelsGenerateResource) {
    m_spFbsApiReportsDocumentsLabelsGenerateResource = spFbsApiReportsDocumentsLabelsGenerateResource;
    m_service->publish(m_spFbsApiReportsDocumentsLabelsGenerateResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource = spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource = spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource);
}
void FbsApi::setFbsApiReportsPricesGenerateResource(std::shared_ptr<FbsApiReportsPricesGenerateResource> spFbsApiReportsPricesGenerateResource) {
    m_spFbsApiReportsPricesGenerateResource = spFbsApiReportsPricesGenerateResource;
    m_service->publish(m_spFbsApiReportsPricesGenerateResource);
}
void FbsApi::setFbsApiReportsShelf-statisticsGenerateResource(std::shared_ptr<FbsApiReportsShelf-statisticsGenerateResource> spFbsApiReportsShelf-statisticsGenerateResource) {
    m_spFbsApiReportsShelf-statisticsGenerateResource = spFbsApiReportsShelf-statisticsGenerateResource;
    m_service->publish(m_spFbsApiReportsShelf-statisticsGenerateResource);
}
void FbsApi::setFbsApiReportsDocumentsShipment-listGenerateResource(std::shared_ptr<FbsApiReportsDocumentsShipment-listGenerateResource> spFbsApiReportsDocumentsShipment-listGenerateResource) {
    m_spFbsApiReportsDocumentsShipment-listGenerateResource = spFbsApiReportsDocumentsShipment-listGenerateResource;
    m_service->publish(m_spFbsApiReportsDocumentsShipment-listGenerateResource);
}
void FbsApi::setFbsApiReportsShows-salesGenerateResource(std::shared_ptr<FbsApiReportsShows-salesGenerateResource> spFbsApiReportsShows-salesGenerateResource) {
    m_spFbsApiReportsShows-salesGenerateResource = spFbsApiReportsShows-salesGenerateResource;
    m_service->publish(m_spFbsApiReportsShows-salesGenerateResource);
}
void FbsApi::setFbsApiReportsStocks-on-warehousesGenerateResource(std::shared_ptr<FbsApiReportsStocks-on-warehousesGenerateResource> spFbsApiReportsStocks-on-warehousesGenerateResource) {
    m_spFbsApiReportsStocks-on-warehousesGenerateResource = spFbsApiReportsStocks-on-warehousesGenerateResource;
    m_service->publish(m_spFbsApiReportsStocks-on-warehousesGenerateResource);
}
void FbsApi::setFbsApiReportsUnited-marketplace-servicesGenerateResource(std::shared_ptr<FbsApiReportsUnited-marketplace-servicesGenerateResource> spFbsApiReportsUnited-marketplace-servicesGenerateResource) {
    m_spFbsApiReportsUnited-marketplace-servicesGenerateResource = spFbsApiReportsUnited-marketplace-servicesGenerateResource;
    m_service->publish(m_spFbsApiReportsUnited-marketplace-servicesGenerateResource);
}
void FbsApi::setFbsApiReportsUnited-nettingGenerateResource(std::shared_ptr<FbsApiReportsUnited-nettingGenerateResource> spFbsApiReportsUnited-nettingGenerateResource) {
    m_spFbsApiReportsUnited-nettingGenerateResource = spFbsApiReportsUnited-nettingGenerateResource;
    m_service->publish(m_spFbsApiReportsUnited-nettingGenerateResource);
}
void FbsApi::setFbsApiReportsUnited-ordersGenerateResource(std::shared_ptr<FbsApiReportsUnited-ordersGenerateResource> spFbsApiReportsUnited-ordersGenerateResource) {
    m_spFbsApiReportsUnited-ordersGenerateResource = spFbsApiReportsUnited-ordersGenerateResource;
    m_service->publish(m_spFbsApiReportsUnited-ordersGenerateResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOffersAllResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffersAllResource> spFbsApiCampaignsCampaignIdOffersAllResource) {
    m_spFbsApiCampaignsCampaignIdOffersAllResource = spFbsApiCampaignsCampaignIdOffersAllResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOffersAllResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdBidsInfoResource(std::shared_ptr<FbsApiBusinessesBusinessIdBidsInfoResource> spFbsApiBusinessesBusinessIdBidsInfoResource) {
    m_spFbsApiBusinessesBusinessIdBidsInfoResource = spFbsApiBusinessesBusinessIdBidsInfoResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdBidsInfoResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdBidsRecommendationsResource(std::shared_ptr<FbsApiBusinessesBusinessIdBidsRecommendationsResource> spFbsApiBusinessesBusinessIdBidsRecommendationsResource) {
    m_spFbsApiBusinessesBusinessIdBidsRecommendationsResource = spFbsApiBusinessesBusinessIdBidsRecommendationsResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdBidsRecommendationsResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdPrice-quarantineResource(std::shared_ptr<FbsApiBusinessesBusinessIdPrice-quarantineResource> spFbsApiBusinessesBusinessIdPrice-quarantineResource) {
    m_spFbsApiBusinessesBusinessIdPrice-quarantineResource = spFbsApiBusinessesBusinessIdPrice-quarantineResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdPrice-quarantineResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdSettingsResource(std::shared_ptr<FbsApiBusinessesBusinessIdSettingsResource> spFbsApiBusinessesBusinessIdSettingsResource) {
    m_spFbsApiBusinessesBusinessIdSettingsResource = spFbsApiBusinessesBusinessIdSettingsResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdSettingsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdResource(std::shared_ptr<FbsApiCampaignsCampaignIdResource> spFbsApiCampaignsCampaignIdResource) {
    m_spFbsApiCampaignsCampaignIdResource = spFbsApiCampaignsCampaignIdResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdLoginsResource(std::shared_ptr<FbsApiCampaignsCampaignIdLoginsResource> spFbsApiCampaignsCampaignIdLoginsResource) {
    m_spFbsApiCampaignsCampaignIdLoginsResource = spFbsApiCampaignsCampaignIdLoginsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdLoginsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOffersResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffersResource> spFbsApiCampaignsCampaignIdOffersResource) {
    m_spFbsApiCampaignsCampaignIdOffersResource = spFbsApiCampaignsCampaignIdOffersResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOffersResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdPrice-quarantineResource(std::shared_ptr<FbsApiCampaignsCampaignIdPrice-quarantineResource> spFbsApiCampaignsCampaignIdPrice-quarantineResource) {
    m_spFbsApiCampaignsCampaignIdPrice-quarantineResource = spFbsApiCampaignsCampaignIdPrice-quarantineResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdPrice-quarantineResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdRegionResource(std::shared_ptr<FbsApiCampaignsCampaignIdRegionResource> spFbsApiCampaignsCampaignIdRegionResource) {
    m_spFbsApiCampaignsCampaignIdRegionResource = spFbsApiCampaignsCampaignIdRegionResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdRegionResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdSettingsResource(std::shared_ptr<FbsApiCampaignsCampaignIdSettingsResource> spFbsApiCampaignsCampaignIdSettingsResource) {
    m_spFbsApiCampaignsCampaignIdSettingsResource = spFbsApiCampaignsCampaignIdSettingsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdSettingsResource);
}
void FbsApi::setFbsApiCampaignsResource(std::shared_ptr<FbsApiCampaignsResource> spFbsApiCampaignsResource) {
    m_spFbsApiCampaignsResource = spFbsApiCampaignsResource;
    m_service->publish(m_spFbsApiCampaignsResource);
}
void FbsApi::setFbsApiCampaignsBy_loginLoginResource(std::shared_ptr<FbsApiCampaignsBy_loginLoginResource> spFbsApiCampaignsBy_loginLoginResource) {
    m_spFbsApiCampaignsBy_loginLoginResource = spFbsApiCampaignsBy_loginLoginResource;
    m_service->publish(m_spFbsApiCampaignsBy_loginLoginResource);
}
void FbsApi::setFbsApiCategoriesMax-sale-quantumResource(std::shared_ptr<FbsApiCategoriesMax-sale-quantumResource> spFbsApiCategoriesMax-sale-quantumResource) {
    m_spFbsApiCategoriesMax-sale-quantumResource = spFbsApiCategoriesMax-sale-quantumResource;
    m_service->publish(m_spFbsApiCategoriesMax-sale-quantumResource);
}
void FbsApi::setFbsApiCategoriesTreeResource(std::shared_ptr<FbsApiCategoriesTreeResource> spFbsApiCategoriesTreeResource) {
    m_spFbsApiCategoriesTreeResource = spFbsApiCategoriesTreeResource;
    m_service->publish(m_spFbsApiCategoriesTreeResource);
}
void FbsApi::setFbsApiCategoryCategoryIdParametersResource(std::shared_ptr<FbsApiCategoryCategoryIdParametersResource> spFbsApiCategoryCategoryIdParametersResource) {
    m_spFbsApiCategoryCategoryIdParametersResource = spFbsApiCategoryCategoryIdParametersResource;
    m_service->publish(m_spFbsApiCategoryCategoryIdParametersResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdChatsHistoryResource(std::shared_ptr<FbsApiBusinessesBusinessIdChatsHistoryResource> spFbsApiBusinessesBusinessIdChatsHistoryResource) {
    m_spFbsApiBusinessesBusinessIdChatsHistoryResource = spFbsApiBusinessesBusinessIdChatsHistoryResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdChatsHistoryResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdChatsResource(std::shared_ptr<FbsApiBusinessesBusinessIdChatsResource> spFbsApiBusinessesBusinessIdChatsResource) {
    m_spFbsApiBusinessesBusinessIdChatsResource = spFbsApiBusinessesBusinessIdChatsResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdChatsResource);
}
void FbsApi::setFbsApiDeliveryServicesResource(std::shared_ptr<FbsApiDeliveryServicesResource> spFbsApiDeliveryServicesResource) {
    m_spFbsApiDeliveryServicesResource = spFbsApiDeliveryServicesResource;
    m_service->publish(m_spFbsApiDeliveryServicesResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFeedsFeedIdResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdResource> spFbsApiCampaignsCampaignIdFeedsFeedIdResource) {
    m_spFbsApiCampaignsCampaignIdFeedsFeedIdResource = spFbsApiCampaignsCampaignIdFeedsFeedIdResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFeedsFeedIdResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource> spFbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource) {
    m_spFbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource = spFbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFeedbackUpdatesResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedbackUpdatesResource> spFbsApiCampaignsCampaignIdFeedbackUpdatesResource) {
    m_spFbsApiCampaignsCampaignIdFeedbackUpdatesResource = spFbsApiCampaignsCampaignIdFeedbackUpdatesResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFeedbackUpdatesResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFeedsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedsResource> spFbsApiCampaignsCampaignIdFeedsResource) {
    m_spFbsApiCampaignsCampaignIdFeedsResource = spFbsApiCampaignsCampaignIdFeedsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFeedsResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdGoods-feedbackCommentsResource(std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource> spFbsApiBusinessesBusinessIdGoods-feedbackCommentsResource) {
    m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsResource = spFbsApiBusinessesBusinessIdGoods-feedbackCommentsResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdGoods-feedbackResource(std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackResource> spFbsApiBusinessesBusinessIdGoods-feedbackResource) {
    m_spFbsApiBusinessesBusinessIdGoods-feedbackResource = spFbsApiBusinessesBusinessIdGoods-feedbackResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdGoods-feedbackResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdStatsSkusResource(std::shared_ptr<FbsApiCampaignsCampaignIdStatsSkusResource> spFbsApiCampaignsCampaignIdStatsSkusResource) {
    m_spFbsApiCampaignsCampaignIdStatsSkusResource = spFbsApiCampaignsCampaignIdStatsSkusResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdStatsSkusResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdOffer-cardsResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-cardsResource> spFbsApiBusinessesBusinessIdOffer-cardsResource) {
    m_spFbsApiBusinessesBusinessIdOffer-cardsResource = spFbsApiBusinessesBusinessIdOffer-cardsResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdOffer-cardsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOffer-mapping-entriesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-mapping-entriesResource> spFbsApiCampaignsCampaignIdOffer-mapping-entriesResource) {
    m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesResource = spFbsApiCampaignsCampaignIdOffer-mapping-entriesResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdOffer-mappingsResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsResource> spFbsApiBusinessesBusinessIdOffer-mappingsResource) {
    m_spFbsApiBusinessesBusinessIdOffer-mappingsResource = spFbsApiBusinessesBusinessIdOffer-mappingsResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdOffer-mappingsResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdOffersRecommendationsResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffersRecommendationsResource> spFbsApiBusinessesBusinessIdOffersRecommendationsResource) {
    m_spFbsApiBusinessesBusinessIdOffersRecommendationsResource = spFbsApiBusinessesBusinessIdOffersRecommendationsResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdOffersRecommendationsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdResource> spFbsApiCampaignsCampaignIdOrdersOrderIdResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdResource = spFbsApiCampaignsCampaignIdOrdersOrderIdResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource> spFbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource = spFbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource> spFbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource = spFbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource = spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersResource> spFbsApiCampaignsCampaignIdOrdersResource) {
    m_spFbsApiCampaignsCampaignIdOrdersResource = spFbsApiCampaignsCampaignIdOrdersResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdStatsOrdersResource(std::shared_ptr<FbsApiCampaignsCampaignIdStatsOrdersResource> spFbsApiCampaignsCampaignIdStatsOrdersResource) {
    m_spFbsApiCampaignsCampaignIdStatsOrdersResource = spFbsApiCampaignsCampaignIdStatsOrdersResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdStatsOrdersResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOffer-pricesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-pricesResource> spFbsApiCampaignsCampaignIdOffer-pricesResource) {
    m_spFbsApiCampaignsCampaignIdOffer-pricesResource = spFbsApiCampaignsCampaignIdOffer-pricesResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOffer-pricesResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdPromosOffersResource(std::shared_ptr<FbsApiBusinessesBusinessIdPromosOffersResource> spFbsApiBusinessesBusinessIdPromosOffersResource) {
    m_spFbsApiBusinessesBusinessIdPromosOffersResource = spFbsApiBusinessesBusinessIdPromosOffersResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdPromosOffersResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdPromosResource(std::shared_ptr<FbsApiBusinessesBusinessIdPromosResource> spFbsApiBusinessesBusinessIdPromosResource) {
    m_spFbsApiBusinessesBusinessIdPromosResource = spFbsApiBusinessesBusinessIdPromosResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdPromosResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdRatingsQualityDetailsResource(std::shared_ptr<FbsApiCampaignsCampaignIdRatingsQualityDetailsResource> spFbsApiCampaignsCampaignIdRatingsQualityDetailsResource) {
    m_spFbsApiCampaignsCampaignIdRatingsQualityDetailsResource = spFbsApiCampaignsCampaignIdRatingsQualityDetailsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdRatingsQualityDetailsResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdRatingsQualityResource(std::shared_ptr<FbsApiBusinessesBusinessIdRatingsQualityResource> spFbsApiBusinessesBusinessIdRatingsQualityResource) {
    m_spFbsApiBusinessesBusinessIdRatingsQualityResource = spFbsApiBusinessesBusinessIdRatingsQualityResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdRatingsQualityResource);
}
void FbsApi::setFbsApiReportsInfoReportIdResource(std::shared_ptr<FbsApiReportsInfoReportIdResource> spFbsApiReportsInfoReportIdResource) {
    m_spFbsApiReportsInfoReportIdResource = spFbsApiReportsInfoReportIdResource;
    m_service->publish(m_spFbsApiReportsInfoReportIdResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource = spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource = spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource = spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdReturnsResource(std::shared_ptr<FbsApiCampaignsCampaignIdReturnsResource> spFbsApiCampaignsCampaignIdReturnsResource) {
    m_spFbsApiCampaignsCampaignIdReturnsResource = spFbsApiCampaignsCampaignIdReturnsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdReturnsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource) {
    m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource = spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource) {
    m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource = spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOffersStocksResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffersStocksResource> spFbsApiCampaignsCampaignIdOffersStocksResource) {
    m_spFbsApiCampaignsCampaignIdOffersStocksResource = spFbsApiCampaignsCampaignIdOffersStocksResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOffersStocksResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource> spFbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource) {
    m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource = spFbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource> spFbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource) {
    m_spFbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource = spFbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource> spFbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource) {
    m_spFbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource = spFbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdWarehousesResource(std::shared_ptr<FbsApiBusinessesBusinessIdWarehousesResource> spFbsApiBusinessesBusinessIdWarehousesResource) {
    m_spFbsApiBusinessesBusinessIdWarehousesResource = spFbsApiBusinessesBusinessIdWarehousesResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdWarehousesResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource> spFbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource = spFbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdBidsResource(std::shared_ptr<FbsApiBusinessesBusinessIdBidsResource> spFbsApiBusinessesBusinessIdBidsResource) {
    m_spFbsApiBusinessesBusinessIdBidsResource = spFbsApiBusinessesBusinessIdBidsResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdBidsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdBidsResource(std::shared_ptr<FbsApiCampaignsCampaignIdBidsResource> spFbsApiCampaignsCampaignIdBidsResource) {
    m_spFbsApiCampaignsCampaignIdBidsResource = spFbsApiCampaignsCampaignIdBidsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdBidsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource> spFbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource) {
    m_spFbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource = spFbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource);
}
void FbsApi::setFbsApiRegionsRegionIdChildrenResource(std::shared_ptr<FbsApiRegionsRegionIdChildrenResource> spFbsApiRegionsRegionIdChildrenResource) {
    m_spFbsApiRegionsRegionIdChildrenResource = spFbsApiRegionsRegionIdChildrenResource;
    m_service->publish(m_spFbsApiRegionsRegionIdChildrenResource);
}
void FbsApi::setFbsApiRegionsRegionIdResource(std::shared_ptr<FbsApiRegionsRegionIdResource> spFbsApiRegionsRegionIdResource) {
    m_spFbsApiRegionsRegionIdResource = spFbsApiRegionsRegionIdResource;
    m_service->publish(m_spFbsApiRegionsRegionIdResource);
}
void FbsApi::setFbsApiRegionsResource(std::shared_ptr<FbsApiRegionsResource> spFbsApiRegionsResource) {
    m_spFbsApiRegionsResource = spFbsApiRegionsResource;
    m_service->publish(m_spFbsApiRegionsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFirst-mileShipmentsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsResource) {
    m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsResource = spFbsApiCampaignsCampaignIdFirst-mileShipmentsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdChatsFileSendResource(std::shared_ptr<FbsApiBusinessesBusinessIdChatsFileSendResource> spFbsApiBusinessesBusinessIdChatsFileSendResource) {
    m_spFbsApiBusinessesBusinessIdChatsFileSendResource = spFbsApiBusinessesBusinessIdChatsFileSendResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdChatsFileSendResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdChatsMessageResource(std::shared_ptr<FbsApiBusinessesBusinessIdChatsMessageResource> spFbsApiBusinessesBusinessIdChatsMessageResource) {
    m_spFbsApiBusinessesBusinessIdChatsMessageResource = spFbsApiBusinessesBusinessIdChatsMessageResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdChatsMessageResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFeedsFeedIdParamsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource> spFbsApiCampaignsCampaignIdFeedsFeedIdParamsResource) {
    m_spFbsApiCampaignsCampaignIdFeedsFeedIdParamsResource = spFbsApiCampaignsCampaignIdFeedsFeedIdParamsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFeedsFeedIdParamsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource> spFbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource = spFbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource = spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource) {
    m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource = spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource> spFbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource) {
    m_spFbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource = spFbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource) {
    m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource = spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdOffer-pricesUpdatesResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource> spFbsApiBusinessesBusinessIdOffer-pricesUpdatesResource) {
    m_spFbsApiBusinessesBusinessIdOffer-pricesUpdatesResource = spFbsApiBusinessesBusinessIdOffer-pricesUpdatesResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdOffer-pricesUpdatesResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOffersUpdateResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffersUpdateResource> spFbsApiCampaignsCampaignIdOffersUpdateResource) {
    m_spFbsApiCampaignsCampaignIdOffersUpdateResource = spFbsApiCampaignsCampaignIdOffersUpdateResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOffersUpdateResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource> spFbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource) {
    m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource = spFbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdOffer-cardsUpdateResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-cardsUpdateResource> spFbsApiBusinessesBusinessIdOffer-cardsUpdateResource) {
    m_spFbsApiBusinessesBusinessIdOffer-cardsUpdateResource = spFbsApiBusinessesBusinessIdOffer-cardsUpdateResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdOffer-cardsUpdateResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource> spFbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource) {
    m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource = spFbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdOffer-mappingsUpdateResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource> spFbsApiBusinessesBusinessIdOffer-mappingsUpdateResource) {
    m_spFbsApiBusinessesBusinessIdOffer-mappingsUpdateResource = spFbsApiBusinessesBusinessIdOffer-mappingsUpdateResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdOffer-mappingsUpdateResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdItemsResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource> spFbsApiCampaignsCampaignIdOrdersOrderIdItemsResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdItemsResource = spFbsApiCampaignsCampaignIdOrdersOrderIdItemsResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdItemsResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersOrderIdStatusResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource> spFbsApiCampaignsCampaignIdOrdersOrderIdStatusResource) {
    m_spFbsApiCampaignsCampaignIdOrdersOrderIdStatusResource = spFbsApiCampaignsCampaignIdOrdersOrderIdStatusResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersOrderIdStatusResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOrdersStatus-updateResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersStatus-updateResource> spFbsApiCampaignsCampaignIdOrdersStatus-updateResource) {
    m_spFbsApiCampaignsCampaignIdOrdersStatus-updateResource = spFbsApiCampaignsCampaignIdOrdersStatus-updateResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOrdersStatus-updateResource);
}
void FbsApi::setFbsApiCampaignsCampaignIdOffer-pricesUpdatesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource> spFbsApiCampaignsCampaignIdOffer-pricesUpdatesResource) {
    m_spFbsApiCampaignsCampaignIdOffer-pricesUpdatesResource = spFbsApiCampaignsCampaignIdOffer-pricesUpdatesResource;
    m_service->publish(m_spFbsApiCampaignsCampaignIdOffer-pricesUpdatesResource);
}
void FbsApi::setFbsApiBusinessesBusinessIdPromosOffersUpdateResource(std::shared_ptr<FbsApiBusinessesBusinessIdPromosOffersUpdateResource> spFbsApiBusinessesBusinessIdPromosOffersUpdateResource) {
    m_spFbsApiBusinessesBusinessIdPromosOffersUpdateResource = spFbsApiBusinessesBusinessIdPromosOffersUpdateResource;
    m_service->publish(m_spFbsApiBusinessesBusinessIdPromosOffersUpdateResource);
}


void FbsApi::publishDefaultResources() {
    if (!m_spFbsApiCampaignsCampaignIdHidden-offersResource) {
        setFbsApiCampaignsCampaignIdHidden-offersResource(std::make_shared<FbsApiCampaignsCampaignIdHidden-offersResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdOffer-mappingsArchiveResource) {
        setFbsApiBusinessesBusinessIdOffer-mappingsArchiveResource(std::make_shared<FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource>());
    }
    if (!m_spFbsApiTariffsCalculateResource) {
        setFbsApiTariffsCalculateResource(std::make_shared<FbsApiTariffsCalculateResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdPrice-quarantineConfirmResource) {
        setFbsApiBusinessesBusinessIdPrice-quarantineConfirmResource(std::make_shared<FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdPrice-quarantineConfirmResource) {
        setFbsApiCampaignsCampaignIdPrice-quarantineConfirmResource(std::make_shared<FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource) {
        setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource(std::make_shared<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdChatsNewResource) {
        setFbsApiBusinessesBusinessIdChatsNewResource(std::make_shared<FbsApiBusinessesBusinessIdChatsNewResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOffersDeleteResource) {
        setFbsApiCampaignsCampaignIdOffersDeleteResource(std::make_shared<FbsApiCampaignsCampaignIdOffersDeleteResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource) {
        setFbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(std::make_shared<FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdHidden-offersDeleteResource) {
        setFbsApiCampaignsCampaignIdHidden-offersDeleteResource(std::make_shared<FbsApiCampaignsCampaignIdHidden-offersDeleteResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdOffer-mappingsDeleteResource) {
        setFbsApiBusinessesBusinessIdOffer-mappingsDeleteResource(std::make_shared<FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource) {
        setFbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(std::make_shared<FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdPromosOffersDeleteResource) {
        setFbsApiBusinessesBusinessIdPromosOffersDeleteResource(std::make_shared<FbsApiBusinessesBusinessIdPromosOffersDeleteResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource) {
        setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource(std::make_shared<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource) {
        setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource(std::make_shared<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource) {
        setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource(std::make_shared<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource) {
        setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource(std::make_shared<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource) {
        setFbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource(std::make_shared<FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource) {
        setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource(std::make_shared<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource>());
    }
    if (!m_spFbsApiReportsBoost-consolidatedGenerateResource) {
        setFbsApiReportsBoost-consolidatedGenerateResource(std::make_shared<FbsApiReportsBoost-consolidatedGenerateResource>());
    }
    if (!m_spFbsApiReportsCompetitors-positionGenerateResource) {
        setFbsApiReportsCompetitors-positionGenerateResource(std::make_shared<FbsApiReportsCompetitors-positionGenerateResource>());
    }
    if (!m_spFbsApiReportsGoods-feedbackGenerateResource) {
        setFbsApiReportsGoods-feedbackGenerateResource(std::make_shared<FbsApiReportsGoods-feedbackGenerateResource>());
    }
    if (!m_spFbsApiReportsGoods-realizationGenerateResource) {
        setFbsApiReportsGoods-realizationGenerateResource(std::make_shared<FbsApiReportsGoods-realizationGenerateResource>());
    }
    if (!m_spFbsApiReportsDocumentsLabelsGenerateResource) {
        setFbsApiReportsDocumentsLabelsGenerateResource(std::make_shared<FbsApiReportsDocumentsLabelsGenerateResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource>());
    }
    if (!m_spFbsApiReportsPricesGenerateResource) {
        setFbsApiReportsPricesGenerateResource(std::make_shared<FbsApiReportsPricesGenerateResource>());
    }
    if (!m_spFbsApiReportsShelf-statisticsGenerateResource) {
        setFbsApiReportsShelf-statisticsGenerateResource(std::make_shared<FbsApiReportsShelf-statisticsGenerateResource>());
    }
    if (!m_spFbsApiReportsDocumentsShipment-listGenerateResource) {
        setFbsApiReportsDocumentsShipment-listGenerateResource(std::make_shared<FbsApiReportsDocumentsShipment-listGenerateResource>());
    }
    if (!m_spFbsApiReportsShows-salesGenerateResource) {
        setFbsApiReportsShows-salesGenerateResource(std::make_shared<FbsApiReportsShows-salesGenerateResource>());
    }
    if (!m_spFbsApiReportsStocks-on-warehousesGenerateResource) {
        setFbsApiReportsStocks-on-warehousesGenerateResource(std::make_shared<FbsApiReportsStocks-on-warehousesGenerateResource>());
    }
    if (!m_spFbsApiReportsUnited-marketplace-servicesGenerateResource) {
        setFbsApiReportsUnited-marketplace-servicesGenerateResource(std::make_shared<FbsApiReportsUnited-marketplace-servicesGenerateResource>());
    }
    if (!m_spFbsApiReportsUnited-nettingGenerateResource) {
        setFbsApiReportsUnited-nettingGenerateResource(std::make_shared<FbsApiReportsUnited-nettingGenerateResource>());
    }
    if (!m_spFbsApiReportsUnited-ordersGenerateResource) {
        setFbsApiReportsUnited-ordersGenerateResource(std::make_shared<FbsApiReportsUnited-ordersGenerateResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOffersAllResource) {
        setFbsApiCampaignsCampaignIdOffersAllResource(std::make_shared<FbsApiCampaignsCampaignIdOffersAllResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdBidsInfoResource) {
        setFbsApiBusinessesBusinessIdBidsInfoResource(std::make_shared<FbsApiBusinessesBusinessIdBidsInfoResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdBidsRecommendationsResource) {
        setFbsApiBusinessesBusinessIdBidsRecommendationsResource(std::make_shared<FbsApiBusinessesBusinessIdBidsRecommendationsResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdPrice-quarantineResource) {
        setFbsApiBusinessesBusinessIdPrice-quarantineResource(std::make_shared<FbsApiBusinessesBusinessIdPrice-quarantineResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdSettingsResource) {
        setFbsApiBusinessesBusinessIdSettingsResource(std::make_shared<FbsApiBusinessesBusinessIdSettingsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdResource) {
        setFbsApiCampaignsCampaignIdResource(std::make_shared<FbsApiCampaignsCampaignIdResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdLoginsResource) {
        setFbsApiCampaignsCampaignIdLoginsResource(std::make_shared<FbsApiCampaignsCampaignIdLoginsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOffersResource) {
        setFbsApiCampaignsCampaignIdOffersResource(std::make_shared<FbsApiCampaignsCampaignIdOffersResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdPrice-quarantineResource) {
        setFbsApiCampaignsCampaignIdPrice-quarantineResource(std::make_shared<FbsApiCampaignsCampaignIdPrice-quarantineResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdRegionResource) {
        setFbsApiCampaignsCampaignIdRegionResource(std::make_shared<FbsApiCampaignsCampaignIdRegionResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdSettingsResource) {
        setFbsApiCampaignsCampaignIdSettingsResource(std::make_shared<FbsApiCampaignsCampaignIdSettingsResource>());
    }
    if (!m_spFbsApiCampaignsResource) {
        setFbsApiCampaignsResource(std::make_shared<FbsApiCampaignsResource>());
    }
    if (!m_spFbsApiCampaignsBy_loginLoginResource) {
        setFbsApiCampaignsBy_loginLoginResource(std::make_shared<FbsApiCampaignsBy_loginLoginResource>());
    }
    if (!m_spFbsApiCategoriesMax-sale-quantumResource) {
        setFbsApiCategoriesMax-sale-quantumResource(std::make_shared<FbsApiCategoriesMax-sale-quantumResource>());
    }
    if (!m_spFbsApiCategoriesTreeResource) {
        setFbsApiCategoriesTreeResource(std::make_shared<FbsApiCategoriesTreeResource>());
    }
    if (!m_spFbsApiCategoryCategoryIdParametersResource) {
        setFbsApiCategoryCategoryIdParametersResource(std::make_shared<FbsApiCategoryCategoryIdParametersResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdChatsHistoryResource) {
        setFbsApiBusinessesBusinessIdChatsHistoryResource(std::make_shared<FbsApiBusinessesBusinessIdChatsHistoryResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdChatsResource) {
        setFbsApiBusinessesBusinessIdChatsResource(std::make_shared<FbsApiBusinessesBusinessIdChatsResource>());
    }
    if (!m_spFbsApiDeliveryServicesResource) {
        setFbsApiDeliveryServicesResource(std::make_shared<FbsApiDeliveryServicesResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFeedsFeedIdResource) {
        setFbsApiCampaignsCampaignIdFeedsFeedIdResource(std::make_shared<FbsApiCampaignsCampaignIdFeedsFeedIdResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource) {
        setFbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource(std::make_shared<FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFeedbackUpdatesResource) {
        setFbsApiCampaignsCampaignIdFeedbackUpdatesResource(std::make_shared<FbsApiCampaignsCampaignIdFeedbackUpdatesResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFeedsResource) {
        setFbsApiCampaignsCampaignIdFeedsResource(std::make_shared<FbsApiCampaignsCampaignIdFeedsResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsResource) {
        setFbsApiBusinessesBusinessIdGoods-feedbackCommentsResource(std::make_shared<FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdGoods-feedbackResource) {
        setFbsApiBusinessesBusinessIdGoods-feedbackResource(std::make_shared<FbsApiBusinessesBusinessIdGoods-feedbackResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdStatsSkusResource) {
        setFbsApiCampaignsCampaignIdStatsSkusResource(std::make_shared<FbsApiCampaignsCampaignIdStatsSkusResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdOffer-cardsResource) {
        setFbsApiBusinessesBusinessIdOffer-cardsResource(std::make_shared<FbsApiBusinessesBusinessIdOffer-cardsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesResource) {
        setFbsApiCampaignsCampaignIdOffer-mapping-entriesResource(std::make_shared<FbsApiCampaignsCampaignIdOffer-mapping-entriesResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdOffer-mappingsResource) {
        setFbsApiBusinessesBusinessIdOffer-mappingsResource(std::make_shared<FbsApiBusinessesBusinessIdOffer-mappingsResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdOffersRecommendationsResource) {
        setFbsApiBusinessesBusinessIdOffersRecommendationsResource(std::make_shared<FbsApiBusinessesBusinessIdOffersRecommendationsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersResource) {
        setFbsApiCampaignsCampaignIdOrdersResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdStatsOrdersResource) {
        setFbsApiCampaignsCampaignIdStatsOrdersResource(std::make_shared<FbsApiCampaignsCampaignIdStatsOrdersResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOffer-pricesResource) {
        setFbsApiCampaignsCampaignIdOffer-pricesResource(std::make_shared<FbsApiCampaignsCampaignIdOffer-pricesResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdPromosOffersResource) {
        setFbsApiBusinessesBusinessIdPromosOffersResource(std::make_shared<FbsApiBusinessesBusinessIdPromosOffersResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdPromosResource) {
        setFbsApiBusinessesBusinessIdPromosResource(std::make_shared<FbsApiBusinessesBusinessIdPromosResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdRatingsQualityDetailsResource) {
        setFbsApiCampaignsCampaignIdRatingsQualityDetailsResource(std::make_shared<FbsApiCampaignsCampaignIdRatingsQualityDetailsResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdRatingsQualityResource) {
        setFbsApiBusinessesBusinessIdRatingsQualityResource(std::make_shared<FbsApiBusinessesBusinessIdRatingsQualityResource>());
    }
    if (!m_spFbsApiReportsInfoReportIdResource) {
        setFbsApiReportsInfoReportIdResource(std::make_shared<FbsApiReportsInfoReportIdResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdReturnsResource) {
        setFbsApiCampaignsCampaignIdReturnsResource(std::make_shared<FbsApiCampaignsCampaignIdReturnsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource) {
        setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource(std::make_shared<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource) {
        setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource(std::make_shared<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOffersStocksResource) {
        setFbsApiCampaignsCampaignIdOffersStocksResource(std::make_shared<FbsApiCampaignsCampaignIdOffersStocksResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource) {
        setFbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(std::make_shared<FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource) {
        setFbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(std::make_shared<FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource) {
        setFbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource(std::make_shared<FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdWarehousesResource) {
        setFbsApiBusinessesBusinessIdWarehousesResource(std::make_shared<FbsApiBusinessesBusinessIdWarehousesResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdBidsResource) {
        setFbsApiBusinessesBusinessIdBidsResource(std::make_shared<FbsApiBusinessesBusinessIdBidsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdBidsResource) {
        setFbsApiCampaignsCampaignIdBidsResource(std::make_shared<FbsApiCampaignsCampaignIdBidsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource) {
        setFbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource(std::make_shared<FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource>());
    }
    if (!m_spFbsApiRegionsRegionIdChildrenResource) {
        setFbsApiRegionsRegionIdChildrenResource(std::make_shared<FbsApiRegionsRegionIdChildrenResource>());
    }
    if (!m_spFbsApiRegionsRegionIdResource) {
        setFbsApiRegionsRegionIdResource(std::make_shared<FbsApiRegionsRegionIdResource>());
    }
    if (!m_spFbsApiRegionsResource) {
        setFbsApiRegionsResource(std::make_shared<FbsApiRegionsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsResource) {
        setFbsApiCampaignsCampaignIdFirst-mileShipmentsResource(std::make_shared<FbsApiCampaignsCampaignIdFirst-mileShipmentsResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdChatsFileSendResource) {
        setFbsApiBusinessesBusinessIdChatsFileSendResource(std::make_shared<FbsApiBusinessesBusinessIdChatsFileSendResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdChatsMessageResource) {
        setFbsApiBusinessesBusinessIdChatsMessageResource(std::make_shared<FbsApiBusinessesBusinessIdChatsMessageResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFeedsFeedIdParamsResource) {
        setFbsApiCampaignsCampaignIdFeedsFeedIdParamsResource(std::make_shared<FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource) {
        setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource(std::make_shared<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource) {
        setFbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(std::make_shared<FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource) {
        setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource(std::make_shared<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdOffer-pricesUpdatesResource) {
        setFbsApiBusinessesBusinessIdOffer-pricesUpdatesResource(std::make_shared<FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOffersUpdateResource) {
        setFbsApiCampaignsCampaignIdOffersUpdateResource(std::make_shared<FbsApiCampaignsCampaignIdOffersUpdateResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource) {
        setFbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(std::make_shared<FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdOffer-cardsUpdateResource) {
        setFbsApiBusinessesBusinessIdOffer-cardsUpdateResource(std::make_shared<FbsApiBusinessesBusinessIdOffer-cardsUpdateResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource) {
        setFbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(std::make_shared<FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdOffer-mappingsUpdateResource) {
        setFbsApiBusinessesBusinessIdOffer-mappingsUpdateResource(std::make_shared<FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdItemsResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdItemsResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersOrderIdStatusResource) {
        setFbsApiCampaignsCampaignIdOrdersOrderIdStatusResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOrdersStatus-updateResource) {
        setFbsApiCampaignsCampaignIdOrdersStatus-updateResource(std::make_shared<FbsApiCampaignsCampaignIdOrdersStatus-updateResource>());
    }
    if (!m_spFbsApiCampaignsCampaignIdOffer-pricesUpdatesResource) {
        setFbsApiCampaignsCampaignIdOffer-pricesUpdatesResource(std::make_shared<FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource>());
    }
    if (!m_spFbsApiBusinessesBusinessIdPromosOffersUpdateResource) {
        setFbsApiBusinessesBusinessIdPromosOffersUpdateResource(std::make_shared<FbsApiBusinessesBusinessIdPromosOffersUpdateResource>());
    }
}

std::shared_ptr<restbed::Service> FbsApi::service() {
    return m_service;
}


}
}
}
}

