/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "ShipmentsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ShipmentsApiException::ShipmentsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int ShipmentsApiException::getStatus() const
{
    return m_status;
}
const char* ShipmentsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/confirm/");
	this->set_method_handler("POST",
		std::bind(&ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto confirmShipmentRequest = extractJsonModelBodyParam<ConfirmShipmentRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, shipmentId, confirmShipmentRequest);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::handler_POST(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<ConfirmShipmentRequest> const & confirmShipmentRequest)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/act/");
	this->set_method_handler("GET",
		std::bind(&ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handler_GET_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Акт приема-передачи для отгрузки в формате PDF." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/discrepancy-act/");
	this->set_method_handler("GET",
		std::bind(&ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handler_GET_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Акт расхождений в формате XLSX." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/inbound-act/");
	this->set_method_handler("GET",
		std::bind(&ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handler_GET_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Акт в формате PDF." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/pallet/labels/");
	this->set_method_handler("GET",
		std::bind(&ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);

    // Getting the query params


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId, format);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "PDF‑файл с ярлыками на все упаковки в отгрузке." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<ShipmentPalletLabelPageFormatType> const & format)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/shipments/reception-transfer-act/");
	this->set_method_handler("GET",
		std::bind(&ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handler_GET_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::~ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const int32_t warehouseId = getQueryParam_warehouseId(request);


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, warehouseId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Акт приема-передачи в формате PDF." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::handler_GET(
        int64_t const & campaignId, int32_t const & warehouseId)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/transportation-waybill/");
	this->set_method_handler("GET",
		std::bind(&ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handler_GET_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Транспортная накладная в формате XLSX." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/");
	this->set_method_handler("GET",
		std::bind(&ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);

    // Getting the query params
    const bool cancelledOrders = getQueryParam_cancelledOrders(request);


    int status_code = 500;
    std::shared_ptr<GetShipmentResponse> resultObject = std::make_shared<GetShipmentResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId, cancelledOrders);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Найденная отгрузка." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetShipmentResponse>> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId, bool const & cancelledOrders)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/orders/info/");
	this->set_method_handler("GET",
		std::bind(&ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handler_GET_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::shared_ptr<GetShipmentOrdersInfoResponse> resultObject = std::make_shared<GetShipmentOrdersInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, shipmentId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация по годным/негодным для печати ярлыков заказам в отгрузке." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetShipmentOrdersInfoResponse>> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/");
	this->set_method_handler("PUT",
		std::bind(&ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto searchShipmentsRequest = extractJsonModelBodyParam<SearchShipmentsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<SearchShipmentsResponse> resultObject = std::make_shared<SearchShipmentsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, searchShipmentsRequest, pageToken, limit);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Найденные отгрузки." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<SearchShipmentsResponse>> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::handler_PUT(
        int64_t const & campaignId, std::shared_ptr<SearchShipmentsRequest> const & searchShipmentsRequest, std::string const & pageToken, int32_t const & limit)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/pallets/");
	this->set_method_handler("PUT",
		std::bind(&ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setShipmentPalletsCountRequest = extractJsonModelBodyParam<SetShipmentPalletsCountRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, shipmentId, setShipmentPalletsCountRequest);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество упаковок записано." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::handler_PUT(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<SetShipmentPalletsCountRequest> const & setShipmentPalletsCountRequest)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/orders/transfer/");
	this->set_method_handler("POST",
		std::bind(&ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource()
{
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto transferOrdersFromShipmentRequest = extractJsonModelBodyParam<TransferOrdersFromShipmentRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, shipmentId, transferOrdersFromShipmentRequest);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Запрос на перенос заказов проверен и принят, и они будут перенесены спустя несколько минут." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::handler_POST(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<TransferOrdersFromShipmentRequest> const & transferOrdersFromShipmentRequest)
{
    throw ShipmentsApiException(501, "Not implemented");
}


std::string ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

ShipmentsApi::ShipmentsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

ShipmentsApi::~ShipmentsApi() {}

void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource) {
    m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource = spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource) {
    m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource = spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource) {
    m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource = spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource) {
    m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource = spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource) {
    m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource = spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource> spShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource) {
    m_spShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource = spShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource) {
    m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource = spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource) {
    m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource = spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource) {
    m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource = spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource) {
    m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource = spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource) {
    m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource = spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource) {
    m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource = spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource;
    m_service->publish(m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource);
}


void ShipmentsApi::publishDefaultResources() {
    if (!m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource) {
        setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource(std::make_shared<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource>());
    }
    if (!m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource) {
        setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource(std::make_shared<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource>());
    }
    if (!m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource) {
        setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource(std::make_shared<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource>());
    }
    if (!m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource) {
        setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource(std::make_shared<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource>());
    }
    if (!m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource) {
        setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource(std::make_shared<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource>());
    }
    if (!m_spShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource) {
        setShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource(std::make_shared<ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource>());
    }
    if (!m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource) {
        setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource(std::make_shared<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource>());
    }
    if (!m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource) {
        setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource(std::make_shared<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource>());
    }
    if (!m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource) {
        setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource(std::make_shared<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource>());
    }
    if (!m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource) {
        setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource(std::make_shared<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource>());
    }
    if (!m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource) {
        setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource(std::make_shared<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource>());
    }
    if (!m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource) {
        setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource(std::make_shared<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource>());
    }
}

std::shared_ptr<restbed::Service> ShipmentsApi::service() {
    return m_service;
}


}
}
}
}

