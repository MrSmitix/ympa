/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ShipmentsApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string ShipmentsApi::base = "";

ShipmentsApi::ShipmentsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void ShipmentsApi::init() {
    setupRoutes();
}

void ShipmentsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(*router, base + "/campaigns/:campaignId/first-mile/shipments/:shipmentId/confirm", Routes::bind(&ShipmentsApi::confirm_shipment_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/first-mile/shipments/:shipmentId/act", Routes::bind(&ShipmentsApi::download_shipment_act_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/first-mile/shipments/:shipmentId/discrepancy-act", Routes::bind(&ShipmentsApi::download_shipment_discrepancy_act_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/first-mile/shipments/:shipmentId/inbound-act", Routes::bind(&ShipmentsApi::download_shipment_inbound_act_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/first-mile/shipments/:shipmentId/pallet/labels", Routes::bind(&ShipmentsApi::download_shipment_pallet_labels_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/shipments/reception-transfer-act", Routes::bind(&ShipmentsApi::download_shipment_reception_transfer_act_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/first-mile/shipments/:shipmentId/transportation-waybill", Routes::bind(&ShipmentsApi::download_shipment_transportation_waybill_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/first-mile/shipments/:shipmentId", Routes::bind(&ShipmentsApi::get_shipment_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/first-mile/shipments/:shipmentId/orders/info", Routes::bind(&ShipmentsApi::get_shipment_orders_info_handler, this));
    Routes::Put(*router, base + "/campaigns/:campaignId/first-mile/shipments", Routes::bind(&ShipmentsApi::search_shipments_handler, this));
    Routes::Put(*router, base + "/campaigns/:campaignId/first-mile/shipments/:shipmentId/pallets", Routes::bind(&ShipmentsApi::set_shipment_pallets_count_handler, this));
    Routes::Post(*router, base + "/campaigns/:campaignId/first-mile/shipments/:shipmentId/orders/transfer", Routes::bind(&ShipmentsApi::transfer_orders_from_shipment_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&ShipmentsApi::shipments_api_default_handler, this));
}

void ShipmentsApi::handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleParsingException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> ShipmentsApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

void ShipmentsApi::handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleOperationException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> ShipmentsApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void ShipmentsApi::confirm_shipment_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto shipmentId = request.param(":shipmentId").as<int64_t>();
    
    // Getting the body param
    
    ConfirmShipmentRequest confirmShipmentRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(confirmShipmentRequest);
        confirmShipmentRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->confirm_shipment(campaignId, shipmentId, confirmShipmentRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ShipmentsApi::download_shipment_act_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto shipmentId = request.param(":shipmentId").as<int64_t>();
    
    try {
        this->download_shipment_act(campaignId, shipmentId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ShipmentsApi::download_shipment_discrepancy_act_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto shipmentId = request.param(":shipmentId").as<int64_t>();
    
    try {
        this->download_shipment_discrepancy_act(campaignId, shipmentId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ShipmentsApi::download_shipment_inbound_act_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto shipmentId = request.param(":shipmentId").as<int64_t>();
    
    try {
        this->download_shipment_inbound_act(campaignId, shipmentId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ShipmentsApi::download_shipment_pallet_labels_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto shipmentId = request.param(":shipmentId").as<int64_t>();
    
    // Getting the query params
    auto formatQuery = request.query().get("format");
    std::optional<ShipmentPalletLabelPageFormatType> format;
    if(formatQuery.has_value()){
        ShipmentPalletLabelPageFormatType valueQuery_instance;
        if(fromStringValue(formatQuery.value(), valueQuery_instance)){
            format = valueQuery_instance;
        }
    }
    
    try {
        this->download_shipment_pallet_labels(campaignId, shipmentId, format, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ShipmentsApi::download_shipment_reception_transfer_act_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    
    // Getting the query params
    auto warehouseIdQuery = request.query().get("warehouse_id");
    std::optional<int32_t> warehouseId;
    if(warehouseIdQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(warehouseIdQuery.value(), valueQuery_instance)){
            warehouseId = valueQuery_instance;
        }
    }
    
    try {
        this->download_shipment_reception_transfer_act(campaignId, warehouseId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ShipmentsApi::download_shipment_transportation_waybill_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto shipmentId = request.param(":shipmentId").as<int64_t>();
    
    try {
        this->download_shipment_transportation_waybill(campaignId, shipmentId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ShipmentsApi::get_shipment_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto shipmentId = request.param(":shipmentId").as<int64_t>();
    
    // Getting the query params
    auto cancelledOrdersQuery = request.query().get("cancelledOrders");
    std::optional<bool> cancelledOrders;
    if(cancelledOrdersQuery.has_value()){
        bool valueQuery_instance;
        if(fromStringValue(cancelledOrdersQuery.value(), valueQuery_instance)){
            cancelledOrders = valueQuery_instance;
        }
    }
    
    try {
        this->get_shipment(campaignId, shipmentId, cancelledOrders, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ShipmentsApi::get_shipment_orders_info_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto shipmentId = request.param(":shipmentId").as<int64_t>();
    
    try {
        this->get_shipment_orders_info(campaignId, shipmentId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ShipmentsApi::search_shipments_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    
    // Getting the body param
    
    SearchShipmentsRequest searchShipmentsRequest;
    
    // Getting the query params
    auto pageTokenQuery = request.query().get("page_token");
    std::optional<std::string> pageToken;
    if(pageTokenQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(pageTokenQuery.value(), valueQuery_instance)){
            pageToken = valueQuery_instance;
        }
    }
    auto limitQuery = request.query().get("limit");
    std::optional<int32_t> limit;
    if(limitQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(limitQuery.value(), valueQuery_instance)){
            limit = valueQuery_instance;
        }
    }
    
    try {
        nlohmann::json::parse(request.body()).get_to(searchShipmentsRequest);
        searchShipmentsRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->search_shipments(campaignId, searchShipmentsRequest, pageToken, limit, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ShipmentsApi::set_shipment_pallets_count_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto shipmentId = request.param(":shipmentId").as<int64_t>();
    
    // Getting the body param
    
    SetShipmentPalletsCountRequest setShipmentPalletsCountRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(setShipmentPalletsCountRequest);
        setShipmentPalletsCountRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->set_shipment_pallets_count(campaignId, shipmentId, setShipmentPalletsCountRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ShipmentsApi::transfer_orders_from_shipment_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto shipmentId = request.param(":shipmentId").as<int64_t>();
    
    // Getting the body param
    
    TransferOrdersFromShipmentRequest transferOrdersFromShipmentRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(transferOrdersFromShipmentRequest);
        transferOrdersFromShipmentRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->transfer_orders_from_shipment(campaignId, shipmentId, transferOrdersFromShipmentRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void ShipmentsApi::shipments_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

