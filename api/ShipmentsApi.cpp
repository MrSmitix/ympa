/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "ShipmentsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

ShipmentsApiException::ShipmentsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int ShipmentsApiException::getStatus() const
{
    return m_status;
}
const char* ShipmentsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace ShipmentsApiResources {
CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/confirm");
	this->set_method_handler("POST",
		std::bind(&CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto confirmShipmentRequest = extractJsonModelBodyParam<ConfirmShipmentRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t shipmentId = request->get_path_parameter("shipmentId", 0L);
    
    int status_code = 500;
    EmptyApiResponse resultObject = EmptyApiResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(campaignId, shipmentId, confirmShipmentRequest);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, EmptyApiResponse> CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::handler_POST(
        int64_t & campaignId, int64_t & shipmentId, ConfirmShipmentRequest & confirmShipmentRequest)
{
    return handler_POST_func(campaignId, shipmentId, confirmShipmentRequest);
}


std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/act");
	this->set_method_handler("GET",
		std::bind(&CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t shipmentId = request->get_path_parameter("shipmentId", 0L);
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, shipmentId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/pdf","application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::handler_GET(
        int64_t & campaignId, int64_t & shipmentId)
{
    return handler_GET_func(campaignId, shipmentId);
}


std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/discrepancy-act");
	this->set_method_handler("GET",
		std::bind(&CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t shipmentId = request->get_path_parameter("shipmentId", 0L);
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, shipmentId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/vnd.ms-excel","application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::handler_GET(
        int64_t & campaignId, int64_t & shipmentId)
{
    return handler_GET_func(campaignId, shipmentId);
}


std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/inbound-act");
	this->set_method_handler("GET",
		std::bind(&CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t shipmentId = request->get_path_parameter("shipmentId", 0L);
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, shipmentId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/pdf","application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::handler_GET(
        int64_t & campaignId, int64_t & shipmentId)
{
    return handler_GET_func(campaignId, shipmentId);
}


std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/pallet/labels");
	this->set_method_handler("GET",
		std::bind(&CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t shipmentId = request->get_path_parameter("shipmentId", 0L);
    // Getting the query params
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, shipmentId, format);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/pdf","application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::handler_GET(
        int64_t & campaignId, int64_t & shipmentId, ShipmentPalletLabelPageFormatType & format)
{
    return handler_GET_func(campaignId, shipmentId, format);
}


std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdShipmentsReception_transfer_actResource::CampaignsCampaignIdShipmentsReception_transfer_actResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/shipments/reception-transfer-act");
	this->set_method_handler("GET",
		std::bind(&CampaignsCampaignIdShipmentsReception_transfer_actResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdShipmentsReception_transfer_actResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdShipmentsReception_transfer_actResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdShipmentsReception_transfer_actResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdShipmentsReception_transfer_actResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdShipmentsReception_transfer_actResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdShipmentsReception_transfer_actResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdShipmentsReception_transfer_actResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    // Getting the query params
    int32_t warehouseId = request->get_query_parameter("warehouseId", 0);
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, warehouseId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/pdf","application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> CampaignsCampaignIdShipmentsReception_transfer_actResource::handler_GET(
        int64_t & campaignId, int32_t & warehouseId)
{
    return handler_GET_func(campaignId, warehouseId);
}


std::string CampaignsCampaignIdShipmentsReception_transfer_actResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdShipmentsReception_transfer_actResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/transportation-waybill");
	this->set_method_handler("GET",
		std::bind(&CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t shipmentId = request->get_path_parameter("shipmentId", 0L);
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, shipmentId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/vnd.ms-excel","application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::handler_GET(
        int64_t & campaignId, int64_t & shipmentId)
{
    return handler_GET_func(campaignId, shipmentId);
}


std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}");
	this->set_method_handler("GET",
		std::bind(&CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t shipmentId = request->get_path_parameter("shipmentId", 0L);
    // Getting the query params
    bool cancelledOrders = request->get_query_parameter("cancelledOrders", true);
    
    int status_code = 500;
    GetShipmentResponse resultObject = GetShipmentResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, shipmentId, cancelledOrders);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, GetShipmentResponse> CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::handler_GET(
        int64_t & campaignId, int64_t & shipmentId, bool & cancelledOrders)
{
    return handler_GET_func(campaignId, shipmentId, cancelledOrders);
}


std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/orders/info");
	this->set_method_handler("GET",
		std::bind(&CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t shipmentId = request->get_path_parameter("shipmentId", 0L);
    
    int status_code = 500;
    GetShipmentOrdersInfoResponse resultObject = GetShipmentOrdersInfoResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, shipmentId);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, GetShipmentOrdersInfoResponse> CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::handler_GET(
        int64_t & campaignId, int64_t & shipmentId)
{
    return handler_GET_func(campaignId, shipmentId);
}


std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdFirst_mileShipmentsResource::CampaignsCampaignIdFirst_mileShipmentsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments");
	this->set_method_handler("PUT",
		std::bind(&CampaignsCampaignIdFirst_mileShipmentsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdFirst_mileShipmentsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdFirst_mileShipmentsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdFirst_mileShipmentsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdFirst_mileShipmentsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto searchShipmentsRequest = extractJsonModelBodyParam<SearchShipmentsRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    // Getting the query params
    std::string pageToken = request->get_query_parameter("pageToken", "");
    int32_t limit = request->get_query_parameter("limit", 0);
    
    int status_code = 500;
    SearchShipmentsResponse resultObject = SearchShipmentsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PUT(campaignId, searchShipmentsRequest, pageToken, limit);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, SearchShipmentsResponse> CampaignsCampaignIdFirst_mileShipmentsResource::handler_PUT(
        int64_t & campaignId, SearchShipmentsRequest & searchShipmentsRequest, std::string & pageToken, int32_t & limit)
{
    return handler_PUT_func(campaignId, searchShipmentsRequest, pageToken, limit);
}


std::string CampaignsCampaignIdFirst_mileShipmentsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdFirst_mileShipmentsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/pallets");
	this->set_method_handler("PUT",
		std::bind(&CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto setShipmentPalletsCountRequest = extractJsonModelBodyParam<SetShipmentPalletsCountRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t shipmentId = request->get_path_parameter("shipmentId", 0L);
    
    int status_code = 500;
    EmptyApiResponse resultObject = EmptyApiResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PUT(campaignId, shipmentId, setShipmentPalletsCountRequest);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, EmptyApiResponse> CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::handler_PUT(
        int64_t & campaignId, int64_t & shipmentId, SetShipmentPalletsCountRequest & setShipmentPalletsCountRequest)
{
    return handler_PUT_func(campaignId, shipmentId, setShipmentPalletsCountRequest);
}


std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/first-mile/shipments/{shipmentId: .*}/orders/transfer");
	this->set_method_handler("POST",
		std::bind(&CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::handleShipmentsApiException(const ShipmentsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto transferOrdersFromShipmentRequest = extractJsonModelBodyParam<TransferOrdersFromShipmentRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t shipmentId = request->get_path_parameter("shipmentId", 0L);
    
    int status_code = 500;
    EmptyApiResponse resultObject = EmptyApiResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(campaignId, shipmentId, transferOrdersFromShipmentRequest);
    }
    catch(const ShipmentsApiException& e) {
        std::tie(status_code, result) = handleShipmentsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, EmptyApiResponse> CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::handler_POST(
        int64_t & campaignId, int64_t & shipmentId, TransferOrdersFromShipmentRequest & transferOrdersFromShipmentRequest)
{
    return handler_POST_func(campaignId, shipmentId, transferOrdersFromShipmentRequest);
}


std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace ShipmentsApiResources */

ShipmentsApi::ShipmentsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

ShipmentsApi::~ShipmentsApi() {}

std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource> ShipmentsApi::getCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource>());
    }
    return m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource;
}
std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource> ShipmentsApi::getCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource>());
    }
    return m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource;
}
std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource> ShipmentsApi::getCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource>());
    }
    return m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource;
}
std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource> ShipmentsApi::getCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource>());
    }
    return m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource;
}
std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource> ShipmentsApi::getCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource>());
    }
    return m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource;
}
std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdShipmentsReception_transfer_actResource> ShipmentsApi::getCampaignsCampaignIdShipmentsReception_transfer_actResource() {
    if (!m_spCampaignsCampaignIdShipmentsReception_transfer_actResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdShipmentsReception_transfer_actResource>());
    }
    return m_spCampaignsCampaignIdShipmentsReception_transfer_actResource;
}
std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource> ShipmentsApi::getCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource>());
    }
    return m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource;
}
std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource> ShipmentsApi::getCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource>());
    }
    return m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource;
}
std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource> ShipmentsApi::getCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource>());
    }
    return m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource;
}
std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsResource> ShipmentsApi::getCampaignsCampaignIdFirst_mileShipmentsResource() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsResource>());
    }
    return m_spCampaignsCampaignIdFirst_mileShipmentsResource;
}
std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource> ShipmentsApi::getCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource>());
    }
    return m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource;
}
std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource> ShipmentsApi::getCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource>());
    }
    return m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource;
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource> resource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource = resource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource);
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource> resource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource = resource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource);
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource> resource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource = resource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource);
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource> resource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource = resource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource);
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource> resource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource = resource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource);
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdShipmentsReception_transfer_actResource> resource) {
    m_spCampaignsCampaignIdShipmentsReception_transfer_actResource = resource;
    m_service->publish(m_spCampaignsCampaignIdShipmentsReception_transfer_actResource);
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource> resource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource = resource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource);
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource> resource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource = resource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource);
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource> resource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource = resource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource);
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsResource> resource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsResource = resource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsResource);
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource> resource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource = resource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource);
}
void ShipmentsApi::setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource> resource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource = resource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource> spCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource = spCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource> spCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource = spCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource> spCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource = spCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource> spCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource = spCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource> spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource = spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdShipmentsReception_transfer_actResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdShipmentsReception_transfer_actResource> spCampaignsCampaignIdShipmentsReception_transfer_actResource) {
    m_spCampaignsCampaignIdShipmentsReception_transfer_actResource = spCampaignsCampaignIdShipmentsReception_transfer_actResource;
    m_service->publish(m_spCampaignsCampaignIdShipmentsReception_transfer_actResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource> spCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource = spCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource> spCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource = spCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource> spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource = spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsResource> spCampaignsCampaignIdFirst_mileShipmentsResource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsResource = spCampaignsCampaignIdFirst_mileShipmentsResource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource> spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource = spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource);
}
void ShipmentsApi::setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource> spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource) {
    m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource = spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource;
    m_service->publish(m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource);
}


void ShipmentsApi::publishDefaultResources() {
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource>());
    }
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource>());
    }
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource>());
    }
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource>());
    }
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource>());
    }
    if (!m_spCampaignsCampaignIdShipmentsReception_transfer_actResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdShipmentsReception_transfer_actResource>());
    }
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource>());
    }
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource>());
    }
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource>());
    }
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsResource>());
    }
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource>());
    }
    if (!m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource) {
        setResource(std::make_shared<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource>());
    }
}

std::shared_ptr<restbed::Service> ShipmentsApi::service() {
    return m_service;
}


}
}
}
}

