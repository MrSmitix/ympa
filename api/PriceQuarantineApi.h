/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PriceQuarantineApi.h
 *
 * 
 */

#ifndef PriceQuarantineApi_H_
#define PriceQuarantineApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "ConfirmPricesRequest.h"
#include "EmptyApiResponse.h"
#include "GetQuarantineOffersRequest.h"
#include "GetQuarantineOffersResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  PriceQuarantineApiException: public std::exception
{
public:
    PriceQuarantineApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace PriceQuarantineApiResources {
/// <summary>
/// Удаление товара из карантина по цене в кабинете
/// </summary>
/// <remarks>
/// Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdPrice_quarantineConfirmResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPrice_quarantineConfirmResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPrice_quarantineConfirmResource() = default;

    BusinessesBusinessIdPrice_quarantineConfirmResource(
        const BusinessesBusinessIdPrice_quarantineConfirmResource& other) = default; // copy constructor
    BusinessesBusinessIdPrice_quarantineConfirmResource(BusinessesBusinessIdPrice_quarantineConfirmResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPrice_quarantineConfirmResource& operator=(const BusinessesBusinessIdPrice_quarantineConfirmResource& other) = default; // copy assignment
    BusinessesBusinessIdPrice_quarantineConfirmResource& operator=(BusinessesBusinessIdPrice_quarantineConfirmResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, ConfirmPricesRequest & confirmPricesRequest)> handler_POST_func =
            [](int64_t &, ConfirmPricesRequest &) -> std::pair<int, EmptyApiResponse>
                { throw PriceQuarantineApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, ConfirmPricesRequest & confirmPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePriceQuarantineApiException(const PriceQuarantineApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление товара из карантина по цене в магазине
/// </summary>
/// <remarks>
/// Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdPrice_quarantineConfirmResource: public restbed::Resource
{
public:
    CampaignsCampaignIdPrice_quarantineConfirmResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdPrice_quarantineConfirmResource() = default;

    CampaignsCampaignIdPrice_quarantineConfirmResource(
        const CampaignsCampaignIdPrice_quarantineConfirmResource& other) = default; // copy constructor
    CampaignsCampaignIdPrice_quarantineConfirmResource(CampaignsCampaignIdPrice_quarantineConfirmResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdPrice_quarantineConfirmResource& operator=(const CampaignsCampaignIdPrice_quarantineConfirmResource& other) = default; // copy assignment
    CampaignsCampaignIdPrice_quarantineConfirmResource& operator=(CampaignsCampaignIdPrice_quarantineConfirmResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, ConfirmPricesRequest & confirmPricesRequest)> handler_POST_func =
            [](int64_t &, ConfirmPricesRequest &) -> std::pair<int, EmptyApiResponse>
                { throw PriceQuarantineApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, ConfirmPricesRequest & confirmPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePriceQuarantineApiException(const PriceQuarantineApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список товаров, находящихся в карантине по цене в кабинете
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdPrice_quarantineResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPrice_quarantineResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPrice_quarantineResource() = default;

    BusinessesBusinessIdPrice_quarantineResource(
        const BusinessesBusinessIdPrice_quarantineResource& other) = default; // copy constructor
    BusinessesBusinessIdPrice_quarantineResource(BusinessesBusinessIdPrice_quarantineResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPrice_quarantineResource& operator=(const BusinessesBusinessIdPrice_quarantineResource& other) = default; // copy assignment
    BusinessesBusinessIdPrice_quarantineResource& operator=(BusinessesBusinessIdPrice_quarantineResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetQuarantineOffersResponse>(
        int64_t & businessId, GetQuarantineOffersRequest & getQuarantineOffersRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetQuarantineOffersRequest &, std::string &, int32_t &) -> std::pair<int, GetQuarantineOffersResponse>
                { throw PriceQuarantineApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetQuarantineOffersResponse> handler_POST(
        int64_t & businessId, GetQuarantineOffersRequest & getQuarantineOffersRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePriceQuarantineApiException(const PriceQuarantineApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список товаров, находящихся в карантине по цене в магазине
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdPrice_quarantineResource: public restbed::Resource
{
public:
    CampaignsCampaignIdPrice_quarantineResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdPrice_quarantineResource() = default;

    CampaignsCampaignIdPrice_quarantineResource(
        const CampaignsCampaignIdPrice_quarantineResource& other) = default; // copy constructor
    CampaignsCampaignIdPrice_quarantineResource(CampaignsCampaignIdPrice_quarantineResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdPrice_quarantineResource& operator=(const CampaignsCampaignIdPrice_quarantineResource& other) = default; // copy assignment
    CampaignsCampaignIdPrice_quarantineResource& operator=(CampaignsCampaignIdPrice_quarantineResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetQuarantineOffersResponse>(
        int64_t & campaignId, GetQuarantineOffersRequest & getQuarantineOffersRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetQuarantineOffersRequest &, std::string &, int32_t &) -> std::pair<int, GetQuarantineOffersResponse>
                { throw PriceQuarantineApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetQuarantineOffersResponse> handler_POST(
        int64_t & campaignId, GetQuarantineOffersRequest & getQuarantineOffersRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePriceQuarantineApiException(const PriceQuarantineApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace PriceQuarantineApiResources */

using PriceQuarantineApiBusinessesBusinessIdPrice_quarantineConfirmResource [[deprecated]] = PriceQuarantineApiResources::BusinessesBusinessIdPrice_quarantineConfirmResource;
using PriceQuarantineApiCampaignsCampaignIdPrice_quarantineConfirmResource [[deprecated]] = PriceQuarantineApiResources::CampaignsCampaignIdPrice_quarantineConfirmResource;
using PriceQuarantineApiBusinessesBusinessIdPrice_quarantineResource [[deprecated]] = PriceQuarantineApiResources::BusinessesBusinessIdPrice_quarantineResource;
using PriceQuarantineApiCampaignsCampaignIdPrice_quarantineResource [[deprecated]] = PriceQuarantineApiResources::CampaignsCampaignIdPrice_quarantineResource;

//
// The restbed service to actually implement the REST server
//
class  PriceQuarantineApi
{
public:
    explicit PriceQuarantineApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~PriceQuarantineApi();

    std::shared_ptr<PriceQuarantineApiResources::BusinessesBusinessIdPrice_quarantineConfirmResource> getBusinessesBusinessIdPrice_quarantineConfirmResource();
    std::shared_ptr<PriceQuarantineApiResources::CampaignsCampaignIdPrice_quarantineConfirmResource> getCampaignsCampaignIdPrice_quarantineConfirmResource();
    std::shared_ptr<PriceQuarantineApiResources::BusinessesBusinessIdPrice_quarantineResource> getBusinessesBusinessIdPrice_quarantineResource();
    std::shared_ptr<PriceQuarantineApiResources::CampaignsCampaignIdPrice_quarantineResource> getCampaignsCampaignIdPrice_quarantineResource();

    void setResource(std::shared_ptr<PriceQuarantineApiResources::BusinessesBusinessIdPrice_quarantineConfirmResource> resource);
    void setResource(std::shared_ptr<PriceQuarantineApiResources::CampaignsCampaignIdPrice_quarantineConfirmResource> resource);
    void setResource(std::shared_ptr<PriceQuarantineApiResources::BusinessesBusinessIdPrice_quarantineResource> resource);
    void setResource(std::shared_ptr<PriceQuarantineApiResources::CampaignsCampaignIdPrice_quarantineResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setPriceQuarantineApiBusinessesBusinessIdPrice_quarantineConfirmResource(std::shared_ptr<PriceQuarantineApiResources::BusinessesBusinessIdPrice_quarantineConfirmResource> spPriceQuarantineApiBusinessesBusinessIdPrice_quarantineConfirmResource);
    [[deprecated("use setResource()")]]
    virtual void setPriceQuarantineApiCampaignsCampaignIdPrice_quarantineConfirmResource(std::shared_ptr<PriceQuarantineApiResources::CampaignsCampaignIdPrice_quarantineConfirmResource> spPriceQuarantineApiCampaignsCampaignIdPrice_quarantineConfirmResource);
    [[deprecated("use setResource()")]]
    virtual void setPriceQuarantineApiBusinessesBusinessIdPrice_quarantineResource(std::shared_ptr<PriceQuarantineApiResources::BusinessesBusinessIdPrice_quarantineResource> spPriceQuarantineApiBusinessesBusinessIdPrice_quarantineResource);
    [[deprecated("use setResource()")]]
    virtual void setPriceQuarantineApiCampaignsCampaignIdPrice_quarantineResource(std::shared_ptr<PriceQuarantineApiResources::CampaignsCampaignIdPrice_quarantineResource> spPriceQuarantineApiCampaignsCampaignIdPrice_quarantineResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<PriceQuarantineApiResources::BusinessesBusinessIdPrice_quarantineConfirmResource> m_spBusinessesBusinessIdPrice_quarantineConfirmResource;
    std::shared_ptr<PriceQuarantineApiResources::CampaignsCampaignIdPrice_quarantineConfirmResource> m_spCampaignsCampaignIdPrice_quarantineConfirmResource;
    std::shared_ptr<PriceQuarantineApiResources::BusinessesBusinessIdPrice_quarantineResource> m_spBusinessesBusinessIdPrice_quarantineResource;
    std::shared_ptr<PriceQuarantineApiResources::CampaignsCampaignIdPrice_quarantineResource> m_spCampaignsCampaignIdPrice_quarantineResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* PriceQuarantineApi_H_ */

