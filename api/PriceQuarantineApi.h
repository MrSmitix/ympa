/**
 * –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π API –ú–∞—Ä–∫–µ—Ç–∞
 * API –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º.  –í —á–∏—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:  * —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤–∏—Ç—Ä–∏–Ω–æ–π,  * –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤,  * –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞,  * –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PriceQuarantineApi.h
 *
 * 
 */

#ifndef PriceQuarantineApi_H_
#define PriceQuarantineApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "ConfirmPricesRequest.h"
#include "EmptyApiResponse.h"
#include "GetQuarantineOffersRequest.h"
#include "GetQuarantineOffersResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  PriceQuarantineApiException: public std::exception
{
public:
    PriceQuarantineApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –ø–æ —Ü–µ–Ω–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
/// </summary>
/// <remarks>
/// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–ª–∏ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω, –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞.  –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–¥–∞–µ—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö –∫–∞–±–∏–Ω–µ—Ç–∞.  –¢–æ–≤–∞—Ä –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω, –µ—Å–ª–∏ –µ–≥–æ —Ü–µ–Ω–∞ –º–µ–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–∫–æ. [–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä–∞–Ω—Ç–∏–Ω](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–ª–∏ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**‚öôÔ∏è –õ–∏–º–∏—Ç:** 5000 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É, –Ω–µ –±–æ–ª–µ–µ 200 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ| |-| 
/// </remarks>
class  PriceQuarantineApiBusinessesBusinessIdPrice-quarantineConfirmResource: public restbed::Resource
{
public:
    PriceQuarantineApiBusinessesBusinessIdPrice-quarantineConfirmResource(const std::string& context = "");
    virtual ~PriceQuarantineApiBusinessesBusinessIdPrice-quarantineConfirmResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<ConfirmPricesRequest> const & confirmPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handlePriceQuarantineApiException(const PriceQuarantineApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –ø–æ —Ü–µ–Ω–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
/// </summary>
/// <remarks>
/// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–ª–∏ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω, –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞.  –¢–æ–≤–∞—Ä –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω, –µ—Å–ª–∏ –µ–≥–æ —Ü–µ–Ω–∞ –º–µ–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–∫–æ. [–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä–∞–Ω—Ç–∏–Ω](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–ª–∏ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**‚öôÔ∏è –õ–∏–º–∏—Ç:** 5000 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É| |-| 
/// </remarks>
class  PriceQuarantineApiCampaignsCampaignIdPrice-quarantineConfirmResource: public restbed::Resource
{
public:
    PriceQuarantineApiCampaignsCampaignIdPrice-quarantineConfirmResource(const std::string& context = "");
    virtual ~PriceQuarantineApiCampaignsCampaignIdPrice-quarantineConfirmResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<ConfirmPricesRequest> const & confirmPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handlePriceQuarantineApiException(const PriceQuarantineApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ –ø–æ —Ü–µ–Ω–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
/// </summary>
/// <remarks>
/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ –ø–æ **–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–Ω–µ**. –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–¥–∞–µ—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö –∫–∞–±–∏–Ω–µ—Ç–∞.  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–Ω—É –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–∞–ª –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω. –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç –∏ —Ü–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–µ —Å –ø–æ–º–æ—â—å—é –∑–∞–ø—Ä–æ—Å–∞ [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ –æ—à–∏–±–æ—á–Ω–∞—è, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–µ—Ä–Ω—É—é —Å –ø–æ–º–æ—â—å—é –∑–∞–ø—Ä–æ—Å–∞ [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \&quot;ùì† –ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞—Ä–∞–Ω—Ç–∏–Ω?\&quot; %}  ùìê –¢–æ–≤–∞—Ä –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω, –µ—Å–ª–∏ –µ–≥–æ —Ü–µ–Ω–∞ –º–µ–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–∫–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π. [–ü–æ–¥—Ä–æ–±–Ω–µ–µ](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  –í –∑–∞–ø—Ä–æ—Å–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ.  |**‚öôÔ∏è –õ–∏–º–∏—Ç:** 5000 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É, –Ω–µ –±–æ–ª–µ–µ 500 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ| |-| 
/// </remarks>
class  PriceQuarantineApiBusinessesBusinessIdPrice-quarantineResource: public restbed::Resource
{
public:
    PriceQuarantineApiBusinessesBusinessIdPrice-quarantineResource(const std::string& context = "");
    virtual ~PriceQuarantineApiBusinessesBusinessIdPrice-quarantineResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetQuarantineOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetQuarantineOffersRequest> const & getQuarantineOffersRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handlePriceQuarantineApiException(const PriceQuarantineApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ –ø–æ —Ü–µ–Ω–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
/// </summary>
/// <remarks>
/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ –ø–æ —Ü–µ–Ω–µ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ.  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–Ω—É –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–∞–ª –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω. –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç –∏ —Ü–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–µ —Å –ø–æ–º–æ—â—å—é –∑–∞–ø—Ä–æ—Å–∞ [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ –æ—à–∏–±–æ—á–Ω–∞—è, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–µ—Ä–Ω—É—é —Å –ø–æ–º–æ—â—å—é –∑–∞–ø—Ä–æ—Å–∞ [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \&quot;ùì† –ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞—Ä–∞–Ω—Ç–∏–Ω?\&quot; %}  ùìê –¢–æ–≤–∞—Ä –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω, –µ—Å–ª–∏ –µ–≥–æ —Ü–µ–Ω–∞ –º–µ–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–∫–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π. [–ü–æ–¥—Ä–æ–±–Ω–µ–µ](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  –í –∑–∞–ø—Ä–æ—Å–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ.  |**‚öôÔ∏è –õ–∏–º–∏—Ç:** 5000 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É| |-| 
/// </remarks>
class  PriceQuarantineApiCampaignsCampaignIdPrice-quarantineResource: public restbed::Resource
{
public:
    PriceQuarantineApiCampaignsCampaignIdPrice-quarantineResource(const std::string& context = "");
    virtual ~PriceQuarantineApiCampaignsCampaignIdPrice-quarantineResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetQuarantineOffersResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetQuarantineOffersRequest> const & getQuarantineOffersRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handlePriceQuarantineApiException(const PriceQuarantineApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  PriceQuarantineApi
{
public:
    explicit PriceQuarantineApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~PriceQuarantineApi();

    virtual void setPriceQuarantineApiBusinessesBusinessIdPrice-quarantineConfirmResource(std::shared_ptr<PriceQuarantineApiBusinessesBusinessIdPrice-quarantineConfirmResource> spPriceQuarantineApiBusinessesBusinessIdPrice-quarantineConfirmResource);
    virtual void setPriceQuarantineApiCampaignsCampaignIdPrice-quarantineConfirmResource(std::shared_ptr<PriceQuarantineApiCampaignsCampaignIdPrice-quarantineConfirmResource> spPriceQuarantineApiCampaignsCampaignIdPrice-quarantineConfirmResource);
    virtual void setPriceQuarantineApiBusinessesBusinessIdPrice-quarantineResource(std::shared_ptr<PriceQuarantineApiBusinessesBusinessIdPrice-quarantineResource> spPriceQuarantineApiBusinessesBusinessIdPrice-quarantineResource);
    virtual void setPriceQuarantineApiCampaignsCampaignIdPrice-quarantineResource(std::shared_ptr<PriceQuarantineApiCampaignsCampaignIdPrice-quarantineResource> spPriceQuarantineApiCampaignsCampaignIdPrice-quarantineResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<PriceQuarantineApiBusinessesBusinessIdPrice-quarantineConfirmResource> m_spPriceQuarantineApiBusinessesBusinessIdPrice-quarantineConfirmResource;
    std::shared_ptr<PriceQuarantineApiCampaignsCampaignIdPrice-quarantineConfirmResource> m_spPriceQuarantineApiCampaignsCampaignIdPrice-quarantineConfirmResource;
    std::shared_ptr<PriceQuarantineApiBusinessesBusinessIdPrice-quarantineResource> m_spPriceQuarantineApiBusinessesBusinessIdPrice-quarantineResource;
    std::shared_ptr<PriceQuarantineApiCampaignsCampaignIdPrice-quarantineResource> m_spPriceQuarantineApiCampaignsCampaignIdPrice-quarantineResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* PriceQuarantineApi_H_ */

