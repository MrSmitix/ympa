/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { GenerateBoostConsolidatedRequest } from '../model/generateBoostConsolidatedRequest';
import { GenerateCompetitorsPositionReportRequest } from '../model/generateCompetitorsPositionReportRequest';
import { GenerateGoodsFeedbackRequest } from '../model/generateGoodsFeedbackRequest';
import { GenerateGoodsMovementReportRequest } from '../model/generateGoodsMovementReportRequest';
import { GenerateGoodsRealizationReportRequest } from '../model/generateGoodsRealizationReportRequest';
import { GenerateGoodsTurnoverRequest } from '../model/generateGoodsTurnoverRequest';
import { GenerateMassOrderLabelsRequest } from '../model/generateMassOrderLabelsRequest';
import { GeneratePricesReportRequest } from '../model/generatePricesReportRequest';
import { GenerateReportResponse } from '../model/generateReportResponse';
import { GenerateShelfsStatisticsRequest } from '../model/generateShelfsStatisticsRequest';
import { GenerateShipmentListDocumentReportRequest } from '../model/generateShipmentListDocumentReportRequest';
import { GenerateShowsSalesReportRequest } from '../model/generateShowsSalesReportRequest';
import { GenerateStocksOnWarehousesReportRequest } from '../model/generateStocksOnWarehousesReportRequest';
import { GenerateUnitedMarketplaceServicesReportRequest } from '../model/generateUnitedMarketplaceServicesReportRequest';
import { GenerateUnitedNettingReportRequest } from '../model/generateUnitedNettingReportRequest';
import { GenerateUnitedOrdersRequest } from '../model/generateUnitedOrdersRequest';
import { GetReportInfoResponse } from '../model/getReportInfoResponse';
import { PageFormatType } from '../model/pageFormatType';
import { ReportFormatType } from '../model/reportFormatType';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ReportsService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Отчет по бусту продаж
     * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generateBoostConsolidatedRequest 
     * @param format Формат отчета.
     
     */
    public generateBoostConsolidatedReport(generateBoostConsolidatedRequest: GenerateBoostConsolidatedRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateBoostConsolidatedReport(generateBoostConsolidatedRequest: GenerateBoostConsolidatedRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateBoostConsolidatedReport(generateBoostConsolidatedRequest: GenerateBoostConsolidatedRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateBoostConsolidatedRequest === null || generateBoostConsolidatedRequest === undefined){
            throw new Error('Required parameter generateBoostConsolidatedRequest was null or undefined when calling generateBoostConsolidatedReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/boost-consolidated/generate?${queryParameters.join('&')}`, generateBoostConsolidatedRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет «Конкурентная позиция»
     * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
     * @param generateCompetitorsPositionReportRequest 
     * @param format Формат отчета.
     
     */
    public generateCompetitorsPositionReport(generateCompetitorsPositionReportRequest: GenerateCompetitorsPositionReportRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateCompetitorsPositionReport(generateCompetitorsPositionReportRequest: GenerateCompetitorsPositionReportRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateCompetitorsPositionReport(generateCompetitorsPositionReportRequest: GenerateCompetitorsPositionReportRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateCompetitorsPositionReportRequest === null || generateCompetitorsPositionReportRequest === undefined){
            throw new Error('Required parameter generateCompetitorsPositionReportRequest was null or undefined when calling generateCompetitorsPositionReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/competitors-position/generate?${queryParameters.join('&')}`, generateCompetitorsPositionReportRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет по отзывам о товарах
     * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generateGoodsFeedbackRequest 
     * @param format Формат отчета.
     
     */
    public generateGoodsFeedbackReport(generateGoodsFeedbackRequest: GenerateGoodsFeedbackRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateGoodsFeedbackReport(generateGoodsFeedbackRequest: GenerateGoodsFeedbackRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateGoodsFeedbackReport(generateGoodsFeedbackRequest: GenerateGoodsFeedbackRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateGoodsFeedbackRequest === null || generateGoodsFeedbackRequest === undefined){
            throw new Error('Required parameter generateGoodsFeedbackRequest was null or undefined when calling generateGoodsFeedbackReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/goods-feedback/generate?${queryParameters.join('&')}`, generateGoodsFeedbackRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет по движению товаров
     * Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generateGoodsMovementReportRequest 
     * @param format Формат отчета.
     
     */
    public generateGoodsMovementReport(generateGoodsMovementReportRequest: GenerateGoodsMovementReportRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateGoodsMovementReport(generateGoodsMovementReportRequest: GenerateGoodsMovementReportRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateGoodsMovementReport(generateGoodsMovementReportRequest: GenerateGoodsMovementReportRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateGoodsMovementReportRequest === null || generateGoodsMovementReportRequest === undefined){
            throw new Error('Required parameter generateGoodsMovementReportRequest was null or undefined when calling generateGoodsMovementReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/goods-movement/generate?${queryParameters.join('&')}`, generateGoodsMovementReportRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет по реализации
     * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generateGoodsRealizationReportRequest 
     * @param format Формат отчета.
     
     */
    public generateGoodsRealizationReport(generateGoodsRealizationReportRequest: GenerateGoodsRealizationReportRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateGoodsRealizationReport(generateGoodsRealizationReportRequest: GenerateGoodsRealizationReportRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateGoodsRealizationReport(generateGoodsRealizationReportRequest: GenerateGoodsRealizationReportRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateGoodsRealizationReportRequest === null || generateGoodsRealizationReportRequest === undefined){
            throw new Error('Required parameter generateGoodsRealizationReportRequest was null or undefined when calling generateGoodsRealizationReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/goods-realization/generate?${queryParameters.join('&')}`, generateGoodsRealizationReportRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет по оборачиваемости
     * Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generateGoodsTurnoverRequest 
     * @param format Формат отчета.
     
     */
    public generateGoodsTurnoverReport(generateGoodsTurnoverRequest: GenerateGoodsTurnoverRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateGoodsTurnoverReport(generateGoodsTurnoverRequest: GenerateGoodsTurnoverRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateGoodsTurnoverReport(generateGoodsTurnoverRequest: GenerateGoodsTurnoverRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateGoodsTurnoverRequest === null || generateGoodsTurnoverRequest === undefined){
            throw new Error('Required parameter generateGoodsTurnoverRequest was null or undefined when calling generateGoodsTurnoverReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/goods-turnover/generate?${queryParameters.join('&')}`, generateGoodsTurnoverRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param generateMassOrderLabelsRequest 
     * @param format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.
     
     */
    public generateMassOrderLabelsReport(generateMassOrderLabelsRequest: GenerateMassOrderLabelsRequest, format?: PageFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateMassOrderLabelsReport(generateMassOrderLabelsRequest: GenerateMassOrderLabelsRequest, format?: PageFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateMassOrderLabelsReport(generateMassOrderLabelsRequest: GenerateMassOrderLabelsRequest, format?: PageFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateMassOrderLabelsRequest === null || generateMassOrderLabelsRequest === undefined){
            throw new Error('Required parameter generateMassOrderLabelsRequest was null or undefined when calling generateMassOrderLabelsReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/documents/labels/generate?${queryParameters.join('&')}`, generateMassOrderLabelsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет «Цены на рынке»
     * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generatePricesReportRequest 
     * @param format Формат отчета.
     
     */
    public generatePricesReport(generatePricesReportRequest: GeneratePricesReportRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generatePricesReport(generatePricesReportRequest: GeneratePricesReportRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generatePricesReport(generatePricesReportRequest: GeneratePricesReportRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generatePricesReportRequest === null || generatePricesReportRequest === undefined){
            throw new Error('Required parameter generatePricesReportRequest was null or undefined when calling generatePricesReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/prices/generate?${queryParameters.join('&')}`, generatePricesReportRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет по полкам
     * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generateShelfsStatisticsRequest 
     * @param format Формат отчета.
     
     */
    public generateShelfsStatisticsReport(generateShelfsStatisticsRequest: GenerateShelfsStatisticsRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateShelfsStatisticsReport(generateShelfsStatisticsRequest: GenerateShelfsStatisticsRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateShelfsStatisticsReport(generateShelfsStatisticsRequest: GenerateShelfsStatisticsRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateShelfsStatisticsRequest === null || generateShelfsStatisticsRequest === undefined){
            throw new Error('Required parameter generateShelfsStatisticsRequest was null or undefined when calling generateShelfsStatisticsReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/shelf-statistics/generate?${queryParameters.join('&')}`, generateShelfsStatisticsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение листа сборки
     * Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generateShipmentListDocumentReportRequest 
     
     */
    public generateShipmentListDocumentReport(generateShipmentListDocumentReportRequest: GenerateShipmentListDocumentReportRequest, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateShipmentListDocumentReport(generateShipmentListDocumentReportRequest: GenerateShipmentListDocumentReportRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateShipmentListDocumentReport(generateShipmentListDocumentReportRequest: GenerateShipmentListDocumentReportRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateShipmentListDocumentReportRequest === null || generateShipmentListDocumentReportRequest === undefined){
            throw new Error('Required parameter generateShipmentListDocumentReportRequest was null or undefined when calling generateShipmentListDocumentReport.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/documents/shipment-list/generate`, generateShipmentListDocumentReportRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет «Аналитика продаж»
     * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
     * @param generateShowsSalesReportRequest 
     * @param format Формат отчета.
     
     */
    public generateShowsSalesReport(generateShowsSalesReportRequest: GenerateShowsSalesReportRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateShowsSalesReport(generateShowsSalesReportRequest: GenerateShowsSalesReportRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateShowsSalesReport(generateShowsSalesReportRequest: GenerateShowsSalesReportRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateShowsSalesReportRequest === null || generateShowsSalesReportRequest === undefined){
            throw new Error('Required parameter generateShowsSalesReportRequest was null or undefined when calling generateShowsSalesReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/shows-sales/generate?${queryParameters.join('&')}`, generateShowsSalesReportRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет по остаткам на складах
     * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generateStocksOnWarehousesReportRequest 
     * @param format Формат отчета.
     
     */
    public generateStocksOnWarehousesReport(generateStocksOnWarehousesReportRequest: GenerateStocksOnWarehousesReportRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateStocksOnWarehousesReport(generateStocksOnWarehousesReportRequest: GenerateStocksOnWarehousesReportRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateStocksOnWarehousesReport(generateStocksOnWarehousesReportRequest: GenerateStocksOnWarehousesReportRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateStocksOnWarehousesReportRequest === null || generateStocksOnWarehousesReportRequest === undefined){
            throw new Error('Required parameter generateStocksOnWarehousesReportRequest was null or undefined when calling generateStocksOnWarehousesReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/stocks-on-warehouses/generate?${queryParameters.join('&')}`, generateStocksOnWarehousesReportRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет по стоимости услуг
     * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generateUnitedMarketplaceServicesReportRequest 
     * @param format Формат отчета.
     
     */
    public generateUnitedMarketplaceServicesReport(generateUnitedMarketplaceServicesReportRequest: GenerateUnitedMarketplaceServicesReportRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateUnitedMarketplaceServicesReport(generateUnitedMarketplaceServicesReportRequest: GenerateUnitedMarketplaceServicesReportRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateUnitedMarketplaceServicesReport(generateUnitedMarketplaceServicesReportRequest: GenerateUnitedMarketplaceServicesReportRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateUnitedMarketplaceServicesReportRequest === null || generateUnitedMarketplaceServicesReportRequest === undefined){
            throw new Error('Required parameter generateUnitedMarketplaceServicesReportRequest was null or undefined when calling generateUnitedMarketplaceServicesReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/united-marketplace-services/generate?${queryParameters.join('&')}`, generateUnitedMarketplaceServicesReportRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет по платежам
     * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generateUnitedNettingReportRequest 
     * @param format Формат отчета.
     
     */
    public generateUnitedNettingReport(generateUnitedNettingReportRequest: GenerateUnitedNettingReportRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateUnitedNettingReport(generateUnitedNettingReportRequest: GenerateUnitedNettingReportRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateUnitedNettingReport(generateUnitedNettingReportRequest: GenerateUnitedNettingReportRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateUnitedNettingReportRequest === null || generateUnitedNettingReportRequest === undefined){
            throw new Error('Required parameter generateUnitedNettingReportRequest was null or undefined when calling generateUnitedNettingReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/united-netting/generate?${queryParameters.join('&')}`, generateUnitedNettingReportRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отчет по заказам
     * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param generateUnitedOrdersRequest 
     * @param format Формат отчета.
     
     */
    public generateUnitedOrdersReport(generateUnitedOrdersRequest: GenerateUnitedOrdersRequest, format?: ReportFormatType, observe?: 'body', headers?: Headers): Observable<GenerateReportResponse>;
    public generateUnitedOrdersReport(generateUnitedOrdersRequest: GenerateUnitedOrdersRequest, format?: ReportFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenerateReportResponse>>;
    public generateUnitedOrdersReport(generateUnitedOrdersRequest: GenerateUnitedOrdersRequest, format?: ReportFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (generateUnitedOrdersRequest === null || generateUnitedOrdersRequest === undefined){
            throw new Error('Required parameter generateUnitedOrdersRequest was null or undefined when calling generateUnitedOrdersReport.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenerateReportResponse>> = this.httpClient.post(`${this.basePath}/reports/united-orders/generate?${queryParameters.join('&')}`, generateUnitedOrdersRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenerateReportResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение заданного отчета
     * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * @param reportId Идентификатор отчета, который вы получили после запуска генерации. 
     
     */
    public getReportInfo(reportId: string, observe?: 'body', headers?: Headers): Observable<GetReportInfoResponse>;
    public getReportInfo(reportId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetReportInfoResponse>>;
    public getReportInfo(reportId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (reportId === null || reportId === undefined){
            throw new Error('Required parameter reportId was null or undefined when calling getReportInfo.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetReportInfoResponse>> = this.httpClient.get(`${this.basePath}/reports/info/${encodeURIComponent(String(reportId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetReportInfoResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
