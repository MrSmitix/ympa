/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderBusinessInformationApi.h
 *
 * 
 */

#ifndef OrderBusinessInformationApi_H_
#define OrderBusinessInformationApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GetBusinessBuyerInfoResponse.h"
#include "GetBusinessDocumentsInfoResponse.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OrderBusinessInformationApiException: public std::exception
{
public:
    OrderBusinessInformationApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Информация о покупателе — юридическом лице
/// </summary>
/// <remarks>
/// Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60;, &#x60;PICKUP&#x60; или &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
/// </remarks>
class  OrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource: public restbed::Resource
{
public:
    OrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(const std::string& context = "");
    virtual ~OrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBusinessBuyerInfoResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleOrderBusinessInformationApiException(const OrderBusinessInformationApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о документах
/// </summary>
/// <remarks>
/// Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
/// </remarks>
class  OrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdDocumentsResource: public restbed::Resource
{
public:
    OrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(const std::string& context = "");
    virtual ~OrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdDocumentsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBusinessDocumentsInfoResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleOrderBusinessInformationApiException(const OrderBusinessInformationApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  OrderBusinessInformationApi
{
public:
    explicit OrderBusinessInformationApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OrderBusinessInformationApi();

    virtual void setOrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(std::shared_ptr<OrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource> spOrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource);
    virtual void setOrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(std::shared_ptr<OrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdDocumentsResource> spOrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdDocumentsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource> m_spOrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource;
    std::shared_ptr<OrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdDocumentsResource> m_spOrderBusinessInformationApiCampaignsCampaignIdOrdersOrderIdDocumentsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OrderBusinessInformationApi_H_ */

