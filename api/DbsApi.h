/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DbsApi.h
 *
 * 
 */

#ifndef DbsApi_H_
#define DbsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AcceptOrderCancellationRequest.h"
#include "AddHiddenOffersRequest.h"
#include "AddOffersToArchiveRequest.h"
#include "AddOffersToArchiveResponse.h"
#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "CalculateTariffsRequest.h"
#include "CalculateTariffsResponse.h"
#include "ChangeOutletRequest.h"
#include "ConfirmPricesRequest.h"
#include "CreateChatRequest.h"
#include "CreateChatResponse.h"
#include "CreateOutletResponse.h"
#include "CurrencyType.h"
#include "DeleteCampaignOffersRequest.h"
#include "DeleteCampaignOffersResponse.h"
#include "DeleteGoodsFeedbackCommentRequest.h"
#include "DeleteHiddenOffersRequest.h"
#include "DeleteOffersFromArchiveRequest.h"
#include "DeleteOffersFromArchiveResponse.h"
#include "DeleteOffersRequest.h"
#include "DeleteOffersResponse.h"
#include "DeletePromoOffersRequest.h"
#include "DeletePromoOffersResponse.h"
#include "EmptyApiResponse.h"
#include "FeedIndexLogsStatusType.h"
#include "GenerateBoostConsolidatedRequest.h"
#include "GenerateCompetitorsPositionReportRequest.h"
#include "GenerateGoodsFeedbackRequest.h"
#include "GenerateMassOrderLabelsRequest.h"
#include "GeneratePricesReportRequest.h"
#include "GenerateReportResponse.h"
#include "GenerateShelfsStatisticsRequest.h"
#include "GenerateShowsSalesReportRequest.h"
#include "GenerateStocksOnWarehousesReportRequest.h"
#include "GenerateUnitedMarketplaceServicesReportRequest.h"
#include "GenerateUnitedNettingReportRequest.h"
#include "GenerateUnitedOrdersRequest.h"
#include "GetAllOffersResponse.h"
#include "GetBidsInfoRequest.h"
#include "GetBidsInfoResponse.h"
#include "GetBidsRecommendationsRequest.h"
#include "GetBidsRecommendationsResponse.h"
#include "GetBusinessBuyerInfoResponse.h"
#include "GetBusinessDocumentsInfoResponse.h"
#include "GetBusinessSettingsResponse.h"
#include "GetCampaignLoginsResponse.h"
#include "GetCampaignOffersRequest.h"
#include "GetCampaignOffersResponse.h"
#include "GetCampaignRegionResponse.h"
#include "GetCampaignResponse.h"
#include "GetCampaignSettingsResponse.h"
#include "GetCampaignsResponse.h"
#include "GetCategoriesMaxSaleQuantumRequest.h"
#include "GetCategoriesMaxSaleQuantumResponse.h"
#include "GetCategoriesRequest.h"
#include "GetCategoriesResponse.h"
#include "GetCategoryContentParametersResponse.h"
#include "GetChatHistoryRequest.h"
#include "GetChatHistoryResponse.h"
#include "GetChatsRequest.h"
#include "GetChatsResponse.h"
#include "GetDeliveryServicesResponse.h"
#include "GetFeedIndexLogsResponse.h"
#include "GetFeedResponse.h"
#include "GetFeedbackListResponse.h"
#include "GetFeedsResponse.h"
#include "GetGoodsFeedbackCommentsRequest.h"
#include "GetGoodsFeedbackCommentsResponse.h"
#include "GetGoodsFeedbackRequest.h"
#include "GetGoodsFeedbackResponse.h"
#include "GetGoodsStatsRequest.h"
#include "GetGoodsStatsResponse.h"
#include "GetHiddenOffersResponse.h"
#include "GetModelsOffersResponse.h"
#include "GetModelsRequest.h"
#include "GetModelsResponse.h"
#include "GetOfferCardsContentStatusRequest.h"
#include "GetOfferCardsContentStatusResponse.h"
#include "GetOfferMappingEntriesResponse.h"
#include "GetOfferMappingsRequest.h"
#include "GetOfferMappingsResponse.h"
#include "GetOfferRecommendationsRequest.h"
#include "GetOfferRecommendationsResponse.h"
#include "GetOffersResponse.h"
#include "GetOrderBuyerInfoResponse.h"
#include "GetOrderLabelsDataResponse.h"
#include "GetOrderResponse.h"
#include "GetOrdersResponse.h"
#include "GetOrdersStatsRequest.h"
#include "GetOrdersStatsResponse.h"
#include "GetOutletLicensesResponse.h"
#include "GetOutletResponse.h"
#include "GetOutletsResponse.h"
#include "GetPricesByOfferIdsRequest.h"
#include "GetPricesByOfferIdsResponse.h"
#include "GetPricesResponse.h"
#include "GetPromoOffersRequest.h"
#include "GetPromoOffersResponse.h"
#include "GetPromosRequest.h"
#include "GetPromosResponse.h"
#include "GetQualityRatingDetailsResponse.h"
#include "GetQualityRatingRequest.h"
#include "GetQualityRatingResponse.h"
#include "GetQuarantineOffersRequest.h"
#include "GetQuarantineOffersResponse.h"
#include "GetRegionWithChildrenResponse.h"
#include "GetRegionsResponse.h"
#include "GetReportInfoResponse.h"
#include "GetReturnResponse.h"
#include "GetReturnsResponse.h"
#include "GetSuggestedOfferMappingEntriesRequest.h"
#include "GetSuggestedOfferMappingEntriesResponse.h"
#include "GetSuggestedOfferMappingsRequest.h"
#include "GetSuggestedOfferMappingsResponse.h"
#include "GetWarehouseStocksRequest.h"
#include "GetWarehouseStocksResponse.h"
#include "GetWarehousesResponse.h"
#include "OfferAvailabilityStatusType.h"
#include "OfferMappingKindType.h"
#include "OfferProcessingStatusType.h"
#include "OrderBuyerType.h"
#include "OrderDeliveryDispatchType.h"
#include "OrderStatusType.h"
#include "OrderSubstatusType.h"
#include "PageFormatType.h"
#include "ProvideOrderDigitalCodesRequest.h"
#include "ProvideOrderItemIdentifiersRequest.h"
#include "ProvideOrderItemIdentifiersResponse.h"
#include "PutSkuBidsRequest.h"
#include "RefundStatusType.h"
#include "ReportFormatType.h"
#include "ReturnType.h"
#include "SearchModelsResponse.h"
#include "SendMessageToChatRequest.h"
#include "SetFeedParamsRequest.h"
#include "SetOrderBoxLayoutRequest.h"
#include "SetOrderBoxLayoutResponse.h"
#include "SetOrderDeliveryDateRequest.h"
#include "SetOrderDeliveryTrackCodeRequest.h"
#include "SetOrderShipmentBoxesRequest.h"
#include "SetOrderShipmentBoxesResponse.h"
#include "SetReturnDecisionRequest.h"
#include "SkipGoodsFeedbackReactionRequest.h"
#include "SortOrderType.h"
#include "SuggestPricesRequest.h"
#include "SuggestPricesResponse.h"
#include "UpdateBusinessPricesRequest.h"
#include "UpdateCampaignOffersRequest.h"
#include "UpdateGoodsFeedbackCommentRequest.h"
#include "UpdateGoodsFeedbackCommentResponse.h"
#include "UpdateOfferContentRequest.h"
#include "UpdateOfferContentResponse.h"
#include "UpdateOfferMappingEntryRequest.h"
#include "UpdateOfferMappingsRequest.h"
#include "UpdateOfferMappingsResponse.h"
#include "UpdateOrderItemRequest.h"
#include "UpdateOrderStatusRequest.h"
#include "UpdateOrderStatusResponse.h"
#include "UpdateOrderStatusesRequest.h"
#include "UpdateOrderStatusesResponse.h"
#include "UpdateOrderStorageLimitRequest.h"
#include "UpdateOutletLicenseRequest.h"
#include "UpdatePricesRequest.h"
#include "UpdatePromoOffersRequest.h"
#include "UpdatePromoOffersResponse.h"
#include "UpdateStocksRequest.h"
#include <set>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  DbsApiException: public std::exception
{
public:
    DbsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace DbsApiResources {
/// <summary>
/// Отмена заказа покупателем
/// </summary>
/// <remarks>
/// Подтверждает или отклоняет запрос покупателя на отмену заказа, который передан службе доставки.  Покупатель может отменить заказ в течение его обработки или доставки. Если заказ еще обрабатывается (имеет статус PROCESSING), вам не нужно подтверждать отмену заказа — он будет отменен автоматически.  Если заказ уже передан службе доставки (принимает статус &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;) и пользователь отменил его, вы можете предупредить службу об отмене в течение 48 часов. Если служба доставки узнала об отмене до передачи заказа покупателю, подтвердите отмену с помощью запроса [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation.md). Если заказ уже доставлен, отклоните отмену с помощью этого же запроса. Тогда у покупателя останется заказ, и деньги за него возвращаться не будут.  Чтобы узнать, какие заказы были отменены в статусе &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;, отправьте запрос [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md). В его URL добавьте входной параметр &#x60;onlyWaitingForCancellationApprove&#x3D;true&#x60;. Вы также можете узнать об отмененных заказах в кабинете или через почту — на нее придет уведомление об отмене.  Если в течение 48 часов вы не подтвердите или отклоните отмену, заказ будет отменен автоматически.  |**⚙️ Лимит:** 500 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource() = default;

    CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(
        const CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource& operator=(const CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource& operator=(CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, AcceptOrderCancellationRequest & acceptOrderCancellationRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, AcceptOrderCancellationRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, AcceptOrderCancellationRequest & acceptOrderCancellationRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Скрытие товаров и настройки скрытия
/// </summary>
/// <remarks>
/// Скрывает товары магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdHidden_offersResource: public restbed::Resource
{
public:
    CampaignsCampaignIdHidden_offersResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdHidden_offersResource() = default;

    CampaignsCampaignIdHidden_offersResource(
        const CampaignsCampaignIdHidden_offersResource& other) = default; // copy constructor
    CampaignsCampaignIdHidden_offersResource(CampaignsCampaignIdHidden_offersResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdHidden_offersResource& operator=(const CampaignsCampaignIdHidden_offersResource& other) = default; // copy assignment
    CampaignsCampaignIdHidden_offersResource& operator=(CampaignsCampaignIdHidden_offersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, AddHiddenOffersRequest & addHiddenOffersRequest)> handler_POST_func =
            [](int64_t &, AddHiddenOffersRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };

    std::function<std::pair<int, GetHiddenOffersResponse>(
        int64_t & campaignId, std::vector<std::string> & offerId, std::string & pageToken, int32_t & limit, int32_t & offset, int32_t & page, int32_t & pageSize)> handler_GET_func =
            [](int64_t &, std::vector<std::string> &, std::string &, int32_t &, int32_t &, int32_t &, int32_t &) -> std::pair<int, GetHiddenOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, AddHiddenOffersRequest & addHiddenOffersRequest);

    virtual std::pair<int, GetHiddenOffersResponse> handler_GET(
        int64_t & campaignId, std::vector<std::string> & offerId, std::string & pageToken, int32_t & limit, int32_t & offset, int32_t & page, int32_t & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Добавление товаров в архив
/// </summary>
/// <remarks>
/// Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \&quot;В архив нельзя отправить товар, который хранится на складе Маркета\&quot; %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsArchiveResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsArchiveResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsArchiveResource() = default;

    BusinessesBusinessIdOffer_mappingsArchiveResource(
        const BusinessesBusinessIdOffer_mappingsArchiveResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsArchiveResource(BusinessesBusinessIdOffer_mappingsArchiveResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsArchiveResource& operator=(const BusinessesBusinessIdOffer_mappingsArchiveResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsArchiveResource& operator=(BusinessesBusinessIdOffer_mappingsArchiveResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AddOffersToArchiveResponse>(
        int64_t & businessId, AddOffersToArchiveRequest & addOffersToArchiveRequest)> handler_POST_func =
            [](int64_t &, AddOffersToArchiveRequest &) -> std::pair<int, AddOffersToArchiveResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AddOffersToArchiveResponse> handler_POST(
        int64_t & businessId, AddOffersToArchiveRequest & addOffersToArchiveRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Калькулятор стоимости услуг
/// </summary>
/// <remarks>
/// Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр &#x60;campaignId&#x60;, либо &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  TariffsCalculateResource: public restbed::Resource
{
public:
    TariffsCalculateResource(const std::string& context = "");
    virtual ~TariffsCalculateResource() = default;

    TariffsCalculateResource(
        const TariffsCalculateResource& other) = default; // copy constructor
    TariffsCalculateResource(TariffsCalculateResource&& other) noexcept = default; // move constructor

    TariffsCalculateResource& operator=(const TariffsCalculateResource& other) = default; // copy assignment
    TariffsCalculateResource& operator=(TariffsCalculateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CalculateTariffsResponse>(
        CalculateTariffsRequest & calculateTariffsRequest)> handler_POST_func =
            [](CalculateTariffsRequest &) -> std::pair<int, CalculateTariffsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CalculateTariffsResponse> handler_POST(
        CalculateTariffsRequest & calculateTariffsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление товара из карантина по цене в кабинете
/// </summary>
/// <remarks>
/// Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdPrice_quarantineConfirmResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPrice_quarantineConfirmResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPrice_quarantineConfirmResource() = default;

    BusinessesBusinessIdPrice_quarantineConfirmResource(
        const BusinessesBusinessIdPrice_quarantineConfirmResource& other) = default; // copy constructor
    BusinessesBusinessIdPrice_quarantineConfirmResource(BusinessesBusinessIdPrice_quarantineConfirmResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPrice_quarantineConfirmResource& operator=(const BusinessesBusinessIdPrice_quarantineConfirmResource& other) = default; // copy assignment
    BusinessesBusinessIdPrice_quarantineConfirmResource& operator=(BusinessesBusinessIdPrice_quarantineConfirmResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, ConfirmPricesRequest & confirmPricesRequest)> handler_POST_func =
            [](int64_t &, ConfirmPricesRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, ConfirmPricesRequest & confirmPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление товара из карантина по цене в магазине
/// </summary>
/// <remarks>
/// Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdPrice_quarantineConfirmResource: public restbed::Resource
{
public:
    CampaignsCampaignIdPrice_quarantineConfirmResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdPrice_quarantineConfirmResource() = default;

    CampaignsCampaignIdPrice_quarantineConfirmResource(
        const CampaignsCampaignIdPrice_quarantineConfirmResource& other) = default; // copy constructor
    CampaignsCampaignIdPrice_quarantineConfirmResource(CampaignsCampaignIdPrice_quarantineConfirmResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdPrice_quarantineConfirmResource& operator=(const CampaignsCampaignIdPrice_quarantineConfirmResource& other) = default; // copy assignment
    CampaignsCampaignIdPrice_quarantineConfirmResource& operator=(CampaignsCampaignIdPrice_quarantineConfirmResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, ConfirmPricesRequest & confirmPricesRequest)> handler_POST_func =
            [](int64_t &, ConfirmPricesRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, ConfirmPricesRequest & confirmPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Создание нового чата с покупателем
/// </summary>
/// <remarks>
/// Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdChatsNewResource: public restbed::Resource
{
public:
    BusinessesBusinessIdChatsNewResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdChatsNewResource() = default;

    BusinessesBusinessIdChatsNewResource(
        const BusinessesBusinessIdChatsNewResource& other) = default; // copy constructor
    BusinessesBusinessIdChatsNewResource(BusinessesBusinessIdChatsNewResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdChatsNewResource& operator=(const BusinessesBusinessIdChatsNewResource& other) = default; // copy assignment
    BusinessesBusinessIdChatsNewResource& operator=(BusinessesBusinessIdChatsNewResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateChatResponse>(
        int64_t & businessId, CreateChatRequest & createChatRequest)> handler_POST_func =
            [](int64_t &, CreateChatRequest &) -> std::pair<int, CreateChatResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateChatResponse> handler_POST(
        int64_t & businessId, CreateChatRequest & createChatRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Создание точки продаж
/// </summary>
/// <remarks>
/// Создает точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOutletsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOutletsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOutletsResource() = default;

    CampaignsCampaignIdOutletsResource(
        const CampaignsCampaignIdOutletsResource& other) = default; // copy constructor
    CampaignsCampaignIdOutletsResource(CampaignsCampaignIdOutletsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOutletsResource& operator=(const CampaignsCampaignIdOutletsResource& other) = default; // copy assignment
    CampaignsCampaignIdOutletsResource& operator=(CampaignsCampaignIdOutletsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateOutletResponse>(
        int64_t & campaignId, ChangeOutletRequest & changeOutletRequest)> handler_POST_func =
            [](int64_t &, ChangeOutletRequest &) -> std::pair<int, CreateOutletResponse>
                { throw DbsApiException(501, "Not implemented"); };

    std::function<std::pair<int, GetOutletsResponse>(
        int64_t & campaignId, std::string & pageToken, int64_t & regionId, std::string & shopOutletCode, int64_t & regionId2)> handler_GET_func =
            [](int64_t &, std::string &, int64_t &, std::string &, int64_t &) -> std::pair<int, GetOutletsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateOutletResponse> handler_POST(
        int64_t & campaignId, ChangeOutletRequest & changeOutletRequest);

    virtual std::pair<int, GetOutletsResponse> handler_GET(
        int64_t & campaignId, std::string & pageToken, int64_t & regionId, std::string & shopOutletCode, int64_t & regionId2);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление товаров из ассортимента магазина
/// </summary>
/// <remarks>
/// Удаляет заданные товары из заданного магазина.  {% note warning \&quot;Запрос удаляет товары именно из конкретного магазина\&quot; %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdOffersDeleteResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffersDeleteResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffersDeleteResource() = default;

    CampaignsCampaignIdOffersDeleteResource(
        const CampaignsCampaignIdOffersDeleteResource& other) = default; // copy constructor
    CampaignsCampaignIdOffersDeleteResource(CampaignsCampaignIdOffersDeleteResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffersDeleteResource& operator=(const CampaignsCampaignIdOffersDeleteResource& other) = default; // copy assignment
    CampaignsCampaignIdOffersDeleteResource& operator=(CampaignsCampaignIdOffersDeleteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteCampaignOffersResponse>(
        int64_t & campaignId, DeleteCampaignOffersRequest & deleteCampaignOffersRequest)> handler_POST_func =
            [](int64_t &, DeleteCampaignOffersRequest &) -> std::pair<int, DeleteCampaignOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteCampaignOffersResponse> handler_POST(
        int64_t & campaignId, DeleteCampaignOffersRequest & deleteCampaignOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление комментария к отзыву
/// </summary>
/// <remarks>
/// Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdGoods_feedbackCommentsDeleteResource: public restbed::Resource
{
public:
    BusinessesBusinessIdGoods_feedbackCommentsDeleteResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdGoods_feedbackCommentsDeleteResource() = default;

    BusinessesBusinessIdGoods_feedbackCommentsDeleteResource(
        const BusinessesBusinessIdGoods_feedbackCommentsDeleteResource& other) = default; // copy constructor
    BusinessesBusinessIdGoods_feedbackCommentsDeleteResource(BusinessesBusinessIdGoods_feedbackCommentsDeleteResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdGoods_feedbackCommentsDeleteResource& operator=(const BusinessesBusinessIdGoods_feedbackCommentsDeleteResource& other) = default; // copy assignment
    BusinessesBusinessIdGoods_feedbackCommentsDeleteResource& operator=(BusinessesBusinessIdGoods_feedbackCommentsDeleteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, DeleteGoodsFeedbackCommentRequest & deleteGoodsFeedbackCommentRequest)> handler_POST_func =
            [](int64_t &, DeleteGoodsFeedbackCommentRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, DeleteGoodsFeedbackCommentRequest & deleteGoodsFeedbackCommentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Возобновление показа товаров
/// </summary>
/// <remarks>
/// Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdHidden_offersDeleteResource: public restbed::Resource
{
public:
    CampaignsCampaignIdHidden_offersDeleteResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdHidden_offersDeleteResource() = default;

    CampaignsCampaignIdHidden_offersDeleteResource(
        const CampaignsCampaignIdHidden_offersDeleteResource& other) = default; // copy constructor
    CampaignsCampaignIdHidden_offersDeleteResource(CampaignsCampaignIdHidden_offersDeleteResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdHidden_offersDeleteResource& operator=(const CampaignsCampaignIdHidden_offersDeleteResource& other) = default; // copy assignment
    CampaignsCampaignIdHidden_offersDeleteResource& operator=(CampaignsCampaignIdHidden_offersDeleteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, DeleteHiddenOffersRequest & deleteHiddenOffersRequest)> handler_POST_func =
            [](int64_t &, DeleteHiddenOffersRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, DeleteHiddenOffersRequest & deleteHiddenOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление товаров из каталога
/// </summary>
/// <remarks>
/// Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsDeleteResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsDeleteResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsDeleteResource() = default;

    BusinessesBusinessIdOffer_mappingsDeleteResource(
        const BusinessesBusinessIdOffer_mappingsDeleteResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsDeleteResource(BusinessesBusinessIdOffer_mappingsDeleteResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsDeleteResource& operator=(const BusinessesBusinessIdOffer_mappingsDeleteResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsDeleteResource& operator=(BusinessesBusinessIdOffer_mappingsDeleteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteOffersResponse>(
        int64_t & businessId, DeleteOffersRequest & deleteOffersRequest)> handler_POST_func =
            [](int64_t &, DeleteOffersRequest &) -> std::pair<int, DeleteOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteOffersResponse> handler_POST(
        int64_t & businessId, DeleteOffersRequest & deleteOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление товаров из архива
/// </summary>
/// <remarks>
/// Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsUnarchiveResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsUnarchiveResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsUnarchiveResource() = default;

    BusinessesBusinessIdOffer_mappingsUnarchiveResource(
        const BusinessesBusinessIdOffer_mappingsUnarchiveResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsUnarchiveResource(BusinessesBusinessIdOffer_mappingsUnarchiveResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsUnarchiveResource& operator=(const BusinessesBusinessIdOffer_mappingsUnarchiveResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsUnarchiveResource& operator=(BusinessesBusinessIdOffer_mappingsUnarchiveResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteOffersFromArchiveResponse>(
        int64_t & businessId, DeleteOffersFromArchiveRequest & deleteOffersFromArchiveRequest)> handler_POST_func =
            [](int64_t &, DeleteOffersFromArchiveRequest &) -> std::pair<int, DeleteOffersFromArchiveResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteOffersFromArchiveResponse> handler_POST(
        int64_t & businessId, DeleteOffersFromArchiveRequest & deleteOffersFromArchiveRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление точки продаж
/// </summary>
/// <remarks>
/// Удаляет точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOutletsOutletIdResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOutletsOutletIdResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOutletsOutletIdResource() = default;

    CampaignsCampaignIdOutletsOutletIdResource(
        const CampaignsCampaignIdOutletsOutletIdResource& other) = default; // copy constructor
    CampaignsCampaignIdOutletsOutletIdResource(CampaignsCampaignIdOutletsOutletIdResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOutletsOutletIdResource& operator=(const CampaignsCampaignIdOutletsOutletIdResource& other) = default; // copy assignment
    CampaignsCampaignIdOutletsOutletIdResource& operator=(CampaignsCampaignIdOutletsOutletIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & outletId)> handler_DELETE_func =
            [](int64_t &, int64_t &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };

    std::function<std::pair<int, GetOutletResponse>(
        int64_t & campaignId, int64_t & outletId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetOutletResponse>
                { throw DbsApiException(501, "Not implemented"); };

    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & outletId, ChangeOutletRequest & changeOutletRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, ChangeOutletRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_DELETE(
        int64_t & campaignId, int64_t & outletId);

    virtual std::pair<int, GetOutletResponse> handler_GET(
        int64_t & campaignId, int64_t & outletId);
    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, int64_t & outletId, ChangeOutletRequest & changeOutletRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление лицензий для точек продаж
/// </summary>
/// <remarks>
/// Удаляет информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOutletsLicensesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOutletsLicensesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOutletsLicensesResource() = default;

    CampaignsCampaignIdOutletsLicensesResource(
        const CampaignsCampaignIdOutletsLicensesResource& other) = default; // copy constructor
    CampaignsCampaignIdOutletsLicensesResource(CampaignsCampaignIdOutletsLicensesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOutletsLicensesResource& operator=(const CampaignsCampaignIdOutletsLicensesResource& other) = default; // copy assignment
    CampaignsCampaignIdOutletsLicensesResource& operator=(CampaignsCampaignIdOutletsLicensesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, std::set<int64_t> & ids)> handler_DELETE_func =
            [](int64_t &, std::set<int64_t> &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };

    std::function<std::pair<int, GetOutletLicensesResponse>(
        int64_t & campaignId, std::set<int64_t> & outletIds, std::set<int64_t> & ids)> handler_GET_func =
            [](int64_t &, std::set<int64_t> &, std::set<int64_t> &) -> std::pair<int, GetOutletLicensesResponse>
                { throw DbsApiException(501, "Not implemented"); };

    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, UpdateOutletLicenseRequest & updateOutletLicenseRequest)> handler_POST_func =
            [](int64_t &, UpdateOutletLicenseRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_DELETE(
        int64_t & campaignId, std::set<int64_t> & ids);

    virtual std::pair<int, GetOutletLicensesResponse> handler_GET(
        int64_t & campaignId, std::set<int64_t> & outletIds, std::set<int64_t> & ids);
    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, UpdateOutletLicenseRequest & updateOutletLicenseRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление товаров из акции
/// </summary>
/// <remarks>
/// Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdPromosOffersDeleteResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPromosOffersDeleteResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPromosOffersDeleteResource() = default;

    BusinessesBusinessIdPromosOffersDeleteResource(
        const BusinessesBusinessIdPromosOffersDeleteResource& other) = default; // copy constructor
    BusinessesBusinessIdPromosOffersDeleteResource(BusinessesBusinessIdPromosOffersDeleteResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPromosOffersDeleteResource& operator=(const BusinessesBusinessIdPromosOffersDeleteResource& other) = default; // copy assignment
    BusinessesBusinessIdPromosOffersDeleteResource& operator=(BusinessesBusinessIdPromosOffersDeleteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeletePromoOffersResponse>(
        int64_t & businessId, DeletePromoOffersRequest & deletePromoOffersRequest)> handler_POST_func =
            [](int64_t &, DeletePromoOffersRequest &) -> std::pair<int, DeletePromoOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeletePromoOffersResponse> handler_POST(
        int64_t & businessId, DeletePromoOffersRequest & deletePromoOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по бусту продаж
/// </summary>
/// <remarks>
/// Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsBoost_consolidatedGenerateResource: public restbed::Resource
{
public:
    ReportsBoost_consolidatedGenerateResource(const std::string& context = "");
    virtual ~ReportsBoost_consolidatedGenerateResource() = default;

    ReportsBoost_consolidatedGenerateResource(
        const ReportsBoost_consolidatedGenerateResource& other) = default; // copy constructor
    ReportsBoost_consolidatedGenerateResource(ReportsBoost_consolidatedGenerateResource&& other) noexcept = default; // move constructor

    ReportsBoost_consolidatedGenerateResource& operator=(const ReportsBoost_consolidatedGenerateResource& other) = default; // copy assignment
    ReportsBoost_consolidatedGenerateResource& operator=(ReportsBoost_consolidatedGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateBoostConsolidatedRequest & generateBoostConsolidatedRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateBoostConsolidatedRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateBoostConsolidatedRequest & generateBoostConsolidatedRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет «Конкурентная позиция»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
/// </remarks>
class  ReportsCompetitors_positionGenerateResource: public restbed::Resource
{
public:
    ReportsCompetitors_positionGenerateResource(const std::string& context = "");
    virtual ~ReportsCompetitors_positionGenerateResource() = default;

    ReportsCompetitors_positionGenerateResource(
        const ReportsCompetitors_positionGenerateResource& other) = default; // copy constructor
    ReportsCompetitors_positionGenerateResource(ReportsCompetitors_positionGenerateResource&& other) noexcept = default; // move constructor

    ReportsCompetitors_positionGenerateResource& operator=(const ReportsCompetitors_positionGenerateResource& other) = default; // copy assignment
    ReportsCompetitors_positionGenerateResource& operator=(ReportsCompetitors_positionGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateCompetitorsPositionReportRequest & generateCompetitorsPositionReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateCompetitorsPositionReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateCompetitorsPositionReportRequest & generateCompetitorsPositionReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по отзывам о товарах
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsGoods_feedbackGenerateResource: public restbed::Resource
{
public:
    ReportsGoods_feedbackGenerateResource(const std::string& context = "");
    virtual ~ReportsGoods_feedbackGenerateResource() = default;

    ReportsGoods_feedbackGenerateResource(
        const ReportsGoods_feedbackGenerateResource& other) = default; // copy constructor
    ReportsGoods_feedbackGenerateResource(ReportsGoods_feedbackGenerateResource&& other) noexcept = default; // move constructor

    ReportsGoods_feedbackGenerateResource& operator=(const ReportsGoods_feedbackGenerateResource& other) = default; // copy assignment
    ReportsGoods_feedbackGenerateResource& operator=(ReportsGoods_feedbackGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateGoodsFeedbackRequest & generateGoodsFeedbackRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateGoodsFeedbackRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateGoodsFeedbackRequest & generateGoodsFeedbackRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Готовые ярлыки‑наклейки на все коробки в нескольких заказах
/// </summary>
/// <remarks>
/// Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  ReportsDocumentsLabelsGenerateResource: public restbed::Resource
{
public:
    ReportsDocumentsLabelsGenerateResource(const std::string& context = "");
    virtual ~ReportsDocumentsLabelsGenerateResource() = default;

    ReportsDocumentsLabelsGenerateResource(
        const ReportsDocumentsLabelsGenerateResource& other) = default; // copy constructor
    ReportsDocumentsLabelsGenerateResource(ReportsDocumentsLabelsGenerateResource&& other) noexcept = default; // move constructor

    ReportsDocumentsLabelsGenerateResource& operator=(const ReportsDocumentsLabelsGenerateResource& other) = default; // copy assignment
    ReportsDocumentsLabelsGenerateResource& operator=(ReportsDocumentsLabelsGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateMassOrderLabelsRequest & generateMassOrderLabelsRequest, PageFormatType & format)> handler_POST_func =
            [](GenerateMassOrderLabelsRequest &, PageFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateMassOrderLabelsRequest & generateMassOrderLabelsRequest, PageFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Готовый ярлык‑наклейка для коробки в заказе
/// </summary>
/// <remarks>
/// Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & orderId, int64_t & shipmentId, int64_t & boxId, PageFormatType & format)> handler_GET_func =
            [](int64_t &, int64_t &, int64_t &, int64_t &, PageFormatType &) -> std::pair<int, std::string>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & orderId, int64_t & shipmentId, int64_t & boxId, PageFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Готовые ярлыки‑наклейки на все коробки в одном заказе
/// </summary>
/// <remarks>
/// Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & orderId, PageFormatType & format)> handler_GET_func =
            [](int64_t &, int64_t &, PageFormatType &) -> std::pair<int, std::string>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & orderId, PageFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет «Цены на рынке»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsPricesGenerateResource: public restbed::Resource
{
public:
    ReportsPricesGenerateResource(const std::string& context = "");
    virtual ~ReportsPricesGenerateResource() = default;

    ReportsPricesGenerateResource(
        const ReportsPricesGenerateResource& other) = default; // copy constructor
    ReportsPricesGenerateResource(ReportsPricesGenerateResource&& other) noexcept = default; // move constructor

    ReportsPricesGenerateResource& operator=(const ReportsPricesGenerateResource& other) = default; // copy assignment
    ReportsPricesGenerateResource& operator=(ReportsPricesGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GeneratePricesReportRequest & generatePricesReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GeneratePricesReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GeneratePricesReportRequest & generatePricesReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по полкам
/// </summary>
/// <remarks>
/// Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsShelf_statisticsGenerateResource: public restbed::Resource
{
public:
    ReportsShelf_statisticsGenerateResource(const std::string& context = "");
    virtual ~ReportsShelf_statisticsGenerateResource() = default;

    ReportsShelf_statisticsGenerateResource(
        const ReportsShelf_statisticsGenerateResource& other) = default; // copy constructor
    ReportsShelf_statisticsGenerateResource(ReportsShelf_statisticsGenerateResource&& other) noexcept = default; // move constructor

    ReportsShelf_statisticsGenerateResource& operator=(const ReportsShelf_statisticsGenerateResource& other) = default; // copy assignment
    ReportsShelf_statisticsGenerateResource& operator=(ReportsShelf_statisticsGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateShelfsStatisticsRequest & generateShelfsStatisticsRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateShelfsStatisticsRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateShelfsStatisticsRequest & generateShelfsStatisticsRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет «Аналитика продаж»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
/// </remarks>
class  ReportsShows_salesGenerateResource: public restbed::Resource
{
public:
    ReportsShows_salesGenerateResource(const std::string& context = "");
    virtual ~ReportsShows_salesGenerateResource() = default;

    ReportsShows_salesGenerateResource(
        const ReportsShows_salesGenerateResource& other) = default; // copy constructor
    ReportsShows_salesGenerateResource(ReportsShows_salesGenerateResource&& other) noexcept = default; // move constructor

    ReportsShows_salesGenerateResource& operator=(const ReportsShows_salesGenerateResource& other) = default; // copy assignment
    ReportsShows_salesGenerateResource& operator=(ReportsShows_salesGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateShowsSalesReportRequest & generateShowsSalesReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateShowsSalesReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateShowsSalesReportRequest & generateShowsSalesReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по остаткам на складах
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsStocks_on_warehousesGenerateResource: public restbed::Resource
{
public:
    ReportsStocks_on_warehousesGenerateResource(const std::string& context = "");
    virtual ~ReportsStocks_on_warehousesGenerateResource() = default;

    ReportsStocks_on_warehousesGenerateResource(
        const ReportsStocks_on_warehousesGenerateResource& other) = default; // copy constructor
    ReportsStocks_on_warehousesGenerateResource(ReportsStocks_on_warehousesGenerateResource&& other) noexcept = default; // move constructor

    ReportsStocks_on_warehousesGenerateResource& operator=(const ReportsStocks_on_warehousesGenerateResource& other) = default; // copy assignment
    ReportsStocks_on_warehousesGenerateResource& operator=(ReportsStocks_on_warehousesGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateStocksOnWarehousesReportRequest & generateStocksOnWarehousesReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateStocksOnWarehousesReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateStocksOnWarehousesReportRequest & generateStocksOnWarehousesReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по стоимости услуг
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsUnited_marketplace_servicesGenerateResource: public restbed::Resource
{
public:
    ReportsUnited_marketplace_servicesGenerateResource(const std::string& context = "");
    virtual ~ReportsUnited_marketplace_servicesGenerateResource() = default;

    ReportsUnited_marketplace_servicesGenerateResource(
        const ReportsUnited_marketplace_servicesGenerateResource& other) = default; // copy constructor
    ReportsUnited_marketplace_servicesGenerateResource(ReportsUnited_marketplace_servicesGenerateResource&& other) noexcept = default; // move constructor

    ReportsUnited_marketplace_servicesGenerateResource& operator=(const ReportsUnited_marketplace_servicesGenerateResource& other) = default; // copy assignment
    ReportsUnited_marketplace_servicesGenerateResource& operator=(ReportsUnited_marketplace_servicesGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateUnitedMarketplaceServicesReportRequest & generateUnitedMarketplaceServicesReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateUnitedMarketplaceServicesReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateUnitedMarketplaceServicesReportRequest & generateUnitedMarketplaceServicesReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по платежам
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsUnited_nettingGenerateResource: public restbed::Resource
{
public:
    ReportsUnited_nettingGenerateResource(const std::string& context = "");
    virtual ~ReportsUnited_nettingGenerateResource() = default;

    ReportsUnited_nettingGenerateResource(
        const ReportsUnited_nettingGenerateResource& other) = default; // copy constructor
    ReportsUnited_nettingGenerateResource(ReportsUnited_nettingGenerateResource&& other) noexcept = default; // move constructor

    ReportsUnited_nettingGenerateResource& operator=(const ReportsUnited_nettingGenerateResource& other) = default; // copy assignment
    ReportsUnited_nettingGenerateResource& operator=(ReportsUnited_nettingGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateUnitedNettingReportRequest & generateUnitedNettingReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateUnitedNettingReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateUnitedNettingReportRequest & generateUnitedNettingReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по заказам
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsUnited_ordersGenerateResource: public restbed::Resource
{
public:
    ReportsUnited_ordersGenerateResource(const std::string& context = "");
    virtual ~ReportsUnited_ordersGenerateResource() = default;

    ReportsUnited_ordersGenerateResource(
        const ReportsUnited_ordersGenerateResource& other) = default; // copy constructor
    ReportsUnited_ordersGenerateResource(ReportsUnited_ordersGenerateResource&& other) noexcept = default; // move constructor

    ReportsUnited_ordersGenerateResource& operator=(const ReportsUnited_ordersGenerateResource& other) = default; // copy assignment
    ReportsUnited_ordersGenerateResource& operator=(ReportsUnited_ordersGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateUnitedOrdersRequest & generateUnitedOrdersRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateUnitedOrdersRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateUnitedOrdersRequest & generateUnitedOrdersRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Все предложения магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
/// </remarks>
class  CampaignsCampaignIdOffersAllResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffersAllResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffersAllResource() = default;

    CampaignsCampaignIdOffersAllResource(
        const CampaignsCampaignIdOffersAllResource& other) = default; // copy constructor
    CampaignsCampaignIdOffersAllResource(CampaignsCampaignIdOffersAllResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffersAllResource& operator=(const CampaignsCampaignIdOffersAllResource& other) = default; // copy assignment
    CampaignsCampaignIdOffersAllResource& operator=(CampaignsCampaignIdOffersAllResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetAllOffersResponse>(
        int64_t & campaignId, int64_t & feedId, int32_t & chunk)> handler_GET_func =
            [](int64_t &, int64_t &, int32_t &) -> std::pair<int, GetAllOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetAllOffersResponse> handler_GET(
        int64_t & campaignId, int64_t & feedId, int32_t & chunk);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация об установленных ставках
/// </summary>
/// <remarks>
/// Возвращает значения ставок для заданных товаров.  {% note warning \&quot;\&quot; %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdBidsInfoResource: public restbed::Resource
{
public:
    BusinessesBusinessIdBidsInfoResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdBidsInfoResource() = default;

    BusinessesBusinessIdBidsInfoResource(
        const BusinessesBusinessIdBidsInfoResource& other) = default; // copy constructor
    BusinessesBusinessIdBidsInfoResource(BusinessesBusinessIdBidsInfoResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdBidsInfoResource& operator=(const BusinessesBusinessIdBidsInfoResource& other) = default; // copy assignment
    BusinessesBusinessIdBidsInfoResource& operator=(BusinessesBusinessIdBidsInfoResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetBidsInfoResponse>(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetBidsInfoRequest & getBidsInfoRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetBidsInfoRequest &) -> std::pair<int, GetBidsInfoResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetBidsInfoResponse> handler_POST(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetBidsInfoRequest & getBidsInfoRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Рекомендованные ставки для заданных товаров
/// </summary>
/// <remarks>
/// Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdBidsRecommendationsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdBidsRecommendationsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdBidsRecommendationsResource() = default;

    BusinessesBusinessIdBidsRecommendationsResource(
        const BusinessesBusinessIdBidsRecommendationsResource& other) = default; // copy constructor
    BusinessesBusinessIdBidsRecommendationsResource(BusinessesBusinessIdBidsRecommendationsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdBidsRecommendationsResource& operator=(const BusinessesBusinessIdBidsRecommendationsResource& other) = default; // copy assignment
    BusinessesBusinessIdBidsRecommendationsResource& operator=(BusinessesBusinessIdBidsRecommendationsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetBidsRecommendationsResponse>(
        int64_t & businessId, GetBidsRecommendationsRequest & getBidsRecommendationsRequest)> handler_POST_func =
            [](int64_t &, GetBidsRecommendationsRequest &) -> std::pair<int, GetBidsRecommendationsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetBidsRecommendationsResponse> handler_POST(
        int64_t & businessId, GetBidsRecommendationsRequest & getBidsRecommendationsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список товаров, находящихся в карантине по цене в кабинете
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdPrice_quarantineResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPrice_quarantineResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPrice_quarantineResource() = default;

    BusinessesBusinessIdPrice_quarantineResource(
        const BusinessesBusinessIdPrice_quarantineResource& other) = default; // copy constructor
    BusinessesBusinessIdPrice_quarantineResource(BusinessesBusinessIdPrice_quarantineResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPrice_quarantineResource& operator=(const BusinessesBusinessIdPrice_quarantineResource& other) = default; // copy assignment
    BusinessesBusinessIdPrice_quarantineResource& operator=(BusinessesBusinessIdPrice_quarantineResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetQuarantineOffersResponse>(
        int64_t & businessId, GetQuarantineOffersRequest & getQuarantineOffersRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetQuarantineOffersRequest &, std::string &, int32_t &) -> std::pair<int, GetQuarantineOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetQuarantineOffersResponse> handler_POST(
        int64_t & businessId, GetQuarantineOffersRequest & getQuarantineOffersRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Настройки кабинета
/// </summary>
/// <remarks>
/// Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdSettingsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdSettingsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdSettingsResource() = default;

    BusinessesBusinessIdSettingsResource(
        const BusinessesBusinessIdSettingsResource& other) = default; // copy constructor
    BusinessesBusinessIdSettingsResource(BusinessesBusinessIdSettingsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdSettingsResource& operator=(const BusinessesBusinessIdSettingsResource& other) = default; // copy assignment
    BusinessesBusinessIdSettingsResource& operator=(BusinessesBusinessIdSettingsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetBusinessSettingsResponse>(
        int64_t & businessId)> handler_POST_func =
            [](int64_t &) -> std::pair<int, GetBusinessSettingsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetBusinessSettingsResponse> handler_POST(
        int64_t & businessId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о магазине
/// </summary>
/// <remarks>
/// Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdResource: public restbed::Resource
{
public:
    CampaignsCampaignIdResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdResource() = default;

    CampaignsCampaignIdResource(
        const CampaignsCampaignIdResource& other) = default; // copy constructor
    CampaignsCampaignIdResource(CampaignsCampaignIdResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdResource& operator=(const CampaignsCampaignIdResource& other) = default; // copy assignment
    CampaignsCampaignIdResource& operator=(CampaignsCampaignIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignResponse>(
        int64_t & campaignId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetCampaignResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignResponse> handler_GET(
        int64_t & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Логины, связанные с магазином
/// </summary>
/// <remarks>
/// Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdLoginsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdLoginsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdLoginsResource() = default;

    CampaignsCampaignIdLoginsResource(
        const CampaignsCampaignIdLoginsResource& other) = default; // copy constructor
    CampaignsCampaignIdLoginsResource(CampaignsCampaignIdLoginsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdLoginsResource& operator=(const CampaignsCampaignIdLoginsResource& other) = default; // copy assignment
    CampaignsCampaignIdLoginsResource& operator=(CampaignsCampaignIdLoginsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignLoginsResponse>(
        int64_t & campaignId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetCampaignLoginsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignLoginsResponse> handler_GET(
        int64_t & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о товарах, которые размещены в заданном магазине
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdOffersResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffersResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffersResource() = default;

    CampaignsCampaignIdOffersResource(
        const CampaignsCampaignIdOffersResource& other) = default; // copy constructor
    CampaignsCampaignIdOffersResource(CampaignsCampaignIdOffersResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffersResource& operator=(const CampaignsCampaignIdOffersResource& other) = default; // copy assignment
    CampaignsCampaignIdOffersResource& operator=(CampaignsCampaignIdOffersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignOffersResponse>(
        int64_t & campaignId, GetCampaignOffersRequest & getCampaignOffersRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetCampaignOffersRequest &, std::string &, int32_t &) -> std::pair<int, GetCampaignOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };

    std::function<std::pair<int, GetOffersResponse>(
        int64_t & campaignId, std::string & query, int64_t & feedId, std::string & shopCategoryId, CurrencyType & currency, bool & matched, int32_t & page, int32_t & pageSize)> handler_GET_func =
            [](int64_t &, std::string &, int64_t &, std::string &, CurrencyType &, bool &, int32_t &, int32_t &) -> std::pair<int, GetOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignOffersResponse> handler_POST(
        int64_t & campaignId, GetCampaignOffersRequest & getCampaignOffersRequest, std::string & pageToken, int32_t & limit);

    virtual std::pair<int, GetOffersResponse> handler_GET(
        int64_t & campaignId, std::string & query, int64_t & feedId, std::string & shopCategoryId, CurrencyType & currency, bool & matched, int32_t & page, int32_t & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список товаров, находящихся в карантине по цене в магазине
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdPrice_quarantineResource: public restbed::Resource
{
public:
    CampaignsCampaignIdPrice_quarantineResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdPrice_quarantineResource() = default;

    CampaignsCampaignIdPrice_quarantineResource(
        const CampaignsCampaignIdPrice_quarantineResource& other) = default; // copy constructor
    CampaignsCampaignIdPrice_quarantineResource(CampaignsCampaignIdPrice_quarantineResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdPrice_quarantineResource& operator=(const CampaignsCampaignIdPrice_quarantineResource& other) = default; // copy assignment
    CampaignsCampaignIdPrice_quarantineResource& operator=(CampaignsCampaignIdPrice_quarantineResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetQuarantineOffersResponse>(
        int64_t & campaignId, GetQuarantineOffersRequest & getQuarantineOffersRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetQuarantineOffersRequest &, std::string &, int32_t &) -> std::pair<int, GetQuarantineOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetQuarantineOffersResponse> handler_POST(
        int64_t & campaignId, GetQuarantineOffersRequest & getQuarantineOffersRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Регион магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdRegionResource: public restbed::Resource
{
public:
    CampaignsCampaignIdRegionResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdRegionResource() = default;

    CampaignsCampaignIdRegionResource(
        const CampaignsCampaignIdRegionResource& other) = default; // copy constructor
    CampaignsCampaignIdRegionResource(CampaignsCampaignIdRegionResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdRegionResource& operator=(const CampaignsCampaignIdRegionResource& other) = default; // copy assignment
    CampaignsCampaignIdRegionResource& operator=(CampaignsCampaignIdRegionResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignRegionResponse>(
        int64_t & campaignId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetCampaignRegionResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignRegionResponse> handler_GET(
        int64_t & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Настройки магазина
/// </summary>
/// <remarks>
/// Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdSettingsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdSettingsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdSettingsResource() = default;

    CampaignsCampaignIdSettingsResource(
        const CampaignsCampaignIdSettingsResource& other) = default; // copy constructor
    CampaignsCampaignIdSettingsResource(CampaignsCampaignIdSettingsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdSettingsResource& operator=(const CampaignsCampaignIdSettingsResource& other) = default; // copy assignment
    CampaignsCampaignIdSettingsResource& operator=(CampaignsCampaignIdSettingsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignSettingsResponse>(
        int64_t & campaignId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetCampaignSettingsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignSettingsResponse> handler_GET(
        int64_t & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список магазинов пользователя
/// </summary>
/// <remarks>
/// Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsResource: public restbed::Resource
{
public:
    CampaignsResource(const std::string& context = "");
    virtual ~CampaignsResource() = default;

    CampaignsResource(
        const CampaignsResource& other) = default; // copy constructor
    CampaignsResource(CampaignsResource&& other) noexcept = default; // move constructor

    CampaignsResource& operator=(const CampaignsResource& other) = default; // copy assignment
    CampaignsResource& operator=(CampaignsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignsResponse>(
        int32_t & page, int32_t & pageSize)> handler_GET_func =
            [](int32_t &, int32_t &) -> std::pair<int, GetCampaignsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignsResponse> handler_GET(
        int32_t & page, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Магазины, доступные логину
/// </summary>
/// <remarks>
/// Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  CampaignsBy_loginLoginResource: public restbed::Resource
{
public:
    CampaignsBy_loginLoginResource(const std::string& context = "");
    virtual ~CampaignsBy_loginLoginResource() = default;

    CampaignsBy_loginLoginResource(
        const CampaignsBy_loginLoginResource& other) = default; // copy constructor
    CampaignsBy_loginLoginResource(CampaignsBy_loginLoginResource&& other) noexcept = default; // move constructor

    CampaignsBy_loginLoginResource& operator=(const CampaignsBy_loginLoginResource& other) = default; // copy assignment
    CampaignsBy_loginLoginResource& operator=(CampaignsBy_loginLoginResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignsResponse>(
        std::string & login, int32_t & page, int32_t & pageSize)> handler_GET_func =
            [](std::string &, int32_t &, int32_t &) -> std::pair<int, GetCampaignsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignsResponse> handler_GET(
        std::string & login, int32_t & page, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Лимит на установку кванта продажи и минимального количества товаров в заказе
/// </summary>
/// <remarks>
/// Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  CategoriesMax_sale_quantumResource: public restbed::Resource
{
public:
    CategoriesMax_sale_quantumResource(const std::string& context = "");
    virtual ~CategoriesMax_sale_quantumResource() = default;

    CategoriesMax_sale_quantumResource(
        const CategoriesMax_sale_quantumResource& other) = default; // copy constructor
    CategoriesMax_sale_quantumResource(CategoriesMax_sale_quantumResource&& other) noexcept = default; // move constructor

    CategoriesMax_sale_quantumResource& operator=(const CategoriesMax_sale_quantumResource& other) = default; // copy assignment
    CategoriesMax_sale_quantumResource& operator=(CategoriesMax_sale_quantumResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCategoriesMaxSaleQuantumResponse>(
        GetCategoriesMaxSaleQuantumRequest & getCategoriesMaxSaleQuantumRequest)> handler_POST_func =
            [](GetCategoriesMaxSaleQuantumRequest &) -> std::pair<int, GetCategoriesMaxSaleQuantumResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCategoriesMaxSaleQuantumResponse> handler_POST(
        GetCategoriesMaxSaleQuantumRequest & getCategoriesMaxSaleQuantumRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Дерево категорий
/// </summary>
/// <remarks>
/// Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  CategoriesTreeResource: public restbed::Resource
{
public:
    CategoriesTreeResource(const std::string& context = "");
    virtual ~CategoriesTreeResource() = default;

    CategoriesTreeResource(
        const CategoriesTreeResource& other) = default; // copy constructor
    CategoriesTreeResource(CategoriesTreeResource&& other) noexcept = default; // move constructor

    CategoriesTreeResource& operator=(const CategoriesTreeResource& other) = default; // copy assignment
    CategoriesTreeResource& operator=(CategoriesTreeResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCategoriesResponse>(
        GetCategoriesRequest & getCategoriesRequest)> handler_POST_func =
            [](GetCategoriesRequest &) -> std::pair<int, GetCategoriesResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCategoriesResponse> handler_POST(
        GetCategoriesRequest & getCategoriesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Списки характеристик товаров по категориям
/// </summary>
/// <remarks>
/// Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
/// </remarks>
class  CategoryCategoryIdParametersResource: public restbed::Resource
{
public:
    CategoryCategoryIdParametersResource(const std::string& context = "");
    virtual ~CategoryCategoryIdParametersResource() = default;

    CategoryCategoryIdParametersResource(
        const CategoryCategoryIdParametersResource& other) = default; // copy constructor
    CategoryCategoryIdParametersResource(CategoryCategoryIdParametersResource&& other) noexcept = default; // move constructor

    CategoryCategoryIdParametersResource& operator=(const CategoryCategoryIdParametersResource& other) = default; // copy assignment
    CategoryCategoryIdParametersResource& operator=(CategoryCategoryIdParametersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCategoryContentParametersResponse>(
        int64_t & categoryId)> handler_POST_func =
            [](int64_t &) -> std::pair<int, GetCategoryContentParametersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCategoryContentParametersResponse> handler_POST(
        int64_t & categoryId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение истории сообщений в чате
/// </summary>
/// <remarks>
/// Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdChatsHistoryResource: public restbed::Resource
{
public:
    BusinessesBusinessIdChatsHistoryResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdChatsHistoryResource() = default;

    BusinessesBusinessIdChatsHistoryResource(
        const BusinessesBusinessIdChatsHistoryResource& other) = default; // copy constructor
    BusinessesBusinessIdChatsHistoryResource(BusinessesBusinessIdChatsHistoryResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdChatsHistoryResource& operator=(const BusinessesBusinessIdChatsHistoryResource& other) = default; // copy assignment
    BusinessesBusinessIdChatsHistoryResource& operator=(BusinessesBusinessIdChatsHistoryResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetChatHistoryResponse>(
        int64_t & businessId, int64_t & chatId, GetChatHistoryRequest & getChatHistoryRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, int64_t &, GetChatHistoryRequest &, std::string &, int32_t &) -> std::pair<int, GetChatHistoryResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetChatHistoryResponse> handler_POST(
        int64_t & businessId, int64_t & chatId, GetChatHistoryRequest & getChatHistoryRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение доступных чатов
/// </summary>
/// <remarks>
/// Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdChatsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdChatsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdChatsResource() = default;

    BusinessesBusinessIdChatsResource(
        const BusinessesBusinessIdChatsResource& other) = default; // copy constructor
    BusinessesBusinessIdChatsResource(BusinessesBusinessIdChatsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdChatsResource& operator=(const BusinessesBusinessIdChatsResource& other) = default; // copy assignment
    BusinessesBusinessIdChatsResource& operator=(BusinessesBusinessIdChatsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetChatsResponse>(
        int64_t & businessId, GetChatsRequest & getChatsRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetChatsRequest &, std::string &, int32_t &) -> std::pair<int, GetChatsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetChatsResponse> handler_POST(
        int64_t & businessId, GetChatsRequest & getChatsRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Справочник служб доставки
/// </summary>
/// <remarks>
/// Возвращает справочник служб доставки: идентификаторы и наименования. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
/// </remarks>
class  DeliveryServicesResource: public restbed::Resource
{
public:
    DeliveryServicesResource(const std::string& context = "");
    virtual ~DeliveryServicesResource() = default;

    DeliveryServicesResource(
        const DeliveryServicesResource& other) = default; // copy constructor
    DeliveryServicesResource(DeliveryServicesResource&& other) noexcept = default; // move constructor

    DeliveryServicesResource& operator=(const DeliveryServicesResource& other) = default; // copy assignment
    DeliveryServicesResource& operator=(DeliveryServicesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetDeliveryServicesResponse>(
        )> handler_GET_func =
            []() -> std::pair<int, GetDeliveryServicesResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetDeliveryServicesResponse> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о прайс-листе
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFeedsFeedIdResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFeedsFeedIdResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFeedsFeedIdResource() = default;

    CampaignsCampaignIdFeedsFeedIdResource(
        const CampaignsCampaignIdFeedsFeedIdResource& other) = default; // copy constructor
    CampaignsCampaignIdFeedsFeedIdResource(CampaignsCampaignIdFeedsFeedIdResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFeedsFeedIdResource& operator=(const CampaignsCampaignIdFeedsFeedIdResource& other) = default; // copy assignment
    CampaignsCampaignIdFeedsFeedIdResource& operator=(CampaignsCampaignIdFeedsFeedIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetFeedResponse>(
        int64_t & campaignId, int64_t & feedId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetFeedResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetFeedResponse> handler_GET(
        int64_t & campaignId, int64_t & feedId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по индексации прайс-листа
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра &#x60;generationId&#x60;.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFeedsFeedIdIndex_logsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFeedsFeedIdIndex_logsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFeedsFeedIdIndex_logsResource() = default;

    CampaignsCampaignIdFeedsFeedIdIndex_logsResource(
        const CampaignsCampaignIdFeedsFeedIdIndex_logsResource& other) = default; // copy constructor
    CampaignsCampaignIdFeedsFeedIdIndex_logsResource(CampaignsCampaignIdFeedsFeedIdIndex_logsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFeedsFeedIdIndex_logsResource& operator=(const CampaignsCampaignIdFeedsFeedIdIndex_logsResource& other) = default; // copy assignment
    CampaignsCampaignIdFeedsFeedIdIndex_logsResource& operator=(CampaignsCampaignIdFeedsFeedIdIndex_logsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetFeedIndexLogsResponse>(
        int64_t & campaignId, int64_t & feedId, int32_t & limit, std::string & publishedTimeFrom, std::string & publishedTimeTo, FeedIndexLogsStatusType & status)> handler_GET_func =
            [](int64_t &, int64_t &, int32_t &, std::string &, std::string &, FeedIndexLogsStatusType &) -> std::pair<int, GetFeedIndexLogsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetFeedIndexLogsResponse> handler_GET(
        int64_t & campaignId, int64_t & feedId, int32_t & limit, std::string & publishedTimeFrom, std::string & publishedTimeTo, FeedIndexLogsStatusType & status);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Новые и обновленные отзывы о магазине
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFeedbackUpdatesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFeedbackUpdatesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFeedbackUpdatesResource() = default;

    CampaignsCampaignIdFeedbackUpdatesResource(
        const CampaignsCampaignIdFeedbackUpdatesResource& other) = default; // copy constructor
    CampaignsCampaignIdFeedbackUpdatesResource(CampaignsCampaignIdFeedbackUpdatesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFeedbackUpdatesResource& operator=(const CampaignsCampaignIdFeedbackUpdatesResource& other) = default; // copy assignment
    CampaignsCampaignIdFeedbackUpdatesResource& operator=(CampaignsCampaignIdFeedbackUpdatesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetFeedbackListResponse>(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, std::string & fromDate)> handler_GET_func =
            [](int64_t &, std::string &, int32_t &, std::string &) -> std::pair<int, GetFeedbackListResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetFeedbackListResponse> handler_GET(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, std::string & fromDate);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список прайс-листов магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFeedsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFeedsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFeedsResource() = default;

    CampaignsCampaignIdFeedsResource(
        const CampaignsCampaignIdFeedsResource& other) = default; // copy constructor
    CampaignsCampaignIdFeedsResource(CampaignsCampaignIdFeedsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFeedsResource& operator=(const CampaignsCampaignIdFeedsResource& other) = default; // copy assignment
    CampaignsCampaignIdFeedsResource& operator=(CampaignsCampaignIdFeedsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetFeedsResponse>(
        int64_t & campaignId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetFeedsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetFeedsResponse> handler_GET(
        int64_t & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение комментариев к отзыву
/// </summary>
/// <remarks>
/// Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdGoods_feedbackCommentsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdGoods_feedbackCommentsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdGoods_feedbackCommentsResource() = default;

    BusinessesBusinessIdGoods_feedbackCommentsResource(
        const BusinessesBusinessIdGoods_feedbackCommentsResource& other) = default; // copy constructor
    BusinessesBusinessIdGoods_feedbackCommentsResource(BusinessesBusinessIdGoods_feedbackCommentsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdGoods_feedbackCommentsResource& operator=(const BusinessesBusinessIdGoods_feedbackCommentsResource& other) = default; // copy assignment
    BusinessesBusinessIdGoods_feedbackCommentsResource& operator=(BusinessesBusinessIdGoods_feedbackCommentsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetGoodsFeedbackCommentsResponse>(
        int64_t & businessId, GetGoodsFeedbackCommentsRequest & getGoodsFeedbackCommentsRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetGoodsFeedbackCommentsRequest &, std::string &, int32_t &) -> std::pair<int, GetGoodsFeedbackCommentsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetGoodsFeedbackCommentsResponse> handler_POST(
        int64_t & businessId, GetGoodsFeedbackCommentsRequest & getGoodsFeedbackCommentsRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение отзывов о товарах продавца
/// </summary>
/// <remarks>
/// Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdGoods_feedbackResource: public restbed::Resource
{
public:
    BusinessesBusinessIdGoods_feedbackResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdGoods_feedbackResource() = default;

    BusinessesBusinessIdGoods_feedbackResource(
        const BusinessesBusinessIdGoods_feedbackResource& other) = default; // copy constructor
    BusinessesBusinessIdGoods_feedbackResource(BusinessesBusinessIdGoods_feedbackResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdGoods_feedbackResource& operator=(const BusinessesBusinessIdGoods_feedbackResource& other) = default; // copy assignment
    BusinessesBusinessIdGoods_feedbackResource& operator=(BusinessesBusinessIdGoods_feedbackResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetGoodsFeedbackResponse>(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetGoodsFeedbackRequest & getGoodsFeedbackRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetGoodsFeedbackRequest &) -> std::pair<int, GetGoodsFeedbackResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetGoodsFeedbackResponse> handler_POST(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetGoodsFeedbackRequest & getGoodsFeedbackRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по товарам
/// </summary>
/// <remarks>
/// Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdStatsSkusResource: public restbed::Resource
{
public:
    CampaignsCampaignIdStatsSkusResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdStatsSkusResource() = default;

    CampaignsCampaignIdStatsSkusResource(
        const CampaignsCampaignIdStatsSkusResource& other) = default; // copy constructor
    CampaignsCampaignIdStatsSkusResource(CampaignsCampaignIdStatsSkusResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdStatsSkusResource& operator=(const CampaignsCampaignIdStatsSkusResource& other) = default; // copy assignment
    CampaignsCampaignIdStatsSkusResource& operator=(CampaignsCampaignIdStatsSkusResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetGoodsStatsResponse>(
        int64_t & campaignId, GetGoodsStatsRequest & getGoodsStatsRequest)> handler_POST_func =
            [](int64_t &, GetGoodsStatsRequest &) -> std::pair<int, GetGoodsStatsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetGoodsStatsResponse> handler_POST(
        int64_t & campaignId, GetGoodsStatsRequest & getGoodsStatsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация об одной модели
/// </summary>
/// <remarks>
/// Возвращает информацию о модели товара.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsModelIdResource: public restbed::Resource
{
public:
    ModelsModelIdResource(const std::string& context = "");
    virtual ~ModelsModelIdResource() = default;

    ModelsModelIdResource(
        const ModelsModelIdResource& other) = default; // copy constructor
    ModelsModelIdResource(ModelsModelIdResource&& other) noexcept = default; // move constructor

    ModelsModelIdResource& operator=(const ModelsModelIdResource& other) = default; // copy assignment
    ModelsModelIdResource& operator=(ModelsModelIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetModelsResponse>(
        int64_t & modelId, int64_t & regionId, CurrencyType & currency)> handler_GET_func =
            [](int64_t &, int64_t &, CurrencyType &) -> std::pair<int, GetModelsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetModelsResponse> handler_GET(
        int64_t & modelId, int64_t & regionId, CurrencyType & currency);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список предложений для одной модели
/// </summary>
/// <remarks>
/// Возвращает информацию о первых десяти предложениях, расположенных на карточке модели.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей метод не поддерживается. Идентификатор групповой модели игнорируется.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsModelIdOffersResource: public restbed::Resource
{
public:
    ModelsModelIdOffersResource(const std::string& context = "");
    virtual ~ModelsModelIdOffersResource() = default;

    ModelsModelIdOffersResource(
        const ModelsModelIdOffersResource& other) = default; // copy constructor
    ModelsModelIdOffersResource(ModelsModelIdOffersResource&& other) noexcept = default; // move constructor

    ModelsModelIdOffersResource& operator=(const ModelsModelIdOffersResource& other) = default; // copy assignment
    ModelsModelIdOffersResource& operator=(ModelsModelIdOffersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetModelsOffersResponse>(
        int64_t & modelId, int64_t & regionId, CurrencyType & currency, SortOrderType & orderByPrice, int32_t & count, int32_t & page)> handler_GET_func =
            [](int64_t &, int64_t &, CurrencyType &, SortOrderType &, int32_t &, int32_t &) -> std::pair<int, GetModelsOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetModelsOffersResponse> handler_GET(
        int64_t & modelId, int64_t & regionId, CurrencyType & currency, SortOrderType & orderByPrice, int32_t & count, int32_t & page);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о нескольких моделях
/// </summary>
/// <remarks>
/// Возвращает информацию о моделях товаров.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsResource: public restbed::Resource
{
public:
    ModelsResource(const std::string& context = "");
    virtual ~ModelsResource() = default;

    ModelsResource(
        const ModelsResource& other) = default; // copy constructor
    ModelsResource(ModelsResource&& other) noexcept = default; // move constructor

    ModelsResource& operator=(const ModelsResource& other) = default; // copy assignment
    ModelsResource& operator=(ModelsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetModelsResponse>(
        int64_t & regionId, GetModelsRequest & getModelsRequest, CurrencyType & currency)> handler_POST_func =
            [](int64_t &, GetModelsRequest &, CurrencyType &) -> std::pair<int, GetModelsResponse>
                { throw DbsApiException(501, "Not implemented"); };

    std::function<std::pair<int, SearchModelsResponse>(
        std::string & query, int64_t & regionId, CurrencyType & currency, int32_t & page, int32_t & pageSize)> handler_GET_func =
            [](std::string &, int64_t &, CurrencyType &, int32_t &, int32_t &) -> std::pair<int, SearchModelsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetModelsResponse> handler_POST(
        int64_t & regionId, GetModelsRequest & getModelsRequest, CurrencyType & currency);

    virtual std::pair<int, SearchModelsResponse> handler_GET(
        std::string & query, int64_t & regionId, CurrencyType & currency, int32_t & page, int32_t & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список предложений для нескольких моделей
/// </summary>
/// <remarks>
/// Возвращает информацию о первых десяти предложениях, расположенных на карточках моделей, идентификаторы которых указаны в запросе.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей выдача предложений не поддерживается. Идентификаторы групповых моделей игнорируются.  В одном запросе можно получить информацию о предложениях не более чем для 100 моделей.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsOffersResource: public restbed::Resource
{
public:
    ModelsOffersResource(const std::string& context = "");
    virtual ~ModelsOffersResource() = default;

    ModelsOffersResource(
        const ModelsOffersResource& other) = default; // copy constructor
    ModelsOffersResource(ModelsOffersResource&& other) noexcept = default; // move constructor

    ModelsOffersResource& operator=(const ModelsOffersResource& other) = default; // copy assignment
    ModelsOffersResource& operator=(ModelsOffersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetModelsOffersResponse>(
        int64_t & regionId, GetModelsRequest & getModelsRequest, CurrencyType & currency, SortOrderType & orderByPrice)> handler_POST_func =
            [](int64_t &, GetModelsRequest &, CurrencyType &, SortOrderType &) -> std::pair<int, GetModelsOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetModelsOffersResponse> handler_POST(
        int64_t & regionId, GetModelsRequest & getModelsRequest, CurrencyType & currency, SortOrderType & orderByPrice);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение информации о заполненности карточек магазина
/// </summary>
/// <remarks>
/// Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_cardsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_cardsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_cardsResource() = default;

    BusinessesBusinessIdOffer_cardsResource(
        const BusinessesBusinessIdOffer_cardsResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_cardsResource(BusinessesBusinessIdOffer_cardsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_cardsResource& operator=(const BusinessesBusinessIdOffer_cardsResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_cardsResource& operator=(BusinessesBusinessIdOffer_cardsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOfferCardsContentStatusResponse>(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetOfferCardsContentStatusRequest & getOfferCardsContentStatusRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetOfferCardsContentStatusRequest &) -> std::pair<int, GetOfferCardsContentStatusResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOfferCardsContentStatusResponse> handler_POST(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetOfferCardsContentStatusRequest & getOfferCardsContentStatusRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список товаров в каталоге
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
/// </remarks>
class  CampaignsCampaignIdOffer_mapping_entriesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_mapping_entriesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_mapping_entriesResource() = default;

    CampaignsCampaignIdOffer_mapping_entriesResource(
        const CampaignsCampaignIdOffer_mapping_entriesResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_mapping_entriesResource(CampaignsCampaignIdOffer_mapping_entriesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_mapping_entriesResource& operator=(const CampaignsCampaignIdOffer_mapping_entriesResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_mapping_entriesResource& operator=(CampaignsCampaignIdOffer_mapping_entriesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOfferMappingEntriesResponse>(
        int64_t & campaignId, std::vector<std::string> & offerId, std::vector<std::string> & shopSku, OfferMappingKindType & mappingKind, std::vector<OfferProcessingStatusType> & status, std::vector<OfferAvailabilityStatusType> & availability, std::vector<int32_t> & categoryId, std::vector<std::string> & vendor, std::string & pageToken, int32_t & limit)> handler_GET_func =
            [](int64_t &, std::vector<std::string> &, std::vector<std::string> &, OfferMappingKindType &, std::vector<OfferProcessingStatusType> &, std::vector<OfferAvailabilityStatusType> &, std::vector<int32_t> &, std::vector<std::string> &, std::string &, int32_t &) -> std::pair<int, GetOfferMappingEntriesResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOfferMappingEntriesResponse> handler_GET(
        int64_t & campaignId, std::vector<std::string> & offerId, std::vector<std::string> & shopSku, OfferMappingKindType & mappingKind, std::vector<OfferProcessingStatusType> & status, std::vector<OfferAvailabilityStatusType> & availability, std::vector<int32_t> & categoryId, std::vector<std::string> & vendor, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о товарах в каталоге
/// </summary>
/// <remarks>
/// Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsResource() = default;

    BusinessesBusinessIdOffer_mappingsResource(
        const BusinessesBusinessIdOffer_mappingsResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsResource(BusinessesBusinessIdOffer_mappingsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsResource& operator=(const BusinessesBusinessIdOffer_mappingsResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsResource& operator=(BusinessesBusinessIdOffer_mappingsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOfferMappingsResponse>(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetOfferMappingsRequest & getOfferMappingsRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetOfferMappingsRequest &) -> std::pair<int, GetOfferMappingsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOfferMappingsResponse> handler_POST(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetOfferMappingsRequest & getOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Рекомендации Маркета, касающиеся цен
/// </summary>
/// <remarks>
/// Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdOffersRecommendationsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffersRecommendationsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffersRecommendationsResource() = default;

    BusinessesBusinessIdOffersRecommendationsResource(
        const BusinessesBusinessIdOffersRecommendationsResource& other) = default; // copy constructor
    BusinessesBusinessIdOffersRecommendationsResource(BusinessesBusinessIdOffersRecommendationsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffersRecommendationsResource& operator=(const BusinessesBusinessIdOffersRecommendationsResource& other) = default; // copy assignment
    BusinessesBusinessIdOffersRecommendationsResource& operator=(BusinessesBusinessIdOffersRecommendationsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOfferRecommendationsResponse>(
        int64_t & businessId, GetOfferRecommendationsRequest & getOfferRecommendationsRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetOfferRecommendationsRequest &, std::string &, int32_t &) -> std::pair<int, GetOfferRecommendationsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOfferRecommendationsResponse> handler_POST(
        int64_t & businessId, GetOfferRecommendationsRequest & getOfferRecommendationsRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация об одном заказе
/// </summary>
/// <remarks>
/// Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdResource() = default;

    CampaignsCampaignIdOrdersOrderIdResource(
        const CampaignsCampaignIdOrdersOrderIdResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdResource(CampaignsCampaignIdOrdersOrderIdResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdResource& operator=(const CampaignsCampaignIdOrdersOrderIdResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdResource& operator=(CampaignsCampaignIdOrdersOrderIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOrderResponse>(
        int64_t & campaignId, int64_t & orderId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetOrderResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOrderResponse> handler_GET(
        int64_t & campaignId, int64_t & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о покупателе — юридическом лице
/// </summary>
/// <remarks>
/// Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60;, &#x60;PICKUP&#x60; или &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource() = default;

    CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource(
        const CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource(CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource& operator=(const CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource& operator=(CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetBusinessBuyerInfoResponse>(
        int64_t & campaignId, int64_t & orderId)> handler_POST_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetBusinessBuyerInfoResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetBusinessBuyerInfoResponse> handler_POST(
        int64_t & campaignId, int64_t & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о документах
/// </summary>
/// <remarks>
/// Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDocumentsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDocumentsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDocumentsResource() = default;

    CampaignsCampaignIdOrdersOrderIdDocumentsResource(
        const CampaignsCampaignIdOrdersOrderIdDocumentsResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDocumentsResource(CampaignsCampaignIdOrdersOrderIdDocumentsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDocumentsResource& operator=(const CampaignsCampaignIdOrdersOrderIdDocumentsResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDocumentsResource& operator=(CampaignsCampaignIdOrdersOrderIdDocumentsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetBusinessDocumentsInfoResponse>(
        int64_t & campaignId, int64_t & orderId)> handler_POST_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetBusinessDocumentsInfoResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetBusinessDocumentsInfoResponse> handler_POST(
        int64_t & campaignId, int64_t & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о покупателе — физическом лице
/// </summary>
/// <remarks>
/// Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdBuyerResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdBuyerResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdBuyerResource() = default;

    CampaignsCampaignIdOrdersOrderIdBuyerResource(
        const CampaignsCampaignIdOrdersOrderIdBuyerResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdBuyerResource(CampaignsCampaignIdOrdersOrderIdBuyerResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdBuyerResource& operator=(const CampaignsCampaignIdOrdersOrderIdBuyerResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdBuyerResource& operator=(CampaignsCampaignIdOrdersOrderIdBuyerResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOrderBuyerInfoResponse>(
        int64_t & campaignId, int64_t & orderId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetOrderBuyerInfoResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOrderBuyerInfoResponse> handler_GET(
        int64_t & campaignId, int64_t & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Данные для самостоятельного изготовления ярлыков
/// </summary>
/// <remarks>
/// Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOrderLabelsDataResponse>(
        int64_t & campaignId, int64_t & orderId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetOrderLabelsDataResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOrderLabelsDataResponse> handler_GET(
        int64_t & campaignId, int64_t & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о нескольких заказах
/// </summary>
/// <remarks>
/// Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры &#x60;page_token&#x60; и &#x60;limit&#x60;.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersResource() = default;

    CampaignsCampaignIdOrdersResource(
        const CampaignsCampaignIdOrdersResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersResource(CampaignsCampaignIdOrdersResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersResource& operator=(const CampaignsCampaignIdOrdersResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersResource& operator=(CampaignsCampaignIdOrdersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOrdersResponse>(
        int64_t & campaignId, std::vector<int64_t> & orderIds, std::set<OrderStatusType> & status, std::set<OrderSubstatusType> & substatus, std::string & fromDate, std::string & toDate, std::string & supplierShipmentDateFrom, std::string & supplierShipmentDateTo, std::string & updatedAtFrom, std::string & updatedAtTo, OrderDeliveryDispatchType & dispatchType, bool & fake, bool & hasCis, bool & onlyWaitingForCancellationApprove, bool & onlyEstimatedDelivery, OrderBuyerType & buyerType, int32_t & page, int32_t & pageSize, std::string & pageToken, int32_t & limit)> handler_GET_func =
            [](int64_t &, std::vector<int64_t> &, std::set<OrderStatusType> &, std::set<OrderSubstatusType> &, std::string &, std::string &, std::string &, std::string &, std::string &, std::string &, OrderDeliveryDispatchType &, bool &, bool &, bool &, bool &, OrderBuyerType &, int32_t &, int32_t &, std::string &, int32_t &) -> std::pair<int, GetOrdersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOrdersResponse> handler_GET(
        int64_t & campaignId, std::vector<int64_t> & orderIds, std::set<OrderStatusType> & status, std::set<OrderSubstatusType> & substatus, std::string & fromDate, std::string & toDate, std::string & supplierShipmentDateFrom, std::string & supplierShipmentDateTo, std::string & updatedAtFrom, std::string & updatedAtTo, OrderDeliveryDispatchType & dispatchType, bool & fake, bool & hasCis, bool & onlyWaitingForCancellationApprove, bool & onlyEstimatedDelivery, OrderBuyerType & buyerType, int32_t & page, int32_t & pageSize, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Детальная информация по заказам
/// </summary>
/// <remarks>
/// Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \&quot;\&quot; %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdStatsOrdersResource: public restbed::Resource
{
public:
    CampaignsCampaignIdStatsOrdersResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdStatsOrdersResource() = default;

    CampaignsCampaignIdStatsOrdersResource(
        const CampaignsCampaignIdStatsOrdersResource& other) = default; // copy constructor
    CampaignsCampaignIdStatsOrdersResource(CampaignsCampaignIdStatsOrdersResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdStatsOrdersResource& operator=(const CampaignsCampaignIdStatsOrdersResource& other) = default; // copy assignment
    CampaignsCampaignIdStatsOrdersResource& operator=(CampaignsCampaignIdStatsOrdersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOrdersStatsResponse>(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, GetOrdersStatsRequest & getOrdersStatsRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetOrdersStatsRequest &) -> std::pair<int, GetOrdersStatsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOrdersStatsResponse> handler_POST(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, GetOrdersStatsRequest & getOrdersStatsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список цен
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** &#x60;&#x60;&#x60;(количество товаров партнера на витрине) * 25&#x60;&#x60;&#x60; товаров в сутки| |-| 
/// </remarks>
class  CampaignsCampaignIdOffer_pricesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_pricesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_pricesResource() = default;

    CampaignsCampaignIdOffer_pricesResource(
        const CampaignsCampaignIdOffer_pricesResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_pricesResource(CampaignsCampaignIdOffer_pricesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_pricesResource& operator=(const CampaignsCampaignIdOffer_pricesResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_pricesResource& operator=(CampaignsCampaignIdOffer_pricesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetPricesResponse>(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, bool & archived)> handler_GET_func =
            [](int64_t &, std::string &, int32_t &, bool &) -> std::pair<int, GetPricesResponse>
                { throw DbsApiException(501, "Not implemented"); };

    std::function<std::pair<int, GetPricesByOfferIdsResponse>(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, GetPricesByOfferIdsRequest & getPricesByOfferIdsRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetPricesByOfferIdsRequest &) -> std::pair<int, GetPricesByOfferIdsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetPricesResponse> handler_GET(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, bool & archived);

    virtual std::pair<int, GetPricesByOfferIdsResponse> handler_POST(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, GetPricesByOfferIdsRequest & getPricesByOfferIdsRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение списка товаров, которые участвуют или могут участвовать в акции
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре &#x60;limit&#x60; не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdPromosOffersResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPromosOffersResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPromosOffersResource() = default;

    BusinessesBusinessIdPromosOffersResource(
        const BusinessesBusinessIdPromosOffersResource& other) = default; // copy constructor
    BusinessesBusinessIdPromosOffersResource(BusinessesBusinessIdPromosOffersResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPromosOffersResource& operator=(const BusinessesBusinessIdPromosOffersResource& other) = default; // copy assignment
    BusinessesBusinessIdPromosOffersResource& operator=(BusinessesBusinessIdPromosOffersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetPromoOffersResponse>(
        int64_t & businessId, GetPromoOffersRequest & getPromoOffersRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetPromoOffersRequest &, std::string &, int32_t &) -> std::pair<int, GetPromoOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetPromoOffersResponse> handler_POST(
        int64_t & businessId, GetPromoOffersRequest & getPromoOffersRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение списка акций
/// </summary>
/// <remarks>
/// Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр &#x60;participation&#x60;.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdPromosResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPromosResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPromosResource() = default;

    BusinessesBusinessIdPromosResource(
        const BusinessesBusinessIdPromosResource& other) = default; // copy constructor
    BusinessesBusinessIdPromosResource(BusinessesBusinessIdPromosResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPromosResource& operator=(const BusinessesBusinessIdPromosResource& other) = default; // copy assignment
    BusinessesBusinessIdPromosResource& operator=(BusinessesBusinessIdPromosResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetPromosResponse>(
        int64_t & businessId, GetPromosRequest & getPromosRequest)> handler_POST_func =
            [](int64_t &, GetPromosRequest &) -> std::pair<int, GetPromosResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetPromosResponse> handler_POST(
        int64_t & businessId, GetPromosRequest & getPromosRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Заказы, которые повлияли на индекс качества
/// </summary>
/// <remarks>
/// Возвращает список заказов, которые повлияли на индекс качества магазина. Чтобы узнать значение индекса качества, выполните запрос [POST businesses/{businessId}/ratings/quality](../../reference/ratings/getQualityRatings.md).  |**⚙️ Лимит:** 100000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdRatingsQualityDetailsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdRatingsQualityDetailsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdRatingsQualityDetailsResource() = default;

    CampaignsCampaignIdRatingsQualityDetailsResource(
        const CampaignsCampaignIdRatingsQualityDetailsResource& other) = default; // copy constructor
    CampaignsCampaignIdRatingsQualityDetailsResource(CampaignsCampaignIdRatingsQualityDetailsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdRatingsQualityDetailsResource& operator=(const CampaignsCampaignIdRatingsQualityDetailsResource& other) = default; // copy assignment
    CampaignsCampaignIdRatingsQualityDetailsResource& operator=(CampaignsCampaignIdRatingsQualityDetailsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetQualityRatingDetailsResponse>(
        int64_t & campaignId)> handler_POST_func =
            [](int64_t &) -> std::pair<int, GetQualityRatingDetailsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetQualityRatingDetailsResponse> handler_POST(
        int64_t & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Индекс качества магазинов
/// </summary>
/// <remarks>
/// Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdRatingsQualityResource: public restbed::Resource
{
public:
    BusinessesBusinessIdRatingsQualityResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdRatingsQualityResource() = default;

    BusinessesBusinessIdRatingsQualityResource(
        const BusinessesBusinessIdRatingsQualityResource& other) = default; // copy constructor
    BusinessesBusinessIdRatingsQualityResource(BusinessesBusinessIdRatingsQualityResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdRatingsQualityResource& operator=(const BusinessesBusinessIdRatingsQualityResource& other) = default; // copy assignment
    BusinessesBusinessIdRatingsQualityResource& operator=(BusinessesBusinessIdRatingsQualityResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetQualityRatingResponse>(
        int64_t & businessId, GetQualityRatingRequest & getQualityRatingRequest)> handler_POST_func =
            [](int64_t &, GetQualityRatingRequest &) -> std::pair<int, GetQualityRatingResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetQualityRatingResponse> handler_POST(
        int64_t & businessId, GetQualityRatingRequest & getQualityRatingRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение заданного отчета
/// </summary>
/// <remarks>
/// Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  ReportsInfoReportIdResource: public restbed::Resource
{
public:
    ReportsInfoReportIdResource(const std::string& context = "");
    virtual ~ReportsInfoReportIdResource() = default;

    ReportsInfoReportIdResource(
        const ReportsInfoReportIdResource& other) = default; // copy constructor
    ReportsInfoReportIdResource(ReportsInfoReportIdResource&& other) noexcept = default; // move constructor

    ReportsInfoReportIdResource& operator=(const ReportsInfoReportIdResource& other) = default; // copy assignment
    ReportsInfoReportIdResource& operator=(ReportsInfoReportIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetReportInfoResponse>(
        std::string & reportId)> handler_GET_func =
            [](std::string &) -> std::pair<int, GetReportInfoResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetReportInfoResponse> handler_GET(
        std::string & reportId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о невыкупе или возврате
/// </summary>
/// <remarks>
/// Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource() = default;

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(
        const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource& operator=(const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource& operator=(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetReturnResponse>(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId)> handler_GET_func =
            [](int64_t &, int64_t &, int64_t &) -> std::pair<int, GetReturnResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetReturnResponse> handler_GET(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение заявления на возврат
/// </summary>
/// <remarks>
/// Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource() = default;

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(
        const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource& operator=(const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource& operator=(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId)> handler_GET_func =
            [](int64_t &, int64_t &, int64_t &) -> std::pair<int, std::string>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение фотографии возврата
/// </summary>
/// <remarks>
/// Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource() = default;

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(
        const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource& operator=(const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource& operator=(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId, int64_t & itemId, std::string & imageHash)> handler_GET_func =
            [](int64_t &, int64_t &, int64_t &, int64_t &, std::string &) -> std::pair<int, std::string>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId, int64_t & itemId, std::string & imageHash);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список невыкупов и возвратов
/// </summary>
/// <remarks>
/// Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdReturnsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdReturnsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdReturnsResource() = default;

    CampaignsCampaignIdReturnsResource(
        const CampaignsCampaignIdReturnsResource& other) = default; // copy constructor
    CampaignsCampaignIdReturnsResource(CampaignsCampaignIdReturnsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdReturnsResource& operator=(const CampaignsCampaignIdReturnsResource& other) = default; // copy assignment
    CampaignsCampaignIdReturnsResource& operator=(CampaignsCampaignIdReturnsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetReturnsResponse>(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, std::vector<int64_t> & orderIds, std::vector<RefundStatusType> & statuses, ReturnType & type, std::string & fromDate, std::string & toDate, std::string & fromDate2, std::string & toDate2)> handler_GET_func =
            [](int64_t &, std::string &, int32_t &, std::vector<int64_t> &, std::vector<RefundStatusType> &, ReturnType &, std::string &, std::string &, std::string &, std::string &) -> std::pair<int, GetReturnsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetReturnsResponse> handler_GET(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, std::vector<int64_t> & orderIds, std::vector<RefundStatusType> & statuses, ReturnType & type, std::string & fromDate, std::string & toDate, std::string & fromDate2, std::string & toDate2);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация об остатках и оборачиваемости
/// </summary>
/// <remarks>
/// Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \&quot;По умолчанию данные по оборачивамости не возращаются\&quot; %}  Чтобы они были в ответе, передавайте &#x60;true&#x60; в поле &#x60;withTurnover&#x60;.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: &lt;&gt; (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
/// </remarks>
class  CampaignsCampaignIdOffersStocksResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffersStocksResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffersStocksResource() = default;

    CampaignsCampaignIdOffersStocksResource(
        const CampaignsCampaignIdOffersStocksResource& other) = default; // copy constructor
    CampaignsCampaignIdOffersStocksResource(CampaignsCampaignIdOffersStocksResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffersStocksResource& operator=(const CampaignsCampaignIdOffersStocksResource& other) = default; // copy assignment
    CampaignsCampaignIdOffersStocksResource& operator=(CampaignsCampaignIdOffersStocksResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetWarehouseStocksResponse>(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, GetWarehouseStocksRequest & getWarehouseStocksRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetWarehouseStocksRequest &) -> std::pair<int, GetWarehouseStocksResponse>
                { throw DbsApiException(501, "Not implemented"); };

    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, UpdateStocksRequest & updateStocksRequest)> handler_PUT_func =
            [](int64_t &, UpdateStocksRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetWarehouseStocksResponse> handler_POST(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, GetWarehouseStocksRequest & getWarehouseStocksRequest);

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, UpdateStocksRequest & updateStocksRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Рекомендованные карточки для товаров
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku&#x3D;», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource() = default;

    CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource(
        const CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource(CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource& operator=(const CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource& operator=(CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetSuggestedOfferMappingEntriesResponse>(
        int64_t & campaignId, GetSuggestedOfferMappingEntriesRequest & getSuggestedOfferMappingEntriesRequest)> handler_POST_func =
            [](int64_t &, GetSuggestedOfferMappingEntriesRequest &) -> std::pair<int, GetSuggestedOfferMappingEntriesResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetSuggestedOfferMappingEntriesResponse> handler_POST(
        int64_t & campaignId, GetSuggestedOfferMappingEntriesRequest & getSuggestedOfferMappingEntriesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Просмотр карточек на Маркете, которые подходят вашим товарам
/// </summary>
/// <remarks>
/// Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида &#x60;https://market.yandex.ru/product/&lt;marketModelId&gt;?sku&#x3D;&lt;marketSku&gt;&#x60;. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать &#x60;marketSKU&#x60;, который ему подходит по вашему мнению.  {% note info \&quot;𝓠 Как определить &#x60;marketSku&#x60; товара, найденного на Маркете?\&quot; %}  𝓐 Он есть в адресе страницы товара — расположен после &#x60;sku&#x3D;&#x60;.  Например, &#x60;https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016&#x60;  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsSuggestionsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsSuggestionsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsSuggestionsResource() = default;

    BusinessesBusinessIdOffer_mappingsSuggestionsResource(
        const BusinessesBusinessIdOffer_mappingsSuggestionsResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsSuggestionsResource(BusinessesBusinessIdOffer_mappingsSuggestionsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsSuggestionsResource& operator=(const BusinessesBusinessIdOffer_mappingsSuggestionsResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsSuggestionsResource& operator=(BusinessesBusinessIdOffer_mappingsSuggestionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetSuggestedOfferMappingsResponse>(
        int64_t & businessId, GetSuggestedOfferMappingsRequest & getSuggestedOfferMappingsRequest)> handler_POST_func =
            [](int64_t &, GetSuggestedOfferMappingsRequest &) -> std::pair<int, GetSuggestedOfferMappingsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetSuggestedOfferMappingsResponse> handler_POST(
        int64_t & businessId, GetSuggestedOfferMappingsRequest & getSuggestedOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Цены для продвижения товаров
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \&quot;\&quot; %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOffer_pricesSuggestionsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_pricesSuggestionsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_pricesSuggestionsResource() = default;

    CampaignsCampaignIdOffer_pricesSuggestionsResource(
        const CampaignsCampaignIdOffer_pricesSuggestionsResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_pricesSuggestionsResource(CampaignsCampaignIdOffer_pricesSuggestionsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_pricesSuggestionsResource& operator=(const CampaignsCampaignIdOffer_pricesSuggestionsResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_pricesSuggestionsResource& operator=(CampaignsCampaignIdOffer_pricesSuggestionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, SuggestPricesResponse>(
        int64_t & campaignId, SuggestPricesRequest & suggestPricesRequest)> handler_POST_func =
            [](int64_t &, SuggestPricesRequest &) -> std::pair<int, SuggestPricesResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, SuggestPricesResponse> handler_POST(
        int64_t & campaignId, SuggestPricesRequest & suggestPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список складов и групп складов
/// </summary>
/// <remarks>
/// Возвращает список складов и, если склады объединены, список групп складов. [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)  Среди прочего запрос позволяет определить идентификатор, который нужно использовать при передаче остатков для группы складов.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdWarehousesResource: public restbed::Resource
{
public:
    BusinessesBusinessIdWarehousesResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdWarehousesResource() = default;

    BusinessesBusinessIdWarehousesResource(
        const BusinessesBusinessIdWarehousesResource& other) = default; // copy constructor
    BusinessesBusinessIdWarehousesResource(BusinessesBusinessIdWarehousesResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdWarehousesResource& operator=(const BusinessesBusinessIdWarehousesResource& other) = default; // copy assignment
    BusinessesBusinessIdWarehousesResource& operator=(BusinessesBusinessIdWarehousesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetWarehousesResponse>(
        int64_t & businessId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetWarehousesResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetWarehousesResponse> handler_GET(
        int64_t & businessId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Передача ключей цифровых товаров
/// </summary>
/// <remarks>
/// Передает ключи цифровых товаров, которые покупатель заказал и оплатил. После выполнения запроса Маркет отправит ему письмо с ключами и инструкциями по активации, а также переведет заказ в финальный статус &#x60;DELIVERED&#x60;.  Ключ нужно передать в течение 30 минут после перехода заказа в статус &#x60;PROCESSING&#x60;.  Если в один заказ входят несколько ключей, передавайте их все в одном запросе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(
        const CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, ProvideOrderDigitalCodesRequest & provideOrderDigitalCodesRequest)> handler_POST_func =
            [](int64_t &, int64_t &, ProvideOrderDigitalCodesRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & orderId, ProvideOrderDigitalCodesRequest & provideOrderDigitalCodesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Передача кодов маркировки единиц товара
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Передает Маркету коды маркировки для единиц товара в указанном заказе.  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  {% note warning %}  Прежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).  {% endnote %}  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdIdentifiersResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdIdentifiersResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdIdentifiersResource() = default;

    CampaignsCampaignIdOrdersOrderIdIdentifiersResource(
        const CampaignsCampaignIdOrdersOrderIdIdentifiersResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdIdentifiersResource(CampaignsCampaignIdOrdersOrderIdIdentifiersResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdIdentifiersResource& operator=(const CampaignsCampaignIdOrdersOrderIdIdentifiersResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdIdentifiersResource& operator=(CampaignsCampaignIdOrdersOrderIdIdentifiersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ProvideOrderItemIdentifiersResponse>(
        int64_t & campaignId, int64_t & orderId, ProvideOrderItemIdentifiersRequest & provideOrderItemIdentifiersRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, ProvideOrderItemIdentifiersRequest &) -> std::pair<int, ProvideOrderItemIdentifiersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ProvideOrderItemIdentifiersResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, ProvideOrderItemIdentifiersRequest & provideOrderItemIdentifiersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Включение буста продаж и установка ставок
/// </summary>
/// <remarks>
/// Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \&quot;Как в кабинете выглядит кампания, созданная через API\&quot; %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdBidsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdBidsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdBidsResource() = default;

    BusinessesBusinessIdBidsResource(
        const BusinessesBusinessIdBidsResource& other) = default; // copy constructor
    BusinessesBusinessIdBidsResource(BusinessesBusinessIdBidsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdBidsResource& operator=(const BusinessesBusinessIdBidsResource& other) = default; // copy assignment
    BusinessesBusinessIdBidsResource& operator=(BusinessesBusinessIdBidsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, PutSkuBidsRequest & putSkuBidsRequest)> handler_PUT_func =
            [](int64_t &, PutSkuBidsRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & businessId, PutSkuBidsRequest & putSkuBidsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Включение буста продаж и установка ставок для магазина
/// </summary>
/// <remarks>
/// Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdBidsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdBidsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdBidsResource() = default;

    CampaignsCampaignIdBidsResource(
        const CampaignsCampaignIdBidsResource& other) = default; // copy constructor
    CampaignsCampaignIdBidsResource(CampaignsCampaignIdBidsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdBidsResource& operator=(const CampaignsCampaignIdBidsResource& other) = default; // copy assignment
    CampaignsCampaignIdBidsResource& operator=(CampaignsCampaignIdBidsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, PutSkuBidsRequest & putSkuBidsRequest)> handler_PUT_func =
            [](int64_t &, PutSkuBidsRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, PutSkuBidsRequest & putSkuBidsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Сообщить, что прайс-лист обновился
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом &#x60;POST campaigns/{campaignId}/feeds/{feedId}/refresh&#x60;. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — &#x60;200 OK&#x60;. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
/// </remarks>
class  CampaignsCampaignIdFeedsFeedIdRefreshResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFeedsFeedIdRefreshResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFeedsFeedIdRefreshResource() = default;

    CampaignsCampaignIdFeedsFeedIdRefreshResource(
        const CampaignsCampaignIdFeedsFeedIdRefreshResource& other) = default; // copy constructor
    CampaignsCampaignIdFeedsFeedIdRefreshResource(CampaignsCampaignIdFeedsFeedIdRefreshResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFeedsFeedIdRefreshResource& operator=(const CampaignsCampaignIdFeedsFeedIdRefreshResource& other) = default; // copy assignment
    CampaignsCampaignIdFeedsFeedIdRefreshResource& operator=(CampaignsCampaignIdFeedsFeedIdRefreshResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & feedId)> handler_POST_func =
            [](int64_t &, int64_t &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & feedId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о дочерних регионах
/// </summary>
/// <remarks>
/// Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  RegionsRegionIdChildrenResource: public restbed::Resource
{
public:
    RegionsRegionIdChildrenResource(const std::string& context = "");
    virtual ~RegionsRegionIdChildrenResource() = default;

    RegionsRegionIdChildrenResource(
        const RegionsRegionIdChildrenResource& other) = default; // copy constructor
    RegionsRegionIdChildrenResource(RegionsRegionIdChildrenResource&& other) noexcept = default; // move constructor

    RegionsRegionIdChildrenResource& operator=(const RegionsRegionIdChildrenResource& other) = default; // copy assignment
    RegionsRegionIdChildrenResource& operator=(RegionsRegionIdChildrenResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetRegionWithChildrenResponse>(
        int64_t & regionId, int32_t & page, int32_t & pageSize)> handler_GET_func =
            [](int64_t &, int32_t &, int32_t &) -> std::pair<int, GetRegionWithChildrenResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetRegionWithChildrenResponse> handler_GET(
        int64_t & regionId, int32_t & page, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о регионе
/// </summary>
/// <remarks>
/// Возвращает информацию о регионе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  RegionsRegionIdResource: public restbed::Resource
{
public:
    RegionsRegionIdResource(const std::string& context = "");
    virtual ~RegionsRegionIdResource() = default;

    RegionsRegionIdResource(
        const RegionsRegionIdResource& other) = default; // copy constructor
    RegionsRegionIdResource(RegionsRegionIdResource&& other) noexcept = default; // move constructor

    RegionsRegionIdResource& operator=(const RegionsRegionIdResource& other) = default; // copy assignment
    RegionsRegionIdResource& operator=(RegionsRegionIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetRegionsResponse>(
        int64_t & regionId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetRegionsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetRegionsResponse> handler_GET(
        int64_t & regionId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Поиск регионов по их имени
/// </summary>
/// <remarks>
/// Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  RegionsResource: public restbed::Resource
{
public:
    RegionsResource(const std::string& context = "");
    virtual ~RegionsResource() = default;

    RegionsResource(
        const RegionsResource& other) = default; // copy constructor
    RegionsResource(RegionsResource&& other) noexcept = default; // move constructor

    RegionsResource& operator=(const RegionsResource& other) = default; // copy assignment
    RegionsResource& operator=(RegionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetRegionsResponse>(
        std::string & name, std::string & pageToken, int32_t & limit)> handler_GET_func =
            [](std::string &, std::string &, int32_t &) -> std::pair<int, GetRegionsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetRegionsResponse> handler_GET(
        std::string & name, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отправка файла в чат
/// </summary>
/// <remarks>
/// Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdChatsFileSendResource: public restbed::Resource
{
public:
    BusinessesBusinessIdChatsFileSendResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdChatsFileSendResource() = default;

    BusinessesBusinessIdChatsFileSendResource(
        const BusinessesBusinessIdChatsFileSendResource& other) = default; // copy constructor
    BusinessesBusinessIdChatsFileSendResource(BusinessesBusinessIdChatsFileSendResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdChatsFileSendResource& operator=(const BusinessesBusinessIdChatsFileSendResource& other) = default; // copy assignment
    BusinessesBusinessIdChatsFileSendResource& operator=(BusinessesBusinessIdChatsFileSendResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, int64_t & chatId, std::string & file)> handler_POST_func =
            [](int64_t &, int64_t &, std::string &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, int64_t & chatId, std::string & file);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отправка сообщения в чат
/// </summary>
/// <remarks>
/// Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdChatsMessageResource: public restbed::Resource
{
public:
    BusinessesBusinessIdChatsMessageResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdChatsMessageResource() = default;

    BusinessesBusinessIdChatsMessageResource(
        const BusinessesBusinessIdChatsMessageResource& other) = default; // copy constructor
    BusinessesBusinessIdChatsMessageResource(BusinessesBusinessIdChatsMessageResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdChatsMessageResource& operator=(const BusinessesBusinessIdChatsMessageResource& other) = default; // copy assignment
    BusinessesBusinessIdChatsMessageResource& operator=(BusinessesBusinessIdChatsMessageResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, int64_t & chatId, SendMessageToChatRequest & sendMessageToChatRequest)> handler_POST_func =
            [](int64_t &, int64_t &, SendMessageToChatRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, int64_t & chatId, SendMessageToChatRequest & sendMessageToChatRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Изменение параметров прайс-листа
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;value&#x60; (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;delete&#x3D;true&#x60; (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
/// </remarks>
class  CampaignsCampaignIdFeedsFeedIdParamsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFeedsFeedIdParamsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFeedsFeedIdParamsResource() = default;

    CampaignsCampaignIdFeedsFeedIdParamsResource(
        const CampaignsCampaignIdFeedsFeedIdParamsResource& other) = default; // copy constructor
    CampaignsCampaignIdFeedsFeedIdParamsResource(CampaignsCampaignIdFeedsFeedIdParamsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFeedsFeedIdParamsResource& operator=(const CampaignsCampaignIdFeedsFeedIdParamsResource& other) = default; // copy assignment
    CampaignsCampaignIdFeedsFeedIdParamsResource& operator=(CampaignsCampaignIdFeedsFeedIdParamsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & feedId, SetFeedParamsRequest & setFeedParamsRequest)> handler_POST_func =
            [](int64_t &, int64_t &, SetFeedParamsRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & feedId, SetFeedParamsRequest & setFeedParamsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Подготовка заказа
/// </summary>
/// <remarks>
/// {% note tip \&quot;Подходит и для DBS\&quot; %}  Запрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.  {% endnote %}  Позволяет выполнить три операции:  * передать Маркету информацию о распределении товаров по коробкам; * передать Маркету коды маркировки для товаров; * удалить товар из заказа, если его не оказалось на складе.  Если нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.  ## Как передать информацию о распределении товаров  В этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:  * **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.  * **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.  ⚠️ Одна коробка не может содержать и товары целиком, и части товаров.  ## Как передавать коды маркировки  Если в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  Если товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.  ## Как удалить товар из заказа  Чтобы удалить товар из заказа:  1. Добавьте в запрос &#x60;allowRemove: true&#x60;. 2. Передайте распределение по коробкам без товара, который нужно удалить.  {% note warning \&quot;Удаление нельзя отменить\&quot; %}  Эта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.  {% endnote %}  Чтобы удалить позицию целиком, не передавайте соответствующий &#x60;OrderBoxLayoutItemDTO&#x60;. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле &#x60;fullCount&#x60;.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.  {% note info \&quot;Увеличить заказ нельзя\&quot; %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  ## Примеры  {% cut \&quot;Товар умещается в коробку\&quot; %}  Вот как будет выглядеть запрос, если в одной коробке едут:    * три единицы одного товара, требующего маркировки;   * одна единица другого товара, не требущего маркировки.    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;fullCount\&quot;: 3,                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           },                           {                               \&quot;cis\&quot;: \&quot;010304109478gftJ14545762!\\u001dhGt264\&quot;                           },                           {                               \&quot;cis\&quot;: \&quot;010304109478fRs28323ks23!\\u001dhet201\&quot;                           }                       ]                   },                   {                       \&quot;id\&quot;: 654321,                       \&quot;fullCount\&quot;: 1                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  {% cut \&quot;Товар едет в разных коробках\&quot; %}  Вот как будет выглядеть запрос, если товар едет в двух коробках:    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  {% cut \&quot;Одинаковые товары, где каждый едет в нескольких коробках\&quot; %}  Вот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdBoxesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdBoxesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdBoxesResource() = default;

    CampaignsCampaignIdOrdersOrderIdBoxesResource(
        const CampaignsCampaignIdOrdersOrderIdBoxesResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdBoxesResource(CampaignsCampaignIdOrdersOrderIdBoxesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdBoxesResource& operator=(const CampaignsCampaignIdOrdersOrderIdBoxesResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdBoxesResource& operator=(CampaignsCampaignIdOrdersOrderIdBoxesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, SetOrderBoxLayoutResponse>(
        int64_t & campaignId, int64_t & orderId, SetOrderBoxLayoutRequest & setOrderBoxLayoutRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, SetOrderBoxLayoutRequest &) -> std::pair<int, SetOrderBoxLayoutResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, SetOrderBoxLayoutResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, SetOrderBoxLayoutRequest & setOrderBoxLayoutRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Изменение даты доставки заказа
/// </summary>
/// <remarks>
/// Метод изменяет дату доставки заказа в статусе &#x60;PROCESSING&#x60; или &#x60;DELIVERY&#x60;. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryDateResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryDateResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryDateResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryDateResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryDateResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryDateResource(CampaignsCampaignIdOrdersOrderIdDeliveryDateResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryDateResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryDateResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryDateResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryDateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, SetOrderDeliveryDateRequest & setOrderDeliveryDateRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, SetOrderDeliveryDateRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, SetOrderDeliveryDateRequest & setOrderDeliveryDateRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Передача трек‑номера посылки
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, SetOrderDeliveryTrackCodeRequest & setOrderDeliveryTrackCodeRequest)> handler_POST_func =
            [](int64_t &, int64_t &, SetOrderDeliveryTrackCodeRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & orderId, SetOrderDeliveryTrackCodeRequest & setOrderDeliveryTrackCodeRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Передача количества грузовых мест в заказе
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Отгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.  Количество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).  Метод устроен немного нестандартно: количество задается длиной массива пустых объектов.  Раньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.  {% cut \&quot;Как было раньше\&quot; %}  Структура тела PUT-запроса:  &#x60;&#x60;&#x60; {   \&quot;boxes\&quot;:   [     {       \&quot;fulfilmentId\&quot;: \&quot;{string}\&quot;,       \&quot;weight\&quot;: {int64},       \&quot;width\&quot;: {int64},       \&quot;height\&quot;: {int64},       \&quot;depth\&quot;: {int64},       \&quot;items\&quot;:       [         {           \&quot;id\&quot;: {int64},           \&quot;count\&quot;: {int32}         },         ...       ]     },     ...   ] } &#x60;&#x60;&#x60; | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | &#x60;boxes&#x60;       |           | Список грузовых мест.       |  **Параметры, вложенные в &#x60;boxes&#x60;** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | &#x60;fulfilmentId&#x60;       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: &#x60;номер заказа на Маркете-номер грузового места&#x60;. Например, &#x60;7206821‑1, 7206821‑2&#x60; и т. д. | | &#x60;weight&#x60;       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. | | &#x60;width&#x60;       | Int64   | Ширина грузового места в сантиметрах.       | | &#x60;height&#x60;       | Int64   | Высота грузового места в сантиметрах.       | | &#x60;depth&#x60;       | Int64   | Глубина грузового места в сантиметрах.        | | &#x60;items&#x60;       | Int64   | Список товаров в грузовом месте.       |  **Параметры, вложенные в &#x60;items&#x60;** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | &#x60;id&#x60;       | Int64     | Идентификатор товара в рамках заказа.   | | &#x60;count&#x60;    | Int32     | Количество единиц товара в грузовом месте.       |  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, SetOrderShipmentBoxesResponse>(
        int64_t & campaignId, int64_t & orderId, int64_t & shipmentId, SetOrderShipmentBoxesRequest & setOrderShipmentBoxesRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, int64_t &, SetOrderShipmentBoxesRequest &) -> std::pair<int, SetOrderShipmentBoxesResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, SetOrderShipmentBoxesResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, int64_t & shipmentId, SetOrderShipmentBoxesRequest & setOrderShipmentBoxesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Принятие или изменение решения по возврату
/// </summary>
/// <remarks>
/// Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource() = default;

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(
        const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource& operator=(const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource& operator=(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId, SetReturnDecisionRequest & setReturnDecisionRequest)> handler_POST_func =
            [](int64_t &, int64_t &, int64_t &, SetReturnDecisionRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId, SetReturnDecisionRequest & setReturnDecisionRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отказ от ответа на отзывы
/// </summary>
/// <remarks>
/// Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdGoods_feedbackSkip_reactionResource: public restbed::Resource
{
public:
    BusinessesBusinessIdGoods_feedbackSkip_reactionResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdGoods_feedbackSkip_reactionResource() = default;

    BusinessesBusinessIdGoods_feedbackSkip_reactionResource(
        const BusinessesBusinessIdGoods_feedbackSkip_reactionResource& other) = default; // copy constructor
    BusinessesBusinessIdGoods_feedbackSkip_reactionResource(BusinessesBusinessIdGoods_feedbackSkip_reactionResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdGoods_feedbackSkip_reactionResource& operator=(const BusinessesBusinessIdGoods_feedbackSkip_reactionResource& other) = default; // copy assignment
    BusinessesBusinessIdGoods_feedbackSkip_reactionResource& operator=(BusinessesBusinessIdGoods_feedbackSkip_reactionResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, SkipGoodsFeedbackReactionRequest & skipGoodsFeedbackReactionRequest)> handler_POST_func =
            [](int64_t &, SkipGoodsFeedbackReactionRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, SkipGoodsFeedbackReactionRequest & skipGoodsFeedbackReactionRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Подтверждение решения по возврату
/// </summary>
/// <remarks>
/// Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource() = default;

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(
        const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource& operator=(const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource& operator=(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId)> handler_POST_func =
            [](int64_t &, int64_t &, int64_t &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Установка цен на товары во всех магазинах
/// </summary>
/// <remarks>
/// Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_pricesUpdatesResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_pricesUpdatesResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_pricesUpdatesResource() = default;

    BusinessesBusinessIdOffer_pricesUpdatesResource(
        const BusinessesBusinessIdOffer_pricesUpdatesResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_pricesUpdatesResource(BusinessesBusinessIdOffer_pricesUpdatesResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_pricesUpdatesResource& operator=(const BusinessesBusinessIdOffer_pricesUpdatesResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_pricesUpdatesResource& operator=(BusinessesBusinessIdOffer_pricesUpdatesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, UpdateBusinessPricesRequest & updateBusinessPricesRequest)> handler_POST_func =
            [](int64_t &, UpdateBusinessPricesRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, UpdateBusinessPricesRequest & updateBusinessPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Изменение условий продажи товаров в магазине
/// </summary>
/// <remarks>
/// Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdOffersUpdateResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffersUpdateResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffersUpdateResource() = default;

    CampaignsCampaignIdOffersUpdateResource(
        const CampaignsCampaignIdOffersUpdateResource& other) = default; // copy constructor
    CampaignsCampaignIdOffersUpdateResource(CampaignsCampaignIdOffersUpdateResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffersUpdateResource& operator=(const CampaignsCampaignIdOffersUpdateResource& other) = default; // copy assignment
    CampaignsCampaignIdOffersUpdateResource& operator=(CampaignsCampaignIdOffersUpdateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, UpdateCampaignOffersRequest & updateCampaignOffersRequest)> handler_POST_func =
            [](int64_t &, UpdateCampaignOffersRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, UpdateCampaignOffersRequest & updateCampaignOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Добавление нового или изменение созданного комментария
/// </summary>
/// <remarks>
/// Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdGoods_feedbackCommentsUpdateResource: public restbed::Resource
{
public:
    BusinessesBusinessIdGoods_feedbackCommentsUpdateResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdGoods_feedbackCommentsUpdateResource() = default;

    BusinessesBusinessIdGoods_feedbackCommentsUpdateResource(
        const BusinessesBusinessIdGoods_feedbackCommentsUpdateResource& other) = default; // copy constructor
    BusinessesBusinessIdGoods_feedbackCommentsUpdateResource(BusinessesBusinessIdGoods_feedbackCommentsUpdateResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdGoods_feedbackCommentsUpdateResource& operator=(const BusinessesBusinessIdGoods_feedbackCommentsUpdateResource& other) = default; // copy assignment
    BusinessesBusinessIdGoods_feedbackCommentsUpdateResource& operator=(BusinessesBusinessIdGoods_feedbackCommentsUpdateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdateGoodsFeedbackCommentResponse>(
        int64_t & businessId, UpdateGoodsFeedbackCommentRequest & updateGoodsFeedbackCommentRequest)> handler_POST_func =
            [](int64_t &, UpdateGoodsFeedbackCommentRequest &) -> std::pair<int, UpdateGoodsFeedbackCommentResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdateGoodsFeedbackCommentResponse> handler_POST(
        int64_t & businessId, UpdateGoodsFeedbackCommentRequest & updateGoodsFeedbackCommentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Редактирование категорийных характеристик товара
/// </summary>
/// <remarks>
/// Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \&quot;Здесь только то, что относится к конкретной категории\&quot; %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_cardsUpdateResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_cardsUpdateResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_cardsUpdateResource() = default;

    BusinessesBusinessIdOffer_cardsUpdateResource(
        const BusinessesBusinessIdOffer_cardsUpdateResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_cardsUpdateResource(BusinessesBusinessIdOffer_cardsUpdateResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_cardsUpdateResource& operator=(const BusinessesBusinessIdOffer_cardsUpdateResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_cardsUpdateResource& operator=(BusinessesBusinessIdOffer_cardsUpdateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdateOfferContentResponse>(
        int64_t & businessId, UpdateOfferContentRequest & updateOfferContentRequest)> handler_POST_func =
            [](int64_t &, UpdateOfferContentRequest &) -> std::pair<int, UpdateOfferContentResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdateOfferContentResponse> handler_POST(
        int64_t & businessId, UpdateOfferContentRequest & updateOfferContentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Добавление и редактирование товаров в каталоге
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре &#x60;shopSku&#x60; ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре &#x60;shopSku&#x60; ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус &#x60;NEED_CONTENT&#x60; (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус &#x60;NEED_INFO&#x60; (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdOffer_mapping_entriesUpdatesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_mapping_entriesUpdatesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_mapping_entriesUpdatesResource() = default;

    CampaignsCampaignIdOffer_mapping_entriesUpdatesResource(
        const CampaignsCampaignIdOffer_mapping_entriesUpdatesResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_mapping_entriesUpdatesResource(CampaignsCampaignIdOffer_mapping_entriesUpdatesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_mapping_entriesUpdatesResource& operator=(const CampaignsCampaignIdOffer_mapping_entriesUpdatesResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_mapping_entriesUpdatesResource& operator=(CampaignsCampaignIdOffer_mapping_entriesUpdatesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, UpdateOfferMappingEntryRequest & updateOfferMappingEntryRequest)> handler_POST_func =
            [](int64_t &, UpdateOfferMappingEntryRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, UpdateOfferMappingEntryRequest & updateOfferMappingEntryRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Добавление товаров в каталог и изменение информации о них
/// </summary>
/// <remarks>
/// Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле &#x60;marketSKU&#x60;.  Для **новых товаров** обязательно укажите параметры: &#x60;offerId&#x60;, &#x60;name&#x60;, &#x60;marketCategoryId&#x60; или &#x60;category&#x60;, &#x60;pictures&#x60;, &#x60;vendor&#x60;, &#x60;description&#x60;.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в &#x60;offerId&#x60; соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  Параметр &#x60;offerId&#x60; должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \&quot;Правила использования SKU\&quot; %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsUpdateResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsUpdateResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsUpdateResource() = default;

    BusinessesBusinessIdOffer_mappingsUpdateResource(
        const BusinessesBusinessIdOffer_mappingsUpdateResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsUpdateResource(BusinessesBusinessIdOffer_mappingsUpdateResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsUpdateResource& operator=(const BusinessesBusinessIdOffer_mappingsUpdateResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsUpdateResource& operator=(BusinessesBusinessIdOffer_mappingsUpdateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdateOfferMappingsResponse>(
        int64_t & businessId, UpdateOfferMappingsRequest & updateOfferMappingsRequest)> handler_POST_func =
            [](int64_t &, UpdateOfferMappingsRequest &) -> std::pair<int, UpdateOfferMappingsResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdateOfferMappingsResponse> handler_POST(
        int64_t & businessId, UpdateOfferMappingsRequest & updateOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление товара из заказа или уменьшение числа единиц
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Изменяет состав заказа, если позволяет выбранная служба доставки, в случаях:  * покупатель уменьшил количество товара; * магазин не может поставить все товары в заказе.  Для этого заказ должен находится в статусе &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60;. После передачи статуса &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; изменить состав невозможно.  Если одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте &#x60;count&#x60; параметра &#x60;item&#x60;.  Чтобы полностью удалить товар из заказа:  * передайте значение &#x60;0&#x60;; или * не передавайте параметр &#x60;item&#x60;.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.  {% note info \&quot;Увеличить заказ нельзя\&quot; %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  **Возврат денег покупателю**  Если покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:  * при оплате банковской картой — с момента, когда магазин переведет заказ в статус &#x60;SHIPPED&#x60;;  * при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdItemsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdItemsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdItemsResource() = default;

    CampaignsCampaignIdOrdersOrderIdItemsResource(
        const CampaignsCampaignIdOrdersOrderIdItemsResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdItemsResource(CampaignsCampaignIdOrdersOrderIdItemsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdItemsResource& operator=(const CampaignsCampaignIdOrdersOrderIdItemsResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdItemsResource& operator=(CampaignsCampaignIdOrdersOrderIdItemsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        int64_t & campaignId, int64_t & orderId, UpdateOrderItemRequest & updateOrderItemRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, UpdateOrderItemRequest &) -> int
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_PUT(
        int64_t & campaignId, int64_t & orderId, UpdateOrderItemRequest & updateOrderItemRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Изменение статуса одного заказа
/// </summary>
/// <remarks>
/// Изменяет статус заказа. Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этап обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60;. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdStatusResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdStatusResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdStatusResource() = default;

    CampaignsCampaignIdOrdersOrderIdStatusResource(
        const CampaignsCampaignIdOrdersOrderIdStatusResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdStatusResource(CampaignsCampaignIdOrdersOrderIdStatusResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdStatusResource& operator=(const CampaignsCampaignIdOrdersOrderIdStatusResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdStatusResource& operator=(CampaignsCampaignIdOrdersOrderIdStatusResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdateOrderStatusResponse>(
        int64_t & campaignId, int64_t & orderId, UpdateOrderStatusRequest & updateOrderStatusRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, UpdateOrderStatusRequest &) -> std::pair<int, UpdateOrderStatusResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdateOrderStatusResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, UpdateOrderStatusRequest & updateOrderStatusRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Изменение статусов нескольких заказов
/// </summary>
/// <remarks>
/// Изменяет статусы нескольких заказов.  Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60;и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этап обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60;. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;.  Максимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersStatus_updateResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersStatus_updateResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersStatus_updateResource() = default;

    CampaignsCampaignIdOrdersStatus_updateResource(
        const CampaignsCampaignIdOrdersStatus_updateResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersStatus_updateResource(CampaignsCampaignIdOrdersStatus_updateResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersStatus_updateResource& operator=(const CampaignsCampaignIdOrdersStatus_updateResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersStatus_updateResource& operator=(CampaignsCampaignIdOrdersStatus_updateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdateOrderStatusesResponse>(
        int64_t & campaignId, UpdateOrderStatusesRequest & updateOrderStatusesRequest)> handler_POST_func =
            [](int64_t &, UpdateOrderStatusesRequest &) -> std::pair<int, UpdateOrderStatusesResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdateOrderStatusesResponse> handler_POST(
        int64_t & campaignId, UpdateOrderStatusesRequest & updateOrderStatusesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Продление срока хранения заказа
/// </summary>
/// <remarks>
/// Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе &#x60;PICKUP&#x60;. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре &#x60;outletStorageLimitDate&#x60; запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource(CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, UpdateOrderStorageLimitRequest & updateOrderStorageLimitRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, UpdateOrderStorageLimitRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, UpdateOrderStorageLimitRequest & updateOrderStorageLimitRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Установка цен на товары в конкретном магазине
/// </summary>
/// <remarks>
/// Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \&quot;Метод только для отдельных магазинов\&quot; %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdOffer_pricesUpdatesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_pricesUpdatesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_pricesUpdatesResource() = default;

    CampaignsCampaignIdOffer_pricesUpdatesResource(
        const CampaignsCampaignIdOffer_pricesUpdatesResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_pricesUpdatesResource(CampaignsCampaignIdOffer_pricesUpdatesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_pricesUpdatesResource& operator=(const CampaignsCampaignIdOffer_pricesUpdatesResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_pricesUpdatesResource& operator=(CampaignsCampaignIdOffer_pricesUpdatesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, UpdatePricesRequest & updatePricesRequest)> handler_POST_func =
            [](int64_t &, UpdatePricesRequest &) -> std::pair<int, EmptyApiResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, UpdatePricesRequest & updatePricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Добавление товаров в акцию или изменение их цен
/// </summary>
/// <remarks>
/// Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdPromosOffersUpdateResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPromosOffersUpdateResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPromosOffersUpdateResource() = default;

    BusinessesBusinessIdPromosOffersUpdateResource(
        const BusinessesBusinessIdPromosOffersUpdateResource& other) = default; // copy constructor
    BusinessesBusinessIdPromosOffersUpdateResource(BusinessesBusinessIdPromosOffersUpdateResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPromosOffersUpdateResource& operator=(const BusinessesBusinessIdPromosOffersUpdateResource& other) = default; // copy assignment
    BusinessesBusinessIdPromosOffersUpdateResource& operator=(BusinessesBusinessIdPromosOffersUpdateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdatePromoOffersResponse>(
        int64_t & businessId, UpdatePromoOffersRequest & updatePromoOffersRequest)> handler_POST_func =
            [](int64_t &, UpdatePromoOffersRequest &) -> std::pair<int, UpdatePromoOffersResponse>
                { throw DbsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdatePromoOffersResponse> handler_POST(
        int64_t & businessId, UpdatePromoOffersRequest & updatePromoOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDbsApiException(const DbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace DbsApiResources */

using DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource;
using DbsApiCampaignsCampaignIdHidden_offersResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdHidden_offersResource;
using DbsApiBusinessesBusinessIdOffer_mappingsArchiveResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdOffer_mappingsArchiveResource;
using DbsApiTariffsCalculateResource [[deprecated]] = DbsApiResources::TariffsCalculateResource;
using DbsApiBusinessesBusinessIdPrice_quarantineConfirmResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdPrice_quarantineConfirmResource;
using DbsApiCampaignsCampaignIdPrice_quarantineConfirmResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdPrice_quarantineConfirmResource;
using DbsApiBusinessesBusinessIdChatsNewResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdChatsNewResource;
using DbsApiCampaignsCampaignIdOutletsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOutletsResource;
using DbsApiCampaignsCampaignIdOffersDeleteResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOffersDeleteResource;
using DbsApiBusinessesBusinessIdGoods_feedbackCommentsDeleteResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource;
using DbsApiCampaignsCampaignIdHidden_offersDeleteResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdHidden_offersDeleteResource;
using DbsApiBusinessesBusinessIdOffer_mappingsDeleteResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdOffer_mappingsDeleteResource;
using DbsApiBusinessesBusinessIdOffer_mappingsUnarchiveResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdOffer_mappingsUnarchiveResource;
using DbsApiCampaignsCampaignIdOutletsOutletIdResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOutletsOutletIdResource;
using DbsApiCampaignsCampaignIdOutletsLicensesResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOutletsLicensesResource;
using DbsApiBusinessesBusinessIdPromosOffersDeleteResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdPromosOffersDeleteResource;
using DbsApiReportsBoost_consolidatedGenerateResource [[deprecated]] = DbsApiResources::ReportsBoost_consolidatedGenerateResource;
using DbsApiReportsCompetitors_positionGenerateResource [[deprecated]] = DbsApiResources::ReportsCompetitors_positionGenerateResource;
using DbsApiReportsGoods_feedbackGenerateResource [[deprecated]] = DbsApiResources::ReportsGoods_feedbackGenerateResource;
using DbsApiReportsDocumentsLabelsGenerateResource [[deprecated]] = DbsApiResources::ReportsDocumentsLabelsGenerateResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource;
using DbsApiReportsPricesGenerateResource [[deprecated]] = DbsApiResources::ReportsPricesGenerateResource;
using DbsApiReportsShelf_statisticsGenerateResource [[deprecated]] = DbsApiResources::ReportsShelf_statisticsGenerateResource;
using DbsApiReportsShows_salesGenerateResource [[deprecated]] = DbsApiResources::ReportsShows_salesGenerateResource;
using DbsApiReportsStocks_on_warehousesGenerateResource [[deprecated]] = DbsApiResources::ReportsStocks_on_warehousesGenerateResource;
using DbsApiReportsUnited_marketplace_servicesGenerateResource [[deprecated]] = DbsApiResources::ReportsUnited_marketplace_servicesGenerateResource;
using DbsApiReportsUnited_nettingGenerateResource [[deprecated]] = DbsApiResources::ReportsUnited_nettingGenerateResource;
using DbsApiReportsUnited_ordersGenerateResource [[deprecated]] = DbsApiResources::ReportsUnited_ordersGenerateResource;
using DbsApiCampaignsCampaignIdOffersAllResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOffersAllResource;
using DbsApiBusinessesBusinessIdBidsInfoResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdBidsInfoResource;
using DbsApiBusinessesBusinessIdBidsRecommendationsResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdBidsRecommendationsResource;
using DbsApiBusinessesBusinessIdPrice_quarantineResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdPrice_quarantineResource;
using DbsApiBusinessesBusinessIdSettingsResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdSettingsResource;
using DbsApiCampaignsCampaignIdResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdResource;
using DbsApiCampaignsCampaignIdLoginsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdLoginsResource;
using DbsApiCampaignsCampaignIdOffersResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOffersResource;
using DbsApiCampaignsCampaignIdPrice_quarantineResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdPrice_quarantineResource;
using DbsApiCampaignsCampaignIdRegionResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdRegionResource;
using DbsApiCampaignsCampaignIdSettingsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdSettingsResource;
using DbsApiCampaignsResource [[deprecated]] = DbsApiResources::CampaignsResource;
using DbsApiCampaignsBy_loginLoginResource [[deprecated]] = DbsApiResources::CampaignsBy_loginLoginResource;
using DbsApiCategoriesMax_sale_quantumResource [[deprecated]] = DbsApiResources::CategoriesMax_sale_quantumResource;
using DbsApiCategoriesTreeResource [[deprecated]] = DbsApiResources::CategoriesTreeResource;
using DbsApiCategoryCategoryIdParametersResource [[deprecated]] = DbsApiResources::CategoryCategoryIdParametersResource;
using DbsApiBusinessesBusinessIdChatsHistoryResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdChatsHistoryResource;
using DbsApiBusinessesBusinessIdChatsResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdChatsResource;
using DbsApiDeliveryServicesResource [[deprecated]] = DbsApiResources::DeliveryServicesResource;
using DbsApiCampaignsCampaignIdFeedsFeedIdResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdFeedsFeedIdResource;
using DbsApiCampaignsCampaignIdFeedsFeedIdIndex_logsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdFeedsFeedIdIndex_logsResource;
using DbsApiCampaignsCampaignIdFeedbackUpdatesResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdFeedbackUpdatesResource;
using DbsApiCampaignsCampaignIdFeedsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdFeedsResource;
using DbsApiBusinessesBusinessIdGoods_feedbackCommentsResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource;
using DbsApiBusinessesBusinessIdGoods_feedbackResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdGoods_feedbackResource;
using DbsApiCampaignsCampaignIdStatsSkusResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdStatsSkusResource;
using DbsApiModelsModelIdResource [[deprecated]] = DbsApiResources::ModelsModelIdResource;
using DbsApiModelsModelIdOffersResource [[deprecated]] = DbsApiResources::ModelsModelIdOffersResource;
using DbsApiModelsResource [[deprecated]] = DbsApiResources::ModelsResource;
using DbsApiModelsOffersResource [[deprecated]] = DbsApiResources::ModelsOffersResource;
using DbsApiBusinessesBusinessIdOffer_cardsResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdOffer_cardsResource;
using DbsApiCampaignsCampaignIdOffer_mapping_entriesResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesResource;
using DbsApiBusinessesBusinessIdOffer_mappingsResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdOffer_mappingsResource;
using DbsApiBusinessesBusinessIdOffersRecommendationsResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdOffersRecommendationsResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdBusiness_buyerResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdDocumentsResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdBuyerResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource;
using DbsApiCampaignsCampaignIdOrdersResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersResource;
using DbsApiCampaignsCampaignIdStatsOrdersResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdStatsOrdersResource;
using DbsApiCampaignsCampaignIdOffer_pricesResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOffer_pricesResource;
using DbsApiBusinessesBusinessIdPromosOffersResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdPromosOffersResource;
using DbsApiBusinessesBusinessIdPromosResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdPromosResource;
using DbsApiCampaignsCampaignIdRatingsQualityDetailsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdRatingsQualityDetailsResource;
using DbsApiBusinessesBusinessIdRatingsQualityResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdRatingsQualityResource;
using DbsApiReportsInfoReportIdResource [[deprecated]] = DbsApiResources::ReportsInfoReportIdResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource;
using DbsApiCampaignsCampaignIdReturnsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdReturnsResource;
using DbsApiCampaignsCampaignIdOffersStocksResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOffersStocksResource;
using DbsApiCampaignsCampaignIdOffer_mapping_entriesSuggestionsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource;
using DbsApiBusinessesBusinessIdOffer_mappingsSuggestionsResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdOffer_mappingsSuggestionsResource;
using DbsApiCampaignsCampaignIdOffer_pricesSuggestionsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource;
using DbsApiBusinessesBusinessIdWarehousesResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdWarehousesResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource;
using DbsApiBusinessesBusinessIdBidsResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdBidsResource;
using DbsApiCampaignsCampaignIdBidsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdBidsResource;
using DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdFeedsFeedIdRefreshResource;
using DbsApiRegionsRegionIdChildrenResource [[deprecated]] = DbsApiResources::RegionsRegionIdChildrenResource;
using DbsApiRegionsRegionIdResource [[deprecated]] = DbsApiResources::RegionsRegionIdResource;
using DbsApiRegionsResource [[deprecated]] = DbsApiResources::RegionsResource;
using DbsApiBusinessesBusinessIdChatsFileSendResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdChatsFileSendResource;
using DbsApiBusinessesBusinessIdChatsMessageResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdChatsMessageResource;
using DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdFeedsFeedIdParamsResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryDateResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource;
using DbsApiBusinessesBusinessIdGoods_feedbackSkip_reactionResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource;
using DbsApiBusinessesBusinessIdOffer_pricesUpdatesResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource;
using DbsApiCampaignsCampaignIdOffersUpdateResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOffersUpdateResource;
using DbsApiBusinessesBusinessIdGoods_feedbackCommentsUpdateResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource;
using DbsApiBusinessesBusinessIdOffer_cardsUpdateResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdOffer_cardsUpdateResource;
using DbsApiCampaignsCampaignIdOffer_mapping_entriesUpdatesResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesUpdatesResource;
using DbsApiBusinessesBusinessIdOffer_mappingsUpdateResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdOffer_mappingsUpdateResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource;
using DbsApiCampaignsCampaignIdOrdersStatus_updateResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersStatus_updateResource;
using DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource;
using DbsApiCampaignsCampaignIdOffer_pricesUpdatesResource [[deprecated]] = DbsApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource;
using DbsApiBusinessesBusinessIdPromosOffersUpdateResource [[deprecated]] = DbsApiResources::BusinessesBusinessIdPromosOffersUpdateResource;

//
// The restbed service to actually implement the REST server
//
class  DbsApi
{
public:
    explicit DbsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~DbsApi();

    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> getCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdHidden_offersResource> getCampaignsCampaignIdHidden_offersResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsArchiveResource> getBusinessesBusinessIdOffer_mappingsArchiveResource();
    std::shared_ptr<DbsApiResources::TariffsCalculateResource> getTariffsCalculateResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPrice_quarantineConfirmResource> getBusinessesBusinessIdPrice_quarantineConfirmResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdPrice_quarantineConfirmResource> getCampaignsCampaignIdPrice_quarantineConfirmResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsNewResource> getBusinessesBusinessIdChatsNewResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsResource> getCampaignsCampaignIdOutletsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersDeleteResource> getCampaignsCampaignIdOffersDeleteResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource> getBusinessesBusinessIdGoods_feedbackCommentsDeleteResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdHidden_offersDeleteResource> getCampaignsCampaignIdHidden_offersDeleteResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsDeleteResource> getBusinessesBusinessIdOffer_mappingsDeleteResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsUnarchiveResource> getBusinessesBusinessIdOffer_mappingsUnarchiveResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsOutletIdResource> getCampaignsCampaignIdOutletsOutletIdResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsLicensesResource> getCampaignsCampaignIdOutletsLicensesResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersDeleteResource> getBusinessesBusinessIdPromosOffersDeleteResource();
    std::shared_ptr<DbsApiResources::ReportsBoost_consolidatedGenerateResource> getReportsBoost_consolidatedGenerateResource();
    std::shared_ptr<DbsApiResources::ReportsCompetitors_positionGenerateResource> getReportsCompetitors_positionGenerateResource();
    std::shared_ptr<DbsApiResources::ReportsGoods_feedbackGenerateResource> getReportsGoods_feedbackGenerateResource();
    std::shared_ptr<DbsApiResources::ReportsDocumentsLabelsGenerateResource> getReportsDocumentsLabelsGenerateResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> getCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> getCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource();
    std::shared_ptr<DbsApiResources::ReportsPricesGenerateResource> getReportsPricesGenerateResource();
    std::shared_ptr<DbsApiResources::ReportsShelf_statisticsGenerateResource> getReportsShelf_statisticsGenerateResource();
    std::shared_ptr<DbsApiResources::ReportsShows_salesGenerateResource> getReportsShows_salesGenerateResource();
    std::shared_ptr<DbsApiResources::ReportsStocks_on_warehousesGenerateResource> getReportsStocks_on_warehousesGenerateResource();
    std::shared_ptr<DbsApiResources::ReportsUnited_marketplace_servicesGenerateResource> getReportsUnited_marketplace_servicesGenerateResource();
    std::shared_ptr<DbsApiResources::ReportsUnited_nettingGenerateResource> getReportsUnited_nettingGenerateResource();
    std::shared_ptr<DbsApiResources::ReportsUnited_ordersGenerateResource> getReportsUnited_ordersGenerateResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersAllResource> getCampaignsCampaignIdOffersAllResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsInfoResource> getBusinessesBusinessIdBidsInfoResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsRecommendationsResource> getBusinessesBusinessIdBidsRecommendationsResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPrice_quarantineResource> getBusinessesBusinessIdPrice_quarantineResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdSettingsResource> getBusinessesBusinessIdSettingsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdResource> getCampaignsCampaignIdResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdLoginsResource> getCampaignsCampaignIdLoginsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersResource> getCampaignsCampaignIdOffersResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdPrice_quarantineResource> getCampaignsCampaignIdPrice_quarantineResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdRegionResource> getCampaignsCampaignIdRegionResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdSettingsResource> getCampaignsCampaignIdSettingsResource();
    std::shared_ptr<DbsApiResources::CampaignsResource> getCampaignsResource();
    std::shared_ptr<DbsApiResources::CampaignsBy_loginLoginResource> getCampaignsBy_loginLoginResource();
    std::shared_ptr<DbsApiResources::CategoriesMax_sale_quantumResource> getCategoriesMax_sale_quantumResource();
    std::shared_ptr<DbsApiResources::CategoriesTreeResource> getCategoriesTreeResource();
    std::shared_ptr<DbsApiResources::CategoryCategoryIdParametersResource> getCategoryCategoryIdParametersResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsHistoryResource> getBusinessesBusinessIdChatsHistoryResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsResource> getBusinessesBusinessIdChatsResource();
    std::shared_ptr<DbsApiResources::DeliveryServicesResource> getDeliveryServicesResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdResource> getCampaignsCampaignIdFeedsFeedIdResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdIndex_logsResource> getCampaignsCampaignIdFeedsFeedIdIndex_logsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedbackUpdatesResource> getCampaignsCampaignIdFeedbackUpdatesResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsResource> getCampaignsCampaignIdFeedsResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource> getBusinessesBusinessIdGoods_feedbackCommentsResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackResource> getBusinessesBusinessIdGoods_feedbackResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdStatsSkusResource> getCampaignsCampaignIdStatsSkusResource();
    std::shared_ptr<DbsApiResources::ModelsModelIdResource> getModelsModelIdResource();
    std::shared_ptr<DbsApiResources::ModelsModelIdOffersResource> getModelsModelIdOffersResource();
    std::shared_ptr<DbsApiResources::ModelsResource> getModelsResource();
    std::shared_ptr<DbsApiResources::ModelsOffersResource> getModelsOffersResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_cardsResource> getBusinessesBusinessIdOffer_cardsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesResource> getCampaignsCampaignIdOffer_mapping_entriesResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsResource> getBusinessesBusinessIdOffer_mappingsResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffersRecommendationsResource> getBusinessesBusinessIdOffersRecommendationsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdResource> getCampaignsCampaignIdOrdersOrderIdResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource> getCampaignsCampaignIdOrdersOrderIdBusiness_buyerResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDocumentsResource> getCampaignsCampaignIdOrdersOrderIdDocumentsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBuyerResource> getCampaignsCampaignIdOrdersOrderIdBuyerResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> getCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersResource> getCampaignsCampaignIdOrdersResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdStatsOrdersResource> getCampaignsCampaignIdStatsOrdersResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesResource> getCampaignsCampaignIdOffer_pricesResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersResource> getBusinessesBusinessIdPromosOffersResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosResource> getBusinessesBusinessIdPromosResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdRatingsQualityDetailsResource> getCampaignsCampaignIdRatingsQualityDetailsResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdRatingsQualityResource> getBusinessesBusinessIdRatingsQualityResource();
    std::shared_ptr<DbsApiResources::ReportsInfoReportIdResource> getReportsInfoReportIdResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> getCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> getCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> getCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdReturnsResource> getCampaignsCampaignIdReturnsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersStocksResource> getCampaignsCampaignIdOffersStocksResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource> getCampaignsCampaignIdOffer_mapping_entriesSuggestionsResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsSuggestionsResource> getBusinessesBusinessIdOffer_mappingsSuggestionsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource> getCampaignsCampaignIdOffer_pricesSuggestionsResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdWarehousesResource> getBusinessesBusinessIdWarehousesResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> getCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource> getCampaignsCampaignIdOrdersOrderIdIdentifiersResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsResource> getBusinessesBusinessIdBidsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdBidsResource> getCampaignsCampaignIdBidsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdRefreshResource> getCampaignsCampaignIdFeedsFeedIdRefreshResource();
    std::shared_ptr<DbsApiResources::RegionsRegionIdChildrenResource> getRegionsRegionIdChildrenResource();
    std::shared_ptr<DbsApiResources::RegionsRegionIdResource> getRegionsRegionIdResource();
    std::shared_ptr<DbsApiResources::RegionsResource> getRegionsResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsFileSendResource> getBusinessesBusinessIdChatsFileSendResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsMessageResource> getBusinessesBusinessIdChatsMessageResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdParamsResource> getCampaignsCampaignIdFeedsFeedIdParamsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource> getCampaignsCampaignIdOrdersOrderIdBoxesResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryDateResource> getCampaignsCampaignIdOrdersOrderIdDeliveryDateResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> getCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> getCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource> getCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource> getBusinessesBusinessIdGoods_feedbackSkip_reactionResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource> getCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource> getBusinessesBusinessIdOffer_pricesUpdatesResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersUpdateResource> getCampaignsCampaignIdOffersUpdateResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource> getBusinessesBusinessIdGoods_feedbackCommentsUpdateResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_cardsUpdateResource> getBusinessesBusinessIdOffer_cardsUpdateResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesUpdatesResource> getCampaignsCampaignIdOffer_mapping_entriesUpdatesResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsUpdateResource> getBusinessesBusinessIdOffer_mappingsUpdateResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource> getCampaignsCampaignIdOrdersOrderIdItemsResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource> getCampaignsCampaignIdOrdersOrderIdStatusResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersStatus_updateResource> getCampaignsCampaignIdOrdersStatus_updateResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource> getCampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource();
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource> getCampaignsCampaignIdOffer_pricesUpdatesResource();
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersUpdateResource> getBusinessesBusinessIdPromosOffersUpdateResource();

    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdHidden_offersResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsArchiveResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::TariffsCalculateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPrice_quarantineConfirmResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdPrice_quarantineConfirmResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsNewResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersDeleteResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdHidden_offersDeleteResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsDeleteResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsUnarchiveResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsOutletIdResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsLicensesResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersDeleteResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsBoost_consolidatedGenerateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsCompetitors_positionGenerateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsGoods_feedbackGenerateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsDocumentsLabelsGenerateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsPricesGenerateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsShelf_statisticsGenerateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsShows_salesGenerateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsStocks_on_warehousesGenerateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsUnited_marketplace_servicesGenerateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsUnited_nettingGenerateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsUnited_ordersGenerateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersAllResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsInfoResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsRecommendationsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPrice_quarantineResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdSettingsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdLoginsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdPrice_quarantineResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdRegionResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdSettingsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsBy_loginLoginResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CategoriesMax_sale_quantumResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CategoriesTreeResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CategoryCategoryIdParametersResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsHistoryResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::DeliveryServicesResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdIndex_logsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedbackUpdatesResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdStatsSkusResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ModelsModelIdResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ModelsModelIdOffersResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ModelsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ModelsOffersResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_cardsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffersRecommendationsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDocumentsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBuyerResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdStatsOrdersResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdRatingsQualityDetailsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdRatingsQualityResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::ReportsInfoReportIdResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdReturnsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersStocksResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsSuggestionsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdWarehousesResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdBidsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdRefreshResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::RegionsRegionIdChildrenResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::RegionsRegionIdResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::RegionsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsFileSendResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsMessageResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdParamsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryDateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersUpdateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_cardsUpdateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesUpdatesResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsUpdateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersStatus_updateResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource> resource);
    void setResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersUpdateResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> spDbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdHidden_offersResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdHidden_offersResource> spDbsApiCampaignsCampaignIdHidden_offersResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdOffer_mappingsArchiveResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsArchiveResource> spDbsApiBusinessesBusinessIdOffer_mappingsArchiveResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiTariffsCalculateResource(std::shared_ptr<DbsApiResources::TariffsCalculateResource> spDbsApiTariffsCalculateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdPrice_quarantineConfirmResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPrice_quarantineConfirmResource> spDbsApiBusinessesBusinessIdPrice_quarantineConfirmResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdPrice_quarantineConfirmResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdPrice_quarantineConfirmResource> spDbsApiCampaignsCampaignIdPrice_quarantineConfirmResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdChatsNewResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsNewResource> spDbsApiBusinessesBusinessIdChatsNewResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOutletsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsResource> spDbsApiCampaignsCampaignIdOutletsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOffersDeleteResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersDeleteResource> spDbsApiCampaignsCampaignIdOffersDeleteResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdGoods_feedbackCommentsDeleteResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource> spDbsApiBusinessesBusinessIdGoods_feedbackCommentsDeleteResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdHidden_offersDeleteResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdHidden_offersDeleteResource> spDbsApiCampaignsCampaignIdHidden_offersDeleteResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdOffer_mappingsDeleteResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsDeleteResource> spDbsApiBusinessesBusinessIdOffer_mappingsDeleteResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdOffer_mappingsUnarchiveResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsUnarchiveResource> spDbsApiBusinessesBusinessIdOffer_mappingsUnarchiveResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOutletsOutletIdResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsOutletIdResource> spDbsApiCampaignsCampaignIdOutletsOutletIdResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOutletsLicensesResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsLicensesResource> spDbsApiCampaignsCampaignIdOutletsLicensesResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdPromosOffersDeleteResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersDeleteResource> spDbsApiBusinessesBusinessIdPromosOffersDeleteResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsBoost_consolidatedGenerateResource(std::shared_ptr<DbsApiResources::ReportsBoost_consolidatedGenerateResource> spDbsApiReportsBoost_consolidatedGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsCompetitors_positionGenerateResource(std::shared_ptr<DbsApiResources::ReportsCompetitors_positionGenerateResource> spDbsApiReportsCompetitors_positionGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsGoods_feedbackGenerateResource(std::shared_ptr<DbsApiResources::ReportsGoods_feedbackGenerateResource> spDbsApiReportsGoods_feedbackGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsDocumentsLabelsGenerateResource(std::shared_ptr<DbsApiResources::ReportsDocumentsLabelsGenerateResource> spDbsApiReportsDocumentsLabelsGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsPricesGenerateResource(std::shared_ptr<DbsApiResources::ReportsPricesGenerateResource> spDbsApiReportsPricesGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsShelf_statisticsGenerateResource(std::shared_ptr<DbsApiResources::ReportsShelf_statisticsGenerateResource> spDbsApiReportsShelf_statisticsGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsShows_salesGenerateResource(std::shared_ptr<DbsApiResources::ReportsShows_salesGenerateResource> spDbsApiReportsShows_salesGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsStocks_on_warehousesGenerateResource(std::shared_ptr<DbsApiResources::ReportsStocks_on_warehousesGenerateResource> spDbsApiReportsStocks_on_warehousesGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsUnited_marketplace_servicesGenerateResource(std::shared_ptr<DbsApiResources::ReportsUnited_marketplace_servicesGenerateResource> spDbsApiReportsUnited_marketplace_servicesGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsUnited_nettingGenerateResource(std::shared_ptr<DbsApiResources::ReportsUnited_nettingGenerateResource> spDbsApiReportsUnited_nettingGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsUnited_ordersGenerateResource(std::shared_ptr<DbsApiResources::ReportsUnited_ordersGenerateResource> spDbsApiReportsUnited_ordersGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOffersAllResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersAllResource> spDbsApiCampaignsCampaignIdOffersAllResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdBidsInfoResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsInfoResource> spDbsApiBusinessesBusinessIdBidsInfoResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdBidsRecommendationsResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsRecommendationsResource> spDbsApiBusinessesBusinessIdBidsRecommendationsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdPrice_quarantineResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPrice_quarantineResource> spDbsApiBusinessesBusinessIdPrice_quarantineResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdSettingsResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdSettingsResource> spDbsApiBusinessesBusinessIdSettingsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdResource> spDbsApiCampaignsCampaignIdResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdLoginsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdLoginsResource> spDbsApiCampaignsCampaignIdLoginsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOffersResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersResource> spDbsApiCampaignsCampaignIdOffersResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdPrice_quarantineResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdPrice_quarantineResource> spDbsApiCampaignsCampaignIdPrice_quarantineResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdRegionResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdRegionResource> spDbsApiCampaignsCampaignIdRegionResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdSettingsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdSettingsResource> spDbsApiCampaignsCampaignIdSettingsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsResource(std::shared_ptr<DbsApiResources::CampaignsResource> spDbsApiCampaignsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsBy_loginLoginResource(std::shared_ptr<DbsApiResources::CampaignsBy_loginLoginResource> spDbsApiCampaignsBy_loginLoginResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCategoriesMax_sale_quantumResource(std::shared_ptr<DbsApiResources::CategoriesMax_sale_quantumResource> spDbsApiCategoriesMax_sale_quantumResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCategoriesTreeResource(std::shared_ptr<DbsApiResources::CategoriesTreeResource> spDbsApiCategoriesTreeResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCategoryCategoryIdParametersResource(std::shared_ptr<DbsApiResources::CategoryCategoryIdParametersResource> spDbsApiCategoryCategoryIdParametersResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdChatsHistoryResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsHistoryResource> spDbsApiBusinessesBusinessIdChatsHistoryResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdChatsResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsResource> spDbsApiBusinessesBusinessIdChatsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiDeliveryServicesResource(std::shared_ptr<DbsApiResources::DeliveryServicesResource> spDbsApiDeliveryServicesResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdFeedsFeedIdResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdResource> spDbsApiCampaignsCampaignIdFeedsFeedIdResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdFeedsFeedIdIndex_logsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdIndex_logsResource> spDbsApiCampaignsCampaignIdFeedsFeedIdIndex_logsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdFeedbackUpdatesResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedbackUpdatesResource> spDbsApiCampaignsCampaignIdFeedbackUpdatesResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdFeedsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsResource> spDbsApiCampaignsCampaignIdFeedsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdGoods_feedbackCommentsResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource> spDbsApiBusinessesBusinessIdGoods_feedbackCommentsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdGoods_feedbackResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackResource> spDbsApiBusinessesBusinessIdGoods_feedbackResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdStatsSkusResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdStatsSkusResource> spDbsApiCampaignsCampaignIdStatsSkusResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiModelsModelIdResource(std::shared_ptr<DbsApiResources::ModelsModelIdResource> spDbsApiModelsModelIdResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiModelsModelIdOffersResource(std::shared_ptr<DbsApiResources::ModelsModelIdOffersResource> spDbsApiModelsModelIdOffersResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiModelsResource(std::shared_ptr<DbsApiResources::ModelsResource> spDbsApiModelsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiModelsOffersResource(std::shared_ptr<DbsApiResources::ModelsOffersResource> spDbsApiModelsOffersResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdOffer_cardsResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_cardsResource> spDbsApiBusinessesBusinessIdOffer_cardsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOffer_mapping_entriesResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesResource> spDbsApiCampaignsCampaignIdOffer_mapping_entriesResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdOffer_mappingsResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsResource> spDbsApiBusinessesBusinessIdOffer_mappingsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdOffersRecommendationsResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffersRecommendationsResource> spDbsApiBusinessesBusinessIdOffersRecommendationsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdResource> spDbsApiCampaignsCampaignIdOrdersOrderIdResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdBusiness_buyerResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource> spDbsApiCampaignsCampaignIdOrdersOrderIdBusiness_buyerResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDocumentsResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBuyerResource> spDbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersResource> spDbsApiCampaignsCampaignIdOrdersResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdStatsOrdersResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdStatsOrdersResource> spDbsApiCampaignsCampaignIdStatsOrdersResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOffer_pricesResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesResource> spDbsApiCampaignsCampaignIdOffer_pricesResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdPromosOffersResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersResource> spDbsApiBusinessesBusinessIdPromosOffersResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdPromosResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosResource> spDbsApiBusinessesBusinessIdPromosResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdRatingsQualityDetailsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdRatingsQualityDetailsResource> spDbsApiCampaignsCampaignIdRatingsQualityDetailsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdRatingsQualityResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdRatingsQualityResource> spDbsApiBusinessesBusinessIdRatingsQualityResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiReportsInfoReportIdResource(std::shared_ptr<DbsApiResources::ReportsInfoReportIdResource> spDbsApiReportsInfoReportIdResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdReturnsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdReturnsResource> spDbsApiCampaignsCampaignIdReturnsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOffersStocksResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersStocksResource> spDbsApiCampaignsCampaignIdOffersStocksResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOffer_mapping_entriesSuggestionsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource> spDbsApiCampaignsCampaignIdOffer_mapping_entriesSuggestionsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdOffer_mappingsSuggestionsResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsSuggestionsResource> spDbsApiBusinessesBusinessIdOffer_mappingsSuggestionsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOffer_pricesSuggestionsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource> spDbsApiCampaignsCampaignIdOffer_pricesSuggestionsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdWarehousesResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdWarehousesResource> spDbsApiBusinessesBusinessIdWarehousesResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource> spDbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdBidsResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsResource> spDbsApiBusinessesBusinessIdBidsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdBidsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdBidsResource> spDbsApiCampaignsCampaignIdBidsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdRefreshResource> spDbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiRegionsRegionIdChildrenResource(std::shared_ptr<DbsApiResources::RegionsRegionIdChildrenResource> spDbsApiRegionsRegionIdChildrenResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiRegionsRegionIdResource(std::shared_ptr<DbsApiResources::RegionsRegionIdResource> spDbsApiRegionsRegionIdResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiRegionsResource(std::shared_ptr<DbsApiResources::RegionsResource> spDbsApiRegionsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdChatsFileSendResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsFileSendResource> spDbsApiBusinessesBusinessIdChatsFileSendResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdChatsMessageResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsMessageResource> spDbsApiBusinessesBusinessIdChatsMessageResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdFeedsFeedIdParamsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdParamsResource> spDbsApiCampaignsCampaignIdFeedsFeedIdParamsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource> spDbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryDateResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource> spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdGoods_feedbackSkip_reactionResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource> spDbsApiBusinessesBusinessIdGoods_feedbackSkip_reactionResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource> spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdOffer_pricesUpdatesResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource> spDbsApiBusinessesBusinessIdOffer_pricesUpdatesResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOffersUpdateResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersUpdateResource> spDbsApiCampaignsCampaignIdOffersUpdateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdGoods_feedbackCommentsUpdateResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource> spDbsApiBusinessesBusinessIdGoods_feedbackCommentsUpdateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdOffer_cardsUpdateResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_cardsUpdateResource> spDbsApiBusinessesBusinessIdOffer_cardsUpdateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOffer_mapping_entriesUpdatesResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesUpdatesResource> spDbsApiCampaignsCampaignIdOffer_mapping_entriesUpdatesResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdOffer_mappingsUpdateResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsUpdateResource> spDbsApiBusinessesBusinessIdOffer_mappingsUpdateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdItemsResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource> spDbsApiCampaignsCampaignIdOrdersOrderIdItemsResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdStatusResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource> spDbsApiCampaignsCampaignIdOrdersOrderIdStatusResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersStatus_updateResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersStatus_updateResource> spDbsApiCampaignsCampaignIdOrdersStatus_updateResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiCampaignsCampaignIdOffer_pricesUpdatesResource(std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource> spDbsApiCampaignsCampaignIdOffer_pricesUpdatesResource);
    [[deprecated("use setResource()")]]
    virtual void setDbsApiBusinessesBusinessIdPromosOffersUpdateResource(std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersUpdateResource> spDbsApiBusinessesBusinessIdPromosOffersUpdateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> m_spCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdHidden_offersResource> m_spCampaignsCampaignIdHidden_offersResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsArchiveResource> m_spBusinessesBusinessIdOffer_mappingsArchiveResource;
    std::shared_ptr<DbsApiResources::TariffsCalculateResource> m_spTariffsCalculateResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPrice_quarantineConfirmResource> m_spBusinessesBusinessIdPrice_quarantineConfirmResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdPrice_quarantineConfirmResource> m_spCampaignsCampaignIdPrice_quarantineConfirmResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsNewResource> m_spBusinessesBusinessIdChatsNewResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsResource> m_spCampaignsCampaignIdOutletsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersDeleteResource> m_spCampaignsCampaignIdOffersDeleteResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource> m_spBusinessesBusinessIdGoods_feedbackCommentsDeleteResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdHidden_offersDeleteResource> m_spCampaignsCampaignIdHidden_offersDeleteResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsDeleteResource> m_spBusinessesBusinessIdOffer_mappingsDeleteResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsUnarchiveResource> m_spBusinessesBusinessIdOffer_mappingsUnarchiveResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsOutletIdResource> m_spCampaignsCampaignIdOutletsOutletIdResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOutletsLicensesResource> m_spCampaignsCampaignIdOutletsLicensesResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersDeleteResource> m_spBusinessesBusinessIdPromosOffersDeleteResource;
    std::shared_ptr<DbsApiResources::ReportsBoost_consolidatedGenerateResource> m_spReportsBoost_consolidatedGenerateResource;
    std::shared_ptr<DbsApiResources::ReportsCompetitors_positionGenerateResource> m_spReportsCompetitors_positionGenerateResource;
    std::shared_ptr<DbsApiResources::ReportsGoods_feedbackGenerateResource> m_spReportsGoods_feedbackGenerateResource;
    std::shared_ptr<DbsApiResources::ReportsDocumentsLabelsGenerateResource> m_spReportsDocumentsLabelsGenerateResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource;
    std::shared_ptr<DbsApiResources::ReportsPricesGenerateResource> m_spReportsPricesGenerateResource;
    std::shared_ptr<DbsApiResources::ReportsShelf_statisticsGenerateResource> m_spReportsShelf_statisticsGenerateResource;
    std::shared_ptr<DbsApiResources::ReportsShows_salesGenerateResource> m_spReportsShows_salesGenerateResource;
    std::shared_ptr<DbsApiResources::ReportsStocks_on_warehousesGenerateResource> m_spReportsStocks_on_warehousesGenerateResource;
    std::shared_ptr<DbsApiResources::ReportsUnited_marketplace_servicesGenerateResource> m_spReportsUnited_marketplace_servicesGenerateResource;
    std::shared_ptr<DbsApiResources::ReportsUnited_nettingGenerateResource> m_spReportsUnited_nettingGenerateResource;
    std::shared_ptr<DbsApiResources::ReportsUnited_ordersGenerateResource> m_spReportsUnited_ordersGenerateResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersAllResource> m_spCampaignsCampaignIdOffersAllResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsInfoResource> m_spBusinessesBusinessIdBidsInfoResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsRecommendationsResource> m_spBusinessesBusinessIdBidsRecommendationsResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPrice_quarantineResource> m_spBusinessesBusinessIdPrice_quarantineResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdSettingsResource> m_spBusinessesBusinessIdSettingsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdResource> m_spCampaignsCampaignIdResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdLoginsResource> m_spCampaignsCampaignIdLoginsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersResource> m_spCampaignsCampaignIdOffersResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdPrice_quarantineResource> m_spCampaignsCampaignIdPrice_quarantineResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdRegionResource> m_spCampaignsCampaignIdRegionResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdSettingsResource> m_spCampaignsCampaignIdSettingsResource;
    std::shared_ptr<DbsApiResources::CampaignsResource> m_spCampaignsResource;
    std::shared_ptr<DbsApiResources::CampaignsBy_loginLoginResource> m_spCampaignsBy_loginLoginResource;
    std::shared_ptr<DbsApiResources::CategoriesMax_sale_quantumResource> m_spCategoriesMax_sale_quantumResource;
    std::shared_ptr<DbsApiResources::CategoriesTreeResource> m_spCategoriesTreeResource;
    std::shared_ptr<DbsApiResources::CategoryCategoryIdParametersResource> m_spCategoryCategoryIdParametersResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsHistoryResource> m_spBusinessesBusinessIdChatsHistoryResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsResource> m_spBusinessesBusinessIdChatsResource;
    std::shared_ptr<DbsApiResources::DeliveryServicesResource> m_spDeliveryServicesResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdResource> m_spCampaignsCampaignIdFeedsFeedIdResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdIndex_logsResource> m_spCampaignsCampaignIdFeedsFeedIdIndex_logsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedbackUpdatesResource> m_spCampaignsCampaignIdFeedbackUpdatesResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsResource> m_spCampaignsCampaignIdFeedsResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource> m_spBusinessesBusinessIdGoods_feedbackCommentsResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackResource> m_spBusinessesBusinessIdGoods_feedbackResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdStatsSkusResource> m_spCampaignsCampaignIdStatsSkusResource;
    std::shared_ptr<DbsApiResources::ModelsModelIdResource> m_spModelsModelIdResource;
    std::shared_ptr<DbsApiResources::ModelsModelIdOffersResource> m_spModelsModelIdOffersResource;
    std::shared_ptr<DbsApiResources::ModelsResource> m_spModelsResource;
    std::shared_ptr<DbsApiResources::ModelsOffersResource> m_spModelsOffersResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_cardsResource> m_spBusinessesBusinessIdOffer_cardsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesResource> m_spCampaignsCampaignIdOffer_mapping_entriesResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsResource> m_spBusinessesBusinessIdOffer_mappingsResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffersRecommendationsResource> m_spBusinessesBusinessIdOffersRecommendationsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdResource> m_spCampaignsCampaignIdOrdersOrderIdResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBusiness_buyerResource> m_spCampaignsCampaignIdOrdersOrderIdBusiness_buyerResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDocumentsResource> m_spCampaignsCampaignIdOrdersOrderIdDocumentsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBuyerResource> m_spCampaignsCampaignIdOrdersOrderIdBuyerResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersResource> m_spCampaignsCampaignIdOrdersResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdStatsOrdersResource> m_spCampaignsCampaignIdStatsOrdersResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesResource> m_spCampaignsCampaignIdOffer_pricesResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersResource> m_spBusinessesBusinessIdPromosOffersResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosResource> m_spBusinessesBusinessIdPromosResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdRatingsQualityDetailsResource> m_spCampaignsCampaignIdRatingsQualityDetailsResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdRatingsQualityResource> m_spBusinessesBusinessIdRatingsQualityResource;
    std::shared_ptr<DbsApiResources::ReportsInfoReportIdResource> m_spReportsInfoReportIdResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> m_spCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> m_spCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> m_spCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdReturnsResource> m_spCampaignsCampaignIdReturnsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersStocksResource> m_spCampaignsCampaignIdOffersStocksResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource> m_spCampaignsCampaignIdOffer_mapping_entriesSuggestionsResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsSuggestionsResource> m_spBusinessesBusinessIdOffer_mappingsSuggestionsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource> m_spCampaignsCampaignIdOffer_pricesSuggestionsResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdWarehousesResource> m_spBusinessesBusinessIdWarehousesResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> m_spCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource> m_spCampaignsCampaignIdOrdersOrderIdIdentifiersResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdBidsResource> m_spBusinessesBusinessIdBidsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdBidsResource> m_spCampaignsCampaignIdBidsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdRefreshResource> m_spCampaignsCampaignIdFeedsFeedIdRefreshResource;
    std::shared_ptr<DbsApiResources::RegionsRegionIdChildrenResource> m_spRegionsRegionIdChildrenResource;
    std::shared_ptr<DbsApiResources::RegionsRegionIdResource> m_spRegionsRegionIdResource;
    std::shared_ptr<DbsApiResources::RegionsResource> m_spRegionsResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsFileSendResource> m_spBusinessesBusinessIdChatsFileSendResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdChatsMessageResource> m_spBusinessesBusinessIdChatsMessageResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdFeedsFeedIdParamsResource> m_spCampaignsCampaignIdFeedsFeedIdParamsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource> m_spCampaignsCampaignIdOrdersOrderIdBoxesResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryDateResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryDateResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource> m_spCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource> m_spBusinessesBusinessIdGoods_feedbackSkip_reactionResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource> m_spCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource> m_spBusinessesBusinessIdOffer_pricesUpdatesResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffersUpdateResource> m_spCampaignsCampaignIdOffersUpdateResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource> m_spBusinessesBusinessIdGoods_feedbackCommentsUpdateResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_cardsUpdateResource> m_spBusinessesBusinessIdOffer_cardsUpdateResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_mapping_entriesUpdatesResource> m_spCampaignsCampaignIdOffer_mapping_entriesUpdatesResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdOffer_mappingsUpdateResource> m_spBusinessesBusinessIdOffer_mappingsUpdateResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource> m_spCampaignsCampaignIdOrdersOrderIdItemsResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource> m_spCampaignsCampaignIdOrdersOrderIdStatusResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersStatus_updateResource> m_spCampaignsCampaignIdOrdersStatus_updateResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource;
    std::shared_ptr<DbsApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource> m_spCampaignsCampaignIdOffer_pricesUpdatesResource;
    std::shared_ptr<DbsApiResources::BusinessesBusinessIdPromosOffersUpdateResource> m_spBusinessesBusinessIdPromosOffersUpdateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* DbsApi_H_ */

