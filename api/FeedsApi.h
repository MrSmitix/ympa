/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedsApi.h
 *
 * 
 */

#ifndef FeedsApi_H_
#define FeedsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "FeedIndexLogsStatusType.h"
#include "GetFeedIndexLogsResponse.h"
#include "GetFeedResponse.h"
#include "GetFeedsResponse.h"
#include "SetFeedParamsRequest.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  FeedsApiException: public std::exception
{
public:
    FeedsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace FeedsApiResources {
/// <summary>
/// Информация о прайс-листе
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFeedsFeedIdResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFeedsFeedIdResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFeedsFeedIdResource() = default;

    CampaignsCampaignIdFeedsFeedIdResource(
        const CampaignsCampaignIdFeedsFeedIdResource& other) = default; // copy constructor
    CampaignsCampaignIdFeedsFeedIdResource(CampaignsCampaignIdFeedsFeedIdResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFeedsFeedIdResource& operator=(const CampaignsCampaignIdFeedsFeedIdResource& other) = default; // copy assignment
    CampaignsCampaignIdFeedsFeedIdResource& operator=(CampaignsCampaignIdFeedsFeedIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetFeedResponse>(
        int64_t & campaignId, int64_t & feedId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetFeedResponse>
                { throw FeedsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetFeedResponse> handler_GET(
        int64_t & campaignId, int64_t & feedId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleFeedsApiException(const FeedsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по индексации прайс-листа
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра &#x60;generationId&#x60;.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFeedsFeedIdIndex_logsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFeedsFeedIdIndex_logsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFeedsFeedIdIndex_logsResource() = default;

    CampaignsCampaignIdFeedsFeedIdIndex_logsResource(
        const CampaignsCampaignIdFeedsFeedIdIndex_logsResource& other) = default; // copy constructor
    CampaignsCampaignIdFeedsFeedIdIndex_logsResource(CampaignsCampaignIdFeedsFeedIdIndex_logsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFeedsFeedIdIndex_logsResource& operator=(const CampaignsCampaignIdFeedsFeedIdIndex_logsResource& other) = default; // copy assignment
    CampaignsCampaignIdFeedsFeedIdIndex_logsResource& operator=(CampaignsCampaignIdFeedsFeedIdIndex_logsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetFeedIndexLogsResponse>(
        int64_t & campaignId, int64_t & feedId, int32_t & limit, std::string & publishedTimeFrom, std::string & publishedTimeTo, FeedIndexLogsStatusType & status)> handler_GET_func =
            [](int64_t &, int64_t &, int32_t &, std::string &, std::string &, FeedIndexLogsStatusType &) -> std::pair<int, GetFeedIndexLogsResponse>
                { throw FeedsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetFeedIndexLogsResponse> handler_GET(
        int64_t & campaignId, int64_t & feedId, int32_t & limit, std::string & publishedTimeFrom, std::string & publishedTimeTo, FeedIndexLogsStatusType & status);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleFeedsApiException(const FeedsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список прайс-листов магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFeedsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFeedsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFeedsResource() = default;

    CampaignsCampaignIdFeedsResource(
        const CampaignsCampaignIdFeedsResource& other) = default; // copy constructor
    CampaignsCampaignIdFeedsResource(CampaignsCampaignIdFeedsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFeedsResource& operator=(const CampaignsCampaignIdFeedsResource& other) = default; // copy assignment
    CampaignsCampaignIdFeedsResource& operator=(CampaignsCampaignIdFeedsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetFeedsResponse>(
        int64_t & campaignId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetFeedsResponse>
                { throw FeedsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetFeedsResponse> handler_GET(
        int64_t & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleFeedsApiException(const FeedsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Сообщить, что прайс-лист обновился
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом &#x60;POST campaigns/{campaignId}/feeds/{feedId}/refresh&#x60;. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — &#x60;200 OK&#x60;. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
/// </remarks>
class  CampaignsCampaignIdFeedsFeedIdRefreshResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFeedsFeedIdRefreshResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFeedsFeedIdRefreshResource() = default;

    CampaignsCampaignIdFeedsFeedIdRefreshResource(
        const CampaignsCampaignIdFeedsFeedIdRefreshResource& other) = default; // copy constructor
    CampaignsCampaignIdFeedsFeedIdRefreshResource(CampaignsCampaignIdFeedsFeedIdRefreshResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFeedsFeedIdRefreshResource& operator=(const CampaignsCampaignIdFeedsFeedIdRefreshResource& other) = default; // copy assignment
    CampaignsCampaignIdFeedsFeedIdRefreshResource& operator=(CampaignsCampaignIdFeedsFeedIdRefreshResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & feedId)> handler_POST_func =
            [](int64_t &, int64_t &) -> std::pair<int, EmptyApiResponse>
                { throw FeedsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & feedId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleFeedsApiException(const FeedsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Изменение параметров прайс-листа
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;value&#x60; (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;delete&#x3D;true&#x60; (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
/// </remarks>
class  CampaignsCampaignIdFeedsFeedIdParamsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFeedsFeedIdParamsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFeedsFeedIdParamsResource() = default;

    CampaignsCampaignIdFeedsFeedIdParamsResource(
        const CampaignsCampaignIdFeedsFeedIdParamsResource& other) = default; // copy constructor
    CampaignsCampaignIdFeedsFeedIdParamsResource(CampaignsCampaignIdFeedsFeedIdParamsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFeedsFeedIdParamsResource& operator=(const CampaignsCampaignIdFeedsFeedIdParamsResource& other) = default; // copy assignment
    CampaignsCampaignIdFeedsFeedIdParamsResource& operator=(CampaignsCampaignIdFeedsFeedIdParamsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & feedId, SetFeedParamsRequest & setFeedParamsRequest)> handler_POST_func =
            [](int64_t &, int64_t &, SetFeedParamsRequest &) -> std::pair<int, EmptyApiResponse>
                { throw FeedsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & feedId, SetFeedParamsRequest & setFeedParamsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleFeedsApiException(const FeedsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace FeedsApiResources */

using FeedsApiCampaignsCampaignIdFeedsFeedIdResource [[deprecated]] = FeedsApiResources::CampaignsCampaignIdFeedsFeedIdResource;
using FeedsApiCampaignsCampaignIdFeedsFeedIdIndex_logsResource [[deprecated]] = FeedsApiResources::CampaignsCampaignIdFeedsFeedIdIndex_logsResource;
using FeedsApiCampaignsCampaignIdFeedsResource [[deprecated]] = FeedsApiResources::CampaignsCampaignIdFeedsResource;
using FeedsApiCampaignsCampaignIdFeedsFeedIdRefreshResource [[deprecated]] = FeedsApiResources::CampaignsCampaignIdFeedsFeedIdRefreshResource;
using FeedsApiCampaignsCampaignIdFeedsFeedIdParamsResource [[deprecated]] = FeedsApiResources::CampaignsCampaignIdFeedsFeedIdParamsResource;

//
// The restbed service to actually implement the REST server
//
class  FeedsApi
{
public:
    explicit FeedsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~FeedsApi();

    std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdResource> getCampaignsCampaignIdFeedsFeedIdResource();
    std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdIndex_logsResource> getCampaignsCampaignIdFeedsFeedIdIndex_logsResource();
    std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsResource> getCampaignsCampaignIdFeedsResource();
    std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdRefreshResource> getCampaignsCampaignIdFeedsFeedIdRefreshResource();
    std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdParamsResource> getCampaignsCampaignIdFeedsFeedIdParamsResource();

    void setResource(std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdResource> resource);
    void setResource(std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdIndex_logsResource> resource);
    void setResource(std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsResource> resource);
    void setResource(std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdRefreshResource> resource);
    void setResource(std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdParamsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setFeedsApiCampaignsCampaignIdFeedsFeedIdResource(std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdResource> spFeedsApiCampaignsCampaignIdFeedsFeedIdResource);
    [[deprecated("use setResource()")]]
    virtual void setFeedsApiCampaignsCampaignIdFeedsFeedIdIndex_logsResource(std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdIndex_logsResource> spFeedsApiCampaignsCampaignIdFeedsFeedIdIndex_logsResource);
    [[deprecated("use setResource()")]]
    virtual void setFeedsApiCampaignsCampaignIdFeedsResource(std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsResource> spFeedsApiCampaignsCampaignIdFeedsResource);
    [[deprecated("use setResource()")]]
    virtual void setFeedsApiCampaignsCampaignIdFeedsFeedIdRefreshResource(std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdRefreshResource> spFeedsApiCampaignsCampaignIdFeedsFeedIdRefreshResource);
    [[deprecated("use setResource()")]]
    virtual void setFeedsApiCampaignsCampaignIdFeedsFeedIdParamsResource(std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdParamsResource> spFeedsApiCampaignsCampaignIdFeedsFeedIdParamsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdResource> m_spCampaignsCampaignIdFeedsFeedIdResource;
    std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdIndex_logsResource> m_spCampaignsCampaignIdFeedsFeedIdIndex_logsResource;
    std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsResource> m_spCampaignsCampaignIdFeedsResource;
    std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdRefreshResource> m_spCampaignsCampaignIdFeedsFeedIdRefreshResource;
    std::shared_ptr<FeedsApiResources::CampaignsCampaignIdFeedsFeedIdParamsResource> m_spCampaignsCampaignIdFeedsFeedIdParamsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* FeedsApi_H_ */

