/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnsApi.h
 *
 * 
 */

#ifndef ReturnsApi_H_
#define ReturnsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetReturnResponse.h"
#include "GetReturnsResponse.h"
#include "RefundStatusType.h"
#include "ReturnType.h"
#include "SetReturnDecisionRequest.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ReturnsApiException: public std::exception
{
public:
    ReturnsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Информация о невыкупе или возврате
/// </summary>
/// <remarks>
/// Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource: public restbed::Resource
{
public:
    ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(const std::string& context = "");
    virtual ~ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetReturnResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_returnId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("returnId", 0L);
    }



    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение заявления на возврат
/// </summary>
/// <remarks>
/// Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource: public restbed::Resource
{
public:
    ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(const std::string& context = "");
    virtual ~ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_returnId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("returnId", 0L);
    }



    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение фотографии возврата
/// </summary>
/// <remarks>
/// Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource: public restbed::Resource
{
public:
    ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(const std::string& context = "");
    virtual ~ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId, int64_t const & itemId, std::string const & imageHash);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_returnId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("returnId", 0L);
    }

    virtual int64_t getPathParam_itemId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("itemId", 0L);
    }

    virtual std::string getPathParam_imageHash(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("imageHash", "");
    }



    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список невыкупов и возвратов
/// </summary>
/// <remarks>
/// Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  ReturnsApiCampaignsCampaignIdReturnsResource: public restbed::Resource
{
public:
    ReturnsApiCampaignsCampaignIdReturnsResource(const std::string& context = "");
    virtual ~ReturnsApiCampaignsCampaignIdReturnsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetReturnsResponse>> handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::vector<int64_t> const & orderIds, std::vector<std::shared_ptr<RefundStatusType>> const & statuses, std::shared_ptr<ReturnType> const & type, std::string const & fromDate, std::string const & toDate, std::string const & fromDate2, std::string const & toDate2);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }

    virtual std::string getQueryParam_fromDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fromDate", "");
    }

    virtual std::string getQueryParam_toDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("toDate", "");
    }

    virtual std::string getQueryParam_fromDate2(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fromDate2", "");
    }

    virtual std::string getQueryParam_toDate2(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("toDate2", "");
    }



    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Принятие или изменение решения по возврату
/// </summary>
/// <remarks>
/// Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource: public restbed::Resource
{
public:
    ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(const std::string& context = "");
    virtual ~ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId, std::shared_ptr<SetReturnDecisionRequest> const & setReturnDecisionRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_returnId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("returnId", 0L);
    }



    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Подтверждение решения по возврату
/// </summary>
/// <remarks>
/// Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource: public restbed::Resource
{
public:
    ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(const std::string& context = "");
    virtual ~ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_returnId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("returnId", 0L);
    }



    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  ReturnsApi
{
public:
    explicit ReturnsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ReturnsApi();

    virtual void setReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(std::shared_ptr<ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource);
    virtual void setReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(std::shared_ptr<ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource);
    virtual void setReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(std::shared_ptr<ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource);
    virtual void setReturnsApiCampaignsCampaignIdReturnsResource(std::shared_ptr<ReturnsApiCampaignsCampaignIdReturnsResource> spReturnsApiCampaignsCampaignIdReturnsResource);
    virtual void setReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(std::shared_ptr<ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource> spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource);
    virtual void setReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(std::shared_ptr<ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource> spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> m_spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource;
    std::shared_ptr<ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> m_spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource;
    std::shared_ptr<ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> m_spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource;
    std::shared_ptr<ReturnsApiCampaignsCampaignIdReturnsResource> m_spReturnsApiCampaignsCampaignIdReturnsResource;
    std::shared_ptr<ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource> m_spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource;
    std::shared_ptr<ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource> m_spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ReturnsApi_H_ */

