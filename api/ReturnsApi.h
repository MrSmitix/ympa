/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnsApi.h
 *
 * 
 */

#ifndef ReturnsApi_H_
#define ReturnsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetReturnResponse.h"
#include "GetReturnsResponse.h"
#include "RefundStatusType.h"
#include "ReturnType.h"
#include "SetReturnDecisionRequest.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ReturnsApiException: public std::exception
{
public:
    ReturnsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace ReturnsApiResources {
/// <summary>
/// Информация о невыкупе или возврате
/// </summary>
/// <remarks>
/// Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource() = default;

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(
        const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource& operator=(const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource& operator=(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetReturnResponse>(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId)> handler_GET_func =
            [](int64_t &, int64_t &, int64_t &) -> std::pair<int, GetReturnResponse>
                { throw ReturnsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetReturnResponse> handler_GET(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение заявления на возврат
/// </summary>
/// <remarks>
/// Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource() = default;

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(
        const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource& operator=(const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource& operator=(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId)> handler_GET_func =
            [](int64_t &, int64_t &, int64_t &) -> std::pair<int, std::string>
                { throw ReturnsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение фотографии возврата
/// </summary>
/// <remarks>
/// Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource() = default;

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(
        const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource& operator=(const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource& operator=(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId, int64_t & itemId, std::string & imageHash)> handler_GET_func =
            [](int64_t &, int64_t &, int64_t &, int64_t &, std::string &) -> std::pair<int, std::string>
                { throw ReturnsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId, int64_t & itemId, std::string & imageHash);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список невыкупов и возвратов
/// </summary>
/// <remarks>
/// Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdReturnsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdReturnsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdReturnsResource() = default;

    CampaignsCampaignIdReturnsResource(
        const CampaignsCampaignIdReturnsResource& other) = default; // copy constructor
    CampaignsCampaignIdReturnsResource(CampaignsCampaignIdReturnsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdReturnsResource& operator=(const CampaignsCampaignIdReturnsResource& other) = default; // copy assignment
    CampaignsCampaignIdReturnsResource& operator=(CampaignsCampaignIdReturnsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetReturnsResponse>(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, std::vector<int64_t> & orderIds, std::vector<RefundStatusType> & statuses, ReturnType & type, std::string & fromDate, std::string & toDate, std::string & fromDate2, std::string & toDate2)> handler_GET_func =
            [](int64_t &, std::string &, int32_t &, std::vector<int64_t> &, std::vector<RefundStatusType> &, ReturnType &, std::string &, std::string &, std::string &, std::string &) -> std::pair<int, GetReturnsResponse>
                { throw ReturnsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetReturnsResponse> handler_GET(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, std::vector<int64_t> & orderIds, std::vector<RefundStatusType> & statuses, ReturnType & type, std::string & fromDate, std::string & toDate, std::string & fromDate2, std::string & toDate2);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Принятие или изменение решения по возврату
/// </summary>
/// <remarks>
/// Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource() = default;

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(
        const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource& operator=(const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource& operator=(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId, SetReturnDecisionRequest & setReturnDecisionRequest)> handler_POST_func =
            [](int64_t &, int64_t &, int64_t &, SetReturnDecisionRequest &) -> std::pair<int, EmptyApiResponse>
                { throw ReturnsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId, SetReturnDecisionRequest & setReturnDecisionRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Подтверждение решения по возврату
/// </summary>
/// <remarks>
/// Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource() = default;

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(
        const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource& operator=(const CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource& operator=(CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId)> handler_POST_func =
            [](int64_t &, int64_t &, int64_t &) -> std::pair<int, EmptyApiResponse>
                { throw ReturnsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & orderId, int64_t & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReturnsApiException(const ReturnsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace ReturnsApiResources */

using ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource [[deprecated]] = ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource;
using ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource [[deprecated]] = ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource;
using ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource [[deprecated]] = ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource;
using ReturnsApiCampaignsCampaignIdReturnsResource [[deprecated]] = ReturnsApiResources::CampaignsCampaignIdReturnsResource;
using ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource [[deprecated]] = ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource;
using ReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource [[deprecated]] = ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource;

//
// The restbed service to actually implement the REST server
//
class  ReturnsApi
{
public:
    explicit ReturnsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ReturnsApi();

    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> getCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource();
    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> getCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource();
    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> getCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource();
    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdReturnsResource> getCampaignsCampaignIdReturnsResource();
    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource> getCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource();
    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource> getCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource();

    void setResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> resource);
    void setResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> resource);
    void setResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> resource);
    void setResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdReturnsResource> resource);
    void setResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource> resource);
    void setResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource);
    [[deprecated("use setResource()")]]
    virtual void setReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource);
    [[deprecated("use setResource()")]]
    virtual void setReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource);
    [[deprecated("use setResource()")]]
    virtual void setReturnsApiCampaignsCampaignIdReturnsResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdReturnsResource> spReturnsApiCampaignsCampaignIdReturnsResource);
    [[deprecated("use setResource()")]]
    virtual void setReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource> spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource);
    [[deprecated("use setResource()")]]
    virtual void setReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource> spReturnsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> m_spCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource;
    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> m_spCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource;
    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> m_spCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource;
    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdReturnsResource> m_spCampaignsCampaignIdReturnsResource;
    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource> m_spCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource;
    std::shared_ptr<ReturnsApiResources::CampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource> m_spCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ReturnsApi_H_ */

