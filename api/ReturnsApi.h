/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ReturnsApi.h
 *
 * 
 */

#ifndef ReturnsApi_H_
#define ReturnsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetReturnResponse.h"
#include "GetReturnsResponse.h"
#include "RefundStatusType.h"
#include "ReturnType.h"
#include "SetReturnDecisionRequest.h"
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

class  ReturnsApi : public ApiBase {
public:
    explicit ReturnsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~ReturnsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void get_return_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_return_application_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_return_photo_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_returns_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void set_return_decision_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void submit_return_decision_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void returns_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Информация о невыкупе или возврате
    /// </summary>
    /// <remarks>
    /// Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="orderId">Идентификатор заказа.</param>
    /// <param name="returnId">Идентификатор возврата.</param>
    virtual void get_return(const int64_t &campaignId, const int64_t &orderId, const int64_t &returnId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Получение заявления на возврат
    /// </summary>
    /// <remarks>
    /// Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="orderId">Идентификатор заказа.</param>
    /// <param name="returnId">Идентификатор возврата.</param>
    virtual void get_return_application(const int64_t &campaignId, const int64_t &orderId, const int64_t &returnId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Получение фотографии возврата
    /// </summary>
    /// <remarks>
    /// Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="orderId">Идентификатор заказа.</param>
    /// <param name="returnId">Идентификатор возврата.</param>
    /// <param name="itemId">Идентификатор товара в возврате.</param>
    /// <param name="imageHash">Хеш ссылки изображения для загрузки.</param>
    virtual void get_return_photo(const int64_t &campaignId, const int64_t &orderId, const int64_t &returnId, const int64_t &itemId, const std::string &imageHash, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Список невыкупов и возвратов
    /// </summary>
    /// <remarks>
    /// Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional, default to &quot;&quot;)</param>
    /// <param name="limit">Количество значений на одной странице.  (optional, default to 0)</param>
    /// <param name="orderIds">Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50.  (optional, default to std::vector&lt;int64_t&gt;())</param>
    /// <param name="statuses">Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую.  (optional, default to std::vector&lt;std::shared_ptr&lt;RefundStatusType&gt;&gt;())</param>
    /// <param name="type">Тип заказа для фильтрации:  * &#x60;RETURN&#x60; — возврат.  * &#x60;UNREDEEMED&#x60; — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы.  (optional, default to std::make_shared&lt;ReturnType&gt;())</param>
    /// <param name="fromDate">Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;.  (optional, default to &quot;&quot;)</param>
    /// <param name="toDate">Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;.  (optional, default to &quot;&quot;)</param>
    /// <param name="fromDate2">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  (optional, default to &quot;&quot;)</param>
    /// <param name="toDate2">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  (optional, default to &quot;&quot;)</param>
    virtual void get_returns(const int64_t &campaignId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const std::optional<std::vector<int64_t>> &orderIds, const std::optional<std::vector<org::openapitools::server::model::RefundStatusType>> &statuses, const std::optional<org::openapitools::server::model::ReturnType> &type, const std::optional<std::string> &fromDate, const std::optional<std::string> &toDate, const std::optional<std::string> &fromDate2, const std::optional<std::string> &toDate2, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Принятие или изменение решения по возврату
    /// </summary>
    /// <remarks>
    /// Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="orderId">Идентификатор заказа.</param>
    /// <param name="returnId">Идентификатор возврата.</param>
    /// <param name="setReturnDecisionRequest"></param>
    virtual void set_return_decision(const int64_t &campaignId, const int64_t &orderId, const int64_t &returnId, const org::openapitools::server::model::SetReturnDecisionRequest &setReturnDecisionRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Подтверждение решения по возврату
    /// </summary>
    /// <remarks>
    /// Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="orderId">Идентификатор заказа.</param>
    /// <param name="returnId">Идентификатор возврата.</param>
    virtual void submit_return_decision(const int64_t &campaignId, const int64_t &orderId, const int64_t &returnId, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* ReturnsApi_H_ */

