/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CampaignsApi.h
 *
 * 
 */

#ifndef CampaignsApi_H_
#define CampaignsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GetCampaignLoginsResponse.h"
#include "GetCampaignRegionResponse.h"
#include "GetCampaignResponse.h"
#include "GetCampaignSettingsResponse.h"
#include "GetCampaignsResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  CampaignsApiException: public std::exception
{
public:
    CampaignsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace CampaignsApiResources {
/// <summary>
/// Информация о магазине
/// </summary>
/// <remarks>
/// Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdResource: public restbed::Resource
{
public:
    CampaignsCampaignIdResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdResource() = default;

    CampaignsCampaignIdResource(
        const CampaignsCampaignIdResource& other) = default; // copy constructor
    CampaignsCampaignIdResource(CampaignsCampaignIdResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdResource& operator=(const CampaignsCampaignIdResource& other) = default; // copy assignment
    CampaignsCampaignIdResource& operator=(CampaignsCampaignIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignResponse>(
        int64_t & campaignId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetCampaignResponse>
                { throw CampaignsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignResponse> handler_GET(
        int64_t & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCampaignsApiException(const CampaignsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Логины, связанные с магазином
/// </summary>
/// <remarks>
/// Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdLoginsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdLoginsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdLoginsResource() = default;

    CampaignsCampaignIdLoginsResource(
        const CampaignsCampaignIdLoginsResource& other) = default; // copy constructor
    CampaignsCampaignIdLoginsResource(CampaignsCampaignIdLoginsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdLoginsResource& operator=(const CampaignsCampaignIdLoginsResource& other) = default; // copy assignment
    CampaignsCampaignIdLoginsResource& operator=(CampaignsCampaignIdLoginsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignLoginsResponse>(
        int64_t & campaignId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetCampaignLoginsResponse>
                { throw CampaignsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignLoginsResponse> handler_GET(
        int64_t & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCampaignsApiException(const CampaignsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Регион магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdRegionResource: public restbed::Resource
{
public:
    CampaignsCampaignIdRegionResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdRegionResource() = default;

    CampaignsCampaignIdRegionResource(
        const CampaignsCampaignIdRegionResource& other) = default; // copy constructor
    CampaignsCampaignIdRegionResource(CampaignsCampaignIdRegionResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdRegionResource& operator=(const CampaignsCampaignIdRegionResource& other) = default; // copy assignment
    CampaignsCampaignIdRegionResource& operator=(CampaignsCampaignIdRegionResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignRegionResponse>(
        int64_t & campaignId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetCampaignRegionResponse>
                { throw CampaignsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignRegionResponse> handler_GET(
        int64_t & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCampaignsApiException(const CampaignsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Настройки магазина
/// </summary>
/// <remarks>
/// Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdSettingsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdSettingsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdSettingsResource() = default;

    CampaignsCampaignIdSettingsResource(
        const CampaignsCampaignIdSettingsResource& other) = default; // copy constructor
    CampaignsCampaignIdSettingsResource(CampaignsCampaignIdSettingsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdSettingsResource& operator=(const CampaignsCampaignIdSettingsResource& other) = default; // copy assignment
    CampaignsCampaignIdSettingsResource& operator=(CampaignsCampaignIdSettingsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignSettingsResponse>(
        int64_t & campaignId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, GetCampaignSettingsResponse>
                { throw CampaignsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignSettingsResponse> handler_GET(
        int64_t & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCampaignsApiException(const CampaignsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список магазинов пользователя
/// </summary>
/// <remarks>
/// Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  CampaignsResource: public restbed::Resource
{
public:
    CampaignsResource(const std::string& context = "");
    virtual ~CampaignsResource() = default;

    CampaignsResource(
        const CampaignsResource& other) = default; // copy constructor
    CampaignsResource(CampaignsResource&& other) noexcept = default; // move constructor

    CampaignsResource& operator=(const CampaignsResource& other) = default; // copy assignment
    CampaignsResource& operator=(CampaignsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignsResponse>(
        int32_t & page, int32_t & pageSize)> handler_GET_func =
            [](int32_t &, int32_t &) -> std::pair<int, GetCampaignsResponse>
                { throw CampaignsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignsResponse> handler_GET(
        int32_t & page, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCampaignsApiException(const CampaignsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Магазины, доступные логину
/// </summary>
/// <remarks>
/// Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  CampaignsBy_loginLoginResource: public restbed::Resource
{
public:
    CampaignsBy_loginLoginResource(const std::string& context = "");
    virtual ~CampaignsBy_loginLoginResource() = default;

    CampaignsBy_loginLoginResource(
        const CampaignsBy_loginLoginResource& other) = default; // copy constructor
    CampaignsBy_loginLoginResource(CampaignsBy_loginLoginResource&& other) noexcept = default; // move constructor

    CampaignsBy_loginLoginResource& operator=(const CampaignsBy_loginLoginResource& other) = default; // copy assignment
    CampaignsBy_loginLoginResource& operator=(CampaignsBy_loginLoginResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignsResponse>(
        std::string & login, int32_t & page, int32_t & pageSize)> handler_GET_func =
            [](std::string &, int32_t &, int32_t &) -> std::pair<int, GetCampaignsResponse>
                { throw CampaignsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignsResponse> handler_GET(
        std::string & login, int32_t & page, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCampaignsApiException(const CampaignsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace CampaignsApiResources */

using CampaignsApiCampaignsCampaignIdResource [[deprecated]] = CampaignsApiResources::CampaignsCampaignIdResource;
using CampaignsApiCampaignsCampaignIdLoginsResource [[deprecated]] = CampaignsApiResources::CampaignsCampaignIdLoginsResource;
using CampaignsApiCampaignsCampaignIdRegionResource [[deprecated]] = CampaignsApiResources::CampaignsCampaignIdRegionResource;
using CampaignsApiCampaignsCampaignIdSettingsResource [[deprecated]] = CampaignsApiResources::CampaignsCampaignIdSettingsResource;
using CampaignsApiCampaignsResource [[deprecated]] = CampaignsApiResources::CampaignsResource;
using CampaignsApiCampaignsBy_loginLoginResource [[deprecated]] = CampaignsApiResources::CampaignsBy_loginLoginResource;

//
// The restbed service to actually implement the REST server
//
class  CampaignsApi
{
public:
    explicit CampaignsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~CampaignsApi();

    std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdResource> getCampaignsCampaignIdResource();
    std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdLoginsResource> getCampaignsCampaignIdLoginsResource();
    std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdRegionResource> getCampaignsCampaignIdRegionResource();
    std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdSettingsResource> getCampaignsCampaignIdSettingsResource();
    std::shared_ptr<CampaignsApiResources::CampaignsResource> getCampaignsResource();
    std::shared_ptr<CampaignsApiResources::CampaignsBy_loginLoginResource> getCampaignsBy_loginLoginResource();

    void setResource(std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdResource> resource);
    void setResource(std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdLoginsResource> resource);
    void setResource(std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdRegionResource> resource);
    void setResource(std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdSettingsResource> resource);
    void setResource(std::shared_ptr<CampaignsApiResources::CampaignsResource> resource);
    void setResource(std::shared_ptr<CampaignsApiResources::CampaignsBy_loginLoginResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setCampaignsApiCampaignsCampaignIdResource(std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdResource> spCampaignsApiCampaignsCampaignIdResource);
    [[deprecated("use setResource()")]]
    virtual void setCampaignsApiCampaignsCampaignIdLoginsResource(std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdLoginsResource> spCampaignsApiCampaignsCampaignIdLoginsResource);
    [[deprecated("use setResource()")]]
    virtual void setCampaignsApiCampaignsCampaignIdRegionResource(std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdRegionResource> spCampaignsApiCampaignsCampaignIdRegionResource);
    [[deprecated("use setResource()")]]
    virtual void setCampaignsApiCampaignsCampaignIdSettingsResource(std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdSettingsResource> spCampaignsApiCampaignsCampaignIdSettingsResource);
    [[deprecated("use setResource()")]]
    virtual void setCampaignsApiCampaignsResource(std::shared_ptr<CampaignsApiResources::CampaignsResource> spCampaignsApiCampaignsResource);
    [[deprecated("use setResource()")]]
    virtual void setCampaignsApiCampaignsBy_loginLoginResource(std::shared_ptr<CampaignsApiResources::CampaignsBy_loginLoginResource> spCampaignsApiCampaignsBy_loginLoginResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdResource> m_spCampaignsCampaignIdResource;
    std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdLoginsResource> m_spCampaignsCampaignIdLoginsResource;
    std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdRegionResource> m_spCampaignsCampaignIdRegionResource;
    std::shared_ptr<CampaignsApiResources::CampaignsCampaignIdSettingsResource> m_spCampaignsCampaignIdSettingsResource;
    std::shared_ptr<CampaignsApiResources::CampaignsResource> m_spCampaignsResource;
    std::shared_ptr<CampaignsApiResources::CampaignsBy_loginLoginResource> m_spCampaignsBy_loginLoginResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* CampaignsApi_H_ */

