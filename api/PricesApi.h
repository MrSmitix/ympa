/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PricesApi.h
 *
 * 
 */

#ifndef PricesApi_H_
#define PricesApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetPricesByOfferIdsRequest.h"
#include "GetPricesByOfferIdsResponse.h"
#include "GetPricesResponse.h"
#include "SuggestPricesRequest.h"
#include "SuggestPricesResponse.h"
#include "UpdateBusinessPricesRequest.h"
#include "UpdatePricesRequest.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  PricesApiException: public std::exception
{
public:
    PricesApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace PricesApiResources {
/// <summary>
/// Список цен
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** &#x60;&#x60;&#x60;(количество товаров партнера на витрине) * 25&#x60;&#x60;&#x60; товаров в сутки| |-| 
/// </remarks>
class  CampaignsCampaignIdOffer_pricesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_pricesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_pricesResource() = default;

    CampaignsCampaignIdOffer_pricesResource(
        const CampaignsCampaignIdOffer_pricesResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_pricesResource(CampaignsCampaignIdOffer_pricesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_pricesResource& operator=(const CampaignsCampaignIdOffer_pricesResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_pricesResource& operator=(CampaignsCampaignIdOffer_pricesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetPricesResponse>(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, bool & archived)> handler_GET_func =
            [](int64_t &, std::string &, int32_t &, bool &) -> std::pair<int, GetPricesResponse>
                { throw PricesApiException(501, "Not implemented"); };

    std::function<std::pair<int, GetPricesByOfferIdsResponse>(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, GetPricesByOfferIdsRequest & getPricesByOfferIdsRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetPricesByOfferIdsRequest &) -> std::pair<int, GetPricesByOfferIdsResponse>
                { throw PricesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetPricesResponse> handler_GET(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, bool & archived);

    virtual std::pair<int, GetPricesByOfferIdsResponse> handler_POST(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, GetPricesByOfferIdsRequest & getPricesByOfferIdsRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePricesApiException(const PricesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Цены для продвижения товаров
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \&quot;\&quot; %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOffer_pricesSuggestionsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_pricesSuggestionsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_pricesSuggestionsResource() = default;

    CampaignsCampaignIdOffer_pricesSuggestionsResource(
        const CampaignsCampaignIdOffer_pricesSuggestionsResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_pricesSuggestionsResource(CampaignsCampaignIdOffer_pricesSuggestionsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_pricesSuggestionsResource& operator=(const CampaignsCampaignIdOffer_pricesSuggestionsResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_pricesSuggestionsResource& operator=(CampaignsCampaignIdOffer_pricesSuggestionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, SuggestPricesResponse>(
        int64_t & campaignId, SuggestPricesRequest & suggestPricesRequest)> handler_POST_func =
            [](int64_t &, SuggestPricesRequest &) -> std::pair<int, SuggestPricesResponse>
                { throw PricesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, SuggestPricesResponse> handler_POST(
        int64_t & campaignId, SuggestPricesRequest & suggestPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePricesApiException(const PricesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Установка цен на товары во всех магазинах
/// </summary>
/// <remarks>
/// Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_pricesUpdatesResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_pricesUpdatesResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_pricesUpdatesResource() = default;

    BusinessesBusinessIdOffer_pricesUpdatesResource(
        const BusinessesBusinessIdOffer_pricesUpdatesResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_pricesUpdatesResource(BusinessesBusinessIdOffer_pricesUpdatesResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_pricesUpdatesResource& operator=(const BusinessesBusinessIdOffer_pricesUpdatesResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_pricesUpdatesResource& operator=(BusinessesBusinessIdOffer_pricesUpdatesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, UpdateBusinessPricesRequest & updateBusinessPricesRequest)> handler_POST_func =
            [](int64_t &, UpdateBusinessPricesRequest &) -> std::pair<int, EmptyApiResponse>
                { throw PricesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, UpdateBusinessPricesRequest & updateBusinessPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePricesApiException(const PricesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Установка цен на товары в конкретном магазине
/// </summary>
/// <remarks>
/// Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \&quot;Метод только для отдельных магазинов\&quot; %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdOffer_pricesUpdatesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_pricesUpdatesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_pricesUpdatesResource() = default;

    CampaignsCampaignIdOffer_pricesUpdatesResource(
        const CampaignsCampaignIdOffer_pricesUpdatesResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_pricesUpdatesResource(CampaignsCampaignIdOffer_pricesUpdatesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_pricesUpdatesResource& operator=(const CampaignsCampaignIdOffer_pricesUpdatesResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_pricesUpdatesResource& operator=(CampaignsCampaignIdOffer_pricesUpdatesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, UpdatePricesRequest & updatePricesRequest)> handler_POST_func =
            [](int64_t &, UpdatePricesRequest &) -> std::pair<int, EmptyApiResponse>
                { throw PricesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, UpdatePricesRequest & updatePricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePricesApiException(const PricesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace PricesApiResources */

using PricesApiCampaignsCampaignIdOffer_pricesResource [[deprecated]] = PricesApiResources::CampaignsCampaignIdOffer_pricesResource;
using PricesApiCampaignsCampaignIdOffer_pricesSuggestionsResource [[deprecated]] = PricesApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource;
using PricesApiBusinessesBusinessIdOffer_pricesUpdatesResource [[deprecated]] = PricesApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource;
using PricesApiCampaignsCampaignIdOffer_pricesUpdatesResource [[deprecated]] = PricesApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource;

//
// The restbed service to actually implement the REST server
//
class  PricesApi
{
public:
    explicit PricesApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~PricesApi();

    std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesResource> getCampaignsCampaignIdOffer_pricesResource();
    std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource> getCampaignsCampaignIdOffer_pricesSuggestionsResource();
    std::shared_ptr<PricesApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource> getBusinessesBusinessIdOffer_pricesUpdatesResource();
    std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource> getCampaignsCampaignIdOffer_pricesUpdatesResource();

    void setResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesResource> resource);
    void setResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource> resource);
    void setResource(std::shared_ptr<PricesApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource> resource);
    void setResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setPricesApiCampaignsCampaignIdOffer_pricesResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesResource> spPricesApiCampaignsCampaignIdOffer_pricesResource);
    [[deprecated("use setResource()")]]
    virtual void setPricesApiCampaignsCampaignIdOffer_pricesSuggestionsResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource> spPricesApiCampaignsCampaignIdOffer_pricesSuggestionsResource);
    [[deprecated("use setResource()")]]
    virtual void setPricesApiBusinessesBusinessIdOffer_pricesUpdatesResource(std::shared_ptr<PricesApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource> spPricesApiBusinessesBusinessIdOffer_pricesUpdatesResource);
    [[deprecated("use setResource()")]]
    virtual void setPricesApiCampaignsCampaignIdOffer_pricesUpdatesResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource> spPricesApiCampaignsCampaignIdOffer_pricesUpdatesResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesResource> m_spCampaignsCampaignIdOffer_pricesResource;
    std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource> m_spCampaignsCampaignIdOffer_pricesSuggestionsResource;
    std::shared_ptr<PricesApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource> m_spBusinessesBusinessIdOffer_pricesUpdatesResource;
    std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource> m_spCampaignsCampaignIdOffer_pricesUpdatesResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* PricesApi_H_ */

