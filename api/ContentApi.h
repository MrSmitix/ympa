/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ContentApi.h
 *
 * 
 */

#ifndef ContentApi_H_
#define ContentApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GetCategoryContentParametersResponse.h"
#include "GetOfferCardsContentStatusRequest.h"
#include "GetOfferCardsContentStatusResponse.h"
#include "UpdateOfferContentRequest.h"
#include "UpdateOfferContentResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ContentApiException: public std::exception
{
public:
    ContentApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace ContentApiResources {
/// <summary>
/// Списки характеристик товаров по категориям
/// </summary>
/// <remarks>
/// Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
/// </remarks>
class  CategoryCategoryIdParametersResource: public restbed::Resource
{
public:
    CategoryCategoryIdParametersResource(const std::string& context = "");
    virtual ~CategoryCategoryIdParametersResource() = default;

    CategoryCategoryIdParametersResource(
        const CategoryCategoryIdParametersResource& other) = default; // copy constructor
    CategoryCategoryIdParametersResource(CategoryCategoryIdParametersResource&& other) noexcept = default; // move constructor

    CategoryCategoryIdParametersResource& operator=(const CategoryCategoryIdParametersResource& other) = default; // copy assignment
    CategoryCategoryIdParametersResource& operator=(CategoryCategoryIdParametersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCategoryContentParametersResponse>(
        int64_t & categoryId)> handler_POST_func =
            [](int64_t &) -> std::pair<int, GetCategoryContentParametersResponse>
                { throw ContentApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCategoryContentParametersResponse> handler_POST(
        int64_t & categoryId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleContentApiException(const ContentApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение информации о заполненности карточек магазина
/// </summary>
/// <remarks>
/// Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_cardsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_cardsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_cardsResource() = default;

    BusinessesBusinessIdOffer_cardsResource(
        const BusinessesBusinessIdOffer_cardsResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_cardsResource(BusinessesBusinessIdOffer_cardsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_cardsResource& operator=(const BusinessesBusinessIdOffer_cardsResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_cardsResource& operator=(BusinessesBusinessIdOffer_cardsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOfferCardsContentStatusResponse>(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetOfferCardsContentStatusRequest & getOfferCardsContentStatusRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetOfferCardsContentStatusRequest &) -> std::pair<int, GetOfferCardsContentStatusResponse>
                { throw ContentApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOfferCardsContentStatusResponse> handler_POST(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetOfferCardsContentStatusRequest & getOfferCardsContentStatusRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleContentApiException(const ContentApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Редактирование категорийных характеристик товара
/// </summary>
/// <remarks>
/// Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \&quot;Здесь только то, что относится к конкретной категории\&quot; %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_cardsUpdateResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_cardsUpdateResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_cardsUpdateResource() = default;

    BusinessesBusinessIdOffer_cardsUpdateResource(
        const BusinessesBusinessIdOffer_cardsUpdateResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_cardsUpdateResource(BusinessesBusinessIdOffer_cardsUpdateResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_cardsUpdateResource& operator=(const BusinessesBusinessIdOffer_cardsUpdateResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_cardsUpdateResource& operator=(BusinessesBusinessIdOffer_cardsUpdateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdateOfferContentResponse>(
        int64_t & businessId, UpdateOfferContentRequest & updateOfferContentRequest)> handler_POST_func =
            [](int64_t &, UpdateOfferContentRequest &) -> std::pair<int, UpdateOfferContentResponse>
                { throw ContentApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdateOfferContentResponse> handler_POST(
        int64_t & businessId, UpdateOfferContentRequest & updateOfferContentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleContentApiException(const ContentApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace ContentApiResources */

using ContentApiCategoryCategoryIdParametersResource [[deprecated]] = ContentApiResources::CategoryCategoryIdParametersResource;
using ContentApiBusinessesBusinessIdOffer_cardsResource [[deprecated]] = ContentApiResources::BusinessesBusinessIdOffer_cardsResource;
using ContentApiBusinessesBusinessIdOffer_cardsUpdateResource [[deprecated]] = ContentApiResources::BusinessesBusinessIdOffer_cardsUpdateResource;

//
// The restbed service to actually implement the REST server
//
class  ContentApi
{
public:
    explicit ContentApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ContentApi();

    std::shared_ptr<ContentApiResources::CategoryCategoryIdParametersResource> getCategoryCategoryIdParametersResource();
    std::shared_ptr<ContentApiResources::BusinessesBusinessIdOffer_cardsResource> getBusinessesBusinessIdOffer_cardsResource();
    std::shared_ptr<ContentApiResources::BusinessesBusinessIdOffer_cardsUpdateResource> getBusinessesBusinessIdOffer_cardsUpdateResource();

    void setResource(std::shared_ptr<ContentApiResources::CategoryCategoryIdParametersResource> resource);
    void setResource(std::shared_ptr<ContentApiResources::BusinessesBusinessIdOffer_cardsResource> resource);
    void setResource(std::shared_ptr<ContentApiResources::BusinessesBusinessIdOffer_cardsUpdateResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setContentApiCategoryCategoryIdParametersResource(std::shared_ptr<ContentApiResources::CategoryCategoryIdParametersResource> spContentApiCategoryCategoryIdParametersResource);
    [[deprecated("use setResource()")]]
    virtual void setContentApiBusinessesBusinessIdOffer_cardsResource(std::shared_ptr<ContentApiResources::BusinessesBusinessIdOffer_cardsResource> spContentApiBusinessesBusinessIdOffer_cardsResource);
    [[deprecated("use setResource()")]]
    virtual void setContentApiBusinessesBusinessIdOffer_cardsUpdateResource(std::shared_ptr<ContentApiResources::BusinessesBusinessIdOffer_cardsUpdateResource> spContentApiBusinessesBusinessIdOffer_cardsUpdateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ContentApiResources::CategoryCategoryIdParametersResource> m_spCategoryCategoryIdParametersResource;
    std::shared_ptr<ContentApiResources::BusinessesBusinessIdOffer_cardsResource> m_spBusinessesBusinessIdOffer_cardsResource;
    std::shared_ptr<ContentApiResources::BusinessesBusinessIdOffer_cardsUpdateResource> m_spBusinessesBusinessIdOffer_cardsUpdateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ContentApi_H_ */

