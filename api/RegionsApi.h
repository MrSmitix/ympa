/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RegionsApi.h
 *
 * 
 */

#ifndef RegionsApi_H_
#define RegionsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GetRegionWithChildrenResponse.h"
#include "GetRegionsResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  RegionsApiException: public std::exception
{
public:
    RegionsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Информация о дочерних регионах
/// </summary>
/// <remarks>
/// Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  RegionsApiRegionsRegionIdChildrenResource: public restbed::Resource
{
public:
    RegionsApiRegionsRegionIdChildrenResource(const std::string& context = "");
    virtual ~RegionsApiRegionsRegionIdChildrenResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetRegionWithChildrenResponse>> handler_GET(
        int64_t const & regionId, int32_t const & page, int32_t const & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_regionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("regionId", 0L);
    }

    virtual int32_t getQueryParam_page(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }



    virtual std::pair<int, std::string> handleRegionsApiException(const RegionsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о регионе
/// </summary>
/// <remarks>
/// Возвращает информацию о регионе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  RegionsApiRegionsRegionIdResource: public restbed::Resource
{
public:
    RegionsApiRegionsRegionIdResource(const std::string& context = "");
    virtual ~RegionsApiRegionsRegionIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetRegionsResponse>> handler_GET(
        int64_t const & regionId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_regionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("regionId", 0L);
    }



    virtual std::pair<int, std::string> handleRegionsApiException(const RegionsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Поиск регионов по их имени
/// </summary>
/// <remarks>
/// Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  RegionsApiRegionsResource: public restbed::Resource
{
public:
    RegionsApiRegionsResource(const std::string& context = "");
    virtual ~RegionsApiRegionsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetRegionsResponse>> handler_GET(
        std::string const & name, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getQueryParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("name", "");
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleRegionsApiException(const RegionsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  RegionsApi
{
public:
    explicit RegionsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~RegionsApi();

    virtual void setRegionsApiRegionsRegionIdChildrenResource(std::shared_ptr<RegionsApiRegionsRegionIdChildrenResource> spRegionsApiRegionsRegionIdChildrenResource);
    virtual void setRegionsApiRegionsRegionIdResource(std::shared_ptr<RegionsApiRegionsRegionIdResource> spRegionsApiRegionsRegionIdResource);
    virtual void setRegionsApiRegionsResource(std::shared_ptr<RegionsApiRegionsResource> spRegionsApiRegionsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<RegionsApiRegionsRegionIdChildrenResource> m_spRegionsApiRegionsRegionIdChildrenResource;
    std::shared_ptr<RegionsApiRegionsRegionIdResource> m_spRegionsApiRegionsRegionIdResource;
    std::shared_ptr<RegionsApiRegionsResource> m_spRegionsApiRegionsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* RegionsApi_H_ */

