/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { GetRegionWithChildrenResponse } from '../model/getRegionWithChildrenResponse';
import { GetRegionsResponse } from '../model/getRegionsResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class RegionsService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Информация о дочерних регионах
     * Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * @param regionId Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
     * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. 
     * @param pageSize Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. 
     
     */
    public searchRegionChildren(regionId: number, page?: number, pageSize?: number, observe?: 'body', headers?: Headers): Observable<GetRegionWithChildrenResponse>;
    public searchRegionChildren(regionId: number, page?: number, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetRegionWithChildrenResponse>>;
    public searchRegionChildren(regionId: number, page?: number, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (regionId === null || regionId === undefined){
            throw new Error('Required parameter regionId was null or undefined when calling searchRegionChildren.');
        }

        let queryParameters: string[] = [];
        if (page !== undefined) {
            queryParameters.push('page='+encodeURIComponent(String(page)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetRegionWithChildrenResponse>> = this.httpClient.get(`${this.basePath}/regions/${encodeURIComponent(String(regionId))}/children?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetRegionWithChildrenResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Информация о регионе
     * Возвращает информацию о регионе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * @param regionId Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
     
     */
    public searchRegionsById(regionId: number, observe?: 'body', headers?: Headers): Observable<GetRegionsResponse>;
    public searchRegionsById(regionId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetRegionsResponse>>;
    public searchRegionsById(regionId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (regionId === null || regionId === undefined){
            throw new Error('Required parameter regionId was null or undefined when calling searchRegionsById.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetRegionsResponse>> = this.httpClient.get(`${this.basePath}/regions/${encodeURIComponent(String(regionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetRegionsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Поиск регионов по их имени
     * Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * @param name Название региона.  Важно учитывать регистр: первая буква должна быть заглавной, остальные — строчными. Например, &#x60;Москва&#x60;. 
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
     * @param limit Количество значений на одной странице. 
     
     */
    public searchRegionsByName(name: string, pageToken?: string, limit?: number, observe?: 'body', headers?: Headers): Observable<GetRegionsResponse>;
    public searchRegionsByName(name: string, pageToken?: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetRegionsResponse>>;
    public searchRegionsByName(name: string, pageToken?: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (name === null || name === undefined){
            throw new Error('Required parameter name was null or undefined when calling searchRegionsByName.');
        }

        let queryParameters: string[] = [];
        if (name !== undefined) {
            queryParameters.push('name='+encodeURIComponent(String(name)));
        }
        if (pageToken !== undefined) {
            queryParameters.push('pageToken='+encodeURIComponent(String(pageToken)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetRegionsResponse>> = this.httpClient.get(`${this.basePath}/regions?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetRegionsResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
