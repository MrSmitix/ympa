/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HiddenOffersApi.h
 *
 * 
 */

#ifndef HiddenOffersApi_H_
#define HiddenOffersApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AddHiddenOffersRequest.h"
#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "DeleteHiddenOffersRequest.h"
#include "EmptyApiResponse.h"
#include "GetHiddenOffersResponse.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  HiddenOffersApiException: public std::exception
{
public:
    HiddenOffersApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Скрытие товаров и настройки скрытия
/// </summary>
/// <remarks>
/// Скрывает товары магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  HiddenOffersApiCampaignsCampaignIdHidden-offersResource: public restbed::Resource
{
public:
    HiddenOffersApiCampaignsCampaignIdHidden-offersResource(const std::string& context = "");
    virtual ~HiddenOffersApiCampaignsCampaignIdHidden-offersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<AddHiddenOffersRequest> const & addHiddenOffersRequest);

    virtual std::pair<int, std::shared_ptr<GetHiddenOffersResponse>> handler_GET(
        int64_t const & campaignId, std::vector<std::shared_ptr<std::string>> const & offerId, std::string const & pageToken, int32_t const & limit, int32_t const & offset, int32_t const & page, int32_t const & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }


    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }
    virtual std::string getQueryParam_pageToken_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }
    virtual int32_t getQueryParam_limit_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }
    virtual int32_t getQueryParam_offset_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("offset", 0);
    }
    virtual int32_t getQueryParam_page_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }
    virtual int32_t getQueryParam_pageSize_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }

    virtual std::pair<int, std::string> handleHiddenOffersApiException(const HiddenOffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Возобновление показа товаров
/// </summary>
/// <remarks>
/// Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  HiddenOffersApiCampaignsCampaignIdHidden-offersDeleteResource: public restbed::Resource
{
public:
    HiddenOffersApiCampaignsCampaignIdHidden-offersDeleteResource(const std::string& context = "");
    virtual ~HiddenOffersApiCampaignsCampaignIdHidden-offersDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<DeleteHiddenOffersRequest> const & deleteHiddenOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleHiddenOffersApiException(const HiddenOffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  HiddenOffersApi
{
public:
    explicit HiddenOffersApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~HiddenOffersApi();

    virtual void setHiddenOffersApiCampaignsCampaignIdHidden-offersResource(std::shared_ptr<HiddenOffersApiCampaignsCampaignIdHidden-offersResource> spHiddenOffersApiCampaignsCampaignIdHidden-offersResource);
    virtual void setHiddenOffersApiCampaignsCampaignIdHidden-offersDeleteResource(std::shared_ptr<HiddenOffersApiCampaignsCampaignIdHidden-offersDeleteResource> spHiddenOffersApiCampaignsCampaignIdHidden-offersDeleteResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<HiddenOffersApiCampaignsCampaignIdHidden-offersResource> m_spHiddenOffersApiCampaignsCampaignIdHidden-offersResource;
    std::shared_ptr<HiddenOffersApiCampaignsCampaignIdHidden-offersDeleteResource> m_spHiddenOffersApiCampaignsCampaignIdHidden-offersDeleteResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* HiddenOffersApi_H_ */

