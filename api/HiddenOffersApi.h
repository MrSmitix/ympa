/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HiddenOffersApi.h
 *
 * 
 */

#ifndef HiddenOffersApi_H_
#define HiddenOffersApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AddHiddenOffersRequest.h"
#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "DeleteHiddenOffersRequest.h"
#include "EmptyApiResponse.h"
#include "GetHiddenOffersResponse.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  HiddenOffersApiException: public std::exception
{
public:
    HiddenOffersApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace HiddenOffersApiResources {
/// <summary>
/// Скрытие товаров и настройки скрытия
/// </summary>
/// <remarks>
/// Скрывает товары магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdHidden_offersResource: public restbed::Resource
{
public:
    CampaignsCampaignIdHidden_offersResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdHidden_offersResource() = default;

    CampaignsCampaignIdHidden_offersResource(
        const CampaignsCampaignIdHidden_offersResource& other) = default; // copy constructor
    CampaignsCampaignIdHidden_offersResource(CampaignsCampaignIdHidden_offersResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdHidden_offersResource& operator=(const CampaignsCampaignIdHidden_offersResource& other) = default; // copy assignment
    CampaignsCampaignIdHidden_offersResource& operator=(CampaignsCampaignIdHidden_offersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, AddHiddenOffersRequest & addHiddenOffersRequest)> handler_POST_func =
            [](int64_t &, AddHiddenOffersRequest &) -> std::pair<int, EmptyApiResponse>
                { throw HiddenOffersApiException(501, "Not implemented"); };

    std::function<std::pair<int, GetHiddenOffersResponse>(
        int64_t & campaignId, std::vector<std::string> & offerId, std::string & pageToken, int32_t & limit, int32_t & offset, int32_t & page, int32_t & pageSize)> handler_GET_func =
            [](int64_t &, std::vector<std::string> &, std::string &, int32_t &, int32_t &, int32_t &, int32_t &) -> std::pair<int, GetHiddenOffersResponse>
                { throw HiddenOffersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, AddHiddenOffersRequest & addHiddenOffersRequest);

    virtual std::pair<int, GetHiddenOffersResponse> handler_GET(
        int64_t & campaignId, std::vector<std::string> & offerId, std::string & pageToken, int32_t & limit, int32_t & offset, int32_t & page, int32_t & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleHiddenOffersApiException(const HiddenOffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Возобновление показа товаров
/// </summary>
/// <remarks>
/// Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdHidden_offersDeleteResource: public restbed::Resource
{
public:
    CampaignsCampaignIdHidden_offersDeleteResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdHidden_offersDeleteResource() = default;

    CampaignsCampaignIdHidden_offersDeleteResource(
        const CampaignsCampaignIdHidden_offersDeleteResource& other) = default; // copy constructor
    CampaignsCampaignIdHidden_offersDeleteResource(CampaignsCampaignIdHidden_offersDeleteResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdHidden_offersDeleteResource& operator=(const CampaignsCampaignIdHidden_offersDeleteResource& other) = default; // copy assignment
    CampaignsCampaignIdHidden_offersDeleteResource& operator=(CampaignsCampaignIdHidden_offersDeleteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, DeleteHiddenOffersRequest & deleteHiddenOffersRequest)> handler_POST_func =
            [](int64_t &, DeleteHiddenOffersRequest &) -> std::pair<int, EmptyApiResponse>
                { throw HiddenOffersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, DeleteHiddenOffersRequest & deleteHiddenOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleHiddenOffersApiException(const HiddenOffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace HiddenOffersApiResources */

using HiddenOffersApiCampaignsCampaignIdHidden_offersResource [[deprecated]] = HiddenOffersApiResources::CampaignsCampaignIdHidden_offersResource;
using HiddenOffersApiCampaignsCampaignIdHidden_offersDeleteResource [[deprecated]] = HiddenOffersApiResources::CampaignsCampaignIdHidden_offersDeleteResource;

//
// The restbed service to actually implement the REST server
//
class  HiddenOffersApi
{
public:
    explicit HiddenOffersApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~HiddenOffersApi();

    std::shared_ptr<HiddenOffersApiResources::CampaignsCampaignIdHidden_offersResource> getCampaignsCampaignIdHidden_offersResource();
    std::shared_ptr<HiddenOffersApiResources::CampaignsCampaignIdHidden_offersDeleteResource> getCampaignsCampaignIdHidden_offersDeleteResource();

    void setResource(std::shared_ptr<HiddenOffersApiResources::CampaignsCampaignIdHidden_offersResource> resource);
    void setResource(std::shared_ptr<HiddenOffersApiResources::CampaignsCampaignIdHidden_offersDeleteResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setHiddenOffersApiCampaignsCampaignIdHidden_offersResource(std::shared_ptr<HiddenOffersApiResources::CampaignsCampaignIdHidden_offersResource> spHiddenOffersApiCampaignsCampaignIdHidden_offersResource);
    [[deprecated("use setResource()")]]
    virtual void setHiddenOffersApiCampaignsCampaignIdHidden_offersDeleteResource(std::shared_ptr<HiddenOffersApiResources::CampaignsCampaignIdHidden_offersDeleteResource> spHiddenOffersApiCampaignsCampaignIdHidden_offersDeleteResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<HiddenOffersApiResources::CampaignsCampaignIdHidden_offersResource> m_spCampaignsCampaignIdHidden_offersResource;
    std::shared_ptr<HiddenOffersApiResources::CampaignsCampaignIdHidden_offersDeleteResource> m_spCampaignsCampaignIdHidden_offersDeleteResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* HiddenOffersApi_H_ */

