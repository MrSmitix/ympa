/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderDeliveryApi.h
 *
 * 
 */

#ifndef OrderDeliveryApi_H_
#define OrderDeliveryApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetOrderBuyerInfoResponse.h"
#include "SetOrderDeliveryDateRequest.h"
#include "SetOrderDeliveryTrackCodeRequest.h"
#include "UpdateOrderStorageLimitRequest.h"
#include "VerifyOrderEacRequest.h"
#include "VerifyOrderEacResponse.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OrderDeliveryApiException: public std::exception
{
public:
    OrderDeliveryApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace OrderDeliveryApiResources {
/// <summary>
/// Информация о покупателе — физическом лице
/// </summary>
/// <remarks>
/// Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdBuyerResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdBuyerResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdBuyerResource() = default;

    CampaignsCampaignIdOrdersOrderIdBuyerResource(
        const CampaignsCampaignIdOrdersOrderIdBuyerResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdBuyerResource(CampaignsCampaignIdOrdersOrderIdBuyerResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdBuyerResource& operator=(const CampaignsCampaignIdOrdersOrderIdBuyerResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdBuyerResource& operator=(CampaignsCampaignIdOrdersOrderIdBuyerResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOrderBuyerInfoResponse>(
        int64_t & campaignId, int64_t & orderId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetOrderBuyerInfoResponse>
                { throw OrderDeliveryApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOrderBuyerInfoResponse> handler_GET(
        int64_t & campaignId, int64_t & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrderDeliveryApiException(const OrderDeliveryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Изменение даты доставки заказа
/// </summary>
/// <remarks>
/// Метод изменяет дату доставки заказа в статусе &#x60;PROCESSING&#x60; или &#x60;DELIVERY&#x60;. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryDateResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryDateResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryDateResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryDateResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryDateResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryDateResource(CampaignsCampaignIdOrdersOrderIdDeliveryDateResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryDateResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryDateResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryDateResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryDateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, SetOrderDeliveryDateRequest & setOrderDeliveryDateRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, SetOrderDeliveryDateRequest &) -> std::pair<int, EmptyApiResponse>
                { throw OrderDeliveryApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, SetOrderDeliveryDateRequest & setOrderDeliveryDateRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrderDeliveryApiException(const OrderDeliveryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Передача трек‑номера посылки
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, SetOrderDeliveryTrackCodeRequest & setOrderDeliveryTrackCodeRequest)> handler_POST_func =
            [](int64_t &, int64_t &, SetOrderDeliveryTrackCodeRequest &) -> std::pair<int, EmptyApiResponse>
                { throw OrderDeliveryApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & orderId, SetOrderDeliveryTrackCodeRequest & setOrderDeliveryTrackCodeRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrderDeliveryApiException(const OrderDeliveryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Продление срока хранения заказа
/// </summary>
/// <remarks>
/// Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе &#x60;PICKUP&#x60;. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре &#x60;outletStorageLimitDate&#x60; запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource(CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, UpdateOrderStorageLimitRequest & updateOrderStorageLimitRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, UpdateOrderStorageLimitRequest &) -> std::pair<int, EmptyApiResponse>
                { throw OrderDeliveryApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, UpdateOrderStorageLimitRequest & updateOrderStorageLimitRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrderDeliveryApiException(const OrderDeliveryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Передача кода подтверждения
/// </summary>
/// <remarks>
/// Отправляет Маркету код подтверждения для его проверки.  Код подтверждает передачу заказа или невыкупа:  * курьеру — курьер должен назвать магазину код; * магазину — магазин называет код курьеру.  Если магазин получает невыкупленный заказ, то ему нужно назвать курьеру код из кабинета или приложения.  Если у магазина настроена работа с кодами подтверждения, в запросах [POST order/status](../../pushapi/reference/postOrderStatus.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) в параметре &#x60;delivery&#x60;, вложенном в &#x60;order&#x60; будет возвращаться параметр &#x60;eacType&#x60; с типом &#x60;Enum&#x60; — тип кода подтверждения для передачи заказа.  Возможные значения: &#x60;MERCHANT_TO_COURIER&#x60; — магазин называет код курьеру, &#x60;COURIER_TO_MERCHANT&#x60; — курьер называет код магазину.  Параметр &#x60;eacType&#x60; возвращается при статусах заказа &#x60;COURIER_FOUND&#x60;, &#x60;COURIER_ARRIVED_TO_SENDER&#x60; и &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60;. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdVerifyEacResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdVerifyEacResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdVerifyEacResource() = default;

    CampaignsCampaignIdOrdersOrderIdVerifyEacResource(
        const CampaignsCampaignIdOrdersOrderIdVerifyEacResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdVerifyEacResource(CampaignsCampaignIdOrdersOrderIdVerifyEacResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdVerifyEacResource& operator=(const CampaignsCampaignIdOrdersOrderIdVerifyEacResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdVerifyEacResource& operator=(CampaignsCampaignIdOrdersOrderIdVerifyEacResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, VerifyOrderEacResponse>(
        int64_t & campaignId, int64_t & orderId, VerifyOrderEacRequest & verifyOrderEacRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, VerifyOrderEacRequest &) -> std::pair<int, VerifyOrderEacResponse>
                { throw OrderDeliveryApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, VerifyOrderEacResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, VerifyOrderEacRequest & verifyOrderEacRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrderDeliveryApiException(const OrderDeliveryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace OrderDeliveryApiResources */

using OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource [[deprecated]] = OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdBuyerResource;
using OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource [[deprecated]] = OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryDateResource;
using OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource [[deprecated]] = OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource;
using OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource [[deprecated]] = OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource;
using OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource [[deprecated]] = OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdVerifyEacResource;

//
// The restbed service to actually implement the REST server
//
class  OrderDeliveryApi
{
public:
    explicit OrderDeliveryApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OrderDeliveryApi();

    std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdBuyerResource> getCampaignsCampaignIdOrdersOrderIdBuyerResource();
    std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryDateResource> getCampaignsCampaignIdOrdersOrderIdDeliveryDateResource();
    std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> getCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource();
    std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource> getCampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource();
    std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdVerifyEacResource> getCampaignsCampaignIdOrdersOrderIdVerifyEacResource();

    void setResource(std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdBuyerResource> resource);
    void setResource(std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryDateResource> resource);
    void setResource(std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> resource);
    void setResource(std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource> resource);
    void setResource(std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdVerifyEacResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource(std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdBuyerResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource);
    [[deprecated("use setResource()")]]
    virtual void setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource(std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryDateResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource);
    [[deprecated("use setResource()")]]
    virtual void setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource);
    [[deprecated("use setResource()")]]
    virtual void setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource(std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource);
    [[deprecated("use setResource()")]]
    virtual void setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource(std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdVerifyEacResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdBuyerResource> m_spCampaignsCampaignIdOrdersOrderIdBuyerResource;
    std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryDateResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryDateResource;
    std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource;
    std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryStorage_limitResource;
    std::shared_ptr<OrderDeliveryApiResources::CampaignsCampaignIdOrdersOrderIdVerifyEacResource> m_spCampaignsCampaignIdOrdersOrderIdVerifyEacResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OrderDeliveryApi_H_ */

