/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderDeliveryApi.h
 *
 * 
 */

#ifndef OrderDeliveryApi_H_
#define OrderDeliveryApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetOrderBuyerInfoResponse.h"
#include "SetOrderDeliveryDateRequest.h"
#include "SetOrderDeliveryTrackCodeRequest.h"
#include "UpdateOrderStorageLimitRequest.h"
#include "VerifyOrderEacRequest.h"
#include "VerifyOrderEacResponse.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OrderDeliveryApiException: public std::exception
{
public:
    OrderDeliveryApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Информация о покупателе — физическом лице
/// </summary>
/// <remarks>
/// Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
/// </remarks>
class  OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource: public restbed::Resource
{
public:
    OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource(const std::string& context = "");
    virtual ~OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOrderBuyerInfoResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleOrderDeliveryApiException(const OrderDeliveryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Изменение даты доставки заказа
/// </summary>
/// <remarks>
/// Метод изменяет дату доставки заказа в статусе &#x60;PROCESSING&#x60; или &#x60;DELIVERY&#x60;. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource: public restbed::Resource
{
public:
    OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource(const std::string& context = "");
    virtual ~OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<SetOrderDeliveryDateRequest> const & setOrderDeliveryDateRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleOrderDeliveryApiException(const OrderDeliveryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Передача трек‑номера посылки
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource: public restbed::Resource
{
public:
    OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(const std::string& context = "");
    virtual ~OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<SetOrderDeliveryTrackCodeRequest> const & setOrderDeliveryTrackCodeRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleOrderDeliveryApiException(const OrderDeliveryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Продление срока хранения заказа
/// </summary>
/// <remarks>
/// Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе &#x60;PICKUP&#x60;. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре &#x60;outletStorageLimitDate&#x60; запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource: public restbed::Resource
{
public:
    OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource(const std::string& context = "");
    virtual ~OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<UpdateOrderStorageLimitRequest> const & updateOrderStorageLimitRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleOrderDeliveryApiException(const OrderDeliveryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Передача кода подтверждения
/// </summary>
/// <remarks>
/// Отправляет Маркету код подтверждения для его проверки.  Код подтверждает передачу заказа или невыкупа:  * курьеру — курьер должен назвать магазину код; * магазину — магазин называет код курьеру.  Если магазин получает невыкупленный заказ, то ему нужно назвать курьеру код из кабинета или приложения.  Если у магазина настроена работа с кодами подтверждения, в запросах [POST order/status](../../pushapi/reference/postOrderStatus.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) в параметре &#x60;delivery&#x60;, вложенном в &#x60;order&#x60; будет возвращаться параметр &#x60;eacType&#x60; с типом &#x60;Enum&#x60; — тип кода подтверждения для передачи заказа.  Возможные значения: &#x60;MERCHANT_TO_COURIER&#x60; — магазин называет код курьеру, &#x60;COURIER_TO_MERCHANT&#x60; — курьер называет код магазину.  Параметр &#x60;eacType&#x60; возвращается при статусах заказа &#x60;COURIER_FOUND&#x60;, &#x60;COURIER_ARRIVED_TO_SENDER&#x60; и &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60;. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource: public restbed::Resource
{
public:
    OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource(const std::string& context = "");
    virtual ~OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<VerifyOrderEacResponse>> handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<VerifyOrderEacRequest> const & verifyOrderEacRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleOrderDeliveryApiException(const OrderDeliveryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  OrderDeliveryApi
{
public:
    explicit OrderDeliveryApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OrderDeliveryApi();

    virtual void setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource(std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource);
    virtual void setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource(std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource);
    virtual void setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource);
    virtual void setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource(std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource);
    virtual void setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource(std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource> m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource;
    std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource> m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource;
    std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource;
    std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource> m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource;
    std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource> m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OrderDeliveryApi_H_ */

