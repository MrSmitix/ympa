/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "OfferMappingsApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string OfferMappingsApi::base = "";

OfferMappingsApi::OfferMappingsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void OfferMappingsApi::init() {
    setupRoutes();
}

void OfferMappingsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/campaigns/:campaignId/offer-mapping-entries", Routes::bind(&OfferMappingsApi::get_offer_mapping_entries_handler, this));
    Routes::Post(*router, base + "/campaigns/:campaignId/offer-mapping-entries/suggestions", Routes::bind(&OfferMappingsApi::get_suggested_offer_mapping_entries_handler, this));
    Routes::Post(*router, base + "/campaigns/:campaignId/offer-mapping-entries/updates", Routes::bind(&OfferMappingsApi::update_offer_mapping_entries_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&OfferMappingsApi::offer_mappings_api_default_handler, this));
}

void OfferMappingsApi::handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleParsingException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> OfferMappingsApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

void OfferMappingsApi::handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleOperationException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> OfferMappingsApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void OfferMappingsApi::get_offer_mapping_entries_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    
    // Getting the query params
    auto offerIdQuery = request.query().get("offer_id");
    std::optional<std::vector<std::string>> offerId;
    if(offerIdQuery.has_value()){
        std::vector<std::string> valueQuery_instance;
        if(fromStringValue(offerIdQuery.value(), valueQuery_instance)){
            offerId = valueQuery_instance;
        }
    }
    auto shopSkuQuery = request.query().get("shop_sku");
    std::optional<std::vector<std::string>> shopSku;
    if(shopSkuQuery.has_value()){
        std::vector<std::string> valueQuery_instance;
        if(fromStringValue(shopSkuQuery.value(), valueQuery_instance)){
            shopSku = valueQuery_instance;
        }
    }
    auto mappingKindQuery = request.query().get("mapping_kind");
    std::optional<OfferMappingKindType> mappingKind;
    if(mappingKindQuery.has_value()){
        OfferMappingKindType valueQuery_instance;
        if(fromStringValue(mappingKindQuery.value(), valueQuery_instance)){
            mappingKind = valueQuery_instance;
        }
    }
    auto statusQuery = request.query().get("status");
    std::optional<std::vector<OfferProcessingStatusType>> status;
    if(statusQuery.has_value()){
        std::vector<OfferProcessingStatusType> valueQuery_instance;
        if(fromStringValue(statusQuery.value(), valueQuery_instance)){
            status = valueQuery_instance;
        }
    }
    auto availabilityQuery = request.query().get("availability");
    std::optional<std::vector<OfferAvailabilityStatusType>> availability;
    if(availabilityQuery.has_value()){
        std::vector<OfferAvailabilityStatusType> valueQuery_instance;
        if(fromStringValue(availabilityQuery.value(), valueQuery_instance)){
            availability = valueQuery_instance;
        }
    }
    auto categoryIdQuery = request.query().get("category_id");
    std::optional<std::vector<int32_t>> categoryId;
    if(categoryIdQuery.has_value()){
        std::vector<int32_t> valueQuery_instance;
        if(fromStringValue(categoryIdQuery.value(), valueQuery_instance)){
            categoryId = valueQuery_instance;
        }
    }
    auto vendorQuery = request.query().get("vendor");
    std::optional<std::vector<std::string>> vendor;
    if(vendorQuery.has_value()){
        std::vector<std::string> valueQuery_instance;
        if(fromStringValue(vendorQuery.value(), valueQuery_instance)){
            vendor = valueQuery_instance;
        }
    }
    auto pageTokenQuery = request.query().get("page_token");
    std::optional<std::string> pageToken;
    if(pageTokenQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(pageTokenQuery.value(), valueQuery_instance)){
            pageToken = valueQuery_instance;
        }
    }
    auto limitQuery = request.query().get("limit");
    std::optional<int32_t> limit;
    if(limitQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(limitQuery.value(), valueQuery_instance)){
            limit = valueQuery_instance;
        }
    }
    
    try {
        this->get_offer_mapping_entries(campaignId, offerId, shopSku, mappingKind, status, availability, categoryId, vendor, pageToken, limit, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void OfferMappingsApi::get_suggested_offer_mapping_entries_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    
    // Getting the body param
    
    GetSuggestedOfferMappingEntriesRequest getSuggestedOfferMappingEntriesRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(getSuggestedOfferMappingEntriesRequest);
        getSuggestedOfferMappingEntriesRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->get_suggested_offer_mapping_entries(campaignId, getSuggestedOfferMappingEntriesRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void OfferMappingsApi::update_offer_mapping_entries_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    
    // Getting the body param
    
    UpdateOfferMappingEntryRequest updateOfferMappingEntryRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(updateOfferMappingEntryRequest);
        updateOfferMappingEntryRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->update_offer_mapping_entries(campaignId, updateOfferMappingEntryRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void OfferMappingsApi::offer_mappings_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

