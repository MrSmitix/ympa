/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "OfferMappingsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

OfferMappingsApiException::OfferMappingsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int OfferMappingsApiException::getStatus() const
{
    return m_status;
}
const char* OfferMappingsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-mapping-entries/");
	this->set_method_handler("GET",
		std::bind(&OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::~OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource()
{
}

std::pair<int, std::string> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::handleOfferMappingsApiException(const OfferMappingsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOfferMappingEntriesResponse> resultObject = std::make_shared<GetOfferMappingEntriesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, offerId, shopSku, mappingKind, status, availability, categoryId, vendor, pageToken, limit);
    }
    catch(const OfferMappingsApiException& e) {
        std::tie(status_code, result) = handleOfferMappingsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о товарах в каталоге." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOfferMappingEntriesResponse>> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::handler_GET(
        int64_t const & campaignId, std::vector<std::string> const & offerId, std::vector<std::shared_ptr<std::string>> const & shopSku, std::shared_ptr<OfferMappingKindType> const & mappingKind, std::vector<std::shared_ptr<OfferProcessingStatusType>> const & status, std::vector<std::shared_ptr<OfferAvailabilityStatusType>> const & availability, std::vector<int32_t> const & categoryId, std::vector<std::string> const & vendor, std::string const & pageToken, int32_t const & limit)
{
    throw OfferMappingsApiException(501, "Not implemented");
}


std::string OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-mapping-entries/suggestions/");
	this->set_method_handler("POST",
		std::bind(&OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::~OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource()
{
}

std::pair<int, std::string> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handleOfferMappingsApiException(const OfferMappingsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getSuggestedOfferMappingEntriesRequest = extractJsonModelBodyParam<GetSuggestedOfferMappingEntriesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetSuggestedOfferMappingEntriesResponse> resultObject = std::make_shared<GetSuggestedOfferMappingEntriesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, getSuggestedOfferMappingEntriesRequest);
    }
    catch(const OfferMappingsApiException& e) {
        std::tie(status_code, result) = handleOfferMappingsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о товарах в каталоге." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetSuggestedOfferMappingEntriesResponse>> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetSuggestedOfferMappingEntriesRequest> const & getSuggestedOfferMappingEntriesRequest)
{
    throw OfferMappingsApiException(501, "Not implemented");
}


std::string OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-mapping-entries/updates/");
	this->set_method_handler("POST",
		std::bind(&OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::~OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource()
{
}

std::pair<int, std::string> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handleOfferMappingsApiException(const OfferMappingsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOfferMappingEntryRequest = extractJsonModelBodyParam<UpdateOfferMappingEntryRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, updateOfferMappingEntryRequest);
    }
    catch(const OfferMappingsApiException& e) {
        std::tie(status_code, result) = handleOfferMappingsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Статус выполнения операции." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateOfferMappingEntryRequest> const & updateOfferMappingEntryRequest)
{
    throw OfferMappingsApiException(501, "Not implemented");
}


std::string OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

OfferMappingsApi::OfferMappingsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

OfferMappingsApi::~OfferMappingsApi() {}

void OfferMappingsApi::setOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource(std::shared_ptr<OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource> spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource) {
    m_spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource = spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource;
    m_service->publish(m_spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource);
}
void OfferMappingsApi::setOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(std::shared_ptr<OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource> spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource) {
    m_spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource = spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource;
    m_service->publish(m_spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource);
}
void OfferMappingsApi::setOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(std::shared_ptr<OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource> spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource) {
    m_spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource = spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource;
    m_service->publish(m_spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource);
}


void OfferMappingsApi::publishDefaultResources() {
    if (!m_spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource) {
        setOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource(std::make_shared<OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesResource>());
    }
    if (!m_spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource) {
        setOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(std::make_shared<OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource>());
    }
    if (!m_spOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource) {
        setOfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(std::make_shared<OfferMappingsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource>());
    }
}

std::shared_ptr<restbed::Service> OfferMappingsApi::service() {
    return m_service;
}


}
}
}
}

