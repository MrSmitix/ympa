/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { ConfirmShipmentRequest } from '../model/confirmShipmentRequest';
import { EmptyApiResponse } from '../model/emptyApiResponse';
import { GetShipmentOrdersInfoResponse } from '../model/getShipmentOrdersInfoResponse';
import { GetShipmentResponse } from '../model/getShipmentResponse';
import { SearchShipmentsRequest } from '../model/searchShipmentsRequest';
import { SearchShipmentsResponse } from '../model/searchShipmentsResponse';
import { SetShipmentPalletsCountRequest } from '../model/setShipmentPalletsCountRequest';
import { ShipmentPalletLabelPageFormatType } from '../model/shipmentPalletLabelPageFormatType';
import { TransferOrdersFromShipmentRequest } from '../model/transferOrdersFromShipmentRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ShipmentsService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Подтверждение отгрузки
     * Подтверждает отгрузку товаров в сортировочный центр или пункт приема заказов. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param shipmentId Идентификатор отгрузки.
     * @param confirmShipmentRequest 
     
     */
    public confirmShipment(campaignId: number, shipmentId: number, confirmShipmentRequest?: ConfirmShipmentRequest, observe?: 'body', headers?: Headers): Observable<EmptyApiResponse>;
    public confirmShipment(campaignId: number, shipmentId: number, confirmShipmentRequest?: ConfirmShipmentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<EmptyApiResponse>>;
    public confirmShipment(campaignId: number, shipmentId: number, confirmShipmentRequest?: ConfirmShipmentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling confirmShipment.');
        }

        if (shipmentId === null || shipmentId === undefined){
            throw new Error('Required parameter shipmentId was null or undefined when calling confirmShipment.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<EmptyApiResponse>> = this.httpClient.post(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/first-mile/shipments/${encodeURIComponent(String(shipmentId))}/confirm`, confirmShipmentRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <EmptyApiResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение акта приема-передачи
     * {% note warning \&quot;Экспресс‑доставка\&quot; %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам Яндекс Go, подготавливать акт приема‑передачи не нужно.  {% endnote %}  Запрос формирует акт приема-передачи заказов, входящих в отгрузку, и возвращает акт в формате PDF. В акте содержатся собранные и готовые к отправке заказы.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \&quot;Данные, из которых Маркет формирует акт\&quot; %}  | **Данные в акте**                                         | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Дата                                                      | Дата запроса.                                                                                                                                                                                                                                                        | | Отправитель                                               | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                               | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                         | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика)       | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                      | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Вес                                                       | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                           | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param shipmentId Идентификатор отгрузки.
     
     */
    public downloadShipmentAct(campaignId: number, shipmentId: number, observe?: 'body', headers?: Headers): Observable<File>;
    public downloadShipmentAct(campaignId: number, shipmentId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<File>>;
    public downloadShipmentAct(campaignId: number, shipmentId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling downloadShipmentAct.');
        }

        if (shipmentId === null || shipmentId === undefined){
            throw new Error('Required parameter shipmentId was null or undefined when calling downloadShipmentAct.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/pdf, application/json';

        const response: Observable<HttpResponse<File>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/first-mile/shipments/${encodeURIComponent(String(shipmentId))}/act`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <File>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение акта расхождений
     * Возвращает акт расхождений для заданной отгрузки. |**⚙️ Лимит:** 200 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param shipmentId Идентификатор отгрузки.
     
     */
    public downloadShipmentDiscrepancyAct(campaignId: number, shipmentId: number, observe?: 'body', headers?: Headers): Observable<File>;
    public downloadShipmentDiscrepancyAct(campaignId: number, shipmentId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<File>>;
    public downloadShipmentDiscrepancyAct(campaignId: number, shipmentId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling downloadShipmentDiscrepancyAct.');
        }

        if (shipmentId === null || shipmentId === undefined){
            throw new Error('Required parameter shipmentId was null or undefined when calling downloadShipmentDiscrepancyAct.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/vnd.ms-excel, application/json';

        const response: Observable<HttpResponse<File>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/first-mile/shipments/${encodeURIComponent(String(shipmentId))}/discrepancy-act`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <File>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение фактического акта приема-передачи
     * Возвращает фактический акт приема-передачи для заданной отгрузки.  Такой акт становится доступен спустя несколько часов после завершения отгрузки. Он может понадобиться, если после отгрузки обнаружатся расхождения.  |**⚙️ Лимит:** 200 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param shipmentId Идентификатор отгрузки.
     
     */
    public downloadShipmentInboundAct(campaignId: number, shipmentId: number, observe?: 'body', headers?: Headers): Observable<File>;
    public downloadShipmentInboundAct(campaignId: number, shipmentId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<File>>;
    public downloadShipmentInboundAct(campaignId: number, shipmentId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling downloadShipmentInboundAct.');
        }

        if (shipmentId === null || shipmentId === undefined){
            throw new Error('Required parameter shipmentId was null or undefined when calling downloadShipmentInboundAct.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/pdf, application/json';

        const response: Observable<HttpResponse<File>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/first-mile/shipments/${encodeURIComponent(String(shipmentId))}/inbound-act`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <File>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Ярлыки для доверительной приемки (FBS)
     * PDF-файл с ярлыками на каждый короб или палету в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Распечатайте по несколько копий каждого ярлыка: на одну тару нужно наклеить минимум 2 ярлыка с разных сторон.  Количество упаковок в отгрузке задается в запросе [PUT campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets](../../reference/shipments/setShipmentPalletsCount.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param shipmentId Идентификатор отгрузки.
     * @param format Формат страниц PDF-файла с ярлыками:  * &#x60;A4&#x60; — по 16 ярлыков на странице. * &#x60;A8&#x60; — по одному ярлыку на странице. 
     
     */
    public downloadShipmentPalletLabels(campaignId: number, shipmentId: number, format?: ShipmentPalletLabelPageFormatType, observe?: 'body', headers?: Headers): Observable<File>;
    public downloadShipmentPalletLabels(campaignId: number, shipmentId: number, format?: ShipmentPalletLabelPageFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<File>>;
    public downloadShipmentPalletLabels(campaignId: number, shipmentId: number, format?: ShipmentPalletLabelPageFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling downloadShipmentPalletLabels.');
        }

        if (shipmentId === null || shipmentId === undefined){
            throw new Error('Required parameter shipmentId was null or undefined when calling downloadShipmentPalletLabels.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/pdf, application/json';

        const response: Observable<HttpResponse<File>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/first-mile/shipments/${encodeURIComponent(String(shipmentId))}/pallet/labels?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <File>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
     * Запрос подтверждает ближайшую отгрузку и возвращает акт приема-передачи в формате PDF.  {% note warning \&quot;Экспресс‑доставка\&quot; %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам [Яндекс Go](https://go.yandex/), подготавливать акт приема‑передачи не нужно.  {% endnote %}  В акт входят собранные и готовые к отправке заказы, которые отгружаются в сортировочный центр или пункт приема или курьерам Маркета.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \&quot;Данные, из которых Маркет формирует акт\&quot; %}  | **Данные в акте**                                   | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Отправитель                                         | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                         | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                   | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика) | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Стоимость всех товаров в заказе                     | Стоимость всех заказанных товаров.                                                                                                                                                                                                                                   | | Вес                                                 | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                     | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param warehouseId Идентификатор склада.
     
     */
    public downloadShipmentReceptionTransferAct(campaignId: number, warehouseId?: number, observe?: 'body', headers?: Headers): Observable<File>;
    public downloadShipmentReceptionTransferAct(campaignId: number, warehouseId?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<File>>;
    public downloadShipmentReceptionTransferAct(campaignId: number, warehouseId?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling downloadShipmentReceptionTransferAct.');
        }

        let queryParameters: string[] = [];
        if (warehouseId !== undefined) {
            queryParameters.push('warehouseId='+encodeURIComponent(String(warehouseId)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/pdf, application/json';

        const response: Observable<HttpResponse<File>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/shipments/reception-transfer-act?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <File>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение транспортной накладной
     * Возвращает транспортную накладную для заданной отгрузки.  Транспортная накладная понадобится, если вы отгружаете товары непосредственно со своего склада. [Подробно об этом способе отгрузки](https://yandex.ru/support/marketplace/orders/fbs/settings/shipment.html#at-your-warehouse)  |**⚙️ Лимит:** 200 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param shipmentId Идентификатор отгрузки.
     
     */
    public downloadShipmentTransportationWaybill(campaignId: number, shipmentId: number, observe?: 'body', headers?: Headers): Observable<File>;
    public downloadShipmentTransportationWaybill(campaignId: number, shipmentId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<File>>;
    public downloadShipmentTransportationWaybill(campaignId: number, shipmentId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling downloadShipmentTransportationWaybill.');
        }

        if (shipmentId === null || shipmentId === undefined){
            throw new Error('Required parameter shipmentId was null or undefined when calling downloadShipmentTransportationWaybill.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/vnd.ms-excel, application/json';

        const response: Observable<HttpResponse<File>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/first-mile/shipments/${encodeURIComponent(String(shipmentId))}/transportation-waybill`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <File>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение информации об одной отгрузке
     * Возвращает информацию об отгрузке по ее идентификатору. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param shipmentId Идентификатор отгрузки.
     * @param cancelledOrders Возвращать ли отмененные заказы.  Значение по умолчанию — &#x60;true&#x60;. Если возвращать отмененные заказы не нужно, передайте значение &#x60;false&#x60;. 
     
     */
    public getShipment(campaignId: number, shipmentId: number, cancelledOrders?: boolean, observe?: 'body', headers?: Headers): Observable<GetShipmentResponse>;
    public getShipment(campaignId: number, shipmentId: number, cancelledOrders?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetShipmentResponse>>;
    public getShipment(campaignId: number, shipmentId: number, cancelledOrders?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling getShipment.');
        }

        if (shipmentId === null || shipmentId === undefined){
            throw new Error('Required parameter shipmentId was null or undefined when calling getShipment.');
        }

        let queryParameters: string[] = [];
        if (cancelledOrders !== undefined) {
            queryParameters.push('cancelledOrders='+encodeURIComponent(String(cancelledOrders)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetShipmentResponse>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/first-mile/shipments/${encodeURIComponent(String(shipmentId))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetShipmentResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение информации о возможности печати ярлыков (FBS)
     * Возвращает информацию о возможности печати ярлыков-наклеек для заказов в отгрузке. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param shipmentId Идентификатор отгрузки.
     
     */
    public getShipmentOrdersInfo(campaignId: number, shipmentId: number, observe?: 'body', headers?: Headers): Observable<GetShipmentOrdersInfoResponse>;
    public getShipmentOrdersInfo(campaignId: number, shipmentId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetShipmentOrdersInfoResponse>>;
    public getShipmentOrdersInfo(campaignId: number, shipmentId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling getShipmentOrdersInfo.');
        }

        if (shipmentId === null || shipmentId === undefined){
            throw new Error('Required parameter shipmentId was null or undefined when calling getShipmentOrdersInfo.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetShipmentOrdersInfoResponse>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/first-mile/shipments/${encodeURIComponent(String(shipmentId))}/orders/info`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetShipmentOrdersInfoResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение информации о нескольких отгрузках
     * Возвращает информацию об отгрузках по заданным параметрам:  * дате; * статусу; * идентификаторам заказов.  Результаты возвращаются постранично. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param searchShipmentsRequest 
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
     * @param limit Количество значений на одной странице. 
     
     */
    public searchShipments(campaignId: number, searchShipmentsRequest: SearchShipmentsRequest, pageToken?: string, limit?: number, observe?: 'body', headers?: Headers): Observable<SearchShipmentsResponse>;
    public searchShipments(campaignId: number, searchShipmentsRequest: SearchShipmentsRequest, pageToken?: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<SearchShipmentsResponse>>;
    public searchShipments(campaignId: number, searchShipmentsRequest: SearchShipmentsRequest, pageToken?: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling searchShipments.');
        }

        if (searchShipmentsRequest === null || searchShipmentsRequest === undefined){
            throw new Error('Required parameter searchShipmentsRequest was null or undefined when calling searchShipments.');
        }

        let queryParameters: string[] = [];
        if (pageToken !== undefined) {
            queryParameters.push('pageToken='+encodeURIComponent(String(pageToken)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<SearchShipmentsResponse>> = this.httpClient.put(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/first-mile/shipments?${queryParameters.join('&')}`, searchShipmentsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SearchShipmentsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Передача количества упаковок в отгрузке
     * Передает Маркету количество коробов или палет в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Получить PDF-файл с ярлыками для упаковок можно с помощью запроса [GET campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels](../../reference/shipments/downloadShipmentPalletLabels.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param shipmentId Идентификатор отгрузки.
     * @param setShipmentPalletsCountRequest 
     
     */
    public setShipmentPalletsCount(campaignId: number, shipmentId: number, setShipmentPalletsCountRequest: SetShipmentPalletsCountRequest, observe?: 'body', headers?: Headers): Observable<EmptyApiResponse>;
    public setShipmentPalletsCount(campaignId: number, shipmentId: number, setShipmentPalletsCountRequest: SetShipmentPalletsCountRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<EmptyApiResponse>>;
    public setShipmentPalletsCount(campaignId: number, shipmentId: number, setShipmentPalletsCountRequest: SetShipmentPalletsCountRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling setShipmentPalletsCount.');
        }

        if (shipmentId === null || shipmentId === undefined){
            throw new Error('Required parameter shipmentId was null or undefined when calling setShipmentPalletsCount.');
        }

        if (setShipmentPalletsCountRequest === null || setShipmentPalletsCountRequest === undefined){
            throw new Error('Required parameter setShipmentPalletsCountRequest was null or undefined when calling setShipmentPalletsCount.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<EmptyApiResponse>> = this.httpClient.put(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/first-mile/shipments/${encodeURIComponent(String(shipmentId))}/pallets`, setShipmentPalletsCountRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <EmptyApiResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Перенос заказов в следующую отгрузку
     * Переносит указанные заказы из указанной отгрузки в следующую отгрузку. [Что такое отгрузка?](https://yandex.ru/support/marketplace/orders/fbs/process.html#ship)  Используйте этот запрос, если не успеваете собрать и упаковать заказы вовремя.  {% note warning \&quot;Такие переносы снижают индекс качества магазина\&quot; %}  Этот запрос предназначен для исключительных случаев. Если вы будете переносить заказы слишком часто, магазин столкнется с ограничениями. [Что за ограничения?](https://yandex.ru/support/marketplace/quality/score/fbs.html)  {% endnote %}  Переносить заказы можно, если до формирования отгрузки осталось больше получаса.  Перенос происходит не мгновенно, а занимает несколько минут.  |**⚙️ Лимит:** 200 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param shipmentId Идентификатор отгрузки.
     * @param transferOrdersFromShipmentRequest 
     
     */
    public transferOrdersFromShipment(campaignId: number, shipmentId: number, transferOrdersFromShipmentRequest: TransferOrdersFromShipmentRequest, observe?: 'body', headers?: Headers): Observable<EmptyApiResponse>;
    public transferOrdersFromShipment(campaignId: number, shipmentId: number, transferOrdersFromShipmentRequest: TransferOrdersFromShipmentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<EmptyApiResponse>>;
    public transferOrdersFromShipment(campaignId: number, shipmentId: number, transferOrdersFromShipmentRequest: TransferOrdersFromShipmentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling transferOrdersFromShipment.');
        }

        if (shipmentId === null || shipmentId === undefined){
            throw new Error('Required parameter shipmentId was null or undefined when calling transferOrdersFromShipment.');
        }

        if (transferOrdersFromShipmentRequest === null || transferOrdersFromShipmentRequest === undefined){
            throw new Error('Required parameter transferOrdersFromShipmentRequest was null or undefined when calling transferOrdersFromShipment.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<EmptyApiResponse>> = this.httpClient.post(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/first-mile/shipments/${encodeURIComponent(String(shipmentId))}/orders/transfer`, transferOrdersFromShipmentRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <EmptyApiResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
