/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ModelsApi.h
 *
 * 
 */

#ifndef ModelsApi_H_
#define ModelsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "CurrencyType.h"
#include "GetModelsOffersResponse.h"
#include "GetModelsRequest.h"
#include "GetModelsResponse.h"
#include "SearchModelsResponse.h"
#include "SortOrderType.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ModelsApiException: public std::exception
{
public:
    ModelsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace ModelsApiResources {
/// <summary>
/// Информация об одной модели
/// </summary>
/// <remarks>
/// Возвращает информацию о модели товара.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsModelIdResource: public restbed::Resource
{
public:
    ModelsModelIdResource(const std::string& context = "");
    virtual ~ModelsModelIdResource() = default;

    ModelsModelIdResource(
        const ModelsModelIdResource& other) = default; // copy constructor
    ModelsModelIdResource(ModelsModelIdResource&& other) noexcept = default; // move constructor

    ModelsModelIdResource& operator=(const ModelsModelIdResource& other) = default; // copy assignment
    ModelsModelIdResource& operator=(ModelsModelIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetModelsResponse>(
        int64_t & modelId, int64_t & regionId, CurrencyType & currency)> handler_GET_func =
            [](int64_t &, int64_t &, CurrencyType &) -> std::pair<int, GetModelsResponse>
                { throw ModelsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetModelsResponse> handler_GET(
        int64_t & modelId, int64_t & regionId, CurrencyType & currency);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleModelsApiException(const ModelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список предложений для одной модели
/// </summary>
/// <remarks>
/// Возвращает информацию о первых десяти предложениях, расположенных на карточке модели.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей метод не поддерживается. Идентификатор групповой модели игнорируется.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsModelIdOffersResource: public restbed::Resource
{
public:
    ModelsModelIdOffersResource(const std::string& context = "");
    virtual ~ModelsModelIdOffersResource() = default;

    ModelsModelIdOffersResource(
        const ModelsModelIdOffersResource& other) = default; // copy constructor
    ModelsModelIdOffersResource(ModelsModelIdOffersResource&& other) noexcept = default; // move constructor

    ModelsModelIdOffersResource& operator=(const ModelsModelIdOffersResource& other) = default; // copy assignment
    ModelsModelIdOffersResource& operator=(ModelsModelIdOffersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetModelsOffersResponse>(
        int64_t & modelId, int64_t & regionId, CurrencyType & currency, SortOrderType & orderByPrice, int32_t & count, int32_t & page)> handler_GET_func =
            [](int64_t &, int64_t &, CurrencyType &, SortOrderType &, int32_t &, int32_t &) -> std::pair<int, GetModelsOffersResponse>
                { throw ModelsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetModelsOffersResponse> handler_GET(
        int64_t & modelId, int64_t & regionId, CurrencyType & currency, SortOrderType & orderByPrice, int32_t & count, int32_t & page);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleModelsApiException(const ModelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о нескольких моделях
/// </summary>
/// <remarks>
/// Возвращает информацию о моделях товаров.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsResource: public restbed::Resource
{
public:
    ModelsResource(const std::string& context = "");
    virtual ~ModelsResource() = default;

    ModelsResource(
        const ModelsResource& other) = default; // copy constructor
    ModelsResource(ModelsResource&& other) noexcept = default; // move constructor

    ModelsResource& operator=(const ModelsResource& other) = default; // copy assignment
    ModelsResource& operator=(ModelsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetModelsResponse>(
        int64_t & regionId, GetModelsRequest & getModelsRequest, CurrencyType & currency)> handler_POST_func =
            [](int64_t &, GetModelsRequest &, CurrencyType &) -> std::pair<int, GetModelsResponse>
                { throw ModelsApiException(501, "Not implemented"); };

    std::function<std::pair<int, SearchModelsResponse>(
        std::string & query, int64_t & regionId, CurrencyType & currency, int32_t & page, int32_t & pageSize)> handler_GET_func =
            [](std::string &, int64_t &, CurrencyType &, int32_t &, int32_t &) -> std::pair<int, SearchModelsResponse>
                { throw ModelsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetModelsResponse> handler_POST(
        int64_t & regionId, GetModelsRequest & getModelsRequest, CurrencyType & currency);

    virtual std::pair<int, SearchModelsResponse> handler_GET(
        std::string & query, int64_t & regionId, CurrencyType & currency, int32_t & page, int32_t & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleModelsApiException(const ModelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Список предложений для нескольких моделей
/// </summary>
/// <remarks>
/// Возвращает информацию о первых десяти предложениях, расположенных на карточках моделей, идентификаторы которых указаны в запросе.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей выдача предложений не поддерживается. Идентификаторы групповых моделей игнорируются.  В одном запросе можно получить информацию о предложениях не более чем для 100 моделей.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsOffersResource: public restbed::Resource
{
public:
    ModelsOffersResource(const std::string& context = "");
    virtual ~ModelsOffersResource() = default;

    ModelsOffersResource(
        const ModelsOffersResource& other) = default; // copy constructor
    ModelsOffersResource(ModelsOffersResource&& other) noexcept = default; // move constructor

    ModelsOffersResource& operator=(const ModelsOffersResource& other) = default; // copy assignment
    ModelsOffersResource& operator=(ModelsOffersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetModelsOffersResponse>(
        int64_t & regionId, GetModelsRequest & getModelsRequest, CurrencyType & currency, SortOrderType & orderByPrice)> handler_POST_func =
            [](int64_t &, GetModelsRequest &, CurrencyType &, SortOrderType &) -> std::pair<int, GetModelsOffersResponse>
                { throw ModelsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetModelsOffersResponse> handler_POST(
        int64_t & regionId, GetModelsRequest & getModelsRequest, CurrencyType & currency, SortOrderType & orderByPrice);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleModelsApiException(const ModelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace ModelsApiResources */

using ModelsApiModelsModelIdResource [[deprecated]] = ModelsApiResources::ModelsModelIdResource;
using ModelsApiModelsModelIdOffersResource [[deprecated]] = ModelsApiResources::ModelsModelIdOffersResource;
using ModelsApiModelsResource [[deprecated]] = ModelsApiResources::ModelsResource;
using ModelsApiModelsOffersResource [[deprecated]] = ModelsApiResources::ModelsOffersResource;

//
// The restbed service to actually implement the REST server
//
class  ModelsApi
{
public:
    explicit ModelsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ModelsApi();

    std::shared_ptr<ModelsApiResources::ModelsModelIdResource> getModelsModelIdResource();
    std::shared_ptr<ModelsApiResources::ModelsModelIdOffersResource> getModelsModelIdOffersResource();
    std::shared_ptr<ModelsApiResources::ModelsResource> getModelsResource();
    std::shared_ptr<ModelsApiResources::ModelsOffersResource> getModelsOffersResource();

    void setResource(std::shared_ptr<ModelsApiResources::ModelsModelIdResource> resource);
    void setResource(std::shared_ptr<ModelsApiResources::ModelsModelIdOffersResource> resource);
    void setResource(std::shared_ptr<ModelsApiResources::ModelsResource> resource);
    void setResource(std::shared_ptr<ModelsApiResources::ModelsOffersResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setModelsApiModelsModelIdResource(std::shared_ptr<ModelsApiResources::ModelsModelIdResource> spModelsApiModelsModelIdResource);
    [[deprecated("use setResource()")]]
    virtual void setModelsApiModelsModelIdOffersResource(std::shared_ptr<ModelsApiResources::ModelsModelIdOffersResource> spModelsApiModelsModelIdOffersResource);
    [[deprecated("use setResource()")]]
    virtual void setModelsApiModelsResource(std::shared_ptr<ModelsApiResources::ModelsResource> spModelsApiModelsResource);
    [[deprecated("use setResource()")]]
    virtual void setModelsApiModelsOffersResource(std::shared_ptr<ModelsApiResources::ModelsOffersResource> spModelsApiModelsOffersResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ModelsApiResources::ModelsModelIdResource> m_spModelsModelIdResource;
    std::shared_ptr<ModelsApiResources::ModelsModelIdOffersResource> m_spModelsModelIdOffersResource;
    std::shared_ptr<ModelsApiResources::ModelsResource> m_spModelsResource;
    std::shared_ptr<ModelsApiResources::ModelsOffersResource> m_spModelsOffersResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ModelsApi_H_ */

