/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ModelsApi.h
 *
 * 
 */

#ifndef ModelsApi_H_
#define ModelsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "CurrencyType.h"
#include "GetModelsOffersResponse.h"
#include "GetModelsRequest.h"
#include "GetModelsResponse.h"
#include "SearchModelsResponse.h"
#include "SortOrderType.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ModelsApiException: public std::exception
{
public:
    ModelsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Информация об одной модели
/// </summary>
/// <remarks>
/// Возвращает информацию о модели товара.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsApiModelsModelIdResource: public restbed::Resource
{
public:
    ModelsApiModelsModelIdResource(const std::string& context = "");
    virtual ~ModelsApiModelsModelIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetModelsResponse>> handler_GET(
        int64_t const & modelId, int64_t const & regionId, std::shared_ptr<CurrencyType> const & currency);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_modelId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("modelId", 0L);
    }

    virtual int64_t getQueryParam_regionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("regionId", 0L);
    }



    virtual std::pair<int, std::string> handleModelsApiException(const ModelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список предложений для одной модели
/// </summary>
/// <remarks>
/// Возвращает информацию о первых десяти предложениях, расположенных на карточке модели.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей метод не поддерживается. Идентификатор групповой модели игнорируется.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsApiModelsModelIdOffersResource: public restbed::Resource
{
public:
    ModelsApiModelsModelIdOffersResource(const std::string& context = "");
    virtual ~ModelsApiModelsModelIdOffersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetModelsOffersResponse>> handler_GET(
        int64_t const & modelId, int64_t const & regionId, std::shared_ptr<CurrencyType> const & currency, std::shared_ptr<SortOrderType> const & orderByPrice, int32_t const & count, int32_t const & page);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_modelId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("modelId", 0L);
    }

    virtual int64_t getQueryParam_regionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("regionId", 0L);
    }

    virtual int32_t getQueryParam_count(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("count", 10);
    }

    virtual int32_t getQueryParam_page(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }



    virtual std::pair<int, std::string> handleModelsApiException(const ModelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о нескольких моделях
/// </summary>
/// <remarks>
/// Возвращает информацию о моделях товаров.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsApiModelsResource: public restbed::Resource
{
public:
    ModelsApiModelsResource(const std::string& context = "");
    virtual ~ModelsApiModelsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetModelsResponse>> handler_POST(
        int64_t const & regionId, std::shared_ptr<GetModelsRequest> const & getModelsRequest, std::shared_ptr<CurrencyType> const & currency);

    virtual std::pair<int, std::shared_ptr<SearchModelsResponse>> handler_GET(
        std::string const & query, int64_t const & regionId, std::shared_ptr<CurrencyType> const & currency, int32_t const & page, int32_t const & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getQueryParam_regionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("regionId", 0L);
    }


    virtual std::string getQueryParam_query_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("query", "");
    }
    virtual int64_t getQueryParam_regionId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("regionId", 0L);
    }
    virtual int32_t getQueryParam_page_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }
    virtual int32_t getQueryParam_pageSize_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }

    virtual std::pair<int, std::string> handleModelsApiException(const ModelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список предложений для нескольких моделей
/// </summary>
/// <remarks>
/// Возвращает информацию о первых десяти предложениях, расположенных на карточках моделей, идентификаторы которых указаны в запросе.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей выдача предложений не поддерживается. Идентификаторы групповых моделей игнорируются.  В одном запросе можно получить информацию о предложениях не более чем для 100 моделей.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
/// </remarks>
class  ModelsApiModelsOffersResource: public restbed::Resource
{
public:
    ModelsApiModelsOffersResource(const std::string& context = "");
    virtual ~ModelsApiModelsOffersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetModelsOffersResponse>> handler_POST(
        int64_t const & regionId, std::shared_ptr<GetModelsRequest> const & getModelsRequest, std::shared_ptr<CurrencyType> const & currency, std::shared_ptr<SortOrderType> const & orderByPrice);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getQueryParam_regionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("regionId", 0L);
    }



    virtual std::pair<int, std::string> handleModelsApiException(const ModelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  ModelsApi
{
public:
    explicit ModelsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ModelsApi();

    virtual void setModelsApiModelsModelIdResource(std::shared_ptr<ModelsApiModelsModelIdResource> spModelsApiModelsModelIdResource);
    virtual void setModelsApiModelsModelIdOffersResource(std::shared_ptr<ModelsApiModelsModelIdOffersResource> spModelsApiModelsModelIdOffersResource);
    virtual void setModelsApiModelsResource(std::shared_ptr<ModelsApiModelsResource> spModelsApiModelsResource);
    virtual void setModelsApiModelsOffersResource(std::shared_ptr<ModelsApiModelsOffersResource> spModelsApiModelsOffersResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ModelsApiModelsModelIdResource> m_spModelsApiModelsModelIdResource;
    std::shared_ptr<ModelsApiModelsModelIdOffersResource> m_spModelsApiModelsModelIdOffersResource;
    std::shared_ptr<ModelsApiModelsResource> m_spModelsApiModelsResource;
    std::shared_ptr<ModelsApiModelsOffersResource> m_spModelsApiModelsOffersResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ModelsApi_H_ */

