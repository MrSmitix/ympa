/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "PricesApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

PricesApiException::PricesApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int PricesApiException::getStatus() const
{
    return m_status;
}
const char* PricesApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace PricesApiResources {
CampaignsCampaignIdOffer_pricesResource::CampaignsCampaignIdOffer_pricesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-prices");
	this->set_method_handler("GET",
		std::bind(&CampaignsCampaignIdOffer_pricesResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&CampaignsCampaignIdOffer_pricesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOffer_pricesResource::handlePricesApiException(const PricesApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOffer_pricesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOffer_pricesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOffer_pricesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOffer_pricesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOffer_pricesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOffer_pricesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    // Getting the query params
    std::string pageToken = request->get_query_parameter("pageToken", "");
    int32_t limit = request->get_query_parameter("limit", 0);
    bool archived = request->get_query_parameter("archived", false);
    
    int status_code = 500;
    GetPricesResponse resultObject = GetPricesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, pageToken, limit, archived);
    }
    catch(const PricesApiException& e) {
        std::tie(status_code, result) = handlePricesApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void CampaignsCampaignIdOffer_pricesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto getPricesByOfferIdsRequest = extractJsonModelBodyParam<GetPricesByOfferIdsRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    // Getting the query params
    std::string pageToken = request->get_query_parameter("pageToken", "");
    int32_t limit = request->get_query_parameter("limit", 0);
    
    int status_code = 500;
    GetPricesByOfferIdsResponse resultObject = GetPricesByOfferIdsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(campaignId, pageToken, limit, getPricesByOfferIdsRequest);
    }
    catch(const PricesApiException& e) {
        std::tie(status_code, result) = handlePricesApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, GetPricesResponse> CampaignsCampaignIdOffer_pricesResource::handler_GET(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, bool & archived)
{
    return handler_GET_func(campaignId, pageToken, limit, archived);
}

std::pair<int, GetPricesByOfferIdsResponse> CampaignsCampaignIdOffer_pricesResource::handler_POST(
    int64_t & campaignId, std::string & pageToken, int32_t & limit, GetPricesByOfferIdsRequest & getPricesByOfferIdsRequest)
{
    return handler_POST_func(campaignId, pageToken, limit, getPricesByOfferIdsRequest);
}

std::string CampaignsCampaignIdOffer_pricesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOffer_pricesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdOffer_pricesSuggestionsResource::CampaignsCampaignIdOffer_pricesSuggestionsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-prices/suggestions");
	this->set_method_handler("POST",
		std::bind(&CampaignsCampaignIdOffer_pricesSuggestionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOffer_pricesSuggestionsResource::handlePricesApiException(const PricesApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOffer_pricesSuggestionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOffer_pricesSuggestionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOffer_pricesSuggestionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOffer_pricesSuggestionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOffer_pricesSuggestionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOffer_pricesSuggestionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto suggestPricesRequest = extractJsonModelBodyParam<SuggestPricesRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    
    int status_code = 500;
    SuggestPricesResponse resultObject = SuggestPricesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(campaignId, suggestPricesRequest);
    }
    catch(const PricesApiException& e) {
        std::tie(status_code, result) = handlePricesApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, SuggestPricesResponse> CampaignsCampaignIdOffer_pricesSuggestionsResource::handler_POST(
        int64_t & campaignId, SuggestPricesRequest & suggestPricesRequest)
{
    return handler_POST_func(campaignId, suggestPricesRequest);
}


std::string CampaignsCampaignIdOffer_pricesSuggestionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOffer_pricesSuggestionsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusinessIdOffer_pricesUpdatesResource::BusinessesBusinessIdOffer_pricesUpdatesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-prices/updates");
	this->set_method_handler("POST",
		std::bind(&BusinessesBusinessIdOffer_pricesUpdatesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusinessIdOffer_pricesUpdatesResource::handlePricesApiException(const PricesApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusinessIdOffer_pricesUpdatesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusinessIdOffer_pricesUpdatesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusinessIdOffer_pricesUpdatesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusinessIdOffer_pricesUpdatesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusinessIdOffer_pricesUpdatesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusinessIdOffer_pricesUpdatesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto updateBusinessPricesRequest = extractJsonModelBodyParam<UpdateBusinessPricesRequest>(bodyContent);
    // Getting the path params
    int64_t businessId = request->get_path_parameter("businessId", 0L);
    
    int status_code = 500;
    EmptyApiResponse resultObject = EmptyApiResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(businessId, updateBusinessPricesRequest);
    }
    catch(const PricesApiException& e) {
        std::tie(status_code, result) = handlePricesApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 423) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "К ресурсу нельзя применить указанный метод.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 423, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, EmptyApiResponse> BusinessesBusinessIdOffer_pricesUpdatesResource::handler_POST(
        int64_t & businessId, UpdateBusinessPricesRequest & updateBusinessPricesRequest)
{
    return handler_POST_func(businessId, updateBusinessPricesRequest);
}


std::string BusinessesBusinessIdOffer_pricesUpdatesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusinessIdOffer_pricesUpdatesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdOffer_pricesUpdatesResource::CampaignsCampaignIdOffer_pricesUpdatesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-prices/updates");
	this->set_method_handler("POST",
		std::bind(&CampaignsCampaignIdOffer_pricesUpdatesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOffer_pricesUpdatesResource::handlePricesApiException(const PricesApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOffer_pricesUpdatesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOffer_pricesUpdatesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOffer_pricesUpdatesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOffer_pricesUpdatesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOffer_pricesUpdatesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOffer_pricesUpdatesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto updatePricesRequest = extractJsonModelBodyParam<UpdatePricesRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    
    int status_code = 500;
    EmptyApiResponse resultObject = EmptyApiResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(campaignId, updatePricesRequest);
    }
    catch(const PricesApiException& e) {
        std::tie(status_code, result) = handlePricesApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 423) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "К ресурсу нельзя применить указанный метод.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 423, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, EmptyApiResponse> CampaignsCampaignIdOffer_pricesUpdatesResource::handler_POST(
        int64_t & campaignId, UpdatePricesRequest & updatePricesRequest)
{
    return handler_POST_func(campaignId, updatePricesRequest);
}


std::string CampaignsCampaignIdOffer_pricesUpdatesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOffer_pricesUpdatesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace PricesApiResources */

PricesApi::PricesApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

PricesApi::~PricesApi() {}

std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesResource> PricesApi::getCampaignsCampaignIdOffer_pricesResource() {
    if (!m_spCampaignsCampaignIdOffer_pricesResource) {
        setResource(std::make_shared<PricesApiResources::CampaignsCampaignIdOffer_pricesResource>());
    }
    return m_spCampaignsCampaignIdOffer_pricesResource;
}
std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource> PricesApi::getCampaignsCampaignIdOffer_pricesSuggestionsResource() {
    if (!m_spCampaignsCampaignIdOffer_pricesSuggestionsResource) {
        setResource(std::make_shared<PricesApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource>());
    }
    return m_spCampaignsCampaignIdOffer_pricesSuggestionsResource;
}
std::shared_ptr<PricesApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource> PricesApi::getBusinessesBusinessIdOffer_pricesUpdatesResource() {
    if (!m_spBusinessesBusinessIdOffer_pricesUpdatesResource) {
        setResource(std::make_shared<PricesApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource>());
    }
    return m_spBusinessesBusinessIdOffer_pricesUpdatesResource;
}
std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource> PricesApi::getCampaignsCampaignIdOffer_pricesUpdatesResource() {
    if (!m_spCampaignsCampaignIdOffer_pricesUpdatesResource) {
        setResource(std::make_shared<PricesApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource>());
    }
    return m_spCampaignsCampaignIdOffer_pricesUpdatesResource;
}
void PricesApi::setResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesResource> resource) {
    m_spCampaignsCampaignIdOffer_pricesResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOffer_pricesResource);
}
void PricesApi::setResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource> resource) {
    m_spCampaignsCampaignIdOffer_pricesSuggestionsResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOffer_pricesSuggestionsResource);
}
void PricesApi::setResource(std::shared_ptr<PricesApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource> resource) {
    m_spBusinessesBusinessIdOffer_pricesUpdatesResource = resource;
    m_service->publish(m_spBusinessesBusinessIdOffer_pricesUpdatesResource);
}
void PricesApi::setResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource> resource) {
    m_spCampaignsCampaignIdOffer_pricesUpdatesResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOffer_pricesUpdatesResource);
}
void PricesApi::setPricesApiCampaignsCampaignIdOffer_pricesResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesResource> spCampaignsCampaignIdOffer_pricesResource) {
    m_spCampaignsCampaignIdOffer_pricesResource = spCampaignsCampaignIdOffer_pricesResource;
    m_service->publish(m_spCampaignsCampaignIdOffer_pricesResource);
}
void PricesApi::setPricesApiCampaignsCampaignIdOffer_pricesSuggestionsResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource> spCampaignsCampaignIdOffer_pricesSuggestionsResource) {
    m_spCampaignsCampaignIdOffer_pricesSuggestionsResource = spCampaignsCampaignIdOffer_pricesSuggestionsResource;
    m_service->publish(m_spCampaignsCampaignIdOffer_pricesSuggestionsResource);
}
void PricesApi::setPricesApiBusinessesBusinessIdOffer_pricesUpdatesResource(std::shared_ptr<PricesApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource> spBusinessesBusinessIdOffer_pricesUpdatesResource) {
    m_spBusinessesBusinessIdOffer_pricesUpdatesResource = spBusinessesBusinessIdOffer_pricesUpdatesResource;
    m_service->publish(m_spBusinessesBusinessIdOffer_pricesUpdatesResource);
}
void PricesApi::setPricesApiCampaignsCampaignIdOffer_pricesUpdatesResource(std::shared_ptr<PricesApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource> spCampaignsCampaignIdOffer_pricesUpdatesResource) {
    m_spCampaignsCampaignIdOffer_pricesUpdatesResource = spCampaignsCampaignIdOffer_pricesUpdatesResource;
    m_service->publish(m_spCampaignsCampaignIdOffer_pricesUpdatesResource);
}


void PricesApi::publishDefaultResources() {
    if (!m_spCampaignsCampaignIdOffer_pricesResource) {
        setResource(std::make_shared<PricesApiResources::CampaignsCampaignIdOffer_pricesResource>());
    }
    if (!m_spCampaignsCampaignIdOffer_pricesSuggestionsResource) {
        setResource(std::make_shared<PricesApiResources::CampaignsCampaignIdOffer_pricesSuggestionsResource>());
    }
    if (!m_spBusinessesBusinessIdOffer_pricesUpdatesResource) {
        setResource(std::make_shared<PricesApiResources::BusinessesBusinessIdOffer_pricesUpdatesResource>());
    }
    if (!m_spCampaignsCampaignIdOffer_pricesUpdatesResource) {
        setResource(std::make_shared<PricesApiResources::CampaignsCampaignIdOffer_pricesUpdatesResource>());
    }
}

std::shared_ptr<restbed::Service> PricesApi::service() {
    return m_service;
}


}
}
}
}

