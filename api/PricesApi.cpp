/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "PricesApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string PricesApi::base = "";

PricesApi::PricesApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void PricesApi::init() {
    setupRoutes();
}

void PricesApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/campaigns/:campaignId/offer-prices", Routes::bind(&PricesApi::get_prices_handler, this));
    Routes::Post(*router, base + "/campaigns/:campaignId/offer-prices", Routes::bind(&PricesApi::get_prices_by_offer_ids_handler, this));
    Routes::Post(*router, base + "/campaigns/:campaignId/offer-prices/suggestions", Routes::bind(&PricesApi::get_suggested_prices_handler, this));
    Routes::Post(*router, base + "/businesses/:businessId/offer-prices/updates", Routes::bind(&PricesApi::update_business_prices_handler, this));
    Routes::Post(*router, base + "/campaigns/:campaignId/offer-prices/updates", Routes::bind(&PricesApi::update_prices_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&PricesApi::prices_api_default_handler, this));
}

void PricesApi::handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleParsingException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> PricesApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

void PricesApi::handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleOperationException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> PricesApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void PricesApi::get_prices_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    
    // Getting the query params
    auto pageTokenQuery = request.query().get("page_token");
    std::optional<std::string> pageToken;
    if(pageTokenQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(pageTokenQuery.value(), valueQuery_instance)){
            pageToken = valueQuery_instance;
        }
    }
    auto limitQuery = request.query().get("limit");
    std::optional<int32_t> limit;
    if(limitQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(limitQuery.value(), valueQuery_instance)){
            limit = valueQuery_instance;
        }
    }
    auto archivedQuery = request.query().get("archived");
    std::optional<bool> archived;
    if(archivedQuery.has_value()){
        bool valueQuery_instance;
        if(fromStringValue(archivedQuery.value(), valueQuery_instance)){
            archived = valueQuery_instance;
        }
    }
    
    try {
        this->get_prices(campaignId, pageToken, limit, archived, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void PricesApi::get_prices_by_offer_ids_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    
    // Getting the body param
    
    GetPricesByOfferIdsRequest getPricesByOfferIdsRequest;
    
    // Getting the query params
    auto pageTokenQuery = request.query().get("page_token");
    std::optional<std::string> pageToken;
    if(pageTokenQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(pageTokenQuery.value(), valueQuery_instance)){
            pageToken = valueQuery_instance;
        }
    }
    auto limitQuery = request.query().get("limit");
    std::optional<int32_t> limit;
    if(limitQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(limitQuery.value(), valueQuery_instance)){
            limit = valueQuery_instance;
        }
    }
    
    try {
        nlohmann::json::parse(request.body()).get_to(getPricesByOfferIdsRequest);
        getPricesByOfferIdsRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->get_prices_by_offer_ids(campaignId, pageToken, limit, getPricesByOfferIdsRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void PricesApi::get_suggested_prices_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    
    // Getting the body param
    
    SuggestPricesRequest suggestPricesRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(suggestPricesRequest);
        suggestPricesRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->get_suggested_prices(campaignId, suggestPricesRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void PricesApi::update_business_prices_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto businessId = request.param(":businessId").as<int64_t>();
    
    // Getting the body param
    
    UpdateBusinessPricesRequest updateBusinessPricesRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(updateBusinessPricesRequest);
        updateBusinessPricesRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->update_business_prices(businessId, updateBusinessPricesRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void PricesApi::update_prices_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    
    // Getting the body param
    
    UpdatePricesRequest updatePricesRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(updatePricesRequest);
        updatePricesRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->update_prices(campaignId, updatePricesRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void PricesApi::prices_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

