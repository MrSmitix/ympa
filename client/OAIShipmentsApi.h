/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShipmentsApi_H
#define OAI_OAIShipmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIConfirmShipmentRequest.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetShipmentOrdersInfoResponse.h"
#include "OAIGetShipmentResponse.h"
#include "OAIHttpFileElement.h"
#include "OAISearchShipmentsRequest.h"
#include "OAISearchShipmentsResponse.h"
#include "OAISetShipmentPalletsCountRequest.h"
#include "OAIShipmentPalletLabelPageFormatType.h"
#include "OAITransferOrdersFromShipmentRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShipmentsApi : public QObject {
    Q_OBJECT

public:
    OAIShipmentsApi(const int timeOut = 0);
    ~OAIShipmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    * @param[in]  oai_confirm_shipment_request OAIConfirmShipmentRequest [optional]
    */
    void confirmShipment(const qint64 &campaign_id, const qint64 &shipment_id, const ::OpenAPI::OptionalParam<OAIConfirmShipmentRequest> &oai_confirm_shipment_request = ::OpenAPI::OptionalParam<OAIConfirmShipmentRequest>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    */
    void downloadShipmentAct(const qint64 &campaign_id, const qint64 &shipment_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    */
    void downloadShipmentDiscrepancyAct(const qint64 &campaign_id, const qint64 &shipment_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    */
    void downloadShipmentInboundAct(const qint64 &campaign_id, const qint64 &shipment_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    * @param[in]  format OAIShipmentPalletLabelPageFormatType [optional]
    */
    void downloadShipmentPalletLabels(const qint64 &campaign_id, const qint64 &shipment_id, const ::OpenAPI::OptionalParam<OAIShipmentPalletLabelPageFormatType> &format = ::OpenAPI::OptionalParam<OAIShipmentPalletLabelPageFormatType>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  warehouse_id qint32 [optional]
    */
    void downloadShipmentReceptionTransferAct(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<qint32> &warehouse_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    */
    void downloadShipmentTransportationWaybill(const qint64 &campaign_id, const qint64 &shipment_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    * @param[in]  cancelled_orders bool [optional]
    */
    void getShipment(const qint64 &campaign_id, const qint64 &shipment_id, const ::OpenAPI::OptionalParam<bool> &cancelled_orders = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    */
    void getShipmentOrdersInfo(const qint64 &campaign_id, const qint64 &shipment_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_search_shipments_request OAISearchShipmentsRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void searchShipments(const qint64 &campaign_id, const OAISearchShipmentsRequest &oai_search_shipments_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    * @param[in]  oai_set_shipment_pallets_count_request OAISetShipmentPalletsCountRequest [required]
    */
    void setShipmentPalletsCount(const qint64 &campaign_id, const qint64 &shipment_id, const OAISetShipmentPalletsCountRequest &oai_set_shipment_pallets_count_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    * @param[in]  oai_transfer_orders_from_shipment_request OAITransferOrdersFromShipmentRequest [required]
    */
    void transferOrdersFromShipment(const qint64 &campaign_id, const qint64 &shipment_id, const OAITransferOrdersFromShipmentRequest &oai_transfer_orders_from_shipment_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void confirmShipmentCallback(OAIHttpRequestWorker *worker);
    void downloadShipmentActCallback(OAIHttpRequestWorker *worker);
    void downloadShipmentDiscrepancyActCallback(OAIHttpRequestWorker *worker);
    void downloadShipmentInboundActCallback(OAIHttpRequestWorker *worker);
    void downloadShipmentPalletLabelsCallback(OAIHttpRequestWorker *worker);
    void downloadShipmentReceptionTransferActCallback(OAIHttpRequestWorker *worker);
    void downloadShipmentTransportationWaybillCallback(OAIHttpRequestWorker *worker);
    void getShipmentCallback(OAIHttpRequestWorker *worker);
    void getShipmentOrdersInfoCallback(OAIHttpRequestWorker *worker);
    void searchShipmentsCallback(OAIHttpRequestWorker *worker);
    void setShipmentPalletsCountCallback(OAIHttpRequestWorker *worker);
    void transferOrdersFromShipmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void confirmShipmentSignal(OAIEmptyApiResponse summary);
    void downloadShipmentActSignal(OAIHttpFileElement summary);
    void downloadShipmentDiscrepancyActSignal(OAIHttpFileElement summary);
    void downloadShipmentInboundActSignal(OAIHttpFileElement summary);
    void downloadShipmentPalletLabelsSignal(OAIHttpFileElement summary);
    void downloadShipmentReceptionTransferActSignal(OAIHttpFileElement summary);
    void downloadShipmentTransportationWaybillSignal(OAIHttpFileElement summary);
    void getShipmentSignal(OAIGetShipmentResponse summary);
    void getShipmentOrdersInfoSignal(OAIGetShipmentOrdersInfoResponse summary);
    void searchShipmentsSignal(OAISearchShipmentsResponse summary);
    void setShipmentPalletsCountSignal(OAIEmptyApiResponse summary);
    void transferOrdersFromShipmentSignal(OAIEmptyApiResponse summary);


    void confirmShipmentSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void downloadShipmentActSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void downloadShipmentDiscrepancyActSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void downloadShipmentInboundActSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void downloadShipmentPalletLabelsSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void downloadShipmentReceptionTransferActSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void downloadShipmentTransportationWaybillSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getShipmentSignalFull(OAIHttpRequestWorker *worker, OAIGetShipmentResponse summary);
    void getShipmentOrdersInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetShipmentOrdersInfoResponse summary);
    void searchShipmentsSignalFull(OAIHttpRequestWorker *worker, OAISearchShipmentsResponse summary);
    void setShipmentPalletsCountSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void transferOrdersFromShipmentSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);

    Q_DECL_DEPRECATED_X("Use confirmShipmentSignalError() instead")
    void confirmShipmentSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmShipmentSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentActSignalError() instead")
    void downloadShipmentActSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentActSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentDiscrepancyActSignalError() instead")
    void downloadShipmentDiscrepancyActSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentDiscrepancyActSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentInboundActSignalError() instead")
    void downloadShipmentInboundActSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentInboundActSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentPalletLabelsSignalError() instead")
    void downloadShipmentPalletLabelsSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentPalletLabelsSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentReceptionTransferActSignalError() instead")
    void downloadShipmentReceptionTransferActSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentReceptionTransferActSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentTransportationWaybillSignalError() instead")
    void downloadShipmentTransportationWaybillSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentTransportationWaybillSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentSignalError() instead")
    void getShipmentSignalE(OAIGetShipmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentSignalError(OAIGetShipmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentOrdersInfoSignalError() instead")
    void getShipmentOrdersInfoSignalE(OAIGetShipmentOrdersInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentOrdersInfoSignalError(OAIGetShipmentOrdersInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchShipmentsSignalError() instead")
    void searchShipmentsSignalE(OAISearchShipmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchShipmentsSignalError(OAISearchShipmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setShipmentPalletsCountSignalError() instead")
    void setShipmentPalletsCountSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setShipmentPalletsCountSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferOrdersFromShipmentSignalError() instead")
    void transferOrdersFromShipmentSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferOrdersFromShipmentSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use confirmShipmentSignalErrorFull() instead")
    void confirmShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentActSignalErrorFull() instead")
    void downloadShipmentActSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentActSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentDiscrepancyActSignalErrorFull() instead")
    void downloadShipmentDiscrepancyActSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentDiscrepancyActSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentInboundActSignalErrorFull() instead")
    void downloadShipmentInboundActSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentInboundActSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentPalletLabelsSignalErrorFull() instead")
    void downloadShipmentPalletLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentPalletLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentReceptionTransferActSignalErrorFull() instead")
    void downloadShipmentReceptionTransferActSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentReceptionTransferActSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadShipmentTransportationWaybillSignalErrorFull() instead")
    void downloadShipmentTransportationWaybillSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadShipmentTransportationWaybillSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentSignalErrorFull() instead")
    void getShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentOrdersInfoSignalErrorFull() instead")
    void getShipmentOrdersInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentOrdersInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchShipmentsSignalErrorFull() instead")
    void searchShipmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchShipmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setShipmentPalletsCountSignalErrorFull() instead")
    void setShipmentPalletsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setShipmentPalletsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferOrdersFromShipmentSignalErrorFull() instead")
    void transferOrdersFromShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferOrdersFromShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
