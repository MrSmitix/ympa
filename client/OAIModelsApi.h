/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIModelsApi_H
#define OAI_OAIModelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAICurrencyType.h"
#include "OAIGetModelsOffersResponse.h"
#include "OAIGetModelsRequest.h"
#include "OAIGetModelsResponse.h"
#include "OAISearchModelsResponse.h"
#include "OAISortOrderType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIModelsApi : public QObject {
    Q_OBJECT

public:
    OAIModelsApi(const int timeOut = 0);
    ~OAIModelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  model_id qint64 [required]
    * @param[in]  region_id qint64 [required]
    * @param[in]  currency OAICurrencyType [optional]
    */
    void getModel(const qint64 &model_id, const qint64 &region_id, const ::OpenAPI::OptionalParam<OAICurrencyType> &currency = ::OpenAPI::OptionalParam<OAICurrencyType>());

    /**
    * @param[in]  model_id qint64 [required]
    * @param[in]  region_id qint64 [required]
    * @param[in]  currency OAICurrencyType [optional]
    * @param[in]  order_by_price OAISortOrderType [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    void getModelOffers(const qint64 &model_id, const qint64 &region_id, const ::OpenAPI::OptionalParam<OAICurrencyType> &currency = ::OpenAPI::OptionalParam<OAICurrencyType>(), const ::OpenAPI::OptionalParam<OAISortOrderType> &order_by_price = ::OpenAPI::OptionalParam<OAISortOrderType>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  region_id qint64 [required]
    * @param[in]  oai_get_models_request OAIGetModelsRequest [required]
    * @param[in]  currency OAICurrencyType [optional]
    */
    void getModels(const qint64 &region_id, const OAIGetModelsRequest &oai_get_models_request, const ::OpenAPI::OptionalParam<OAICurrencyType> &currency = ::OpenAPI::OptionalParam<OAICurrencyType>());

    /**
    * @param[in]  region_id qint64 [required]
    * @param[in]  oai_get_models_request OAIGetModelsRequest [required]
    * @param[in]  currency OAICurrencyType [optional]
    * @param[in]  order_by_price OAISortOrderType [optional]
    */
    void getModelsOffers(const qint64 &region_id, const OAIGetModelsRequest &oai_get_models_request, const ::OpenAPI::OptionalParam<OAICurrencyType> &currency = ::OpenAPI::OptionalParam<OAICurrencyType>(), const ::OpenAPI::OptionalParam<OAISortOrderType> &order_by_price = ::OpenAPI::OptionalParam<OAISortOrderType>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  region_id qint64 [required]
    * @param[in]  currency OAICurrencyType [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    void searchModels(const QString &query, const qint64 &region_id, const ::OpenAPI::OptionalParam<OAICurrencyType> &currency = ::OpenAPI::OptionalParam<OAICurrencyType>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getModelCallback(OAIHttpRequestWorker *worker);
    void getModelOffersCallback(OAIHttpRequestWorker *worker);
    void getModelsCallback(OAIHttpRequestWorker *worker);
    void getModelsOffersCallback(OAIHttpRequestWorker *worker);
    void searchModelsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getModelSignal(OAIGetModelsResponse summary);
    void getModelOffersSignal(OAIGetModelsOffersResponse summary);
    void getModelsSignal(OAIGetModelsResponse summary);
    void getModelsOffersSignal(OAIGetModelsOffersResponse summary);
    void searchModelsSignal(OAISearchModelsResponse summary);


    void getModelSignalFull(OAIHttpRequestWorker *worker, OAIGetModelsResponse summary);
    void getModelOffersSignalFull(OAIHttpRequestWorker *worker, OAIGetModelsOffersResponse summary);
    void getModelsSignalFull(OAIHttpRequestWorker *worker, OAIGetModelsResponse summary);
    void getModelsOffersSignalFull(OAIHttpRequestWorker *worker, OAIGetModelsOffersResponse summary);
    void searchModelsSignalFull(OAIHttpRequestWorker *worker, OAISearchModelsResponse summary);

    Q_DECL_DEPRECATED_X("Use getModelSignalError() instead")
    void getModelSignalE(OAIGetModelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelSignalError(OAIGetModelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelOffersSignalError() instead")
    void getModelOffersSignalE(OAIGetModelsOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelOffersSignalError(OAIGetModelsOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelsSignalError() instead")
    void getModelsSignalE(OAIGetModelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelsSignalError(OAIGetModelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelsOffersSignalError() instead")
    void getModelsOffersSignalE(OAIGetModelsOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelsOffersSignalError(OAIGetModelsOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchModelsSignalError() instead")
    void searchModelsSignalE(OAISearchModelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchModelsSignalError(OAISearchModelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getModelSignalErrorFull() instead")
    void getModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelOffersSignalErrorFull() instead")
    void getModelOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelsSignalErrorFull() instead")
    void getModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelsOffersSignalErrorFull() instead")
    void getModelsOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelsOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchModelsSignalErrorFull() instead")
    void searchModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
