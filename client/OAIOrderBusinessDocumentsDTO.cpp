/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderBusinessDocumentsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderBusinessDocumentsDTO::OAIOrderBusinessDocumentsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderBusinessDocumentsDTO::OAIOrderBusinessDocumentsDTO() {
    this->initializeModel();
}

OAIOrderBusinessDocumentsDTO::~OAIOrderBusinessDocumentsDTO() {}

void OAIOrderBusinessDocumentsDTO::initializeModel() {

    m_upd_isSet = false;
    m_upd_isValid = false;

    m_ukd_isSet = false;
    m_ukd_isValid = false;

    m_torg_twelve_isSet = false;
    m_torg_twelve_isValid = false;

    m_sf_isSet = false;
    m_sf_isValid = false;

    m_ksf_isSet = false;
    m_ksf_isValid = false;
}

void OAIOrderBusinessDocumentsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderBusinessDocumentsDTO::fromJsonObject(QJsonObject json) {

    m_upd_isValid = ::OpenAPI::fromJsonValue(m_upd, json[QString("upd")]);
    m_upd_isSet = !json[QString("upd")].isNull() && m_upd_isValid;

    m_ukd_isValid = ::OpenAPI::fromJsonValue(m_ukd, json[QString("ukd")]);
    m_ukd_isSet = !json[QString("ukd")].isNull() && m_ukd_isValid;

    m_torg_twelve_isValid = ::OpenAPI::fromJsonValue(m_torg_twelve, json[QString("torgTwelve")]);
    m_torg_twelve_isSet = !json[QString("torgTwelve")].isNull() && m_torg_twelve_isValid;

    m_sf_isValid = ::OpenAPI::fromJsonValue(m_sf, json[QString("sf")]);
    m_sf_isSet = !json[QString("sf")].isNull() && m_sf_isValid;

    m_ksf_isValid = ::OpenAPI::fromJsonValue(m_ksf, json[QString("ksf")]);
    m_ksf_isSet = !json[QString("ksf")].isNull() && m_ksf_isValid;
}

QString OAIOrderBusinessDocumentsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderBusinessDocumentsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_upd.isSet()) {
        obj.insert(QString("upd"), ::OpenAPI::toJsonValue(m_upd));
    }
    if (m_ukd.isSet()) {
        obj.insert(QString("ukd"), ::OpenAPI::toJsonValue(m_ukd));
    }
    if (m_torg_twelve.isSet()) {
        obj.insert(QString("torgTwelve"), ::OpenAPI::toJsonValue(m_torg_twelve));
    }
    if (m_sf.isSet()) {
        obj.insert(QString("sf"), ::OpenAPI::toJsonValue(m_sf));
    }
    if (m_ksf.isSet()) {
        obj.insert(QString("ksf"), ::OpenAPI::toJsonValue(m_ksf));
    }
    return obj;
}

OAIDocumentDTO OAIOrderBusinessDocumentsDTO::getUpd() const {
    return m_upd;
}
void OAIOrderBusinessDocumentsDTO::setUpd(const OAIDocumentDTO &upd) {
    m_upd = upd;
    m_upd_isSet = true;
}

bool OAIOrderBusinessDocumentsDTO::is_upd_Set() const{
    return m_upd_isSet;
}

bool OAIOrderBusinessDocumentsDTO::is_upd_Valid() const{
    return m_upd_isValid;
}

OAIDocumentDTO OAIOrderBusinessDocumentsDTO::getUkd() const {
    return m_ukd;
}
void OAIOrderBusinessDocumentsDTO::setUkd(const OAIDocumentDTO &ukd) {
    m_ukd = ukd;
    m_ukd_isSet = true;
}

bool OAIOrderBusinessDocumentsDTO::is_ukd_Set() const{
    return m_ukd_isSet;
}

bool OAIOrderBusinessDocumentsDTO::is_ukd_Valid() const{
    return m_ukd_isValid;
}

OAIDocumentDTO OAIOrderBusinessDocumentsDTO::getTorgTwelve() const {
    return m_torg_twelve;
}
void OAIOrderBusinessDocumentsDTO::setTorgTwelve(const OAIDocumentDTO &torg_twelve) {
    m_torg_twelve = torg_twelve;
    m_torg_twelve_isSet = true;
}

bool OAIOrderBusinessDocumentsDTO::is_torg_twelve_Set() const{
    return m_torg_twelve_isSet;
}

bool OAIOrderBusinessDocumentsDTO::is_torg_twelve_Valid() const{
    return m_torg_twelve_isValid;
}

OAIDocumentDTO OAIOrderBusinessDocumentsDTO::getSf() const {
    return m_sf;
}
void OAIOrderBusinessDocumentsDTO::setSf(const OAIDocumentDTO &sf) {
    m_sf = sf;
    m_sf_isSet = true;
}

bool OAIOrderBusinessDocumentsDTO::is_sf_Set() const{
    return m_sf_isSet;
}

bool OAIOrderBusinessDocumentsDTO::is_sf_Valid() const{
    return m_sf_isValid;
}

OAIDocumentDTO OAIOrderBusinessDocumentsDTO::getKsf() const {
    return m_ksf;
}
void OAIOrderBusinessDocumentsDTO::setKsf(const OAIDocumentDTO &ksf) {
    m_ksf = ksf;
    m_ksf_isSet = true;
}

bool OAIOrderBusinessDocumentsDTO::is_ksf_Set() const{
    return m_ksf_isSet;
}

bool OAIOrderBusinessDocumentsDTO::is_ksf_Valid() const{
    return m_ksf_isValid;
}

bool OAIOrderBusinessDocumentsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_upd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ukd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_torg_twelve.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ksf.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderBusinessDocumentsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
