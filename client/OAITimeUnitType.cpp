/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeUnitType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeUnitType::OAITimeUnitType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeUnitType::OAITimeUnitType() {
    this->initializeModel();
}

OAITimeUnitType::~OAITimeUnitType() {}

void OAITimeUnitType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITimeUnitType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITimeUnitType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("HOUR", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeUnitType::HOUR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeUnitType::DAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEEK", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeUnitType::WEEK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MONTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeUnitType::MONTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("YEAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeUnitType::YEAR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITimeUnitType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITimeUnitType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITimeUnitType::HOUR:
            val = "HOUR";
            break;
        case eOAITimeUnitType::DAY:
            val = "DAY";
            break;
        case eOAITimeUnitType::WEEK:
            val = "WEEK";
            break;
        case eOAITimeUnitType::MONTH:
            val = "MONTH";
            break;
        case eOAITimeUnitType::YEAR:
            val = "YEAR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITimeUnitType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITimeUnitType::eOAITimeUnitType OAITimeUnitType::getValue() const {
    return m_value;
}

void OAITimeUnitType::setValue(const OAITimeUnitType::eOAITimeUnitType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITimeUnitType::isSet() const {
    
    return m_value_isSet;
}

bool OAITimeUnitType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
