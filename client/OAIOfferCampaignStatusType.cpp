/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferCampaignStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferCampaignStatusType::OAIOfferCampaignStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferCampaignStatusType::OAIOfferCampaignStatusType() {
    this->initializeModel();
}

OAIOfferCampaignStatusType::~OAIOfferCampaignStatusType() {}

void OAIOfferCampaignStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOfferCampaignStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOfferCampaignStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PUBLISHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCampaignStatusType::PUBLISHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHECKING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCampaignStatusType::CHECKING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLED_BY_PARTNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCampaignStatusType::DISABLED_BY_PARTNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLED_AUTOMATICALLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCampaignStatusType::DISABLED_AUTOMATICALLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REJECTED_BY_MARKET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCampaignStatusType::REJECTED_BY_MARKET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATING_CARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCampaignStatusType::CREATING_CARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_CARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCampaignStatusType::NO_CARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_STOCKS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCampaignStatusType::NO_STOCKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ARCHIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCampaignStatusType::ARCHIVED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOfferCampaignStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOfferCampaignStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOfferCampaignStatusType::PUBLISHED:
            val = "PUBLISHED";
            break;
        case eOAIOfferCampaignStatusType::CHECKING:
            val = "CHECKING";
            break;
        case eOAIOfferCampaignStatusType::DISABLED_BY_PARTNER:
            val = "DISABLED_BY_PARTNER";
            break;
        case eOAIOfferCampaignStatusType::DISABLED_AUTOMATICALLY:
            val = "DISABLED_AUTOMATICALLY";
            break;
        case eOAIOfferCampaignStatusType::REJECTED_BY_MARKET:
            val = "REJECTED_BY_MARKET";
            break;
        case eOAIOfferCampaignStatusType::CREATING_CARD:
            val = "CREATING_CARD";
            break;
        case eOAIOfferCampaignStatusType::NO_CARD:
            val = "NO_CARD";
            break;
        case eOAIOfferCampaignStatusType::NO_STOCKS:
            val = "NO_STOCKS";
            break;
        case eOAIOfferCampaignStatusType::ARCHIVED:
            val = "ARCHIVED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOfferCampaignStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOfferCampaignStatusType::eOAIOfferCampaignStatusType OAIOfferCampaignStatusType::getValue() const {
    return m_value;
}

void OAIOfferCampaignStatusType::setValue(const OAIOfferCampaignStatusType::eOAIOfferCampaignStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOfferCampaignStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOfferCampaignStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
