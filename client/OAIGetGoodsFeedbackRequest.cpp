/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetGoodsFeedbackRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetGoodsFeedbackRequest::OAIGetGoodsFeedbackRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetGoodsFeedbackRequest::OAIGetGoodsFeedbackRequest() {
    this->initializeModel();
}

OAIGetGoodsFeedbackRequest::~OAIGetGoodsFeedbackRequest() {}

void OAIGetGoodsFeedbackRequest::initializeModel() {

    m_date_time_from_isSet = false;
    m_date_time_from_isValid = false;

    m_date_time_to_isSet = false;
    m_date_time_to_isValid = false;

    m_reaction_status_isSet = false;
    m_reaction_status_isValid = false;

    m_rating_values_isSet = false;
    m_rating_values_isValid = false;

    m_model_ids_isSet = false;
    m_model_ids_isValid = false;

    m_paid_isSet = false;
    m_paid_isValid = false;
}

void OAIGetGoodsFeedbackRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetGoodsFeedbackRequest::fromJsonObject(QJsonObject json) {

    m_date_time_from_isValid = ::OpenAPI::fromJsonValue(m_date_time_from, json[QString("dateTimeFrom")]);
    m_date_time_from_isSet = !json[QString("dateTimeFrom")].isNull() && m_date_time_from_isValid;

    m_date_time_to_isValid = ::OpenAPI::fromJsonValue(m_date_time_to, json[QString("dateTimeTo")]);
    m_date_time_to_isSet = !json[QString("dateTimeTo")].isNull() && m_date_time_to_isValid;

    m_reaction_status_isValid = ::OpenAPI::fromJsonValue(m_reaction_status, json[QString("reactionStatus")]);
    m_reaction_status_isSet = !json[QString("reactionStatus")].isNull() && m_reaction_status_isValid;

    m_rating_values_isValid = ::OpenAPI::fromJsonValue(m_rating_values, json[QString("ratingValues")]);
    m_rating_values_isSet = !json[QString("ratingValues")].isNull() && m_rating_values_isValid;

    m_model_ids_isValid = ::OpenAPI::fromJsonValue(m_model_ids, json[QString("modelIds")]);
    m_model_ids_isSet = !json[QString("modelIds")].isNull() && m_model_ids_isValid;

    m_paid_isValid = ::OpenAPI::fromJsonValue(m_paid, json[QString("paid")]);
    m_paid_isSet = !json[QString("paid")].isNull() && m_paid_isValid;
}

QString OAIGetGoodsFeedbackRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetGoodsFeedbackRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_from_isSet) {
        obj.insert(QString("dateTimeFrom"), ::OpenAPI::toJsonValue(m_date_time_from));
    }
    if (m_date_time_to_isSet) {
        obj.insert(QString("dateTimeTo"), ::OpenAPI::toJsonValue(m_date_time_to));
    }
    if (m_reaction_status.isSet()) {
        obj.insert(QString("reactionStatus"), ::OpenAPI::toJsonValue(m_reaction_status));
    }
    if (m_rating_values.size() > 0) {
        obj.insert(QString("ratingValues"), ::OpenAPI::toJsonValue(m_rating_values));
    }
    if (m_model_ids.size() > 0) {
        obj.insert(QString("modelIds"), ::OpenAPI::toJsonValue(m_model_ids));
    }
    if (m_paid_isSet) {
        obj.insert(QString("paid"), ::OpenAPI::toJsonValue(m_paid));
    }
    return obj;
}

QDateTime OAIGetGoodsFeedbackRequest::getDateTimeFrom() const {
    return m_date_time_from;
}
void OAIGetGoodsFeedbackRequest::setDateTimeFrom(const QDateTime &date_time_from) {
    m_date_time_from = date_time_from;
    m_date_time_from_isSet = true;
}

bool OAIGetGoodsFeedbackRequest::is_date_time_from_Set() const{
    return m_date_time_from_isSet;
}

bool OAIGetGoodsFeedbackRequest::is_date_time_from_Valid() const{
    return m_date_time_from_isValid;
}

QDateTime OAIGetGoodsFeedbackRequest::getDateTimeTo() const {
    return m_date_time_to;
}
void OAIGetGoodsFeedbackRequest::setDateTimeTo(const QDateTime &date_time_to) {
    m_date_time_to = date_time_to;
    m_date_time_to_isSet = true;
}

bool OAIGetGoodsFeedbackRequest::is_date_time_to_Set() const{
    return m_date_time_to_isSet;
}

bool OAIGetGoodsFeedbackRequest::is_date_time_to_Valid() const{
    return m_date_time_to_isValid;
}

OAIFeedbackReactionStatusType OAIGetGoodsFeedbackRequest::getReactionStatus() const {
    return m_reaction_status;
}
void OAIGetGoodsFeedbackRequest::setReactionStatus(const OAIFeedbackReactionStatusType &reaction_status) {
    m_reaction_status = reaction_status;
    m_reaction_status_isSet = true;
}

bool OAIGetGoodsFeedbackRequest::is_reaction_status_Set() const{
    return m_reaction_status_isSet;
}

bool OAIGetGoodsFeedbackRequest::is_reaction_status_Valid() const{
    return m_reaction_status_isValid;
}

QSet<qint32> OAIGetGoodsFeedbackRequest::getRatingValues() const {
    return m_rating_values;
}
void OAIGetGoodsFeedbackRequest::setRatingValues(const QSet<qint32> &rating_values) {
    m_rating_values = rating_values;
    m_rating_values_isSet = true;
}

bool OAIGetGoodsFeedbackRequest::is_rating_values_Set() const{
    return m_rating_values_isSet;
}

bool OAIGetGoodsFeedbackRequest::is_rating_values_Valid() const{
    return m_rating_values_isValid;
}

QSet<qint64> OAIGetGoodsFeedbackRequest::getModelIds() const {
    return m_model_ids;
}
void OAIGetGoodsFeedbackRequest::setModelIds(const QSet<qint64> &model_ids) {
    m_model_ids = model_ids;
    m_model_ids_isSet = true;
}

bool OAIGetGoodsFeedbackRequest::is_model_ids_Set() const{
    return m_model_ids_isSet;
}

bool OAIGetGoodsFeedbackRequest::is_model_ids_Valid() const{
    return m_model_ids_isValid;
}

bool OAIGetGoodsFeedbackRequest::isPaid() const {
    return m_paid;
}
void OAIGetGoodsFeedbackRequest::setPaid(const bool &paid) {
    m_paid = paid;
    m_paid_isSet = true;
}

bool OAIGetGoodsFeedbackRequest::is_paid_Set() const{
    return m_paid_isSet;
}

bool OAIGetGoodsFeedbackRequest::is_paid_Valid() const{
    return m_paid_isValid;
}

bool OAIGetGoodsFeedbackRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reaction_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetGoodsFeedbackRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
