/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderDeliveryAddressDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderDeliveryAddressDTO::OAIOrderDeliveryAddressDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderDeliveryAddressDTO::OAIOrderDeliveryAddressDTO() {
    this->initializeModel();
}

OAIOrderDeliveryAddressDTO::~OAIOrderDeliveryAddressDTO() {}

void OAIOrderDeliveryAddressDTO::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_district_isSet = false;
    m_district_isValid = false;

    m_subway_isSet = false;
    m_subway_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_house_isSet = false;
    m_house_isValid = false;

    m_block_isSet = false;
    m_block_isValid = false;

    m_entrance_isSet = false;
    m_entrance_isValid = false;

    m_entryphone_isSet = false;
    m_entryphone_isValid = false;

    m_floor_isSet = false;
    m_floor_isValid = false;

    m_apartment_isSet = false;
    m_apartment_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_gps_isSet = false;
    m_gps_isValid = false;
}

void OAIOrderDeliveryAddressDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderDeliveryAddressDTO::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_subway_isValid = ::OpenAPI::fromJsonValue(m_subway, json[QString("subway")]);
    m_subway_isSet = !json[QString("subway")].isNull() && m_subway_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_house_isValid = ::OpenAPI::fromJsonValue(m_house, json[QString("house")]);
    m_house_isSet = !json[QString("house")].isNull() && m_house_isValid;

    m_block_isValid = ::OpenAPI::fromJsonValue(m_block, json[QString("block")]);
    m_block_isSet = !json[QString("block")].isNull() && m_block_isValid;

    m_entrance_isValid = ::OpenAPI::fromJsonValue(m_entrance, json[QString("entrance")]);
    m_entrance_isSet = !json[QString("entrance")].isNull() && m_entrance_isValid;

    m_entryphone_isValid = ::OpenAPI::fromJsonValue(m_entryphone, json[QString("entryphone")]);
    m_entryphone_isSet = !json[QString("entryphone")].isNull() && m_entryphone_isValid;

    m_floor_isValid = ::OpenAPI::fromJsonValue(m_floor, json[QString("floor")]);
    m_floor_isSet = !json[QString("floor")].isNull() && m_floor_isValid;

    m_apartment_isValid = ::OpenAPI::fromJsonValue(m_apartment, json[QString("apartment")]);
    m_apartment_isSet = !json[QString("apartment")].isNull() && m_apartment_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_gps_isValid = ::OpenAPI::fromJsonValue(m_gps, json[QString("gps")]);
    m_gps_isSet = !json[QString("gps")].isNull() && m_gps_isValid;
}

QString OAIOrderDeliveryAddressDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderDeliveryAddressDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_district_isSet) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_subway_isSet) {
        obj.insert(QString("subway"), ::OpenAPI::toJsonValue(m_subway));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_house_isSet) {
        obj.insert(QString("house"), ::OpenAPI::toJsonValue(m_house));
    }
    if (m_block_isSet) {
        obj.insert(QString("block"), ::OpenAPI::toJsonValue(m_block));
    }
    if (m_entrance_isSet) {
        obj.insert(QString("entrance"), ::OpenAPI::toJsonValue(m_entrance));
    }
    if (m_entryphone_isSet) {
        obj.insert(QString("entryphone"), ::OpenAPI::toJsonValue(m_entryphone));
    }
    if (m_floor_isSet) {
        obj.insert(QString("floor"), ::OpenAPI::toJsonValue(m_floor));
    }
    if (m_apartment_isSet) {
        obj.insert(QString("apartment"), ::OpenAPI::toJsonValue(m_apartment));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_recipient_isSet) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_gps.isSet()) {
        obj.insert(QString("gps"), ::OpenAPI::toJsonValue(m_gps));
    }
    return obj;
}

QString OAIOrderDeliveryAddressDTO::getCountry() const {
    return m_country;
}
void OAIOrderDeliveryAddressDTO::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_country_Set() const{
    return m_country_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIOrderDeliveryAddressDTO::getPostcode() const {
    return m_postcode;
}
void OAIOrderDeliveryAddressDTO::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_postcode_Valid() const{
    return m_postcode_isValid;
}

QString OAIOrderDeliveryAddressDTO::getCity() const {
    return m_city;
}
void OAIOrderDeliveryAddressDTO::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_city_Set() const{
    return m_city_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIOrderDeliveryAddressDTO::getDistrict() const {
    return m_district;
}
void OAIOrderDeliveryAddressDTO::setDistrict(const QString &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_district_Set() const{
    return m_district_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_district_Valid() const{
    return m_district_isValid;
}

QString OAIOrderDeliveryAddressDTO::getSubway() const {
    return m_subway;
}
void OAIOrderDeliveryAddressDTO::setSubway(const QString &subway) {
    m_subway = subway;
    m_subway_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_subway_Set() const{
    return m_subway_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_subway_Valid() const{
    return m_subway_isValid;
}

QString OAIOrderDeliveryAddressDTO::getStreet() const {
    return m_street;
}
void OAIOrderDeliveryAddressDTO::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_street_Set() const{
    return m_street_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIOrderDeliveryAddressDTO::getHouse() const {
    return m_house;
}
void OAIOrderDeliveryAddressDTO::setHouse(const QString &house) {
    m_house = house;
    m_house_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_house_Set() const{
    return m_house_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_house_Valid() const{
    return m_house_isValid;
}

QString OAIOrderDeliveryAddressDTO::getBlock() const {
    return m_block;
}
void OAIOrderDeliveryAddressDTO::setBlock(const QString &block) {
    m_block = block;
    m_block_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_block_Set() const{
    return m_block_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_block_Valid() const{
    return m_block_isValid;
}

QString OAIOrderDeliveryAddressDTO::getEntrance() const {
    return m_entrance;
}
void OAIOrderDeliveryAddressDTO::setEntrance(const QString &entrance) {
    m_entrance = entrance;
    m_entrance_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_entrance_Set() const{
    return m_entrance_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_entrance_Valid() const{
    return m_entrance_isValid;
}

QString OAIOrderDeliveryAddressDTO::getEntryphone() const {
    return m_entryphone;
}
void OAIOrderDeliveryAddressDTO::setEntryphone(const QString &entryphone) {
    m_entryphone = entryphone;
    m_entryphone_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_entryphone_Set() const{
    return m_entryphone_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_entryphone_Valid() const{
    return m_entryphone_isValid;
}

QString OAIOrderDeliveryAddressDTO::getFloor() const {
    return m_floor;
}
void OAIOrderDeliveryAddressDTO::setFloor(const QString &floor) {
    m_floor = floor;
    m_floor_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_floor_Set() const{
    return m_floor_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_floor_Valid() const{
    return m_floor_isValid;
}

QString OAIOrderDeliveryAddressDTO::getApartment() const {
    return m_apartment;
}
void OAIOrderDeliveryAddressDTO::setApartment(const QString &apartment) {
    m_apartment = apartment;
    m_apartment_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_apartment_Set() const{
    return m_apartment_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_apartment_Valid() const{
    return m_apartment_isValid;
}

QString OAIOrderDeliveryAddressDTO::getPhone() const {
    return m_phone;
}
void OAIOrderDeliveryAddressDTO::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIOrderDeliveryAddressDTO::getRecipient() const {
    return m_recipient;
}
void OAIOrderDeliveryAddressDTO::setRecipient(const QString &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_recipient_Valid() const{
    return m_recipient_isValid;
}

OAIGpsDTO OAIOrderDeliveryAddressDTO::getGps() const {
    return m_gps;
}
void OAIOrderDeliveryAddressDTO::setGps(const OAIGpsDTO &gps) {
    m_gps = gps;
    m_gps_isSet = true;
}

bool OAIOrderDeliveryAddressDTO::is_gps_Set() const{
    return m_gps_isSet;
}

bool OAIOrderDeliveryAddressDTO::is_gps_Valid() const{
    return m_gps_isValid;
}

bool OAIOrderDeliveryAddressDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entrance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entryphone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apartment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderDeliveryAddressDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
