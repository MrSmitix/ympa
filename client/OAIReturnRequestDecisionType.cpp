/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnRequestDecisionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnRequestDecisionType::OAIReturnRequestDecisionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnRequestDecisionType::OAIReturnRequestDecisionType() {
    this->initializeModel();
}

OAIReturnRequestDecisionType::~OAIReturnRequestDecisionType() {}

void OAIReturnRequestDecisionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReturnRequestDecisionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReturnRequestDecisionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("REFUND_MONEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnRequestDecisionType::REFUND_MONEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REFUND_MONEY_INCLUDING_SHIPMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnRequestDecisionType::REFUND_MONEY_INCLUDING_SHIPMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPAIR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnRequestDecisionType::REPAIR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPLACE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnRequestDecisionType::REPLACE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SEND_TO_EXAMINATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnRequestDecisionType::SEND_TO_EXAMINATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DECLINE_REFUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnRequestDecisionType::DECLINE_REFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER_DECISION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnRequestDecisionType::OTHER_DECISION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReturnRequestDecisionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReturnRequestDecisionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReturnRequestDecisionType::REFUND_MONEY:
            val = "REFUND_MONEY";
            break;
        case eOAIReturnRequestDecisionType::REFUND_MONEY_INCLUDING_SHIPMENT:
            val = "REFUND_MONEY_INCLUDING_SHIPMENT";
            break;
        case eOAIReturnRequestDecisionType::REPAIR:
            val = "REPAIR";
            break;
        case eOAIReturnRequestDecisionType::REPLACE:
            val = "REPLACE";
            break;
        case eOAIReturnRequestDecisionType::SEND_TO_EXAMINATION:
            val = "SEND_TO_EXAMINATION";
            break;
        case eOAIReturnRequestDecisionType::DECLINE_REFUND:
            val = "DECLINE_REFUND";
            break;
        case eOAIReturnRequestDecisionType::OTHER_DECISION:
            val = "OTHER_DECISION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReturnRequestDecisionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReturnRequestDecisionType::eOAIReturnRequestDecisionType OAIReturnRequestDecisionType::getValue() const {
    return m_value;
}

void OAIReturnRequestDecisionType::setValue(const OAIReturnRequestDecisionType::eOAIReturnRequestDecisionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReturnRequestDecisionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIReturnRequestDecisionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
