/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedIndexLogsRecordDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedIndexLogsRecordDTO::OAIFeedIndexLogsRecordDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedIndexLogsRecordDTO::OAIFeedIndexLogsRecordDTO() {
    this->initializeModel();
}

OAIFeedIndexLogsRecordDTO::~OAIFeedIndexLogsRecordDTO() {}

void OAIFeedIndexLogsRecordDTO::initializeModel() {

    m_download_time_isSet = false;
    m_download_time_isValid = false;

    m_file_time_isSet = false;
    m_file_time_isValid = false;

    m_generation_id_isSet = false;
    m_generation_id_isValid = false;

    m_index_type_isSet = false;
    m_index_type_isValid = false;

    m_published_time_isSet = false;
    m_published_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_offers_isSet = false;
    m_offers_isValid = false;
}

void OAIFeedIndexLogsRecordDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedIndexLogsRecordDTO::fromJsonObject(QJsonObject json) {

    m_download_time_isValid = ::OpenAPI::fromJsonValue(m_download_time, json[QString("downloadTime")]);
    m_download_time_isSet = !json[QString("downloadTime")].isNull() && m_download_time_isValid;

    m_file_time_isValid = ::OpenAPI::fromJsonValue(m_file_time, json[QString("fileTime")]);
    m_file_time_isSet = !json[QString("fileTime")].isNull() && m_file_time_isValid;

    m_generation_id_isValid = ::OpenAPI::fromJsonValue(m_generation_id, json[QString("generationId")]);
    m_generation_id_isSet = !json[QString("generationId")].isNull() && m_generation_id_isValid;

    m_index_type_isValid = ::OpenAPI::fromJsonValue(m_index_type, json[QString("indexType")]);
    m_index_type_isSet = !json[QString("indexType")].isNull() && m_index_type_isValid;

    m_published_time_isValid = ::OpenAPI::fromJsonValue(m_published_time, json[QString("publishedTime")]);
    m_published_time_isSet = !json[QString("publishedTime")].isNull() && m_published_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_offers_isValid = ::OpenAPI::fromJsonValue(m_offers, json[QString("offers")]);
    m_offers_isSet = !json[QString("offers")].isNull() && m_offers_isValid;
}

QString OAIFeedIndexLogsRecordDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedIndexLogsRecordDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_download_time_isSet) {
        obj.insert(QString("downloadTime"), ::OpenAPI::toJsonValue(m_download_time));
    }
    if (m_file_time_isSet) {
        obj.insert(QString("fileTime"), ::OpenAPI::toJsonValue(m_file_time));
    }
    if (m_generation_id_isSet) {
        obj.insert(QString("generationId"), ::OpenAPI::toJsonValue(m_generation_id));
    }
    if (m_index_type.isSet()) {
        obj.insert(QString("indexType"), ::OpenAPI::toJsonValue(m_index_type));
    }
    if (m_published_time_isSet) {
        obj.insert(QString("publishedTime"), ::OpenAPI::toJsonValue(m_published_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_offers.isSet()) {
        obj.insert(QString("offers"), ::OpenAPI::toJsonValue(m_offers));
    }
    return obj;
}

QDateTime OAIFeedIndexLogsRecordDTO::getDownloadTime() const {
    return m_download_time;
}
void OAIFeedIndexLogsRecordDTO::setDownloadTime(const QDateTime &download_time) {
    m_download_time = download_time;
    m_download_time_isSet = true;
}

bool OAIFeedIndexLogsRecordDTO::is_download_time_Set() const{
    return m_download_time_isSet;
}

bool OAIFeedIndexLogsRecordDTO::is_download_time_Valid() const{
    return m_download_time_isValid;
}

QDateTime OAIFeedIndexLogsRecordDTO::getFileTime() const {
    return m_file_time;
}
void OAIFeedIndexLogsRecordDTO::setFileTime(const QDateTime &file_time) {
    m_file_time = file_time;
    m_file_time_isSet = true;
}

bool OAIFeedIndexLogsRecordDTO::is_file_time_Set() const{
    return m_file_time_isSet;
}

bool OAIFeedIndexLogsRecordDTO::is_file_time_Valid() const{
    return m_file_time_isValid;
}

qint64 OAIFeedIndexLogsRecordDTO::getGenerationId() const {
    return m_generation_id;
}
void OAIFeedIndexLogsRecordDTO::setGenerationId(const qint64 &generation_id) {
    m_generation_id = generation_id;
    m_generation_id_isSet = true;
}

bool OAIFeedIndexLogsRecordDTO::is_generation_id_Set() const{
    return m_generation_id_isSet;
}

bool OAIFeedIndexLogsRecordDTO::is_generation_id_Valid() const{
    return m_generation_id_isValid;
}

OAIFeedIndexLogsIndexType OAIFeedIndexLogsRecordDTO::getIndexType() const {
    return m_index_type;
}
void OAIFeedIndexLogsRecordDTO::setIndexType(const OAIFeedIndexLogsIndexType &index_type) {
    m_index_type = index_type;
    m_index_type_isSet = true;
}

bool OAIFeedIndexLogsRecordDTO::is_index_type_Set() const{
    return m_index_type_isSet;
}

bool OAIFeedIndexLogsRecordDTO::is_index_type_Valid() const{
    return m_index_type_isValid;
}

QDateTime OAIFeedIndexLogsRecordDTO::getPublishedTime() const {
    return m_published_time;
}
void OAIFeedIndexLogsRecordDTO::setPublishedTime(const QDateTime &published_time) {
    m_published_time = published_time;
    m_published_time_isSet = true;
}

bool OAIFeedIndexLogsRecordDTO::is_published_time_Set() const{
    return m_published_time_isSet;
}

bool OAIFeedIndexLogsRecordDTO::is_published_time_Valid() const{
    return m_published_time_isValid;
}

OAIFeedIndexLogsStatusType OAIFeedIndexLogsRecordDTO::getStatus() const {
    return m_status;
}
void OAIFeedIndexLogsRecordDTO::setStatus(const OAIFeedIndexLogsStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFeedIndexLogsRecordDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFeedIndexLogsRecordDTO::is_status_Valid() const{
    return m_status_isValid;
}

OAIFeedIndexLogsErrorDTO OAIFeedIndexLogsRecordDTO::getError() const {
    return m_error;
}
void OAIFeedIndexLogsRecordDTO::setError(const OAIFeedIndexLogsErrorDTO &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIFeedIndexLogsRecordDTO::is_error_Set() const{
    return m_error_isSet;
}

bool OAIFeedIndexLogsRecordDTO::is_error_Valid() const{
    return m_error_isValid;
}

OAIFeedIndexLogsOffersDTO OAIFeedIndexLogsRecordDTO::getOffers() const {
    return m_offers;
}
void OAIFeedIndexLogsRecordDTO::setOffers(const OAIFeedIndexLogsOffersDTO &offers) {
    m_offers = offers;
    m_offers_isSet = true;
}

bool OAIFeedIndexLogsRecordDTO::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAIFeedIndexLogsRecordDTO::is_offers_Valid() const{
    return m_offers_isValid;
}

bool OAIFeedIndexLogsRecordDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_download_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedIndexLogsRecordDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
