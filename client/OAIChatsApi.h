/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChatsApi_H
#define OAI_OAIChatsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAICreateChatRequest.h"
#include "OAICreateChatResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetChatHistoryRequest.h"
#include "OAIGetChatHistoryResponse.h"
#include "OAIGetChatsRequest.h"
#include "OAIGetChatsResponse.h"
#include "OAIHttpFileElement.h"
#include "OAISendMessageToChatRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChatsApi : public QObject {
    Q_OBJECT

public:
    OAIChatsApi(const int timeOut = 0);
    ~OAIChatsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_create_chat_request OAICreateChatRequest [required]
    */
    void createChat(const qint64 &business_id, const OAICreateChatRequest &oai_create_chat_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  chat_id qint64 [required]
    * @param[in]  oai_get_chat_history_request OAIGetChatHistoryRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getChatHistory(const qint64 &business_id, const qint64 &chat_id, const OAIGetChatHistoryRequest &oai_get_chat_history_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_chats_request OAIGetChatsRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getChats(const qint64 &business_id, const OAIGetChatsRequest &oai_get_chats_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  chat_id qint64 [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    void sendFileToChat(const qint64 &business_id, const qint64 &chat_id, const OAIHttpFileElement &file);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  chat_id qint64 [required]
    * @param[in]  oai_send_message_to_chat_request OAISendMessageToChatRequest [required]
    */
    void sendMessageToChat(const qint64 &business_id, const qint64 &chat_id, const OAISendMessageToChatRequest &oai_send_message_to_chat_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createChatCallback(OAIHttpRequestWorker *worker);
    void getChatHistoryCallback(OAIHttpRequestWorker *worker);
    void getChatsCallback(OAIHttpRequestWorker *worker);
    void sendFileToChatCallback(OAIHttpRequestWorker *worker);
    void sendMessageToChatCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createChatSignal(OAICreateChatResponse summary);
    void getChatHistorySignal(OAIGetChatHistoryResponse summary);
    void getChatsSignal(OAIGetChatsResponse summary);
    void sendFileToChatSignal(OAIEmptyApiResponse summary);
    void sendMessageToChatSignal(OAIEmptyApiResponse summary);


    void createChatSignalFull(OAIHttpRequestWorker *worker, OAICreateChatResponse summary);
    void getChatHistorySignalFull(OAIHttpRequestWorker *worker, OAIGetChatHistoryResponse summary);
    void getChatsSignalFull(OAIHttpRequestWorker *worker, OAIGetChatsResponse summary);
    void sendFileToChatSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void sendMessageToChatSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);

    Q_DECL_DEPRECATED_X("Use createChatSignalError() instead")
    void createChatSignalE(OAICreateChatResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChatSignalError(OAICreateChatResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHistorySignalError() instead")
    void getChatHistorySignalE(OAIGetChatHistoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHistorySignalError(OAIGetChatHistoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatsSignalError() instead")
    void getChatsSignalE(OAIGetChatsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatsSignalError(OAIGetChatsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFileToChatSignalError() instead")
    void sendFileToChatSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendFileToChatSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessageToChatSignalError() instead")
    void sendMessageToChatSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageToChatSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createChatSignalErrorFull() instead")
    void createChatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHistorySignalErrorFull() instead")
    void getChatHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatsSignalErrorFull() instead")
    void getChatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFileToChatSignalErrorFull() instead")
    void sendFileToChatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendFileToChatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessageToChatSignalErrorFull() instead")
    void sendMessageToChatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageToChatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
