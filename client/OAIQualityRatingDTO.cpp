/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQualityRatingDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQualityRatingDTO::OAIQualityRatingDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQualityRatingDTO::OAIQualityRatingDTO() {
    this->initializeModel();
}

OAIQualityRatingDTO::~OAIQualityRatingDTO() {}

void OAIQualityRatingDTO::initializeModel() {

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_calculation_date_isSet = false;
    m_calculation_date_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;
}

void OAIQualityRatingDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQualityRatingDTO::fromJsonObject(QJsonObject json) {

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_calculation_date_isValid = ::OpenAPI::fromJsonValue(m_calculation_date, json[QString("calculationDate")]);
    m_calculation_date_isSet = !json[QString("calculationDate")].isNull() && m_calculation_date_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;
}

QString OAIQualityRatingDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQualityRatingDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_calculation_date_isSet) {
        obj.insert(QString("calculationDate"), ::OpenAPI::toJsonValue(m_calculation_date));
    }
    if (m_components.size() > 0) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    return obj;
}

qint64 OAIQualityRatingDTO::getRating() const {
    return m_rating;
}
void OAIQualityRatingDTO::setRating(const qint64 &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIQualityRatingDTO::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIQualityRatingDTO::is_rating_Valid() const{
    return m_rating_isValid;
}

QDate OAIQualityRatingDTO::getCalculationDate() const {
    return m_calculation_date;
}
void OAIQualityRatingDTO::setCalculationDate(const QDate &calculation_date) {
    m_calculation_date = calculation_date;
    m_calculation_date_isSet = true;
}

bool OAIQualityRatingDTO::is_calculation_date_Set() const{
    return m_calculation_date_isSet;
}

bool OAIQualityRatingDTO::is_calculation_date_Valid() const{
    return m_calculation_date_isValid;
}

QList<OAIQualityRatingComponentDTO> OAIQualityRatingDTO::getComponents() const {
    return m_components;
}
void OAIQualityRatingDTO::setComponents(const QList<OAIQualityRatingComponentDTO> &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIQualityRatingDTO::is_components_Set() const{
    return m_components_isSet;
}

bool OAIQualityRatingDTO::is_components_Valid() const{
    return m_components_isValid;
}

bool OAIQualityRatingDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQualityRatingDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rating_isValid && m_calculation_date_isValid && m_components_isValid && true;
}

} // namespace OpenAPI
