/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderDeliveryDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderDeliveryDTO::OAIOrderDeliveryDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderDeliveryDTO::OAIOrderDeliveryDTO() {
    this->initializeModel();
}

OAIOrderDeliveryDTO::~OAIOrderDeliveryDTO() {}

void OAIOrderDeliveryDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_delivery_partner_type_isSet = false;
    m_delivery_partner_type_isValid = false;

    m_courier_isSet = false;
    m_courier_isValid = false;

    m_dates_isSet = false;
    m_dates_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;

    m_delivery_service_id_isSet = false;
    m_delivery_service_id_isValid = false;

    m_lift_type_isSet = false;
    m_lift_type_isValid = false;

    m_lift_price_isSet = false;
    m_lift_price_isValid = false;

    m_outlet_code_isSet = false;
    m_outlet_code_isValid = false;

    m_outlet_storage_limit_date_isSet = false;
    m_outlet_storage_limit_date_isValid = false;

    m_dispatch_type_isSet = false;
    m_dispatch_type_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;

    m_shipments_isSet = false;
    m_shipments_isValid = false;

    m_estimated_isSet = false;
    m_estimated_isValid = false;

    m_eac_type_isSet = false;
    m_eac_type_isValid = false;

    m_eac_code_isSet = false;
    m_eac_code_isValid = false;
}

void OAIOrderDeliveryDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderDeliveryDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_delivery_partner_type_isValid = ::OpenAPI::fromJsonValue(m_delivery_partner_type, json[QString("deliveryPartnerType")]);
    m_delivery_partner_type_isSet = !json[QString("deliveryPartnerType")].isNull() && m_delivery_partner_type_isValid;

    m_courier_isValid = ::OpenAPI::fromJsonValue(m_courier, json[QString("courier")]);
    m_courier_isSet = !json[QString("courier")].isNull() && m_courier_isValid;

    m_dates_isValid = ::OpenAPI::fromJsonValue(m_dates, json[QString("dates")]);
    m_dates_isSet = !json[QString("dates")].isNull() && m_dates_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;

    m_delivery_service_id_isValid = ::OpenAPI::fromJsonValue(m_delivery_service_id, json[QString("deliveryServiceId")]);
    m_delivery_service_id_isSet = !json[QString("deliveryServiceId")].isNull() && m_delivery_service_id_isValid;

    m_lift_type_isValid = ::OpenAPI::fromJsonValue(m_lift_type, json[QString("liftType")]);
    m_lift_type_isSet = !json[QString("liftType")].isNull() && m_lift_type_isValid;

    m_lift_price_isValid = ::OpenAPI::fromJsonValue(m_lift_price, json[QString("liftPrice")]);
    m_lift_price_isSet = !json[QString("liftPrice")].isNull() && m_lift_price_isValid;

    m_outlet_code_isValid = ::OpenAPI::fromJsonValue(m_outlet_code, json[QString("outletCode")]);
    m_outlet_code_isSet = !json[QString("outletCode")].isNull() && m_outlet_code_isValid;

    m_outlet_storage_limit_date_isValid = ::OpenAPI::fromJsonValue(m_outlet_storage_limit_date, json[QString("outletStorageLimitDate")]);
    m_outlet_storage_limit_date_isSet = !json[QString("outletStorageLimitDate")].isNull() && m_outlet_storage_limit_date_isValid;

    m_dispatch_type_isValid = ::OpenAPI::fromJsonValue(m_dispatch_type, json[QString("dispatchType")]);
    m_dispatch_type_isSet = !json[QString("dispatchType")].isNull() && m_dispatch_type_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;

    m_shipments_isValid = ::OpenAPI::fromJsonValue(m_shipments, json[QString("shipments")]);
    m_shipments_isSet = !json[QString("shipments")].isNull() && m_shipments_isValid;

    m_estimated_isValid = ::OpenAPI::fromJsonValue(m_estimated, json[QString("estimated")]);
    m_estimated_isSet = !json[QString("estimated")].isNull() && m_estimated_isValid;

    m_eac_type_isValid = ::OpenAPI::fromJsonValue(m_eac_type, json[QString("eacType")]);
    m_eac_type_isSet = !json[QString("eacType")].isNull() && m_eac_type_isValid;

    m_eac_code_isValid = ::OpenAPI::fromJsonValue(m_eac_code, json[QString("eacCode")]);
    m_eac_code_isSet = !json[QString("eacCode")].isNull() && m_eac_code_isValid;
}

QString OAIOrderDeliveryDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderDeliveryDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_delivery_partner_type.isSet()) {
        obj.insert(QString("deliveryPartnerType"), ::OpenAPI::toJsonValue(m_delivery_partner_type));
    }
    if (m_courier.isSet()) {
        obj.insert(QString("courier"), ::OpenAPI::toJsonValue(m_courier));
    }
    if (m_dates.isSet()) {
        obj.insert(QString("dates"), ::OpenAPI::toJsonValue(m_dates));
    }
    if (m_region.isSet()) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_vat.isSet()) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(m_vat));
    }
    if (m_delivery_service_id_isSet) {
        obj.insert(QString("deliveryServiceId"), ::OpenAPI::toJsonValue(m_delivery_service_id));
    }
    if (m_lift_type.isSet()) {
        obj.insert(QString("liftType"), ::OpenAPI::toJsonValue(m_lift_type));
    }
    if (m_lift_price_isSet) {
        obj.insert(QString("liftPrice"), ::OpenAPI::toJsonValue(m_lift_price));
    }
    if (m_outlet_code_isSet) {
        obj.insert(QString("outletCode"), ::OpenAPI::toJsonValue(m_outlet_code));
    }
    if (m_outlet_storage_limit_date_isSet) {
        obj.insert(QString("outletStorageLimitDate"), ::OpenAPI::toJsonValue(m_outlet_storage_limit_date));
    }
    if (m_dispatch_type.isSet()) {
        obj.insert(QString("dispatchType"), ::OpenAPI::toJsonValue(m_dispatch_type));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    if (m_shipments.size() > 0) {
        obj.insert(QString("shipments"), ::OpenAPI::toJsonValue(m_shipments));
    }
    if (m_estimated_isSet) {
        obj.insert(QString("estimated"), ::OpenAPI::toJsonValue(m_estimated));
    }
    if (m_eac_type.isSet()) {
        obj.insert(QString("eacType"), ::OpenAPI::toJsonValue(m_eac_type));
    }
    if (m_eac_code_isSet) {
        obj.insert(QString("eacCode"), ::OpenAPI::toJsonValue(m_eac_code));
    }
    return obj;
}

QString OAIOrderDeliveryDTO::getId() const {
    return m_id;
}
void OAIOrderDeliveryDTO::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderDeliveryDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderDeliveryDTO::is_id_Valid() const{
    return m_id_isValid;
}

OAIOrderDeliveryType OAIOrderDeliveryDTO::getType() const {
    return m_type;
}
void OAIOrderDeliveryDTO::setType(const OAIOrderDeliveryType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOrderDeliveryDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrderDeliveryDTO::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOrderDeliveryDTO::getServiceName() const {
    return m_service_name;
}
void OAIOrderDeliveryDTO::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIOrderDeliveryDTO::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIOrderDeliveryDTO::is_service_name_Valid() const{
    return m_service_name_isValid;
}

double OAIOrderDeliveryDTO::getPrice() const {
    return m_price;
}
void OAIOrderDeliveryDTO::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIOrderDeliveryDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOrderDeliveryDTO::is_price_Valid() const{
    return m_price_isValid;
}

OAIOrderDeliveryPartnerType OAIOrderDeliveryDTO::getDeliveryPartnerType() const {
    return m_delivery_partner_type;
}
void OAIOrderDeliveryDTO::setDeliveryPartnerType(const OAIOrderDeliveryPartnerType &delivery_partner_type) {
    m_delivery_partner_type = delivery_partner_type;
    m_delivery_partner_type_isSet = true;
}

bool OAIOrderDeliveryDTO::is_delivery_partner_type_Set() const{
    return m_delivery_partner_type_isSet;
}

bool OAIOrderDeliveryDTO::is_delivery_partner_type_Valid() const{
    return m_delivery_partner_type_isValid;
}

OAIOrderCourierDTO OAIOrderDeliveryDTO::getCourier() const {
    return m_courier;
}
void OAIOrderDeliveryDTO::setCourier(const OAIOrderCourierDTO &courier) {
    m_courier = courier;
    m_courier_isSet = true;
}

bool OAIOrderDeliveryDTO::is_courier_Set() const{
    return m_courier_isSet;
}

bool OAIOrderDeliveryDTO::is_courier_Valid() const{
    return m_courier_isValid;
}

OAIOrderDeliveryDatesDTO OAIOrderDeliveryDTO::getDates() const {
    return m_dates;
}
void OAIOrderDeliveryDTO::setDates(const OAIOrderDeliveryDatesDTO &dates) {
    m_dates = dates;
    m_dates_isSet = true;
}

bool OAIOrderDeliveryDTO::is_dates_Set() const{
    return m_dates_isSet;
}

bool OAIOrderDeliveryDTO::is_dates_Valid() const{
    return m_dates_isValid;
}

OAIRegionDTO OAIOrderDeliveryDTO::getRegion() const {
    return m_region;
}
void OAIOrderDeliveryDTO::setRegion(const OAIRegionDTO &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIOrderDeliveryDTO::is_region_Set() const{
    return m_region_isSet;
}

bool OAIOrderDeliveryDTO::is_region_Valid() const{
    return m_region_isValid;
}

OAIOrderDeliveryAddressDTO OAIOrderDeliveryDTO::getAddress() const {
    return m_address;
}
void OAIOrderDeliveryDTO::setAddress(const OAIOrderDeliveryAddressDTO &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIOrderDeliveryDTO::is_address_Set() const{
    return m_address_isSet;
}

bool OAIOrderDeliveryDTO::is_address_Valid() const{
    return m_address_isValid;
}

OAIOrderVatType OAIOrderDeliveryDTO::getVat() const {
    return m_vat;
}
void OAIOrderDeliveryDTO::setVat(const OAIOrderVatType &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAIOrderDeliveryDTO::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIOrderDeliveryDTO::is_vat_Valid() const{
    return m_vat_isValid;
}

qint64 OAIOrderDeliveryDTO::getDeliveryServiceId() const {
    return m_delivery_service_id;
}
void OAIOrderDeliveryDTO::setDeliveryServiceId(const qint64 &delivery_service_id) {
    m_delivery_service_id = delivery_service_id;
    m_delivery_service_id_isSet = true;
}

bool OAIOrderDeliveryDTO::is_delivery_service_id_Set() const{
    return m_delivery_service_id_isSet;
}

bool OAIOrderDeliveryDTO::is_delivery_service_id_Valid() const{
    return m_delivery_service_id_isValid;
}

OAIOrderLiftType OAIOrderDeliveryDTO::getLiftType() const {
    return m_lift_type;
}
void OAIOrderDeliveryDTO::setLiftType(const OAIOrderLiftType &lift_type) {
    m_lift_type = lift_type;
    m_lift_type_isSet = true;
}

bool OAIOrderDeliveryDTO::is_lift_type_Set() const{
    return m_lift_type_isSet;
}

bool OAIOrderDeliveryDTO::is_lift_type_Valid() const{
    return m_lift_type_isValid;
}

double OAIOrderDeliveryDTO::getLiftPrice() const {
    return m_lift_price;
}
void OAIOrderDeliveryDTO::setLiftPrice(const double &lift_price) {
    m_lift_price = lift_price;
    m_lift_price_isSet = true;
}

bool OAIOrderDeliveryDTO::is_lift_price_Set() const{
    return m_lift_price_isSet;
}

bool OAIOrderDeliveryDTO::is_lift_price_Valid() const{
    return m_lift_price_isValid;
}

QString OAIOrderDeliveryDTO::getOutletCode() const {
    return m_outlet_code;
}
void OAIOrderDeliveryDTO::setOutletCode(const QString &outlet_code) {
    m_outlet_code = outlet_code;
    m_outlet_code_isSet = true;
}

bool OAIOrderDeliveryDTO::is_outlet_code_Set() const{
    return m_outlet_code_isSet;
}

bool OAIOrderDeliveryDTO::is_outlet_code_Valid() const{
    return m_outlet_code_isValid;
}

QString OAIOrderDeliveryDTO::getOutletStorageLimitDate() const {
    return m_outlet_storage_limit_date;
}
void OAIOrderDeliveryDTO::setOutletStorageLimitDate(const QString &outlet_storage_limit_date) {
    m_outlet_storage_limit_date = outlet_storage_limit_date;
    m_outlet_storage_limit_date_isSet = true;
}

bool OAIOrderDeliveryDTO::is_outlet_storage_limit_date_Set() const{
    return m_outlet_storage_limit_date_isSet;
}

bool OAIOrderDeliveryDTO::is_outlet_storage_limit_date_Valid() const{
    return m_outlet_storage_limit_date_isValid;
}

OAIOrderDeliveryDispatchType OAIOrderDeliveryDTO::getDispatchType() const {
    return m_dispatch_type;
}
void OAIOrderDeliveryDTO::setDispatchType(const OAIOrderDeliveryDispatchType &dispatch_type) {
    m_dispatch_type = dispatch_type;
    m_dispatch_type_isSet = true;
}

bool OAIOrderDeliveryDTO::is_dispatch_type_Set() const{
    return m_dispatch_type_isSet;
}

bool OAIOrderDeliveryDTO::is_dispatch_type_Valid() const{
    return m_dispatch_type_isValid;
}

QList<OAIOrderTrackDTO> OAIOrderDeliveryDTO::getTracks() const {
    return m_tracks;
}
void OAIOrderDeliveryDTO::setTracks(const QList<OAIOrderTrackDTO> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIOrderDeliveryDTO::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIOrderDeliveryDTO::is_tracks_Valid() const{
    return m_tracks_isValid;
}

QList<OAIOrderShipmentDTO> OAIOrderDeliveryDTO::getShipments() const {
    return m_shipments;
}
void OAIOrderDeliveryDTO::setShipments(const QList<OAIOrderShipmentDTO> &shipments) {
    m_shipments = shipments;
    m_shipments_isSet = true;
}

bool OAIOrderDeliveryDTO::is_shipments_Set() const{
    return m_shipments_isSet;
}

bool OAIOrderDeliveryDTO::is_shipments_Valid() const{
    return m_shipments_isValid;
}

bool OAIOrderDeliveryDTO::isEstimated() const {
    return m_estimated;
}
void OAIOrderDeliveryDTO::setEstimated(const bool &estimated) {
    m_estimated = estimated;
    m_estimated_isSet = true;
}

bool OAIOrderDeliveryDTO::is_estimated_Set() const{
    return m_estimated_isSet;
}

bool OAIOrderDeliveryDTO::is_estimated_Valid() const{
    return m_estimated_isValid;
}

OAIOrderDeliveryEacType OAIOrderDeliveryDTO::getEacType() const {
    return m_eac_type;
}
void OAIOrderDeliveryDTO::setEacType(const OAIOrderDeliveryEacType &eac_type) {
    m_eac_type = eac_type;
    m_eac_type_isSet = true;
}

bool OAIOrderDeliveryDTO::is_eac_type_Set() const{
    return m_eac_type_isSet;
}

bool OAIOrderDeliveryDTO::is_eac_type_Valid() const{
    return m_eac_type_isValid;
}

QString OAIOrderDeliveryDTO::getEacCode() const {
    return m_eac_code;
}
void OAIOrderDeliveryDTO::setEacCode(const QString &eac_code) {
    m_eac_code = eac_code;
    m_eac_code_isSet = true;
}

bool OAIOrderDeliveryDTO::is_eac_code_Set() const{
    return m_eac_code_isSet;
}

bool OAIOrderDeliveryDTO::is_eac_code_Valid() const{
    return m_eac_code_isValid;
}

bool OAIOrderDeliveryDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_partner_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_courier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lift_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lift_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_storage_limit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispatch_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eac_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eac_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderDeliveryDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
