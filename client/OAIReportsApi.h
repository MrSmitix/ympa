/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportsApi_H
#define OAI_OAIReportsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIGenerateBoostConsolidatedRequest.h"
#include "OAIGenerateCompetitorsPositionReportRequest.h"
#include "OAIGenerateGoodsFeedbackRequest.h"
#include "OAIGenerateGoodsMovementReportRequest.h"
#include "OAIGenerateGoodsRealizationReportRequest.h"
#include "OAIGenerateGoodsTurnoverRequest.h"
#include "OAIGenerateMassOrderLabelsRequest.h"
#include "OAIGeneratePricesReportRequest.h"
#include "OAIGenerateReportResponse.h"
#include "OAIGenerateShelfsStatisticsRequest.h"
#include "OAIGenerateShipmentListDocumentReportRequest.h"
#include "OAIGenerateShowsSalesReportRequest.h"
#include "OAIGenerateStocksOnWarehousesReportRequest.h"
#include "OAIGenerateUnitedMarketplaceServicesReportRequest.h"
#include "OAIGenerateUnitedNettingReportRequest.h"
#include "OAIGenerateUnitedOrdersRequest.h"
#include "OAIGetReportInfoResponse.h"
#include "OAIPageFormatType.h"
#include "OAIReportFormatType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportsApi : public QObject {
    Q_OBJECT

public:
    OAIReportsApi(const int timeOut = 0);
    ~OAIReportsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_generate_boost_consolidated_request OAIGenerateBoostConsolidatedRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateBoostConsolidatedReport(const OAIGenerateBoostConsolidatedRequest &oai_generate_boost_consolidated_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_competitors_position_report_request OAIGenerateCompetitorsPositionReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateCompetitorsPositionReport(const OAIGenerateCompetitorsPositionReportRequest &oai_generate_competitors_position_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_goods_feedback_request OAIGenerateGoodsFeedbackRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateGoodsFeedbackReport(const OAIGenerateGoodsFeedbackRequest &oai_generate_goods_feedback_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_goods_movement_report_request OAIGenerateGoodsMovementReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateGoodsMovementReport(const OAIGenerateGoodsMovementReportRequest &oai_generate_goods_movement_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_goods_realization_report_request OAIGenerateGoodsRealizationReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateGoodsRealizationReport(const OAIGenerateGoodsRealizationReportRequest &oai_generate_goods_realization_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_goods_turnover_request OAIGenerateGoodsTurnoverRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateGoodsTurnoverReport(const OAIGenerateGoodsTurnoverRequest &oai_generate_goods_turnover_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_mass_order_labels_request OAIGenerateMassOrderLabelsRequest [required]
    * @param[in]  format OAIPageFormatType [optional]
    */
    void generateMassOrderLabelsReport(const OAIGenerateMassOrderLabelsRequest &oai_generate_mass_order_labels_request, const ::OpenAPI::OptionalParam<OAIPageFormatType> &format = ::OpenAPI::OptionalParam<OAIPageFormatType>());

    /**
    * @param[in]  oai_generate_prices_report_request OAIGeneratePricesReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generatePricesReport(const OAIGeneratePricesReportRequest &oai_generate_prices_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_shelfs_statistics_request OAIGenerateShelfsStatisticsRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateShelfsStatisticsReport(const OAIGenerateShelfsStatisticsRequest &oai_generate_shelfs_statistics_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_shipment_list_document_report_request OAIGenerateShipmentListDocumentReportRequest [required]
    */
    void generateShipmentListDocumentReport(const OAIGenerateShipmentListDocumentReportRequest &oai_generate_shipment_list_document_report_request);

    /**
    * @param[in]  oai_generate_shows_sales_report_request OAIGenerateShowsSalesReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateShowsSalesReport(const OAIGenerateShowsSalesReportRequest &oai_generate_shows_sales_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_stocks_on_warehouses_report_request OAIGenerateStocksOnWarehousesReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateStocksOnWarehousesReport(const OAIGenerateStocksOnWarehousesReportRequest &oai_generate_stocks_on_warehouses_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_united_marketplace_services_report_request OAIGenerateUnitedMarketplaceServicesReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateUnitedMarketplaceServicesReport(const OAIGenerateUnitedMarketplaceServicesReportRequest &oai_generate_united_marketplace_services_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_united_netting_report_request OAIGenerateUnitedNettingReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateUnitedNettingReport(const OAIGenerateUnitedNettingReportRequest &oai_generate_united_netting_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_united_orders_request OAIGenerateUnitedOrdersRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateUnitedOrdersReport(const OAIGenerateUnitedOrdersRequest &oai_generate_united_orders_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  report_id QString [required]
    */
    void getReportInfo(const QString &report_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void generateBoostConsolidatedReportCallback(OAIHttpRequestWorker *worker);
    void generateCompetitorsPositionReportCallback(OAIHttpRequestWorker *worker);
    void generateGoodsFeedbackReportCallback(OAIHttpRequestWorker *worker);
    void generateGoodsMovementReportCallback(OAIHttpRequestWorker *worker);
    void generateGoodsRealizationReportCallback(OAIHttpRequestWorker *worker);
    void generateGoodsTurnoverReportCallback(OAIHttpRequestWorker *worker);
    void generateMassOrderLabelsReportCallback(OAIHttpRequestWorker *worker);
    void generatePricesReportCallback(OAIHttpRequestWorker *worker);
    void generateShelfsStatisticsReportCallback(OAIHttpRequestWorker *worker);
    void generateShipmentListDocumentReportCallback(OAIHttpRequestWorker *worker);
    void generateShowsSalesReportCallback(OAIHttpRequestWorker *worker);
    void generateStocksOnWarehousesReportCallback(OAIHttpRequestWorker *worker);
    void generateUnitedMarketplaceServicesReportCallback(OAIHttpRequestWorker *worker);
    void generateUnitedNettingReportCallback(OAIHttpRequestWorker *worker);
    void generateUnitedOrdersReportCallback(OAIHttpRequestWorker *worker);
    void getReportInfoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void generateBoostConsolidatedReportSignal(OAIGenerateReportResponse summary);
    void generateCompetitorsPositionReportSignal(OAIGenerateReportResponse summary);
    void generateGoodsFeedbackReportSignal(OAIGenerateReportResponse summary);
    void generateGoodsMovementReportSignal(OAIGenerateReportResponse summary);
    void generateGoodsRealizationReportSignal(OAIGenerateReportResponse summary);
    void generateGoodsTurnoverReportSignal(OAIGenerateReportResponse summary);
    void generateMassOrderLabelsReportSignal(OAIGenerateReportResponse summary);
    void generatePricesReportSignal(OAIGenerateReportResponse summary);
    void generateShelfsStatisticsReportSignal(OAIGenerateReportResponse summary);
    void generateShipmentListDocumentReportSignal(OAIGenerateReportResponse summary);
    void generateShowsSalesReportSignal(OAIGenerateReportResponse summary);
    void generateStocksOnWarehousesReportSignal(OAIGenerateReportResponse summary);
    void generateUnitedMarketplaceServicesReportSignal(OAIGenerateReportResponse summary);
    void generateUnitedNettingReportSignal(OAIGenerateReportResponse summary);
    void generateUnitedOrdersReportSignal(OAIGenerateReportResponse summary);
    void getReportInfoSignal(OAIGetReportInfoResponse summary);


    void generateBoostConsolidatedReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateCompetitorsPositionReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateGoodsFeedbackReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateGoodsMovementReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateGoodsRealizationReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateGoodsTurnoverReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateMassOrderLabelsReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generatePricesReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateShelfsStatisticsReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateShipmentListDocumentReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateShowsSalesReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateStocksOnWarehousesReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateUnitedMarketplaceServicesReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateUnitedNettingReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateUnitedOrdersReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void getReportInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetReportInfoResponse summary);

    Q_DECL_DEPRECATED_X("Use generateBoostConsolidatedReportSignalError() instead")
    void generateBoostConsolidatedReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateBoostConsolidatedReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateCompetitorsPositionReportSignalError() instead")
    void generateCompetitorsPositionReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateCompetitorsPositionReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsFeedbackReportSignalError() instead")
    void generateGoodsFeedbackReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsFeedbackReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsMovementReportSignalError() instead")
    void generateGoodsMovementReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsMovementReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsRealizationReportSignalError() instead")
    void generateGoodsRealizationReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsRealizationReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsTurnoverReportSignalError() instead")
    void generateGoodsTurnoverReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsTurnoverReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMassOrderLabelsReportSignalError() instead")
    void generateMassOrderLabelsReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMassOrderLabelsReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePricesReportSignalError() instead")
    void generatePricesReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePricesReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateShelfsStatisticsReportSignalError() instead")
    void generateShelfsStatisticsReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateShelfsStatisticsReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateShipmentListDocumentReportSignalError() instead")
    void generateShipmentListDocumentReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateShipmentListDocumentReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateShowsSalesReportSignalError() instead")
    void generateShowsSalesReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateShowsSalesReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateStocksOnWarehousesReportSignalError() instead")
    void generateStocksOnWarehousesReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateStocksOnWarehousesReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedMarketplaceServicesReportSignalError() instead")
    void generateUnitedMarketplaceServicesReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedMarketplaceServicesReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedNettingReportSignalError() instead")
    void generateUnitedNettingReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedNettingReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedOrdersReportSignalError() instead")
    void generateUnitedOrdersReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedOrdersReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportInfoSignalError() instead")
    void getReportInfoSignalE(OAIGetReportInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportInfoSignalError(OAIGetReportInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use generateBoostConsolidatedReportSignalErrorFull() instead")
    void generateBoostConsolidatedReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateBoostConsolidatedReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateCompetitorsPositionReportSignalErrorFull() instead")
    void generateCompetitorsPositionReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateCompetitorsPositionReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsFeedbackReportSignalErrorFull() instead")
    void generateGoodsFeedbackReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsFeedbackReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsMovementReportSignalErrorFull() instead")
    void generateGoodsMovementReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsMovementReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsRealizationReportSignalErrorFull() instead")
    void generateGoodsRealizationReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsRealizationReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsTurnoverReportSignalErrorFull() instead")
    void generateGoodsTurnoverReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsTurnoverReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMassOrderLabelsReportSignalErrorFull() instead")
    void generateMassOrderLabelsReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMassOrderLabelsReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePricesReportSignalErrorFull() instead")
    void generatePricesReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePricesReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateShelfsStatisticsReportSignalErrorFull() instead")
    void generateShelfsStatisticsReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateShelfsStatisticsReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateShipmentListDocumentReportSignalErrorFull() instead")
    void generateShipmentListDocumentReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateShipmentListDocumentReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateShowsSalesReportSignalErrorFull() instead")
    void generateShowsSalesReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateShowsSalesReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateStocksOnWarehousesReportSignalErrorFull() instead")
    void generateStocksOnWarehousesReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateStocksOnWarehousesReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedMarketplaceServicesReportSignalErrorFull() instead")
    void generateUnitedMarketplaceServicesReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedMarketplaceServicesReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedNettingReportSignalErrorFull() instead")
    void generateUnitedNettingReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedNettingReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedOrdersReportSignalErrorFull() instead")
    void generateUnitedOrdersReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedOrdersReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportInfoSignalErrorFull() instead")
    void getReportInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
