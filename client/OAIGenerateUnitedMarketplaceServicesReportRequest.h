/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGenerateUnitedMarketplaceServicesReportRequest.h
 *
 * Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 
 */

#ifndef OAIGenerateUnitedMarketplaceServicesReportRequest_H
#define OAIGenerateUnitedMarketplaceServicesReportRequest_H

#include <QJsonObject>

#include "OAIPlacementType.h"
#include <QDate>
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGenerateUnitedMarketplaceServicesReportRequest : public OAIObject {
public:
    OAIGenerateUnitedMarketplaceServicesReportRequest();
    OAIGenerateUnitedMarketplaceServicesReportRequest(QString json);
    ~OAIGenerateUnitedMarketplaceServicesReportRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getBusinessId() const;
    void setBusinessId(const qint64 &business_id);
    bool is_business_id_Set() const;
    bool is_business_id_Valid() const;

    QDateTime getDateTimeFrom() const;
    void setDateTimeFrom(const QDateTime &date_time_from);
    bool is_date_time_from_Set() const;
    bool is_date_time_from_Valid() const;

    QDateTime getDateTimeTo() const;
    void setDateTimeTo(const QDateTime &date_time_to);
    bool is_date_time_to_Set() const;
    bool is_date_time_to_Valid() const;

    QDate getDateFrom() const;
    void setDateFrom(const QDate &date_from);
    bool is_date_from_Set() const;
    bool is_date_from_Valid() const;

    QDate getDateTo() const;
    void setDateTo(const QDate &date_to);
    bool is_date_to_Set() const;
    bool is_date_to_Valid() const;

    qint32 getYearFrom() const;
    void setYearFrom(const qint32 &year_from);
    bool is_year_from_Set() const;
    bool is_year_from_Valid() const;

    qint32 getMonthFrom() const;
    void setMonthFrom(const qint32 &month_from);
    bool is_month_from_Set() const;
    bool is_month_from_Valid() const;

    qint32 getYearTo() const;
    void setYearTo(const qint32 &year_to);
    bool is_year_to_Set() const;
    bool is_year_to_Valid() const;

    qint32 getMonthTo() const;
    void setMonthTo(const qint32 &month_to);
    bool is_month_to_Set() const;
    bool is_month_to_Valid() const;

    QList<OAIPlacementType> getPlacementPrograms() const;
    void setPlacementPrograms(const QList<OAIPlacementType> &placement_programs);
    bool is_placement_programs_Set() const;
    bool is_placement_programs_Valid() const;

    QList<QString> getInns() const;
    void setInns(const QList<QString> &inns);
    bool is_inns_Set() const;
    bool is_inns_Valid() const;

    QList<qint64> getCampaignIds() const;
    void setCampaignIds(const QList<qint64> &campaign_ids);
    bool is_campaign_ids_Set() const;
    bool is_campaign_ids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_business_id;
    bool m_business_id_isSet;
    bool m_business_id_isValid;

    QDateTime m_date_time_from;
    bool m_date_time_from_isSet;
    bool m_date_time_from_isValid;

    QDateTime m_date_time_to;
    bool m_date_time_to_isSet;
    bool m_date_time_to_isValid;

    QDate m_date_from;
    bool m_date_from_isSet;
    bool m_date_from_isValid;

    QDate m_date_to;
    bool m_date_to_isSet;
    bool m_date_to_isValid;

    qint32 m_year_from;
    bool m_year_from_isSet;
    bool m_year_from_isValid;

    qint32 m_month_from;
    bool m_month_from_isSet;
    bool m_month_from_isValid;

    qint32 m_year_to;
    bool m_year_to_isSet;
    bool m_year_to_isValid;

    qint32 m_month_to;
    bool m_month_to_isSet;
    bool m_month_to_isValid;

    QList<OAIPlacementType> m_placement_programs;
    bool m_placement_programs_isSet;
    bool m_placement_programs_isValid;

    QList<QString> m_inns;
    bool m_inns_isSet;
    bool m_inns_isValid;

    QList<qint64> m_campaign_ids;
    bool m_campaign_ids_isSet;
    bool m_campaign_ids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGenerateUnitedMarketplaceServicesReportRequest)

#endif // OAIGenerateUnitedMarketplaceServicesReportRequest_H
