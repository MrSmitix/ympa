/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipmentStatusChangeDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipmentStatusChangeDTO::OAIShipmentStatusChangeDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipmentStatusChangeDTO::OAIShipmentStatusChangeDTO() {
    this->initializeModel();
}

OAIShipmentStatusChangeDTO::~OAIShipmentStatusChangeDTO() {}

void OAIShipmentStatusChangeDTO::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIShipmentStatusChangeDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipmentStatusChangeDTO::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIShipmentStatusChangeDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipmentStatusChangeDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIShipmentStatusType OAIShipmentStatusChangeDTO::getStatus() const {
    return m_status;
}
void OAIShipmentStatusChangeDTO::setStatus(const OAIShipmentStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIShipmentStatusChangeDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIShipmentStatusChangeDTO::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIShipmentStatusChangeDTO::getDescription() const {
    return m_description;
}
void OAIShipmentStatusChangeDTO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIShipmentStatusChangeDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIShipmentStatusChangeDTO::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIShipmentStatusChangeDTO::getUpdateTime() const {
    return m_update_time;
}
void OAIShipmentStatusChangeDTO::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIShipmentStatusChangeDTO::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIShipmentStatusChangeDTO::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIShipmentStatusChangeDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipmentStatusChangeDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
