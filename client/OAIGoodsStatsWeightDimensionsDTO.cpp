/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoodsStatsWeightDimensionsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoodsStatsWeightDimensionsDTO::OAIGoodsStatsWeightDimensionsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoodsStatsWeightDimensionsDTO::OAIGoodsStatsWeightDimensionsDTO() {
    this->initializeModel();
}

OAIGoodsStatsWeightDimensionsDTO::~OAIGoodsStatsWeightDimensionsDTO() {}

void OAIGoodsStatsWeightDimensionsDTO::initializeModel() {

    m_length_isSet = false;
    m_length_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIGoodsStatsWeightDimensionsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoodsStatsWeightDimensionsDTO::fromJsonObject(QJsonObject json) {

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIGoodsStatsWeightDimensionsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoodsStatsWeightDimensionsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

double OAIGoodsStatsWeightDimensionsDTO::getLength() const {
    return m_length;
}
void OAIGoodsStatsWeightDimensionsDTO::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIGoodsStatsWeightDimensionsDTO::is_length_Set() const{
    return m_length_isSet;
}

bool OAIGoodsStatsWeightDimensionsDTO::is_length_Valid() const{
    return m_length_isValid;
}

double OAIGoodsStatsWeightDimensionsDTO::getWidth() const {
    return m_width;
}
void OAIGoodsStatsWeightDimensionsDTO::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIGoodsStatsWeightDimensionsDTO::is_width_Set() const{
    return m_width_isSet;
}

bool OAIGoodsStatsWeightDimensionsDTO::is_width_Valid() const{
    return m_width_isValid;
}

double OAIGoodsStatsWeightDimensionsDTO::getHeight() const {
    return m_height;
}
void OAIGoodsStatsWeightDimensionsDTO::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIGoodsStatsWeightDimensionsDTO::is_height_Set() const{
    return m_height_isSet;
}

bool OAIGoodsStatsWeightDimensionsDTO::is_height_Valid() const{
    return m_height_isValid;
}

double OAIGoodsStatsWeightDimensionsDTO::getWeight() const {
    return m_weight;
}
void OAIGoodsStatsWeightDimensionsDTO::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIGoodsStatsWeightDimensionsDTO::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIGoodsStatsWeightDimensionsDTO::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIGoodsStatsWeightDimensionsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoodsStatsWeightDimensionsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
