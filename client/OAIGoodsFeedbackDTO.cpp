/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoodsFeedbackDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoodsFeedbackDTO::OAIGoodsFeedbackDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoodsFeedbackDTO::OAIGoodsFeedbackDTO() {
    this->initializeModel();
}

OAIGoodsFeedbackDTO::~OAIGoodsFeedbackDTO() {}

void OAIGoodsFeedbackDTO::initializeModel() {

    m_feedback_id_isSet = false;
    m_feedback_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_need_reaction_isSet = false;
    m_need_reaction_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;
}

void OAIGoodsFeedbackDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoodsFeedbackDTO::fromJsonObject(QJsonObject json) {

    m_feedback_id_isValid = ::OpenAPI::fromJsonValue(m_feedback_id, json[QString("feedbackId")]);
    m_feedback_id_isSet = !json[QString("feedbackId")].isNull() && m_feedback_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_need_reaction_isValid = ::OpenAPI::fromJsonValue(m_need_reaction, json[QString("needReaction")]);
    m_need_reaction_isSet = !json[QString("needReaction")].isNull() && m_need_reaction_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;
}

QString OAIGoodsFeedbackDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoodsFeedbackDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_feedback_id_isSet) {
        obj.insert(QString("feedbackId"), ::OpenAPI::toJsonValue(m_feedback_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_need_reaction_isSet) {
        obj.insert(QString("needReaction"), ::OpenAPI::toJsonValue(m_need_reaction));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_media.isSet()) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    return obj;
}

qint64 OAIGoodsFeedbackDTO::getFeedbackId() const {
    return m_feedback_id;
}
void OAIGoodsFeedbackDTO::setFeedbackId(const qint64 &feedback_id) {
    m_feedback_id = feedback_id;
    m_feedback_id_isSet = true;
}

bool OAIGoodsFeedbackDTO::is_feedback_id_Set() const{
    return m_feedback_id_isSet;
}

bool OAIGoodsFeedbackDTO::is_feedback_id_Valid() const{
    return m_feedback_id_isValid;
}

QDateTime OAIGoodsFeedbackDTO::getCreatedAt() const {
    return m_created_at;
}
void OAIGoodsFeedbackDTO::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGoodsFeedbackDTO::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGoodsFeedbackDTO::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIGoodsFeedbackDTO::isNeedReaction() const {
    return m_need_reaction;
}
void OAIGoodsFeedbackDTO::setNeedReaction(const bool &need_reaction) {
    m_need_reaction = need_reaction;
    m_need_reaction_isSet = true;
}

bool OAIGoodsFeedbackDTO::is_need_reaction_Set() const{
    return m_need_reaction_isSet;
}

bool OAIGoodsFeedbackDTO::is_need_reaction_Valid() const{
    return m_need_reaction_isValid;
}

OAIGoodsFeedbackIdentifiersDTO OAIGoodsFeedbackDTO::getIdentifiers() const {
    return m_identifiers;
}
void OAIGoodsFeedbackDTO::setIdentifiers(const OAIGoodsFeedbackIdentifiersDTO &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIGoodsFeedbackDTO::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIGoodsFeedbackDTO::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QString OAIGoodsFeedbackDTO::getAuthor() const {
    return m_author;
}
void OAIGoodsFeedbackDTO::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIGoodsFeedbackDTO::is_author_Set() const{
    return m_author_isSet;
}

bool OAIGoodsFeedbackDTO::is_author_Valid() const{
    return m_author_isValid;
}

OAIGoodsFeedbackDescriptionDTO OAIGoodsFeedbackDTO::getDescription() const {
    return m_description;
}
void OAIGoodsFeedbackDTO::setDescription(const OAIGoodsFeedbackDescriptionDTO &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoodsFeedbackDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoodsFeedbackDTO::is_description_Valid() const{
    return m_description_isValid;
}

OAIGoodsFeedbackMediaDTO OAIGoodsFeedbackDTO::getMedia() const {
    return m_media;
}
void OAIGoodsFeedbackDTO::setMedia(const OAIGoodsFeedbackMediaDTO &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIGoodsFeedbackDTO::is_media_Set() const{
    return m_media_isSet;
}

bool OAIGoodsFeedbackDTO::is_media_Valid() const{
    return m_media_isValid;
}

OAIGoodsFeedbackStatisticsDTO OAIGoodsFeedbackDTO::getStatistics() const {
    return m_statistics;
}
void OAIGoodsFeedbackDTO::setStatistics(const OAIGoodsFeedbackStatisticsDTO &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIGoodsFeedbackDTO::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIGoodsFeedbackDTO::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAIGoodsFeedbackDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feedback_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_reaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoodsFeedbackDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_feedback_id_isValid && m_created_at_isValid && m_need_reaction_isValid && m_identifiers_isValid && m_statistics_isValid && true;
}

} // namespace OpenAPI
