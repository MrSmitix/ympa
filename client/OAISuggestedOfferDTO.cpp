/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestedOfferDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestedOfferDTO::OAISuggestedOfferDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestedOfferDTO::OAISuggestedOfferDTO() {
    this->initializeModel();
}

OAISuggestedOfferDTO::~OAISuggestedOfferDTO() {}

void OAISuggestedOfferDTO::initializeModel() {

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;

    m_barcodes_isSet = false;
    m_barcodes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_vendor_code_isSet = false;
    m_vendor_code_isValid = false;

    m_basic_price_isSet = false;
    m_basic_price_isValid = false;
}

void OAISuggestedOfferDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestedOfferDTO::fromJsonObject(QJsonObject json) {

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;

    m_barcodes_isValid = ::OpenAPI::fromJsonValue(m_barcodes, json[QString("barcodes")]);
    m_barcodes_isSet = !json[QString("barcodes")].isNull() && m_barcodes_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_vendor_code_isValid = ::OpenAPI::fromJsonValue(m_vendor_code, json[QString("vendorCode")]);
    m_vendor_code_isSet = !json[QString("vendorCode")].isNull() && m_vendor_code_isValid;

    m_basic_price_isValid = ::OpenAPI::fromJsonValue(m_basic_price, json[QString("basicPrice")]);
    m_basic_price_isSet = !json[QString("basicPrice")].isNull() && m_basic_price_isValid;
}

QString OAISuggestedOfferDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestedOfferDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    if (m_barcodes.size() > 0) {
        obj.insert(QString("barcodes"), ::OpenAPI::toJsonValue(m_barcodes));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_vendor_code_isSet) {
        obj.insert(QString("vendorCode"), ::OpenAPI::toJsonValue(m_vendor_code));
    }
    if (m_basic_price.isSet()) {
        obj.insert(QString("basicPrice"), ::OpenAPI::toJsonValue(m_basic_price));
    }
    return obj;
}

QString OAISuggestedOfferDTO::getOfferId() const {
    return m_offer_id;
}
void OAISuggestedOfferDTO::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAISuggestedOfferDTO::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAISuggestedOfferDTO::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAISuggestedOfferDTO::getName() const {
    return m_name;
}
void OAISuggestedOfferDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISuggestedOfferDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAISuggestedOfferDTO::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISuggestedOfferDTO::getCategory() const {
    return m_category;
}
void OAISuggestedOfferDTO::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISuggestedOfferDTO::is_category_Set() const{
    return m_category_isSet;
}

bool OAISuggestedOfferDTO::is_category_Valid() const{
    return m_category_isValid;
}

QString OAISuggestedOfferDTO::getVendor() const {
    return m_vendor;
}
void OAISuggestedOfferDTO::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAISuggestedOfferDTO::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAISuggestedOfferDTO::is_vendor_Valid() const{
    return m_vendor_isValid;
}

QList<QString> OAISuggestedOfferDTO::getBarcodes() const {
    return m_barcodes;
}
void OAISuggestedOfferDTO::setBarcodes(const QList<QString> &barcodes) {
    m_barcodes = barcodes;
    m_barcodes_isSet = true;
}

bool OAISuggestedOfferDTO::is_barcodes_Set() const{
    return m_barcodes_isSet;
}

bool OAISuggestedOfferDTO::is_barcodes_Valid() const{
    return m_barcodes_isValid;
}

QString OAISuggestedOfferDTO::getDescription() const {
    return m_description;
}
void OAISuggestedOfferDTO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISuggestedOfferDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAISuggestedOfferDTO::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISuggestedOfferDTO::getVendorCode() const {
    return m_vendor_code;
}
void OAISuggestedOfferDTO::setVendorCode(const QString &vendor_code) {
    m_vendor_code = vendor_code;
    m_vendor_code_isSet = true;
}

bool OAISuggestedOfferDTO::is_vendor_code_Set() const{
    return m_vendor_code_isSet;
}

bool OAISuggestedOfferDTO::is_vendor_code_Valid() const{
    return m_vendor_code_isValid;
}

OAIBasePriceDTO OAISuggestedOfferDTO::getBasicPrice() const {
    return m_basic_price;
}
void OAISuggestedOfferDTO::setBasicPrice(const OAIBasePriceDTO &basic_price) {
    m_basic_price = basic_price;
    m_basic_price_isSet = true;
}

bool OAISuggestedOfferDTO::is_basic_price_Set() const{
    return m_basic_price_isSet;
}

bool OAISuggestedOfferDTO::is_basic_price_Valid() const{
    return m_basic_price_isValid;
}

bool OAISuggestedOfferDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_basic_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestedOfferDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
