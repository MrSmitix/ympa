/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrdersStatsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrdersStatsRequest::OAIGetOrdersStatsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrdersStatsRequest::OAIGetOrdersStatsRequest() {
    this->initializeModel();
}

OAIGetOrdersStatsRequest::~OAIGetOrdersStatsRequest() {}

void OAIGetOrdersStatsRequest::initializeModel() {

    m_date_from_isSet = false;
    m_date_from_isValid = false;

    m_date_to_isSet = false;
    m_date_to_isValid = false;

    m_update_from_isSet = false;
    m_update_from_isValid = false;

    m_update_to_isSet = false;
    m_update_to_isValid = false;

    m_orders_isSet = false;
    m_orders_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_has_cis_isSet = false;
    m_has_cis_isValid = false;
}

void OAIGetOrdersStatsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrdersStatsRequest::fromJsonObject(QJsonObject json) {

    m_date_from_isValid = ::OpenAPI::fromJsonValue(m_date_from, json[QString("dateFrom")]);
    m_date_from_isSet = !json[QString("dateFrom")].isNull() && m_date_from_isValid;

    m_date_to_isValid = ::OpenAPI::fromJsonValue(m_date_to, json[QString("dateTo")]);
    m_date_to_isSet = !json[QString("dateTo")].isNull() && m_date_to_isValid;

    m_update_from_isValid = ::OpenAPI::fromJsonValue(m_update_from, json[QString("updateFrom")]);
    m_update_from_isSet = !json[QString("updateFrom")].isNull() && m_update_from_isValid;

    m_update_to_isValid = ::OpenAPI::fromJsonValue(m_update_to, json[QString("updateTo")]);
    m_update_to_isSet = !json[QString("updateTo")].isNull() && m_update_to_isValid;

    m_orders_isValid = ::OpenAPI::fromJsonValue(m_orders, json[QString("orders")]);
    m_orders_isSet = !json[QString("orders")].isNull() && m_orders_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;

    m_has_cis_isValid = ::OpenAPI::fromJsonValue(m_has_cis, json[QString("hasCis")]);
    m_has_cis_isSet = !json[QString("hasCis")].isNull() && m_has_cis_isValid;
}

QString OAIGetOrdersStatsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrdersStatsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_date_from_isSet) {
        obj.insert(QString("dateFrom"), ::OpenAPI::toJsonValue(m_date_from));
    }
    if (m_date_to_isSet) {
        obj.insert(QString("dateTo"), ::OpenAPI::toJsonValue(m_date_to));
    }
    if (m_update_from_isSet) {
        obj.insert(QString("updateFrom"), ::OpenAPI::toJsonValue(m_update_from));
    }
    if (m_update_to_isSet) {
        obj.insert(QString("updateTo"), ::OpenAPI::toJsonValue(m_update_to));
    }
    if (m_orders.size() > 0) {
        obj.insert(QString("orders"), ::OpenAPI::toJsonValue(m_orders));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    if (m_has_cis_isSet) {
        obj.insert(QString("hasCis"), ::OpenAPI::toJsonValue(m_has_cis));
    }
    return obj;
}

QDate OAIGetOrdersStatsRequest::getDateFrom() const {
    return m_date_from;
}
void OAIGetOrdersStatsRequest::setDateFrom(const QDate &date_from) {
    m_date_from = date_from;
    m_date_from_isSet = true;
}

bool OAIGetOrdersStatsRequest::is_date_from_Set() const{
    return m_date_from_isSet;
}

bool OAIGetOrdersStatsRequest::is_date_from_Valid() const{
    return m_date_from_isValid;
}

QDate OAIGetOrdersStatsRequest::getDateTo() const {
    return m_date_to;
}
void OAIGetOrdersStatsRequest::setDateTo(const QDate &date_to) {
    m_date_to = date_to;
    m_date_to_isSet = true;
}

bool OAIGetOrdersStatsRequest::is_date_to_Set() const{
    return m_date_to_isSet;
}

bool OAIGetOrdersStatsRequest::is_date_to_Valid() const{
    return m_date_to_isValid;
}

QDate OAIGetOrdersStatsRequest::getUpdateFrom() const {
    return m_update_from;
}
void OAIGetOrdersStatsRequest::setUpdateFrom(const QDate &update_from) {
    m_update_from = update_from;
    m_update_from_isSet = true;
}

bool OAIGetOrdersStatsRequest::is_update_from_Set() const{
    return m_update_from_isSet;
}

bool OAIGetOrdersStatsRequest::is_update_from_Valid() const{
    return m_update_from_isValid;
}

QDate OAIGetOrdersStatsRequest::getUpdateTo() const {
    return m_update_to;
}
void OAIGetOrdersStatsRequest::setUpdateTo(const QDate &update_to) {
    m_update_to = update_to;
    m_update_to_isSet = true;
}

bool OAIGetOrdersStatsRequest::is_update_to_Set() const{
    return m_update_to_isSet;
}

bool OAIGetOrdersStatsRequest::is_update_to_Valid() const{
    return m_update_to_isValid;
}

QList<qint64> OAIGetOrdersStatsRequest::getOrders() const {
    return m_orders;
}
void OAIGetOrdersStatsRequest::setOrders(const QList<qint64> &orders) {
    m_orders = orders;
    m_orders_isSet = true;
}

bool OAIGetOrdersStatsRequest::is_orders_Set() const{
    return m_orders_isSet;
}

bool OAIGetOrdersStatsRequest::is_orders_Valid() const{
    return m_orders_isValid;
}

QList<OAIOrderStatsStatusType> OAIGetOrdersStatsRequest::getStatuses() const {
    return m_statuses;
}
void OAIGetOrdersStatsRequest::setStatuses(const QList<OAIOrderStatsStatusType> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIGetOrdersStatsRequest::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIGetOrdersStatsRequest::is_statuses_Valid() const{
    return m_statuses_isValid;
}

bool OAIGetOrdersStatsRequest::isHasCis() const {
    return m_has_cis;
}
void OAIGetOrdersStatsRequest::setHasCis(const bool &has_cis) {
    m_has_cis = has_cis;
    m_has_cis_isSet = true;
}

bool OAIGetOrdersStatsRequest::is_has_cis_Set() const{
    return m_has_cis_isSet;
}

bool OAIGetOrdersStatsRequest::is_has_cis_Valid() const{
    return m_has_cis_isValid;
}

bool OAIGetOrdersStatsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_cis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrdersStatsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
