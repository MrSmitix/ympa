/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPickupAddressDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPickupAddressDTO::OAIPickupAddressDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPickupAddressDTO::OAIPickupAddressDTO() {
    this->initializeModel();
}

OAIPickupAddressDTO::~OAIPickupAddressDTO() {}

void OAIPickupAddressDTO::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_house_isSet = false;
    m_house_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;
}

void OAIPickupAddressDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPickupAddressDTO::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_house_isValid = ::OpenAPI::fromJsonValue(m_house, json[QString("house")]);
    m_house_isSet = !json[QString("house")].isNull() && m_house_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;
}

QString OAIPickupAddressDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPickupAddressDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_house_isSet) {
        obj.insert(QString("house"), ::OpenAPI::toJsonValue(m_house));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    return obj;
}

QString OAIPickupAddressDTO::getCountry() const {
    return m_country;
}
void OAIPickupAddressDTO::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPickupAddressDTO::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPickupAddressDTO::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPickupAddressDTO::getCity() const {
    return m_city;
}
void OAIPickupAddressDTO::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIPickupAddressDTO::is_city_Set() const{
    return m_city_isSet;
}

bool OAIPickupAddressDTO::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIPickupAddressDTO::getStreet() const {
    return m_street;
}
void OAIPickupAddressDTO::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIPickupAddressDTO::is_street_Set() const{
    return m_street_isSet;
}

bool OAIPickupAddressDTO::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIPickupAddressDTO::getHouse() const {
    return m_house;
}
void OAIPickupAddressDTO::setHouse(const QString &house) {
    m_house = house;
    m_house_isSet = true;
}

bool OAIPickupAddressDTO::is_house_Set() const{
    return m_house_isSet;
}

bool OAIPickupAddressDTO::is_house_Valid() const{
    return m_house_isValid;
}

QString OAIPickupAddressDTO::getPostcode() const {
    return m_postcode;
}
void OAIPickupAddressDTO::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAIPickupAddressDTO::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAIPickupAddressDTO::is_postcode_Valid() const{
    return m_postcode_isValid;
}

bool OAIPickupAddressDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPickupAddressDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
