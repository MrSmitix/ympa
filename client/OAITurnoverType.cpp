/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITurnoverType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITurnoverType::OAITurnoverType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITurnoverType::OAITurnoverType() {
    this->initializeModel();
}

OAITurnoverType::~OAITurnoverType() {}

void OAITurnoverType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITurnoverType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITurnoverType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAITurnoverType::LOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALMOST_LOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAITurnoverType::ALMOST_LOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HIGH", Qt::CaseInsensitive) == 0) {
        m_value = eOAITurnoverType::HIGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VERY_HIGH", Qt::CaseInsensitive) == 0) {
        m_value = eOAITurnoverType::VERY_HIGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_SALES", Qt::CaseInsensitive) == 0) {
        m_value = eOAITurnoverType::NO_SALES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FREE_STORE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITurnoverType::FREE_STORE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITurnoverType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITurnoverType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITurnoverType::LOW:
            val = "LOW";
            break;
        case eOAITurnoverType::ALMOST_LOW:
            val = "ALMOST_LOW";
            break;
        case eOAITurnoverType::HIGH:
            val = "HIGH";
            break;
        case eOAITurnoverType::VERY_HIGH:
            val = "VERY_HIGH";
            break;
        case eOAITurnoverType::NO_SALES:
            val = "NO_SALES";
            break;
        case eOAITurnoverType::FREE_STORE:
            val = "FREE_STORE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITurnoverType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITurnoverType::eOAITurnoverType OAITurnoverType::getValue() const {
    return m_value;
}

void OAITurnoverType::setValue(const OAITurnoverType::eOAITurnoverType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITurnoverType::isSet() const {
    
    return m_value_isSet;
}

bool OAITurnoverType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
