/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderDTO::OAIOrderDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderDTO::OAIOrderDTO() {
    this->initializeModel();
}

OAIOrderDTO::~OAIOrderDTO() {}

void OAIOrderDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_substatus_isSet = false;
    m_substatus_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_items_total_isSet = false;
    m_items_total_isValid = false;

    m_delivery_total_isSet = false;
    m_delivery_total_isValid = false;

    m_buyer_items_total_isSet = false;
    m_buyer_items_total_isValid = false;

    m_buyer_total_isSet = false;
    m_buyer_total_isValid = false;

    m_buyer_items_total_before_discount_isSet = false;
    m_buyer_items_total_before_discount_isValid = false;

    m_buyer_total_before_discount_isSet = false;
    m_buyer_total_before_discount_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_fake_isSet = false;
    m_fake_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_subsidies_isSet = false;
    m_subsidies_isValid = false;

    m_delivery_isSet = false;
    m_delivery_isValid = false;

    m_buyer_isSet = false;
    m_buyer_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_tax_system_isSet = false;
    m_tax_system_isValid = false;

    m_cancel_requested_isSet = false;
    m_cancel_requested_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;
}

void OAIOrderDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_substatus_isValid = ::OpenAPI::fromJsonValue(m_substatus, json[QString("substatus")]);
    m_substatus_isSet = !json[QString("substatus")].isNull() && m_substatus_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_items_total_isValid = ::OpenAPI::fromJsonValue(m_items_total, json[QString("itemsTotal")]);
    m_items_total_isSet = !json[QString("itemsTotal")].isNull() && m_items_total_isValid;

    m_delivery_total_isValid = ::OpenAPI::fromJsonValue(m_delivery_total, json[QString("deliveryTotal")]);
    m_delivery_total_isSet = !json[QString("deliveryTotal")].isNull() && m_delivery_total_isValid;

    m_buyer_items_total_isValid = ::OpenAPI::fromJsonValue(m_buyer_items_total, json[QString("buyerItemsTotal")]);
    m_buyer_items_total_isSet = !json[QString("buyerItemsTotal")].isNull() && m_buyer_items_total_isValid;

    m_buyer_total_isValid = ::OpenAPI::fromJsonValue(m_buyer_total, json[QString("buyerTotal")]);
    m_buyer_total_isSet = !json[QString("buyerTotal")].isNull() && m_buyer_total_isValid;

    m_buyer_items_total_before_discount_isValid = ::OpenAPI::fromJsonValue(m_buyer_items_total_before_discount, json[QString("buyerItemsTotalBeforeDiscount")]);
    m_buyer_items_total_before_discount_isSet = !json[QString("buyerItemsTotalBeforeDiscount")].isNull() && m_buyer_items_total_before_discount_isValid;

    m_buyer_total_before_discount_isValid = ::OpenAPI::fromJsonValue(m_buyer_total_before_discount, json[QString("buyerTotalBeforeDiscount")]);
    m_buyer_total_before_discount_isSet = !json[QString("buyerTotalBeforeDiscount")].isNull() && m_buyer_total_before_discount_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("paymentType")]);
    m_payment_type_isSet = !json[QString("paymentType")].isNull() && m_payment_type_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_fake_isValid = ::OpenAPI::fromJsonValue(m_fake, json[QString("fake")]);
    m_fake_isSet = !json[QString("fake")].isNull() && m_fake_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_subsidies_isValid = ::OpenAPI::fromJsonValue(m_subsidies, json[QString("subsidies")]);
    m_subsidies_isSet = !json[QString("subsidies")].isNull() && m_subsidies_isValid;

    m_delivery_isValid = ::OpenAPI::fromJsonValue(m_delivery, json[QString("delivery")]);
    m_delivery_isSet = !json[QString("delivery")].isNull() && m_delivery_isValid;

    m_buyer_isValid = ::OpenAPI::fromJsonValue(m_buyer, json[QString("buyer")]);
    m_buyer_isSet = !json[QString("buyer")].isNull() && m_buyer_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_tax_system_isValid = ::OpenAPI::fromJsonValue(m_tax_system, json[QString("taxSystem")]);
    m_tax_system_isSet = !json[QString("taxSystem")].isNull() && m_tax_system_isValid;

    m_cancel_requested_isValid = ::OpenAPI::fromJsonValue(m_cancel_requested, json[QString("cancelRequested")]);
    m_cancel_requested_isSet = !json[QString("cancelRequested")].isNull() && m_cancel_requested_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;
}

QString OAIOrderDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_substatus.isSet()) {
        obj.insert(QString("substatus"), ::OpenAPI::toJsonValue(m_substatus));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_items_total_isSet) {
        obj.insert(QString("itemsTotal"), ::OpenAPI::toJsonValue(m_items_total));
    }
    if (m_delivery_total_isSet) {
        obj.insert(QString("deliveryTotal"), ::OpenAPI::toJsonValue(m_delivery_total));
    }
    if (m_buyer_items_total_isSet) {
        obj.insert(QString("buyerItemsTotal"), ::OpenAPI::toJsonValue(m_buyer_items_total));
    }
    if (m_buyer_total_isSet) {
        obj.insert(QString("buyerTotal"), ::OpenAPI::toJsonValue(m_buyer_total));
    }
    if (m_buyer_items_total_before_discount_isSet) {
        obj.insert(QString("buyerItemsTotalBeforeDiscount"), ::OpenAPI::toJsonValue(m_buyer_items_total_before_discount));
    }
    if (m_buyer_total_before_discount_isSet) {
        obj.insert(QString("buyerTotalBeforeDiscount"), ::OpenAPI::toJsonValue(m_buyer_total_before_discount));
    }
    if (m_payment_type.isSet()) {
        obj.insert(QString("paymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_fake_isSet) {
        obj.insert(QString("fake"), ::OpenAPI::toJsonValue(m_fake));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_subsidies.size() > 0) {
        obj.insert(QString("subsidies"), ::OpenAPI::toJsonValue(m_subsidies));
    }
    if (m_delivery.isSet()) {
        obj.insert(QString("delivery"), ::OpenAPI::toJsonValue(m_delivery));
    }
    if (m_buyer.isSet()) {
        obj.insert(QString("buyer"), ::OpenAPI::toJsonValue(m_buyer));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_tax_system.isSet()) {
        obj.insert(QString("taxSystem"), ::OpenAPI::toJsonValue(m_tax_system));
    }
    if (m_cancel_requested_isSet) {
        obj.insert(QString("cancelRequested"), ::OpenAPI::toJsonValue(m_cancel_requested));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    return obj;
}

qint64 OAIOrderDTO::getId() const {
    return m_id;
}
void OAIOrderDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderDTO::is_id_Valid() const{
    return m_id_isValid;
}

OAIOrderStatusType OAIOrderDTO::getStatus() const {
    return m_status;
}
void OAIOrderDTO::setStatus(const OAIOrderStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOrderDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrderDTO::is_status_Valid() const{
    return m_status_isValid;
}

OAIOrderSubstatusType OAIOrderDTO::getSubstatus() const {
    return m_substatus;
}
void OAIOrderDTO::setSubstatus(const OAIOrderSubstatusType &substatus) {
    m_substatus = substatus;
    m_substatus_isSet = true;
}

bool OAIOrderDTO::is_substatus_Set() const{
    return m_substatus_isSet;
}

bool OAIOrderDTO::is_substatus_Valid() const{
    return m_substatus_isValid;
}

QString OAIOrderDTO::getCreationDate() const {
    return m_creation_date;
}
void OAIOrderDTO::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIOrderDTO::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIOrderDTO::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIOrderDTO::getUpdatedAt() const {
    return m_updated_at;
}
void OAIOrderDTO::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIOrderDTO::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIOrderDTO::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAICurrencyType OAIOrderDTO::getCurrency() const {
    return m_currency;
}
void OAIOrderDTO::setCurrency(const OAICurrencyType &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOrderDTO::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOrderDTO::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIOrderDTO::getItemsTotal() const {
    return m_items_total;
}
void OAIOrderDTO::setItemsTotal(const double &items_total) {
    m_items_total = items_total;
    m_items_total_isSet = true;
}

bool OAIOrderDTO::is_items_total_Set() const{
    return m_items_total_isSet;
}

bool OAIOrderDTO::is_items_total_Valid() const{
    return m_items_total_isValid;
}

double OAIOrderDTO::getDeliveryTotal() const {
    return m_delivery_total;
}
void OAIOrderDTO::setDeliveryTotal(const double &delivery_total) {
    m_delivery_total = delivery_total;
    m_delivery_total_isSet = true;
}

bool OAIOrderDTO::is_delivery_total_Set() const{
    return m_delivery_total_isSet;
}

bool OAIOrderDTO::is_delivery_total_Valid() const{
    return m_delivery_total_isValid;
}

double OAIOrderDTO::getBuyerItemsTotal() const {
    return m_buyer_items_total;
}
void OAIOrderDTO::setBuyerItemsTotal(const double &buyer_items_total) {
    m_buyer_items_total = buyer_items_total;
    m_buyer_items_total_isSet = true;
}

bool OAIOrderDTO::is_buyer_items_total_Set() const{
    return m_buyer_items_total_isSet;
}

bool OAIOrderDTO::is_buyer_items_total_Valid() const{
    return m_buyer_items_total_isValid;
}

double OAIOrderDTO::getBuyerTotal() const {
    return m_buyer_total;
}
void OAIOrderDTO::setBuyerTotal(const double &buyer_total) {
    m_buyer_total = buyer_total;
    m_buyer_total_isSet = true;
}

bool OAIOrderDTO::is_buyer_total_Set() const{
    return m_buyer_total_isSet;
}

bool OAIOrderDTO::is_buyer_total_Valid() const{
    return m_buyer_total_isValid;
}

double OAIOrderDTO::getBuyerItemsTotalBeforeDiscount() const {
    return m_buyer_items_total_before_discount;
}
void OAIOrderDTO::setBuyerItemsTotalBeforeDiscount(const double &buyer_items_total_before_discount) {
    m_buyer_items_total_before_discount = buyer_items_total_before_discount;
    m_buyer_items_total_before_discount_isSet = true;
}

bool OAIOrderDTO::is_buyer_items_total_before_discount_Set() const{
    return m_buyer_items_total_before_discount_isSet;
}

bool OAIOrderDTO::is_buyer_items_total_before_discount_Valid() const{
    return m_buyer_items_total_before_discount_isValid;
}

double OAIOrderDTO::getBuyerTotalBeforeDiscount() const {
    return m_buyer_total_before_discount;
}
void OAIOrderDTO::setBuyerTotalBeforeDiscount(const double &buyer_total_before_discount) {
    m_buyer_total_before_discount = buyer_total_before_discount;
    m_buyer_total_before_discount_isSet = true;
}

bool OAIOrderDTO::is_buyer_total_before_discount_Set() const{
    return m_buyer_total_before_discount_isSet;
}

bool OAIOrderDTO::is_buyer_total_before_discount_Valid() const{
    return m_buyer_total_before_discount_isValid;
}

OAIOrderPaymentType OAIOrderDTO::getPaymentType() const {
    return m_payment_type;
}
void OAIOrderDTO::setPaymentType(const OAIOrderPaymentType &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIOrderDTO::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIOrderDTO::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

OAIOrderPaymentMethodType OAIOrderDTO::getPaymentMethod() const {
    return m_payment_method;
}
void OAIOrderDTO::setPaymentMethod(const OAIOrderPaymentMethodType &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIOrderDTO::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIOrderDTO::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

bool OAIOrderDTO::isFake() const {
    return m_fake;
}
void OAIOrderDTO::setFake(const bool &fake) {
    m_fake = fake;
    m_fake_isSet = true;
}

bool OAIOrderDTO::is_fake_Set() const{
    return m_fake_isSet;
}

bool OAIOrderDTO::is_fake_Valid() const{
    return m_fake_isValid;
}

QList<OAIOrderItemDTO> OAIOrderDTO::getItems() const {
    return m_items;
}
void OAIOrderDTO::setItems(const QList<OAIOrderItemDTO> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOrderDTO::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOrderDTO::is_items_Valid() const{
    return m_items_isValid;
}

QList<OAIOrderSubsidyDTO> OAIOrderDTO::getSubsidies() const {
    return m_subsidies;
}
void OAIOrderDTO::setSubsidies(const QList<OAIOrderSubsidyDTO> &subsidies) {
    m_subsidies = subsidies;
    m_subsidies_isSet = true;
}

bool OAIOrderDTO::is_subsidies_Set() const{
    return m_subsidies_isSet;
}

bool OAIOrderDTO::is_subsidies_Valid() const{
    return m_subsidies_isValid;
}

OAIOrderDeliveryDTO OAIOrderDTO::getDelivery() const {
    return m_delivery;
}
void OAIOrderDTO::setDelivery(const OAIOrderDeliveryDTO &delivery) {
    m_delivery = delivery;
    m_delivery_isSet = true;
}

bool OAIOrderDTO::is_delivery_Set() const{
    return m_delivery_isSet;
}

bool OAIOrderDTO::is_delivery_Valid() const{
    return m_delivery_isValid;
}

OAIOrderBuyerDTO OAIOrderDTO::getBuyer() const {
    return m_buyer;
}
void OAIOrderDTO::setBuyer(const OAIOrderBuyerDTO &buyer) {
    m_buyer = buyer;
    m_buyer_isSet = true;
}

bool OAIOrderDTO::is_buyer_Set() const{
    return m_buyer_isSet;
}

bool OAIOrderDTO::is_buyer_Valid() const{
    return m_buyer_isValid;
}

QString OAIOrderDTO::getNotes() const {
    return m_notes;
}
void OAIOrderDTO::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIOrderDTO::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIOrderDTO::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIOrderTaxSystemType OAIOrderDTO::getTaxSystem() const {
    return m_tax_system;
}
void OAIOrderDTO::setTaxSystem(const OAIOrderTaxSystemType &tax_system) {
    m_tax_system = tax_system;
    m_tax_system_isSet = true;
}

bool OAIOrderDTO::is_tax_system_Set() const{
    return m_tax_system_isSet;
}

bool OAIOrderDTO::is_tax_system_Valid() const{
    return m_tax_system_isValid;
}

bool OAIOrderDTO::isCancelRequested() const {
    return m_cancel_requested;
}
void OAIOrderDTO::setCancelRequested(const bool &cancel_requested) {
    m_cancel_requested = cancel_requested;
    m_cancel_requested_isSet = true;
}

bool OAIOrderDTO::is_cancel_requested_Set() const{
    return m_cancel_requested_isSet;
}

bool OAIOrderDTO::is_cancel_requested_Valid() const{
    return m_cancel_requested_isValid;
}

QString OAIOrderDTO::getExpiryDate() const {
    return m_expiry_date;
}
void OAIOrderDTO::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIOrderDTO::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIOrderDTO::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

bool OAIOrderDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_substatus.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_items_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_items_total_before_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_total_before_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fake_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subsidies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_items_isValid && true;
}

} // namespace OpenAPI
