/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHiddenOffersApi_H
#define OAI_OAIHiddenOffersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddHiddenOffersRequest.h"
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiLockedErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIDeleteHiddenOffersRequest.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetHiddenOffersResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHiddenOffersApi : public QObject {
    Q_OBJECT

public:
    OAIHiddenOffersApi(const int timeOut = 0);
    ~OAIHiddenOffersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_add_hidden_offers_request OAIAddHiddenOffersRequest [required]
    */
    void addHiddenOffers(const qint64 &campaign_id, const OAIAddHiddenOffersRequest &oai_add_hidden_offers_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_delete_hidden_offers_request OAIDeleteHiddenOffersRequest [required]
    */
    void deleteHiddenOffers(const qint64 &campaign_id, const OAIDeleteHiddenOffersRequest &oai_delete_hidden_offers_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  offer_id QList<QString> [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    void getHiddenOffers(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QList<QString>> &offer_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addHiddenOffersCallback(OAIHttpRequestWorker *worker);
    void deleteHiddenOffersCallback(OAIHttpRequestWorker *worker);
    void getHiddenOffersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addHiddenOffersSignal(OAIEmptyApiResponse summary);
    void deleteHiddenOffersSignal(OAIEmptyApiResponse summary);
    void getHiddenOffersSignal(OAIGetHiddenOffersResponse summary);


    void addHiddenOffersSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void deleteHiddenOffersSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void getHiddenOffersSignalFull(OAIHttpRequestWorker *worker, OAIGetHiddenOffersResponse summary);

    Q_DECL_DEPRECATED_X("Use addHiddenOffersSignalError() instead")
    void addHiddenOffersSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addHiddenOffersSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHiddenOffersSignalError() instead")
    void deleteHiddenOffersSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHiddenOffersSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHiddenOffersSignalError() instead")
    void getHiddenOffersSignalE(OAIGetHiddenOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHiddenOffersSignalError(OAIGetHiddenOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addHiddenOffersSignalErrorFull() instead")
    void addHiddenOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addHiddenOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHiddenOffersSignalErrorFull() instead")
    void deleteHiddenOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHiddenOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHiddenOffersSignalErrorFull() instead")
    void getHiddenOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHiddenOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
