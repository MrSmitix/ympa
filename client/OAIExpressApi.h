/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExpressApi_H
#define OAI_OAIExpressApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddHiddenOffersRequest.h"
#include "OAIAddOffersToArchiveRequest.h"
#include "OAIAddOffersToArchiveResponse.h"
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiLockedErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAICalculateTariffsRequest.h"
#include "OAICalculateTariffsResponse.h"
#include "OAIConfirmPricesRequest.h"
#include "OAICreateChatRequest.h"
#include "OAICreateChatResponse.h"
#include "OAICurrencyType.h"
#include "OAIDeleteCampaignOffersRequest.h"
#include "OAIDeleteCampaignOffersResponse.h"
#include "OAIDeleteGoodsFeedbackCommentRequest.h"
#include "OAIDeleteHiddenOffersRequest.h"
#include "OAIDeleteOffersFromArchiveRequest.h"
#include "OAIDeleteOffersFromArchiveResponse.h"
#include "OAIDeleteOffersRequest.h"
#include "OAIDeleteOffersResponse.h"
#include "OAIDeletePromoOffersRequest.h"
#include "OAIDeletePromoOffersResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIFeedIndexLogsStatusType.h"
#include "OAIGenerateBoostConsolidatedRequest.h"
#include "OAIGenerateCompetitorsPositionReportRequest.h"
#include "OAIGenerateGoodsFeedbackRequest.h"
#include "OAIGenerateGoodsRealizationReportRequest.h"
#include "OAIGenerateMassOrderLabelsRequest.h"
#include "OAIGeneratePricesReportRequest.h"
#include "OAIGenerateReportResponse.h"
#include "OAIGenerateShelfsStatisticsRequest.h"
#include "OAIGenerateShowsSalesReportRequest.h"
#include "OAIGenerateStocksOnWarehousesReportRequest.h"
#include "OAIGenerateUnitedMarketplaceServicesReportRequest.h"
#include "OAIGenerateUnitedNettingReportRequest.h"
#include "OAIGenerateUnitedOrdersRequest.h"
#include "OAIGetAllOffersResponse.h"
#include "OAIGetBidsInfoRequest.h"
#include "OAIGetBidsInfoResponse.h"
#include "OAIGetBidsRecommendationsRequest.h"
#include "OAIGetBidsRecommendationsResponse.h"
#include "OAIGetBusinessBuyerInfoResponse.h"
#include "OAIGetBusinessDocumentsInfoResponse.h"
#include "OAIGetBusinessSettingsResponse.h"
#include "OAIGetCampaignLoginsResponse.h"
#include "OAIGetCampaignOffersRequest.h"
#include "OAIGetCampaignOffersResponse.h"
#include "OAIGetCampaignRegionResponse.h"
#include "OAIGetCampaignResponse.h"
#include "OAIGetCampaignSettingsResponse.h"
#include "OAIGetCampaignsResponse.h"
#include "OAIGetCategoriesMaxSaleQuantumRequest.h"
#include "OAIGetCategoriesMaxSaleQuantumResponse.h"
#include "OAIGetCategoriesRequest.h"
#include "OAIGetCategoriesResponse.h"
#include "OAIGetCategoryContentParametersResponse.h"
#include "OAIGetChatHistoryRequest.h"
#include "OAIGetChatHistoryResponse.h"
#include "OAIGetChatsRequest.h"
#include "OAIGetChatsResponse.h"
#include "OAIGetDeliveryServicesResponse.h"
#include "OAIGetFeedIndexLogsResponse.h"
#include "OAIGetFeedResponse.h"
#include "OAIGetFeedbackListResponse.h"
#include "OAIGetFeedsResponse.h"
#include "OAIGetGoodsFeedbackCommentsRequest.h"
#include "OAIGetGoodsFeedbackCommentsResponse.h"
#include "OAIGetGoodsFeedbackRequest.h"
#include "OAIGetGoodsFeedbackResponse.h"
#include "OAIGetGoodsStatsRequest.h"
#include "OAIGetGoodsStatsResponse.h"
#include "OAIGetHiddenOffersResponse.h"
#include "OAIGetOfferCardsContentStatusRequest.h"
#include "OAIGetOfferCardsContentStatusResponse.h"
#include "OAIGetOfferMappingEntriesResponse.h"
#include "OAIGetOfferMappingsRequest.h"
#include "OAIGetOfferMappingsResponse.h"
#include "OAIGetOfferRecommendationsRequest.h"
#include "OAIGetOfferRecommendationsResponse.h"
#include "OAIGetOffersResponse.h"
#include "OAIGetOrderLabelsDataResponse.h"
#include "OAIGetOrderResponse.h"
#include "OAIGetOrdersResponse.h"
#include "OAIGetOrdersStatsRequest.h"
#include "OAIGetOrdersStatsResponse.h"
#include "OAIGetPricesByOfferIdsRequest.h"
#include "OAIGetPricesByOfferIdsResponse.h"
#include "OAIGetPricesResponse.h"
#include "OAIGetPromoOffersRequest.h"
#include "OAIGetPromoOffersResponse.h"
#include "OAIGetPromosRequest.h"
#include "OAIGetPromosResponse.h"
#include "OAIGetQualityRatingDetailsResponse.h"
#include "OAIGetQualityRatingRequest.h"
#include "OAIGetQualityRatingResponse.h"
#include "OAIGetQuarantineOffersRequest.h"
#include "OAIGetQuarantineOffersResponse.h"
#include "OAIGetRegionWithChildrenResponse.h"
#include "OAIGetRegionsResponse.h"
#include "OAIGetReportInfoResponse.h"
#include "OAIGetReturnResponse.h"
#include "OAIGetReturnsResponse.h"
#include "OAIGetSuggestedOfferMappingEntriesRequest.h"
#include "OAIGetSuggestedOfferMappingEntriesResponse.h"
#include "OAIGetSuggestedOfferMappingsRequest.h"
#include "OAIGetSuggestedOfferMappingsResponse.h"
#include "OAIGetWarehouseStocksRequest.h"
#include "OAIGetWarehouseStocksResponse.h"
#include "OAIGetWarehousesResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIOfferAvailabilityStatusType.h"
#include "OAIOfferMappingKindType.h"
#include "OAIOfferProcessingStatusType.h"
#include "OAIOrderBuyerType.h"
#include "OAIOrderDeliveryDispatchType.h"
#include "OAIOrderStatusType.h"
#include "OAIOrderSubstatusType.h"
#include "OAIPageFormatType.h"
#include "OAIProvideOrderItemIdentifiersRequest.h"
#include "OAIProvideOrderItemIdentifiersResponse.h"
#include "OAIPutSkuBidsRequest.h"
#include "OAIRefundStatusType.h"
#include "OAIReportFormatType.h"
#include "OAIReturnType.h"
#include "OAISendMessageToChatRequest.h"
#include "OAISetFeedParamsRequest.h"
#include "OAISetOrderBoxLayoutRequest.h"
#include "OAISetOrderBoxLayoutResponse.h"
#include "OAISetOrderShipmentBoxesRequest.h"
#include "OAISetOrderShipmentBoxesResponse.h"
#include "OAISkipGoodsFeedbackReactionRequest.h"
#include "OAISuggestPricesRequest.h"
#include "OAISuggestPricesResponse.h"
#include "OAIUpdateBusinessPricesRequest.h"
#include "OAIUpdateCampaignOffersRequest.h"
#include "OAIUpdateGoodsFeedbackCommentRequest.h"
#include "OAIUpdateGoodsFeedbackCommentResponse.h"
#include "OAIUpdateOfferContentRequest.h"
#include "OAIUpdateOfferContentResponse.h"
#include "OAIUpdateOfferMappingEntryRequest.h"
#include "OAIUpdateOfferMappingsRequest.h"
#include "OAIUpdateOfferMappingsResponse.h"
#include "OAIUpdateOrderItemRequest.h"
#include "OAIUpdateOrderStatusRequest.h"
#include "OAIUpdateOrderStatusResponse.h"
#include "OAIUpdateOrderStatusesRequest.h"
#include "OAIUpdateOrderStatusesResponse.h"
#include "OAIUpdatePricesRequest.h"
#include "OAIUpdatePromoOffersRequest.h"
#include "OAIUpdatePromoOffersResponse.h"
#include "OAIUpdateStocksRequest.h"
#include "OAIVerifyOrderEacRequest.h"
#include "OAIVerifyOrderEacResponse.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExpressApi : public QObject {
    Q_OBJECT

public:
    OAIExpressApi(const int timeOut = 0);
    ~OAIExpressApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_add_hidden_offers_request OAIAddHiddenOffersRequest [required]
    */
    void addHiddenOffers(const qint64 &campaign_id, const OAIAddHiddenOffersRequest &oai_add_hidden_offers_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_add_offers_to_archive_request OAIAddOffersToArchiveRequest [required]
    */
    void addOffersToArchive(const qint64 &business_id, const OAIAddOffersToArchiveRequest &oai_add_offers_to_archive_request);

    /**
    * @param[in]  oai_calculate_tariffs_request OAICalculateTariffsRequest [required]
    */
    void calculateTariffs(const OAICalculateTariffsRequest &oai_calculate_tariffs_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_confirm_prices_request OAIConfirmPricesRequest [required]
    */
    void confirmBusinessPrices(const qint64 &business_id, const OAIConfirmPricesRequest &oai_confirm_prices_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_confirm_prices_request OAIConfirmPricesRequest [required]
    */
    void confirmCampaignPrices(const qint64 &campaign_id, const OAIConfirmPricesRequest &oai_confirm_prices_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_create_chat_request OAICreateChatRequest [required]
    */
    void createChat(const qint64 &business_id, const OAICreateChatRequest &oai_create_chat_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_delete_campaign_offers_request OAIDeleteCampaignOffersRequest [required]
    */
    void deleteCampaignOffers(const qint64 &campaign_id, const OAIDeleteCampaignOffersRequest &oai_delete_campaign_offers_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_delete_goods_feedback_comment_request OAIDeleteGoodsFeedbackCommentRequest [required]
    */
    void deleteGoodsFeedbackComment(const qint64 &business_id, const OAIDeleteGoodsFeedbackCommentRequest &oai_delete_goods_feedback_comment_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_delete_hidden_offers_request OAIDeleteHiddenOffersRequest [required]
    */
    void deleteHiddenOffers(const qint64 &campaign_id, const OAIDeleteHiddenOffersRequest &oai_delete_hidden_offers_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_delete_offers_request OAIDeleteOffersRequest [required]
    */
    void deleteOffers(const qint64 &business_id, const OAIDeleteOffersRequest &oai_delete_offers_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_delete_offers_from_archive_request OAIDeleteOffersFromArchiveRequest [required]
    */
    void deleteOffersFromArchive(const qint64 &business_id, const OAIDeleteOffersFromArchiveRequest &oai_delete_offers_from_archive_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_delete_promo_offers_request OAIDeletePromoOffersRequest [required]
    */
    void deletePromoOffers(const qint64 &business_id, const OAIDeletePromoOffersRequest &oai_delete_promo_offers_request);

    /**
    * @param[in]  oai_generate_boost_consolidated_request OAIGenerateBoostConsolidatedRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateBoostConsolidatedReport(const OAIGenerateBoostConsolidatedRequest &oai_generate_boost_consolidated_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_competitors_position_report_request OAIGenerateCompetitorsPositionReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateCompetitorsPositionReport(const OAIGenerateCompetitorsPositionReportRequest &oai_generate_competitors_position_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_goods_feedback_request OAIGenerateGoodsFeedbackRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateGoodsFeedbackReport(const OAIGenerateGoodsFeedbackRequest &oai_generate_goods_feedback_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_goods_realization_report_request OAIGenerateGoodsRealizationReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateGoodsRealizationReport(const OAIGenerateGoodsRealizationReportRequest &oai_generate_goods_realization_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_mass_order_labels_request OAIGenerateMassOrderLabelsRequest [required]
    * @param[in]  format OAIPageFormatType [optional]
    */
    void generateMassOrderLabelsReport(const OAIGenerateMassOrderLabelsRequest &oai_generate_mass_order_labels_request, const ::OpenAPI::OptionalParam<OAIPageFormatType> &format = ::OpenAPI::OptionalParam<OAIPageFormatType>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    * @param[in]  box_id qint64 [required]
    * @param[in]  format OAIPageFormatType [optional]
    */
    void generateOrderLabel(const qint64 &campaign_id, const qint64 &order_id, const qint64 &shipment_id, const qint64 &box_id, const ::OpenAPI::OptionalParam<OAIPageFormatType> &format = ::OpenAPI::OptionalParam<OAIPageFormatType>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  format OAIPageFormatType [optional]
    */
    void generateOrderLabels(const qint64 &campaign_id, const qint64 &order_id, const ::OpenAPI::OptionalParam<OAIPageFormatType> &format = ::OpenAPI::OptionalParam<OAIPageFormatType>());

    /**
    * @param[in]  oai_generate_prices_report_request OAIGeneratePricesReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generatePricesReport(const OAIGeneratePricesReportRequest &oai_generate_prices_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_shelfs_statistics_request OAIGenerateShelfsStatisticsRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateShelfsStatisticsReport(const OAIGenerateShelfsStatisticsRequest &oai_generate_shelfs_statistics_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_shows_sales_report_request OAIGenerateShowsSalesReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateShowsSalesReport(const OAIGenerateShowsSalesReportRequest &oai_generate_shows_sales_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_stocks_on_warehouses_report_request OAIGenerateStocksOnWarehousesReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateStocksOnWarehousesReport(const OAIGenerateStocksOnWarehousesReportRequest &oai_generate_stocks_on_warehouses_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_united_marketplace_services_report_request OAIGenerateUnitedMarketplaceServicesReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateUnitedMarketplaceServicesReport(const OAIGenerateUnitedMarketplaceServicesReportRequest &oai_generate_united_marketplace_services_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_united_netting_report_request OAIGenerateUnitedNettingReportRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateUnitedNettingReport(const OAIGenerateUnitedNettingReportRequest &oai_generate_united_netting_report_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  oai_generate_united_orders_request OAIGenerateUnitedOrdersRequest [required]
    * @param[in]  format OAIReportFormatType [optional]
    */
    void generateUnitedOrdersReport(const OAIGenerateUnitedOrdersRequest &oai_generate_united_orders_request, const ::OpenAPI::OptionalParam<OAIReportFormatType> &format = ::OpenAPI::OptionalParam<OAIReportFormatType>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  feed_id qint64 [optional]
    * @param[in]  chunk qint32 [optional]
    */
    Q_DECL_DEPRECATED void getAllOffers(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<qint64> &feed_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &chunk = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  oai_get_bids_info_request OAIGetBidsInfoRequest [optional]
    */
    void getBidsInfoForBusiness(const qint64 &business_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGetBidsInfoRequest> &oai_get_bids_info_request = ::OpenAPI::OptionalParam<OAIGetBidsInfoRequest>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_bids_recommendations_request OAIGetBidsRecommendationsRequest [required]
    */
    void getBidsRecommendations(const qint64 &business_id, const OAIGetBidsRecommendationsRequest &oai_get_bids_recommendations_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_quarantine_offers_request OAIGetQuarantineOffersRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getBusinessQuarantineOffers(const qint64 &business_id, const OAIGetQuarantineOffersRequest &oai_get_quarantine_offers_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id qint64 [required]
    */
    void getBusinessSettings(const qint64 &business_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    */
    void getCampaign(const qint64 &campaign_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    */
    void getCampaignLogins(const qint64 &campaign_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_get_campaign_offers_request OAIGetCampaignOffersRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getCampaignOffers(const qint64 &campaign_id, const OAIGetCampaignOffersRequest &oai_get_campaign_offers_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_get_quarantine_offers_request OAIGetQuarantineOffersRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getCampaignQuarantineOffers(const qint64 &campaign_id, const OAIGetQuarantineOffersRequest &oai_get_quarantine_offers_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  campaign_id qint64 [required]
    */
    Q_DECL_DEPRECATED void getCampaignRegion(const qint64 &campaign_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    */
    void getCampaignSettings(const qint64 &campaign_id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    void getCampaigns(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  login QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    void getCampaignsByLogin(const QString &login, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_get_categories_max_sale_quantum_request OAIGetCategoriesMaxSaleQuantumRequest [required]
    */
    void getCategoriesMaxSaleQuantum(const OAIGetCategoriesMaxSaleQuantumRequest &oai_get_categories_max_sale_quantum_request);

    /**
    * @param[in]  oai_get_categories_request OAIGetCategoriesRequest [optional]
    */
    void getCategoriesTree(const ::OpenAPI::OptionalParam<OAIGetCategoriesRequest> &oai_get_categories_request = ::OpenAPI::OptionalParam<OAIGetCategoriesRequest>());

    /**
    * @param[in]  category_id qint64 [required]
    */
    void getCategoryContentParameters(const qint64 &category_id);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  chat_id qint64 [required]
    * @param[in]  oai_get_chat_history_request OAIGetChatHistoryRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getChatHistory(const qint64 &business_id, const qint64 &chat_id, const OAIGetChatHistoryRequest &oai_get_chat_history_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_chats_request OAIGetChatsRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getChats(const qint64 &business_id, const OAIGetChatsRequest &oai_get_chats_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


    void getDeliveryServices();

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  feed_id qint64 [required]
    */
    Q_DECL_DEPRECATED void getFeed(const qint64 &campaign_id, const qint64 &feed_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  feed_id qint64 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  published_time_from QDateTime [optional]
    * @param[in]  published_time_to QDateTime [optional]
    * @param[in]  status OAIFeedIndexLogsStatusType [optional]
    */
    Q_DECL_DEPRECATED void getFeedIndexLogs(const qint64 &campaign_id, const qint64 &feed_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &published_time_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &published_time_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIFeedIndexLogsStatusType> &status = ::OpenAPI::OptionalParam<OAIFeedIndexLogsStatusType>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  from_date QDate [optional]
    */
    Q_DECL_DEPRECATED void getFeedbackAndCommentUpdates(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDate> &from_date = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  campaign_id qint64 [required]
    */
    Q_DECL_DEPRECATED void getFeeds(const qint64 &campaign_id);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_goods_feedback_comments_request OAIGetGoodsFeedbackCommentsRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getGoodsFeedbackComments(const qint64 &business_id, const OAIGetGoodsFeedbackCommentsRequest &oai_get_goods_feedback_comments_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  oai_get_goods_feedback_request OAIGetGoodsFeedbackRequest [optional]
    */
    void getGoodsFeedbacks(const qint64 &business_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGetGoodsFeedbackRequest> &oai_get_goods_feedback_request = ::OpenAPI::OptionalParam<OAIGetGoodsFeedbackRequest>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_get_goods_stats_request OAIGetGoodsStatsRequest [required]
    */
    void getGoodsStats(const qint64 &campaign_id, const OAIGetGoodsStatsRequest &oai_get_goods_stats_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  offer_id QList<QString> [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    void getHiddenOffers(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QList<QString>> &offer_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  oai_get_offer_cards_content_status_request OAIGetOfferCardsContentStatusRequest [optional]
    */
    void getOfferCardsContentStatus(const qint64 &business_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGetOfferCardsContentStatusRequest> &oai_get_offer_cards_content_status_request = ::OpenAPI::OptionalParam<OAIGetOfferCardsContentStatusRequest>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  offer_id QList<QString> [optional]
    * @param[in]  shop_sku QList<QString> [optional]
    * @param[in]  mapping_kind OAIOfferMappingKindType [optional]
    * @param[in]  status QList<OAIOfferProcessingStatusType> [optional]
    * @param[in]  availability QList<OAIOfferAvailabilityStatusType> [optional]
    * @param[in]  category_id QList<qint32> [optional]
    * @param[in]  vendor QList<QString> [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    Q_DECL_DEPRECATED void getOfferMappingEntries(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QList<QString>> &offer_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &shop_sku = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIOfferMappingKindType> &mapping_kind = ::OpenAPI::OptionalParam<OAIOfferMappingKindType>(), const ::OpenAPI::OptionalParam<QList<OAIOfferProcessingStatusType>> &status = ::OpenAPI::OptionalParam<QList<OAIOfferProcessingStatusType>>(), const ::OpenAPI::OptionalParam<QList<OAIOfferAvailabilityStatusType>> &availability = ::OpenAPI::OptionalParam<QList<OAIOfferAvailabilityStatusType>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &category_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &vendor = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  oai_get_offer_mappings_request OAIGetOfferMappingsRequest [optional]
    */
    void getOfferMappings(const qint64 &business_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGetOfferMappingsRequest> &oai_get_offer_mappings_request = ::OpenAPI::OptionalParam<OAIGetOfferMappingsRequest>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_offer_recommendations_request OAIGetOfferRecommendationsRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getOfferRecommendations(const qint64 &business_id, const OAIGetOfferRecommendationsRequest &oai_get_offer_recommendations_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  query QString [optional]
    * @param[in]  feed_id qint64 [optional]
    * @param[in]  shop_category_id QString [optional]
    * @param[in]  currency OAICurrencyType [optional]
    * @param[in]  matched bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    Q_DECL_DEPRECATED void getOffers(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &feed_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &shop_category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICurrencyType> &currency = ::OpenAPI::OptionalParam<OAICurrencyType>(), const ::OpenAPI::OptionalParam<bool> &matched = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    */
    void getOrder(const qint64 &campaign_id, const qint64 &order_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    */
    void getOrderBusinessBuyerInfo(const qint64 &campaign_id, const qint64 &order_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    */
    void getOrderBusinessDocumentsInfo(const qint64 &campaign_id, const qint64 &order_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    */
    void getOrderLabelsData(const qint64 &campaign_id, const qint64 &order_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_ids QList<qint64> [optional]
    * @param[in]  status QSet<OAIOrderStatusType> [optional]
    * @param[in]  substatus QSet<OAIOrderSubstatusType> [optional]
    * @param[in]  from_date QDate [optional]
    * @param[in]  to_date QDate [optional]
    * @param[in]  supplier_shipment_date_from QDate [optional]
    * @param[in]  supplier_shipment_date_to QDate [optional]
    * @param[in]  updated_at_from QDateTime [optional]
    * @param[in]  updated_at_to QDateTime [optional]
    * @param[in]  dispatch_type OAIOrderDeliveryDispatchType [optional]
    * @param[in]  fake bool [optional]
    * @param[in]  has_cis bool [optional]
    * @param[in]  only_waiting_for_cancellation_approve bool [optional]
    * @param[in]  only_estimated_delivery bool [optional]
    * @param[in]  buyer_type OAIOrderBuyerType [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getOrders(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QList<qint64>> &order_ids = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<QSet<OAIOrderStatusType>> &status = ::OpenAPI::OptionalParam<QSet<OAIOrderStatusType>>(), const ::OpenAPI::OptionalParam<QSet<OAIOrderSubstatusType>> &substatus = ::OpenAPI::OptionalParam<QSet<OAIOrderSubstatusType>>(), const ::OpenAPI::OptionalParam<QDate> &from_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &to_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &supplier_shipment_date_from = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &supplier_shipment_date_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIOrderDeliveryDispatchType> &dispatch_type = ::OpenAPI::OptionalParam<OAIOrderDeliveryDispatchType>(), const ::OpenAPI::OptionalParam<bool> &fake = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &has_cis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &only_waiting_for_cancellation_approve = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &only_estimated_delivery = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIOrderBuyerType> &buyer_type = ::OpenAPI::OptionalParam<OAIOrderBuyerType>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  oai_get_orders_stats_request OAIGetOrdersStatsRequest [optional]
    */
    void getOrdersStats(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGetOrdersStatsRequest> &oai_get_orders_stats_request = ::OpenAPI::OptionalParam<OAIGetOrdersStatsRequest>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  archived bool [optional]
    */
    Q_DECL_DEPRECATED void getPrices(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  oai_get_prices_by_offer_ids_request OAIGetPricesByOfferIdsRequest [optional]
    */
    void getPricesByOfferIds(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGetPricesByOfferIdsRequest> &oai_get_prices_by_offer_ids_request = ::OpenAPI::OptionalParam<OAIGetPricesByOfferIdsRequest>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_promo_offers_request OAIGetPromoOffersRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getPromoOffers(const qint64 &business_id, const OAIGetPromoOffersRequest &oai_get_promo_offers_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_promos_request OAIGetPromosRequest [optional]
    */
    void getPromos(const qint64 &business_id, const ::OpenAPI::OptionalParam<OAIGetPromosRequest> &oai_get_promos_request = ::OpenAPI::OptionalParam<OAIGetPromosRequest>());

    /**
    * @param[in]  campaign_id qint64 [required]
    */
    void getQualityRatingDetails(const qint64 &campaign_id);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_quality_rating_request OAIGetQualityRatingRequest [required]
    */
    void getQualityRatings(const qint64 &business_id, const OAIGetQualityRatingRequest &oai_get_quality_rating_request);

    /**
    * @param[in]  report_id QString [required]
    */
    void getReportInfo(const QString &report_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  return_id qint64 [required]
    */
    void getReturn(const qint64 &campaign_id, const qint64 &order_id, const qint64 &return_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  return_id qint64 [required]
    */
    void getReturnApplication(const qint64 &campaign_id, const qint64 &order_id, const qint64 &return_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  return_id qint64 [required]
    * @param[in]  item_id qint64 [required]
    * @param[in]  image_hash QString [required]
    */
    void getReturnPhoto(const qint64 &campaign_id, const qint64 &order_id, const qint64 &return_id, const qint64 &item_id, const QString &image_hash);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  order_ids QList<qint64> [optional]
    * @param[in]  statuses QList<OAIRefundStatusType> [optional]
    * @param[in]  type OAIReturnType [optional]
    * @param[in]  from_date QDate [optional]
    * @param[in]  to_date QDate [optional]
    * @param[in]  from_date2 QDate [optional]
    * @param[in]  to_date2 QDate [optional]
    */
    void getReturns(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint64>> &order_ids = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<QList<OAIRefundStatusType>> &statuses = ::OpenAPI::OptionalParam<QList<OAIRefundStatusType>>(), const ::OpenAPI::OptionalParam<OAIReturnType> &type = ::OpenAPI::OptionalParam<OAIReturnType>(), const ::OpenAPI::OptionalParam<QDate> &from_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &to_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &from_date2 = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &to_date2 = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  oai_get_warehouse_stocks_request OAIGetWarehouseStocksRequest [optional]
    */
    void getStocks(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGetWarehouseStocksRequest> &oai_get_warehouse_stocks_request = ::OpenAPI::OptionalParam<OAIGetWarehouseStocksRequest>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_get_suggested_offer_mapping_entries_request OAIGetSuggestedOfferMappingEntriesRequest [required]
    */
    Q_DECL_DEPRECATED void getSuggestedOfferMappingEntries(const qint64 &campaign_id, const OAIGetSuggestedOfferMappingEntriesRequest &oai_get_suggested_offer_mapping_entries_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_suggested_offer_mappings_request OAIGetSuggestedOfferMappingsRequest [optional]
    */
    void getSuggestedOfferMappings(const qint64 &business_id, const ::OpenAPI::OptionalParam<OAIGetSuggestedOfferMappingsRequest> &oai_get_suggested_offer_mappings_request = ::OpenAPI::OptionalParam<OAIGetSuggestedOfferMappingsRequest>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_suggest_prices_request OAISuggestPricesRequest [required]
    */
    Q_DECL_DEPRECATED void getSuggestedPrices(const qint64 &campaign_id, const OAISuggestPricesRequest &oai_suggest_prices_request);

    /**
    * @param[in]  business_id qint64 [required]
    */
    void getWarehouses(const qint64 &business_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_provide_order_item_identifiers_request OAIProvideOrderItemIdentifiersRequest [required]
    */
    void provideOrderItemIdentifiers(const qint64 &campaign_id, const qint64 &order_id, const OAIProvideOrderItemIdentifiersRequest &oai_provide_order_item_identifiers_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_put_sku_bids_request OAIPutSkuBidsRequest [required]
    */
    void putBidsForBusiness(const qint64 &business_id, const OAIPutSkuBidsRequest &oai_put_sku_bids_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_put_sku_bids_request OAIPutSkuBidsRequest [required]
    */
    void putBidsForCampaign(const qint64 &campaign_id, const OAIPutSkuBidsRequest &oai_put_sku_bids_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  feed_id qint64 [required]
    */
    Q_DECL_DEPRECATED void refreshFeed(const qint64 &campaign_id, const qint64 &feed_id);

    /**
    * @param[in]  region_id qint64 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    void searchRegionChildren(const qint64 &region_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  region_id qint64 [required]
    */
    void searchRegionsById(const qint64 &region_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void searchRegionsByName(const QString &name, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  chat_id qint64 [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    void sendFileToChat(const qint64 &business_id, const qint64 &chat_id, const OAIHttpFileElement &file);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  chat_id qint64 [required]
    * @param[in]  oai_send_message_to_chat_request OAISendMessageToChatRequest [required]
    */
    void sendMessageToChat(const qint64 &business_id, const qint64 &chat_id, const OAISendMessageToChatRequest &oai_send_message_to_chat_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  feed_id qint64 [required]
    * @param[in]  oai_set_feed_params_request OAISetFeedParamsRequest [required]
    */
    Q_DECL_DEPRECATED void setFeedParams(const qint64 &campaign_id, const qint64 &feed_id, const OAISetFeedParamsRequest &oai_set_feed_params_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_set_order_box_layout_request OAISetOrderBoxLayoutRequest [required]
    */
    void setOrderBoxLayout(const qint64 &campaign_id, const qint64 &order_id, const OAISetOrderBoxLayoutRequest &oai_set_order_box_layout_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    * @param[in]  oai_set_order_shipment_boxes_request OAISetOrderShipmentBoxesRequest [required]
    */
    void setOrderShipmentBoxes(const qint64 &campaign_id, const qint64 &order_id, const qint64 &shipment_id, const OAISetOrderShipmentBoxesRequest &oai_set_order_shipment_boxes_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_skip_goods_feedback_reaction_request OAISkipGoodsFeedbackReactionRequest [required]
    */
    void skipGoodsFeedbacksReaction(const qint64 &business_id, const OAISkipGoodsFeedbackReactionRequest &oai_skip_goods_feedback_reaction_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_update_business_prices_request OAIUpdateBusinessPricesRequest [required]
    */
    void updateBusinessPrices(const qint64 &business_id, const OAIUpdateBusinessPricesRequest &oai_update_business_prices_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_update_campaign_offers_request OAIUpdateCampaignOffersRequest [required]
    */
    void updateCampaignOffers(const qint64 &campaign_id, const OAIUpdateCampaignOffersRequest &oai_update_campaign_offers_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_update_goods_feedback_comment_request OAIUpdateGoodsFeedbackCommentRequest [required]
    */
    void updateGoodsFeedbackComment(const qint64 &business_id, const OAIUpdateGoodsFeedbackCommentRequest &oai_update_goods_feedback_comment_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_update_offer_content_request OAIUpdateOfferContentRequest [required]
    */
    void updateOfferContent(const qint64 &business_id, const OAIUpdateOfferContentRequest &oai_update_offer_content_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_update_offer_mapping_entry_request OAIUpdateOfferMappingEntryRequest [required]
    */
    Q_DECL_DEPRECATED void updateOfferMappingEntries(const qint64 &campaign_id, const OAIUpdateOfferMappingEntryRequest &oai_update_offer_mapping_entry_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_update_offer_mappings_request OAIUpdateOfferMappingsRequest [required]
    */
    void updateOfferMappings(const qint64 &business_id, const OAIUpdateOfferMappingsRequest &oai_update_offer_mappings_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_update_order_item_request OAIUpdateOrderItemRequest [required]
    */
    void updateOrderItems(const qint64 &campaign_id, const qint64 &order_id, const OAIUpdateOrderItemRequest &oai_update_order_item_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_update_order_status_request OAIUpdateOrderStatusRequest [required]
    */
    void updateOrderStatus(const qint64 &campaign_id, const qint64 &order_id, const OAIUpdateOrderStatusRequest &oai_update_order_status_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_update_order_statuses_request OAIUpdateOrderStatusesRequest [required]
    */
    void updateOrderStatuses(const qint64 &campaign_id, const OAIUpdateOrderStatusesRequest &oai_update_order_statuses_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_update_prices_request OAIUpdatePricesRequest [required]
    */
    void updatePrices(const qint64 &campaign_id, const OAIUpdatePricesRequest &oai_update_prices_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_update_promo_offers_request OAIUpdatePromoOffersRequest [required]
    */
    void updatePromoOffers(const qint64 &business_id, const OAIUpdatePromoOffersRequest &oai_update_promo_offers_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_update_stocks_request OAIUpdateStocksRequest [required]
    */
    void updateStocks(const qint64 &campaign_id, const OAIUpdateStocksRequest &oai_update_stocks_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_verify_order_eac_request OAIVerifyOrderEacRequest [required]
    */
    void verifyOrderEac(const qint64 &campaign_id, const qint64 &order_id, const OAIVerifyOrderEacRequest &oai_verify_order_eac_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addHiddenOffersCallback(OAIHttpRequestWorker *worker);
    void addOffersToArchiveCallback(OAIHttpRequestWorker *worker);
    void calculateTariffsCallback(OAIHttpRequestWorker *worker);
    void confirmBusinessPricesCallback(OAIHttpRequestWorker *worker);
    void confirmCampaignPricesCallback(OAIHttpRequestWorker *worker);
    void createChatCallback(OAIHttpRequestWorker *worker);
    void deleteCampaignOffersCallback(OAIHttpRequestWorker *worker);
    void deleteGoodsFeedbackCommentCallback(OAIHttpRequestWorker *worker);
    void deleteHiddenOffersCallback(OAIHttpRequestWorker *worker);
    void deleteOffersCallback(OAIHttpRequestWorker *worker);
    void deleteOffersFromArchiveCallback(OAIHttpRequestWorker *worker);
    void deletePromoOffersCallback(OAIHttpRequestWorker *worker);
    void generateBoostConsolidatedReportCallback(OAIHttpRequestWorker *worker);
    void generateCompetitorsPositionReportCallback(OAIHttpRequestWorker *worker);
    void generateGoodsFeedbackReportCallback(OAIHttpRequestWorker *worker);
    void generateGoodsRealizationReportCallback(OAIHttpRequestWorker *worker);
    void generateMassOrderLabelsReportCallback(OAIHttpRequestWorker *worker);
    void generateOrderLabelCallback(OAIHttpRequestWorker *worker);
    void generateOrderLabelsCallback(OAIHttpRequestWorker *worker);
    void generatePricesReportCallback(OAIHttpRequestWorker *worker);
    void generateShelfsStatisticsReportCallback(OAIHttpRequestWorker *worker);
    void generateShowsSalesReportCallback(OAIHttpRequestWorker *worker);
    void generateStocksOnWarehousesReportCallback(OAIHttpRequestWorker *worker);
    void generateUnitedMarketplaceServicesReportCallback(OAIHttpRequestWorker *worker);
    void generateUnitedNettingReportCallback(OAIHttpRequestWorker *worker);
    void generateUnitedOrdersReportCallback(OAIHttpRequestWorker *worker);
    void getAllOffersCallback(OAIHttpRequestWorker *worker);
    void getBidsInfoForBusinessCallback(OAIHttpRequestWorker *worker);
    void getBidsRecommendationsCallback(OAIHttpRequestWorker *worker);
    void getBusinessQuarantineOffersCallback(OAIHttpRequestWorker *worker);
    void getBusinessSettingsCallback(OAIHttpRequestWorker *worker);
    void getCampaignCallback(OAIHttpRequestWorker *worker);
    void getCampaignLoginsCallback(OAIHttpRequestWorker *worker);
    void getCampaignOffersCallback(OAIHttpRequestWorker *worker);
    void getCampaignQuarantineOffersCallback(OAIHttpRequestWorker *worker);
    void getCampaignRegionCallback(OAIHttpRequestWorker *worker);
    void getCampaignSettingsCallback(OAIHttpRequestWorker *worker);
    void getCampaignsCallback(OAIHttpRequestWorker *worker);
    void getCampaignsByLoginCallback(OAIHttpRequestWorker *worker);
    void getCategoriesMaxSaleQuantumCallback(OAIHttpRequestWorker *worker);
    void getCategoriesTreeCallback(OAIHttpRequestWorker *worker);
    void getCategoryContentParametersCallback(OAIHttpRequestWorker *worker);
    void getChatHistoryCallback(OAIHttpRequestWorker *worker);
    void getChatsCallback(OAIHttpRequestWorker *worker);
    void getDeliveryServicesCallback(OAIHttpRequestWorker *worker);
    void getFeedCallback(OAIHttpRequestWorker *worker);
    void getFeedIndexLogsCallback(OAIHttpRequestWorker *worker);
    void getFeedbackAndCommentUpdatesCallback(OAIHttpRequestWorker *worker);
    void getFeedsCallback(OAIHttpRequestWorker *worker);
    void getGoodsFeedbackCommentsCallback(OAIHttpRequestWorker *worker);
    void getGoodsFeedbacksCallback(OAIHttpRequestWorker *worker);
    void getGoodsStatsCallback(OAIHttpRequestWorker *worker);
    void getHiddenOffersCallback(OAIHttpRequestWorker *worker);
    void getOfferCardsContentStatusCallback(OAIHttpRequestWorker *worker);
    void getOfferMappingEntriesCallback(OAIHttpRequestWorker *worker);
    void getOfferMappingsCallback(OAIHttpRequestWorker *worker);
    void getOfferRecommendationsCallback(OAIHttpRequestWorker *worker);
    void getOffersCallback(OAIHttpRequestWorker *worker);
    void getOrderCallback(OAIHttpRequestWorker *worker);
    void getOrderBusinessBuyerInfoCallback(OAIHttpRequestWorker *worker);
    void getOrderBusinessDocumentsInfoCallback(OAIHttpRequestWorker *worker);
    void getOrderLabelsDataCallback(OAIHttpRequestWorker *worker);
    void getOrdersCallback(OAIHttpRequestWorker *worker);
    void getOrdersStatsCallback(OAIHttpRequestWorker *worker);
    void getPricesCallback(OAIHttpRequestWorker *worker);
    void getPricesByOfferIdsCallback(OAIHttpRequestWorker *worker);
    void getPromoOffersCallback(OAIHttpRequestWorker *worker);
    void getPromosCallback(OAIHttpRequestWorker *worker);
    void getQualityRatingDetailsCallback(OAIHttpRequestWorker *worker);
    void getQualityRatingsCallback(OAIHttpRequestWorker *worker);
    void getReportInfoCallback(OAIHttpRequestWorker *worker);
    void getReturnCallback(OAIHttpRequestWorker *worker);
    void getReturnApplicationCallback(OAIHttpRequestWorker *worker);
    void getReturnPhotoCallback(OAIHttpRequestWorker *worker);
    void getReturnsCallback(OAIHttpRequestWorker *worker);
    void getStocksCallback(OAIHttpRequestWorker *worker);
    void getSuggestedOfferMappingEntriesCallback(OAIHttpRequestWorker *worker);
    void getSuggestedOfferMappingsCallback(OAIHttpRequestWorker *worker);
    void getSuggestedPricesCallback(OAIHttpRequestWorker *worker);
    void getWarehousesCallback(OAIHttpRequestWorker *worker);
    void provideOrderItemIdentifiersCallback(OAIHttpRequestWorker *worker);
    void putBidsForBusinessCallback(OAIHttpRequestWorker *worker);
    void putBidsForCampaignCallback(OAIHttpRequestWorker *worker);
    void refreshFeedCallback(OAIHttpRequestWorker *worker);
    void searchRegionChildrenCallback(OAIHttpRequestWorker *worker);
    void searchRegionsByIdCallback(OAIHttpRequestWorker *worker);
    void searchRegionsByNameCallback(OAIHttpRequestWorker *worker);
    void sendFileToChatCallback(OAIHttpRequestWorker *worker);
    void sendMessageToChatCallback(OAIHttpRequestWorker *worker);
    void setFeedParamsCallback(OAIHttpRequestWorker *worker);
    void setOrderBoxLayoutCallback(OAIHttpRequestWorker *worker);
    void setOrderShipmentBoxesCallback(OAIHttpRequestWorker *worker);
    void skipGoodsFeedbacksReactionCallback(OAIHttpRequestWorker *worker);
    void updateBusinessPricesCallback(OAIHttpRequestWorker *worker);
    void updateCampaignOffersCallback(OAIHttpRequestWorker *worker);
    void updateGoodsFeedbackCommentCallback(OAIHttpRequestWorker *worker);
    void updateOfferContentCallback(OAIHttpRequestWorker *worker);
    void updateOfferMappingEntriesCallback(OAIHttpRequestWorker *worker);
    void updateOfferMappingsCallback(OAIHttpRequestWorker *worker);
    void updateOrderItemsCallback(OAIHttpRequestWorker *worker);
    void updateOrderStatusCallback(OAIHttpRequestWorker *worker);
    void updateOrderStatusesCallback(OAIHttpRequestWorker *worker);
    void updatePricesCallback(OAIHttpRequestWorker *worker);
    void updatePromoOffersCallback(OAIHttpRequestWorker *worker);
    void updateStocksCallback(OAIHttpRequestWorker *worker);
    void verifyOrderEacCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addHiddenOffersSignal(OAIEmptyApiResponse summary);
    void addOffersToArchiveSignal(OAIAddOffersToArchiveResponse summary);
    void calculateTariffsSignal(OAICalculateTariffsResponse summary);
    void confirmBusinessPricesSignal(OAIEmptyApiResponse summary);
    void confirmCampaignPricesSignal(OAIEmptyApiResponse summary);
    void createChatSignal(OAICreateChatResponse summary);
    void deleteCampaignOffersSignal(OAIDeleteCampaignOffersResponse summary);
    void deleteGoodsFeedbackCommentSignal(OAIEmptyApiResponse summary);
    void deleteHiddenOffersSignal(OAIEmptyApiResponse summary);
    void deleteOffersSignal(OAIDeleteOffersResponse summary);
    void deleteOffersFromArchiveSignal(OAIDeleteOffersFromArchiveResponse summary);
    void deletePromoOffersSignal(OAIDeletePromoOffersResponse summary);
    void generateBoostConsolidatedReportSignal(OAIGenerateReportResponse summary);
    void generateCompetitorsPositionReportSignal(OAIGenerateReportResponse summary);
    void generateGoodsFeedbackReportSignal(OAIGenerateReportResponse summary);
    void generateGoodsRealizationReportSignal(OAIGenerateReportResponse summary);
    void generateMassOrderLabelsReportSignal(OAIGenerateReportResponse summary);
    void generateOrderLabelSignal(OAIHttpFileElement summary);
    void generateOrderLabelsSignal(OAIHttpFileElement summary);
    void generatePricesReportSignal(OAIGenerateReportResponse summary);
    void generateShelfsStatisticsReportSignal(OAIGenerateReportResponse summary);
    void generateShowsSalesReportSignal(OAIGenerateReportResponse summary);
    void generateStocksOnWarehousesReportSignal(OAIGenerateReportResponse summary);
    void generateUnitedMarketplaceServicesReportSignal(OAIGenerateReportResponse summary);
    void generateUnitedNettingReportSignal(OAIGenerateReportResponse summary);
    void generateUnitedOrdersReportSignal(OAIGenerateReportResponse summary);
    void getAllOffersSignal(OAIGetAllOffersResponse summary);
    void getBidsInfoForBusinessSignal(OAIGetBidsInfoResponse summary);
    void getBidsRecommendationsSignal(OAIGetBidsRecommendationsResponse summary);
    void getBusinessQuarantineOffersSignal(OAIGetQuarantineOffersResponse summary);
    void getBusinessSettingsSignal(OAIGetBusinessSettingsResponse summary);
    void getCampaignSignal(OAIGetCampaignResponse summary);
    void getCampaignLoginsSignal(OAIGetCampaignLoginsResponse summary);
    void getCampaignOffersSignal(OAIGetCampaignOffersResponse summary);
    void getCampaignQuarantineOffersSignal(OAIGetQuarantineOffersResponse summary);
    void getCampaignRegionSignal(OAIGetCampaignRegionResponse summary);
    void getCampaignSettingsSignal(OAIGetCampaignSettingsResponse summary);
    void getCampaignsSignal(OAIGetCampaignsResponse summary);
    void getCampaignsByLoginSignal(OAIGetCampaignsResponse summary);
    void getCategoriesMaxSaleQuantumSignal(OAIGetCategoriesMaxSaleQuantumResponse summary);
    void getCategoriesTreeSignal(OAIGetCategoriesResponse summary);
    void getCategoryContentParametersSignal(OAIGetCategoryContentParametersResponse summary);
    void getChatHistorySignal(OAIGetChatHistoryResponse summary);
    void getChatsSignal(OAIGetChatsResponse summary);
    void getDeliveryServicesSignal(OAIGetDeliveryServicesResponse summary);
    void getFeedSignal(OAIGetFeedResponse summary);
    void getFeedIndexLogsSignal(OAIGetFeedIndexLogsResponse summary);
    void getFeedbackAndCommentUpdatesSignal(OAIGetFeedbackListResponse summary);
    void getFeedsSignal(OAIGetFeedsResponse summary);
    void getGoodsFeedbackCommentsSignal(OAIGetGoodsFeedbackCommentsResponse summary);
    void getGoodsFeedbacksSignal(OAIGetGoodsFeedbackResponse summary);
    void getGoodsStatsSignal(OAIGetGoodsStatsResponse summary);
    void getHiddenOffersSignal(OAIGetHiddenOffersResponse summary);
    void getOfferCardsContentStatusSignal(OAIGetOfferCardsContentStatusResponse summary);
    void getOfferMappingEntriesSignal(OAIGetOfferMappingEntriesResponse summary);
    void getOfferMappingsSignal(OAIGetOfferMappingsResponse summary);
    void getOfferRecommendationsSignal(OAIGetOfferRecommendationsResponse summary);
    void getOffersSignal(OAIGetOffersResponse summary);
    void getOrderSignal(OAIGetOrderResponse summary);
    void getOrderBusinessBuyerInfoSignal(OAIGetBusinessBuyerInfoResponse summary);
    void getOrderBusinessDocumentsInfoSignal(OAIGetBusinessDocumentsInfoResponse summary);
    void getOrderLabelsDataSignal(OAIGetOrderLabelsDataResponse summary);
    void getOrdersSignal(OAIGetOrdersResponse summary);
    void getOrdersStatsSignal(OAIGetOrdersStatsResponse summary);
    void getPricesSignal(OAIGetPricesResponse summary);
    void getPricesByOfferIdsSignal(OAIGetPricesByOfferIdsResponse summary);
    void getPromoOffersSignal(OAIGetPromoOffersResponse summary);
    void getPromosSignal(OAIGetPromosResponse summary);
    void getQualityRatingDetailsSignal(OAIGetQualityRatingDetailsResponse summary);
    void getQualityRatingsSignal(OAIGetQualityRatingResponse summary);
    void getReportInfoSignal(OAIGetReportInfoResponse summary);
    void getReturnSignal(OAIGetReturnResponse summary);
    void getReturnApplicationSignal(OAIHttpFileElement summary);
    void getReturnPhotoSignal(OAIHttpFileElement summary);
    void getReturnsSignal(OAIGetReturnsResponse summary);
    void getStocksSignal(OAIGetWarehouseStocksResponse summary);
    void getSuggestedOfferMappingEntriesSignal(OAIGetSuggestedOfferMappingEntriesResponse summary);
    void getSuggestedOfferMappingsSignal(OAIGetSuggestedOfferMappingsResponse summary);
    void getSuggestedPricesSignal(OAISuggestPricesResponse summary);
    void getWarehousesSignal(OAIGetWarehousesResponse summary);
    void provideOrderItemIdentifiersSignal(OAIProvideOrderItemIdentifiersResponse summary);
    void putBidsForBusinessSignal(OAIEmptyApiResponse summary);
    void putBidsForCampaignSignal(OAIEmptyApiResponse summary);
    void refreshFeedSignal(OAIEmptyApiResponse summary);
    void searchRegionChildrenSignal(OAIGetRegionWithChildrenResponse summary);
    void searchRegionsByIdSignal(OAIGetRegionsResponse summary);
    void searchRegionsByNameSignal(OAIGetRegionsResponse summary);
    void sendFileToChatSignal(OAIEmptyApiResponse summary);
    void sendMessageToChatSignal(OAIEmptyApiResponse summary);
    void setFeedParamsSignal(OAIEmptyApiResponse summary);
    void setOrderBoxLayoutSignal(OAISetOrderBoxLayoutResponse summary);
    void setOrderShipmentBoxesSignal(OAISetOrderShipmentBoxesResponse summary);
    void skipGoodsFeedbacksReactionSignal(OAIEmptyApiResponse summary);
    void updateBusinessPricesSignal(OAIEmptyApiResponse summary);
    void updateCampaignOffersSignal(OAIEmptyApiResponse summary);
    void updateGoodsFeedbackCommentSignal(OAIUpdateGoodsFeedbackCommentResponse summary);
    void updateOfferContentSignal(OAIUpdateOfferContentResponse summary);
    void updateOfferMappingEntriesSignal(OAIEmptyApiResponse summary);
    void updateOfferMappingsSignal(OAIUpdateOfferMappingsResponse summary);
    void updateOrderItemsSignal();
    void updateOrderStatusSignal(OAIUpdateOrderStatusResponse summary);
    void updateOrderStatusesSignal(OAIUpdateOrderStatusesResponse summary);
    void updatePricesSignal(OAIEmptyApiResponse summary);
    void updatePromoOffersSignal(OAIUpdatePromoOffersResponse summary);
    void updateStocksSignal(OAIEmptyApiResponse summary);
    void verifyOrderEacSignal(OAIVerifyOrderEacResponse summary);


    void addHiddenOffersSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void addOffersToArchiveSignalFull(OAIHttpRequestWorker *worker, OAIAddOffersToArchiveResponse summary);
    void calculateTariffsSignalFull(OAIHttpRequestWorker *worker, OAICalculateTariffsResponse summary);
    void confirmBusinessPricesSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void confirmCampaignPricesSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void createChatSignalFull(OAIHttpRequestWorker *worker, OAICreateChatResponse summary);
    void deleteCampaignOffersSignalFull(OAIHttpRequestWorker *worker, OAIDeleteCampaignOffersResponse summary);
    void deleteGoodsFeedbackCommentSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void deleteHiddenOffersSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void deleteOffersSignalFull(OAIHttpRequestWorker *worker, OAIDeleteOffersResponse summary);
    void deleteOffersFromArchiveSignalFull(OAIHttpRequestWorker *worker, OAIDeleteOffersFromArchiveResponse summary);
    void deletePromoOffersSignalFull(OAIHttpRequestWorker *worker, OAIDeletePromoOffersResponse summary);
    void generateBoostConsolidatedReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateCompetitorsPositionReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateGoodsFeedbackReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateGoodsRealizationReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateMassOrderLabelsReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateOrderLabelSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void generateOrderLabelsSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void generatePricesReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateShelfsStatisticsReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateShowsSalesReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateStocksOnWarehousesReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateUnitedMarketplaceServicesReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateUnitedNettingReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void generateUnitedOrdersReportSignalFull(OAIHttpRequestWorker *worker, OAIGenerateReportResponse summary);
    void getAllOffersSignalFull(OAIHttpRequestWorker *worker, OAIGetAllOffersResponse summary);
    void getBidsInfoForBusinessSignalFull(OAIHttpRequestWorker *worker, OAIGetBidsInfoResponse summary);
    void getBidsRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIGetBidsRecommendationsResponse summary);
    void getBusinessQuarantineOffersSignalFull(OAIHttpRequestWorker *worker, OAIGetQuarantineOffersResponse summary);
    void getBusinessSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetBusinessSettingsResponse summary);
    void getCampaignSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignResponse summary);
    void getCampaignLoginsSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignLoginsResponse summary);
    void getCampaignOffersSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignOffersResponse summary);
    void getCampaignQuarantineOffersSignalFull(OAIHttpRequestWorker *worker, OAIGetQuarantineOffersResponse summary);
    void getCampaignRegionSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignRegionResponse summary);
    void getCampaignSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignSettingsResponse summary);
    void getCampaignsSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignsResponse summary);
    void getCampaignsByLoginSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignsResponse summary);
    void getCategoriesMaxSaleQuantumSignalFull(OAIHttpRequestWorker *worker, OAIGetCategoriesMaxSaleQuantumResponse summary);
    void getCategoriesTreeSignalFull(OAIHttpRequestWorker *worker, OAIGetCategoriesResponse summary);
    void getCategoryContentParametersSignalFull(OAIHttpRequestWorker *worker, OAIGetCategoryContentParametersResponse summary);
    void getChatHistorySignalFull(OAIHttpRequestWorker *worker, OAIGetChatHistoryResponse summary);
    void getChatsSignalFull(OAIHttpRequestWorker *worker, OAIGetChatsResponse summary);
    void getDeliveryServicesSignalFull(OAIHttpRequestWorker *worker, OAIGetDeliveryServicesResponse summary);
    void getFeedSignalFull(OAIHttpRequestWorker *worker, OAIGetFeedResponse summary);
    void getFeedIndexLogsSignalFull(OAIHttpRequestWorker *worker, OAIGetFeedIndexLogsResponse summary);
    void getFeedbackAndCommentUpdatesSignalFull(OAIHttpRequestWorker *worker, OAIGetFeedbackListResponse summary);
    void getFeedsSignalFull(OAIHttpRequestWorker *worker, OAIGetFeedsResponse summary);
    void getGoodsFeedbackCommentsSignalFull(OAIHttpRequestWorker *worker, OAIGetGoodsFeedbackCommentsResponse summary);
    void getGoodsFeedbacksSignalFull(OAIHttpRequestWorker *worker, OAIGetGoodsFeedbackResponse summary);
    void getGoodsStatsSignalFull(OAIHttpRequestWorker *worker, OAIGetGoodsStatsResponse summary);
    void getHiddenOffersSignalFull(OAIHttpRequestWorker *worker, OAIGetHiddenOffersResponse summary);
    void getOfferCardsContentStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetOfferCardsContentStatusResponse summary);
    void getOfferMappingEntriesSignalFull(OAIHttpRequestWorker *worker, OAIGetOfferMappingEntriesResponse summary);
    void getOfferMappingsSignalFull(OAIHttpRequestWorker *worker, OAIGetOfferMappingsResponse summary);
    void getOfferRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIGetOfferRecommendationsResponse summary);
    void getOffersSignalFull(OAIHttpRequestWorker *worker, OAIGetOffersResponse summary);
    void getOrderSignalFull(OAIHttpRequestWorker *worker, OAIGetOrderResponse summary);
    void getOrderBusinessBuyerInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetBusinessBuyerInfoResponse summary);
    void getOrderBusinessDocumentsInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetBusinessDocumentsInfoResponse summary);
    void getOrderLabelsDataSignalFull(OAIHttpRequestWorker *worker, OAIGetOrderLabelsDataResponse summary);
    void getOrdersSignalFull(OAIHttpRequestWorker *worker, OAIGetOrdersResponse summary);
    void getOrdersStatsSignalFull(OAIHttpRequestWorker *worker, OAIGetOrdersStatsResponse summary);
    void getPricesSignalFull(OAIHttpRequestWorker *worker, OAIGetPricesResponse summary);
    void getPricesByOfferIdsSignalFull(OAIHttpRequestWorker *worker, OAIGetPricesByOfferIdsResponse summary);
    void getPromoOffersSignalFull(OAIHttpRequestWorker *worker, OAIGetPromoOffersResponse summary);
    void getPromosSignalFull(OAIHttpRequestWorker *worker, OAIGetPromosResponse summary);
    void getQualityRatingDetailsSignalFull(OAIHttpRequestWorker *worker, OAIGetQualityRatingDetailsResponse summary);
    void getQualityRatingsSignalFull(OAIHttpRequestWorker *worker, OAIGetQualityRatingResponse summary);
    void getReportInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetReportInfoResponse summary);
    void getReturnSignalFull(OAIHttpRequestWorker *worker, OAIGetReturnResponse summary);
    void getReturnApplicationSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getReturnPhotoSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getReturnsSignalFull(OAIHttpRequestWorker *worker, OAIGetReturnsResponse summary);
    void getStocksSignalFull(OAIHttpRequestWorker *worker, OAIGetWarehouseStocksResponse summary);
    void getSuggestedOfferMappingEntriesSignalFull(OAIHttpRequestWorker *worker, OAIGetSuggestedOfferMappingEntriesResponse summary);
    void getSuggestedOfferMappingsSignalFull(OAIHttpRequestWorker *worker, OAIGetSuggestedOfferMappingsResponse summary);
    void getSuggestedPricesSignalFull(OAIHttpRequestWorker *worker, OAISuggestPricesResponse summary);
    void getWarehousesSignalFull(OAIHttpRequestWorker *worker, OAIGetWarehousesResponse summary);
    void provideOrderItemIdentifiersSignalFull(OAIHttpRequestWorker *worker, OAIProvideOrderItemIdentifiersResponse summary);
    void putBidsForBusinessSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void putBidsForCampaignSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void refreshFeedSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void searchRegionChildrenSignalFull(OAIHttpRequestWorker *worker, OAIGetRegionWithChildrenResponse summary);
    void searchRegionsByIdSignalFull(OAIHttpRequestWorker *worker, OAIGetRegionsResponse summary);
    void searchRegionsByNameSignalFull(OAIHttpRequestWorker *worker, OAIGetRegionsResponse summary);
    void sendFileToChatSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void sendMessageToChatSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void setFeedParamsSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void setOrderBoxLayoutSignalFull(OAIHttpRequestWorker *worker, OAISetOrderBoxLayoutResponse summary);
    void setOrderShipmentBoxesSignalFull(OAIHttpRequestWorker *worker, OAISetOrderShipmentBoxesResponse summary);
    void skipGoodsFeedbacksReactionSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void updateBusinessPricesSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void updateCampaignOffersSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void updateGoodsFeedbackCommentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateGoodsFeedbackCommentResponse summary);
    void updateOfferContentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOfferContentResponse summary);
    void updateOfferMappingEntriesSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void updateOfferMappingsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOfferMappingsResponse summary);
    void updateOrderItemsSignalFull(OAIHttpRequestWorker *worker);
    void updateOrderStatusSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOrderStatusResponse summary);
    void updateOrderStatusesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOrderStatusesResponse summary);
    void updatePricesSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void updatePromoOffersSignalFull(OAIHttpRequestWorker *worker, OAIUpdatePromoOffersResponse summary);
    void updateStocksSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void verifyOrderEacSignalFull(OAIHttpRequestWorker *worker, OAIVerifyOrderEacResponse summary);

    Q_DECL_DEPRECATED_X("Use addHiddenOffersSignalError() instead")
    void addHiddenOffersSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addHiddenOffersSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addOffersToArchiveSignalError() instead")
    void addOffersToArchiveSignalE(OAIAddOffersToArchiveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addOffersToArchiveSignalError(OAIAddOffersToArchiveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculateTariffsSignalError() instead")
    void calculateTariffsSignalE(OAICalculateTariffsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calculateTariffsSignalError(OAICalculateTariffsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmBusinessPricesSignalError() instead")
    void confirmBusinessPricesSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmBusinessPricesSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmCampaignPricesSignalError() instead")
    void confirmCampaignPricesSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmCampaignPricesSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChatSignalError() instead")
    void createChatSignalE(OAICreateChatResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChatSignalError(OAICreateChatResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignOffersSignalError() instead")
    void deleteCampaignOffersSignalE(OAIDeleteCampaignOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignOffersSignalError(OAIDeleteCampaignOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGoodsFeedbackCommentSignalError() instead")
    void deleteGoodsFeedbackCommentSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGoodsFeedbackCommentSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHiddenOffersSignalError() instead")
    void deleteHiddenOffersSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHiddenOffersSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOffersSignalError() instead")
    void deleteOffersSignalE(OAIDeleteOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOffersSignalError(OAIDeleteOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOffersFromArchiveSignalError() instead")
    void deleteOffersFromArchiveSignalE(OAIDeleteOffersFromArchiveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOffersFromArchiveSignalError(OAIDeleteOffersFromArchiveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePromoOffersSignalError() instead")
    void deletePromoOffersSignalE(OAIDeletePromoOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePromoOffersSignalError(OAIDeletePromoOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateBoostConsolidatedReportSignalError() instead")
    void generateBoostConsolidatedReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateBoostConsolidatedReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateCompetitorsPositionReportSignalError() instead")
    void generateCompetitorsPositionReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateCompetitorsPositionReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsFeedbackReportSignalError() instead")
    void generateGoodsFeedbackReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsFeedbackReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsRealizationReportSignalError() instead")
    void generateGoodsRealizationReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsRealizationReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMassOrderLabelsReportSignalError() instead")
    void generateMassOrderLabelsReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMassOrderLabelsReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateOrderLabelSignalError() instead")
    void generateOrderLabelSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateOrderLabelSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateOrderLabelsSignalError() instead")
    void generateOrderLabelsSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateOrderLabelsSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePricesReportSignalError() instead")
    void generatePricesReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePricesReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateShelfsStatisticsReportSignalError() instead")
    void generateShelfsStatisticsReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateShelfsStatisticsReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateShowsSalesReportSignalError() instead")
    void generateShowsSalesReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateShowsSalesReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateStocksOnWarehousesReportSignalError() instead")
    void generateStocksOnWarehousesReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateStocksOnWarehousesReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedMarketplaceServicesReportSignalError() instead")
    void generateUnitedMarketplaceServicesReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedMarketplaceServicesReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedNettingReportSignalError() instead")
    void generateUnitedNettingReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedNettingReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedOrdersReportSignalError() instead")
    void generateUnitedOrdersReportSignalE(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedOrdersReportSignalError(OAIGenerateReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOffersSignalError() instead")
    void getAllOffersSignalE(OAIGetAllOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOffersSignalError(OAIGetAllOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBidsInfoForBusinessSignalError() instead")
    void getBidsInfoForBusinessSignalE(OAIGetBidsInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBidsInfoForBusinessSignalError(OAIGetBidsInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBidsRecommendationsSignalError() instead")
    void getBidsRecommendationsSignalE(OAIGetBidsRecommendationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBidsRecommendationsSignalError(OAIGetBidsRecommendationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBusinessQuarantineOffersSignalError() instead")
    void getBusinessQuarantineOffersSignalE(OAIGetQuarantineOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBusinessQuarantineOffersSignalError(OAIGetQuarantineOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBusinessSettingsSignalError() instead")
    void getBusinessSettingsSignalE(OAIGetBusinessSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBusinessSettingsSignalError(OAIGetBusinessSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSignalError() instead")
    void getCampaignSignalE(OAIGetCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSignalError(OAIGetCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignLoginsSignalError() instead")
    void getCampaignLoginsSignalE(OAIGetCampaignLoginsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignLoginsSignalError(OAIGetCampaignLoginsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignOffersSignalError() instead")
    void getCampaignOffersSignalE(OAIGetCampaignOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignOffersSignalError(OAIGetCampaignOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignQuarantineOffersSignalError() instead")
    void getCampaignQuarantineOffersSignalE(OAIGetQuarantineOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignQuarantineOffersSignalError(OAIGetQuarantineOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignRegionSignalError() instead")
    void getCampaignRegionSignalE(OAIGetCampaignRegionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignRegionSignalError(OAIGetCampaignRegionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSettingsSignalError() instead")
    void getCampaignSettingsSignalE(OAIGetCampaignSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSettingsSignalError(OAIGetCampaignSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsSignalError() instead")
    void getCampaignsSignalE(OAIGetCampaignsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsSignalError(OAIGetCampaignsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsByLoginSignalError() instead")
    void getCampaignsByLoginSignalE(OAIGetCampaignsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsByLoginSignalError(OAIGetCampaignsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoriesMaxSaleQuantumSignalError() instead")
    void getCategoriesMaxSaleQuantumSignalE(OAIGetCategoriesMaxSaleQuantumResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoriesMaxSaleQuantumSignalError(OAIGetCategoriesMaxSaleQuantumResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoriesTreeSignalError() instead")
    void getCategoriesTreeSignalE(OAIGetCategoriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoriesTreeSignalError(OAIGetCategoriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoryContentParametersSignalError() instead")
    void getCategoryContentParametersSignalE(OAIGetCategoryContentParametersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoryContentParametersSignalError(OAIGetCategoryContentParametersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHistorySignalError() instead")
    void getChatHistorySignalE(OAIGetChatHistoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHistorySignalError(OAIGetChatHistoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatsSignalError() instead")
    void getChatsSignalE(OAIGetChatsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatsSignalError(OAIGetChatsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeliveryServicesSignalError() instead")
    void getDeliveryServicesSignalE(OAIGetDeliveryServicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeliveryServicesSignalError(OAIGetDeliveryServicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedSignalError() instead")
    void getFeedSignalE(OAIGetFeedResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedSignalError(OAIGetFeedResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedIndexLogsSignalError() instead")
    void getFeedIndexLogsSignalE(OAIGetFeedIndexLogsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedIndexLogsSignalError(OAIGetFeedIndexLogsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedbackAndCommentUpdatesSignalError() instead")
    void getFeedbackAndCommentUpdatesSignalE(OAIGetFeedbackListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedbackAndCommentUpdatesSignalError(OAIGetFeedbackListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedsSignalError() instead")
    void getFeedsSignalE(OAIGetFeedsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedsSignalError(OAIGetFeedsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoodsFeedbackCommentsSignalError() instead")
    void getGoodsFeedbackCommentsSignalE(OAIGetGoodsFeedbackCommentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoodsFeedbackCommentsSignalError(OAIGetGoodsFeedbackCommentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoodsFeedbacksSignalError() instead")
    void getGoodsFeedbacksSignalE(OAIGetGoodsFeedbackResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoodsFeedbacksSignalError(OAIGetGoodsFeedbackResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoodsStatsSignalError() instead")
    void getGoodsStatsSignalE(OAIGetGoodsStatsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoodsStatsSignalError(OAIGetGoodsStatsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHiddenOffersSignalError() instead")
    void getHiddenOffersSignalE(OAIGetHiddenOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHiddenOffersSignalError(OAIGetHiddenOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferCardsContentStatusSignalError() instead")
    void getOfferCardsContentStatusSignalE(OAIGetOfferCardsContentStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferCardsContentStatusSignalError(OAIGetOfferCardsContentStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferMappingEntriesSignalError() instead")
    void getOfferMappingEntriesSignalE(OAIGetOfferMappingEntriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferMappingEntriesSignalError(OAIGetOfferMappingEntriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferMappingsSignalError() instead")
    void getOfferMappingsSignalE(OAIGetOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferMappingsSignalError(OAIGetOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferRecommendationsSignalError() instead")
    void getOfferRecommendationsSignalE(OAIGetOfferRecommendationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferRecommendationsSignalError(OAIGetOfferRecommendationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOffersSignalError() instead")
    void getOffersSignalE(OAIGetOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOffersSignalError(OAIGetOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalError() instead")
    void getOrderSignalE(OAIGetOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalError(OAIGetOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderBusinessBuyerInfoSignalError() instead")
    void getOrderBusinessBuyerInfoSignalE(OAIGetBusinessBuyerInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderBusinessBuyerInfoSignalError(OAIGetBusinessBuyerInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderBusinessDocumentsInfoSignalError() instead")
    void getOrderBusinessDocumentsInfoSignalE(OAIGetBusinessDocumentsInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderBusinessDocumentsInfoSignalError(OAIGetBusinessDocumentsInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderLabelsDataSignalError() instead")
    void getOrderLabelsDataSignalE(OAIGetOrderLabelsDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderLabelsDataSignalError(OAIGetOrderLabelsDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersSignalError() instead")
    void getOrdersSignalE(OAIGetOrdersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersSignalError(OAIGetOrdersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersStatsSignalError() instead")
    void getOrdersStatsSignalE(OAIGetOrdersStatsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersStatsSignalError(OAIGetOrdersStatsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPricesSignalError() instead")
    void getPricesSignalE(OAIGetPricesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPricesSignalError(OAIGetPricesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPricesByOfferIdsSignalError() instead")
    void getPricesByOfferIdsSignalE(OAIGetPricesByOfferIdsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPricesByOfferIdsSignalError(OAIGetPricesByOfferIdsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPromoOffersSignalError() instead")
    void getPromoOffersSignalE(OAIGetPromoOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPromoOffersSignalError(OAIGetPromoOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPromosSignalError() instead")
    void getPromosSignalE(OAIGetPromosResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPromosSignalError(OAIGetPromosResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQualityRatingDetailsSignalError() instead")
    void getQualityRatingDetailsSignalE(OAIGetQualityRatingDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQualityRatingDetailsSignalError(OAIGetQualityRatingDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQualityRatingsSignalError() instead")
    void getQualityRatingsSignalE(OAIGetQualityRatingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQualityRatingsSignalError(OAIGetQualityRatingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportInfoSignalError() instead")
    void getReportInfoSignalE(OAIGetReportInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportInfoSignalError(OAIGetReportInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnSignalError() instead")
    void getReturnSignalE(OAIGetReturnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnSignalError(OAIGetReturnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnApplicationSignalError() instead")
    void getReturnApplicationSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnApplicationSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnPhotoSignalError() instead")
    void getReturnPhotoSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnPhotoSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnsSignalError() instead")
    void getReturnsSignalE(OAIGetReturnsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnsSignalError(OAIGetReturnsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStocksSignalError() instead")
    void getStocksSignalE(OAIGetWarehouseStocksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStocksSignalError(OAIGetWarehouseStocksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedOfferMappingEntriesSignalError() instead")
    void getSuggestedOfferMappingEntriesSignalE(OAIGetSuggestedOfferMappingEntriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedOfferMappingEntriesSignalError(OAIGetSuggestedOfferMappingEntriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedOfferMappingsSignalError() instead")
    void getSuggestedOfferMappingsSignalE(OAIGetSuggestedOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedOfferMappingsSignalError(OAIGetSuggestedOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedPricesSignalError() instead")
    void getSuggestedPricesSignalE(OAISuggestPricesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedPricesSignalError(OAISuggestPricesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWarehousesSignalError() instead")
    void getWarehousesSignalE(OAIGetWarehousesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWarehousesSignalError(OAIGetWarehousesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provideOrderItemIdentifiersSignalError() instead")
    void provideOrderItemIdentifiersSignalE(OAIProvideOrderItemIdentifiersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void provideOrderItemIdentifiersSignalError(OAIProvideOrderItemIdentifiersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBidsForBusinessSignalError() instead")
    void putBidsForBusinessSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putBidsForBusinessSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBidsForCampaignSignalError() instead")
    void putBidsForCampaignSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putBidsForCampaignSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshFeedSignalError() instead")
    void refreshFeedSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshFeedSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRegionChildrenSignalError() instead")
    void searchRegionChildrenSignalE(OAIGetRegionWithChildrenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRegionChildrenSignalError(OAIGetRegionWithChildrenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRegionsByIdSignalError() instead")
    void searchRegionsByIdSignalE(OAIGetRegionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRegionsByIdSignalError(OAIGetRegionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRegionsByNameSignalError() instead")
    void searchRegionsByNameSignalE(OAIGetRegionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRegionsByNameSignalError(OAIGetRegionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFileToChatSignalError() instead")
    void sendFileToChatSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendFileToChatSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessageToChatSignalError() instead")
    void sendMessageToChatSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageToChatSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setFeedParamsSignalError() instead")
    void setFeedParamsSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setFeedParamsSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderBoxLayoutSignalError() instead")
    void setOrderBoxLayoutSignalE(OAISetOrderBoxLayoutResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderBoxLayoutSignalError(OAISetOrderBoxLayoutResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderShipmentBoxesSignalError() instead")
    void setOrderShipmentBoxesSignalE(OAISetOrderShipmentBoxesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderShipmentBoxesSignalError(OAISetOrderShipmentBoxesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skipGoodsFeedbacksReactionSignalError() instead")
    void skipGoodsFeedbacksReactionSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void skipGoodsFeedbacksReactionSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBusinessPricesSignalError() instead")
    void updateBusinessPricesSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBusinessPricesSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignOffersSignalError() instead")
    void updateCampaignOffersSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignOffersSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGoodsFeedbackCommentSignalError() instead")
    void updateGoodsFeedbackCommentSignalE(OAIUpdateGoodsFeedbackCommentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGoodsFeedbackCommentSignalError(OAIUpdateGoodsFeedbackCommentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferContentSignalError() instead")
    void updateOfferContentSignalE(OAIUpdateOfferContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferContentSignalError(OAIUpdateOfferContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferMappingEntriesSignalError() instead")
    void updateOfferMappingEntriesSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferMappingEntriesSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferMappingsSignalError() instead")
    void updateOfferMappingsSignalE(OAIUpdateOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferMappingsSignalError(OAIUpdateOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderItemsSignalError() instead")
    void updateOrderItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderStatusSignalError() instead")
    void updateOrderStatusSignalE(OAIUpdateOrderStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderStatusSignalError(OAIUpdateOrderStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderStatusesSignalError() instead")
    void updateOrderStatusesSignalE(OAIUpdateOrderStatusesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderStatusesSignalError(OAIUpdateOrderStatusesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePricesSignalError() instead")
    void updatePricesSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePricesSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePromoOffersSignalError() instead")
    void updatePromoOffersSignalE(OAIUpdatePromoOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePromoOffersSignalError(OAIUpdatePromoOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStocksSignalError() instead")
    void updateStocksSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStocksSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyOrderEacSignalError() instead")
    void verifyOrderEacSignalE(OAIVerifyOrderEacResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyOrderEacSignalError(OAIVerifyOrderEacResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addHiddenOffersSignalErrorFull() instead")
    void addHiddenOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addHiddenOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addOffersToArchiveSignalErrorFull() instead")
    void addOffersToArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addOffersToArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculateTariffsSignalErrorFull() instead")
    void calculateTariffsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calculateTariffsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmBusinessPricesSignalErrorFull() instead")
    void confirmBusinessPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmBusinessPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmCampaignPricesSignalErrorFull() instead")
    void confirmCampaignPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmCampaignPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChatSignalErrorFull() instead")
    void createChatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignOffersSignalErrorFull() instead")
    void deleteCampaignOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGoodsFeedbackCommentSignalErrorFull() instead")
    void deleteGoodsFeedbackCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGoodsFeedbackCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHiddenOffersSignalErrorFull() instead")
    void deleteHiddenOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHiddenOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOffersSignalErrorFull() instead")
    void deleteOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOffersFromArchiveSignalErrorFull() instead")
    void deleteOffersFromArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOffersFromArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePromoOffersSignalErrorFull() instead")
    void deletePromoOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePromoOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateBoostConsolidatedReportSignalErrorFull() instead")
    void generateBoostConsolidatedReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateBoostConsolidatedReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateCompetitorsPositionReportSignalErrorFull() instead")
    void generateCompetitorsPositionReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateCompetitorsPositionReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsFeedbackReportSignalErrorFull() instead")
    void generateGoodsFeedbackReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsFeedbackReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGoodsRealizationReportSignalErrorFull() instead")
    void generateGoodsRealizationReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGoodsRealizationReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMassOrderLabelsReportSignalErrorFull() instead")
    void generateMassOrderLabelsReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMassOrderLabelsReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateOrderLabelSignalErrorFull() instead")
    void generateOrderLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateOrderLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateOrderLabelsSignalErrorFull() instead")
    void generateOrderLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateOrderLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePricesReportSignalErrorFull() instead")
    void generatePricesReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePricesReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateShelfsStatisticsReportSignalErrorFull() instead")
    void generateShelfsStatisticsReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateShelfsStatisticsReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateShowsSalesReportSignalErrorFull() instead")
    void generateShowsSalesReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateShowsSalesReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateStocksOnWarehousesReportSignalErrorFull() instead")
    void generateStocksOnWarehousesReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateStocksOnWarehousesReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedMarketplaceServicesReportSignalErrorFull() instead")
    void generateUnitedMarketplaceServicesReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedMarketplaceServicesReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedNettingReportSignalErrorFull() instead")
    void generateUnitedNettingReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedNettingReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateUnitedOrdersReportSignalErrorFull() instead")
    void generateUnitedOrdersReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateUnitedOrdersReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOffersSignalErrorFull() instead")
    void getAllOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBidsInfoForBusinessSignalErrorFull() instead")
    void getBidsInfoForBusinessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBidsInfoForBusinessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBidsRecommendationsSignalErrorFull() instead")
    void getBidsRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBidsRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBusinessQuarantineOffersSignalErrorFull() instead")
    void getBusinessQuarantineOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBusinessQuarantineOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBusinessSettingsSignalErrorFull() instead")
    void getBusinessSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBusinessSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSignalErrorFull() instead")
    void getCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignLoginsSignalErrorFull() instead")
    void getCampaignLoginsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignLoginsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignOffersSignalErrorFull() instead")
    void getCampaignOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignQuarantineOffersSignalErrorFull() instead")
    void getCampaignQuarantineOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignQuarantineOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignRegionSignalErrorFull() instead")
    void getCampaignRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSettingsSignalErrorFull() instead")
    void getCampaignSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsSignalErrorFull() instead")
    void getCampaignsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsByLoginSignalErrorFull() instead")
    void getCampaignsByLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsByLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoriesMaxSaleQuantumSignalErrorFull() instead")
    void getCategoriesMaxSaleQuantumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoriesMaxSaleQuantumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoriesTreeSignalErrorFull() instead")
    void getCategoriesTreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoriesTreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoryContentParametersSignalErrorFull() instead")
    void getCategoryContentParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoryContentParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHistorySignalErrorFull() instead")
    void getChatHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatsSignalErrorFull() instead")
    void getChatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeliveryServicesSignalErrorFull() instead")
    void getDeliveryServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeliveryServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedSignalErrorFull() instead")
    void getFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedIndexLogsSignalErrorFull() instead")
    void getFeedIndexLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedIndexLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedbackAndCommentUpdatesSignalErrorFull() instead")
    void getFeedbackAndCommentUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedbackAndCommentUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedsSignalErrorFull() instead")
    void getFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoodsFeedbackCommentsSignalErrorFull() instead")
    void getGoodsFeedbackCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoodsFeedbackCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoodsFeedbacksSignalErrorFull() instead")
    void getGoodsFeedbacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoodsFeedbacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoodsStatsSignalErrorFull() instead")
    void getGoodsStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoodsStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHiddenOffersSignalErrorFull() instead")
    void getHiddenOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHiddenOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferCardsContentStatusSignalErrorFull() instead")
    void getOfferCardsContentStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferCardsContentStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferMappingEntriesSignalErrorFull() instead")
    void getOfferMappingEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferMappingEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferMappingsSignalErrorFull() instead")
    void getOfferMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferRecommendationsSignalErrorFull() instead")
    void getOfferRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOffersSignalErrorFull() instead")
    void getOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalErrorFull() instead")
    void getOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderBusinessBuyerInfoSignalErrorFull() instead")
    void getOrderBusinessBuyerInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderBusinessBuyerInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderBusinessDocumentsInfoSignalErrorFull() instead")
    void getOrderBusinessDocumentsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderBusinessDocumentsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderLabelsDataSignalErrorFull() instead")
    void getOrderLabelsDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderLabelsDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersSignalErrorFull() instead")
    void getOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersStatsSignalErrorFull() instead")
    void getOrdersStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPricesSignalErrorFull() instead")
    void getPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPricesByOfferIdsSignalErrorFull() instead")
    void getPricesByOfferIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPricesByOfferIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPromoOffersSignalErrorFull() instead")
    void getPromoOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPromoOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPromosSignalErrorFull() instead")
    void getPromosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPromosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQualityRatingDetailsSignalErrorFull() instead")
    void getQualityRatingDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQualityRatingDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQualityRatingsSignalErrorFull() instead")
    void getQualityRatingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQualityRatingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportInfoSignalErrorFull() instead")
    void getReportInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnSignalErrorFull() instead")
    void getReturnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnApplicationSignalErrorFull() instead")
    void getReturnApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnPhotoSignalErrorFull() instead")
    void getReturnPhotoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnPhotoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnsSignalErrorFull() instead")
    void getReturnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStocksSignalErrorFull() instead")
    void getStocksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStocksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedOfferMappingEntriesSignalErrorFull() instead")
    void getSuggestedOfferMappingEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedOfferMappingEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedOfferMappingsSignalErrorFull() instead")
    void getSuggestedOfferMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedOfferMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedPricesSignalErrorFull() instead")
    void getSuggestedPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWarehousesSignalErrorFull() instead")
    void getWarehousesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWarehousesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provideOrderItemIdentifiersSignalErrorFull() instead")
    void provideOrderItemIdentifiersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provideOrderItemIdentifiersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBidsForBusinessSignalErrorFull() instead")
    void putBidsForBusinessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putBidsForBusinessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBidsForCampaignSignalErrorFull() instead")
    void putBidsForCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putBidsForCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshFeedSignalErrorFull() instead")
    void refreshFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRegionChildrenSignalErrorFull() instead")
    void searchRegionChildrenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRegionChildrenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRegionsByIdSignalErrorFull() instead")
    void searchRegionsByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRegionsByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRegionsByNameSignalErrorFull() instead")
    void searchRegionsByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRegionsByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFileToChatSignalErrorFull() instead")
    void sendFileToChatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendFileToChatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessageToChatSignalErrorFull() instead")
    void sendMessageToChatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageToChatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setFeedParamsSignalErrorFull() instead")
    void setFeedParamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setFeedParamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderBoxLayoutSignalErrorFull() instead")
    void setOrderBoxLayoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderBoxLayoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderShipmentBoxesSignalErrorFull() instead")
    void setOrderShipmentBoxesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderShipmentBoxesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skipGoodsFeedbacksReactionSignalErrorFull() instead")
    void skipGoodsFeedbacksReactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skipGoodsFeedbacksReactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBusinessPricesSignalErrorFull() instead")
    void updateBusinessPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBusinessPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignOffersSignalErrorFull() instead")
    void updateCampaignOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGoodsFeedbackCommentSignalErrorFull() instead")
    void updateGoodsFeedbackCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGoodsFeedbackCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferContentSignalErrorFull() instead")
    void updateOfferContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferMappingEntriesSignalErrorFull() instead")
    void updateOfferMappingEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferMappingEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferMappingsSignalErrorFull() instead")
    void updateOfferMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderItemsSignalErrorFull() instead")
    void updateOrderItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderStatusSignalErrorFull() instead")
    void updateOrderStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderStatusesSignalErrorFull() instead")
    void updateOrderStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePricesSignalErrorFull() instead")
    void updatePricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePromoOffersSignalErrorFull() instead")
    void updatePromoOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePromoOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStocksSignalErrorFull() instead")
    void updateStocksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStocksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyOrderEacSignalErrorFull() instead")
    void verifyOrderEacSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyOrderEacSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
