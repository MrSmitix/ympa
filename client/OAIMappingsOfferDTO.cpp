/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappingsOfferDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappingsOfferDTO::OAIMappingsOfferDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappingsOfferDTO::OAIMappingsOfferDTO() {
    this->initializeModel();
}

OAIMappingsOfferDTO::~OAIMappingsOfferDTO() {}

void OAIMappingsOfferDTO::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_shop_sku_isSet = false;
    m_shop_sku_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;

    m_vendor_code_isSet = false;
    m_vendor_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_feed_id_isSet = false;
    m_feed_id_isValid = false;

    m_barcodes_isSet = false;
    m_barcodes_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_manufacturer_countries_isSet = false;
    m_manufacturer_countries_isValid = false;

    m_min_shipment_isSet = false;
    m_min_shipment_isValid = false;

    m_transport_unit_size_isSet = false;
    m_transport_unit_size_isValid = false;

    m_quantum_of_supply_isSet = false;
    m_quantum_of_supply_isValid = false;

    m_delivery_duration_days_isSet = false;
    m_delivery_duration_days_isValid = false;

    m_box_count_isSet = false;
    m_box_count_isValid = false;

    m_customs_commodity_codes_isSet = false;
    m_customs_commodity_codes_isValid = false;

    m_weight_dimensions_isSet = false;
    m_weight_dimensions_isValid = false;

    m_supply_schedule_days_isSet = false;
    m_supply_schedule_days_isValid = false;

    m_shelf_life_days_isSet = false;
    m_shelf_life_days_isValid = false;

    m_life_time_days_isSet = false;
    m_life_time_days_isValid = false;

    m_guarantee_period_days_isSet = false;
    m_guarantee_period_days_isValid = false;

    m_processing_state_isSet = false;
    m_processing_state_isValid = false;

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_shelf_life_isSet = false;
    m_shelf_life_isValid = false;

    m_life_time_isSet = false;
    m_life_time_isValid = false;

    m_guarantee_period_isSet = false;
    m_guarantee_period_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAIMappingsOfferDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappingsOfferDTO::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_shop_sku_isValid = ::OpenAPI::fromJsonValue(m_shop_sku, json[QString("shopSku")]);
    m_shop_sku_isSet = !json[QString("shopSku")].isNull() && m_shop_sku_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;

    m_vendor_code_isValid = ::OpenAPI::fromJsonValue(m_vendor_code, json[QString("vendorCode")]);
    m_vendor_code_isSet = !json[QString("vendorCode")].isNull() && m_vendor_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_feed_id_isValid = ::OpenAPI::fromJsonValue(m_feed_id, json[QString("feedId")]);
    m_feed_id_isSet = !json[QString("feedId")].isNull() && m_feed_id_isValid;

    m_barcodes_isValid = ::OpenAPI::fromJsonValue(m_barcodes, json[QString("barcodes")]);
    m_barcodes_isSet = !json[QString("barcodes")].isNull() && m_barcodes_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_manufacturer_countries_isValid = ::OpenAPI::fromJsonValue(m_manufacturer_countries, json[QString("manufacturerCountries")]);
    m_manufacturer_countries_isSet = !json[QString("manufacturerCountries")].isNull() && m_manufacturer_countries_isValid;

    m_min_shipment_isValid = ::OpenAPI::fromJsonValue(m_min_shipment, json[QString("minShipment")]);
    m_min_shipment_isSet = !json[QString("minShipment")].isNull() && m_min_shipment_isValid;

    m_transport_unit_size_isValid = ::OpenAPI::fromJsonValue(m_transport_unit_size, json[QString("transportUnitSize")]);
    m_transport_unit_size_isSet = !json[QString("transportUnitSize")].isNull() && m_transport_unit_size_isValid;

    m_quantum_of_supply_isValid = ::OpenAPI::fromJsonValue(m_quantum_of_supply, json[QString("quantumOfSupply")]);
    m_quantum_of_supply_isSet = !json[QString("quantumOfSupply")].isNull() && m_quantum_of_supply_isValid;

    m_delivery_duration_days_isValid = ::OpenAPI::fromJsonValue(m_delivery_duration_days, json[QString("deliveryDurationDays")]);
    m_delivery_duration_days_isSet = !json[QString("deliveryDurationDays")].isNull() && m_delivery_duration_days_isValid;

    m_box_count_isValid = ::OpenAPI::fromJsonValue(m_box_count, json[QString("boxCount")]);
    m_box_count_isSet = !json[QString("boxCount")].isNull() && m_box_count_isValid;

    m_customs_commodity_codes_isValid = ::OpenAPI::fromJsonValue(m_customs_commodity_codes, json[QString("customsCommodityCodes")]);
    m_customs_commodity_codes_isSet = !json[QString("customsCommodityCodes")].isNull() && m_customs_commodity_codes_isValid;

    m_weight_dimensions_isValid = ::OpenAPI::fromJsonValue(m_weight_dimensions, json[QString("weightDimensions")]);
    m_weight_dimensions_isSet = !json[QString("weightDimensions")].isNull() && m_weight_dimensions_isValid;

    m_supply_schedule_days_isValid = ::OpenAPI::fromJsonValue(m_supply_schedule_days, json[QString("supplyScheduleDays")]);
    m_supply_schedule_days_isSet = !json[QString("supplyScheduleDays")].isNull() && m_supply_schedule_days_isValid;

    m_shelf_life_days_isValid = ::OpenAPI::fromJsonValue(m_shelf_life_days, json[QString("shelfLifeDays")]);
    m_shelf_life_days_isSet = !json[QString("shelfLifeDays")].isNull() && m_shelf_life_days_isValid;

    m_life_time_days_isValid = ::OpenAPI::fromJsonValue(m_life_time_days, json[QString("lifeTimeDays")]);
    m_life_time_days_isSet = !json[QString("lifeTimeDays")].isNull() && m_life_time_days_isValid;

    m_guarantee_period_days_isValid = ::OpenAPI::fromJsonValue(m_guarantee_period_days, json[QString("guaranteePeriodDays")]);
    m_guarantee_period_days_isSet = !json[QString("guaranteePeriodDays")].isNull() && m_guarantee_period_days_isValid;

    m_processing_state_isValid = ::OpenAPI::fromJsonValue(m_processing_state, json[QString("processingState")]);
    m_processing_state_isSet = !json[QString("processingState")].isNull() && m_processing_state_isValid;

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_shelf_life_isValid = ::OpenAPI::fromJsonValue(m_shelf_life, json[QString("shelfLife")]);
    m_shelf_life_isSet = !json[QString("shelfLife")].isNull() && m_shelf_life_isValid;

    m_life_time_isValid = ::OpenAPI::fromJsonValue(m_life_time, json[QString("lifeTime")]);
    m_life_time_isSet = !json[QString("lifeTime")].isNull() && m_life_time_isValid;

    m_guarantee_period_isValid = ::OpenAPI::fromJsonValue(m_guarantee_period, json[QString("guaranteePeriod")]);
    m_guarantee_period_isSet = !json[QString("guaranteePeriod")].isNull() && m_guarantee_period_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAIMappingsOfferDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappingsOfferDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_shop_sku_isSet) {
        obj.insert(QString("shopSku"), ::OpenAPI::toJsonValue(m_shop_sku));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    if (m_vendor_code_isSet) {
        obj.insert(QString("vendorCode"), ::OpenAPI::toJsonValue(m_vendor_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_feed_id_isSet) {
        obj.insert(QString("feedId"), ::OpenAPI::toJsonValue(m_feed_id));
    }
    if (m_barcodes.size() > 0) {
        obj.insert(QString("barcodes"), ::OpenAPI::toJsonValue(m_barcodes));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_pictures.size() > 0) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_manufacturer_countries.size() > 0) {
        obj.insert(QString("manufacturerCountries"), ::OpenAPI::toJsonValue(m_manufacturer_countries));
    }
    if (m_min_shipment_isSet) {
        obj.insert(QString("minShipment"), ::OpenAPI::toJsonValue(m_min_shipment));
    }
    if (m_transport_unit_size_isSet) {
        obj.insert(QString("transportUnitSize"), ::OpenAPI::toJsonValue(m_transport_unit_size));
    }
    if (m_quantum_of_supply_isSet) {
        obj.insert(QString("quantumOfSupply"), ::OpenAPI::toJsonValue(m_quantum_of_supply));
    }
    if (m_delivery_duration_days_isSet) {
        obj.insert(QString("deliveryDurationDays"), ::OpenAPI::toJsonValue(m_delivery_duration_days));
    }
    if (m_box_count_isSet) {
        obj.insert(QString("boxCount"), ::OpenAPI::toJsonValue(m_box_count));
    }
    if (m_customs_commodity_codes.size() > 0) {
        obj.insert(QString("customsCommodityCodes"), ::OpenAPI::toJsonValue(m_customs_commodity_codes));
    }
    if (m_weight_dimensions.isSet()) {
        obj.insert(QString("weightDimensions"), ::OpenAPI::toJsonValue(m_weight_dimensions));
    }
    if (m_supply_schedule_days.size() > 0) {
        obj.insert(QString("supplyScheduleDays"), ::OpenAPI::toJsonValue(m_supply_schedule_days));
    }
    if (m_shelf_life_days_isSet) {
        obj.insert(QString("shelfLifeDays"), ::OpenAPI::toJsonValue(m_shelf_life_days));
    }
    if (m_life_time_days_isSet) {
        obj.insert(QString("lifeTimeDays"), ::OpenAPI::toJsonValue(m_life_time_days));
    }
    if (m_guarantee_period_days_isSet) {
        obj.insert(QString("guaranteePeriodDays"), ::OpenAPI::toJsonValue(m_guarantee_period_days));
    }
    if (m_processing_state.isSet()) {
        obj.insert(QString("processingState"), ::OpenAPI::toJsonValue(m_processing_state));
    }
    if (m_availability.isSet()) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_shelf_life.isSet()) {
        obj.insert(QString("shelfLife"), ::OpenAPI::toJsonValue(m_shelf_life));
    }
    if (m_life_time.isSet()) {
        obj.insert(QString("lifeTime"), ::OpenAPI::toJsonValue(m_life_time));
    }
    if (m_guarantee_period.isSet()) {
        obj.insert(QString("guaranteePeriod"), ::OpenAPI::toJsonValue(m_guarantee_period));
    }
    if (m_certificate_isSet) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

QString OAIMappingsOfferDTO::getName() const {
    return m_name;
}
void OAIMappingsOfferDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMappingsOfferDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMappingsOfferDTO::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMappingsOfferDTO::getShopSku() const {
    return m_shop_sku;
}
void OAIMappingsOfferDTO::setShopSku(const QString &shop_sku) {
    m_shop_sku = shop_sku;
    m_shop_sku_isSet = true;
}

bool OAIMappingsOfferDTO::is_shop_sku_Set() const{
    return m_shop_sku_isSet;
}

bool OAIMappingsOfferDTO::is_shop_sku_Valid() const{
    return m_shop_sku_isValid;
}

QString OAIMappingsOfferDTO::getCategory() const {
    return m_category;
}
void OAIMappingsOfferDTO::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIMappingsOfferDTO::is_category_Set() const{
    return m_category_isSet;
}

bool OAIMappingsOfferDTO::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIMappingsOfferDTO::getVendor() const {
    return m_vendor;
}
void OAIMappingsOfferDTO::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIMappingsOfferDTO::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIMappingsOfferDTO::is_vendor_Valid() const{
    return m_vendor_isValid;
}

QString OAIMappingsOfferDTO::getVendorCode() const {
    return m_vendor_code;
}
void OAIMappingsOfferDTO::setVendorCode(const QString &vendor_code) {
    m_vendor_code = vendor_code;
    m_vendor_code_isSet = true;
}

bool OAIMappingsOfferDTO::is_vendor_code_Set() const{
    return m_vendor_code_isSet;
}

bool OAIMappingsOfferDTO::is_vendor_code_Valid() const{
    return m_vendor_code_isValid;
}

QString OAIMappingsOfferDTO::getDescription() const {
    return m_description;
}
void OAIMappingsOfferDTO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMappingsOfferDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMappingsOfferDTO::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMappingsOfferDTO::getId() const {
    return m_id;
}
void OAIMappingsOfferDTO::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMappingsOfferDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMappingsOfferDTO::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIMappingsOfferDTO::getFeedId() const {
    return m_feed_id;
}
void OAIMappingsOfferDTO::setFeedId(const qint64 &feed_id) {
    m_feed_id = feed_id;
    m_feed_id_isSet = true;
}

bool OAIMappingsOfferDTO::is_feed_id_Set() const{
    return m_feed_id_isSet;
}

bool OAIMappingsOfferDTO::is_feed_id_Valid() const{
    return m_feed_id_isValid;
}

QList<QString> OAIMappingsOfferDTO::getBarcodes() const {
    return m_barcodes;
}
void OAIMappingsOfferDTO::setBarcodes(const QList<QString> &barcodes) {
    m_barcodes = barcodes;
    m_barcodes_isSet = true;
}

bool OAIMappingsOfferDTO::is_barcodes_Set() const{
    return m_barcodes_isSet;
}

bool OAIMappingsOfferDTO::is_barcodes_Valid() const{
    return m_barcodes_isValid;
}

QList<QString> OAIMappingsOfferDTO::getUrls() const {
    return m_urls;
}
void OAIMappingsOfferDTO::setUrls(const QList<QString> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIMappingsOfferDTO::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIMappingsOfferDTO::is_urls_Valid() const{
    return m_urls_isValid;
}

QList<QString> OAIMappingsOfferDTO::getPictures() const {
    return m_pictures;
}
void OAIMappingsOfferDTO::setPictures(const QList<QString> &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAIMappingsOfferDTO::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIMappingsOfferDTO::is_pictures_Valid() const{
    return m_pictures_isValid;
}

QString OAIMappingsOfferDTO::getManufacturer() const {
    return m_manufacturer;
}
void OAIMappingsOfferDTO::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIMappingsOfferDTO::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIMappingsOfferDTO::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QList<QString> OAIMappingsOfferDTO::getManufacturerCountries() const {
    return m_manufacturer_countries;
}
void OAIMappingsOfferDTO::setManufacturerCountries(const QList<QString> &manufacturer_countries) {
    m_manufacturer_countries = manufacturer_countries;
    m_manufacturer_countries_isSet = true;
}

bool OAIMappingsOfferDTO::is_manufacturer_countries_Set() const{
    return m_manufacturer_countries_isSet;
}

bool OAIMappingsOfferDTO::is_manufacturer_countries_Valid() const{
    return m_manufacturer_countries_isValid;
}

qint32 OAIMappingsOfferDTO::getMinShipment() const {
    return m_min_shipment;
}
void OAIMappingsOfferDTO::setMinShipment(const qint32 &min_shipment) {
    m_min_shipment = min_shipment;
    m_min_shipment_isSet = true;
}

bool OAIMappingsOfferDTO::is_min_shipment_Set() const{
    return m_min_shipment_isSet;
}

bool OAIMappingsOfferDTO::is_min_shipment_Valid() const{
    return m_min_shipment_isValid;
}

qint32 OAIMappingsOfferDTO::getTransportUnitSize() const {
    return m_transport_unit_size;
}
void OAIMappingsOfferDTO::setTransportUnitSize(const qint32 &transport_unit_size) {
    m_transport_unit_size = transport_unit_size;
    m_transport_unit_size_isSet = true;
}

bool OAIMappingsOfferDTO::is_transport_unit_size_Set() const{
    return m_transport_unit_size_isSet;
}

bool OAIMappingsOfferDTO::is_transport_unit_size_Valid() const{
    return m_transport_unit_size_isValid;
}

qint32 OAIMappingsOfferDTO::getQuantumOfSupply() const {
    return m_quantum_of_supply;
}
void OAIMappingsOfferDTO::setQuantumOfSupply(const qint32 &quantum_of_supply) {
    m_quantum_of_supply = quantum_of_supply;
    m_quantum_of_supply_isSet = true;
}

bool OAIMappingsOfferDTO::is_quantum_of_supply_Set() const{
    return m_quantum_of_supply_isSet;
}

bool OAIMappingsOfferDTO::is_quantum_of_supply_Valid() const{
    return m_quantum_of_supply_isValid;
}

qint32 OAIMappingsOfferDTO::getDeliveryDurationDays() const {
    return m_delivery_duration_days;
}
void OAIMappingsOfferDTO::setDeliveryDurationDays(const qint32 &delivery_duration_days) {
    m_delivery_duration_days = delivery_duration_days;
    m_delivery_duration_days_isSet = true;
}

bool OAIMappingsOfferDTO::is_delivery_duration_days_Set() const{
    return m_delivery_duration_days_isSet;
}

bool OAIMappingsOfferDTO::is_delivery_duration_days_Valid() const{
    return m_delivery_duration_days_isValid;
}

qint32 OAIMappingsOfferDTO::getBoxCount() const {
    return m_box_count;
}
void OAIMappingsOfferDTO::setBoxCount(const qint32 &box_count) {
    m_box_count = box_count;
    m_box_count_isSet = true;
}

bool OAIMappingsOfferDTO::is_box_count_Set() const{
    return m_box_count_isSet;
}

bool OAIMappingsOfferDTO::is_box_count_Valid() const{
    return m_box_count_isValid;
}

QList<QString> OAIMappingsOfferDTO::getCustomsCommodityCodes() const {
    return m_customs_commodity_codes;
}
void OAIMappingsOfferDTO::setCustomsCommodityCodes(const QList<QString> &customs_commodity_codes) {
    m_customs_commodity_codes = customs_commodity_codes;
    m_customs_commodity_codes_isSet = true;
}

bool OAIMappingsOfferDTO::is_customs_commodity_codes_Set() const{
    return m_customs_commodity_codes_isSet;
}

bool OAIMappingsOfferDTO::is_customs_commodity_codes_Valid() const{
    return m_customs_commodity_codes_isValid;
}

OAIOfferWeightDimensionsDTO OAIMappingsOfferDTO::getWeightDimensions() const {
    return m_weight_dimensions;
}
void OAIMappingsOfferDTO::setWeightDimensions(const OAIOfferWeightDimensionsDTO &weight_dimensions) {
    m_weight_dimensions = weight_dimensions;
    m_weight_dimensions_isSet = true;
}

bool OAIMappingsOfferDTO::is_weight_dimensions_Set() const{
    return m_weight_dimensions_isSet;
}

bool OAIMappingsOfferDTO::is_weight_dimensions_Valid() const{
    return m_weight_dimensions_isValid;
}

QList<OAIDayOfWeekType> OAIMappingsOfferDTO::getSupplyScheduleDays() const {
    return m_supply_schedule_days;
}
void OAIMappingsOfferDTO::setSupplyScheduleDays(const QList<OAIDayOfWeekType> &supply_schedule_days) {
    m_supply_schedule_days = supply_schedule_days;
    m_supply_schedule_days_isSet = true;
}

bool OAIMappingsOfferDTO::is_supply_schedule_days_Set() const{
    return m_supply_schedule_days_isSet;
}

bool OAIMappingsOfferDTO::is_supply_schedule_days_Valid() const{
    return m_supply_schedule_days_isValid;
}

qint32 OAIMappingsOfferDTO::getShelfLifeDays() const {
    return m_shelf_life_days;
}
void OAIMappingsOfferDTO::setShelfLifeDays(const qint32 &shelf_life_days) {
    m_shelf_life_days = shelf_life_days;
    m_shelf_life_days_isSet = true;
}

bool OAIMappingsOfferDTO::is_shelf_life_days_Set() const{
    return m_shelf_life_days_isSet;
}

bool OAIMappingsOfferDTO::is_shelf_life_days_Valid() const{
    return m_shelf_life_days_isValid;
}

qint32 OAIMappingsOfferDTO::getLifeTimeDays() const {
    return m_life_time_days;
}
void OAIMappingsOfferDTO::setLifeTimeDays(const qint32 &life_time_days) {
    m_life_time_days = life_time_days;
    m_life_time_days_isSet = true;
}

bool OAIMappingsOfferDTO::is_life_time_days_Set() const{
    return m_life_time_days_isSet;
}

bool OAIMappingsOfferDTO::is_life_time_days_Valid() const{
    return m_life_time_days_isValid;
}

qint32 OAIMappingsOfferDTO::getGuaranteePeriodDays() const {
    return m_guarantee_period_days;
}
void OAIMappingsOfferDTO::setGuaranteePeriodDays(const qint32 &guarantee_period_days) {
    m_guarantee_period_days = guarantee_period_days;
    m_guarantee_period_days_isSet = true;
}

bool OAIMappingsOfferDTO::is_guarantee_period_days_Set() const{
    return m_guarantee_period_days_isSet;
}

bool OAIMappingsOfferDTO::is_guarantee_period_days_Valid() const{
    return m_guarantee_period_days_isValid;
}

OAIOfferProcessingStateDTO OAIMappingsOfferDTO::getProcessingState() const {
    return m_processing_state;
}
void OAIMappingsOfferDTO::setProcessingState(const OAIOfferProcessingStateDTO &processing_state) {
    m_processing_state = processing_state;
    m_processing_state_isSet = true;
}

bool OAIMappingsOfferDTO::is_processing_state_Set() const{
    return m_processing_state_isSet;
}

bool OAIMappingsOfferDTO::is_processing_state_Valid() const{
    return m_processing_state_isValid;
}

OAIOfferAvailabilityStatusType OAIMappingsOfferDTO::getAvailability() const {
    return m_availability;
}
void OAIMappingsOfferDTO::setAvailability(const OAIOfferAvailabilityStatusType &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIMappingsOfferDTO::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIMappingsOfferDTO::is_availability_Valid() const{
    return m_availability_isValid;
}

OAITimePeriodDTO OAIMappingsOfferDTO::getShelfLife() const {
    return m_shelf_life;
}
void OAIMappingsOfferDTO::setShelfLife(const OAITimePeriodDTO &shelf_life) {
    m_shelf_life = shelf_life;
    m_shelf_life_isSet = true;
}

bool OAIMappingsOfferDTO::is_shelf_life_Set() const{
    return m_shelf_life_isSet;
}

bool OAIMappingsOfferDTO::is_shelf_life_Valid() const{
    return m_shelf_life_isValid;
}

OAITimePeriodDTO OAIMappingsOfferDTO::getLifeTime() const {
    return m_life_time;
}
void OAIMappingsOfferDTO::setLifeTime(const OAITimePeriodDTO &life_time) {
    m_life_time = life_time;
    m_life_time_isSet = true;
}

bool OAIMappingsOfferDTO::is_life_time_Set() const{
    return m_life_time_isSet;
}

bool OAIMappingsOfferDTO::is_life_time_Valid() const{
    return m_life_time_isValid;
}

OAITimePeriodDTO OAIMappingsOfferDTO::getGuaranteePeriod() const {
    return m_guarantee_period;
}
void OAIMappingsOfferDTO::setGuaranteePeriod(const OAITimePeriodDTO &guarantee_period) {
    m_guarantee_period = guarantee_period;
    m_guarantee_period_isSet = true;
}

bool OAIMappingsOfferDTO::is_guarantee_period_Set() const{
    return m_guarantee_period_isSet;
}

bool OAIMappingsOfferDTO::is_guarantee_period_Valid() const{
    return m_guarantee_period_isValid;
}

QString OAIMappingsOfferDTO::getCertificate() const {
    return m_certificate;
}
void OAIMappingsOfferDTO::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIMappingsOfferDTO::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIMappingsOfferDTO::is_certificate_Valid() const{
    return m_certificate_isValid;
}

double OAIMappingsOfferDTO::getPrice() const {
    return m_price;
}
void OAIMappingsOfferDTO::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIMappingsOfferDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAIMappingsOfferDTO::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIMappingsOfferDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_shipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_unit_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantum_of_supply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_duration_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customs_commodity_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supply_schedule_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shelf_life_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_life_time_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guarantee_period_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shelf_life.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_life_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guarantee_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappingsOfferDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
