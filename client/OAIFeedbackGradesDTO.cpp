/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedbackGradesDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedbackGradesDTO::OAIFeedbackGradesDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedbackGradesDTO::OAIFeedbackGradesDTO() {
    this->initializeModel();
}

OAIFeedbackGradesDTO::~OAIFeedbackGradesDTO() {}

void OAIFeedbackGradesDTO::initializeModel() {

    m_average_isSet = false;
    m_average_isValid = false;

    m_agree_count_isSet = false;
    m_agree_count_isValid = false;

    m_reject_count_isSet = false;
    m_reject_count_isValid = false;

    m_factors_isSet = false;
    m_factors_isValid = false;
}

void OAIFeedbackGradesDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedbackGradesDTO::fromJsonObject(QJsonObject json) {

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("average")]);
    m_average_isSet = !json[QString("average")].isNull() && m_average_isValid;

    m_agree_count_isValid = ::OpenAPI::fromJsonValue(m_agree_count, json[QString("agreeCount")]);
    m_agree_count_isSet = !json[QString("agreeCount")].isNull() && m_agree_count_isValid;

    m_reject_count_isValid = ::OpenAPI::fromJsonValue(m_reject_count, json[QString("rejectCount")]);
    m_reject_count_isSet = !json[QString("rejectCount")].isNull() && m_reject_count_isValid;

    m_factors_isValid = ::OpenAPI::fromJsonValue(m_factors, json[QString("factors")]);
    m_factors_isSet = !json[QString("factors")].isNull() && m_factors_isValid;
}

QString OAIFeedbackGradesDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedbackGradesDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_average_isSet) {
        obj.insert(QString("average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_agree_count_isSet) {
        obj.insert(QString("agreeCount"), ::OpenAPI::toJsonValue(m_agree_count));
    }
    if (m_reject_count_isSet) {
        obj.insert(QString("rejectCount"), ::OpenAPI::toJsonValue(m_reject_count));
    }
    if (m_factors.size() > 0) {
        obj.insert(QString("factors"), ::OpenAPI::toJsonValue(m_factors));
    }
    return obj;
}

double OAIFeedbackGradesDTO::getAverage() const {
    return m_average;
}
void OAIFeedbackGradesDTO::setAverage(const double &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAIFeedbackGradesDTO::is_average_Set() const{
    return m_average_isSet;
}

bool OAIFeedbackGradesDTO::is_average_Valid() const{
    return m_average_isValid;
}

qint64 OAIFeedbackGradesDTO::getAgreeCount() const {
    return m_agree_count;
}
void OAIFeedbackGradesDTO::setAgreeCount(const qint64 &agree_count) {
    m_agree_count = agree_count;
    m_agree_count_isSet = true;
}

bool OAIFeedbackGradesDTO::is_agree_count_Set() const{
    return m_agree_count_isSet;
}

bool OAIFeedbackGradesDTO::is_agree_count_Valid() const{
    return m_agree_count_isValid;
}

qint64 OAIFeedbackGradesDTO::getRejectCount() const {
    return m_reject_count;
}
void OAIFeedbackGradesDTO::setRejectCount(const qint64 &reject_count) {
    m_reject_count = reject_count;
    m_reject_count_isSet = true;
}

bool OAIFeedbackGradesDTO::is_reject_count_Set() const{
    return m_reject_count_isSet;
}

bool OAIFeedbackGradesDTO::is_reject_count_Valid() const{
    return m_reject_count_isValid;
}

QList<OAIFeedbackFactorDTO> OAIFeedbackGradesDTO::getFactors() const {
    return m_factors;
}
void OAIFeedbackGradesDTO::setFactors(const QList<OAIFeedbackFactorDTO> &factors) {
    m_factors = factors;
    m_factors_isSet = true;
}

bool OAIFeedbackGradesDTO::is_factors_Set() const{
    return m_factors_isSet;
}

bool OAIFeedbackGradesDTO::is_factors_Valid() const{
    return m_factors_isValid;
}

bool OAIFeedbackGradesDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agree_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_factors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedbackGradesDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_factors_isValid && true;
}

} // namespace OpenAPI
