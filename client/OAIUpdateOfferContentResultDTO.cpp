/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateOfferContentResultDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateOfferContentResultDTO::OAIUpdateOfferContentResultDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateOfferContentResultDTO::OAIUpdateOfferContentResultDTO() {
    this->initializeModel();
}

OAIUpdateOfferContentResultDTO::~OAIUpdateOfferContentResultDTO() {}

void OAIUpdateOfferContentResultDTO::initializeModel() {

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIUpdateOfferContentResultDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateOfferContentResultDTO::fromJsonObject(QJsonObject json) {

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIUpdateOfferContentResultDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateOfferContentResultDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QString OAIUpdateOfferContentResultDTO::getOfferId() const {
    return m_offer_id;
}
void OAIUpdateOfferContentResultDTO::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIUpdateOfferContentResultDTO::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIUpdateOfferContentResultDTO::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QList<OAIOfferContentErrorDTO> OAIUpdateOfferContentResultDTO::getErrors() const {
    return m_errors;
}
void OAIUpdateOfferContentResultDTO::setErrors(const QList<OAIOfferContentErrorDTO> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIUpdateOfferContentResultDTO::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIUpdateOfferContentResultDTO::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAIOfferContentErrorDTO> OAIUpdateOfferContentResultDTO::getWarnings() const {
    return m_warnings;
}
void OAIUpdateOfferContentResultDTO::setWarnings(const QList<OAIOfferContentErrorDTO> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIUpdateOfferContentResultDTO::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIUpdateOfferContentResultDTO::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIUpdateOfferContentResultDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateOfferContentResultDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_offer_id_isValid && true;
}

} // namespace OpenAPI
