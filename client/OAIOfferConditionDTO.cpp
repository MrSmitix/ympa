/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferConditionDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferConditionDTO::OAIOfferConditionDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferConditionDTO::OAIOfferConditionDTO() {
    this->initializeModel();
}

OAIOfferConditionDTO::~OAIOfferConditionDTO() {}

void OAIOfferConditionDTO::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_quality_isSet = false;
    m_quality_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIOfferConditionDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferConditionDTO::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIOfferConditionDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferConditionDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_quality.isSet()) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

OAIOfferConditionType OAIOfferConditionDTO::getType() const {
    return m_type;
}
void OAIOfferConditionDTO::setType(const OAIOfferConditionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOfferConditionDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOfferConditionDTO::is_type_Valid() const{
    return m_type_isValid;
}

OAIOfferConditionQualityType OAIOfferConditionDTO::getQuality() const {
    return m_quality;
}
void OAIOfferConditionDTO::setQuality(const OAIOfferConditionQualityType &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAIOfferConditionDTO::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAIOfferConditionDTO::is_quality_Valid() const{
    return m_quality_isValid;
}

QString OAIOfferConditionDTO::getReason() const {
    return m_reason;
}
void OAIOfferConditionDTO::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIOfferConditionDTO::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIOfferConditionDTO::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIOfferConditionDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferConditionDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
