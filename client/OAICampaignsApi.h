/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICampaignsApi_H
#define OAI_OAICampaignsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIGetCampaignLoginsResponse.h"
#include "OAIGetCampaignRegionResponse.h"
#include "OAIGetCampaignResponse.h"
#include "OAIGetCampaignSettingsResponse.h"
#include "OAIGetCampaignsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICampaignsApi : public QObject {
    Q_OBJECT

public:
    OAICampaignsApi(const int timeOut = 0);
    ~OAICampaignsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id qint64 [required]
    */
    void getCampaign(const qint64 &campaign_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    */
    void getCampaignLogins(const qint64 &campaign_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    */
    Q_DECL_DEPRECATED void getCampaignRegion(const qint64 &campaign_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    */
    void getCampaignSettings(const qint64 &campaign_id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    void getCampaigns(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  login QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    void getCampaignsByLogin(const QString &login, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCampaignCallback(OAIHttpRequestWorker *worker);
    void getCampaignLoginsCallback(OAIHttpRequestWorker *worker);
    void getCampaignRegionCallback(OAIHttpRequestWorker *worker);
    void getCampaignSettingsCallback(OAIHttpRequestWorker *worker);
    void getCampaignsCallback(OAIHttpRequestWorker *worker);
    void getCampaignsByLoginCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCampaignSignal(OAIGetCampaignResponse summary);
    void getCampaignLoginsSignal(OAIGetCampaignLoginsResponse summary);
    void getCampaignRegionSignal(OAIGetCampaignRegionResponse summary);
    void getCampaignSettingsSignal(OAIGetCampaignSettingsResponse summary);
    void getCampaignsSignal(OAIGetCampaignsResponse summary);
    void getCampaignsByLoginSignal(OAIGetCampaignsResponse summary);


    void getCampaignSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignResponse summary);
    void getCampaignLoginsSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignLoginsResponse summary);
    void getCampaignRegionSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignRegionResponse summary);
    void getCampaignSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignSettingsResponse summary);
    void getCampaignsSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignsResponse summary);
    void getCampaignsByLoginSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignsResponse summary);

    Q_DECL_DEPRECATED_X("Use getCampaignSignalError() instead")
    void getCampaignSignalE(OAIGetCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSignalError(OAIGetCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignLoginsSignalError() instead")
    void getCampaignLoginsSignalE(OAIGetCampaignLoginsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignLoginsSignalError(OAIGetCampaignLoginsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignRegionSignalError() instead")
    void getCampaignRegionSignalE(OAIGetCampaignRegionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignRegionSignalError(OAIGetCampaignRegionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSettingsSignalError() instead")
    void getCampaignSettingsSignalE(OAIGetCampaignSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSettingsSignalError(OAIGetCampaignSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsSignalError() instead")
    void getCampaignsSignalE(OAIGetCampaignsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsSignalError(OAIGetCampaignsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsByLoginSignalError() instead")
    void getCampaignsByLoginSignalE(OAIGetCampaignsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsByLoginSignalError(OAIGetCampaignsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCampaignSignalErrorFull() instead")
    void getCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignLoginsSignalErrorFull() instead")
    void getCampaignLoginsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignLoginsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignRegionSignalErrorFull() instead")
    void getCampaignRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSettingsSignalErrorFull() instead")
    void getCampaignSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsSignalErrorFull() instead")
    void getCampaignsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsByLoginSignalErrorFull() instead")
    void getCampaignsByLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsByLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
