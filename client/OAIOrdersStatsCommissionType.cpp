/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrdersStatsCommissionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrdersStatsCommissionType::OAIOrdersStatsCommissionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrdersStatsCommissionType::OAIOrdersStatsCommissionType() {
    this->initializeModel();
}

OAIOrdersStatsCommissionType::~OAIOrdersStatsCommissionType() {}

void OAIOrdersStatsCommissionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrdersStatsCommissionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrdersStatsCommissionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FEE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FULFILLMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::FULFILLMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOYALTY_PARTICIPATION_FEE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::LOYALTY_PARTICIPATION_FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUCTION_PROMOTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::AUCTION_PROMOTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTALLMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::INSTALLMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_TO_CUSTOMER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::DELIVERY_TO_CUSTOMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPRESS_DELIVERY_TO_CUSTOMER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::EXPRESS_DELIVERY_TO_CUSTOMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AGENCY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::AGENCY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAYMENT_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::PAYMENT_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETURNED_ORDERS_STORAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::RETURNED_ORDERS_STORAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SORTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::SORTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTAKE_SORTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::INTAKE_SORTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETURN_PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::RETURN_PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ILLIQUID_GOODS_SALE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsCommissionType::ILLIQUID_GOODS_SALE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrdersStatsCommissionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrdersStatsCommissionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrdersStatsCommissionType::FEE:
            val = "FEE";
            break;
        case eOAIOrdersStatsCommissionType::FULFILLMENT:
            val = "FULFILLMENT";
            break;
        case eOAIOrdersStatsCommissionType::LOYALTY_PARTICIPATION_FEE:
            val = "LOYALTY_PARTICIPATION_FEE";
            break;
        case eOAIOrdersStatsCommissionType::AUCTION_PROMOTION:
            val = "AUCTION_PROMOTION";
            break;
        case eOAIOrdersStatsCommissionType::INSTALLMENT:
            val = "INSTALLMENT";
            break;
        case eOAIOrdersStatsCommissionType::DELIVERY_TO_CUSTOMER:
            val = "DELIVERY_TO_CUSTOMER";
            break;
        case eOAIOrdersStatsCommissionType::EXPRESS_DELIVERY_TO_CUSTOMER:
            val = "EXPRESS_DELIVERY_TO_CUSTOMER";
            break;
        case eOAIOrdersStatsCommissionType::AGENCY:
            val = "AGENCY";
            break;
        case eOAIOrdersStatsCommissionType::PAYMENT_TRANSFER:
            val = "PAYMENT_TRANSFER";
            break;
        case eOAIOrdersStatsCommissionType::RETURNED_ORDERS_STORAGE:
            val = "RETURNED_ORDERS_STORAGE";
            break;
        case eOAIOrdersStatsCommissionType::SORTING:
            val = "SORTING";
            break;
        case eOAIOrdersStatsCommissionType::INTAKE_SORTING:
            val = "INTAKE_SORTING";
            break;
        case eOAIOrdersStatsCommissionType::RETURN_PROCESSING:
            val = "RETURN_PROCESSING";
            break;
        case eOAIOrdersStatsCommissionType::ILLIQUID_GOODS_SALE:
            val = "ILLIQUID_GOODS_SALE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrdersStatsCommissionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrdersStatsCommissionType::eOAIOrdersStatsCommissionType OAIOrdersStatsCommissionType::getValue() const {
    return m_value;
}

void OAIOrdersStatsCommissionType::setValue(const OAIOrdersStatsCommissionType::eOAIOrdersStatsCommissionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrdersStatsCommissionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrdersStatsCommissionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
