/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderVatType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderVatType::OAIOrderVatType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderVatType::OAIOrderVatType() {
    this->initializeModel();
}

OAIOrderVatType::~OAIOrderVatType() {}

void OAIOrderVatType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrderVatType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrderVatType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NO_VAT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderVatType::NO_VAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VAT_0", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderVatType::VAT_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VAT_10", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderVatType::VAT_10;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VAT_10_110", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderVatType::VAT_10_110;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VAT_20", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderVatType::VAT_20;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VAT_20_120", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderVatType::VAT_20_120;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VAT_18", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderVatType::VAT_18;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VAT_18_118", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderVatType::VAT_18_118;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN_VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderVatType::UNKNOWN_VALUE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrderVatType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrderVatType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrderVatType::NO_VAT:
            val = "NO_VAT";
            break;
        case eOAIOrderVatType::VAT_0:
            val = "VAT_0";
            break;
        case eOAIOrderVatType::VAT_10:
            val = "VAT_10";
            break;
        case eOAIOrderVatType::VAT_10_110:
            val = "VAT_10_110";
            break;
        case eOAIOrderVatType::VAT_20:
            val = "VAT_20";
            break;
        case eOAIOrderVatType::VAT_20_120:
            val = "VAT_20_120";
            break;
        case eOAIOrderVatType::VAT_18:
            val = "VAT_18";
            break;
        case eOAIOrderVatType::VAT_18_118:
            val = "VAT_18_118";
            break;
        case eOAIOrderVatType::UNKNOWN_VALUE:
            val = "UNKNOWN_VALUE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrderVatType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrderVatType::eOAIOrderVatType OAIOrderVatType::getValue() const {
    return m_value;
}

void OAIOrderVatType::setValue(const OAIOrderVatType::eOAIOrderVatType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrderVatType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrderVatType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
