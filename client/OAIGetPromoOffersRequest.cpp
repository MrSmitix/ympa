/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPromoOffersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPromoOffersRequest::OAIGetPromoOffersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPromoOffersRequest::OAIGetPromoOffersRequest() {
    this->initializeModel();
}

OAIGetPromoOffersRequest::~OAIGetPromoOffersRequest() {}

void OAIGetPromoOffersRequest::initializeModel() {

    m_promo_id_isSet = false;
    m_promo_id_isValid = false;

    m_status_type_isSet = false;
    m_status_type_isValid = false;
}

void OAIGetPromoOffersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPromoOffersRequest::fromJsonObject(QJsonObject json) {

    m_promo_id_isValid = ::OpenAPI::fromJsonValue(m_promo_id, json[QString("promoId")]);
    m_promo_id_isSet = !json[QString("promoId")].isNull() && m_promo_id_isValid;

    m_status_type_isValid = ::OpenAPI::fromJsonValue(m_status_type, json[QString("statusType")]);
    m_status_type_isSet = !json[QString("statusType")].isNull() && m_status_type_isValid;
}

QString OAIGetPromoOffersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPromoOffersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_promo_id_isSet) {
        obj.insert(QString("promoId"), ::OpenAPI::toJsonValue(m_promo_id));
    }
    if (m_status_type.isSet()) {
        obj.insert(QString("statusType"), ::OpenAPI::toJsonValue(m_status_type));
    }
    return obj;
}

QString OAIGetPromoOffersRequest::getPromoId() const {
    return m_promo_id;
}
void OAIGetPromoOffersRequest::setPromoId(const QString &promo_id) {
    m_promo_id = promo_id;
    m_promo_id_isSet = true;
}

bool OAIGetPromoOffersRequest::is_promo_id_Set() const{
    return m_promo_id_isSet;
}

bool OAIGetPromoOffersRequest::is_promo_id_Valid() const{
    return m_promo_id_isValid;
}

OAIPromoOfferParticipationStatusFilterType OAIGetPromoOffersRequest::getStatusType() const {
    return m_status_type;
}
void OAIGetPromoOffersRequest::setStatusType(const OAIPromoOfferParticipationStatusFilterType &status_type) {
    m_status_type = status_type;
    m_status_type_isSet = true;
}

bool OAIGetPromoOffersRequest::is_status_type_Set() const{
    return m_status_type_isSet;
}

bool OAIGetPromoOffersRequest::is_status_type_Valid() const{
    return m_status_type_isValid;
}

bool OAIGetPromoOffersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_promo_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPromoOffersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_promo_id_isValid && true;
}

} // namespace OpenAPI
