/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetChatInfoDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetChatInfoDTO::OAIGetChatInfoDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetChatInfoDTO::OAIGetChatInfoDTO() {
    this->initializeModel();
}

OAIGetChatInfoDTO::~OAIGetChatInfoDTO() {}

void OAIGetChatInfoDTO::initializeModel() {

    m_chat_id_isSet = false;
    m_chat_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIGetChatInfoDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetChatInfoDTO::fromJsonObject(QJsonObject json) {

    m_chat_id_isValid = ::OpenAPI::fromJsonValue(m_chat_id, json[QString("chatId")]);
    m_chat_id_isSet = !json[QString("chatId")].isNull() && m_chat_id_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIGetChatInfoDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetChatInfoDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_chat_id_isSet) {
        obj.insert(QString("chatId"), ::OpenAPI::toJsonValue(m_chat_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

qint64 OAIGetChatInfoDTO::getChatId() const {
    return m_chat_id;
}
void OAIGetChatInfoDTO::setChatId(const qint64 &chat_id) {
    m_chat_id = chat_id;
    m_chat_id_isSet = true;
}

bool OAIGetChatInfoDTO::is_chat_id_Set() const{
    return m_chat_id_isSet;
}

bool OAIGetChatInfoDTO::is_chat_id_Valid() const{
    return m_chat_id_isValid;
}

qint64 OAIGetChatInfoDTO::getOrderId() const {
    return m_order_id;
}
void OAIGetChatInfoDTO::setOrderId(const qint64 &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIGetChatInfoDTO::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIGetChatInfoDTO::is_order_id_Valid() const{
    return m_order_id_isValid;
}

OAIChatType OAIGetChatInfoDTO::getType() const {
    return m_type;
}
void OAIGetChatInfoDTO::setType(const OAIChatType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetChatInfoDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetChatInfoDTO::is_type_Valid() const{
    return m_type_isValid;
}

OAIChatStatusType OAIGetChatInfoDTO::getStatus() const {
    return m_status;
}
void OAIGetChatInfoDTO::setStatus(const OAIChatStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetChatInfoDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetChatInfoDTO::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIGetChatInfoDTO::getCreatedAt() const {
    return m_created_at;
}
void OAIGetChatInfoDTO::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetChatInfoDTO::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetChatInfoDTO::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIGetChatInfoDTO::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGetChatInfoDTO::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGetChatInfoDTO::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGetChatInfoDTO::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIGetChatInfoDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetChatInfoDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_chat_id_isValid && m_order_id_isValid && m_type_isValid && m_status_isValid && m_created_at_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
