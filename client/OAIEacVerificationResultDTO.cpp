/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEacVerificationResultDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEacVerificationResultDTO::OAIEacVerificationResultDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEacVerificationResultDTO::OAIEacVerificationResultDTO() {
    this->initializeModel();
}

OAIEacVerificationResultDTO::~OAIEacVerificationResultDTO() {}

void OAIEacVerificationResultDTO::initializeModel() {

    m_verification_result_isSet = false;
    m_verification_result_isValid = false;

    m_attempts_left_isSet = false;
    m_attempts_left_isValid = false;
}

void OAIEacVerificationResultDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEacVerificationResultDTO::fromJsonObject(QJsonObject json) {

    m_verification_result_isValid = ::OpenAPI::fromJsonValue(m_verification_result, json[QString("verificationResult")]);
    m_verification_result_isSet = !json[QString("verificationResult")].isNull() && m_verification_result_isValid;

    m_attempts_left_isValid = ::OpenAPI::fromJsonValue(m_attempts_left, json[QString("attemptsLeft")]);
    m_attempts_left_isSet = !json[QString("attemptsLeft")].isNull() && m_attempts_left_isValid;
}

QString OAIEacVerificationResultDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEacVerificationResultDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_verification_result.isSet()) {
        obj.insert(QString("verificationResult"), ::OpenAPI::toJsonValue(m_verification_result));
    }
    if (m_attempts_left_isSet) {
        obj.insert(QString("attemptsLeft"), ::OpenAPI::toJsonValue(m_attempts_left));
    }
    return obj;
}

OAIEacVerificationStatusType OAIEacVerificationResultDTO::getVerificationResult() const {
    return m_verification_result;
}
void OAIEacVerificationResultDTO::setVerificationResult(const OAIEacVerificationStatusType &verification_result) {
    m_verification_result = verification_result;
    m_verification_result_isSet = true;
}

bool OAIEacVerificationResultDTO::is_verification_result_Set() const{
    return m_verification_result_isSet;
}

bool OAIEacVerificationResultDTO::is_verification_result_Valid() const{
    return m_verification_result_isValid;
}

qint32 OAIEacVerificationResultDTO::getAttemptsLeft() const {
    return m_attempts_left;
}
void OAIEacVerificationResultDTO::setAttemptsLeft(const qint32 &attempts_left) {
    m_attempts_left = attempts_left;
    m_attempts_left_isSet = true;
}

bool OAIEacVerificationResultDTO::is_attempts_left_Set() const{
    return m_attempts_left_isSet;
}

bool OAIEacVerificationResultDTO::is_attempts_left_Valid() const{
    return m_attempts_left_isValid;
}

bool OAIEacVerificationResultDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_verification_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempts_left_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEacVerificationResultDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
