/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnDecisionDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnDecisionDTO::OAIReturnDecisionDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnDecisionDTO::OAIReturnDecisionDTO() {
    this->initializeModel();
}

OAIReturnDecisionDTO::~OAIReturnDecisionDTO() {}

void OAIReturnDecisionDTO::initializeModel() {

    m_return_item_id_isSet = false;
    m_return_item_id_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_reason_type_isSet = false;
    m_reason_type_isValid = false;

    m_subreason_type_isSet = false;
    m_subreason_type_isValid = false;

    m_decision_type_isSet = false;
    m_decision_type_isValid = false;

    m_refund_amount_isSet = false;
    m_refund_amount_isValid = false;

    m_partner_compensation_isSet = false;
    m_partner_compensation_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;
}

void OAIReturnDecisionDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReturnDecisionDTO::fromJsonObject(QJsonObject json) {

    m_return_item_id_isValid = ::OpenAPI::fromJsonValue(m_return_item_id, json[QString("returnItemId")]);
    m_return_item_id_isSet = !json[QString("returnItemId")].isNull() && m_return_item_id_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_reason_type_isValid = ::OpenAPI::fromJsonValue(m_reason_type, json[QString("reasonType")]);
    m_reason_type_isSet = !json[QString("reasonType")].isNull() && m_reason_type_isValid;

    m_subreason_type_isValid = ::OpenAPI::fromJsonValue(m_subreason_type, json[QString("subreasonType")]);
    m_subreason_type_isSet = !json[QString("subreasonType")].isNull() && m_subreason_type_isValid;

    m_decision_type_isValid = ::OpenAPI::fromJsonValue(m_decision_type, json[QString("decisionType")]);
    m_decision_type_isSet = !json[QString("decisionType")].isNull() && m_decision_type_isValid;

    m_refund_amount_isValid = ::OpenAPI::fromJsonValue(m_refund_amount, json[QString("refundAmount")]);
    m_refund_amount_isSet = !json[QString("refundAmount")].isNull() && m_refund_amount_isValid;

    m_partner_compensation_isValid = ::OpenAPI::fromJsonValue(m_partner_compensation, json[QString("partnerCompensation")]);
    m_partner_compensation_isSet = !json[QString("partnerCompensation")].isNull() && m_partner_compensation_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;
}

QString OAIReturnDecisionDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReturnDecisionDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_return_item_id_isSet) {
        obj.insert(QString("returnItemId"), ::OpenAPI::toJsonValue(m_return_item_id));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_reason_type.isSet()) {
        obj.insert(QString("reasonType"), ::OpenAPI::toJsonValue(m_reason_type));
    }
    if (m_subreason_type.isSet()) {
        obj.insert(QString("subreasonType"), ::OpenAPI::toJsonValue(m_subreason_type));
    }
    if (m_decision_type.isSet()) {
        obj.insert(QString("decisionType"), ::OpenAPI::toJsonValue(m_decision_type));
    }
    if (m_refund_amount_isSet) {
        obj.insert(QString("refundAmount"), ::OpenAPI::toJsonValue(m_refund_amount));
    }
    if (m_partner_compensation_isSet) {
        obj.insert(QString("partnerCompensation"), ::OpenAPI::toJsonValue(m_partner_compensation));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    return obj;
}

qint64 OAIReturnDecisionDTO::getReturnItemId() const {
    return m_return_item_id;
}
void OAIReturnDecisionDTO::setReturnItemId(const qint64 &return_item_id) {
    m_return_item_id = return_item_id;
    m_return_item_id_isSet = true;
}

bool OAIReturnDecisionDTO::is_return_item_id_Set() const{
    return m_return_item_id_isSet;
}

bool OAIReturnDecisionDTO::is_return_item_id_Valid() const{
    return m_return_item_id_isValid;
}

qint32 OAIReturnDecisionDTO::getCount() const {
    return m_count;
}
void OAIReturnDecisionDTO::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIReturnDecisionDTO::is_count_Set() const{
    return m_count_isSet;
}

bool OAIReturnDecisionDTO::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIReturnDecisionDTO::getComment() const {
    return m_comment;
}
void OAIReturnDecisionDTO::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIReturnDecisionDTO::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIReturnDecisionDTO::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIReturnDecisionReasonType OAIReturnDecisionDTO::getReasonType() const {
    return m_reason_type;
}
void OAIReturnDecisionDTO::setReasonType(const OAIReturnDecisionReasonType &reason_type) {
    m_reason_type = reason_type;
    m_reason_type_isSet = true;
}

bool OAIReturnDecisionDTO::is_reason_type_Set() const{
    return m_reason_type_isSet;
}

bool OAIReturnDecisionDTO::is_reason_type_Valid() const{
    return m_reason_type_isValid;
}

OAIReturnDecisionSubreasonType OAIReturnDecisionDTO::getSubreasonType() const {
    return m_subreason_type;
}
void OAIReturnDecisionDTO::setSubreasonType(const OAIReturnDecisionSubreasonType &subreason_type) {
    m_subreason_type = subreason_type;
    m_subreason_type_isSet = true;
}

bool OAIReturnDecisionDTO::is_subreason_type_Set() const{
    return m_subreason_type_isSet;
}

bool OAIReturnDecisionDTO::is_subreason_type_Valid() const{
    return m_subreason_type_isValid;
}

OAIReturnDecisionType OAIReturnDecisionDTO::getDecisionType() const {
    return m_decision_type;
}
void OAIReturnDecisionDTO::setDecisionType(const OAIReturnDecisionType &decision_type) {
    m_decision_type = decision_type;
    m_decision_type_isSet = true;
}

bool OAIReturnDecisionDTO::is_decision_type_Set() const{
    return m_decision_type_isSet;
}

bool OAIReturnDecisionDTO::is_decision_type_Valid() const{
    return m_decision_type_isValid;
}

qint64 OAIReturnDecisionDTO::getRefundAmount() const {
    return m_refund_amount;
}
void OAIReturnDecisionDTO::setRefundAmount(const qint64 &refund_amount) {
    m_refund_amount = refund_amount;
    m_refund_amount_isSet = true;
}

bool OAIReturnDecisionDTO::is_refund_amount_Set() const{
    return m_refund_amount_isSet;
}

bool OAIReturnDecisionDTO::is_refund_amount_Valid() const{
    return m_refund_amount_isValid;
}

qint64 OAIReturnDecisionDTO::getPartnerCompensation() const {
    return m_partner_compensation;
}
void OAIReturnDecisionDTO::setPartnerCompensation(const qint64 &partner_compensation) {
    m_partner_compensation = partner_compensation;
    m_partner_compensation_isSet = true;
}

bool OAIReturnDecisionDTO::is_partner_compensation_Set() const{
    return m_partner_compensation_isSet;
}

bool OAIReturnDecisionDTO::is_partner_compensation_Valid() const{
    return m_partner_compensation_isValid;
}

QList<QString> OAIReturnDecisionDTO::getImages() const {
    return m_images;
}
void OAIReturnDecisionDTO::setImages(const QList<QString> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIReturnDecisionDTO::is_images_Set() const{
    return m_images_isSet;
}

bool OAIReturnDecisionDTO::is_images_Valid() const{
    return m_images_isValid;
}

bool OAIReturnDecisionDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_return_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subreason_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_compensation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReturnDecisionDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
