/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehousesDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehousesDTO::OAIWarehousesDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehousesDTO::OAIWarehousesDTO() {
    this->initializeModel();
}

OAIWarehousesDTO::~OAIWarehousesDTO() {}

void OAIWarehousesDTO::initializeModel() {

    m_warehouses_isSet = false;
    m_warehouses_isValid = false;

    m_warehouse_groups_isSet = false;
    m_warehouse_groups_isValid = false;
}

void OAIWarehousesDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehousesDTO::fromJsonObject(QJsonObject json) {

    m_warehouses_isValid = ::OpenAPI::fromJsonValue(m_warehouses, json[QString("warehouses")]);
    m_warehouses_isSet = !json[QString("warehouses")].isNull() && m_warehouses_isValid;

    m_warehouse_groups_isValid = ::OpenAPI::fromJsonValue(m_warehouse_groups, json[QString("warehouseGroups")]);
    m_warehouse_groups_isSet = !json[QString("warehouseGroups")].isNull() && m_warehouse_groups_isValid;
}

QString OAIWarehousesDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehousesDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_warehouses.size() > 0) {
        obj.insert(QString("warehouses"), ::OpenAPI::toJsonValue(m_warehouses));
    }
    if (m_warehouse_groups.size() > 0) {
        obj.insert(QString("warehouseGroups"), ::OpenAPI::toJsonValue(m_warehouse_groups));
    }
    return obj;
}

QList<OAIWarehouseDTO> OAIWarehousesDTO::getWarehouses() const {
    return m_warehouses;
}
void OAIWarehousesDTO::setWarehouses(const QList<OAIWarehouseDTO> &warehouses) {
    m_warehouses = warehouses;
    m_warehouses_isSet = true;
}

bool OAIWarehousesDTO::is_warehouses_Set() const{
    return m_warehouses_isSet;
}

bool OAIWarehousesDTO::is_warehouses_Valid() const{
    return m_warehouses_isValid;
}

QList<OAIWarehouseGroupDTO> OAIWarehousesDTO::getWarehouseGroups() const {
    return m_warehouse_groups;
}
void OAIWarehousesDTO::setWarehouseGroups(const QList<OAIWarehouseGroupDTO> &warehouse_groups) {
    m_warehouse_groups = warehouse_groups;
    m_warehouse_groups_isSet = true;
}

bool OAIWarehousesDTO::is_warehouse_groups_Set() const{
    return m_warehouse_groups_isSet;
}

bool OAIWarehousesDTO::is_warehouse_groups_Valid() const{
    return m_warehouse_groups_isValid;
}

bool OAIWarehousesDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_warehouses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehousesDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_warehouses_isValid && m_warehouse_groups_isValid && true;
}

} // namespace OpenAPI
