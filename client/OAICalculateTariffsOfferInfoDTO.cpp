/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateTariffsOfferInfoDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateTariffsOfferInfoDTO::OAICalculateTariffsOfferInfoDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateTariffsOfferInfoDTO::OAICalculateTariffsOfferInfoDTO() {
    this->initializeModel();
}

OAICalculateTariffsOfferInfoDTO::~OAICalculateTariffsOfferInfoDTO() {}

void OAICalculateTariffsOfferInfoDTO::initializeModel() {

    m_offer_isSet = false;
    m_offer_isValid = false;

    m_tariffs_isSet = false;
    m_tariffs_isValid = false;
}

void OAICalculateTariffsOfferInfoDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateTariffsOfferInfoDTO::fromJsonObject(QJsonObject json) {

    m_offer_isValid = ::OpenAPI::fromJsonValue(m_offer, json[QString("offer")]);
    m_offer_isSet = !json[QString("offer")].isNull() && m_offer_isValid;

    m_tariffs_isValid = ::OpenAPI::fromJsonValue(m_tariffs, json[QString("tariffs")]);
    m_tariffs_isSet = !json[QString("tariffs")].isNull() && m_tariffs_isValid;
}

QString OAICalculateTariffsOfferInfoDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateTariffsOfferInfoDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_offer.isSet()) {
        obj.insert(QString("offer"), ::OpenAPI::toJsonValue(m_offer));
    }
    if (m_tariffs.size() > 0) {
        obj.insert(QString("tariffs"), ::OpenAPI::toJsonValue(m_tariffs));
    }
    return obj;
}

OAICalculateTariffsOfferDTO OAICalculateTariffsOfferInfoDTO::getOffer() const {
    return m_offer;
}
void OAICalculateTariffsOfferInfoDTO::setOffer(const OAICalculateTariffsOfferDTO &offer) {
    m_offer = offer;
    m_offer_isSet = true;
}

bool OAICalculateTariffsOfferInfoDTO::is_offer_Set() const{
    return m_offer_isSet;
}

bool OAICalculateTariffsOfferInfoDTO::is_offer_Valid() const{
    return m_offer_isValid;
}

QList<OAICalculatedTariffDTO> OAICalculateTariffsOfferInfoDTO::getTariffs() const {
    return m_tariffs;
}
void OAICalculateTariffsOfferInfoDTO::setTariffs(const QList<OAICalculatedTariffDTO> &tariffs) {
    m_tariffs = tariffs;
    m_tariffs_isSet = true;
}

bool OAICalculateTariffsOfferInfoDTO::is_tariffs_Set() const{
    return m_tariffs_isSet;
}

bool OAICalculateTariffsOfferInfoDTO::is_tariffs_Valid() const{
    return m_tariffs_isValid;
}

bool OAICalculateTariffsOfferInfoDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tariffs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateTariffsOfferInfoDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_offer_isValid && m_tariffs_isValid && true;
}

} // namespace OpenAPI
