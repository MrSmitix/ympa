/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptOrderCancellationRequest.h"
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetOrderResponse.h"
#include "OAIGetOrdersResponse.h"
#include "OAIOrderBuyerType.h"
#include "OAIOrderDeliveryDispatchType.h"
#include "OAIOrderStatusType.h"
#include "OAIOrderSubstatusType.h"
#include "OAIProvideOrderDigitalCodesRequest.h"
#include "OAIProvideOrderItemIdentifiersRequest.h"
#include "OAIProvideOrderItemIdentifiersResponse.h"
#include "OAISetOrderBoxLayoutRequest.h"
#include "OAISetOrderBoxLayoutResponse.h"
#include "OAISetOrderShipmentBoxesRequest.h"
#include "OAISetOrderShipmentBoxesResponse.h"
#include "OAIUpdateOrderItemRequest.h"
#include "OAIUpdateOrderStatusRequest.h"
#include "OAIUpdateOrderStatusResponse.h"
#include "OAIUpdateOrderStatusesRequest.h"
#include "OAIUpdateOrderStatusesResponse.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_accept_order_cancellation_request OAIAcceptOrderCancellationRequest [required]
    */
    void acceptOrderCancellation(const qint64 &campaign_id, const qint64 &order_id, const OAIAcceptOrderCancellationRequest &oai_accept_order_cancellation_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    */
    void getOrder(const qint64 &campaign_id, const qint64 &order_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_ids QList<qint64> [optional]
    * @param[in]  status QSet<OAIOrderStatusType> [optional]
    * @param[in]  substatus QSet<OAIOrderSubstatusType> [optional]
    * @param[in]  from_date QDate [optional]
    * @param[in]  to_date QDate [optional]
    * @param[in]  supplier_shipment_date_from QDate [optional]
    * @param[in]  supplier_shipment_date_to QDate [optional]
    * @param[in]  updated_at_from QDateTime [optional]
    * @param[in]  updated_at_to QDateTime [optional]
    * @param[in]  dispatch_type OAIOrderDeliveryDispatchType [optional]
    * @param[in]  fake bool [optional]
    * @param[in]  has_cis bool [optional]
    * @param[in]  only_waiting_for_cancellation_approve bool [optional]
    * @param[in]  only_estimated_delivery bool [optional]
    * @param[in]  buyer_type OAIOrderBuyerType [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getOrders(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QList<qint64>> &order_ids = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<QSet<OAIOrderStatusType>> &status = ::OpenAPI::OptionalParam<QSet<OAIOrderStatusType>>(), const ::OpenAPI::OptionalParam<QSet<OAIOrderSubstatusType>> &substatus = ::OpenAPI::OptionalParam<QSet<OAIOrderSubstatusType>>(), const ::OpenAPI::OptionalParam<QDate> &from_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &to_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &supplier_shipment_date_from = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &supplier_shipment_date_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIOrderDeliveryDispatchType> &dispatch_type = ::OpenAPI::OptionalParam<OAIOrderDeliveryDispatchType>(), const ::OpenAPI::OptionalParam<bool> &fake = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &has_cis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &only_waiting_for_cancellation_approve = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &only_estimated_delivery = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIOrderBuyerType> &buyer_type = ::OpenAPI::OptionalParam<OAIOrderBuyerType>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_provide_order_digital_codes_request OAIProvideOrderDigitalCodesRequest [required]
    */
    void provideOrderDigitalCodes(const qint64 &campaign_id, const qint64 &order_id, const OAIProvideOrderDigitalCodesRequest &oai_provide_order_digital_codes_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_provide_order_item_identifiers_request OAIProvideOrderItemIdentifiersRequest [required]
    */
    void provideOrderItemIdentifiers(const qint64 &campaign_id, const qint64 &order_id, const OAIProvideOrderItemIdentifiersRequest &oai_provide_order_item_identifiers_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_set_order_box_layout_request OAISetOrderBoxLayoutRequest [required]
    */
    void setOrderBoxLayout(const qint64 &campaign_id, const qint64 &order_id, const OAISetOrderBoxLayoutRequest &oai_set_order_box_layout_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    * @param[in]  oai_set_order_shipment_boxes_request OAISetOrderShipmentBoxesRequest [required]
    */
    void setOrderShipmentBoxes(const qint64 &campaign_id, const qint64 &order_id, const qint64 &shipment_id, const OAISetOrderShipmentBoxesRequest &oai_set_order_shipment_boxes_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_update_order_item_request OAIUpdateOrderItemRequest [required]
    */
    void updateOrderItems(const qint64 &campaign_id, const qint64 &order_id, const OAIUpdateOrderItemRequest &oai_update_order_item_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_update_order_status_request OAIUpdateOrderStatusRequest [required]
    */
    void updateOrderStatus(const qint64 &campaign_id, const qint64 &order_id, const OAIUpdateOrderStatusRequest &oai_update_order_status_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_update_order_statuses_request OAIUpdateOrderStatusesRequest [required]
    */
    void updateOrderStatuses(const qint64 &campaign_id, const OAIUpdateOrderStatusesRequest &oai_update_order_statuses_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acceptOrderCancellationCallback(OAIHttpRequestWorker *worker);
    void getOrderCallback(OAIHttpRequestWorker *worker);
    void getOrdersCallback(OAIHttpRequestWorker *worker);
    void provideOrderDigitalCodesCallback(OAIHttpRequestWorker *worker);
    void provideOrderItemIdentifiersCallback(OAIHttpRequestWorker *worker);
    void setOrderBoxLayoutCallback(OAIHttpRequestWorker *worker);
    void setOrderShipmentBoxesCallback(OAIHttpRequestWorker *worker);
    void updateOrderItemsCallback(OAIHttpRequestWorker *worker);
    void updateOrderStatusCallback(OAIHttpRequestWorker *worker);
    void updateOrderStatusesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acceptOrderCancellationSignal(OAIEmptyApiResponse summary);
    void getOrderSignal(OAIGetOrderResponse summary);
    void getOrdersSignal(OAIGetOrdersResponse summary);
    void provideOrderDigitalCodesSignal(OAIEmptyApiResponse summary);
    void provideOrderItemIdentifiersSignal(OAIProvideOrderItemIdentifiersResponse summary);
    void setOrderBoxLayoutSignal(OAISetOrderBoxLayoutResponse summary);
    void setOrderShipmentBoxesSignal(OAISetOrderShipmentBoxesResponse summary);
    void updateOrderItemsSignal();
    void updateOrderStatusSignal(OAIUpdateOrderStatusResponse summary);
    void updateOrderStatusesSignal(OAIUpdateOrderStatusesResponse summary);


    void acceptOrderCancellationSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void getOrderSignalFull(OAIHttpRequestWorker *worker, OAIGetOrderResponse summary);
    void getOrdersSignalFull(OAIHttpRequestWorker *worker, OAIGetOrdersResponse summary);
    void provideOrderDigitalCodesSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void provideOrderItemIdentifiersSignalFull(OAIHttpRequestWorker *worker, OAIProvideOrderItemIdentifiersResponse summary);
    void setOrderBoxLayoutSignalFull(OAIHttpRequestWorker *worker, OAISetOrderBoxLayoutResponse summary);
    void setOrderShipmentBoxesSignalFull(OAIHttpRequestWorker *worker, OAISetOrderShipmentBoxesResponse summary);
    void updateOrderItemsSignalFull(OAIHttpRequestWorker *worker);
    void updateOrderStatusSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOrderStatusResponse summary);
    void updateOrderStatusesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOrderStatusesResponse summary);

    Q_DECL_DEPRECATED_X("Use acceptOrderCancellationSignalError() instead")
    void acceptOrderCancellationSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptOrderCancellationSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalError() instead")
    void getOrderSignalE(OAIGetOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalError(OAIGetOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersSignalError() instead")
    void getOrdersSignalE(OAIGetOrdersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersSignalError(OAIGetOrdersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provideOrderDigitalCodesSignalError() instead")
    void provideOrderDigitalCodesSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void provideOrderDigitalCodesSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provideOrderItemIdentifiersSignalError() instead")
    void provideOrderItemIdentifiersSignalE(OAIProvideOrderItemIdentifiersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void provideOrderItemIdentifiersSignalError(OAIProvideOrderItemIdentifiersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderBoxLayoutSignalError() instead")
    void setOrderBoxLayoutSignalE(OAISetOrderBoxLayoutResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderBoxLayoutSignalError(OAISetOrderBoxLayoutResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderShipmentBoxesSignalError() instead")
    void setOrderShipmentBoxesSignalE(OAISetOrderShipmentBoxesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderShipmentBoxesSignalError(OAISetOrderShipmentBoxesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderItemsSignalError() instead")
    void updateOrderItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderStatusSignalError() instead")
    void updateOrderStatusSignalE(OAIUpdateOrderStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderStatusSignalError(OAIUpdateOrderStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderStatusesSignalError() instead")
    void updateOrderStatusesSignalE(OAIUpdateOrderStatusesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderStatusesSignalError(OAIUpdateOrderStatusesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acceptOrderCancellationSignalErrorFull() instead")
    void acceptOrderCancellationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptOrderCancellationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalErrorFull() instead")
    void getOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersSignalErrorFull() instead")
    void getOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provideOrderDigitalCodesSignalErrorFull() instead")
    void provideOrderDigitalCodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provideOrderDigitalCodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provideOrderItemIdentifiersSignalErrorFull() instead")
    void provideOrderItemIdentifiersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provideOrderItemIdentifiersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderBoxLayoutSignalErrorFull() instead")
    void setOrderBoxLayoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderBoxLayoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderShipmentBoxesSignalErrorFull() instead")
    void setOrderShipmentBoxesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderShipmentBoxesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderItemsSignalErrorFull() instead")
    void updateOrderItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderStatusSignalErrorFull() instead")
    void updateOrderStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderStatusesSignalErrorFull() instead")
    void updateOrderStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
