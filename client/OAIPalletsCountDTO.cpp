/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPalletsCountDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPalletsCountDTO::OAIPalletsCountDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPalletsCountDTO::OAIPalletsCountDTO() {
    this->initializeModel();
}

OAIPalletsCountDTO::~OAIPalletsCountDTO() {}

void OAIPalletsCountDTO::initializeModel() {

    m_planned_isSet = false;
    m_planned_isValid = false;

    m_fact_isSet = false;
    m_fact_isValid = false;
}

void OAIPalletsCountDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPalletsCountDTO::fromJsonObject(QJsonObject json) {

    m_planned_isValid = ::OpenAPI::fromJsonValue(m_planned, json[QString("planned")]);
    m_planned_isSet = !json[QString("planned")].isNull() && m_planned_isValid;

    m_fact_isValid = ::OpenAPI::fromJsonValue(m_fact, json[QString("fact")]);
    m_fact_isSet = !json[QString("fact")].isNull() && m_fact_isValid;
}

QString OAIPalletsCountDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPalletsCountDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_planned_isSet) {
        obj.insert(QString("planned"), ::OpenAPI::toJsonValue(m_planned));
    }
    if (m_fact_isSet) {
        obj.insert(QString("fact"), ::OpenAPI::toJsonValue(m_fact));
    }
    return obj;
}

qint32 OAIPalletsCountDTO::getPlanned() const {
    return m_planned;
}
void OAIPalletsCountDTO::setPlanned(const qint32 &planned) {
    m_planned = planned;
    m_planned_isSet = true;
}

bool OAIPalletsCountDTO::is_planned_Set() const{
    return m_planned_isSet;
}

bool OAIPalletsCountDTO::is_planned_Valid() const{
    return m_planned_isValid;
}

qint32 OAIPalletsCountDTO::getFact() const {
    return m_fact;
}
void OAIPalletsCountDTO::setFact(const qint32 &fact) {
    m_fact = fact;
    m_fact_isSet = true;
}

bool OAIPalletsCountDTO::is_fact_Set() const{
    return m_fact_isSet;
}

bool OAIPalletsCountDTO::is_fact_Valid() const{
    return m_fact_isValid;
}

bool OAIPalletsCountDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_planned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPalletsCountDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
