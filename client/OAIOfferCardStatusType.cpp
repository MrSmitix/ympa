/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferCardStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferCardStatusType::OAIOfferCardStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferCardStatusType::OAIOfferCardStatusType() {
    this->initializeModel();
}

OAIOfferCardStatusType::~OAIOfferCardStatusType() {}

void OAIOfferCardStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOfferCardStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOfferCardStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("HAS_CARD_CAN_NOT_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardStatusType::HAS_CARD_CAN_NOT_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HAS_CARD_CAN_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardStatusType::HAS_CARD_CAN_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HAS_CARD_CAN_UPDATE_ERRORS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardStatusType::HAS_CARD_CAN_UPDATE_ERRORS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HAS_CARD_CAN_UPDATE_PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardStatusType::HAS_CARD_CAN_UPDATE_PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_CARD_NEED_CONTENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardStatusType::NO_CARD_NEED_CONTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_CARD_MARKET_WILL_CREATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardStatusType::NO_CARD_MARKET_WILL_CREATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_CARD_ERRORS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardStatusType::NO_CARD_ERRORS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_CARD_PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardStatusType::NO_CARD_PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_CARD_ADD_TO_CAMPAIGN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardStatusType::NO_CARD_ADD_TO_CAMPAIGN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOfferCardStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOfferCardStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOfferCardStatusType::HAS_CARD_CAN_NOT_UPDATE:
            val = "HAS_CARD_CAN_NOT_UPDATE";
            break;
        case eOAIOfferCardStatusType::HAS_CARD_CAN_UPDATE:
            val = "HAS_CARD_CAN_UPDATE";
            break;
        case eOAIOfferCardStatusType::HAS_CARD_CAN_UPDATE_ERRORS:
            val = "HAS_CARD_CAN_UPDATE_ERRORS";
            break;
        case eOAIOfferCardStatusType::HAS_CARD_CAN_UPDATE_PROCESSING:
            val = "HAS_CARD_CAN_UPDATE_PROCESSING";
            break;
        case eOAIOfferCardStatusType::NO_CARD_NEED_CONTENT:
            val = "NO_CARD_NEED_CONTENT";
            break;
        case eOAIOfferCardStatusType::NO_CARD_MARKET_WILL_CREATE:
            val = "NO_CARD_MARKET_WILL_CREATE";
            break;
        case eOAIOfferCardStatusType::NO_CARD_ERRORS:
            val = "NO_CARD_ERRORS";
            break;
        case eOAIOfferCardStatusType::NO_CARD_PROCESSING:
            val = "NO_CARD_PROCESSING";
            break;
        case eOAIOfferCardStatusType::NO_CARD_ADD_TO_CAMPAIGN:
            val = "NO_CARD_ADD_TO_CAMPAIGN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOfferCardStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOfferCardStatusType::eOAIOfferCardStatusType OAIOfferCardStatusType::getValue() const {
    return m_value;
}

void OAIOfferCardStatusType::setValue(const OAIOfferCardStatusType::eOAIOfferCardStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOfferCardStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOfferCardStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
