/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderDeliveryDatesDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderDeliveryDatesDTO::OAIOrderDeliveryDatesDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderDeliveryDatesDTO::OAIOrderDeliveryDatesDTO() {
    this->initializeModel();
}

OAIOrderDeliveryDatesDTO::~OAIOrderDeliveryDatesDTO() {}

void OAIOrderDeliveryDatesDTO::initializeModel() {

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_to_date_isSet = false;
    m_to_date_isValid = false;

    m_from_time_isSet = false;
    m_from_time_isValid = false;

    m_to_time_isSet = false;
    m_to_time_isValid = false;

    m_real_delivery_date_isSet = false;
    m_real_delivery_date_isValid = false;
}

void OAIOrderDeliveryDatesDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderDeliveryDatesDTO::fromJsonObject(QJsonObject json) {

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("fromDate")]);
    m_from_date_isSet = !json[QString("fromDate")].isNull() && m_from_date_isValid;

    m_to_date_isValid = ::OpenAPI::fromJsonValue(m_to_date, json[QString("toDate")]);
    m_to_date_isSet = !json[QString("toDate")].isNull() && m_to_date_isValid;

    m_from_time_isValid = ::OpenAPI::fromJsonValue(m_from_time, json[QString("fromTime")]);
    m_from_time_isSet = !json[QString("fromTime")].isNull() && m_from_time_isValid;

    m_to_time_isValid = ::OpenAPI::fromJsonValue(m_to_time, json[QString("toTime")]);
    m_to_time_isSet = !json[QString("toTime")].isNull() && m_to_time_isValid;

    m_real_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_real_delivery_date, json[QString("realDeliveryDate")]);
    m_real_delivery_date_isSet = !json[QString("realDeliveryDate")].isNull() && m_real_delivery_date_isValid;
}

QString OAIOrderDeliveryDatesDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderDeliveryDatesDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_from_date_isSet) {
        obj.insert(QString("fromDate"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_to_date_isSet) {
        obj.insert(QString("toDate"), ::OpenAPI::toJsonValue(m_to_date));
    }
    if (m_from_time_isSet) {
        obj.insert(QString("fromTime"), ::OpenAPI::toJsonValue(m_from_time));
    }
    if (m_to_time_isSet) {
        obj.insert(QString("toTime"), ::OpenAPI::toJsonValue(m_to_time));
    }
    if (m_real_delivery_date_isSet) {
        obj.insert(QString("realDeliveryDate"), ::OpenAPI::toJsonValue(m_real_delivery_date));
    }
    return obj;
}

QString OAIOrderDeliveryDatesDTO::getFromDate() const {
    return m_from_date;
}
void OAIOrderDeliveryDatesDTO::setFromDate(const QString &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAIOrderDeliveryDatesDTO::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAIOrderDeliveryDatesDTO::is_from_date_Valid() const{
    return m_from_date_isValid;
}

QString OAIOrderDeliveryDatesDTO::getToDate() const {
    return m_to_date;
}
void OAIOrderDeliveryDatesDTO::setToDate(const QString &to_date) {
    m_to_date = to_date;
    m_to_date_isSet = true;
}

bool OAIOrderDeliveryDatesDTO::is_to_date_Set() const{
    return m_to_date_isSet;
}

bool OAIOrderDeliveryDatesDTO::is_to_date_Valid() const{
    return m_to_date_isValid;
}

QString OAIOrderDeliveryDatesDTO::getFromTime() const {
    return m_from_time;
}
void OAIOrderDeliveryDatesDTO::setFromTime(const QString &from_time) {
    m_from_time = from_time;
    m_from_time_isSet = true;
}

bool OAIOrderDeliveryDatesDTO::is_from_time_Set() const{
    return m_from_time_isSet;
}

bool OAIOrderDeliveryDatesDTO::is_from_time_Valid() const{
    return m_from_time_isValid;
}

QString OAIOrderDeliveryDatesDTO::getToTime() const {
    return m_to_time;
}
void OAIOrderDeliveryDatesDTO::setToTime(const QString &to_time) {
    m_to_time = to_time;
    m_to_time_isSet = true;
}

bool OAIOrderDeliveryDatesDTO::is_to_time_Set() const{
    return m_to_time_isSet;
}

bool OAIOrderDeliveryDatesDTO::is_to_time_Valid() const{
    return m_to_time_isValid;
}

QString OAIOrderDeliveryDatesDTO::getRealDeliveryDate() const {
    return m_real_delivery_date;
}
void OAIOrderDeliveryDatesDTO::setRealDeliveryDate(const QString &real_delivery_date) {
    m_real_delivery_date = real_delivery_date;
    m_real_delivery_date_isSet = true;
}

bool OAIOrderDeliveryDatesDTO::is_real_delivery_date_Set() const{
    return m_real_delivery_date_isSet;
}

bool OAIOrderDeliveryDatesDTO::is_real_delivery_date_Valid() const{
    return m_real_delivery_date_isValid;
}

bool OAIOrderDeliveryDatesDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderDeliveryDatesDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
