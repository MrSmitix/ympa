/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferCardRecommendationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferCardRecommendationType::OAIOfferCardRecommendationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferCardRecommendationType::OAIOfferCardRecommendationType() {
    this->initializeModel();
}

OAIOfferCardRecommendationType::~OAIOfferCardRecommendationType() {}

void OAIOfferCardRecommendationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOfferCardRecommendationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOfferCardRecommendationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("HAS_VIDEO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::HAS_VIDEO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RECOGNIZED_VENDOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::RECOGNIZED_VENDOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::MAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADDITIONAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::ADDITIONAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISTINCTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::DISTINCTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FILTERABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::FILTERABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICTURE_COUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::PICTURE_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HAS_DESCRIPTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::HAS_DESCRIPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HAS_BARCODE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::HAS_BARCODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FIRST_PICTURE_SIZE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::FIRST_PICTURE_SIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TITLE_LENGTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::TITLE_LENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DESCRIPTION_LENGTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::DESCRIPTION_LENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AVERAGE_PICTURE_SIZE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::AVERAGE_PICTURE_SIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FIRST_VIDEO_SIZE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::FIRST_VIDEO_SIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FIRST_VIDEO_LENGTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::FIRST_VIDEO_LENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AVERAGE_VIDEO_SIZE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::AVERAGE_VIDEO_SIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VIDEO_COUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferCardRecommendationType::VIDEO_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOfferCardRecommendationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOfferCardRecommendationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOfferCardRecommendationType::HAS_VIDEO:
            val = "HAS_VIDEO";
            break;
        case eOAIOfferCardRecommendationType::RECOGNIZED_VENDOR:
            val = "RECOGNIZED_VENDOR";
            break;
        case eOAIOfferCardRecommendationType::MAIN:
            val = "MAIN";
            break;
        case eOAIOfferCardRecommendationType::ADDITIONAL:
            val = "ADDITIONAL";
            break;
        case eOAIOfferCardRecommendationType::DISTINCTIVE:
            val = "DISTINCTIVE";
            break;
        case eOAIOfferCardRecommendationType::FILTERABLE:
            val = "FILTERABLE";
            break;
        case eOAIOfferCardRecommendationType::PICTURE_COUNT:
            val = "PICTURE_COUNT";
            break;
        case eOAIOfferCardRecommendationType::HAS_DESCRIPTION:
            val = "HAS_DESCRIPTION";
            break;
        case eOAIOfferCardRecommendationType::HAS_BARCODE:
            val = "HAS_BARCODE";
            break;
        case eOAIOfferCardRecommendationType::FIRST_PICTURE_SIZE:
            val = "FIRST_PICTURE_SIZE";
            break;
        case eOAIOfferCardRecommendationType::TITLE_LENGTH:
            val = "TITLE_LENGTH";
            break;
        case eOAIOfferCardRecommendationType::DESCRIPTION_LENGTH:
            val = "DESCRIPTION_LENGTH";
            break;
        case eOAIOfferCardRecommendationType::AVERAGE_PICTURE_SIZE:
            val = "AVERAGE_PICTURE_SIZE";
            break;
        case eOAIOfferCardRecommendationType::FIRST_VIDEO_SIZE:
            val = "FIRST_VIDEO_SIZE";
            break;
        case eOAIOfferCardRecommendationType::FIRST_VIDEO_LENGTH:
            val = "FIRST_VIDEO_LENGTH";
            break;
        case eOAIOfferCardRecommendationType::AVERAGE_VIDEO_SIZE:
            val = "AVERAGE_VIDEO_SIZE";
            break;
        case eOAIOfferCardRecommendationType::VIDEO_COUNT:
            val = "VIDEO_COUNT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOfferCardRecommendationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOfferCardRecommendationType::eOAIOfferCardRecommendationType OAIOfferCardRecommendationType::getValue() const {
    return m_value;
}

void OAIOfferCardRecommendationType::setValue(const OAIOfferCardRecommendationType::eOAIOfferCardRecommendationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOfferCardRecommendationType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOfferCardRecommendationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
