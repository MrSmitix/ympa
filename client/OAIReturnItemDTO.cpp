/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnItemDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnItemDTO::OAIReturnItemDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnItemDTO::OAIReturnItemDTO() {
    this->initializeModel();
}

OAIReturnItemDTO::~OAIReturnItemDTO() {}

void OAIReturnItemDTO::initializeModel() {

    m_market_sku_isSet = false;
    m_market_sku_isValid = false;

    m_shop_sku_isSet = false;
    m_shop_sku_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_decisions_isSet = false;
    m_decisions_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OAIReturnItemDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReturnItemDTO::fromJsonObject(QJsonObject json) {

    m_market_sku_isValid = ::OpenAPI::fromJsonValue(m_market_sku, json[QString("marketSku")]);
    m_market_sku_isSet = !json[QString("marketSku")].isNull() && m_market_sku_isValid;

    m_shop_sku_isValid = ::OpenAPI::fromJsonValue(m_shop_sku, json[QString("shopSku")]);
    m_shop_sku_isSet = !json[QString("shopSku")].isNull() && m_shop_sku_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_decisions_isValid = ::OpenAPI::fromJsonValue(m_decisions, json[QString("decisions")]);
    m_decisions_isSet = !json[QString("decisions")].isNull() && m_decisions_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;
}

QString OAIReturnItemDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReturnItemDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_market_sku_isSet) {
        obj.insert(QString("marketSku"), ::OpenAPI::toJsonValue(m_market_sku));
    }
    if (m_shop_sku_isSet) {
        obj.insert(QString("shopSku"), ::OpenAPI::toJsonValue(m_shop_sku));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_decisions.size() > 0) {
        obj.insert(QString("decisions"), ::OpenAPI::toJsonValue(m_decisions));
    }
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    return obj;
}

qint64 OAIReturnItemDTO::getMarketSku() const {
    return m_market_sku;
}
void OAIReturnItemDTO::setMarketSku(const qint64 &market_sku) {
    m_market_sku = market_sku;
    m_market_sku_isSet = true;
}

bool OAIReturnItemDTO::is_market_sku_Set() const{
    return m_market_sku_isSet;
}

bool OAIReturnItemDTO::is_market_sku_Valid() const{
    return m_market_sku_isValid;
}

QString OAIReturnItemDTO::getShopSku() const {
    return m_shop_sku;
}
void OAIReturnItemDTO::setShopSku(const QString &shop_sku) {
    m_shop_sku = shop_sku;
    m_shop_sku_isSet = true;
}

bool OAIReturnItemDTO::is_shop_sku_Set() const{
    return m_shop_sku_isSet;
}

bool OAIReturnItemDTO::is_shop_sku_Valid() const{
    return m_shop_sku_isValid;
}

qint64 OAIReturnItemDTO::getCount() const {
    return m_count;
}
void OAIReturnItemDTO::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIReturnItemDTO::is_count_Set() const{
    return m_count_isSet;
}

bool OAIReturnItemDTO::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIReturnDecisionDTO> OAIReturnItemDTO::getDecisions() const {
    return m_decisions;
}
void OAIReturnItemDTO::setDecisions(const QList<OAIReturnDecisionDTO> &decisions) {
    m_decisions = decisions;
    m_decisions_isSet = true;
}

bool OAIReturnItemDTO::is_decisions_Set() const{
    return m_decisions_isSet;
}

bool OAIReturnItemDTO::is_decisions_Valid() const{
    return m_decisions_isValid;
}

QList<OAIReturnInstanceDTO> OAIReturnItemDTO::getInstances() const {
    return m_instances;
}
void OAIReturnItemDTO::setInstances(const QList<OAIReturnInstanceDTO> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIReturnItemDTO::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIReturnItemDTO::is_instances_Valid() const{
    return m_instances_isValid;
}

QList<OAITrackDTO> OAIReturnItemDTO::getTracks() const {
    return m_tracks;
}
void OAIReturnItemDTO::setTracks(const QList<OAITrackDTO> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIReturnItemDTO::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIReturnItemDTO::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OAIReturnItemDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_market_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decisions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReturnItemDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_shop_sku_isValid && m_count_isValid && true;
}

} // namespace OpenAPI
