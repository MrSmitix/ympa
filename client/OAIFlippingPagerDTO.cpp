/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlippingPagerDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlippingPagerDTO::OAIFlippingPagerDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlippingPagerDTO::OAIFlippingPagerDTO() {
    this->initializeModel();
}

OAIFlippingPagerDTO::~OAIFlippingPagerDTO() {}

void OAIFlippingPagerDTO::initializeModel() {

    m_total_isSet = false;
    m_total_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_pages_count_isSet = false;
    m_pages_count_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIFlippingPagerDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlippingPagerDTO::fromJsonObject(QJsonObject json) {

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_pages_count_isValid = ::OpenAPI::fromJsonValue(m_pages_count, json[QString("pagesCount")]);
    m_pages_count_isSet = !json[QString("pagesCount")].isNull() && m_pages_count_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;
}

QString OAIFlippingPagerDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlippingPagerDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_current_page_isSet) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_pages_count_isSet) {
        obj.insert(QString("pagesCount"), ::OpenAPI::toJsonValue(m_pages_count));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

qint32 OAIFlippingPagerDTO::getTotal() const {
    return m_total;
}
void OAIFlippingPagerDTO::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIFlippingPagerDTO::is_total_Set() const{
    return m_total_isSet;
}

bool OAIFlippingPagerDTO::is_total_Valid() const{
    return m_total_isValid;
}

qint32 OAIFlippingPagerDTO::getFrom() const {
    return m_from;
}
void OAIFlippingPagerDTO::setFrom(const qint32 &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIFlippingPagerDTO::is_from_Set() const{
    return m_from_isSet;
}

bool OAIFlippingPagerDTO::is_from_Valid() const{
    return m_from_isValid;
}

qint32 OAIFlippingPagerDTO::getTo() const {
    return m_to;
}
void OAIFlippingPagerDTO::setTo(const qint32 &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIFlippingPagerDTO::is_to_Set() const{
    return m_to_isSet;
}

bool OAIFlippingPagerDTO::is_to_Valid() const{
    return m_to_isValid;
}

qint32 OAIFlippingPagerDTO::getCurrentPage() const {
    return m_current_page;
}
void OAIFlippingPagerDTO::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIFlippingPagerDTO::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIFlippingPagerDTO::is_current_page_Valid() const{
    return m_current_page_isValid;
}

qint32 OAIFlippingPagerDTO::getPagesCount() const {
    return m_pages_count;
}
void OAIFlippingPagerDTO::setPagesCount(const qint32 &pages_count) {
    m_pages_count = pages_count;
    m_pages_count_isSet = true;
}

bool OAIFlippingPagerDTO::is_pages_count_Set() const{
    return m_pages_count_isSet;
}

bool OAIFlippingPagerDTO::is_pages_count_Valid() const{
    return m_pages_count_isValid;
}

qint32 OAIFlippingPagerDTO::getPageSize() const {
    return m_page_size;
}
void OAIFlippingPagerDTO::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIFlippingPagerDTO::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIFlippingPagerDTO::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIFlippingPagerDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlippingPagerDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
