/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrderDeliveryApi_H
#define OAI_OAIOrderDeliveryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetOrderBuyerInfoResponse.h"
#include "OAISetOrderDeliveryDateRequest.h"
#include "OAISetOrderDeliveryTrackCodeRequest.h"
#include "OAIUpdateOrderStorageLimitRequest.h"
#include "OAIVerifyOrderEacRequest.h"
#include "OAIVerifyOrderEacResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrderDeliveryApi : public QObject {
    Q_OBJECT

public:
    OAIOrderDeliveryApi(const int timeOut = 0);
    ~OAIOrderDeliveryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    */
    void getOrderBuyerInfo(const qint64 &campaign_id, const qint64 &order_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_set_order_delivery_date_request OAISetOrderDeliveryDateRequest [required]
    */
    void setOrderDeliveryDate(const qint64 &campaign_id, const qint64 &order_id, const OAISetOrderDeliveryDateRequest &oai_set_order_delivery_date_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_set_order_delivery_track_code_request OAISetOrderDeliveryTrackCodeRequest [required]
    */
    void setOrderDeliveryTrackCode(const qint64 &campaign_id, const qint64 &order_id, const OAISetOrderDeliveryTrackCodeRequest &oai_set_order_delivery_track_code_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_update_order_storage_limit_request OAIUpdateOrderStorageLimitRequest [required]
    */
    void updateOrderStorageLimit(const qint64 &campaign_id, const qint64 &order_id, const OAIUpdateOrderStorageLimitRequest &oai_update_order_storage_limit_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  oai_verify_order_eac_request OAIVerifyOrderEacRequest [required]
    */
    void verifyOrderEac(const qint64 &campaign_id, const qint64 &order_id, const OAIVerifyOrderEacRequest &oai_verify_order_eac_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getOrderBuyerInfoCallback(OAIHttpRequestWorker *worker);
    void setOrderDeliveryDateCallback(OAIHttpRequestWorker *worker);
    void setOrderDeliveryTrackCodeCallback(OAIHttpRequestWorker *worker);
    void updateOrderStorageLimitCallback(OAIHttpRequestWorker *worker);
    void verifyOrderEacCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getOrderBuyerInfoSignal(OAIGetOrderBuyerInfoResponse summary);
    void setOrderDeliveryDateSignal(OAIEmptyApiResponse summary);
    void setOrderDeliveryTrackCodeSignal(OAIEmptyApiResponse summary);
    void updateOrderStorageLimitSignal(OAIEmptyApiResponse summary);
    void verifyOrderEacSignal(OAIVerifyOrderEacResponse summary);


    void getOrderBuyerInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetOrderBuyerInfoResponse summary);
    void setOrderDeliveryDateSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void setOrderDeliveryTrackCodeSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void updateOrderStorageLimitSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void verifyOrderEacSignalFull(OAIHttpRequestWorker *worker, OAIVerifyOrderEacResponse summary);

    Q_DECL_DEPRECATED_X("Use getOrderBuyerInfoSignalError() instead")
    void getOrderBuyerInfoSignalE(OAIGetOrderBuyerInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderBuyerInfoSignalError(OAIGetOrderBuyerInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderDeliveryDateSignalError() instead")
    void setOrderDeliveryDateSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderDeliveryDateSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderDeliveryTrackCodeSignalError() instead")
    void setOrderDeliveryTrackCodeSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderDeliveryTrackCodeSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderStorageLimitSignalError() instead")
    void updateOrderStorageLimitSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderStorageLimitSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyOrderEacSignalError() instead")
    void verifyOrderEacSignalE(OAIVerifyOrderEacResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyOrderEacSignalError(OAIVerifyOrderEacResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getOrderBuyerInfoSignalErrorFull() instead")
    void getOrderBuyerInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderBuyerInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderDeliveryDateSignalErrorFull() instead")
    void setOrderDeliveryDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderDeliveryDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrderDeliveryTrackCodeSignalErrorFull() instead")
    void setOrderDeliveryTrackCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrderDeliveryTrackCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderStorageLimitSignalErrorFull() instead")
    void updateOrderStorageLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderStorageLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyOrderEacSignalErrorFull() instead")
    void verifyOrderEacSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyOrderEacSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
