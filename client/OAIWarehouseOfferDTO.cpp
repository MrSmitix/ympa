/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseOfferDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseOfferDTO::OAIWarehouseOfferDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseOfferDTO::OAIWarehouseOfferDTO() {
    this->initializeModel();
}

OAIWarehouseOfferDTO::~OAIWarehouseOfferDTO() {}

void OAIWarehouseOfferDTO::initializeModel() {

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_turnover_summary_isSet = false;
    m_turnover_summary_isValid = false;

    m_stocks_isSet = false;
    m_stocks_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIWarehouseOfferDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseOfferDTO::fromJsonObject(QJsonObject json) {

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_turnover_summary_isValid = ::OpenAPI::fromJsonValue(m_turnover_summary, json[QString("turnoverSummary")]);
    m_turnover_summary_isSet = !json[QString("turnoverSummary")].isNull() && m_turnover_summary_isValid;

    m_stocks_isValid = ::OpenAPI::fromJsonValue(m_stocks, json[QString("stocks")]);
    m_stocks_isSet = !json[QString("stocks")].isNull() && m_stocks_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIWarehouseOfferDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseOfferDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_turnover_summary.isSet()) {
        obj.insert(QString("turnoverSummary"), ::OpenAPI::toJsonValue(m_turnover_summary));
    }
    if (m_stocks.size() > 0) {
        obj.insert(QString("stocks"), ::OpenAPI::toJsonValue(m_stocks));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIWarehouseOfferDTO::getOfferId() const {
    return m_offer_id;
}
void OAIWarehouseOfferDTO::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIWarehouseOfferDTO::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIWarehouseOfferDTO::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

OAITurnoverDTO OAIWarehouseOfferDTO::getTurnoverSummary() const {
    return m_turnover_summary;
}
void OAIWarehouseOfferDTO::setTurnoverSummary(const OAITurnoverDTO &turnover_summary) {
    m_turnover_summary = turnover_summary;
    m_turnover_summary_isSet = true;
}

bool OAIWarehouseOfferDTO::is_turnover_summary_Set() const{
    return m_turnover_summary_isSet;
}

bool OAIWarehouseOfferDTO::is_turnover_summary_Valid() const{
    return m_turnover_summary_isValid;
}

QList<OAIWarehouseStockDTO> OAIWarehouseOfferDTO::getStocks() const {
    return m_stocks;
}
void OAIWarehouseOfferDTO::setStocks(const QList<OAIWarehouseStockDTO> &stocks) {
    m_stocks = stocks;
    m_stocks_isSet = true;
}

bool OAIWarehouseOfferDTO::is_stocks_Set() const{
    return m_stocks_isSet;
}

bool OAIWarehouseOfferDTO::is_stocks_Valid() const{
    return m_stocks_isValid;
}

QDateTime OAIWarehouseOfferDTO::getUpdatedAt() const {
    return m_updated_at;
}
void OAIWarehouseOfferDTO::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIWarehouseOfferDTO::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIWarehouseOfferDTO::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIWarehouseOfferDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turnover_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stocks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseOfferDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_offer_id_isValid && m_stocks_isValid && true;
}

} // namespace OpenAPI
