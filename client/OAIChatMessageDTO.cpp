/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChatMessageDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChatMessageDTO::OAIChatMessageDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChatMessageDTO::OAIChatMessageDTO() {
    this->initializeModel();
}

OAIChatMessageDTO::~OAIChatMessageDTO() {}

void OAIChatMessageDTO::initializeModel() {

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIChatMessageDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChatMessageDTO::fromJsonObject(QJsonObject json) {

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIChatMessageDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChatMessageDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_sender.isSet()) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_payload.size() > 0) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

qint64 OAIChatMessageDTO::getMessageId() const {
    return m_message_id;
}
void OAIChatMessageDTO::setMessageId(const qint64 &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIChatMessageDTO::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIChatMessageDTO::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QDateTime OAIChatMessageDTO::getCreatedAt() const {
    return m_created_at;
}
void OAIChatMessageDTO::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIChatMessageDTO::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIChatMessageDTO::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIChatMessageSenderType OAIChatMessageDTO::getSender() const {
    return m_sender;
}
void OAIChatMessageDTO::setSender(const OAIChatMessageSenderType &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIChatMessageDTO::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIChatMessageDTO::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIChatMessageDTO::getMessage() const {
    return m_message;
}
void OAIChatMessageDTO::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIChatMessageDTO::is_message_Set() const{
    return m_message_isSet;
}

bool OAIChatMessageDTO::is_message_Valid() const{
    return m_message_isValid;
}

QList<OAIChatMessagePayloadDTO> OAIChatMessageDTO::getPayload() const {
    return m_payload;
}
void OAIChatMessageDTO::setPayload(const QList<OAIChatMessagePayloadDTO> &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIChatMessageDTO::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIChatMessageDTO::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIChatMessageDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChatMessageDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_id_isValid && m_created_at_isValid && m_sender_isValid && true;
}

} // namespace OpenAPI
