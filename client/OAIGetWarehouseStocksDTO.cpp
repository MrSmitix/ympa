/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWarehouseStocksDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWarehouseStocksDTO::OAIGetWarehouseStocksDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWarehouseStocksDTO::OAIGetWarehouseStocksDTO() {
    this->initializeModel();
}

OAIGetWarehouseStocksDTO::~OAIGetWarehouseStocksDTO() {}

void OAIGetWarehouseStocksDTO::initializeModel() {

    m_paging_isSet = false;
    m_paging_isValid = false;

    m_warehouses_isSet = false;
    m_warehouses_isValid = false;
}

void OAIGetWarehouseStocksDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWarehouseStocksDTO::fromJsonObject(QJsonObject json) {

    m_paging_isValid = ::OpenAPI::fromJsonValue(m_paging, json[QString("paging")]);
    m_paging_isSet = !json[QString("paging")].isNull() && m_paging_isValid;

    m_warehouses_isValid = ::OpenAPI::fromJsonValue(m_warehouses, json[QString("warehouses")]);
    m_warehouses_isSet = !json[QString("warehouses")].isNull() && m_warehouses_isValid;
}

QString OAIGetWarehouseStocksDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWarehouseStocksDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_paging.isSet()) {
        obj.insert(QString("paging"), ::OpenAPI::toJsonValue(m_paging));
    }
    if (m_warehouses.size() > 0) {
        obj.insert(QString("warehouses"), ::OpenAPI::toJsonValue(m_warehouses));
    }
    return obj;
}

OAIScrollingPagerDTO OAIGetWarehouseStocksDTO::getPaging() const {
    return m_paging;
}
void OAIGetWarehouseStocksDTO::setPaging(const OAIScrollingPagerDTO &paging) {
    m_paging = paging;
    m_paging_isSet = true;
}

bool OAIGetWarehouseStocksDTO::is_paging_Set() const{
    return m_paging_isSet;
}

bool OAIGetWarehouseStocksDTO::is_paging_Valid() const{
    return m_paging_isValid;
}

QList<OAIWarehouseOffersDTO> OAIGetWarehouseStocksDTO::getWarehouses() const {
    return m_warehouses;
}
void OAIGetWarehouseStocksDTO::setWarehouses(const QList<OAIWarehouseOffersDTO> &warehouses) {
    m_warehouses = warehouses;
    m_warehouses_isSet = true;
}

bool OAIGetWarehouseStocksDTO::is_warehouses_Set() const{
    return m_warehouses_isSet;
}

bool OAIGetWarehouseStocksDTO::is_warehouses_Valid() const{
    return m_warehouses_isValid;
}

bool OAIGetWarehouseStocksDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_paging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWarehouseStocksDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_warehouses_isValid && true;
}

} // namespace OpenAPI
