/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGoodsFeedbackApi_H
#define OAI_OAIGoodsFeedbackApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIDeleteGoodsFeedbackCommentRequest.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetGoodsFeedbackCommentsRequest.h"
#include "OAIGetGoodsFeedbackCommentsResponse.h"
#include "OAIGetGoodsFeedbackRequest.h"
#include "OAIGetGoodsFeedbackResponse.h"
#include "OAISkipGoodsFeedbackReactionRequest.h"
#include "OAIUpdateGoodsFeedbackCommentRequest.h"
#include "OAIUpdateGoodsFeedbackCommentResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGoodsFeedbackApi : public QObject {
    Q_OBJECT

public:
    OAIGoodsFeedbackApi(const int timeOut = 0);
    ~OAIGoodsFeedbackApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_delete_goods_feedback_comment_request OAIDeleteGoodsFeedbackCommentRequest [required]
    */
    void deleteGoodsFeedbackComment(const qint64 &business_id, const OAIDeleteGoodsFeedbackCommentRequest &oai_delete_goods_feedback_comment_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_goods_feedback_comments_request OAIGetGoodsFeedbackCommentsRequest [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void getGoodsFeedbackComments(const qint64 &business_id, const OAIGetGoodsFeedbackCommentsRequest &oai_get_goods_feedback_comments_request, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  oai_get_goods_feedback_request OAIGetGoodsFeedbackRequest [optional]
    */
    void getGoodsFeedbacks(const qint64 &business_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGetGoodsFeedbackRequest> &oai_get_goods_feedback_request = ::OpenAPI::OptionalParam<OAIGetGoodsFeedbackRequest>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_skip_goods_feedback_reaction_request OAISkipGoodsFeedbackReactionRequest [required]
    */
    void skipGoodsFeedbacksReaction(const qint64 &business_id, const OAISkipGoodsFeedbackReactionRequest &oai_skip_goods_feedback_reaction_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_update_goods_feedback_comment_request OAIUpdateGoodsFeedbackCommentRequest [required]
    */
    void updateGoodsFeedbackComment(const qint64 &business_id, const OAIUpdateGoodsFeedbackCommentRequest &oai_update_goods_feedback_comment_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteGoodsFeedbackCommentCallback(OAIHttpRequestWorker *worker);
    void getGoodsFeedbackCommentsCallback(OAIHttpRequestWorker *worker);
    void getGoodsFeedbacksCallback(OAIHttpRequestWorker *worker);
    void skipGoodsFeedbacksReactionCallback(OAIHttpRequestWorker *worker);
    void updateGoodsFeedbackCommentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteGoodsFeedbackCommentSignal(OAIEmptyApiResponse summary);
    void getGoodsFeedbackCommentsSignal(OAIGetGoodsFeedbackCommentsResponse summary);
    void getGoodsFeedbacksSignal(OAIGetGoodsFeedbackResponse summary);
    void skipGoodsFeedbacksReactionSignal(OAIEmptyApiResponse summary);
    void updateGoodsFeedbackCommentSignal(OAIUpdateGoodsFeedbackCommentResponse summary);


    void deleteGoodsFeedbackCommentSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void getGoodsFeedbackCommentsSignalFull(OAIHttpRequestWorker *worker, OAIGetGoodsFeedbackCommentsResponse summary);
    void getGoodsFeedbacksSignalFull(OAIHttpRequestWorker *worker, OAIGetGoodsFeedbackResponse summary);
    void skipGoodsFeedbacksReactionSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void updateGoodsFeedbackCommentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateGoodsFeedbackCommentResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteGoodsFeedbackCommentSignalError() instead")
    void deleteGoodsFeedbackCommentSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGoodsFeedbackCommentSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoodsFeedbackCommentsSignalError() instead")
    void getGoodsFeedbackCommentsSignalE(OAIGetGoodsFeedbackCommentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoodsFeedbackCommentsSignalError(OAIGetGoodsFeedbackCommentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoodsFeedbacksSignalError() instead")
    void getGoodsFeedbacksSignalE(OAIGetGoodsFeedbackResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoodsFeedbacksSignalError(OAIGetGoodsFeedbackResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skipGoodsFeedbacksReactionSignalError() instead")
    void skipGoodsFeedbacksReactionSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void skipGoodsFeedbacksReactionSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGoodsFeedbackCommentSignalError() instead")
    void updateGoodsFeedbackCommentSignalE(OAIUpdateGoodsFeedbackCommentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGoodsFeedbackCommentSignalError(OAIUpdateGoodsFeedbackCommentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteGoodsFeedbackCommentSignalErrorFull() instead")
    void deleteGoodsFeedbackCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGoodsFeedbackCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoodsFeedbackCommentsSignalErrorFull() instead")
    void getGoodsFeedbackCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoodsFeedbackCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoodsFeedbacksSignalErrorFull() instead")
    void getGoodsFeedbacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoodsFeedbacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skipGoodsFeedbacksReactionSignalErrorFull() instead")
    void skipGoodsFeedbacksReactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skipGoodsFeedbacksReactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGoodsFeedbackCommentSignalErrorFull() instead")
    void updateGoodsFeedbackCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGoodsFeedbackCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
