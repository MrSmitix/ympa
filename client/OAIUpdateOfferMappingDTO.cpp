/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateOfferMappingDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateOfferMappingDTO::OAIUpdateOfferMappingDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateOfferMappingDTO::OAIUpdateOfferMappingDTO() {
    this->initializeModel();
}

OAIUpdateOfferMappingDTO::~OAIUpdateOfferMappingDTO() {}

void OAIUpdateOfferMappingDTO::initializeModel() {

    m_offer_isSet = false;
    m_offer_isValid = false;

    m_mapping_isSet = false;
    m_mapping_isValid = false;
}

void OAIUpdateOfferMappingDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateOfferMappingDTO::fromJsonObject(QJsonObject json) {

    m_offer_isValid = ::OpenAPI::fromJsonValue(m_offer, json[QString("offer")]);
    m_offer_isSet = !json[QString("offer")].isNull() && m_offer_isValid;

    m_mapping_isValid = ::OpenAPI::fromJsonValue(m_mapping, json[QString("mapping")]);
    m_mapping_isSet = !json[QString("mapping")].isNull() && m_mapping_isValid;
}

QString OAIUpdateOfferMappingDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateOfferMappingDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_offer.isSet()) {
        obj.insert(QString("offer"), ::OpenAPI::toJsonValue(m_offer));
    }
    if (m_mapping.isSet()) {
        obj.insert(QString("mapping"), ::OpenAPI::toJsonValue(m_mapping));
    }
    return obj;
}

OAIUpdateOfferDTO OAIUpdateOfferMappingDTO::getOffer() const {
    return m_offer;
}
void OAIUpdateOfferMappingDTO::setOffer(const OAIUpdateOfferDTO &offer) {
    m_offer = offer;
    m_offer_isSet = true;
}

bool OAIUpdateOfferMappingDTO::is_offer_Set() const{
    return m_offer_isSet;
}

bool OAIUpdateOfferMappingDTO::is_offer_Valid() const{
    return m_offer_isValid;
}

OAIUpdateMappingDTO OAIUpdateOfferMappingDTO::getMapping() const {
    return m_mapping;
}
void OAIUpdateOfferMappingDTO::setMapping(const OAIUpdateMappingDTO &mapping) {
    m_mapping = mapping;
    m_mapping_isSet = true;
}

bool OAIUpdateOfferMappingDTO::is_mapping_Set() const{
    return m_mapping_isSet;
}

bool OAIUpdateOfferMappingDTO::is_mapping_Valid() const{
    return m_mapping_isValid;
}

bool OAIUpdateOfferMappingDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateOfferMappingDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_offer_isValid && true;
}

} // namespace OpenAPI
