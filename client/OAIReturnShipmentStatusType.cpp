/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnShipmentStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnShipmentStatusType::OAIReturnShipmentStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnShipmentStatusType::OAIReturnShipmentStatusType() {
    this->initializeModel();
}

OAIReturnShipmentStatusType::~OAIReturnShipmentStatusType() {}

void OAIReturnShipmentStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReturnShipmentStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReturnShipmentStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_TRANSIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::IN_TRANSIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_PICKUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::READY_FOR_PICKUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::PICKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::LOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FULFILMENT_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::FULFILMENT_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PREPARED_FOR_UTILIZATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::PREPARED_FOR_UTILIZATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_IN_DEMAND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::NOT_IN_DEMAND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UTILIZED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::UTILIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_EXPROPRIATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::READY_FOR_EXPROPRIATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RECEIVED_FOR_EXPROPRIATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnShipmentStatusType::RECEIVED_FOR_EXPROPRIATION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReturnShipmentStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReturnShipmentStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReturnShipmentStatusType::CREATED:
            val = "CREATED";
            break;
        case eOAIReturnShipmentStatusType::RECEIVED:
            val = "RECEIVED";
            break;
        case eOAIReturnShipmentStatusType::IN_TRANSIT:
            val = "IN_TRANSIT";
            break;
        case eOAIReturnShipmentStatusType::READY_FOR_PICKUP:
            val = "READY_FOR_PICKUP";
            break;
        case eOAIReturnShipmentStatusType::PICKED:
            val = "PICKED";
            break;
        case eOAIReturnShipmentStatusType::LOST:
            val = "LOST";
            break;
        case eOAIReturnShipmentStatusType::EXPIRED:
            val = "EXPIRED";
            break;
        case eOAIReturnShipmentStatusType::CANCELLED:
            val = "CANCELLED";
            break;
        case eOAIReturnShipmentStatusType::FULFILMENT_RECEIVED:
            val = "FULFILMENT_RECEIVED";
            break;
        case eOAIReturnShipmentStatusType::PREPARED_FOR_UTILIZATION:
            val = "PREPARED_FOR_UTILIZATION";
            break;
        case eOAIReturnShipmentStatusType::NOT_IN_DEMAND:
            val = "NOT_IN_DEMAND";
            break;
        case eOAIReturnShipmentStatusType::UTILIZED:
            val = "UTILIZED";
            break;
        case eOAIReturnShipmentStatusType::READY_FOR_EXPROPRIATION:
            val = "READY_FOR_EXPROPRIATION";
            break;
        case eOAIReturnShipmentStatusType::RECEIVED_FOR_EXPROPRIATION:
            val = "RECEIVED_FOR_EXPROPRIATION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReturnShipmentStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReturnShipmentStatusType::eOAIReturnShipmentStatusType OAIReturnShipmentStatusType::getValue() const {
    return m_value;
}

void OAIReturnShipmentStatusType::setValue(const OAIReturnShipmentStatusType::eOAIReturnShipmentStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReturnShipmentStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIReturnShipmentStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
