/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutletAddressDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutletAddressDTO::OAIOutletAddressDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutletAddressDTO::OAIOutletAddressDTO() {
    this->initializeModel();
}

OAIOutletAddressDTO::~OAIOutletAddressDTO() {}

void OAIOutletAddressDTO::initializeModel() {

    m_region_id_isSet = false;
    m_region_id_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_building_isSet = false;
    m_building_isValid = false;

    m_estate_isSet = false;
    m_estate_isValid = false;

    m_block_isSet = false;
    m_block_isValid = false;

    m_additional_isSet = false;
    m_additional_isValid = false;

    m_km_isSet = false;
    m_km_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;
}

void OAIOutletAddressDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutletAddressDTO::fromJsonObject(QJsonObject json) {

    m_region_id_isValid = ::OpenAPI::fromJsonValue(m_region_id, json[QString("regionId")]);
    m_region_id_isSet = !json[QString("regionId")].isNull() && m_region_id_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_building_isValid = ::OpenAPI::fromJsonValue(m_building, json[QString("building")]);
    m_building_isSet = !json[QString("building")].isNull() && m_building_isValid;

    m_estate_isValid = ::OpenAPI::fromJsonValue(m_estate, json[QString("estate")]);
    m_estate_isSet = !json[QString("estate")].isNull() && m_estate_isValid;

    m_block_isValid = ::OpenAPI::fromJsonValue(m_block, json[QString("block")]);
    m_block_isSet = !json[QString("block")].isNull() && m_block_isValid;

    m_additional_isValid = ::OpenAPI::fromJsonValue(m_additional, json[QString("additional")]);
    m_additional_isSet = !json[QString("additional")].isNull() && m_additional_isValid;

    m_km_isValid = ::OpenAPI::fromJsonValue(m_km, json[QString("km")]);
    m_km_isSet = !json[QString("km")].isNull() && m_km_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;
}

QString OAIOutletAddressDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutletAddressDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_region_id_isSet) {
        obj.insert(QString("regionId"), ::OpenAPI::toJsonValue(m_region_id));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_building_isSet) {
        obj.insert(QString("building"), ::OpenAPI::toJsonValue(m_building));
    }
    if (m_estate_isSet) {
        obj.insert(QString("estate"), ::OpenAPI::toJsonValue(m_estate));
    }
    if (m_block_isSet) {
        obj.insert(QString("block"), ::OpenAPI::toJsonValue(m_block));
    }
    if (m_additional_isSet) {
        obj.insert(QString("additional"), ::OpenAPI::toJsonValue(m_additional));
    }
    if (m_km_isSet) {
        obj.insert(QString("km"), ::OpenAPI::toJsonValue(m_km));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    return obj;
}

qint64 OAIOutletAddressDTO::getRegionId() const {
    return m_region_id;
}
void OAIOutletAddressDTO::setRegionId(const qint64 &region_id) {
    m_region_id = region_id;
    m_region_id_isSet = true;
}

bool OAIOutletAddressDTO::is_region_id_Set() const{
    return m_region_id_isSet;
}

bool OAIOutletAddressDTO::is_region_id_Valid() const{
    return m_region_id_isValid;
}

QString OAIOutletAddressDTO::getStreet() const {
    return m_street;
}
void OAIOutletAddressDTO::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIOutletAddressDTO::is_street_Set() const{
    return m_street_isSet;
}

bool OAIOutletAddressDTO::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIOutletAddressDTO::getNumber() const {
    return m_number;
}
void OAIOutletAddressDTO::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIOutletAddressDTO::is_number_Set() const{
    return m_number_isSet;
}

bool OAIOutletAddressDTO::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIOutletAddressDTO::getBuilding() const {
    return m_building;
}
void OAIOutletAddressDTO::setBuilding(const QString &building) {
    m_building = building;
    m_building_isSet = true;
}

bool OAIOutletAddressDTO::is_building_Set() const{
    return m_building_isSet;
}

bool OAIOutletAddressDTO::is_building_Valid() const{
    return m_building_isValid;
}

QString OAIOutletAddressDTO::getEstate() const {
    return m_estate;
}
void OAIOutletAddressDTO::setEstate(const QString &estate) {
    m_estate = estate;
    m_estate_isSet = true;
}

bool OAIOutletAddressDTO::is_estate_Set() const{
    return m_estate_isSet;
}

bool OAIOutletAddressDTO::is_estate_Valid() const{
    return m_estate_isValid;
}

QString OAIOutletAddressDTO::getBlock() const {
    return m_block;
}
void OAIOutletAddressDTO::setBlock(const QString &block) {
    m_block = block;
    m_block_isSet = true;
}

bool OAIOutletAddressDTO::is_block_Set() const{
    return m_block_isSet;
}

bool OAIOutletAddressDTO::is_block_Valid() const{
    return m_block_isValid;
}

QString OAIOutletAddressDTO::getAdditional() const {
    return m_additional;
}
void OAIOutletAddressDTO::setAdditional(const QString &additional) {
    m_additional = additional;
    m_additional_isSet = true;
}

bool OAIOutletAddressDTO::is_additional_Set() const{
    return m_additional_isSet;
}

bool OAIOutletAddressDTO::is_additional_Valid() const{
    return m_additional_isValid;
}

qint32 OAIOutletAddressDTO::getKm() const {
    return m_km;
}
void OAIOutletAddressDTO::setKm(const qint32 &km) {
    m_km = km;
    m_km_isSet = true;
}

bool OAIOutletAddressDTO::is_km_Set() const{
    return m_km_isSet;
}

bool OAIOutletAddressDTO::is_km_Valid() const{
    return m_km_isValid;
}

QString OAIOutletAddressDTO::getCity() const {
    return m_city;
}
void OAIOutletAddressDTO::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIOutletAddressDTO::is_city_Set() const{
    return m_city_isSet;
}

bool OAIOutletAddressDTO::is_city_Valid() const{
    return m_city_isValid;
}

bool OAIOutletAddressDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_region_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_building_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_km_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutletAddressDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_region_id_isValid && true;
}

} // namespace OpenAPI
