/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnInstanceStockType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnInstanceStockType::OAIReturnInstanceStockType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnInstanceStockType::OAIReturnInstanceStockType() {
    this->initializeModel();
}

OAIReturnInstanceStockType::~OAIReturnInstanceStockType() {}

void OAIReturnInstanceStockType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReturnInstanceStockType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReturnInstanceStockType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::FIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEFECT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::DEFECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ANOMALY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::ANOMALY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SURPLUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::SURPLUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MISGRADING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::MISGRADING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNDEFINED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::UNDEFINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCORRECT_IMEI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::INCORRECT_IMEI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCORRECT_SERIAL_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::INCORRECT_SERIAL_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCORRECT_CIS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::INCORRECT_CIS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PART_MISSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::PART_MISSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NON_COMPLIENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::NON_COMPLIENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_ACCEPTABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::NOT_ACCEPTABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MARKDOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::MARKDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEMO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::DEMO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPAIR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::REPAIR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FIRMWARE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::FIRMWARE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStockType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReturnInstanceStockType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReturnInstanceStockType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReturnInstanceStockType::FIT:
            val = "FIT";
            break;
        case eOAIReturnInstanceStockType::DEFECT:
            val = "DEFECT";
            break;
        case eOAIReturnInstanceStockType::ANOMALY:
            val = "ANOMALY";
            break;
        case eOAIReturnInstanceStockType::SURPLUS:
            val = "SURPLUS";
            break;
        case eOAIReturnInstanceStockType::EXPIRED:
            val = "EXPIRED";
            break;
        case eOAIReturnInstanceStockType::MISGRADING:
            val = "MISGRADING";
            break;
        case eOAIReturnInstanceStockType::UNDEFINED:
            val = "UNDEFINED";
            break;
        case eOAIReturnInstanceStockType::INCORRECT_IMEI:
            val = "INCORRECT_IMEI";
            break;
        case eOAIReturnInstanceStockType::INCORRECT_SERIAL_NUMBER:
            val = "INCORRECT_SERIAL_NUMBER";
            break;
        case eOAIReturnInstanceStockType::INCORRECT_CIS:
            val = "INCORRECT_CIS";
            break;
        case eOAIReturnInstanceStockType::PART_MISSING:
            val = "PART_MISSING";
            break;
        case eOAIReturnInstanceStockType::NON_COMPLIENT:
            val = "NON_COMPLIENT";
            break;
        case eOAIReturnInstanceStockType::NOT_ACCEPTABLE:
            val = "NOT_ACCEPTABLE";
            break;
        case eOAIReturnInstanceStockType::SERVICE:
            val = "SERVICE";
            break;
        case eOAIReturnInstanceStockType::MARKDOWN:
            val = "MARKDOWN";
            break;
        case eOAIReturnInstanceStockType::DEMO:
            val = "DEMO";
            break;
        case eOAIReturnInstanceStockType::REPAIR:
            val = "REPAIR";
            break;
        case eOAIReturnInstanceStockType::FIRMWARE:
            val = "FIRMWARE";
            break;
        case eOAIReturnInstanceStockType::UNKNOWN:
            val = "UNKNOWN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReturnInstanceStockType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReturnInstanceStockType::eOAIReturnInstanceStockType OAIReturnInstanceStockType::getValue() const {
    return m_value;
}

void OAIReturnInstanceStockType::setValue(const OAIReturnInstanceStockType::eOAIReturnInstanceStockType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReturnInstanceStockType::isSet() const {
    
    return m_value_isSet;
}

bool OAIReturnInstanceStockType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
