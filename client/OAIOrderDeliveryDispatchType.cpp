/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderDeliveryDispatchType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderDeliveryDispatchType::OAIOrderDeliveryDispatchType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderDeliveryDispatchType::OAIOrderDeliveryDispatchType() {
    this->initializeModel();
}

OAIOrderDeliveryDispatchType::~OAIOrderDeliveryDispatchType() {}

void OAIOrderDeliveryDispatchType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrderDeliveryDispatchType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrderDeliveryDispatchType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderDeliveryDispatchType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BUYER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderDeliveryDispatchType::BUYER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MARKET_PARTNER_OUTLET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderDeliveryDispatchType::MARKET_PARTNER_OUTLET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MARKET_BRANDED_OUTLET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderDeliveryDispatchType::MARKET_BRANDED_OUTLET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHOP_OUTLET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderDeliveryDispatchType::SHOP_OUTLET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DROPOFF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderDeliveryDispatchType::DROPOFF;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrderDeliveryDispatchType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrderDeliveryDispatchType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrderDeliveryDispatchType::UNKNOWN:
            val = "UNKNOWN";
            break;
        case eOAIOrderDeliveryDispatchType::BUYER:
            val = "BUYER";
            break;
        case eOAIOrderDeliveryDispatchType::MARKET_PARTNER_OUTLET:
            val = "MARKET_PARTNER_OUTLET";
            break;
        case eOAIOrderDeliveryDispatchType::MARKET_BRANDED_OUTLET:
            val = "MARKET_BRANDED_OUTLET";
            break;
        case eOAIOrderDeliveryDispatchType::SHOP_OUTLET:
            val = "SHOP_OUTLET";
            break;
        case eOAIOrderDeliveryDispatchType::DROPOFF:
            val = "DROPOFF";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrderDeliveryDispatchType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrderDeliveryDispatchType::eOAIOrderDeliveryDispatchType OAIOrderDeliveryDispatchType::getValue() const {
    return m_value;
}

void OAIOrderDeliveryDispatchType::setValue(const OAIOrderDeliveryDispatchType::eOAIOrderDeliveryDispatchType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrderDeliveryDispatchType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrderDeliveryDispatchType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
