/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOfferMappingsApi_H
#define OAI_OAIOfferMappingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiLockedErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetOfferMappingEntriesResponse.h"
#include "OAIGetSuggestedOfferMappingEntriesRequest.h"
#include "OAIGetSuggestedOfferMappingEntriesResponse.h"
#include "OAIOfferAvailabilityStatusType.h"
#include "OAIOfferMappingKindType.h"
#include "OAIOfferProcessingStatusType.h"
#include "OAIUpdateOfferMappingEntryRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOfferMappingsApi : public QObject {
    Q_OBJECT

public:
    OAIOfferMappingsApi(const int timeOut = 0);
    ~OAIOfferMappingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  offer_id QList<QString> [optional]
    * @param[in]  shop_sku QList<QString> [optional]
    * @param[in]  mapping_kind OAIOfferMappingKindType [optional]
    * @param[in]  status QList<OAIOfferProcessingStatusType> [optional]
    * @param[in]  availability QList<OAIOfferAvailabilityStatusType> [optional]
    * @param[in]  category_id QList<qint32> [optional]
    * @param[in]  vendor QList<QString> [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    Q_DECL_DEPRECATED void getOfferMappingEntries(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QList<QString>> &offer_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &shop_sku = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIOfferMappingKindType> &mapping_kind = ::OpenAPI::OptionalParam<OAIOfferMappingKindType>(), const ::OpenAPI::OptionalParam<QList<OAIOfferProcessingStatusType>> &status = ::OpenAPI::OptionalParam<QList<OAIOfferProcessingStatusType>>(), const ::OpenAPI::OptionalParam<QList<OAIOfferAvailabilityStatusType>> &availability = ::OpenAPI::OptionalParam<QList<OAIOfferAvailabilityStatusType>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &category_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &vendor = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_get_suggested_offer_mapping_entries_request OAIGetSuggestedOfferMappingEntriesRequest [required]
    */
    Q_DECL_DEPRECATED void getSuggestedOfferMappingEntries(const qint64 &campaign_id, const OAIGetSuggestedOfferMappingEntriesRequest &oai_get_suggested_offer_mapping_entries_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_update_offer_mapping_entry_request OAIUpdateOfferMappingEntryRequest [required]
    */
    Q_DECL_DEPRECATED void updateOfferMappingEntries(const qint64 &campaign_id, const OAIUpdateOfferMappingEntryRequest &oai_update_offer_mapping_entry_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getOfferMappingEntriesCallback(OAIHttpRequestWorker *worker);
    void getSuggestedOfferMappingEntriesCallback(OAIHttpRequestWorker *worker);
    void updateOfferMappingEntriesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getOfferMappingEntriesSignal(OAIGetOfferMappingEntriesResponse summary);
    void getSuggestedOfferMappingEntriesSignal(OAIGetSuggestedOfferMappingEntriesResponse summary);
    void updateOfferMappingEntriesSignal(OAIEmptyApiResponse summary);


    void getOfferMappingEntriesSignalFull(OAIHttpRequestWorker *worker, OAIGetOfferMappingEntriesResponse summary);
    void getSuggestedOfferMappingEntriesSignalFull(OAIHttpRequestWorker *worker, OAIGetSuggestedOfferMappingEntriesResponse summary);
    void updateOfferMappingEntriesSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);

    Q_DECL_DEPRECATED_X("Use getOfferMappingEntriesSignalError() instead")
    void getOfferMappingEntriesSignalE(OAIGetOfferMappingEntriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferMappingEntriesSignalError(OAIGetOfferMappingEntriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedOfferMappingEntriesSignalError() instead")
    void getSuggestedOfferMappingEntriesSignalE(OAIGetSuggestedOfferMappingEntriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedOfferMappingEntriesSignalError(OAIGetSuggestedOfferMappingEntriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferMappingEntriesSignalError() instead")
    void updateOfferMappingEntriesSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferMappingEntriesSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getOfferMappingEntriesSignalErrorFull() instead")
    void getOfferMappingEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferMappingEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedOfferMappingEntriesSignalErrorFull() instead")
    void getSuggestedOfferMappingEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedOfferMappingEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferMappingEntriesSignalErrorFull() instead")
    void updateOfferMappingEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferMappingEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
