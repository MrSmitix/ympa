/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferMappingErrorType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferMappingErrorType::OAIOfferMappingErrorType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferMappingErrorType::OAIOfferMappingErrorType() {
    this->initializeModel();
}

OAIOfferMappingErrorType::~OAIOfferMappingErrorType() {}

void OAIOfferMappingErrorType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOfferMappingErrorType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOfferMappingErrorType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UNKNOWN_CATEGORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferMappingErrorType::UNKNOWN_CATEGORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CATEGORY_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferMappingErrorType::CATEGORY_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMPTY_MARKET_CATEGORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferMappingErrorType::EMPTY_MARKET_CATEGORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN_PARAMETER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferMappingErrorType::UNKNOWN_PARAMETER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNEXPECTED_BOOLEAN_VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferMappingErrorType::UNEXPECTED_BOOLEAN_VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUMBER_FORMAT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferMappingErrorType::NUMBER_FORMAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALUE_BLANK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferMappingErrorType::VALUE_BLANK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_UNIT_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferMappingErrorType::INVALID_UNIT_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_GROUP_ID_LENGTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferMappingErrorType::INVALID_GROUP_ID_LENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_GROUP_ID_CHARACTERS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferMappingErrorType::INVALID_GROUP_ID_CHARACTERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_PICKER_URL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferMappingErrorType::INVALID_PICKER_URL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOfferMappingErrorType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOfferMappingErrorType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOfferMappingErrorType::UNKNOWN_CATEGORY:
            val = "UNKNOWN_CATEGORY";
            break;
        case eOAIOfferMappingErrorType::CATEGORY_MISMATCH:
            val = "CATEGORY_MISMATCH";
            break;
        case eOAIOfferMappingErrorType::EMPTY_MARKET_CATEGORY:
            val = "EMPTY_MARKET_CATEGORY";
            break;
        case eOAIOfferMappingErrorType::UNKNOWN_PARAMETER:
            val = "UNKNOWN_PARAMETER";
            break;
        case eOAIOfferMappingErrorType::UNEXPECTED_BOOLEAN_VALUE:
            val = "UNEXPECTED_BOOLEAN_VALUE";
            break;
        case eOAIOfferMappingErrorType::NUMBER_FORMAT:
            val = "NUMBER_FORMAT";
            break;
        case eOAIOfferMappingErrorType::VALUE_BLANK:
            val = "VALUE_BLANK";
            break;
        case eOAIOfferMappingErrorType::INVALID_UNIT_ID:
            val = "INVALID_UNIT_ID";
            break;
        case eOAIOfferMappingErrorType::INVALID_GROUP_ID_LENGTH:
            val = "INVALID_GROUP_ID_LENGTH";
            break;
        case eOAIOfferMappingErrorType::INVALID_GROUP_ID_CHARACTERS:
            val = "INVALID_GROUP_ID_CHARACTERS";
            break;
        case eOAIOfferMappingErrorType::INVALID_PICKER_URL:
            val = "INVALID_PICKER_URL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOfferMappingErrorType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOfferMappingErrorType::eOAIOfferMappingErrorType OAIOfferMappingErrorType::getValue() const {
    return m_value;
}

void OAIOfferMappingErrorType::setValue(const OAIOfferMappingErrorType::eOAIOfferMappingErrorType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOfferMappingErrorType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOfferMappingErrorType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
