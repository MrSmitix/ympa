/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderLabelDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderLabelDTO::OAIOrderLabelDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderLabelDTO::OAIOrderLabelDTO() {
    this->initializeModel();
}

OAIOrderLabelDTO::~OAIOrderLabelDTO() {}

void OAIOrderLabelDTO::initializeModel() {

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_places_number_isSet = false;
    m_places_number_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_parcel_box_labels_isSet = false;
    m_parcel_box_labels_isValid = false;
}

void OAIOrderLabelDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderLabelDTO::fromJsonObject(QJsonObject json) {

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_places_number_isValid = ::OpenAPI::fromJsonValue(m_places_number, json[QString("placesNumber")]);
    m_places_number_isSet = !json[QString("placesNumber")].isNull() && m_places_number_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_parcel_box_labels_isValid = ::OpenAPI::fromJsonValue(m_parcel_box_labels, json[QString("parcelBoxLabels")]);
    m_parcel_box_labels_isSet = !json[QString("parcelBoxLabels")].isNull() && m_parcel_box_labels_isValid;
}

QString OAIOrderLabelDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderLabelDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_places_number_isSet) {
        obj.insert(QString("placesNumber"), ::OpenAPI::toJsonValue(m_places_number));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_parcel_box_labels.size() > 0) {
        obj.insert(QString("parcelBoxLabels"), ::OpenAPI::toJsonValue(m_parcel_box_labels));
    }
    return obj;
}

qint64 OAIOrderLabelDTO::getOrderId() const {
    return m_order_id;
}
void OAIOrderLabelDTO::setOrderId(const qint64 &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIOrderLabelDTO::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIOrderLabelDTO::is_order_id_Valid() const{
    return m_order_id_isValid;
}

qint32 OAIOrderLabelDTO::getPlacesNumber() const {
    return m_places_number;
}
void OAIOrderLabelDTO::setPlacesNumber(const qint32 &places_number) {
    m_places_number = places_number;
    m_places_number_isSet = true;
}

bool OAIOrderLabelDTO::is_places_number_Set() const{
    return m_places_number_isSet;
}

bool OAIOrderLabelDTO::is_places_number_Valid() const{
    return m_places_number_isValid;
}

QString OAIOrderLabelDTO::getUrl() const {
    return m_url;
}
void OAIOrderLabelDTO::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIOrderLabelDTO::is_url_Set() const{
    return m_url_isSet;
}

bool OAIOrderLabelDTO::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIParcelBoxLabelDTO> OAIOrderLabelDTO::getParcelBoxLabels() const {
    return m_parcel_box_labels;
}
void OAIOrderLabelDTO::setParcelBoxLabels(const QList<OAIParcelBoxLabelDTO> &parcel_box_labels) {
    m_parcel_box_labels = parcel_box_labels;
    m_parcel_box_labels_isSet = true;
}

bool OAIOrderLabelDTO::is_parcel_box_labels_Set() const{
    return m_parcel_box_labels_isSet;
}

bool OAIOrderLabelDTO::is_parcel_box_labels_Valid() const{
    return m_parcel_box_labels_isValid;
}

bool OAIOrderLabelDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_places_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parcel_box_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderLabelDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_order_id_isValid && m_places_number_isValid && m_url_isValid && m_parcel_box_labels_isValid && true;
}

} // namespace OpenAPI
