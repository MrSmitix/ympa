/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoodsFeedbackStatisticsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoodsFeedbackStatisticsDTO::OAIGoodsFeedbackStatisticsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoodsFeedbackStatisticsDTO::OAIGoodsFeedbackStatisticsDTO() {
    this->initializeModel();
}

OAIGoodsFeedbackStatisticsDTO::~OAIGoodsFeedbackStatisticsDTO() {}

void OAIGoodsFeedbackStatisticsDTO::initializeModel() {

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_comments_count_isSet = false;
    m_comments_count_isValid = false;

    m_recommended_isSet = false;
    m_recommended_isValid = false;

    m_paid_amount_isSet = false;
    m_paid_amount_isValid = false;
}

void OAIGoodsFeedbackStatisticsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoodsFeedbackStatisticsDTO::fromJsonObject(QJsonObject json) {

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_comments_count_isValid = ::OpenAPI::fromJsonValue(m_comments_count, json[QString("commentsCount")]);
    m_comments_count_isSet = !json[QString("commentsCount")].isNull() && m_comments_count_isValid;

    m_recommended_isValid = ::OpenAPI::fromJsonValue(m_recommended, json[QString("recommended")]);
    m_recommended_isSet = !json[QString("recommended")].isNull() && m_recommended_isValid;

    m_paid_amount_isValid = ::OpenAPI::fromJsonValue(m_paid_amount, json[QString("paidAmount")]);
    m_paid_amount_isSet = !json[QString("paidAmount")].isNull() && m_paid_amount_isValid;
}

QString OAIGoodsFeedbackStatisticsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoodsFeedbackStatisticsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_comments_count_isSet) {
        obj.insert(QString("commentsCount"), ::OpenAPI::toJsonValue(m_comments_count));
    }
    if (m_recommended_isSet) {
        obj.insert(QString("recommended"), ::OpenAPI::toJsonValue(m_recommended));
    }
    if (m_paid_amount_isSet) {
        obj.insert(QString("paidAmount"), ::OpenAPI::toJsonValue(m_paid_amount));
    }
    return obj;
}

qint32 OAIGoodsFeedbackStatisticsDTO::getRating() const {
    return m_rating;
}
void OAIGoodsFeedbackStatisticsDTO::setRating(const qint32 &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIGoodsFeedbackStatisticsDTO::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIGoodsFeedbackStatisticsDTO::is_rating_Valid() const{
    return m_rating_isValid;
}

qint64 OAIGoodsFeedbackStatisticsDTO::getCommentsCount() const {
    return m_comments_count;
}
void OAIGoodsFeedbackStatisticsDTO::setCommentsCount(const qint64 &comments_count) {
    m_comments_count = comments_count;
    m_comments_count_isSet = true;
}

bool OAIGoodsFeedbackStatisticsDTO::is_comments_count_Set() const{
    return m_comments_count_isSet;
}

bool OAIGoodsFeedbackStatisticsDTO::is_comments_count_Valid() const{
    return m_comments_count_isValid;
}

bool OAIGoodsFeedbackStatisticsDTO::isRecommended() const {
    return m_recommended;
}
void OAIGoodsFeedbackStatisticsDTO::setRecommended(const bool &recommended) {
    m_recommended = recommended;
    m_recommended_isSet = true;
}

bool OAIGoodsFeedbackStatisticsDTO::is_recommended_Set() const{
    return m_recommended_isSet;
}

bool OAIGoodsFeedbackStatisticsDTO::is_recommended_Valid() const{
    return m_recommended_isValid;
}

qint64 OAIGoodsFeedbackStatisticsDTO::getPaidAmount() const {
    return m_paid_amount;
}
void OAIGoodsFeedbackStatisticsDTO::setPaidAmount(const qint64 &paid_amount) {
    m_paid_amount = paid_amount;
    m_paid_amount_isSet = true;
}

bool OAIGoodsFeedbackStatisticsDTO::is_paid_amount_Set() const{
    return m_paid_amount_isSet;
}

bool OAIGoodsFeedbackStatisticsDTO::is_paid_amount_Valid() const{
    return m_paid_amount_isValid;
}

bool OAIGoodsFeedbackStatisticsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoodsFeedbackStatisticsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rating_isValid && m_comments_count_isValid && true;
}

} // namespace OpenAPI
