/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtensionShipmentDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtensionShipmentDTO::OAIExtensionShipmentDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtensionShipmentDTO::OAIExtensionShipmentDTO() {
    this->initializeModel();
}

OAIExtensionShipmentDTO::~OAIExtensionShipmentDTO() {}

void OAIExtensionShipmentDTO::initializeModel() {

    m_current_status_isSet = false;
    m_current_status_isValid = false;

    m_available_actions_isSet = false;
    m_available_actions_isValid = false;
}

void OAIExtensionShipmentDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtensionShipmentDTO::fromJsonObject(QJsonObject json) {

    m_current_status_isValid = ::OpenAPI::fromJsonValue(m_current_status, json[QString("currentStatus")]);
    m_current_status_isSet = !json[QString("currentStatus")].isNull() && m_current_status_isValid;

    m_available_actions_isValid = ::OpenAPI::fromJsonValue(m_available_actions, json[QString("availableActions")]);
    m_available_actions_isSet = !json[QString("availableActions")].isNull() && m_available_actions_isValid;
}

QString OAIExtensionShipmentDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtensionShipmentDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_current_status.isSet()) {
        obj.insert(QString("currentStatus"), ::OpenAPI::toJsonValue(m_current_status));
    }
    if (m_available_actions.size() > 0) {
        obj.insert(QString("availableActions"), ::OpenAPI::toJsonValue(m_available_actions));
    }
    return obj;
}

OAIShipmentStatusChangeDTO OAIExtensionShipmentDTO::getCurrentStatus() const {
    return m_current_status;
}
void OAIExtensionShipmentDTO::setCurrentStatus(const OAIShipmentStatusChangeDTO &current_status) {
    m_current_status = current_status;
    m_current_status_isSet = true;
}

bool OAIExtensionShipmentDTO::is_current_status_Set() const{
    return m_current_status_isSet;
}

bool OAIExtensionShipmentDTO::is_current_status_Valid() const{
    return m_current_status_isValid;
}

QSet<OAIShipmentActionType> OAIExtensionShipmentDTO::getAvailableActions() const {
    return m_available_actions;
}
void OAIExtensionShipmentDTO::setAvailableActions(const QSet<OAIShipmentActionType> &available_actions) {
    m_available_actions = available_actions;
    m_available_actions_isSet = true;
}

bool OAIExtensionShipmentDTO::is_available_actions_Set() const{
    return m_available_actions_isSet;
}

bool OAIExtensionShipmentDTO::is_available_actions_Valid() const{
    return m_available_actions_isValid;
}

bool OAIExtensionShipmentDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtensionShipmentDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_actions_isValid && true;
}

} // namespace OpenAPI
