/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReturnsApi_H
#define OAI_OAIReturnsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetReturnResponse.h"
#include "OAIGetReturnsResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIRefundStatusType.h"
#include "OAIReturnType.h"
#include "OAISetReturnDecisionRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReturnsApi : public QObject {
    Q_OBJECT

public:
    OAIReturnsApi(const int timeOut = 0);
    ~OAIReturnsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  return_id qint64 [required]
    */
    void getReturn(const qint64 &campaign_id, const qint64 &order_id, const qint64 &return_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  return_id qint64 [required]
    */
    void getReturnApplication(const qint64 &campaign_id, const qint64 &order_id, const qint64 &return_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  return_id qint64 [required]
    * @param[in]  item_id qint64 [required]
    * @param[in]  image_hash QString [required]
    */
    void getReturnPhoto(const qint64 &campaign_id, const qint64 &order_id, const qint64 &return_id, const qint64 &item_id, const QString &image_hash);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  order_ids QList<qint64> [optional]
    * @param[in]  statuses QList<OAIRefundStatusType> [optional]
    * @param[in]  type OAIReturnType [optional]
    * @param[in]  from_date QDate [optional]
    * @param[in]  to_date QDate [optional]
    * @param[in]  from_date2 QDate [optional]
    * @param[in]  to_date2 QDate [optional]
    */
    void getReturns(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint64>> &order_ids = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<QList<OAIRefundStatusType>> &statuses = ::OpenAPI::OptionalParam<QList<OAIRefundStatusType>>(), const ::OpenAPI::OptionalParam<OAIReturnType> &type = ::OpenAPI::OptionalParam<OAIReturnType>(), const ::OpenAPI::OptionalParam<QDate> &from_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &to_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &from_date2 = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &to_date2 = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  return_id qint64 [required]
    * @param[in]  oai_set_return_decision_request OAISetReturnDecisionRequest [required]
    */
    void setReturnDecision(const qint64 &campaign_id, const qint64 &order_id, const qint64 &return_id, const OAISetReturnDecisionRequest &oai_set_return_decision_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  return_id qint64 [required]
    */
    void submitReturnDecision(const qint64 &campaign_id, const qint64 &order_id, const qint64 &return_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getReturnCallback(OAIHttpRequestWorker *worker);
    void getReturnApplicationCallback(OAIHttpRequestWorker *worker);
    void getReturnPhotoCallback(OAIHttpRequestWorker *worker);
    void getReturnsCallback(OAIHttpRequestWorker *worker);
    void setReturnDecisionCallback(OAIHttpRequestWorker *worker);
    void submitReturnDecisionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getReturnSignal(OAIGetReturnResponse summary);
    void getReturnApplicationSignal(OAIHttpFileElement summary);
    void getReturnPhotoSignal(OAIHttpFileElement summary);
    void getReturnsSignal(OAIGetReturnsResponse summary);
    void setReturnDecisionSignal(OAIEmptyApiResponse summary);
    void submitReturnDecisionSignal(OAIEmptyApiResponse summary);


    void getReturnSignalFull(OAIHttpRequestWorker *worker, OAIGetReturnResponse summary);
    void getReturnApplicationSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getReturnPhotoSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getReturnsSignalFull(OAIHttpRequestWorker *worker, OAIGetReturnsResponse summary);
    void setReturnDecisionSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void submitReturnDecisionSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);

    Q_DECL_DEPRECATED_X("Use getReturnSignalError() instead")
    void getReturnSignalE(OAIGetReturnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnSignalError(OAIGetReturnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnApplicationSignalError() instead")
    void getReturnApplicationSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnApplicationSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnPhotoSignalError() instead")
    void getReturnPhotoSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnPhotoSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnsSignalError() instead")
    void getReturnsSignalE(OAIGetReturnsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnsSignalError(OAIGetReturnsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setReturnDecisionSignalError() instead")
    void setReturnDecisionSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setReturnDecisionSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitReturnDecisionSignalError() instead")
    void submitReturnDecisionSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void submitReturnDecisionSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getReturnSignalErrorFull() instead")
    void getReturnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnApplicationSignalErrorFull() instead")
    void getReturnApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnPhotoSignalErrorFull() instead")
    void getReturnPhotoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnPhotoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnsSignalErrorFull() instead")
    void getReturnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setReturnDecisionSignalErrorFull() instead")
    void setReturnDecisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setReturnDecisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitReturnDecisionSignalErrorFull() instead")
    void submitReturnDecisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitReturnDecisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
