/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILogisticPickupPointDTO.h
 *
 * Описание пункта вывоза для возврата.
 */

#ifndef OAILogisticPickupPointDTO_H
#define OAILogisticPickupPointDTO_H

#include <QJsonObject>

#include "OAILogisticPointType.h"
#include "OAIPickupAddressDTO.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPickupAddressDTO;

class OAILogisticPickupPointDTO : public OAIObject {
public:
    OAILogisticPickupPointDTO();
    OAILogisticPickupPointDTO(QString json);
    ~OAILogisticPickupPointDTO() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIPickupAddressDTO getAddress() const;
    void setAddress(const OAIPickupAddressDTO &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    QString getInstruction() const;
    void setInstruction(const QString &instruction);
    bool is_instruction_Set() const;
    bool is_instruction_Valid() const;

    OAILogisticPointType getType() const;
    void setType(const OAILogisticPointType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint64 getLogisticPartnerId() const;
    void setLogisticPartnerId(const qint64 &logistic_partner_id);
    bool is_logistic_partner_id_Set() const;
    bool is_logistic_partner_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIPickupAddressDTO m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    QString m_instruction;
    bool m_instruction_isSet;
    bool m_instruction_isValid;

    OAILogisticPointType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint64 m_logistic_partner_id;
    bool m_logistic_partner_id_isSet;
    bool m_logistic_partner_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILogisticPickupPointDTO)

#endif // OAILogisticPickupPointDTO_H
