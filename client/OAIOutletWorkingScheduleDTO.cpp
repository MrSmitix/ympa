/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutletWorkingScheduleDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutletWorkingScheduleDTO::OAIOutletWorkingScheduleDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutletWorkingScheduleDTO::OAIOutletWorkingScheduleDTO() {
    this->initializeModel();
}

OAIOutletWorkingScheduleDTO::~OAIOutletWorkingScheduleDTO() {}

void OAIOutletWorkingScheduleDTO::initializeModel() {

    m_work_in_holiday_isSet = false;
    m_work_in_holiday_isValid = false;

    m_schedule_items_isSet = false;
    m_schedule_items_isValid = false;
}

void OAIOutletWorkingScheduleDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutletWorkingScheduleDTO::fromJsonObject(QJsonObject json) {

    m_work_in_holiday_isValid = ::OpenAPI::fromJsonValue(m_work_in_holiday, json[QString("workInHoliday")]);
    m_work_in_holiday_isSet = !json[QString("workInHoliday")].isNull() && m_work_in_holiday_isValid;

    m_schedule_items_isValid = ::OpenAPI::fromJsonValue(m_schedule_items, json[QString("scheduleItems")]);
    m_schedule_items_isSet = !json[QString("scheduleItems")].isNull() && m_schedule_items_isValid;
}

QString OAIOutletWorkingScheduleDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutletWorkingScheduleDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_work_in_holiday_isSet) {
        obj.insert(QString("workInHoliday"), ::OpenAPI::toJsonValue(m_work_in_holiday));
    }
    if (m_schedule_items.size() > 0) {
        obj.insert(QString("scheduleItems"), ::OpenAPI::toJsonValue(m_schedule_items));
    }
    return obj;
}

bool OAIOutletWorkingScheduleDTO::isWorkInHoliday() const {
    return m_work_in_holiday;
}
void OAIOutletWorkingScheduleDTO::setWorkInHoliday(const bool &work_in_holiday) {
    m_work_in_holiday = work_in_holiday;
    m_work_in_holiday_isSet = true;
}

bool OAIOutletWorkingScheduleDTO::is_work_in_holiday_Set() const{
    return m_work_in_holiday_isSet;
}

bool OAIOutletWorkingScheduleDTO::is_work_in_holiday_Valid() const{
    return m_work_in_holiday_isValid;
}

QList<OAIOutletWorkingScheduleItemDTO> OAIOutletWorkingScheduleDTO::getScheduleItems() const {
    return m_schedule_items;
}
void OAIOutletWorkingScheduleDTO::setScheduleItems(const QList<OAIOutletWorkingScheduleItemDTO> &schedule_items) {
    m_schedule_items = schedule_items;
    m_schedule_items_isSet = true;
}

bool OAIOutletWorkingScheduleDTO::is_schedule_items_Set() const{
    return m_schedule_items_isSet;
}

bool OAIOutletWorkingScheduleDTO::is_schedule_items_Valid() const{
    return m_schedule_items_isValid;
}

bool OAIOutletWorkingScheduleDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_work_in_holiday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutletWorkingScheduleDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schedule_items_isValid && true;
}

} // namespace OpenAPI
