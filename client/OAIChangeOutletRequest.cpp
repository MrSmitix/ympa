/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeOutletRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeOutletRequest::OAIChangeOutletRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeOutletRequest::OAIChangeOutletRequest() {
    this->initializeModel();
}

OAIChangeOutletRequest::~OAIChangeOutletRequest() {}

void OAIChangeOutletRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_coords_isSet = false;
    m_coords_isValid = false;

    m_is_main_isSet = false;
    m_is_main_isValid = false;

    m_shop_outlet_code_isSet = false;
    m_shop_outlet_code_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_phones_isSet = false;
    m_phones_isValid = false;

    m_working_schedule_isSet = false;
    m_working_schedule_isValid = false;

    m_delivery_rules_isSet = false;
    m_delivery_rules_isValid = false;

    m_storage_period_isSet = false;
    m_storage_period_isValid = false;
}

void OAIChangeOutletRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangeOutletRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_coords_isValid = ::OpenAPI::fromJsonValue(m_coords, json[QString("coords")]);
    m_coords_isSet = !json[QString("coords")].isNull() && m_coords_isValid;

    m_is_main_isValid = ::OpenAPI::fromJsonValue(m_is_main, json[QString("isMain")]);
    m_is_main_isSet = !json[QString("isMain")].isNull() && m_is_main_isValid;

    m_shop_outlet_code_isValid = ::OpenAPI::fromJsonValue(m_shop_outlet_code, json[QString("shopOutletCode")]);
    m_shop_outlet_code_isSet = !json[QString("shopOutletCode")].isNull() && m_shop_outlet_code_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_phones_isValid = ::OpenAPI::fromJsonValue(m_phones, json[QString("phones")]);
    m_phones_isSet = !json[QString("phones")].isNull() && m_phones_isValid;

    m_working_schedule_isValid = ::OpenAPI::fromJsonValue(m_working_schedule, json[QString("workingSchedule")]);
    m_working_schedule_isSet = !json[QString("workingSchedule")].isNull() && m_working_schedule_isValid;

    m_delivery_rules_isValid = ::OpenAPI::fromJsonValue(m_delivery_rules, json[QString("deliveryRules")]);
    m_delivery_rules_isSet = !json[QString("deliveryRules")].isNull() && m_delivery_rules_isValid;

    m_storage_period_isValid = ::OpenAPI::fromJsonValue(m_storage_period, json[QString("storagePeriod")]);
    m_storage_period_isSet = !json[QString("storagePeriod")].isNull() && m_storage_period_isValid;
}

QString OAIChangeOutletRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangeOutletRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_coords_isSet) {
        obj.insert(QString("coords"), ::OpenAPI::toJsonValue(m_coords));
    }
    if (m_is_main_isSet) {
        obj.insert(QString("isMain"), ::OpenAPI::toJsonValue(m_is_main));
    }
    if (m_shop_outlet_code_isSet) {
        obj.insert(QString("shopOutletCode"), ::OpenAPI::toJsonValue(m_shop_outlet_code));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_phones.size() > 0) {
        obj.insert(QString("phones"), ::OpenAPI::toJsonValue(m_phones));
    }
    if (m_working_schedule.isSet()) {
        obj.insert(QString("workingSchedule"), ::OpenAPI::toJsonValue(m_working_schedule));
    }
    if (m_delivery_rules.size() > 0) {
        obj.insert(QString("deliveryRules"), ::OpenAPI::toJsonValue(m_delivery_rules));
    }
    if (m_storage_period_isSet) {
        obj.insert(QString("storagePeriod"), ::OpenAPI::toJsonValue(m_storage_period));
    }
    return obj;
}

QString OAIChangeOutletRequest::getName() const {
    return m_name;
}
void OAIChangeOutletRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChangeOutletRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChangeOutletRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIOutletType OAIChangeOutletRequest::getType() const {
    return m_type;
}
void OAIChangeOutletRequest::setType(const OAIOutletType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChangeOutletRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChangeOutletRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIChangeOutletRequest::getCoords() const {
    return m_coords;
}
void OAIChangeOutletRequest::setCoords(const QString &coords) {
    m_coords = coords;
    m_coords_isSet = true;
}

bool OAIChangeOutletRequest::is_coords_Set() const{
    return m_coords_isSet;
}

bool OAIChangeOutletRequest::is_coords_Valid() const{
    return m_coords_isValid;
}

bool OAIChangeOutletRequest::isIsMain() const {
    return m_is_main;
}
void OAIChangeOutletRequest::setIsMain(const bool &is_main) {
    m_is_main = is_main;
    m_is_main_isSet = true;
}

bool OAIChangeOutletRequest::is_is_main_Set() const{
    return m_is_main_isSet;
}

bool OAIChangeOutletRequest::is_is_main_Valid() const{
    return m_is_main_isValid;
}

QString OAIChangeOutletRequest::getShopOutletCode() const {
    return m_shop_outlet_code;
}
void OAIChangeOutletRequest::setShopOutletCode(const QString &shop_outlet_code) {
    m_shop_outlet_code = shop_outlet_code;
    m_shop_outlet_code_isSet = true;
}

bool OAIChangeOutletRequest::is_shop_outlet_code_Set() const{
    return m_shop_outlet_code_isSet;
}

bool OAIChangeOutletRequest::is_shop_outlet_code_Valid() const{
    return m_shop_outlet_code_isValid;
}

OAIOutletVisibilityType OAIChangeOutletRequest::getVisibility() const {
    return m_visibility;
}
void OAIChangeOutletRequest::setVisibility(const OAIOutletVisibilityType &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIChangeOutletRequest::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIChangeOutletRequest::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIOutletAddressDTO OAIChangeOutletRequest::getAddress() const {
    return m_address;
}
void OAIChangeOutletRequest::setAddress(const OAIOutletAddressDTO &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIChangeOutletRequest::is_address_Set() const{
    return m_address_isSet;
}

bool OAIChangeOutletRequest::is_address_Valid() const{
    return m_address_isValid;
}

QList<QString> OAIChangeOutletRequest::getPhones() const {
    return m_phones;
}
void OAIChangeOutletRequest::setPhones(const QList<QString> &phones) {
    m_phones = phones;
    m_phones_isSet = true;
}

bool OAIChangeOutletRequest::is_phones_Set() const{
    return m_phones_isSet;
}

bool OAIChangeOutletRequest::is_phones_Valid() const{
    return m_phones_isValid;
}

OAIOutletWorkingScheduleDTO OAIChangeOutletRequest::getWorkingSchedule() const {
    return m_working_schedule;
}
void OAIChangeOutletRequest::setWorkingSchedule(const OAIOutletWorkingScheduleDTO &working_schedule) {
    m_working_schedule = working_schedule;
    m_working_schedule_isSet = true;
}

bool OAIChangeOutletRequest::is_working_schedule_Set() const{
    return m_working_schedule_isSet;
}

bool OAIChangeOutletRequest::is_working_schedule_Valid() const{
    return m_working_schedule_isValid;
}

QList<OAIOutletDeliveryRuleDTO> OAIChangeOutletRequest::getDeliveryRules() const {
    return m_delivery_rules;
}
void OAIChangeOutletRequest::setDeliveryRules(const QList<OAIOutletDeliveryRuleDTO> &delivery_rules) {
    m_delivery_rules = delivery_rules;
    m_delivery_rules_isSet = true;
}

bool OAIChangeOutletRequest::is_delivery_rules_Set() const{
    return m_delivery_rules_isSet;
}

bool OAIChangeOutletRequest::is_delivery_rules_Valid() const{
    return m_delivery_rules_isValid;
}

qint64 OAIChangeOutletRequest::getStoragePeriod() const {
    return m_storage_period;
}
void OAIChangeOutletRequest::setStoragePeriod(const qint64 &storage_period) {
    m_storage_period = storage_period;
    m_storage_period_isSet = true;
}

bool OAIChangeOutletRequest::is_storage_period_Set() const{
    return m_storage_period_isSet;
}

bool OAIChangeOutletRequest::is_storage_period_Valid() const{
    return m_storage_period_isValid;
}

bool OAIChangeOutletRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_main_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_outlet_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangeOutletRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && m_address_isValid && m_phones_isValid && m_working_schedule_isValid && true;
}

} // namespace OpenAPI
