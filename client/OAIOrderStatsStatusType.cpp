/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderStatsStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderStatsStatusType::OAIOrderStatsStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderStatsStatusType::OAIOrderStatsStatusType() {
    this->initializeModel();
}

OAIOrderStatsStatusType::~OAIOrderStatsStatusType() {}

void OAIOrderStatsStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrderStatsStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrderStatsStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CANCELLED_BEFORE_PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::CANCELLED_BEFORE_PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED_IN_DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::CANCELLED_IN_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED_IN_PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::CANCELLED_IN_PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::DELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARTIALLY_DELIVERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::PARTIALLY_DELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARTIALLY_RETURNED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::PARTIALLY_RETURNED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::PICKUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESERVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::RESERVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETURNED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::RETURNED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPAID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::UNPAID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatsStatusType::LOST;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrderStatsStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrderStatsStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrderStatsStatusType::CANCELLED_BEFORE_PROCESSING:
            val = "CANCELLED_BEFORE_PROCESSING";
            break;
        case eOAIOrderStatsStatusType::CANCELLED_IN_DELIVERY:
            val = "CANCELLED_IN_DELIVERY";
            break;
        case eOAIOrderStatsStatusType::CANCELLED_IN_PROCESSING:
            val = "CANCELLED_IN_PROCESSING";
            break;
        case eOAIOrderStatsStatusType::DELIVERY:
            val = "DELIVERY";
            break;
        case eOAIOrderStatsStatusType::DELIVERED:
            val = "DELIVERED";
            break;
        case eOAIOrderStatsStatusType::PARTIALLY_DELIVERED:
            val = "PARTIALLY_DELIVERED";
            break;
        case eOAIOrderStatsStatusType::PARTIALLY_RETURNED:
            val = "PARTIALLY_RETURNED";
            break;
        case eOAIOrderStatsStatusType::PENDING:
            val = "PENDING";
            break;
        case eOAIOrderStatsStatusType::PICKUP:
            val = "PICKUP";
            break;
        case eOAIOrderStatsStatusType::PROCESSING:
            val = "PROCESSING";
            break;
        case eOAIOrderStatsStatusType::RESERVED:
            val = "RESERVED";
            break;
        case eOAIOrderStatsStatusType::RETURNED:
            val = "RETURNED";
            break;
        case eOAIOrderStatsStatusType::UNKNOWN:
            val = "UNKNOWN";
            break;
        case eOAIOrderStatsStatusType::UNPAID:
            val = "UNPAID";
            break;
        case eOAIOrderStatsStatusType::LOST:
            val = "LOST";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrderStatsStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrderStatsStatusType::eOAIOrderStatsStatusType OAIOrderStatsStatusType::getValue() const {
    return m_value;
}

void OAIOrderStatsStatusType::setValue(const OAIOrderStatsStatusType::eOAIOrderStatsStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrderStatsStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrderStatsStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
