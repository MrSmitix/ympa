/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnDTO::OAIReturnDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnDTO::OAIReturnDTO() {
    this->initializeModel();
}

OAIReturnDTO::~OAIReturnDTO() {}

void OAIReturnDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;

    m_refund_status_isSet = false;
    m_refund_status_isValid = false;

    m_logistic_pickup_point_isSet = false;
    m_logistic_pickup_point_isValid = false;

    m_shipment_recipient_type_isSet = false;
    m_shipment_recipient_type_isValid = false;

    m_shipment_status_isSet = false;
    m_shipment_status_isValid = false;

    m_refund_amount_isSet = false;
    m_refund_amount_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_return_type_isSet = false;
    m_return_type_isValid = false;

    m_fast_return_isSet = false;
    m_fast_return_isValid = false;
}

void OAIReturnDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReturnDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("updateDate")]);
    m_update_date_isSet = !json[QString("updateDate")].isNull() && m_update_date_isValid;

    m_refund_status_isValid = ::OpenAPI::fromJsonValue(m_refund_status, json[QString("refundStatus")]);
    m_refund_status_isSet = !json[QString("refundStatus")].isNull() && m_refund_status_isValid;

    m_logistic_pickup_point_isValid = ::OpenAPI::fromJsonValue(m_logistic_pickup_point, json[QString("logisticPickupPoint")]);
    m_logistic_pickup_point_isSet = !json[QString("logisticPickupPoint")].isNull() && m_logistic_pickup_point_isValid;

    m_shipment_recipient_type_isValid = ::OpenAPI::fromJsonValue(m_shipment_recipient_type, json[QString("shipmentRecipientType")]);
    m_shipment_recipient_type_isSet = !json[QString("shipmentRecipientType")].isNull() && m_shipment_recipient_type_isValid;

    m_shipment_status_isValid = ::OpenAPI::fromJsonValue(m_shipment_status, json[QString("shipmentStatus")]);
    m_shipment_status_isSet = !json[QString("shipmentStatus")].isNull() && m_shipment_status_isValid;

    m_refund_amount_isValid = ::OpenAPI::fromJsonValue(m_refund_amount, json[QString("refundAmount")]);
    m_refund_amount_isSet = !json[QString("refundAmount")].isNull() && m_refund_amount_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_return_type_isValid = ::OpenAPI::fromJsonValue(m_return_type, json[QString("returnType")]);
    m_return_type_isSet = !json[QString("returnType")].isNull() && m_return_type_isValid;

    m_fast_return_isValid = ::OpenAPI::fromJsonValue(m_fast_return, json[QString("fastReturn")]);
    m_fast_return_isSet = !json[QString("fastReturn")].isNull() && m_fast_return_isValid;
}

QString OAIReturnDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReturnDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("updateDate"), ::OpenAPI::toJsonValue(m_update_date));
    }
    if (m_refund_status.isSet()) {
        obj.insert(QString("refundStatus"), ::OpenAPI::toJsonValue(m_refund_status));
    }
    if (m_logistic_pickup_point.isSet()) {
        obj.insert(QString("logisticPickupPoint"), ::OpenAPI::toJsonValue(m_logistic_pickup_point));
    }
    if (m_shipment_recipient_type.isSet()) {
        obj.insert(QString("shipmentRecipientType"), ::OpenAPI::toJsonValue(m_shipment_recipient_type));
    }
    if (m_shipment_status.isSet()) {
        obj.insert(QString("shipmentStatus"), ::OpenAPI::toJsonValue(m_shipment_status));
    }
    if (m_refund_amount_isSet) {
        obj.insert(QString("refundAmount"), ::OpenAPI::toJsonValue(m_refund_amount));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_return_type.isSet()) {
        obj.insert(QString("returnType"), ::OpenAPI::toJsonValue(m_return_type));
    }
    if (m_fast_return_isSet) {
        obj.insert(QString("fastReturn"), ::OpenAPI::toJsonValue(m_fast_return));
    }
    return obj;
}

qint64 OAIReturnDTO::getId() const {
    return m_id;
}
void OAIReturnDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReturnDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReturnDTO::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIReturnDTO::getOrderId() const {
    return m_order_id;
}
void OAIReturnDTO::setOrderId(const qint64 &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIReturnDTO::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIReturnDTO::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QDateTime OAIReturnDTO::getCreationDate() const {
    return m_creation_date;
}
void OAIReturnDTO::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIReturnDTO::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIReturnDTO::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIReturnDTO::getUpdateDate() const {
    return m_update_date;
}
void OAIReturnDTO::setUpdateDate(const QDateTime &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIReturnDTO::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIReturnDTO::is_update_date_Valid() const{
    return m_update_date_isValid;
}

OAIRefundStatusType OAIReturnDTO::getRefundStatus() const {
    return m_refund_status;
}
void OAIReturnDTO::setRefundStatus(const OAIRefundStatusType &refund_status) {
    m_refund_status = refund_status;
    m_refund_status_isSet = true;
}

bool OAIReturnDTO::is_refund_status_Set() const{
    return m_refund_status_isSet;
}

bool OAIReturnDTO::is_refund_status_Valid() const{
    return m_refund_status_isValid;
}

OAILogisticPickupPointDTO OAIReturnDTO::getLogisticPickupPoint() const {
    return m_logistic_pickup_point;
}
void OAIReturnDTO::setLogisticPickupPoint(const OAILogisticPickupPointDTO &logistic_pickup_point) {
    m_logistic_pickup_point = logistic_pickup_point;
    m_logistic_pickup_point_isSet = true;
}

bool OAIReturnDTO::is_logistic_pickup_point_Set() const{
    return m_logistic_pickup_point_isSet;
}

bool OAIReturnDTO::is_logistic_pickup_point_Valid() const{
    return m_logistic_pickup_point_isValid;
}

OAIRecipientType OAIReturnDTO::getShipmentRecipientType() const {
    return m_shipment_recipient_type;
}
void OAIReturnDTO::setShipmentRecipientType(const OAIRecipientType &shipment_recipient_type) {
    m_shipment_recipient_type = shipment_recipient_type;
    m_shipment_recipient_type_isSet = true;
}

bool OAIReturnDTO::is_shipment_recipient_type_Set() const{
    return m_shipment_recipient_type_isSet;
}

bool OAIReturnDTO::is_shipment_recipient_type_Valid() const{
    return m_shipment_recipient_type_isValid;
}

OAIReturnShipmentStatusType OAIReturnDTO::getShipmentStatus() const {
    return m_shipment_status;
}
void OAIReturnDTO::setShipmentStatus(const OAIReturnShipmentStatusType &shipment_status) {
    m_shipment_status = shipment_status;
    m_shipment_status_isSet = true;
}

bool OAIReturnDTO::is_shipment_status_Set() const{
    return m_shipment_status_isSet;
}

bool OAIReturnDTO::is_shipment_status_Valid() const{
    return m_shipment_status_isValid;
}

qint64 OAIReturnDTO::getRefundAmount() const {
    return m_refund_amount;
}
void OAIReturnDTO::setRefundAmount(const qint64 &refund_amount) {
    m_refund_amount = refund_amount;
    m_refund_amount_isSet = true;
}

bool OAIReturnDTO::is_refund_amount_Set() const{
    return m_refund_amount_isSet;
}

bool OAIReturnDTO::is_refund_amount_Valid() const{
    return m_refund_amount_isValid;
}

QList<OAIReturnItemDTO> OAIReturnDTO::getItems() const {
    return m_items;
}
void OAIReturnDTO::setItems(const QList<OAIReturnItemDTO> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIReturnDTO::is_items_Set() const{
    return m_items_isSet;
}

bool OAIReturnDTO::is_items_Valid() const{
    return m_items_isValid;
}

OAIReturnType OAIReturnDTO::getReturnType() const {
    return m_return_type;
}
void OAIReturnDTO::setReturnType(const OAIReturnType &return_type) {
    m_return_type = return_type;
    m_return_type_isSet = true;
}

bool OAIReturnDTO::is_return_type_Set() const{
    return m_return_type_isSet;
}

bool OAIReturnDTO::is_return_type_Valid() const{
    return m_return_type_isValid;
}

bool OAIReturnDTO::isFastReturn() const {
    return m_fast_return;
}
void OAIReturnDTO::setFastReturn(const bool &fast_return) {
    m_fast_return = fast_return;
    m_fast_return_isSet = true;
}

bool OAIReturnDTO::is_fast_return_Set() const{
    return m_fast_return_isSet;
}

bool OAIReturnDTO::is_fast_return_Valid() const{
    return m_fast_return_isValid;
}

bool OAIReturnDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logistic_pickup_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_recipient_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fast_return_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReturnDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_items_isValid && true;
}

} // namespace OpenAPI
