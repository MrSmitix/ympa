/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoodsFeedbackCommentDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoodsFeedbackCommentDTO::OAIGoodsFeedbackCommentDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoodsFeedbackCommentDTO::OAIGoodsFeedbackCommentDTO() {
    this->initializeModel();
}

OAIGoodsFeedbackCommentDTO::~OAIGoodsFeedbackCommentDTO() {}

void OAIGoodsFeedbackCommentDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_can_modify_isSet = false;
    m_can_modify_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGoodsFeedbackCommentDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoodsFeedbackCommentDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_can_modify_isValid = ::OpenAPI::fromJsonValue(m_can_modify, json[QString("canModify")]);
    m_can_modify_isSet = !json[QString("canModify")].isNull() && m_can_modify_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGoodsFeedbackCommentDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoodsFeedbackCommentDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_can_modify_isSet) {
        obj.insert(QString("canModify"), ::OpenAPI::toJsonValue(m_can_modify));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint64 OAIGoodsFeedbackCommentDTO::getId() const {
    return m_id;
}
void OAIGoodsFeedbackCommentDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoodsFeedbackCommentDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoodsFeedbackCommentDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGoodsFeedbackCommentDTO::getText() const {
    return m_text;
}
void OAIGoodsFeedbackCommentDTO::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGoodsFeedbackCommentDTO::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGoodsFeedbackCommentDTO::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIGoodsFeedbackCommentDTO::isCanModify() const {
    return m_can_modify;
}
void OAIGoodsFeedbackCommentDTO::setCanModify(const bool &can_modify) {
    m_can_modify = can_modify;
    m_can_modify_isSet = true;
}

bool OAIGoodsFeedbackCommentDTO::is_can_modify_Set() const{
    return m_can_modify_isSet;
}

bool OAIGoodsFeedbackCommentDTO::is_can_modify_Valid() const{
    return m_can_modify_isValid;
}

qint64 OAIGoodsFeedbackCommentDTO::getParentId() const {
    return m_parent_id;
}
void OAIGoodsFeedbackCommentDTO::setParentId(const qint64 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIGoodsFeedbackCommentDTO::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIGoodsFeedbackCommentDTO::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

OAIGoodsFeedbackCommentAuthorDTO OAIGoodsFeedbackCommentDTO::getAuthor() const {
    return m_author;
}
void OAIGoodsFeedbackCommentDTO::setAuthor(const OAIGoodsFeedbackCommentAuthorDTO &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIGoodsFeedbackCommentDTO::is_author_Set() const{
    return m_author_isSet;
}

bool OAIGoodsFeedbackCommentDTO::is_author_Valid() const{
    return m_author_isValid;
}

OAIGoodsFeedbackCommentStatusType OAIGoodsFeedbackCommentDTO::getStatus() const {
    return m_status;
}
void OAIGoodsFeedbackCommentDTO::setStatus(const OAIGoodsFeedbackCommentStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoodsFeedbackCommentDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoodsFeedbackCommentDTO::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGoodsFeedbackCommentDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_modify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoodsFeedbackCommentDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_text_isValid && m_author_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
