/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPromosRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPromosRequest::OAIGetPromosRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPromosRequest::OAIGetPromosRequest() {
    this->initializeModel();
}

OAIGetPromosRequest::~OAIGetPromosRequest() {}

void OAIGetPromosRequest::initializeModel() {

    m_participation_isSet = false;
    m_participation_isValid = false;

    m_mechanics_isSet = false;
    m_mechanics_isValid = false;
}

void OAIGetPromosRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPromosRequest::fromJsonObject(QJsonObject json) {

    m_participation_isValid = ::OpenAPI::fromJsonValue(m_participation, json[QString("participation")]);
    m_participation_isSet = !json[QString("participation")].isNull() && m_participation_isValid;

    m_mechanics_isValid = ::OpenAPI::fromJsonValue(m_mechanics, json[QString("mechanics")]);
    m_mechanics_isSet = !json[QString("mechanics")].isNull() && m_mechanics_isValid;
}

QString OAIGetPromosRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPromosRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_participation.isSet()) {
        obj.insert(QString("participation"), ::OpenAPI::toJsonValue(m_participation));
    }
    if (m_mechanics.isSet()) {
        obj.insert(QString("mechanics"), ::OpenAPI::toJsonValue(m_mechanics));
    }
    return obj;
}

OAIPromoParticipationType OAIGetPromosRequest::getParticipation() const {
    return m_participation;
}
void OAIGetPromosRequest::setParticipation(const OAIPromoParticipationType &participation) {
    m_participation = participation;
    m_participation_isSet = true;
}

bool OAIGetPromosRequest::is_participation_Set() const{
    return m_participation_isSet;
}

bool OAIGetPromosRequest::is_participation_Valid() const{
    return m_participation_isValid;
}

OAIMechanicsType OAIGetPromosRequest::getMechanics() const {
    return m_mechanics;
}
void OAIGetPromosRequest::setMechanics(const OAIMechanicsType &mechanics) {
    m_mechanics = mechanics;
    m_mechanics_isSet = true;
}

bool OAIGetPromosRequest::is_mechanics_Set() const{
    return m_mechanics_isSet;
}

bool OAIGetPromosRequest::is_mechanics_Valid() const{
    return m_mechanics_isValid;
}

bool OAIGetPromosRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_participation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mechanics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPromosRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
