/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelOfferDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelOfferDTO::OAIModelOfferDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelOfferDTO::OAIModelOfferDTO() {
    this->initializeModel();
}

OAIModelOfferDTO::~OAIModelOfferDTO() {}

void OAIModelOfferDTO::initializeModel() {

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pos_isSet = false;
    m_pos_isValid = false;

    m_pre_discount_price_isSet = false;
    m_pre_discount_price_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_region_id_isSet = false;
    m_region_id_isValid = false;

    m_shipping_cost_isSet = false;
    m_shipping_cost_isValid = false;

    m_shop_name_isSet = false;
    m_shop_name_isValid = false;

    m_shop_rating_isSet = false;
    m_shop_rating_isValid = false;

    m_in_stock_isSet = false;
    m_in_stock_isValid = false;
}

void OAIModelOfferDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelOfferDTO::fromJsonObject(QJsonObject json) {

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pos_isValid = ::OpenAPI::fromJsonValue(m_pos, json[QString("pos")]);
    m_pos_isSet = !json[QString("pos")].isNull() && m_pos_isValid;

    m_pre_discount_price_isValid = ::OpenAPI::fromJsonValue(m_pre_discount_price, json[QString("preDiscountPrice")]);
    m_pre_discount_price_isSet = !json[QString("preDiscountPrice")].isNull() && m_pre_discount_price_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_region_id_isValid = ::OpenAPI::fromJsonValue(m_region_id, json[QString("regionId")]);
    m_region_id_isSet = !json[QString("regionId")].isNull() && m_region_id_isValid;

    m_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost, json[QString("shippingCost")]);
    m_shipping_cost_isSet = !json[QString("shippingCost")].isNull() && m_shipping_cost_isValid;

    m_shop_name_isValid = ::OpenAPI::fromJsonValue(m_shop_name, json[QString("shopName")]);
    m_shop_name_isSet = !json[QString("shopName")].isNull() && m_shop_name_isValid;

    m_shop_rating_isValid = ::OpenAPI::fromJsonValue(m_shop_rating, json[QString("shopRating")]);
    m_shop_rating_isSet = !json[QString("shopRating")].isNull() && m_shop_rating_isValid;

    m_in_stock_isValid = ::OpenAPI::fromJsonValue(m_in_stock, json[QString("inStock")]);
    m_in_stock_isSet = !json[QString("inStock")].isNull() && m_in_stock_isValid;
}

QString OAIModelOfferDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelOfferDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_isSet) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pos_isSet) {
        obj.insert(QString("pos"), ::OpenAPI::toJsonValue(m_pos));
    }
    if (m_pre_discount_price_isSet) {
        obj.insert(QString("preDiscountPrice"), ::OpenAPI::toJsonValue(m_pre_discount_price));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_region_id_isSet) {
        obj.insert(QString("regionId"), ::OpenAPI::toJsonValue(m_region_id));
    }
    if (m_shipping_cost_isSet) {
        obj.insert(QString("shippingCost"), ::OpenAPI::toJsonValue(m_shipping_cost));
    }
    if (m_shop_name_isSet) {
        obj.insert(QString("shopName"), ::OpenAPI::toJsonValue(m_shop_name));
    }
    if (m_shop_rating_isSet) {
        obj.insert(QString("shopRating"), ::OpenAPI::toJsonValue(m_shop_rating));
    }
    if (m_in_stock_isSet) {
        obj.insert(QString("inStock"), ::OpenAPI::toJsonValue(m_in_stock));
    }
    return obj;
}

qint32 OAIModelOfferDTO::getDiscount() const {
    return m_discount;
}
void OAIModelOfferDTO::setDiscount(const qint32 &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIModelOfferDTO::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIModelOfferDTO::is_discount_Valid() const{
    return m_discount_isValid;
}

QString OAIModelOfferDTO::getName() const {
    return m_name;
}
void OAIModelOfferDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIModelOfferDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIModelOfferDTO::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIModelOfferDTO::getPos() const {
    return m_pos;
}
void OAIModelOfferDTO::setPos(const qint32 &pos) {
    m_pos = pos;
    m_pos_isSet = true;
}

bool OAIModelOfferDTO::is_pos_Set() const{
    return m_pos_isSet;
}

bool OAIModelOfferDTO::is_pos_Valid() const{
    return m_pos_isValid;
}

double OAIModelOfferDTO::getPreDiscountPrice() const {
    return m_pre_discount_price;
}
void OAIModelOfferDTO::setPreDiscountPrice(const double &pre_discount_price) {
    m_pre_discount_price = pre_discount_price;
    m_pre_discount_price_isSet = true;
}

bool OAIModelOfferDTO::is_pre_discount_price_Set() const{
    return m_pre_discount_price_isSet;
}

bool OAIModelOfferDTO::is_pre_discount_price_Valid() const{
    return m_pre_discount_price_isValid;
}

double OAIModelOfferDTO::getPrice() const {
    return m_price;
}
void OAIModelOfferDTO::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIModelOfferDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAIModelOfferDTO::is_price_Valid() const{
    return m_price_isValid;
}

qint64 OAIModelOfferDTO::getRegionId() const {
    return m_region_id;
}
void OAIModelOfferDTO::setRegionId(const qint64 &region_id) {
    m_region_id = region_id;
    m_region_id_isSet = true;
}

bool OAIModelOfferDTO::is_region_id_Set() const{
    return m_region_id_isSet;
}

bool OAIModelOfferDTO::is_region_id_Valid() const{
    return m_region_id_isValid;
}

double OAIModelOfferDTO::getShippingCost() const {
    return m_shipping_cost;
}
void OAIModelOfferDTO::setShippingCost(const double &shipping_cost) {
    m_shipping_cost = shipping_cost;
    m_shipping_cost_isSet = true;
}

bool OAIModelOfferDTO::is_shipping_cost_Set() const{
    return m_shipping_cost_isSet;
}

bool OAIModelOfferDTO::is_shipping_cost_Valid() const{
    return m_shipping_cost_isValid;
}

QString OAIModelOfferDTO::getShopName() const {
    return m_shop_name;
}
void OAIModelOfferDTO::setShopName(const QString &shop_name) {
    m_shop_name = shop_name;
    m_shop_name_isSet = true;
}

bool OAIModelOfferDTO::is_shop_name_Set() const{
    return m_shop_name_isSet;
}

bool OAIModelOfferDTO::is_shop_name_Valid() const{
    return m_shop_name_isValid;
}

qint32 OAIModelOfferDTO::getShopRating() const {
    return m_shop_rating;
}
void OAIModelOfferDTO::setShopRating(const qint32 &shop_rating) {
    m_shop_rating = shop_rating;
    m_shop_rating_isSet = true;
}

bool OAIModelOfferDTO::is_shop_rating_Set() const{
    return m_shop_rating_isSet;
}

bool OAIModelOfferDTO::is_shop_rating_Valid() const{
    return m_shop_rating_isValid;
}

qint32 OAIModelOfferDTO::getInStock() const {
    return m_in_stock;
}
void OAIModelOfferDTO::setInStock(const qint32 &in_stock) {
    m_in_stock = in_stock;
    m_in_stock_isSet = true;
}

bool OAIModelOfferDTO::is_in_stock_Set() const{
    return m_in_stock_isSet;
}

bool OAIModelOfferDTO::is_in_stock_Valid() const{
    return m_in_stock_isValid;
}

bool OAIModelOfferDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_discount_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_stock_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelOfferDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
