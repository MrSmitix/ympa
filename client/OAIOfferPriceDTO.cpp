/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferPriceDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferPriceDTO::OAIOfferPriceDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferPriceDTO::OAIOfferPriceDTO() {
    this->initializeModel();
}

OAIOfferPriceDTO::~OAIOfferPriceDTO() {}

void OAIOfferPriceDTO::initializeModel() {

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAIOfferPriceDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferPriceDTO::fromJsonObject(QJsonObject json) {

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAIOfferPriceDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferPriceDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

QString OAIOfferPriceDTO::getOfferId() const {
    return m_offer_id;
}
void OAIOfferPriceDTO::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIOfferPriceDTO::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIOfferPriceDTO::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

OAIPriceDTO OAIOfferPriceDTO::getPrice() const {
    return m_price;
}
void OAIOfferPriceDTO::setPrice(const OAIPriceDTO &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIOfferPriceDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOfferPriceDTO::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIOfferPriceDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferPriceDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
