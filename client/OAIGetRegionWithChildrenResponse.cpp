/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRegionWithChildrenResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRegionWithChildrenResponse::OAIGetRegionWithChildrenResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRegionWithChildrenResponse::OAIGetRegionWithChildrenResponse() {
    this->initializeModel();
}

OAIGetRegionWithChildrenResponse::~OAIGetRegionWithChildrenResponse() {}

void OAIGetRegionWithChildrenResponse::initializeModel() {

    m_pager_isSet = false;
    m_pager_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;
}

void OAIGetRegionWithChildrenResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRegionWithChildrenResponse::fromJsonObject(QJsonObject json) {

    m_pager_isValid = ::OpenAPI::fromJsonValue(m_pager, json[QString("pager")]);
    m_pager_isSet = !json[QString("pager")].isNull() && m_pager_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;
}

QString OAIGetRegionWithChildrenResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRegionWithChildrenResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_pager.isSet()) {
        obj.insert(QString("pager"), ::OpenAPI::toJsonValue(m_pager));
    }
    if (m_regions.isSet()) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    return obj;
}

OAIFlippingPagerDTO OAIGetRegionWithChildrenResponse::getPager() const {
    return m_pager;
}
void OAIGetRegionWithChildrenResponse::setPager(const OAIFlippingPagerDTO &pager) {
    m_pager = pager;
    m_pager_isSet = true;
}

bool OAIGetRegionWithChildrenResponse::is_pager_Set() const{
    return m_pager_isSet;
}

bool OAIGetRegionWithChildrenResponse::is_pager_Valid() const{
    return m_pager_isValid;
}

OAIRegionDTO OAIGetRegionWithChildrenResponse::getRegions() const {
    return m_regions;
}
void OAIGetRegionWithChildrenResponse::setRegions(const OAIRegionDTO &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIGetRegionWithChildrenResponse::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIGetRegionWithChildrenResponse::is_regions_Valid() const{
    return m_regions_isValid;
}

bool OAIGetRegionWithChildrenResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRegionWithChildrenResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
