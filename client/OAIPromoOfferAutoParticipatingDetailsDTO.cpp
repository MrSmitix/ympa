/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromoOfferAutoParticipatingDetailsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromoOfferAutoParticipatingDetailsDTO::OAIPromoOfferAutoParticipatingDetailsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromoOfferAutoParticipatingDetailsDTO::OAIPromoOfferAutoParticipatingDetailsDTO() {
    this->initializeModel();
}

OAIPromoOfferAutoParticipatingDetailsDTO::~OAIPromoOfferAutoParticipatingDetailsDTO() {}

void OAIPromoOfferAutoParticipatingDetailsDTO::initializeModel() {

    m_campaign_ids_isSet = false;
    m_campaign_ids_isValid = false;
}

void OAIPromoOfferAutoParticipatingDetailsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromoOfferAutoParticipatingDetailsDTO::fromJsonObject(QJsonObject json) {

    m_campaign_ids_isValid = ::OpenAPI::fromJsonValue(m_campaign_ids, json[QString("campaignIds")]);
    m_campaign_ids_isSet = !json[QString("campaignIds")].isNull() && m_campaign_ids_isValid;
}

QString OAIPromoOfferAutoParticipatingDetailsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromoOfferAutoParticipatingDetailsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_ids.size() > 0) {
        obj.insert(QString("campaignIds"), ::OpenAPI::toJsonValue(m_campaign_ids));
    }
    return obj;
}

QList<qint64> OAIPromoOfferAutoParticipatingDetailsDTO::getCampaignIds() const {
    return m_campaign_ids;
}
void OAIPromoOfferAutoParticipatingDetailsDTO::setCampaignIds(const QList<qint64> &campaign_ids) {
    m_campaign_ids = campaign_ids;
    m_campaign_ids_isSet = true;
}

bool OAIPromoOfferAutoParticipatingDetailsDTO::is_campaign_ids_Set() const{
    return m_campaign_ids_isSet;
}

bool OAIPromoOfferAutoParticipatingDetailsDTO::is_campaign_ids_Valid() const{
    return m_campaign_ids_isValid;
}

bool OAIPromoOfferAutoParticipatingDetailsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromoOfferAutoParticipatingDetailsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
