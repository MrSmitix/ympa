/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaxSaleQuantumDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaxSaleQuantumDTO::OAIMaxSaleQuantumDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaxSaleQuantumDTO::OAIMaxSaleQuantumDTO() {
    this->initializeModel();
}

OAIMaxSaleQuantumDTO::~OAIMaxSaleQuantumDTO() {}

void OAIMaxSaleQuantumDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_max_sale_quantum_isSet = false;
    m_max_sale_quantum_isValid = false;
}

void OAIMaxSaleQuantumDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaxSaleQuantumDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_max_sale_quantum_isValid = ::OpenAPI::fromJsonValue(m_max_sale_quantum, json[QString("maxSaleQuantum")]);
    m_max_sale_quantum_isSet = !json[QString("maxSaleQuantum")].isNull() && m_max_sale_quantum_isValid;
}

QString OAIMaxSaleQuantumDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaxSaleQuantumDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_max_sale_quantum_isSet) {
        obj.insert(QString("maxSaleQuantum"), ::OpenAPI::toJsonValue(m_max_sale_quantum));
    }
    return obj;
}

qint64 OAIMaxSaleQuantumDTO::getId() const {
    return m_id;
}
void OAIMaxSaleQuantumDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMaxSaleQuantumDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMaxSaleQuantumDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMaxSaleQuantumDTO::getName() const {
    return m_name;
}
void OAIMaxSaleQuantumDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMaxSaleQuantumDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMaxSaleQuantumDTO::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIMaxSaleQuantumDTO::getMaxSaleQuantum() const {
    return m_max_sale_quantum;
}
void OAIMaxSaleQuantumDTO::setMaxSaleQuantum(const qint32 &max_sale_quantum) {
    m_max_sale_quantum = max_sale_quantum;
    m_max_sale_quantum_isSet = true;
}

bool OAIMaxSaleQuantumDTO::is_max_sale_quantum_Set() const{
    return m_max_sale_quantum_isSet;
}

bool OAIMaxSaleQuantumDTO::is_max_sale_quantum_Valid() const{
    return m_max_sale_quantum_isValid;
}

bool OAIMaxSaleQuantumDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_sale_quantum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaxSaleQuantumDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
