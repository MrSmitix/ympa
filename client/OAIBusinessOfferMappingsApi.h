/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBusinessOfferMappingsApi_H
#define OAI_OAIBusinessOfferMappingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddOffersToArchiveRequest.h"
#include "OAIAddOffersToArchiveResponse.h"
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiLockedErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIDeleteOffersFromArchiveRequest.h"
#include "OAIDeleteOffersFromArchiveResponse.h"
#include "OAIDeleteOffersRequest.h"
#include "OAIDeleteOffersResponse.h"
#include "OAIGetOfferMappingsRequest.h"
#include "OAIGetOfferMappingsResponse.h"
#include "OAIGetSuggestedOfferMappingsRequest.h"
#include "OAIGetSuggestedOfferMappingsResponse.h"
#include "OAIUpdateOfferMappingsRequest.h"
#include "OAIUpdateOfferMappingsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBusinessOfferMappingsApi : public QObject {
    Q_OBJECT

public:
    OAIBusinessOfferMappingsApi(const int timeOut = 0);
    ~OAIBusinessOfferMappingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_add_offers_to_archive_request OAIAddOffersToArchiveRequest [required]
    */
    void addOffersToArchive(const qint64 &business_id, const OAIAddOffersToArchiveRequest &oai_add_offers_to_archive_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_delete_offers_request OAIDeleteOffersRequest [required]
    */
    void deleteOffers(const qint64 &business_id, const OAIDeleteOffersRequest &oai_delete_offers_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_delete_offers_from_archive_request OAIDeleteOffersFromArchiveRequest [required]
    */
    void deleteOffersFromArchive(const qint64 &business_id, const OAIDeleteOffersFromArchiveRequest &oai_delete_offers_from_archive_request);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  oai_get_offer_mappings_request OAIGetOfferMappingsRequest [optional]
    */
    void getOfferMappings(const qint64 &business_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGetOfferMappingsRequest> &oai_get_offer_mappings_request = ::OpenAPI::OptionalParam<OAIGetOfferMappingsRequest>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_get_suggested_offer_mappings_request OAIGetSuggestedOfferMappingsRequest [optional]
    */
    void getSuggestedOfferMappings(const qint64 &business_id, const ::OpenAPI::OptionalParam<OAIGetSuggestedOfferMappingsRequest> &oai_get_suggested_offer_mappings_request = ::OpenAPI::OptionalParam<OAIGetSuggestedOfferMappingsRequest>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_update_offer_mappings_request OAIUpdateOfferMappingsRequest [required]
    */
    void updateOfferMappings(const qint64 &business_id, const OAIUpdateOfferMappingsRequest &oai_update_offer_mappings_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addOffersToArchiveCallback(OAIHttpRequestWorker *worker);
    void deleteOffersCallback(OAIHttpRequestWorker *worker);
    void deleteOffersFromArchiveCallback(OAIHttpRequestWorker *worker);
    void getOfferMappingsCallback(OAIHttpRequestWorker *worker);
    void getSuggestedOfferMappingsCallback(OAIHttpRequestWorker *worker);
    void updateOfferMappingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addOffersToArchiveSignal(OAIAddOffersToArchiveResponse summary);
    void deleteOffersSignal(OAIDeleteOffersResponse summary);
    void deleteOffersFromArchiveSignal(OAIDeleteOffersFromArchiveResponse summary);
    void getOfferMappingsSignal(OAIGetOfferMappingsResponse summary);
    void getSuggestedOfferMappingsSignal(OAIGetSuggestedOfferMappingsResponse summary);
    void updateOfferMappingsSignal(OAIUpdateOfferMappingsResponse summary);


    void addOffersToArchiveSignalFull(OAIHttpRequestWorker *worker, OAIAddOffersToArchiveResponse summary);
    void deleteOffersSignalFull(OAIHttpRequestWorker *worker, OAIDeleteOffersResponse summary);
    void deleteOffersFromArchiveSignalFull(OAIHttpRequestWorker *worker, OAIDeleteOffersFromArchiveResponse summary);
    void getOfferMappingsSignalFull(OAIHttpRequestWorker *worker, OAIGetOfferMappingsResponse summary);
    void getSuggestedOfferMappingsSignalFull(OAIHttpRequestWorker *worker, OAIGetSuggestedOfferMappingsResponse summary);
    void updateOfferMappingsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOfferMappingsResponse summary);

    Q_DECL_DEPRECATED_X("Use addOffersToArchiveSignalError() instead")
    void addOffersToArchiveSignalE(OAIAddOffersToArchiveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addOffersToArchiveSignalError(OAIAddOffersToArchiveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOffersSignalError() instead")
    void deleteOffersSignalE(OAIDeleteOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOffersSignalError(OAIDeleteOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOffersFromArchiveSignalError() instead")
    void deleteOffersFromArchiveSignalE(OAIDeleteOffersFromArchiveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOffersFromArchiveSignalError(OAIDeleteOffersFromArchiveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferMappingsSignalError() instead")
    void getOfferMappingsSignalE(OAIGetOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferMappingsSignalError(OAIGetOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedOfferMappingsSignalError() instead")
    void getSuggestedOfferMappingsSignalE(OAIGetSuggestedOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedOfferMappingsSignalError(OAIGetSuggestedOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferMappingsSignalError() instead")
    void updateOfferMappingsSignalE(OAIUpdateOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferMappingsSignalError(OAIUpdateOfferMappingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addOffersToArchiveSignalErrorFull() instead")
    void addOffersToArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addOffersToArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOffersSignalErrorFull() instead")
    void deleteOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOffersFromArchiveSignalErrorFull() instead")
    void deleteOffersFromArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOffersFromArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferMappingsSignalErrorFull() instead")
    void getOfferMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedOfferMappingsSignalErrorFull() instead")
    void getSuggestedOfferMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedOfferMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferMappingsSignalErrorFull() instead")
    void updateOfferMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
