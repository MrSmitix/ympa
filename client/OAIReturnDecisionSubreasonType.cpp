/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnDecisionSubreasonType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnDecisionSubreasonType::OAIReturnDecisionSubreasonType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnDecisionSubreasonType::OAIReturnDecisionSubreasonType() {
    this->initializeModel();
}

OAIReturnDecisionSubreasonType::~OAIReturnDecisionSubreasonType() {}

void OAIReturnDecisionSubreasonType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReturnDecisionSubreasonType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReturnDecisionSubreasonType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("USER_DID_NOT_LIKE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionSubreasonType::USER_DID_NOT_LIKE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_CHANGED_MIND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionSubreasonType::USER_CHANGED_MIND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERED_TOO_LONG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionSubreasonType::DELIVERED_TOO_LONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BAD_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionSubreasonType::BAD_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DAMAGED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionSubreasonType::DAMAGED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_WORKING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionSubreasonType::NOT_WORKING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCOMPLETENESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionSubreasonType::INCOMPLETENESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WRONG_ITEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionSubreasonType::WRONG_ITEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WRONG_COLOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionSubreasonType::WRONG_COLOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DID_NOT_MATCH_DESCRIPTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionSubreasonType::DID_NOT_MATCH_DESCRIPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionSubreasonType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReturnDecisionSubreasonType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReturnDecisionSubreasonType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReturnDecisionSubreasonType::USER_DID_NOT_LIKE:
            val = "USER_DID_NOT_LIKE";
            break;
        case eOAIReturnDecisionSubreasonType::USER_CHANGED_MIND:
            val = "USER_CHANGED_MIND";
            break;
        case eOAIReturnDecisionSubreasonType::DELIVERED_TOO_LONG:
            val = "DELIVERED_TOO_LONG";
            break;
        case eOAIReturnDecisionSubreasonType::BAD_PACKAGE:
            val = "BAD_PACKAGE";
            break;
        case eOAIReturnDecisionSubreasonType::DAMAGED:
            val = "DAMAGED";
            break;
        case eOAIReturnDecisionSubreasonType::NOT_WORKING:
            val = "NOT_WORKING";
            break;
        case eOAIReturnDecisionSubreasonType::INCOMPLETENESS:
            val = "INCOMPLETENESS";
            break;
        case eOAIReturnDecisionSubreasonType::WRONG_ITEM:
            val = "WRONG_ITEM";
            break;
        case eOAIReturnDecisionSubreasonType::WRONG_COLOR:
            val = "WRONG_COLOR";
            break;
        case eOAIReturnDecisionSubreasonType::DID_NOT_MATCH_DESCRIPTION:
            val = "DID_NOT_MATCH_DESCRIPTION";
            break;
        case eOAIReturnDecisionSubreasonType::UNKNOWN:
            val = "UNKNOWN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReturnDecisionSubreasonType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReturnDecisionSubreasonType::eOAIReturnDecisionSubreasonType OAIReturnDecisionSubreasonType::getValue() const {
    return m_value;
}

void OAIReturnDecisionSubreasonType::setValue(const OAIReturnDecisionSubreasonType::eOAIReturnDecisionSubreasonType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReturnDecisionSubreasonType::isSet() const {
    
    return m_value_isSet;
}

bool OAIReturnDecisionSubreasonType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
