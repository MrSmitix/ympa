/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOutletsApi_H
#define OAI_OAIOutletsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIChangeOutletRequest.h"
#include "OAICreateOutletResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetOutletResponse.h"
#include "OAIGetOutletsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOutletsApi : public QObject {
    Q_OBJECT

public:
    OAIOutletsApi(const int timeOut = 0);
    ~OAIOutletsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  oai_change_outlet_request OAIChangeOutletRequest [required]
    */
    void createOutlet(const qint64 &campaign_id, const OAIChangeOutletRequest &oai_change_outlet_request);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  outlet_id qint64 [required]
    */
    void deleteOutlet(const qint64 &campaign_id, const qint64 &outlet_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  outlet_id qint64 [required]
    */
    void getOutlet(const qint64 &campaign_id, const qint64 &outlet_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  region_id qint64 [optional]
    * @param[in]  shop_outlet_code QString [optional]
    * @param[in]  region_id2 qint64 [optional]
    */
    void getOutlets(const qint64 &campaign_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &region_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &shop_outlet_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &region_id2 = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  outlet_id qint64 [required]
    * @param[in]  oai_change_outlet_request OAIChangeOutletRequest [required]
    */
    void updateOutlet(const qint64 &campaign_id, const qint64 &outlet_id, const OAIChangeOutletRequest &oai_change_outlet_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOutletCallback(OAIHttpRequestWorker *worker);
    void deleteOutletCallback(OAIHttpRequestWorker *worker);
    void getOutletCallback(OAIHttpRequestWorker *worker);
    void getOutletsCallback(OAIHttpRequestWorker *worker);
    void updateOutletCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOutletSignal(OAICreateOutletResponse summary);
    void deleteOutletSignal(OAIEmptyApiResponse summary);
    void getOutletSignal(OAIGetOutletResponse summary);
    void getOutletsSignal(OAIGetOutletsResponse summary);
    void updateOutletSignal(OAIEmptyApiResponse summary);


    void createOutletSignalFull(OAIHttpRequestWorker *worker, OAICreateOutletResponse summary);
    void deleteOutletSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void getOutletSignalFull(OAIHttpRequestWorker *worker, OAIGetOutletResponse summary);
    void getOutletsSignalFull(OAIHttpRequestWorker *worker, OAIGetOutletsResponse summary);
    void updateOutletSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);

    Q_DECL_DEPRECATED_X("Use createOutletSignalError() instead")
    void createOutletSignalE(OAICreateOutletResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOutletSignalError(OAICreateOutletResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOutletSignalError() instead")
    void deleteOutletSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOutletSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutletSignalError() instead")
    void getOutletSignalE(OAIGetOutletResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutletSignalError(OAIGetOutletResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutletsSignalError() instead")
    void getOutletsSignalE(OAIGetOutletsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutletsSignalError(OAIGetOutletsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOutletSignalError() instead")
    void updateOutletSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOutletSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOutletSignalErrorFull() instead")
    void createOutletSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOutletSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOutletSignalErrorFull() instead")
    void deleteOutletSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOutletSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutletSignalErrorFull() instead")
    void getOutletSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutletSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutletsSignalErrorFull() instead")
    void getOutletsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutletsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOutletSignalErrorFull() instead")
    void updateOutletSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOutletSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
