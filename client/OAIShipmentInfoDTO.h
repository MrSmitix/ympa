/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIShipmentInfoDTO.h
 *
 * Список с информацией об отгрузках.
 */

#ifndef OAIShipmentInfoDTO_H
#define OAIShipmentInfoDTO_H

#include <QJsonObject>

#include "OAIDeliveryServiceDTO.h"
#include "OAIPalletsCountDTO.h"
#include "OAIPartnerShipmentWarehouseDTO.h"
#include "OAIShipmentStatusType.h"
#include "OAIShipmentType.h"
#include <QDateTime>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPartnerShipmentWarehouseDTO;
class OAIDeliveryServiceDTO;
class OAIPalletsCountDTO;

class OAIShipmentInfoDTO : public OAIObject {
public:
    OAIShipmentInfoDTO();
    OAIShipmentInfoDTO(QString json);
    ~OAIShipmentInfoDTO() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getPlanIntervalFrom() const;
    void setPlanIntervalFrom(const QDateTime &plan_interval_from);
    bool is_plan_interval_from_Set() const;
    bool is_plan_interval_from_Valid() const;

    QDateTime getPlanIntervalTo() const;
    void setPlanIntervalTo(const QDateTime &plan_interval_to);
    bool is_plan_interval_to_Set() const;
    bool is_plan_interval_to_Valid() const;

    OAIShipmentType getShipmentType() const;
    void setShipmentType(const OAIShipmentType &shipment_type);
    bool is_shipment_type_Set() const;
    bool is_shipment_type_Valid() const;

    OAIPartnerShipmentWarehouseDTO getWarehouse() const;
    void setWarehouse(const OAIPartnerShipmentWarehouseDTO &warehouse);
    bool is_warehouse_Set() const;
    bool is_warehouse_Valid() const;

    OAIPartnerShipmentWarehouseDTO getWarehouseTo() const;
    void setWarehouseTo(const OAIPartnerShipmentWarehouseDTO &warehouse_to);
    bool is_warehouse_to_Set() const;
    bool is_warehouse_to_Valid() const;

    QString getExternalId() const;
    void setExternalId(const QString &external_id);
    bool is_external_id_Set() const;
    bool is_external_id_Valid() const;

    OAIDeliveryServiceDTO getDeliveryService() const;
    void setDeliveryService(const OAIDeliveryServiceDTO &delivery_service);
    bool is_delivery_service_Set() const;
    bool is_delivery_service_Valid() const;

    OAIPalletsCountDTO getPalletsCount() const;
    void setPalletsCount(const OAIPalletsCountDTO &pallets_count);
    bool is_pallets_count_Set() const;
    bool is_pallets_count_Valid() const;

    QSet<qint64> getOrderIds() const;
    void setOrderIds(const QSet<qint64> &order_ids);
    bool is_order_ids_Set() const;
    bool is_order_ids_Valid() const;

    qint32 getDraftCount() const;
    void setDraftCount(const qint32 &draft_count);
    bool is_draft_count_Set() const;
    bool is_draft_count_Valid() const;

    qint32 getPlannedCount() const;
    void setPlannedCount(const qint32 &planned_count);
    bool is_planned_count_Set() const;
    bool is_planned_count_Valid() const;

    qint32 getFactCount() const;
    void setFactCount(const qint32 &fact_count);
    bool is_fact_count_Set() const;
    bool is_fact_count_Valid() const;

    OAIShipmentStatusType getStatus() const;
    void setStatus(const OAIShipmentStatusType &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusDescription() const;
    void setStatusDescription(const QString &status_description);
    bool is_status_description_Set() const;
    bool is_status_description_Valid() const;

    QDateTime getStatusUpdateTime() const;
    void setStatusUpdateTime(const QDateTime &status_update_time);
    bool is_status_update_time_Set() const;
    bool is_status_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_plan_interval_from;
    bool m_plan_interval_from_isSet;
    bool m_plan_interval_from_isValid;

    QDateTime m_plan_interval_to;
    bool m_plan_interval_to_isSet;
    bool m_plan_interval_to_isValid;

    OAIShipmentType m_shipment_type;
    bool m_shipment_type_isSet;
    bool m_shipment_type_isValid;

    OAIPartnerShipmentWarehouseDTO m_warehouse;
    bool m_warehouse_isSet;
    bool m_warehouse_isValid;

    OAIPartnerShipmentWarehouseDTO m_warehouse_to;
    bool m_warehouse_to_isSet;
    bool m_warehouse_to_isValid;

    QString m_external_id;
    bool m_external_id_isSet;
    bool m_external_id_isValid;

    OAIDeliveryServiceDTO m_delivery_service;
    bool m_delivery_service_isSet;
    bool m_delivery_service_isValid;

    OAIPalletsCountDTO m_pallets_count;
    bool m_pallets_count_isSet;
    bool m_pallets_count_isValid;

    QSet<qint64> m_order_ids;
    bool m_order_ids_isSet;
    bool m_order_ids_isValid;

    qint32 m_draft_count;
    bool m_draft_count_isSet;
    bool m_draft_count_isValid;

    qint32 m_planned_count;
    bool m_planned_count_isSet;
    bool m_planned_count_isValid;

    qint32 m_fact_count;
    bool m_fact_count_isSet;
    bool m_fact_count_isValid;

    OAIShipmentStatusType m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_description;
    bool m_status_description_isSet;
    bool m_status_description_isValid;

    QDateTime m_status_update_time;
    bool m_status_update_time_isSet;
    bool m_status_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIShipmentInfoDTO)

#endif // OAIShipmentInfoDTO_H
