/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContentApi_H
#define OAI_OAIContentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiLockedErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIGetCategoryContentParametersResponse.h"
#include "OAIGetOfferCardsContentStatusRequest.h"
#include "OAIGetOfferCardsContentStatusResponse.h"
#include "OAIUpdateOfferContentRequest.h"
#include "OAIUpdateOfferContentResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContentApi : public QObject {
    Q_OBJECT

public:
    OAIContentApi(const int timeOut = 0);
    ~OAIContentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  category_id qint64 [required]
    */
    void getCategoryContentParameters(const qint64 &category_id);

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  page_token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  oai_get_offer_cards_content_status_request OAIGetOfferCardsContentStatusRequest [optional]
    */
    void getOfferCardsContentStatus(const qint64 &business_id, const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGetOfferCardsContentStatusRequest> &oai_get_offer_cards_content_status_request = ::OpenAPI::OptionalParam<OAIGetOfferCardsContentStatusRequest>());

    /**
    * @param[in]  business_id qint64 [required]
    * @param[in]  oai_update_offer_content_request OAIUpdateOfferContentRequest [required]
    */
    void updateOfferContent(const qint64 &business_id, const OAIUpdateOfferContentRequest &oai_update_offer_content_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCategoryContentParametersCallback(OAIHttpRequestWorker *worker);
    void getOfferCardsContentStatusCallback(OAIHttpRequestWorker *worker);
    void updateOfferContentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCategoryContentParametersSignal(OAIGetCategoryContentParametersResponse summary);
    void getOfferCardsContentStatusSignal(OAIGetOfferCardsContentStatusResponse summary);
    void updateOfferContentSignal(OAIUpdateOfferContentResponse summary);


    void getCategoryContentParametersSignalFull(OAIHttpRequestWorker *worker, OAIGetCategoryContentParametersResponse summary);
    void getOfferCardsContentStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetOfferCardsContentStatusResponse summary);
    void updateOfferContentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOfferContentResponse summary);

    Q_DECL_DEPRECATED_X("Use getCategoryContentParametersSignalError() instead")
    void getCategoryContentParametersSignalE(OAIGetCategoryContentParametersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoryContentParametersSignalError(OAIGetCategoryContentParametersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferCardsContentStatusSignalError() instead")
    void getOfferCardsContentStatusSignalE(OAIGetOfferCardsContentStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferCardsContentStatusSignalError(OAIGetOfferCardsContentStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferContentSignalError() instead")
    void updateOfferContentSignalE(OAIUpdateOfferContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferContentSignalError(OAIUpdateOfferContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCategoryContentParametersSignalErrorFull() instead")
    void getCategoryContentParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoryContentParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferCardsContentStatusSignalErrorFull() instead")
    void getOfferCardsContentStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferCardsContentStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOfferContentSignalErrorFull() instead")
    void updateOfferContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOfferContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
