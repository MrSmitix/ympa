/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrderLabelsApi_H
#define OAI_OAIOrderLabelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIGetOrderLabelsDataResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIPageFormatType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrderLabelsApi : public QObject {
    Q_OBJECT

public:
    OAIOrderLabelsApi(const int timeOut = 0);
    ~OAIOrderLabelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  shipment_id qint64 [required]
    * @param[in]  box_id qint64 [required]
    * @param[in]  format OAIPageFormatType [optional]
    */
    void generateOrderLabel(const qint64 &campaign_id, const qint64 &order_id, const qint64 &shipment_id, const qint64 &box_id, const ::OpenAPI::OptionalParam<OAIPageFormatType> &format = ::OpenAPI::OptionalParam<OAIPageFormatType>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    * @param[in]  format OAIPageFormatType [optional]
    */
    void generateOrderLabels(const qint64 &campaign_id, const qint64 &order_id, const ::OpenAPI::OptionalParam<OAIPageFormatType> &format = ::OpenAPI::OptionalParam<OAIPageFormatType>());

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  order_id qint64 [required]
    */
    void getOrderLabelsData(const qint64 &campaign_id, const qint64 &order_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void generateOrderLabelCallback(OAIHttpRequestWorker *worker);
    void generateOrderLabelsCallback(OAIHttpRequestWorker *worker);
    void getOrderLabelsDataCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void generateOrderLabelSignal(OAIHttpFileElement summary);
    void generateOrderLabelsSignal(OAIHttpFileElement summary);
    void getOrderLabelsDataSignal(OAIGetOrderLabelsDataResponse summary);


    void generateOrderLabelSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void generateOrderLabelsSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getOrderLabelsDataSignalFull(OAIHttpRequestWorker *worker, OAIGetOrderLabelsDataResponse summary);

    Q_DECL_DEPRECATED_X("Use generateOrderLabelSignalError() instead")
    void generateOrderLabelSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateOrderLabelSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateOrderLabelsSignalError() instead")
    void generateOrderLabelsSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateOrderLabelsSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderLabelsDataSignalError() instead")
    void getOrderLabelsDataSignalE(OAIGetOrderLabelsDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderLabelsDataSignalError(OAIGetOrderLabelsDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use generateOrderLabelSignalErrorFull() instead")
    void generateOrderLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateOrderLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateOrderLabelsSignalErrorFull() instead")
    void generateOrderLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateOrderLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderLabelsDataSignalErrorFull() instead")
    void getOrderLabelsDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderLabelsDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
