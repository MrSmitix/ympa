/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFeedsApi_H
#define OAI_OAIFeedsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiLockedErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIFeedIndexLogsStatusType.h"
#include "OAIGetFeedIndexLogsResponse.h"
#include "OAIGetFeedResponse.h"
#include "OAIGetFeedsResponse.h"
#include "OAISetFeedParamsRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFeedsApi : public QObject {
    Q_OBJECT

public:
    OAIFeedsApi(const int timeOut = 0);
    ~OAIFeedsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  feed_id qint64 [required]
    */
    Q_DECL_DEPRECATED void getFeed(const qint64 &campaign_id, const qint64 &feed_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  feed_id qint64 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  published_time_from QDateTime [optional]
    * @param[in]  published_time_to QDateTime [optional]
    * @param[in]  status OAIFeedIndexLogsStatusType [optional]
    */
    Q_DECL_DEPRECATED void getFeedIndexLogs(const qint64 &campaign_id, const qint64 &feed_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &published_time_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &published_time_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIFeedIndexLogsStatusType> &status = ::OpenAPI::OptionalParam<OAIFeedIndexLogsStatusType>());

    /**
    * @param[in]  campaign_id qint64 [required]
    */
    Q_DECL_DEPRECATED void getFeeds(const qint64 &campaign_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  feed_id qint64 [required]
    */
    Q_DECL_DEPRECATED void refreshFeed(const qint64 &campaign_id, const qint64 &feed_id);

    /**
    * @param[in]  campaign_id qint64 [required]
    * @param[in]  feed_id qint64 [required]
    * @param[in]  oai_set_feed_params_request OAISetFeedParamsRequest [required]
    */
    Q_DECL_DEPRECATED void setFeedParams(const qint64 &campaign_id, const qint64 &feed_id, const OAISetFeedParamsRequest &oai_set_feed_params_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getFeedCallback(OAIHttpRequestWorker *worker);
    void getFeedIndexLogsCallback(OAIHttpRequestWorker *worker);
    void getFeedsCallback(OAIHttpRequestWorker *worker);
    void refreshFeedCallback(OAIHttpRequestWorker *worker);
    void setFeedParamsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getFeedSignal(OAIGetFeedResponse summary);
    void getFeedIndexLogsSignal(OAIGetFeedIndexLogsResponse summary);
    void getFeedsSignal(OAIGetFeedsResponse summary);
    void refreshFeedSignal(OAIEmptyApiResponse summary);
    void setFeedParamsSignal(OAIEmptyApiResponse summary);


    void getFeedSignalFull(OAIHttpRequestWorker *worker, OAIGetFeedResponse summary);
    void getFeedIndexLogsSignalFull(OAIHttpRequestWorker *worker, OAIGetFeedIndexLogsResponse summary);
    void getFeedsSignalFull(OAIHttpRequestWorker *worker, OAIGetFeedsResponse summary);
    void refreshFeedSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);
    void setFeedParamsSignalFull(OAIHttpRequestWorker *worker, OAIEmptyApiResponse summary);

    Q_DECL_DEPRECATED_X("Use getFeedSignalError() instead")
    void getFeedSignalE(OAIGetFeedResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedSignalError(OAIGetFeedResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedIndexLogsSignalError() instead")
    void getFeedIndexLogsSignalE(OAIGetFeedIndexLogsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedIndexLogsSignalError(OAIGetFeedIndexLogsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedsSignalError() instead")
    void getFeedsSignalE(OAIGetFeedsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedsSignalError(OAIGetFeedsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshFeedSignalError() instead")
    void refreshFeedSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshFeedSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setFeedParamsSignalError() instead")
    void setFeedParamsSignalE(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setFeedParamsSignalError(OAIEmptyApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getFeedSignalErrorFull() instead")
    void getFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedIndexLogsSignalErrorFull() instead")
    void getFeedIndexLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedIndexLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedsSignalErrorFull() instead")
    void getFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshFeedSignalErrorFull() instead")
    void refreshFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setFeedParamsSignalErrorFull() instead")
    void setFeedParamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setFeedParamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
