/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferDTO::OAIOfferDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferDTO::OAIOfferDTO() {
    this->initializeModel();
}

OAIOfferDTO::~OAIOfferDTO() {}

void OAIOfferDTO::initializeModel() {

    m_price_isSet = false;
    m_price_isValid = false;

    m_feed_id_isSet = false;
    m_feed_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_shop_category_id_isSet = false;
    m_shop_category_id_isValid = false;

    m_market_category_id_isSet = false;
    m_market_category_id_isValid = false;

    m_pre_discount_price_isSet = false;
    m_pre_discount_price_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_cut_price_isSet = false;
    m_cut_price_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_bid_isSet = false;
    m_bid_isValid = false;

    m_cbid_isSet = false;
    m_cbid_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_blocked_isSet = false;
    m_blocked_isValid = false;
}

void OAIOfferDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferDTO::fromJsonObject(QJsonObject json) {

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_feed_id_isValid = ::OpenAPI::fromJsonValue(m_feed_id, json[QString("feedId")]);
    m_feed_id_isSet = !json[QString("feedId")].isNull() && m_feed_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_shop_category_id_isValid = ::OpenAPI::fromJsonValue(m_shop_category_id, json[QString("shopCategoryId")]);
    m_shop_category_id_isSet = !json[QString("shopCategoryId")].isNull() && m_shop_category_id_isValid;

    m_market_category_id_isValid = ::OpenAPI::fromJsonValue(m_market_category_id, json[QString("marketCategoryId")]);
    m_market_category_id_isSet = !json[QString("marketCategoryId")].isNull() && m_market_category_id_isValid;

    m_pre_discount_price_isValid = ::OpenAPI::fromJsonValue(m_pre_discount_price, json[QString("preDiscountPrice")]);
    m_pre_discount_price_isSet = !json[QString("preDiscountPrice")].isNull() && m_pre_discount_price_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_cut_price_isValid = ::OpenAPI::fromJsonValue(m_cut_price, json[QString("cutPrice")]);
    m_cut_price_isSet = !json[QString("cutPrice")].isNull() && m_cut_price_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_bid_isValid = ::OpenAPI::fromJsonValue(m_bid, json[QString("bid")]);
    m_bid_isSet = !json[QString("bid")].isNull() && m_bid_isValid;

    m_cbid_isValid = ::OpenAPI::fromJsonValue(m_cbid, json[QString("cbid")]);
    m_cbid_isSet = !json[QString("cbid")].isNull() && m_cbid_isValid;

    m_fee_isValid = ::OpenAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_blocked_isValid = ::OpenAPI::fromJsonValue(m_blocked, json[QString("blocked")]);
    m_blocked_isSet = !json[QString("blocked")].isNull() && m_blocked_isValid;
}

QString OAIOfferDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_feed_id_isSet) {
        obj.insert(QString("feedId"), ::OpenAPI::toJsonValue(m_feed_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_shop_category_id_isSet) {
        obj.insert(QString("shopCategoryId"), ::OpenAPI::toJsonValue(m_shop_category_id));
    }
    if (m_market_category_id_isSet) {
        obj.insert(QString("marketCategoryId"), ::OpenAPI::toJsonValue(m_market_category_id));
    }
    if (m_pre_discount_price_isSet) {
        obj.insert(QString("preDiscountPrice"), ::OpenAPI::toJsonValue(m_pre_discount_price));
    }
    if (m_discount_isSet) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_cut_price_isSet) {
        obj.insert(QString("cutPrice"), ::OpenAPI::toJsonValue(m_cut_price));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_bid_isSet) {
        obj.insert(QString("bid"), ::OpenAPI::toJsonValue(m_bid));
    }
    if (m_cbid_isSet) {
        obj.insert(QString("cbid"), ::OpenAPI::toJsonValue(m_cbid));
    }
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::OpenAPI::toJsonValue(m_fee));
    }
    if (m_blocked_isSet) {
        obj.insert(QString("blocked"), ::OpenAPI::toJsonValue(m_blocked));
    }
    return obj;
}

double OAIOfferDTO::getPrice() const {
    return m_price;
}
void OAIOfferDTO::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIOfferDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOfferDTO::is_price_Valid() const{
    return m_price_isValid;
}

qint64 OAIOfferDTO::getFeedId() const {
    return m_feed_id;
}
void OAIOfferDTO::setFeedId(const qint64 &feed_id) {
    m_feed_id = feed_id;
    m_feed_id_isSet = true;
}

bool OAIOfferDTO::is_feed_id_Set() const{
    return m_feed_id_isSet;
}

bool OAIOfferDTO::is_feed_id_Valid() const{
    return m_feed_id_isValid;
}

QString OAIOfferDTO::getId() const {
    return m_id;
}
void OAIOfferDTO::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOfferDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOfferDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOfferDTO::getShopCategoryId() const {
    return m_shop_category_id;
}
void OAIOfferDTO::setShopCategoryId(const QString &shop_category_id) {
    m_shop_category_id = shop_category_id;
    m_shop_category_id_isSet = true;
}

bool OAIOfferDTO::is_shop_category_id_Set() const{
    return m_shop_category_id_isSet;
}

bool OAIOfferDTO::is_shop_category_id_Valid() const{
    return m_shop_category_id_isValid;
}

qint32 OAIOfferDTO::getMarketCategoryId() const {
    return m_market_category_id;
}
void OAIOfferDTO::setMarketCategoryId(const qint32 &market_category_id) {
    m_market_category_id = market_category_id;
    m_market_category_id_isSet = true;
}

bool OAIOfferDTO::is_market_category_id_Set() const{
    return m_market_category_id_isSet;
}

bool OAIOfferDTO::is_market_category_id_Valid() const{
    return m_market_category_id_isValid;
}

double OAIOfferDTO::getPreDiscountPrice() const {
    return m_pre_discount_price;
}
void OAIOfferDTO::setPreDiscountPrice(const double &pre_discount_price) {
    m_pre_discount_price = pre_discount_price;
    m_pre_discount_price_isSet = true;
}

bool OAIOfferDTO::is_pre_discount_price_Set() const{
    return m_pre_discount_price_isSet;
}

bool OAIOfferDTO::is_pre_discount_price_Valid() const{
    return m_pre_discount_price_isValid;
}

qint32 OAIOfferDTO::getDiscount() const {
    return m_discount;
}
void OAIOfferDTO::setDiscount(const qint32 &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIOfferDTO::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIOfferDTO::is_discount_Valid() const{
    return m_discount_isValid;
}

bool OAIOfferDTO::isCutPrice() const {
    return m_cut_price;
}
void OAIOfferDTO::setCutPrice(const bool &cut_price) {
    m_cut_price = cut_price;
    m_cut_price_isSet = true;
}

bool OAIOfferDTO::is_cut_price_Set() const{
    return m_cut_price_isSet;
}

bool OAIOfferDTO::is_cut_price_Valid() const{
    return m_cut_price_isValid;
}

QString OAIOfferDTO::getUrl() const {
    return m_url;
}
void OAIOfferDTO::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIOfferDTO::is_url_Set() const{
    return m_url_isSet;
}

bool OAIOfferDTO::is_url_Valid() const{
    return m_url_isValid;
}

qint64 OAIOfferDTO::getModelId() const {
    return m_model_id;
}
void OAIOfferDTO::setModelId(const qint64 &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIOfferDTO::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIOfferDTO::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QString OAIOfferDTO::getName() const {
    return m_name;
}
void OAIOfferDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOfferDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOfferDTO::is_name_Valid() const{
    return m_name_isValid;
}

OAICurrencyType OAIOfferDTO::getCurrency() const {
    return m_currency;
}
void OAIOfferDTO::setCurrency(const OAICurrencyType &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOfferDTO::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOfferDTO::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIOfferDTO::getBid() const {
    return m_bid;
}
void OAIOfferDTO::setBid(const double &bid) {
    m_bid = bid;
    m_bid_isSet = true;
}

bool OAIOfferDTO::is_bid_Set() const{
    return m_bid_isSet;
}

bool OAIOfferDTO::is_bid_Valid() const{
    return m_bid_isValid;
}

double OAIOfferDTO::getCbid() const {
    return m_cbid;
}
void OAIOfferDTO::setCbid(const double &cbid) {
    m_cbid = cbid;
    m_cbid_isSet = true;
}

bool OAIOfferDTO::is_cbid_Set() const{
    return m_cbid_isSet;
}

bool OAIOfferDTO::is_cbid_Valid() const{
    return m_cbid_isValid;
}

double OAIOfferDTO::getFee() const {
    return m_fee;
}
void OAIOfferDTO::setFee(const double &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool OAIOfferDTO::is_fee_Set() const{
    return m_fee_isSet;
}

bool OAIOfferDTO::is_fee_Valid() const{
    return m_fee_isValid;
}

bool OAIOfferDTO::isBlocked() const {
    return m_blocked;
}
void OAIOfferDTO::setBlocked(const bool &blocked) {
    m_blocked = blocked;
    m_blocked_isSet = true;
}

bool OAIOfferDTO::is_blocked_Set() const{
    return m_blocked_isSet;
}

bool OAIOfferDTO::is_blocked_Valid() const{
    return m_blocked_isValid;
}

bool OAIOfferDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_discount_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cut_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cbid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_id_isValid && true;
}

} // namespace OpenAPI
