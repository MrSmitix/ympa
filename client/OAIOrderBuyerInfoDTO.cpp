/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderBuyerInfoDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderBuyerInfoDTO::OAIOrderBuyerInfoDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderBuyerInfoDTO::OAIOrderBuyerInfoDTO() {
    this->initializeModel();
}

OAIOrderBuyerInfoDTO::~OAIOrderBuyerInfoDTO() {}

void OAIOrderBuyerInfoDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_middle_name_isSet = false;
    m_middle_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;
}

void OAIOrderBuyerInfoDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderBuyerInfoDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_middle_name_isValid = ::OpenAPI::fromJsonValue(m_middle_name, json[QString("middleName")]);
    m_middle_name_isSet = !json[QString("middleName")].isNull() && m_middle_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;
}

QString OAIOrderBuyerInfoDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderBuyerInfoDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_middle_name_isSet) {
        obj.insert(QString("middleName"), ::OpenAPI::toJsonValue(m_middle_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    return obj;
}

QString OAIOrderBuyerInfoDTO::getId() const {
    return m_id;
}
void OAIOrderBuyerInfoDTO::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderBuyerInfoDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderBuyerInfoDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrderBuyerInfoDTO::getLastName() const {
    return m_last_name;
}
void OAIOrderBuyerInfoDTO::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIOrderBuyerInfoDTO::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIOrderBuyerInfoDTO::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIOrderBuyerInfoDTO::getFirstName() const {
    return m_first_name;
}
void OAIOrderBuyerInfoDTO::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIOrderBuyerInfoDTO::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIOrderBuyerInfoDTO::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIOrderBuyerInfoDTO::getMiddleName() const {
    return m_middle_name;
}
void OAIOrderBuyerInfoDTO::setMiddleName(const QString &middle_name) {
    m_middle_name = middle_name;
    m_middle_name_isSet = true;
}

bool OAIOrderBuyerInfoDTO::is_middle_name_Set() const{
    return m_middle_name_isSet;
}

bool OAIOrderBuyerInfoDTO::is_middle_name_Valid() const{
    return m_middle_name_isValid;
}

OAIOrderBuyerType OAIOrderBuyerInfoDTO::getType() const {
    return m_type;
}
void OAIOrderBuyerInfoDTO::setType(const OAIOrderBuyerType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOrderBuyerInfoDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrderBuyerInfoDTO::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOrderBuyerInfoDTO::getPhone() const {
    return m_phone;
}
void OAIOrderBuyerInfoDTO::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIOrderBuyerInfoDTO::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIOrderBuyerInfoDTO::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAIOrderBuyerInfoDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderBuyerInfoDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
