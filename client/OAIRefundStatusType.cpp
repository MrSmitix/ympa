/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefundStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefundStatusType::OAIRefundStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefundStatusType::OAIRefundStatusType() {
    this->initializeModel();
}

OAIRefundStatusType::~OAIRefundStatusType() {}

void OAIRefundStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRefundStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRefundStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("STARTED_BY_USER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRefundStatusType::STARTED_BY_USER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REFUND_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRefundStatusType::REFUND_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REFUNDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRefundStatusType::REFUNDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRefundStatusType::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_FOR_DECISION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRefundStatusType::WAITING_FOR_DECISION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DECISION_MADE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRefundStatusType::DECISION_MADE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REFUNDED_WITH_BONUSES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRefundStatusType::REFUNDED_WITH_BONUSES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REFUNDED_BY_SHOP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRefundStatusType::REFUNDED_BY_SHOP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRefundStatusType::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETE_WITHOUT_REFUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRefundStatusType::COMPLETE_WITHOUT_REFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRefundStatusType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRefundStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRefundStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRefundStatusType::STARTED_BY_USER:
            val = "STARTED_BY_USER";
            break;
        case eOAIRefundStatusType::REFUND_IN_PROGRESS:
            val = "REFUND_IN_PROGRESS";
            break;
        case eOAIRefundStatusType::REFUNDED:
            val = "REFUNDED";
            break;
        case eOAIRefundStatusType::FAILED:
            val = "FAILED";
            break;
        case eOAIRefundStatusType::WAITING_FOR_DECISION:
            val = "WAITING_FOR_DECISION";
            break;
        case eOAIRefundStatusType::DECISION_MADE:
            val = "DECISION_MADE";
            break;
        case eOAIRefundStatusType::REFUNDED_WITH_BONUSES:
            val = "REFUNDED_WITH_BONUSES";
            break;
        case eOAIRefundStatusType::REFUNDED_BY_SHOP:
            val = "REFUNDED_BY_SHOP";
            break;
        case eOAIRefundStatusType::CANCELLED:
            val = "CANCELLED";
            break;
        case eOAIRefundStatusType::COMPLETE_WITHOUT_REFUND:
            val = "COMPLETE_WITHOUT_REFUND";
            break;
        case eOAIRefundStatusType::UNKNOWN:
            val = "UNKNOWN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRefundStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRefundStatusType::eOAIRefundStatusType OAIRefundStatusType::getValue() const {
    return m_value;
}

void OAIRefundStatusType::setValue(const OAIRefundStatusType::eOAIRefundStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRefundStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRefundStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
