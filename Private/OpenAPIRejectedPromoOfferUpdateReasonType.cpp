/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRejectedPromoOfferUpdateReasonType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIRejectedPromoOfferUpdateReasonType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIRejectedPromoOfferUpdateReasonType::Values::OfferDoesNotExist:
		return TEXT("OFFER_DOES_NOT_EXIST");
	case OpenAPIRejectedPromoOfferUpdateReasonType::Values::OfferDuplication:
		return TEXT("OFFER_DUPLICATION");
	case OpenAPIRejectedPromoOfferUpdateReasonType::Values::OfferNotEligibleForPromo:
		return TEXT("OFFER_NOT_ELIGIBLE_FOR_PROMO");
	case OpenAPIRejectedPromoOfferUpdateReasonType::Values::OfferPromosMaxByteSizeExceeded:
		return TEXT("OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED");
	case OpenAPIRejectedPromoOfferUpdateReasonType::Values::DeadlineForFocusPromosExceeded:
		return TEXT("DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED");
	case OpenAPIRejectedPromoOfferUpdateReasonType::Values::EmptyOldPrice:
		return TEXT("EMPTY_OLD_PRICE");
	case OpenAPIRejectedPromoOfferUpdateReasonType::Values::EmptyPromoPrice:
		return TEXT("EMPTY_PROMO_PRICE");
	case OpenAPIRejectedPromoOfferUpdateReasonType::Values::MaxPromoPriceExceeded:
		return TEXT("MAX_PROMO_PRICE_EXCEEDED");
	case OpenAPIRejectedPromoOfferUpdateReasonType::Values::PromoPriceBiggerThanMax:
		return TEXT("PROMO_PRICE_BIGGER_THAN_MAX");
	case OpenAPIRejectedPromoOfferUpdateReasonType::Values::PromoPriceSmallerThanMin:
		return TEXT("PROMO_PRICE_SMALLER_THAN_MIN");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIRejectedPromoOfferUpdateReasonType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIRejectedPromoOfferUpdateReasonType::EnumToString(const OpenAPIRejectedPromoOfferUpdateReasonType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIRejectedPromoOfferUpdateReasonType::Values& Value)
{
	static TMap<FString, OpenAPIRejectedPromoOfferUpdateReasonType::Values> StringToEnum = { 
		{ TEXT("OFFER_DOES_NOT_EXIST"), OpenAPIRejectedPromoOfferUpdateReasonType::Values::OfferDoesNotExist },
		{ TEXT("OFFER_DUPLICATION"), OpenAPIRejectedPromoOfferUpdateReasonType::Values::OfferDuplication },
		{ TEXT("OFFER_NOT_ELIGIBLE_FOR_PROMO"), OpenAPIRejectedPromoOfferUpdateReasonType::Values::OfferNotEligibleForPromo },
		{ TEXT("OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED"), OpenAPIRejectedPromoOfferUpdateReasonType::Values::OfferPromosMaxByteSizeExceeded },
		{ TEXT("DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED"), OpenAPIRejectedPromoOfferUpdateReasonType::Values::DeadlineForFocusPromosExceeded },
		{ TEXT("EMPTY_OLD_PRICE"), OpenAPIRejectedPromoOfferUpdateReasonType::Values::EmptyOldPrice },
		{ TEXT("EMPTY_PROMO_PRICE"), OpenAPIRejectedPromoOfferUpdateReasonType::Values::EmptyPromoPrice },
		{ TEXT("MAX_PROMO_PRICE_EXCEEDED"), OpenAPIRejectedPromoOfferUpdateReasonType::Values::MaxPromoPriceExceeded },
		{ TEXT("PROMO_PRICE_BIGGER_THAN_MAX"), OpenAPIRejectedPromoOfferUpdateReasonType::Values::PromoPriceBiggerThanMax },
		{ TEXT("PROMO_PRICE_SMALLER_THAN_MIN"), OpenAPIRejectedPromoOfferUpdateReasonType::Values::PromoPriceSmallerThanMin }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIRejectedPromoOfferUpdateReasonType::EnumFromString(const FString& EnumAsString, OpenAPIRejectedPromoOfferUpdateReasonType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIRejectedPromoOfferUpdateReasonType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIRejectedPromoOfferUpdateReasonType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIRejectedPromoOfferUpdateReasonType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIRejectedPromoOfferUpdateReasonType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
