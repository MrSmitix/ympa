/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIFeedDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIFeedDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (Login.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("login")); WriteJsonValue(Writer, Login.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Password.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("password")); WriteJsonValue(Writer, Password.GetValue());
	}
	if (UploadDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("uploadDate")); WriteJsonValue(Writer, UploadDate.GetValue());
	}
	if (Url.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("url")); WriteJsonValue(Writer, Url.GetValue());
	}
	if (Content.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("content")); WriteJsonValue(Writer, Content.GetValue());
	}
	if (Download.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("download")); WriteJsonValue(Writer, Download.GetValue());
	}
	if (Placement.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("placement")); WriteJsonValue(Writer, Placement.GetValue());
	}
	if (Publication.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("publication")); WriteJsonValue(Writer, Publication.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIFeedDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("login"), Login);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("password"), Password);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("uploadDate"), UploadDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("url"), Url);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("content"), Content);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("download"), Download);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("placement"), Placement);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("publication"), Publication);

	return ParseSuccess;
}

}
