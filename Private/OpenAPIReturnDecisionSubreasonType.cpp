/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIReturnDecisionSubreasonType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIReturnDecisionSubreasonType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIReturnDecisionSubreasonType::Values::UserDidNotLike:
		return TEXT("USER_DID_NOT_LIKE");
	case OpenAPIReturnDecisionSubreasonType::Values::UserChangedMind:
		return TEXT("USER_CHANGED_MIND");
	case OpenAPIReturnDecisionSubreasonType::Values::DeliveredTooLong:
		return TEXT("DELIVERED_TOO_LONG");
	case OpenAPIReturnDecisionSubreasonType::Values::BadPackage:
		return TEXT("BAD_PACKAGE");
	case OpenAPIReturnDecisionSubreasonType::Values::Damaged:
		return TEXT("DAMAGED");
	case OpenAPIReturnDecisionSubreasonType::Values::NotWorking:
		return TEXT("NOT_WORKING");
	case OpenAPIReturnDecisionSubreasonType::Values::Incompleteness:
		return TEXT("INCOMPLETENESS");
	case OpenAPIReturnDecisionSubreasonType::Values::WrongItem:
		return TEXT("WRONG_ITEM");
	case OpenAPIReturnDecisionSubreasonType::Values::WrongColor:
		return TEXT("WRONG_COLOR");
	case OpenAPIReturnDecisionSubreasonType::Values::DidNotMatchDescription:
		return TEXT("DID_NOT_MATCH_DESCRIPTION");
	case OpenAPIReturnDecisionSubreasonType::Values::Unknown:
		return TEXT("UNKNOWN");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReturnDecisionSubreasonType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReturnDecisionSubreasonType::EnumToString(const OpenAPIReturnDecisionSubreasonType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReturnDecisionSubreasonType::Values& Value)
{
	static TMap<FString, OpenAPIReturnDecisionSubreasonType::Values> StringToEnum = { 
		{ TEXT("USER_DID_NOT_LIKE"), OpenAPIReturnDecisionSubreasonType::Values::UserDidNotLike },
		{ TEXT("USER_CHANGED_MIND"), OpenAPIReturnDecisionSubreasonType::Values::UserChangedMind },
		{ TEXT("DELIVERED_TOO_LONG"), OpenAPIReturnDecisionSubreasonType::Values::DeliveredTooLong },
		{ TEXT("BAD_PACKAGE"), OpenAPIReturnDecisionSubreasonType::Values::BadPackage },
		{ TEXT("DAMAGED"), OpenAPIReturnDecisionSubreasonType::Values::Damaged },
		{ TEXT("NOT_WORKING"), OpenAPIReturnDecisionSubreasonType::Values::NotWorking },
		{ TEXT("INCOMPLETENESS"), OpenAPIReturnDecisionSubreasonType::Values::Incompleteness },
		{ TEXT("WRONG_ITEM"), OpenAPIReturnDecisionSubreasonType::Values::WrongItem },
		{ TEXT("WRONG_COLOR"), OpenAPIReturnDecisionSubreasonType::Values::WrongColor },
		{ TEXT("DID_NOT_MATCH_DESCRIPTION"), OpenAPIReturnDecisionSubreasonType::Values::DidNotMatchDescription },
		{ TEXT("UNKNOWN"), OpenAPIReturnDecisionSubreasonType::Values::Unknown }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReturnDecisionSubreasonType::EnumFromString(const FString& EnumAsString, OpenAPIReturnDecisionSubreasonType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReturnDecisionSubreasonType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReturnDecisionSubreasonType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIReturnDecisionSubreasonType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIReturnDecisionSubreasonType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
