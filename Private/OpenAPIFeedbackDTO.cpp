/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIFeedbackDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIFeedbackDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (CreatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("createdAt")); WriteJsonValue(Writer, CreatedAt.GetValue());
	}
	if (Text.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("text")); WriteJsonValue(Writer, Text.GetValue());
	}
	if (State.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("state")); WriteJsonValue(Writer, State.GetValue());
	}
	if (Author.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("author")); WriteJsonValue(Writer, Author.GetValue());
	}
	if (Pro.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pro")); WriteJsonValue(Writer, Pro.GetValue());
	}
	if (Contra.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("contra")); WriteJsonValue(Writer, Contra.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("comments")); WriteJsonValue(Writer, Comments);
	if (Shop.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shop")); WriteJsonValue(Writer, Shop.GetValue());
	}
	if (Resolved.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("resolved")); WriteJsonValue(Writer, Resolved.GetValue());
	}
	if (Verified.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("verified")); WriteJsonValue(Writer, Verified.GetValue());
	}
	if (Recommend.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("recommend")); WriteJsonValue(Writer, Recommend.GetValue());
	}
	if (Grades.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("grades")); WriteJsonValue(Writer, Grades.GetValue());
	}
	if (Order.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("order")); WriteJsonValue(Writer, Order.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIFeedbackDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("createdAt"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("text"), Text);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("state"), State);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("author"), Author);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pro"), Pro);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contra"), Contra);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("comments"), Comments);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shop"), Shop);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("resolved"), Resolved);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("verified"), Verified);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("recommend"), Recommend);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("grades"), Grades);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("order"), Order);

	return ParseSuccess;
}

}
