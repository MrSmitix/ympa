/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOfferContentErrorType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIOfferContentErrorType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIOfferContentErrorType::Values::OfferNotFound:
		return TEXT("OFFER_NOT_FOUND");
	case OpenAPIOfferContentErrorType::Values::UnknownCategory:
		return TEXT("UNKNOWN_CATEGORY");
	case OpenAPIOfferContentErrorType::Values::CategoryMismatch:
		return TEXT("CATEGORY_MISMATCH");
	case OpenAPIOfferContentErrorType::Values::UnknownParameter:
		return TEXT("UNKNOWN_PARAMETER");
	case OpenAPIOfferContentErrorType::Values::UnexpectedBooleanValue:
		return TEXT("UNEXPECTED_BOOLEAN_VALUE");
	case OpenAPIOfferContentErrorType::Values::NumberFormat:
		return TEXT("NUMBER_FORMAT");
	case OpenAPIOfferContentErrorType::Values::ValueBlank:
		return TEXT("VALUE_BLANK");
	case OpenAPIOfferContentErrorType::Values::InvalidUnitId:
		return TEXT("INVALID_UNIT_ID");
	case OpenAPIOfferContentErrorType::Values::InvalidGroupIdLength:
		return TEXT("INVALID_GROUP_ID_LENGTH");
	case OpenAPIOfferContentErrorType::Values::InvalidGroupIdCharacters:
		return TEXT("INVALID_GROUP_ID_CHARACTERS");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOfferContentErrorType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOfferContentErrorType::EnumToString(const OpenAPIOfferContentErrorType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOfferContentErrorType::Values& Value)
{
	static TMap<FString, OpenAPIOfferContentErrorType::Values> StringToEnum = { 
		{ TEXT("OFFER_NOT_FOUND"), OpenAPIOfferContentErrorType::Values::OfferNotFound },
		{ TEXT("UNKNOWN_CATEGORY"), OpenAPIOfferContentErrorType::Values::UnknownCategory },
		{ TEXT("CATEGORY_MISMATCH"), OpenAPIOfferContentErrorType::Values::CategoryMismatch },
		{ TEXT("UNKNOWN_PARAMETER"), OpenAPIOfferContentErrorType::Values::UnknownParameter },
		{ TEXT("UNEXPECTED_BOOLEAN_VALUE"), OpenAPIOfferContentErrorType::Values::UnexpectedBooleanValue },
		{ TEXT("NUMBER_FORMAT"), OpenAPIOfferContentErrorType::Values::NumberFormat },
		{ TEXT("VALUE_BLANK"), OpenAPIOfferContentErrorType::Values::ValueBlank },
		{ TEXT("INVALID_UNIT_ID"), OpenAPIOfferContentErrorType::Values::InvalidUnitId },
		{ TEXT("INVALID_GROUP_ID_LENGTH"), OpenAPIOfferContentErrorType::Values::InvalidGroupIdLength },
		{ TEXT("INVALID_GROUP_ID_CHARACTERS"), OpenAPIOfferContentErrorType::Values::InvalidGroupIdCharacters }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOfferContentErrorType::EnumFromString(const FString& EnumAsString, OpenAPIOfferContentErrorType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOfferContentErrorType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOfferContentErrorType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIOfferContentErrorType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIOfferContentErrorType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
