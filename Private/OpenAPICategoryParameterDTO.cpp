/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICategoryParameterDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPICategoryParameterDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	if (Unit.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("unit")); WriteJsonValue(Writer, Unit.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (RecommendationTypes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("recommendationTypes")); WriteJsonValue(Writer, RecommendationTypes.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("required")); WriteJsonValue(Writer, Required);
	Writer->WriteIdentifierPrefix(TEXT("filtering")); WriteJsonValue(Writer, Filtering);
	Writer->WriteIdentifierPrefix(TEXT("distinctive")); WriteJsonValue(Writer, Distinctive);
	Writer->WriteIdentifierPrefix(TEXT("multivalue")); WriteJsonValue(Writer, Multivalue);
	Writer->WriteIdentifierPrefix(TEXT("allowCustomValues")); WriteJsonValue(Writer, AllowCustomValues);
	if (Values.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("values")); WriteJsonValue(Writer, Values.GetValue());
	}
	if (Constraints.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("constraints")); WriteJsonValue(Writer, Constraints.GetValue());
	}
	if (ValueRestrictions.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("valueRestrictions")); WriteJsonValue(Writer, ValueRestrictions.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICategoryParameterDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("unit"), Unit);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("recommendationTypes"), RecommendationTypes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("required"), Required);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("filtering"), Filtering);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("distinctive"), Distinctive);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("multivalue"), Multivalue);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("allowCustomValues"), AllowCustomValues);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("values"), Values);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("constraints"), Constraints);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("valueRestrictions"), ValueRestrictions);

	return ParseSuccess;
}

}
