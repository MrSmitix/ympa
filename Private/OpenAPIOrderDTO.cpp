/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOrderDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIOrderDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	if (Substatus.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("substatus")); WriteJsonValue(Writer, Substatus.GetValue());
	}
	if (CreationDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("creationDate")); WriteJsonValue(Writer, CreationDate.GetValue());
	}
	if (UpdatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("updatedAt")); WriteJsonValue(Writer, UpdatedAt.GetValue());
	}
	if (Currency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("currency")); WriteJsonValue(Writer, Currency.GetValue());
	}
	if (ItemsTotal.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("itemsTotal")); WriteJsonValue(Writer, ItemsTotal.GetValue());
	}
	if (DeliveryTotal.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("deliveryTotal")); WriteJsonValue(Writer, DeliveryTotal.GetValue());
	}
	if (BuyerItemsTotal.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("buyerItemsTotal")); WriteJsonValue(Writer, BuyerItemsTotal.GetValue());
	}
	if (BuyerTotal.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("buyerTotal")); WriteJsonValue(Writer, BuyerTotal.GetValue());
	}
	if (BuyerItemsTotalBeforeDiscount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("buyerItemsTotalBeforeDiscount")); WriteJsonValue(Writer, BuyerItemsTotalBeforeDiscount.GetValue());
	}
	if (BuyerTotalBeforeDiscount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("buyerTotalBeforeDiscount")); WriteJsonValue(Writer, BuyerTotalBeforeDiscount.GetValue());
	}
	if (PaymentType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("paymentType")); WriteJsonValue(Writer, PaymentType.GetValue());
	}
	if (PaymentMethod.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("paymentMethod")); WriteJsonValue(Writer, PaymentMethod.GetValue());
	}
	if (Fake.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fake")); WriteJsonValue(Writer, Fake.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("items")); WriteJsonValue(Writer, Items);
	if (Subsidies.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subsidies")); WriteJsonValue(Writer, Subsidies.GetValue());
	}
	if (Delivery.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("delivery")); WriteJsonValue(Writer, Delivery.GetValue());
	}
	if (Buyer.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("buyer")); WriteJsonValue(Writer, Buyer.GetValue());
	}
	if (Notes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("notes")); WriteJsonValue(Writer, Notes.GetValue());
	}
	if (TaxSystem.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("taxSystem")); WriteJsonValue(Writer, TaxSystem.GetValue());
	}
	if (CancelRequested.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("cancelRequested")); WriteJsonValue(Writer, CancelRequested.GetValue());
	}
	if (ExpiryDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("expiryDate")); WriteJsonValue(Writer, ExpiryDate.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIOrderDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("substatus"), Substatus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("creationDate"), CreationDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updatedAt"), UpdatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currency"), Currency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("itemsTotal"), ItemsTotal);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deliveryTotal"), DeliveryTotal);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("buyerItemsTotal"), BuyerItemsTotal);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("buyerTotal"), BuyerTotal);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("buyerItemsTotalBeforeDiscount"), BuyerItemsTotalBeforeDiscount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("buyerTotalBeforeDiscount"), BuyerTotalBeforeDiscount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("paymentType"), PaymentType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("paymentMethod"), PaymentMethod);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fake"), Fake);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("items"), Items);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subsidies"), Subsidies);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("delivery"), Delivery);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("buyer"), Buyer);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("notes"), Notes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("taxSystem"), TaxSystem);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("cancelRequested"), CancelRequested);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("expiryDate"), ExpiryDate);

	return ParseSuccess;
}

}
