/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIReturnInstanceStockType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIReturnInstanceStockType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIReturnInstanceStockType::Values::Fit:
		return TEXT("FIT");
	case OpenAPIReturnInstanceStockType::Values::Defect:
		return TEXT("DEFECT");
	case OpenAPIReturnInstanceStockType::Values::Anomaly:
		return TEXT("ANOMALY");
	case OpenAPIReturnInstanceStockType::Values::Surplus:
		return TEXT("SURPLUS");
	case OpenAPIReturnInstanceStockType::Values::Expired:
		return TEXT("EXPIRED");
	case OpenAPIReturnInstanceStockType::Values::Misgrading:
		return TEXT("MISGRADING");
	case OpenAPIReturnInstanceStockType::Values::Undefined:
		return TEXT("UNDEFINED");
	case OpenAPIReturnInstanceStockType::Values::IncorrectImei:
		return TEXT("INCORRECT_IMEI");
	case OpenAPIReturnInstanceStockType::Values::IncorrectSerialNumber:
		return TEXT("INCORRECT_SERIAL_NUMBER");
	case OpenAPIReturnInstanceStockType::Values::IncorrectCis:
		return TEXT("INCORRECT_CIS");
	case OpenAPIReturnInstanceStockType::Values::PartMissing:
		return TEXT("PART_MISSING");
	case OpenAPIReturnInstanceStockType::Values::NonComplient:
		return TEXT("NON_COMPLIENT");
	case OpenAPIReturnInstanceStockType::Values::NotAcceptable:
		return TEXT("NOT_ACCEPTABLE");
	case OpenAPIReturnInstanceStockType::Values::Service:
		return TEXT("SERVICE");
	case OpenAPIReturnInstanceStockType::Values::Markdown:
		return TEXT("MARKDOWN");
	case OpenAPIReturnInstanceStockType::Values::Demo:
		return TEXT("DEMO");
	case OpenAPIReturnInstanceStockType::Values::Repair:
		return TEXT("REPAIR");
	case OpenAPIReturnInstanceStockType::Values::Firmware:
		return TEXT("FIRMWARE");
	case OpenAPIReturnInstanceStockType::Values::Unknown:
		return TEXT("UNKNOWN");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReturnInstanceStockType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReturnInstanceStockType::EnumToString(const OpenAPIReturnInstanceStockType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReturnInstanceStockType::Values& Value)
{
	static TMap<FString, OpenAPIReturnInstanceStockType::Values> StringToEnum = { 
		{ TEXT("FIT"), OpenAPIReturnInstanceStockType::Values::Fit },
		{ TEXT("DEFECT"), OpenAPIReturnInstanceStockType::Values::Defect },
		{ TEXT("ANOMALY"), OpenAPIReturnInstanceStockType::Values::Anomaly },
		{ TEXT("SURPLUS"), OpenAPIReturnInstanceStockType::Values::Surplus },
		{ TEXT("EXPIRED"), OpenAPIReturnInstanceStockType::Values::Expired },
		{ TEXT("MISGRADING"), OpenAPIReturnInstanceStockType::Values::Misgrading },
		{ TEXT("UNDEFINED"), OpenAPIReturnInstanceStockType::Values::Undefined },
		{ TEXT("INCORRECT_IMEI"), OpenAPIReturnInstanceStockType::Values::IncorrectImei },
		{ TEXT("INCORRECT_SERIAL_NUMBER"), OpenAPIReturnInstanceStockType::Values::IncorrectSerialNumber },
		{ TEXT("INCORRECT_CIS"), OpenAPIReturnInstanceStockType::Values::IncorrectCis },
		{ TEXT("PART_MISSING"), OpenAPIReturnInstanceStockType::Values::PartMissing },
		{ TEXT("NON_COMPLIENT"), OpenAPIReturnInstanceStockType::Values::NonComplient },
		{ TEXT("NOT_ACCEPTABLE"), OpenAPIReturnInstanceStockType::Values::NotAcceptable },
		{ TEXT("SERVICE"), OpenAPIReturnInstanceStockType::Values::Service },
		{ TEXT("MARKDOWN"), OpenAPIReturnInstanceStockType::Values::Markdown },
		{ TEXT("DEMO"), OpenAPIReturnInstanceStockType::Values::Demo },
		{ TEXT("REPAIR"), OpenAPIReturnInstanceStockType::Values::Repair },
		{ TEXT("FIRMWARE"), OpenAPIReturnInstanceStockType::Values::Firmware },
		{ TEXT("UNKNOWN"), OpenAPIReturnInstanceStockType::Values::Unknown }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReturnInstanceStockType::EnumFromString(const FString& EnumAsString, OpenAPIReturnInstanceStockType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReturnInstanceStockType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReturnInstanceStockType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIReturnInstanceStockType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIReturnInstanceStockType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
