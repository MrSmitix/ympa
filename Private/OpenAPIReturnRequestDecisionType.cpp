/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIReturnRequestDecisionType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIReturnRequestDecisionType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIReturnRequestDecisionType::Values::RefundMoney:
		return TEXT("REFUND_MONEY");
	case OpenAPIReturnRequestDecisionType::Values::RefundMoneyIncludingShipment:
		return TEXT("REFUND_MONEY_INCLUDING_SHIPMENT");
	case OpenAPIReturnRequestDecisionType::Values::Repair:
		return TEXT("REPAIR");
	case OpenAPIReturnRequestDecisionType::Values::Replace:
		return TEXT("REPLACE");
	case OpenAPIReturnRequestDecisionType::Values::SendToExamination:
		return TEXT("SEND_TO_EXAMINATION");
	case OpenAPIReturnRequestDecisionType::Values::DeclineRefund:
		return TEXT("DECLINE_REFUND");
	case OpenAPIReturnRequestDecisionType::Values::OtherDecision:
		return TEXT("OTHER_DECISION");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReturnRequestDecisionType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReturnRequestDecisionType::EnumToString(const OpenAPIReturnRequestDecisionType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReturnRequestDecisionType::Values& Value)
{
	static TMap<FString, OpenAPIReturnRequestDecisionType::Values> StringToEnum = { 
		{ TEXT("REFUND_MONEY"), OpenAPIReturnRequestDecisionType::Values::RefundMoney },
		{ TEXT("REFUND_MONEY_INCLUDING_SHIPMENT"), OpenAPIReturnRequestDecisionType::Values::RefundMoneyIncludingShipment },
		{ TEXT("REPAIR"), OpenAPIReturnRequestDecisionType::Values::Repair },
		{ TEXT("REPLACE"), OpenAPIReturnRequestDecisionType::Values::Replace },
		{ TEXT("SEND_TO_EXAMINATION"), OpenAPIReturnRequestDecisionType::Values::SendToExamination },
		{ TEXT("DECLINE_REFUND"), OpenAPIReturnRequestDecisionType::Values::DeclineRefund },
		{ TEXT("OTHER_DECISION"), OpenAPIReturnRequestDecisionType::Values::OtherDecision }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReturnRequestDecisionType::EnumFromString(const FString& EnumAsString, OpenAPIReturnRequestDecisionType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReturnRequestDecisionType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReturnRequestDecisionType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIReturnRequestDecisionType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIReturnRequestDecisionType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
