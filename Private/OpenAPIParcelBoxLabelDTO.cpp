/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIParcelBoxLabelDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIParcelBoxLabelDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("url")); WriteJsonValue(Writer, Url);
	Writer->WriteIdentifierPrefix(TEXT("supplierName")); WriteJsonValue(Writer, SupplierName);
	Writer->WriteIdentifierPrefix(TEXT("deliveryServiceName")); WriteJsonValue(Writer, DeliveryServiceName);
	Writer->WriteIdentifierPrefix(TEXT("orderId")); WriteJsonValue(Writer, OrderId);
	Writer->WriteIdentifierPrefix(TEXT("orderNum")); WriteJsonValue(Writer, OrderNum);
	Writer->WriteIdentifierPrefix(TEXT("recipientName")); WriteJsonValue(Writer, RecipientName);
	Writer->WriteIdentifierPrefix(TEXT("boxId")); WriteJsonValue(Writer, BoxId);
	Writer->WriteIdentifierPrefix(TEXT("fulfilmentId")); WriteJsonValue(Writer, FulfilmentId);
	Writer->WriteIdentifierPrefix(TEXT("place")); WriteJsonValue(Writer, Place);
	Writer->WriteIdentifierPrefix(TEXT("weight")); WriteJsonValue(Writer, Weight);
	Writer->WriteIdentifierPrefix(TEXT("deliveryServiceId")); WriteJsonValue(Writer, DeliveryServiceId);
	if (DeliveryAddress.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("deliveryAddress")); WriteJsonValue(Writer, DeliveryAddress.GetValue());
	}
	if (ShipmentDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shipmentDate")); WriteJsonValue(Writer, ShipmentDate.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIParcelBoxLabelDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("url"), Url);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("supplierName"), SupplierName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deliveryServiceName"), DeliveryServiceName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("orderId"), OrderId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("orderNum"), OrderNum);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("recipientName"), RecipientName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("boxId"), BoxId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fulfilmentId"), FulfilmentId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("place"), Place);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("weight"), Weight);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deliveryServiceId"), DeliveryServiceId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deliveryAddress"), DeliveryAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shipmentDate"), ShipmentDate);

	return ParseSuccess;
}

}
