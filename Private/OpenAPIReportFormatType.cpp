/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIReportFormatType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIReportFormatType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIReportFormatType::Values::File:
		return TEXT("FILE");
	case OpenAPIReportFormatType::Values::Csv:
		return TEXT("CSV");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReportFormatType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReportFormatType::EnumToString(const OpenAPIReportFormatType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReportFormatType::Values& Value)
{
	static TMap<FString, OpenAPIReportFormatType::Values> StringToEnum = { 
		{ TEXT("FILE"), OpenAPIReportFormatType::Values::File },
		{ TEXT("CSV"), OpenAPIReportFormatType::Values::Csv }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReportFormatType::EnumFromString(const FString& EnumAsString, OpenAPIReportFormatType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReportFormatType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReportFormatType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIReportFormatType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIReportFormatType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
