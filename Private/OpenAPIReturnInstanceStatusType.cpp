/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIReturnInstanceStatusType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIReturnInstanceStatusType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIReturnInstanceStatusType::Values::Created:
		return TEXT("CREATED");
	case OpenAPIReturnInstanceStatusType::Values::Received:
		return TEXT("RECEIVED");
	case OpenAPIReturnInstanceStatusType::Values::InTransit:
		return TEXT("IN_TRANSIT");
	case OpenAPIReturnInstanceStatusType::Values::ReadyForPickup:
		return TEXT("READY_FOR_PICKUP");
	case OpenAPIReturnInstanceStatusType::Values::Picked:
		return TEXT("PICKED");
	case OpenAPIReturnInstanceStatusType::Values::ReceivedOnFulfillment:
		return TEXT("RECEIVED_ON_FULFILLMENT");
	case OpenAPIReturnInstanceStatusType::Values::Cancelled:
		return TEXT("CANCELLED");
	case OpenAPIReturnInstanceStatusType::Values::Lost:
		return TEXT("LOST");
	case OpenAPIReturnInstanceStatusType::Values::Utilized:
		return TEXT("UTILIZED");
	case OpenAPIReturnInstanceStatusType::Values::PreparedForUtilization:
		return TEXT("PREPARED_FOR_UTILIZATION");
	case OpenAPIReturnInstanceStatusType::Values::Expropriated:
		return TEXT("EXPROPRIATED");
	case OpenAPIReturnInstanceStatusType::Values::NotInDemand:
		return TEXT("NOT_IN_DEMAND");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReturnInstanceStatusType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReturnInstanceStatusType::EnumToString(const OpenAPIReturnInstanceStatusType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReturnInstanceStatusType::Values& Value)
{
	static TMap<FString, OpenAPIReturnInstanceStatusType::Values> StringToEnum = { 
		{ TEXT("CREATED"), OpenAPIReturnInstanceStatusType::Values::Created },
		{ TEXT("RECEIVED"), OpenAPIReturnInstanceStatusType::Values::Received },
		{ TEXT("IN_TRANSIT"), OpenAPIReturnInstanceStatusType::Values::InTransit },
		{ TEXT("READY_FOR_PICKUP"), OpenAPIReturnInstanceStatusType::Values::ReadyForPickup },
		{ TEXT("PICKED"), OpenAPIReturnInstanceStatusType::Values::Picked },
		{ TEXT("RECEIVED_ON_FULFILLMENT"), OpenAPIReturnInstanceStatusType::Values::ReceivedOnFulfillment },
		{ TEXT("CANCELLED"), OpenAPIReturnInstanceStatusType::Values::Cancelled },
		{ TEXT("LOST"), OpenAPIReturnInstanceStatusType::Values::Lost },
		{ TEXT("UTILIZED"), OpenAPIReturnInstanceStatusType::Values::Utilized },
		{ TEXT("PREPARED_FOR_UTILIZATION"), OpenAPIReturnInstanceStatusType::Values::PreparedForUtilization },
		{ TEXT("EXPROPRIATED"), OpenAPIReturnInstanceStatusType::Values::Expropriated },
		{ TEXT("NOT_IN_DEMAND"), OpenAPIReturnInstanceStatusType::Values::NotInDemand }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReturnInstanceStatusType::EnumFromString(const FString& EnumAsString, OpenAPIReturnInstanceStatusType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReturnInstanceStatusType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReturnInstanceStatusType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIReturnInstanceStatusType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIReturnInstanceStatusType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
