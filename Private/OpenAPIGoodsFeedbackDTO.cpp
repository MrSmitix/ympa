/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIGoodsFeedbackDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIGoodsFeedbackDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("feedbackId")); WriteJsonValue(Writer, FeedbackId);
	Writer->WriteIdentifierPrefix(TEXT("createdAt")); WriteJsonValue(Writer, CreatedAt);
	Writer->WriteIdentifierPrefix(TEXT("needReaction")); WriteJsonValue(Writer, NeedReaction);
	Writer->WriteIdentifierPrefix(TEXT("identifiers")); WriteJsonValue(Writer, Identifiers);
	if (Author.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("author")); WriteJsonValue(Writer, Author.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (Media.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("media")); WriteJsonValue(Writer, Media.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("statistics")); WriteJsonValue(Writer, Statistics);
	Writer->WriteObjectEnd();
}

bool OpenAPIGoodsFeedbackDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("feedbackId"), FeedbackId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("createdAt"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("needReaction"), NeedReaction);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("identifiers"), Identifiers);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("author"), Author);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("media"), Media);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("statistics"), Statistics);

	return ParseSuccess;
}

}
