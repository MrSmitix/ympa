/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOrdersStatsItemDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIOrdersStatsItemDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (OfferName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("offerName")); WriteJsonValue(Writer, OfferName.GetValue());
	}
	if (MarketSku.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("marketSku")); WriteJsonValue(Writer, MarketSku.GetValue());
	}
	if (ShopSku.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shopSku")); WriteJsonValue(Writer, ShopSku.GetValue());
	}
	if (Count.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("count")); WriteJsonValue(Writer, Count.GetValue());
	}
	if (Prices.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("prices")); WriteJsonValue(Writer, Prices.GetValue());
	}
	if (Warehouse.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("warehouse")); WriteJsonValue(Writer, Warehouse.GetValue());
	}
	if (Details.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("details")); WriteJsonValue(Writer, Details.GetValue());
	}
	if (CisList.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("cisList")); WriteJsonValue(Writer, CisList.GetValue());
	}
	if (InitialCount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("initialCount")); WriteJsonValue(Writer, InitialCount.GetValue());
	}
	if (BidFee.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("bidFee")); WriteJsonValue(Writer, BidFee.GetValue());
	}
	if (CofinanceThreshold.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("cofinanceThreshold")); WriteJsonValue(Writer, CofinanceThreshold.GetValue());
	}
	if (CofinanceValue.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("cofinanceValue")); WriteJsonValue(Writer, CofinanceValue.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIOrdersStatsItemDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("offerName"), OfferName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("marketSku"), MarketSku);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shopSku"), ShopSku);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("count"), Count);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("prices"), Prices);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("warehouse"), Warehouse);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("details"), Details);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("cisList"), CisList);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("initialCount"), InitialCount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("bidFee"), BidFee);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("cofinanceThreshold"), CofinanceThreshold);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("cofinanceValue"), CofinanceValue);

	return ParseSuccess;
}

}
