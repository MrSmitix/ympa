/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOfferDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIOfferDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Price.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("price")); WriteJsonValue(Writer, Price.GetValue());
	}
	if (FeedId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("feedId")); WriteJsonValue(Writer, FeedId.GetValue());
	}
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (ShopCategoryId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shopCategoryId")); WriteJsonValue(Writer, ShopCategoryId.GetValue());
	}
	if (MarketCategoryId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("marketCategoryId")); WriteJsonValue(Writer, MarketCategoryId.GetValue());
	}
	if (PreDiscountPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("preDiscountPrice")); WriteJsonValue(Writer, PreDiscountPrice.GetValue());
	}
	if (Discount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("discount")); WriteJsonValue(Writer, Discount.GetValue());
	}
	if (CutPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("cutPrice")); WriteJsonValue(Writer, CutPrice.GetValue());
	}
	if (Url.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("url")); WriteJsonValue(Writer, Url.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("modelId")); WriteJsonValue(Writer, ModelId);
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Currency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("currency")); WriteJsonValue(Writer, Currency.GetValue());
	}
	if (Bid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("bid")); WriteJsonValue(Writer, Bid.GetValue());
	}
	if (Cbid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("cbid")); WriteJsonValue(Writer, Cbid.GetValue());
	}
	if (Fee.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fee")); WriteJsonValue(Writer, Fee.GetValue());
	}
	if (Blocked.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("blocked")); WriteJsonValue(Writer, Blocked.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIOfferDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("price"), Price);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("feedId"), FeedId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shopCategoryId"), ShopCategoryId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("marketCategoryId"), MarketCategoryId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("preDiscountPrice"), PreDiscountPrice);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("discount"), Discount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("cutPrice"), CutPrice);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("url"), Url);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("modelId"), ModelId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currency"), Currency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("bid"), Bid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("cbid"), Cbid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fee"), Fee);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("blocked"), Blocked);

	return ParseSuccess;
}

}
