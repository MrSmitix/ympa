/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOrderDeliveryDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIOrderDeliveryDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (Type.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type.GetValue());
	}
	if (ServiceName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("serviceName")); WriteJsonValue(Writer, ServiceName.GetValue());
	}
	if (Price.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("price")); WriteJsonValue(Writer, Price.GetValue());
	}
	if (DeliveryPartnerType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("deliveryPartnerType")); WriteJsonValue(Writer, DeliveryPartnerType.GetValue());
	}
	if (Courier.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("courier")); WriteJsonValue(Writer, Courier.GetValue());
	}
	if (Dates.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dates")); WriteJsonValue(Writer, Dates.GetValue());
	}
	if (Region.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("region")); WriteJsonValue(Writer, Region.GetValue());
	}
	if (Address.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("address")); WriteJsonValue(Writer, Address.GetValue());
	}
	if (Vat.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("vat")); WriteJsonValue(Writer, Vat.GetValue());
	}
	if (DeliveryServiceId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("deliveryServiceId")); WriteJsonValue(Writer, DeliveryServiceId.GetValue());
	}
	if (LiftType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("liftType")); WriteJsonValue(Writer, LiftType.GetValue());
	}
	if (LiftPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("liftPrice")); WriteJsonValue(Writer, LiftPrice.GetValue());
	}
	if (OutletCode.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("outletCode")); WriteJsonValue(Writer, OutletCode.GetValue());
	}
	if (OutletStorageLimitDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("outletStorageLimitDate")); WriteJsonValue(Writer, OutletStorageLimitDate.GetValue());
	}
	if (DispatchType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dispatchType")); WriteJsonValue(Writer, DispatchType.GetValue());
	}
	if (Tracks.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tracks")); WriteJsonValue(Writer, Tracks.GetValue());
	}
	if (Shipments.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shipments")); WriteJsonValue(Writer, Shipments.GetValue());
	}
	if (Estimated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("estimated")); WriteJsonValue(Writer, Estimated.GetValue());
	}
	if (EacType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("eacType")); WriteJsonValue(Writer, EacType.GetValue());
	}
	if (EacCode.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("eacCode")); WriteJsonValue(Writer, EacCode.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIOrderDeliveryDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("serviceName"), ServiceName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("price"), Price);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deliveryPartnerType"), DeliveryPartnerType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("courier"), Courier);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dates"), Dates);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("region"), Region);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("address"), Address);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("vat"), Vat);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deliveryServiceId"), DeliveryServiceId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("liftType"), LiftType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("liftPrice"), LiftPrice);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("outletCode"), OutletCode);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("outletStorageLimitDate"), OutletStorageLimitDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dispatchType"), DispatchType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tracks"), Tracks);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shipments"), Shipments);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("estimated"), Estimated);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("eacType"), EacType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("eacCode"), EacCode);

	return ParseSuccess;
}

}
