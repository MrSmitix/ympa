/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOrderVatType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIOrderVatType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIOrderVatType::Values::NoVat:
		return TEXT("NO_VAT");
	case OpenAPIOrderVatType::Values::VAT0:
		return TEXT("VAT_0");
	case OpenAPIOrderVatType::Values::VAT10:
		return TEXT("VAT_10");
	case OpenAPIOrderVatType::Values::VAT10110:
		return TEXT("VAT_10_110");
	case OpenAPIOrderVatType::Values::VAT20:
		return TEXT("VAT_20");
	case OpenAPIOrderVatType::Values::VAT20120:
		return TEXT("VAT_20_120");
	case OpenAPIOrderVatType::Values::VAT18:
		return TEXT("VAT_18");
	case OpenAPIOrderVatType::Values::VAT18118:
		return TEXT("VAT_18_118");
	case OpenAPIOrderVatType::Values::UnknownValue:
		return TEXT("UNKNOWN_VALUE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOrderVatType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOrderVatType::EnumToString(const OpenAPIOrderVatType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOrderVatType::Values& Value)
{
	static TMap<FString, OpenAPIOrderVatType::Values> StringToEnum = { 
		{ TEXT("NO_VAT"), OpenAPIOrderVatType::Values::NoVat },
		{ TEXT("VAT_0"), OpenAPIOrderVatType::Values::VAT0 },
		{ TEXT("VAT_10"), OpenAPIOrderVatType::Values::VAT10 },
		{ TEXT("VAT_10_110"), OpenAPIOrderVatType::Values::VAT10110 },
		{ TEXT("VAT_20"), OpenAPIOrderVatType::Values::VAT20 },
		{ TEXT("VAT_20_120"), OpenAPIOrderVatType::Values::VAT20120 },
		{ TEXT("VAT_18"), OpenAPIOrderVatType::Values::VAT18 },
		{ TEXT("VAT_18_118"), OpenAPIOrderVatType::Values::VAT18118 },
		{ TEXT("UNKNOWN_VALUE"), OpenAPIOrderVatType::Values::UnknownValue }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOrderVatType::EnumFromString(const FString& EnumAsString, OpenAPIOrderVatType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOrderVatType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOrderVatType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIOrderVatType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIOrderVatType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
