/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPITariffType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPITariffType::Values& Value)
{
	switch (Value)
	{
	case OpenAPITariffType::Values::AgencyCommission:
		return TEXT("AGENCY_COMMISSION");
	case OpenAPITariffType::Values::PaymentTransfer:
		return TEXT("PAYMENT_TRANSFER");
	case OpenAPITariffType::Values::Storage:
		return TEXT("STORAGE");
	case OpenAPITariffType::Values::Withdraw:
		return TEXT("WITHDRAW");
	case OpenAPITariffType::Values::Surplus:
		return TEXT("SURPLUS");
	case OpenAPITariffType::Values::Fee:
		return TEXT("FEE");
	case OpenAPITariffType::Values::DeliveryToCustomer:
		return TEXT("DELIVERY_TO_CUSTOMER");
	case OpenAPITariffType::Values::CrossregionalDelivery:
		return TEXT("CROSSREGIONAL_DELIVERY");
	case OpenAPITariffType::Values::CrossregionalDeliveryReturn:
		return TEXT("CROSSREGIONAL_DELIVERY_RETURN");
	case OpenAPITariffType::Values::Disposal:
		return TEXT("DISPOSAL");
	case OpenAPITariffType::Values::SortingCenterStorage:
		return TEXT("SORTING_CENTER_STORAGE");
	case OpenAPITariffType::Values::ExpressDelivery:
		return TEXT("EXPRESS_DELIVERY");
	case OpenAPITariffType::Values::FfXdocSupplyBox:
		return TEXT("FF_XDOC_SUPPLY_BOX");
	case OpenAPITariffType::Values::FfXdocSupplyPallet:
		return TEXT("FF_XDOC_SUPPLY_PALLET");
	case OpenAPITariffType::Values::Sorting:
		return TEXT("SORTING");
	case OpenAPITariffType::Values::MiddleMile:
		return TEXT("MIDDLE_MILE");
	case OpenAPITariffType::Values::ReturnProcessing:
		return TEXT("RETURN_PROCESSING");
	case OpenAPITariffType::Values::ExpressCancelledByPartner:
		return TEXT("EXPRESS_CANCELLED_BY_PARTNER");
	case OpenAPITariffType::Values::DeliveryToCustomerReturn:
		return TEXT("DELIVERY_TO_CUSTOMER_RETURN");
	case OpenAPITariffType::Values::CrossborderDelivery:
		return TEXT("CROSSBORDER_DELIVERY");
	case OpenAPITariffType::Values::IntakeSortingBulkyCargo:
		return TEXT("INTAKE_SORTING_BULKY_CARGO");
	case OpenAPITariffType::Values::IntakeSortingSmallGoods:
		return TEXT("INTAKE_SORTING_SMALL_GOODS");
	case OpenAPITariffType::Values::IntakeSortingDaily:
		return TEXT("INTAKE_SORTING_DAILY");
	case OpenAPITariffType::Values::FfStorageBilling:
		return TEXT("FF_STORAGE_BILLING");
	case OpenAPITariffType::Values::CancelledOrderFeeQi:
		return TEXT("CANCELLED_ORDER_FEE_QI");
	case OpenAPITariffType::Values::LateOrderExecutionFeeQi:
		return TEXT("LATE_ORDER_EXECUTION_FEE_QI");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPITariffType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPITariffType::EnumToString(const OpenAPITariffType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPITariffType::Values& Value)
{
	static TMap<FString, OpenAPITariffType::Values> StringToEnum = { 
		{ TEXT("AGENCY_COMMISSION"), OpenAPITariffType::Values::AgencyCommission },
		{ TEXT("PAYMENT_TRANSFER"), OpenAPITariffType::Values::PaymentTransfer },
		{ TEXT("STORAGE"), OpenAPITariffType::Values::Storage },
		{ TEXT("WITHDRAW"), OpenAPITariffType::Values::Withdraw },
		{ TEXT("SURPLUS"), OpenAPITariffType::Values::Surplus },
		{ TEXT("FEE"), OpenAPITariffType::Values::Fee },
		{ TEXT("DELIVERY_TO_CUSTOMER"), OpenAPITariffType::Values::DeliveryToCustomer },
		{ TEXT("CROSSREGIONAL_DELIVERY"), OpenAPITariffType::Values::CrossregionalDelivery },
		{ TEXT("CROSSREGIONAL_DELIVERY_RETURN"), OpenAPITariffType::Values::CrossregionalDeliveryReturn },
		{ TEXT("DISPOSAL"), OpenAPITariffType::Values::Disposal },
		{ TEXT("SORTING_CENTER_STORAGE"), OpenAPITariffType::Values::SortingCenterStorage },
		{ TEXT("EXPRESS_DELIVERY"), OpenAPITariffType::Values::ExpressDelivery },
		{ TEXT("FF_XDOC_SUPPLY_BOX"), OpenAPITariffType::Values::FfXdocSupplyBox },
		{ TEXT("FF_XDOC_SUPPLY_PALLET"), OpenAPITariffType::Values::FfXdocSupplyPallet },
		{ TEXT("SORTING"), OpenAPITariffType::Values::Sorting },
		{ TEXT("MIDDLE_MILE"), OpenAPITariffType::Values::MiddleMile },
		{ TEXT("RETURN_PROCESSING"), OpenAPITariffType::Values::ReturnProcessing },
		{ TEXT("EXPRESS_CANCELLED_BY_PARTNER"), OpenAPITariffType::Values::ExpressCancelledByPartner },
		{ TEXT("DELIVERY_TO_CUSTOMER_RETURN"), OpenAPITariffType::Values::DeliveryToCustomerReturn },
		{ TEXT("CROSSBORDER_DELIVERY"), OpenAPITariffType::Values::CrossborderDelivery },
		{ TEXT("INTAKE_SORTING_BULKY_CARGO"), OpenAPITariffType::Values::IntakeSortingBulkyCargo },
		{ TEXT("INTAKE_SORTING_SMALL_GOODS"), OpenAPITariffType::Values::IntakeSortingSmallGoods },
		{ TEXT("INTAKE_SORTING_DAILY"), OpenAPITariffType::Values::IntakeSortingDaily },
		{ TEXT("FF_STORAGE_BILLING"), OpenAPITariffType::Values::FfStorageBilling },
		{ TEXT("CANCELLED_ORDER_FEE_QI"), OpenAPITariffType::Values::CancelledOrderFeeQi },
		{ TEXT("LATE_ORDER_EXECUTION_FEE_QI"), OpenAPITariffType::Values::LateOrderExecutionFeeQi }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPITariffType::EnumFromString(const FString& EnumAsString, OpenAPITariffType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPITariffType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPITariffType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPITariffType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPITariffType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
