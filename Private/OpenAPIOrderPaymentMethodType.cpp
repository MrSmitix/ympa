/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOrderPaymentMethodType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIOrderPaymentMethodType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIOrderPaymentMethodType::Values::CashOnDelivery:
		return TEXT("CASH_ON_DELIVERY");
	case OpenAPIOrderPaymentMethodType::Values::CardOnDelivery:
		return TEXT("CARD_ON_DELIVERY");
	case OpenAPIOrderPaymentMethodType::Values::BoundCardOnDelivery:
		return TEXT("BOUND_CARD_ON_DELIVERY");
	case OpenAPIOrderPaymentMethodType::Values::Yandex:
		return TEXT("YANDEX");
	case OpenAPIOrderPaymentMethodType::Values::ApplePay:
		return TEXT("APPLE_PAY");
	case OpenAPIOrderPaymentMethodType::Values::ExternalCertificate:
		return TEXT("EXTERNAL_CERTIFICATE");
	case OpenAPIOrderPaymentMethodType::Values::Credit:
		return TEXT("CREDIT");
	case OpenAPIOrderPaymentMethodType::Values::GooglePay:
		return TEXT("GOOGLE_PAY");
	case OpenAPIOrderPaymentMethodType::Values::TinkoffCredit:
		return TEXT("TINKOFF_CREDIT");
	case OpenAPIOrderPaymentMethodType::Values::Sbp:
		return TEXT("SBP");
	case OpenAPIOrderPaymentMethodType::Values::TinkoffInstallments:
		return TEXT("TINKOFF_INSTALLMENTS");
	case OpenAPIOrderPaymentMethodType::Values::B2BACCOUNTPREPAYMENT:
		return TEXT("B2B_ACCOUNT_PREPAYMENT");
	case OpenAPIOrderPaymentMethodType::Values::B2BACCOUNTPOSTPAYMENT:
		return TEXT("B2B_ACCOUNT_POSTPAYMENT");
	case OpenAPIOrderPaymentMethodType::Values::Unknown:
		return TEXT("UNKNOWN");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOrderPaymentMethodType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOrderPaymentMethodType::EnumToString(const OpenAPIOrderPaymentMethodType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOrderPaymentMethodType::Values& Value)
{
	static TMap<FString, OpenAPIOrderPaymentMethodType::Values> StringToEnum = { 
		{ TEXT("CASH_ON_DELIVERY"), OpenAPIOrderPaymentMethodType::Values::CashOnDelivery },
		{ TEXT("CARD_ON_DELIVERY"), OpenAPIOrderPaymentMethodType::Values::CardOnDelivery },
		{ TEXT("BOUND_CARD_ON_DELIVERY"), OpenAPIOrderPaymentMethodType::Values::BoundCardOnDelivery },
		{ TEXT("YANDEX"), OpenAPIOrderPaymentMethodType::Values::Yandex },
		{ TEXT("APPLE_PAY"), OpenAPIOrderPaymentMethodType::Values::ApplePay },
		{ TEXT("EXTERNAL_CERTIFICATE"), OpenAPIOrderPaymentMethodType::Values::ExternalCertificate },
		{ TEXT("CREDIT"), OpenAPIOrderPaymentMethodType::Values::Credit },
		{ TEXT("GOOGLE_PAY"), OpenAPIOrderPaymentMethodType::Values::GooglePay },
		{ TEXT("TINKOFF_CREDIT"), OpenAPIOrderPaymentMethodType::Values::TinkoffCredit },
		{ TEXT("SBP"), OpenAPIOrderPaymentMethodType::Values::Sbp },
		{ TEXT("TINKOFF_INSTALLMENTS"), OpenAPIOrderPaymentMethodType::Values::TinkoffInstallments },
		{ TEXT("B2B_ACCOUNT_PREPAYMENT"), OpenAPIOrderPaymentMethodType::Values::B2BACCOUNTPREPAYMENT },
		{ TEXT("B2B_ACCOUNT_POSTPAYMENT"), OpenAPIOrderPaymentMethodType::Values::B2BACCOUNTPOSTPAYMENT },
		{ TEXT("UNKNOWN"), OpenAPIOrderPaymentMethodType::Values::Unknown }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOrderPaymentMethodType::EnumFromString(const FString& EnumAsString, OpenAPIOrderPaymentMethodType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOrderPaymentMethodType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOrderPaymentMethodType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIOrderPaymentMethodType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIOrderPaymentMethodType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
