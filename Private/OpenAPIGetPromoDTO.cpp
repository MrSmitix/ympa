/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIGetPromoDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIGetPromoDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name);
	Writer->WriteIdentifierPrefix(TEXT("period")); WriteJsonValue(Writer, Period);
	Writer->WriteIdentifierPrefix(TEXT("participating")); WriteJsonValue(Writer, Participating);
	Writer->WriteIdentifierPrefix(TEXT("assortmentInfo")); WriteJsonValue(Writer, AssortmentInfo);
	Writer->WriteIdentifierPrefix(TEXT("mechanicsInfo")); WriteJsonValue(Writer, MechanicsInfo);
	Writer->WriteIdentifierPrefix(TEXT("bestsellerInfo")); WriteJsonValue(Writer, BestsellerInfo);
	if (Channels.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("channels")); WriteJsonValue(Writer, Channels.GetValue());
	}
	if (Constraints.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("constraints")); WriteJsonValue(Writer, Constraints.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIGetPromoDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("period"), Period);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("participating"), Participating);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assortmentInfo"), AssortmentInfo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("mechanicsInfo"), MechanicsInfo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("bestsellerInfo"), BestsellerInfo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("channels"), Channels);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("constraints"), Constraints);

	return ParseSuccess;
}

}
