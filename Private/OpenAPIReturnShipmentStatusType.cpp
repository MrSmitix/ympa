/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIReturnShipmentStatusType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIReturnShipmentStatusType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIReturnShipmentStatusType::Values::Created:
		return TEXT("CREATED");
	case OpenAPIReturnShipmentStatusType::Values::Received:
		return TEXT("RECEIVED");
	case OpenAPIReturnShipmentStatusType::Values::InTransit:
		return TEXT("IN_TRANSIT");
	case OpenAPIReturnShipmentStatusType::Values::ReadyForPickup:
		return TEXT("READY_FOR_PICKUP");
	case OpenAPIReturnShipmentStatusType::Values::Picked:
		return TEXT("PICKED");
	case OpenAPIReturnShipmentStatusType::Values::Lost:
		return TEXT("LOST");
	case OpenAPIReturnShipmentStatusType::Values::Expired:
		return TEXT("EXPIRED");
	case OpenAPIReturnShipmentStatusType::Values::Cancelled:
		return TEXT("CANCELLED");
	case OpenAPIReturnShipmentStatusType::Values::FulfilmentReceived:
		return TEXT("FULFILMENT_RECEIVED");
	case OpenAPIReturnShipmentStatusType::Values::PreparedForUtilization:
		return TEXT("PREPARED_FOR_UTILIZATION");
	case OpenAPIReturnShipmentStatusType::Values::NotInDemand:
		return TEXT("NOT_IN_DEMAND");
	case OpenAPIReturnShipmentStatusType::Values::Utilized:
		return TEXT("UTILIZED");
	case OpenAPIReturnShipmentStatusType::Values::ReadyForExpropriation:
		return TEXT("READY_FOR_EXPROPRIATION");
	case OpenAPIReturnShipmentStatusType::Values::ReceivedForExpropriation:
		return TEXT("RECEIVED_FOR_EXPROPRIATION");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReturnShipmentStatusType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReturnShipmentStatusType::EnumToString(const OpenAPIReturnShipmentStatusType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReturnShipmentStatusType::Values& Value)
{
	static TMap<FString, OpenAPIReturnShipmentStatusType::Values> StringToEnum = { 
		{ TEXT("CREATED"), OpenAPIReturnShipmentStatusType::Values::Created },
		{ TEXT("RECEIVED"), OpenAPIReturnShipmentStatusType::Values::Received },
		{ TEXT("IN_TRANSIT"), OpenAPIReturnShipmentStatusType::Values::InTransit },
		{ TEXT("READY_FOR_PICKUP"), OpenAPIReturnShipmentStatusType::Values::ReadyForPickup },
		{ TEXT("PICKED"), OpenAPIReturnShipmentStatusType::Values::Picked },
		{ TEXT("LOST"), OpenAPIReturnShipmentStatusType::Values::Lost },
		{ TEXT("EXPIRED"), OpenAPIReturnShipmentStatusType::Values::Expired },
		{ TEXT("CANCELLED"), OpenAPIReturnShipmentStatusType::Values::Cancelled },
		{ TEXT("FULFILMENT_RECEIVED"), OpenAPIReturnShipmentStatusType::Values::FulfilmentReceived },
		{ TEXT("PREPARED_FOR_UTILIZATION"), OpenAPIReturnShipmentStatusType::Values::PreparedForUtilization },
		{ TEXT("NOT_IN_DEMAND"), OpenAPIReturnShipmentStatusType::Values::NotInDemand },
		{ TEXT("UTILIZED"), OpenAPIReturnShipmentStatusType::Values::Utilized },
		{ TEXT("READY_FOR_EXPROPRIATION"), OpenAPIReturnShipmentStatusType::Values::ReadyForExpropriation },
		{ TEXT("RECEIVED_FOR_EXPROPRIATION"), OpenAPIReturnShipmentStatusType::Values::ReceivedForExpropriation }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReturnShipmentStatusType::EnumFromString(const FString& EnumAsString, OpenAPIReturnShipmentStatusType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReturnShipmentStatusType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReturnShipmentStatusType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIReturnShipmentStatusType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIReturnShipmentStatusType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
