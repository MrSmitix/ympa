/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOfferProcessingNoteType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIOfferProcessingNoteType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIOfferProcessingNoteType::Values::Assortment:
		return TEXT("ASSORTMENT");
	case OpenAPIOfferProcessingNoteType::Values::Cancelled:
		return TEXT("CANCELLED");
	case OpenAPIOfferProcessingNoteType::Values::ConflictingInformation:
		return TEXT("CONFLICTING_INFORMATION");
	case OpenAPIOfferProcessingNoteType::Values::Other:
		return TEXT("OTHER");
	case OpenAPIOfferProcessingNoteType::Values::DepartmentFrozen:
		return TEXT("DEPARTMENT_FROZEN");
	case OpenAPIOfferProcessingNoteType::Values::IncorrectInformation:
		return TEXT("INCORRECT_INFORMATION");
	case OpenAPIOfferProcessingNoteType::Values::LegalConflict:
		return TEXT("LEGAL_CONFLICT");
	case OpenAPIOfferProcessingNoteType::Values::NeedClassificationInformation:
		return TEXT("NEED_CLASSIFICATION_INFORMATION");
	case OpenAPIOfferProcessingNoteType::Values::NeedInformation:
		return TEXT("NEED_INFORMATION");
	case OpenAPIOfferProcessingNoteType::Values::NeedPictures:
		return TEXT("NEED_PICTURES");
	case OpenAPIOfferProcessingNoteType::Values::NeedVendor:
		return TEXT("NEED_VENDOR");
	case OpenAPIOfferProcessingNoteType::Values::NoCategory:
		return TEXT("NO_CATEGORY");
	case OpenAPIOfferProcessingNoteType::Values::NoKnowledge:
		return TEXT("NO_KNOWLEDGE");
	case OpenAPIOfferProcessingNoteType::Values::NoParametersInShopTitle:
		return TEXT("NO_PARAMETERS_IN_SHOP_TITLE");
	case OpenAPIOfferProcessingNoteType::Values::NoSizeMeasure:
		return TEXT("NO_SIZE_MEASURE");
	case OpenAPIOfferProcessingNoteType::Values::SampleLine:
		return TEXT("SAMPLE_LINE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOfferProcessingNoteType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOfferProcessingNoteType::EnumToString(const OpenAPIOfferProcessingNoteType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOfferProcessingNoteType::Values& Value)
{
	static TMap<FString, OpenAPIOfferProcessingNoteType::Values> StringToEnum = { 
		{ TEXT("ASSORTMENT"), OpenAPIOfferProcessingNoteType::Values::Assortment },
		{ TEXT("CANCELLED"), OpenAPIOfferProcessingNoteType::Values::Cancelled },
		{ TEXT("CONFLICTING_INFORMATION"), OpenAPIOfferProcessingNoteType::Values::ConflictingInformation },
		{ TEXT("OTHER"), OpenAPIOfferProcessingNoteType::Values::Other },
		{ TEXT("DEPARTMENT_FROZEN"), OpenAPIOfferProcessingNoteType::Values::DepartmentFrozen },
		{ TEXT("INCORRECT_INFORMATION"), OpenAPIOfferProcessingNoteType::Values::IncorrectInformation },
		{ TEXT("LEGAL_CONFLICT"), OpenAPIOfferProcessingNoteType::Values::LegalConflict },
		{ TEXT("NEED_CLASSIFICATION_INFORMATION"), OpenAPIOfferProcessingNoteType::Values::NeedClassificationInformation },
		{ TEXT("NEED_INFORMATION"), OpenAPIOfferProcessingNoteType::Values::NeedInformation },
		{ TEXT("NEED_PICTURES"), OpenAPIOfferProcessingNoteType::Values::NeedPictures },
		{ TEXT("NEED_VENDOR"), OpenAPIOfferProcessingNoteType::Values::NeedVendor },
		{ TEXT("NO_CATEGORY"), OpenAPIOfferProcessingNoteType::Values::NoCategory },
		{ TEXT("NO_KNOWLEDGE"), OpenAPIOfferProcessingNoteType::Values::NoKnowledge },
		{ TEXT("NO_PARAMETERS_IN_SHOP_TITLE"), OpenAPIOfferProcessingNoteType::Values::NoParametersInShopTitle },
		{ TEXT("NO_SIZE_MEASURE"), OpenAPIOfferProcessingNoteType::Values::NoSizeMeasure },
		{ TEXT("SAMPLE_LINE"), OpenAPIOfferProcessingNoteType::Values::SampleLine }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOfferProcessingNoteType::EnumFromString(const FString& EnumAsString, OpenAPIOfferProcessingNoteType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOfferProcessingNoteType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOfferProcessingNoteType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIOfferProcessingNoteType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIOfferProcessingNoteType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
