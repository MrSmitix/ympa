/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOrderDeliveryAddressDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIOrderDeliveryAddressDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Country.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("country")); WriteJsonValue(Writer, Country.GetValue());
	}
	if (Postcode.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("postcode")); WriteJsonValue(Writer, Postcode.GetValue());
	}
	if (City.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("city")); WriteJsonValue(Writer, City.GetValue());
	}
	if (District.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("district")); WriteJsonValue(Writer, District.GetValue());
	}
	if (Subway.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subway")); WriteJsonValue(Writer, Subway.GetValue());
	}
	if (Street.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("street")); WriteJsonValue(Writer, Street.GetValue());
	}
	if (House.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("house")); WriteJsonValue(Writer, House.GetValue());
	}
	if (Block.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("block")); WriteJsonValue(Writer, Block.GetValue());
	}
	if (Entrance.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("entrance")); WriteJsonValue(Writer, Entrance.GetValue());
	}
	if (Entryphone.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("entryphone")); WriteJsonValue(Writer, Entryphone.GetValue());
	}
	if (Floor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("floor")); WriteJsonValue(Writer, Floor.GetValue());
	}
	if (Apartment.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("apartment")); WriteJsonValue(Writer, Apartment.GetValue());
	}
	if (Phone.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("phone")); WriteJsonValue(Writer, Phone.GetValue());
	}
	if (Recipient.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("recipient")); WriteJsonValue(Writer, Recipient.GetValue());
	}
	if (Gps.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gps")); WriteJsonValue(Writer, Gps.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIOrderDeliveryAddressDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("country"), Country);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("postcode"), Postcode);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("city"), City);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("district"), District);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subway"), Subway);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("street"), Street);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("house"), House);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("block"), Block);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("entrance"), Entrance);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("entryphone"), Entryphone);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("floor"), Floor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("apartment"), Apartment);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("phone"), Phone);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("recipient"), Recipient);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gps"), Gps);

	return ParseSuccess;
}

}
