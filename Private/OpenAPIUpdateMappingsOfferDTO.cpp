/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIUpdateMappingsOfferDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIUpdateMappingsOfferDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (ShopSku.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shopSku")); WriteJsonValue(Writer, ShopSku.GetValue());
	}
	if (Category.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("category")); WriteJsonValue(Writer, Category.GetValue());
	}
	if (Vendor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("vendor")); WriteJsonValue(Writer, Vendor.GetValue());
	}
	if (VendorCode.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("vendorCode")); WriteJsonValue(Writer, VendorCode.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (FeedId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("feedId")); WriteJsonValue(Writer, FeedId.GetValue());
	}
	if (Barcodes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("barcodes")); WriteJsonValue(Writer, Barcodes.GetValue());
	}
	if (Urls.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("urls")); WriteJsonValue(Writer, Urls.GetValue());
	}
	if (Pictures.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pictures")); WriteJsonValue(Writer, Pictures.GetValue());
	}
	if (Manufacturer.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("manufacturer")); WriteJsonValue(Writer, Manufacturer.GetValue());
	}
	if (ManufacturerCountries.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("manufacturerCountries")); WriteJsonValue(Writer, ManufacturerCountries.GetValue());
	}
	if (MinShipment.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("minShipment")); WriteJsonValue(Writer, MinShipment.GetValue());
	}
	if (TransportUnitSize.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("transportUnitSize")); WriteJsonValue(Writer, TransportUnitSize.GetValue());
	}
	if (QuantumOfSupply.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("quantumOfSupply")); WriteJsonValue(Writer, QuantumOfSupply.GetValue());
	}
	if (DeliveryDurationDays.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("deliveryDurationDays")); WriteJsonValue(Writer, DeliveryDurationDays.GetValue());
	}
	if (BoxCount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("boxCount")); WriteJsonValue(Writer, BoxCount.GetValue());
	}
	if (CustomsCommodityCodes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("customsCommodityCodes")); WriteJsonValue(Writer, CustomsCommodityCodes.GetValue());
	}
	if (WeightDimensions.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("weightDimensions")); WriteJsonValue(Writer, WeightDimensions.GetValue());
	}
	if (SupplyScheduleDays.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("supplyScheduleDays")); WriteJsonValue(Writer, SupplyScheduleDays.GetValue());
	}
	if (ShelfLifeDays.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shelfLifeDays")); WriteJsonValue(Writer, ShelfLifeDays.GetValue());
	}
	if (LifeTimeDays.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("lifeTimeDays")); WriteJsonValue(Writer, LifeTimeDays.GetValue());
	}
	if (GuaranteePeriodDays.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("guaranteePeriodDays")); WriteJsonValue(Writer, GuaranteePeriodDays.GetValue());
	}
	if (ProcessingState.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("processingState")); WriteJsonValue(Writer, ProcessingState.GetValue());
	}
	if (Availability.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("availability")); WriteJsonValue(Writer, Availability.GetValue());
	}
	if (ShelfLife.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shelfLife")); WriteJsonValue(Writer, ShelfLife.GetValue());
	}
	if (LifeTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("lifeTime")); WriteJsonValue(Writer, LifeTime.GetValue());
	}
	if (GuaranteePeriod.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("guaranteePeriod")); WriteJsonValue(Writer, GuaranteePeriod.GetValue());
	}
	if (Certificate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("certificate")); WriteJsonValue(Writer, Certificate.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIUpdateMappingsOfferDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shopSku"), ShopSku);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("category"), Category);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("vendor"), Vendor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("vendorCode"), VendorCode);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("feedId"), FeedId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("barcodes"), Barcodes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("urls"), Urls);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pictures"), Pictures);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("manufacturer"), Manufacturer);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("manufacturerCountries"), ManufacturerCountries);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("minShipment"), MinShipment);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transportUnitSize"), TransportUnitSize);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("quantumOfSupply"), QuantumOfSupply);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deliveryDurationDays"), DeliveryDurationDays);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("boxCount"), BoxCount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("customsCommodityCodes"), CustomsCommodityCodes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("weightDimensions"), WeightDimensions);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("supplyScheduleDays"), SupplyScheduleDays);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shelfLifeDays"), ShelfLifeDays);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("lifeTimeDays"), LifeTimeDays);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("guaranteePeriodDays"), GuaranteePeriodDays);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("processingState"), ProcessingState);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("availability"), Availability);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shelfLife"), ShelfLife);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("lifeTime"), LifeTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("guaranteePeriod"), GuaranteePeriod);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("certificate"), Certificate);

	return ParseSuccess;
}

}
