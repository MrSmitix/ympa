/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOrdersStatsOrderDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIOrdersStatsOrderDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (CreationDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("creationDate")); WriteJsonValue(Writer, CreationDate.GetValue());
	}
	if (StatusUpdateDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("statusUpdateDate")); WriteJsonValue(Writer, StatusUpdateDate.GetValue());
	}
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	if (PartnerOrderId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("partnerOrderId")); WriteJsonValue(Writer, PartnerOrderId.GetValue());
	}
	if (PaymentType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("paymentType")); WriteJsonValue(Writer, PaymentType.GetValue());
	}
	if (Fake.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fake")); WriteJsonValue(Writer, Fake.GetValue());
	}
	if (DeliveryRegion.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("deliveryRegion")); WriteJsonValue(Writer, DeliveryRegion.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("items")); WriteJsonValue(Writer, Items);
	if (InitialItems.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("initialItems")); WriteJsonValue(Writer, InitialItems.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("payments")); WriteJsonValue(Writer, Payments);
	Writer->WriteIdentifierPrefix(TEXT("commissions")); WriteJsonValue(Writer, Commissions);
	Writer->WriteObjectEnd();
}

bool OpenAPIOrdersStatsOrderDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("creationDate"), CreationDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("statusUpdateDate"), StatusUpdateDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("partnerOrderId"), PartnerOrderId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("paymentType"), PaymentType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fake"), Fake);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deliveryRegion"), DeliveryRegion);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("items"), Items);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("initialItems"), InitialItems);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("payments"), Payments);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("commissions"), Commissions);

	return ParseSuccess;
}

}
