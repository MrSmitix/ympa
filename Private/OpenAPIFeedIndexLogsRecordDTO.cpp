/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIFeedIndexLogsRecordDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIFeedIndexLogsRecordDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (DownloadTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("downloadTime")); WriteJsonValue(Writer, DownloadTime.GetValue());
	}
	if (FileTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fileTime")); WriteJsonValue(Writer, FileTime.GetValue());
	}
	if (GenerationId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("generationId")); WriteJsonValue(Writer, GenerationId.GetValue());
	}
	if (IndexType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("indexType")); WriteJsonValue(Writer, IndexType.GetValue());
	}
	if (PublishedTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("publishedTime")); WriteJsonValue(Writer, PublishedTime.GetValue());
	}
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	if (Error.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("error")); WriteJsonValue(Writer, Error.GetValue());
	}
	if (Offers.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("offers")); WriteJsonValue(Writer, Offers.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIFeedIndexLogsRecordDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("downloadTime"), DownloadTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fileTime"), FileTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("generationId"), GenerationId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("indexType"), IndexType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("publishedTime"), PublishedTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("error"), Error);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("offers"), Offers);

	return ParseSuccess;
}

}
