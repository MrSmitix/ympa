/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIGenerateUnitedMarketplaceServicesReportRequest.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIGenerateUnitedMarketplaceServicesReportRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("businessId")); WriteJsonValue(Writer, BusinessId);
	if (DateTimeFrom.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateTimeFrom")); WriteJsonValue(Writer, DateTimeFrom.GetValue());
	}
	if (DateTimeTo.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateTimeTo")); WriteJsonValue(Writer, DateTimeTo.GetValue());
	}
	if (DateFrom.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateFrom")); WriteJsonValue(Writer, DateFrom.GetValue());
	}
	if (DateTo.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateTo")); WriteJsonValue(Writer, DateTo.GetValue());
	}
	if (YearFrom.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("yearFrom")); WriteJsonValue(Writer, YearFrom.GetValue());
	}
	if (MonthFrom.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("monthFrom")); WriteJsonValue(Writer, MonthFrom.GetValue());
	}
	if (YearTo.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("yearTo")); WriteJsonValue(Writer, YearTo.GetValue());
	}
	if (MonthTo.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("monthTo")); WriteJsonValue(Writer, MonthTo.GetValue());
	}
	if (PlacementPrograms.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("placementPrograms")); WriteJsonValue(Writer, PlacementPrograms.GetValue());
	}
	if (Inns.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("inns")); WriteJsonValue(Writer, Inns.GetValue());
	}
	if (CampaignIds.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("campaignIds")); WriteJsonValue(Writer, CampaignIds.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIGenerateUnitedMarketplaceServicesReportRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("businessId"), BusinessId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateTimeFrom"), DateTimeFrom);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateTimeTo"), DateTimeTo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateFrom"), DateFrom);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateTo"), DateTo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("yearFrom"), YearFrom);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("monthFrom"), MonthFrom);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("yearTo"), YearTo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("monthTo"), MonthTo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("placementPrograms"), PlacementPrograms);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("inns"), Inns);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("campaignIds"), CampaignIds);

	return ParseSuccess;
}

}
