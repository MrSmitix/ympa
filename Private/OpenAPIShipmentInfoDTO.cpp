/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIShipmentInfoDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIShipmentInfoDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (PlanIntervalFrom.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("planIntervalFrom")); WriteJsonValue(Writer, PlanIntervalFrom.GetValue());
	}
	if (PlanIntervalTo.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("planIntervalTo")); WriteJsonValue(Writer, PlanIntervalTo.GetValue());
	}
	if (ShipmentType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shipmentType")); WriteJsonValue(Writer, ShipmentType.GetValue());
	}
	if (Warehouse.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("warehouse")); WriteJsonValue(Writer, Warehouse.GetValue());
	}
	if (WarehouseTo.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("warehouseTo")); WriteJsonValue(Writer, WarehouseTo.GetValue());
	}
	if (ExternalId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("externalId")); WriteJsonValue(Writer, ExternalId.GetValue());
	}
	if (DeliveryService.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("deliveryService")); WriteJsonValue(Writer, DeliveryService.GetValue());
	}
	if (PalletsCount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("palletsCount")); WriteJsonValue(Writer, PalletsCount.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("orderIds")); WriteJsonValue(Writer, OrderIds);
	if (DraftCount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("draftCount")); WriteJsonValue(Writer, DraftCount.GetValue());
	}
	if (PlannedCount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("plannedCount")); WriteJsonValue(Writer, PlannedCount.GetValue());
	}
	if (FactCount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("factCount")); WriteJsonValue(Writer, FactCount.GetValue());
	}
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	if (StatusDescription.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("statusDescription")); WriteJsonValue(Writer, StatusDescription.GetValue());
	}
	if (StatusUpdateTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("statusUpdateTime")); WriteJsonValue(Writer, StatusUpdateTime.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIShipmentInfoDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("planIntervalFrom"), PlanIntervalFrom);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("planIntervalTo"), PlanIntervalTo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shipmentType"), ShipmentType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("warehouse"), Warehouse);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("warehouseTo"), WarehouseTo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("externalId"), ExternalId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deliveryService"), DeliveryService);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("palletsCount"), PalletsCount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("orderIds"), OrderIds);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("draftCount"), DraftCount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("plannedCount"), PlannedCount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("factCount"), FactCount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("statusDescription"), StatusDescription);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("statusUpdateTime"), StatusUpdateTime);

	return ParseSuccess;
}

}
