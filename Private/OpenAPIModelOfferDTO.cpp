/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIModelOfferDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIModelOfferDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Discount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("discount")); WriteJsonValue(Writer, Discount.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Pos.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pos")); WriteJsonValue(Writer, Pos.GetValue());
	}
	if (PreDiscountPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("preDiscountPrice")); WriteJsonValue(Writer, PreDiscountPrice.GetValue());
	}
	if (Price.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("price")); WriteJsonValue(Writer, Price.GetValue());
	}
	if (RegionId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("regionId")); WriteJsonValue(Writer, RegionId.GetValue());
	}
	if (ShippingCost.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shippingCost")); WriteJsonValue(Writer, ShippingCost.GetValue());
	}
	if (ShopName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shopName")); WriteJsonValue(Writer, ShopName.GetValue());
	}
	if (ShopRating.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shopRating")); WriteJsonValue(Writer, ShopRating.GetValue());
	}
	if (InStock.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("inStock")); WriteJsonValue(Writer, InStock.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIModelOfferDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("discount"), Discount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pos"), Pos);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("preDiscountPrice"), PreDiscountPrice);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("price"), Price);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("regionId"), RegionId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shippingCost"), ShippingCost);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shopName"), ShopName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shopRating"), ShopRating);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("inStock"), InStock);

	return ParseSuccess;
}

}
