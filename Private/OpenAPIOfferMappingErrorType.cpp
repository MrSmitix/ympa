/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOfferMappingErrorType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIOfferMappingErrorType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIOfferMappingErrorType::Values::UnknownCategory:
		return TEXT("UNKNOWN_CATEGORY");
	case OpenAPIOfferMappingErrorType::Values::CategoryMismatch:
		return TEXT("CATEGORY_MISMATCH");
	case OpenAPIOfferMappingErrorType::Values::EmptyMarketCategory:
		return TEXT("EMPTY_MARKET_CATEGORY");
	case OpenAPIOfferMappingErrorType::Values::UnknownParameter:
		return TEXT("UNKNOWN_PARAMETER");
	case OpenAPIOfferMappingErrorType::Values::UnexpectedBooleanValue:
		return TEXT("UNEXPECTED_BOOLEAN_VALUE");
	case OpenAPIOfferMappingErrorType::Values::NumberFormat:
		return TEXT("NUMBER_FORMAT");
	case OpenAPIOfferMappingErrorType::Values::ValueBlank:
		return TEXT("VALUE_BLANK");
	case OpenAPIOfferMappingErrorType::Values::InvalidUnitId:
		return TEXT("INVALID_UNIT_ID");
	case OpenAPIOfferMappingErrorType::Values::InvalidGroupIdLength:
		return TEXT("INVALID_GROUP_ID_LENGTH");
	case OpenAPIOfferMappingErrorType::Values::InvalidGroupIdCharacters:
		return TEXT("INVALID_GROUP_ID_CHARACTERS");
	case OpenAPIOfferMappingErrorType::Values::InvalidPickerUrl:
		return TEXT("INVALID_PICKER_URL");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOfferMappingErrorType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOfferMappingErrorType::EnumToString(const OpenAPIOfferMappingErrorType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOfferMappingErrorType::Values& Value)
{
	static TMap<FString, OpenAPIOfferMappingErrorType::Values> StringToEnum = { 
		{ TEXT("UNKNOWN_CATEGORY"), OpenAPIOfferMappingErrorType::Values::UnknownCategory },
		{ TEXT("CATEGORY_MISMATCH"), OpenAPIOfferMappingErrorType::Values::CategoryMismatch },
		{ TEXT("EMPTY_MARKET_CATEGORY"), OpenAPIOfferMappingErrorType::Values::EmptyMarketCategory },
		{ TEXT("UNKNOWN_PARAMETER"), OpenAPIOfferMappingErrorType::Values::UnknownParameter },
		{ TEXT("UNEXPECTED_BOOLEAN_VALUE"), OpenAPIOfferMappingErrorType::Values::UnexpectedBooleanValue },
		{ TEXT("NUMBER_FORMAT"), OpenAPIOfferMappingErrorType::Values::NumberFormat },
		{ TEXT("VALUE_BLANK"), OpenAPIOfferMappingErrorType::Values::ValueBlank },
		{ TEXT("INVALID_UNIT_ID"), OpenAPIOfferMappingErrorType::Values::InvalidUnitId },
		{ TEXT("INVALID_GROUP_ID_LENGTH"), OpenAPIOfferMappingErrorType::Values::InvalidGroupIdLength },
		{ TEXT("INVALID_GROUP_ID_CHARACTERS"), OpenAPIOfferMappingErrorType::Values::InvalidGroupIdCharacters },
		{ TEXT("INVALID_PICKER_URL"), OpenAPIOfferMappingErrorType::Values::InvalidPickerUrl }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOfferMappingErrorType::EnumFromString(const FString& EnumAsString, OpenAPIOfferMappingErrorType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOfferMappingErrorType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOfferMappingErrorType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIOfferMappingErrorType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIOfferMappingErrorType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
