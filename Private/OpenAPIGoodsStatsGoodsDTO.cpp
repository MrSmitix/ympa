/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIGoodsStatsGoodsDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIGoodsStatsGoodsDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (ShopSku.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shopSku")); WriteJsonValue(Writer, ShopSku.GetValue());
	}
	if (MarketSku.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("marketSku")); WriteJsonValue(Writer, MarketSku.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Price.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("price")); WriteJsonValue(Writer, Price.GetValue());
	}
	if (CategoryId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("categoryId")); WriteJsonValue(Writer, CategoryId.GetValue());
	}
	if (CategoryName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("categoryName")); WriteJsonValue(Writer, CategoryName.GetValue());
	}
	if (WeightDimensions.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("weightDimensions")); WriteJsonValue(Writer, WeightDimensions.GetValue());
	}
	if (Warehouses.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("warehouses")); WriteJsonValue(Writer, Warehouses.GetValue());
	}
	if (Tariffs.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tariffs")); WriteJsonValue(Writer, Tariffs.GetValue());
	}
	if (Pictures.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pictures")); WriteJsonValue(Writer, Pictures.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIGoodsStatsGoodsDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shopSku"), ShopSku);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("marketSku"), MarketSku);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("price"), Price);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("categoryId"), CategoryId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("categoryName"), CategoryName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("weightDimensions"), WeightDimensions);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("warehouses"), Warehouses);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tariffs"), Tariffs);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pictures"), Pictures);

	return ParseSuccess;
}

}
