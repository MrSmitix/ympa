/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPISuggestedOfferDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPISuggestedOfferDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (OfferId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("offerId")); WriteJsonValue(Writer, OfferId.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Category.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("category")); WriteJsonValue(Writer, Category.GetValue());
	}
	if (Vendor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("vendor")); WriteJsonValue(Writer, Vendor.GetValue());
	}
	if (Barcodes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("barcodes")); WriteJsonValue(Writer, Barcodes.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (VendorCode.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("vendorCode")); WriteJsonValue(Writer, VendorCode.GetValue());
	}
	if (BasicPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("basicPrice")); WriteJsonValue(Writer, BasicPrice.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPISuggestedOfferDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("offerId"), OfferId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("category"), Category);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("vendor"), Vendor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("barcodes"), Barcodes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("vendorCode"), VendorCode);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("basicPrice"), BasicPrice);

	return ParseSuccess;
}

}
