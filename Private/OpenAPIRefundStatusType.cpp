/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRefundStatusType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIRefundStatusType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIRefundStatusType::Values::StartedByUser:
		return TEXT("STARTED_BY_USER");
	case OpenAPIRefundStatusType::Values::RefundInProgress:
		return TEXT("REFUND_IN_PROGRESS");
	case OpenAPIRefundStatusType::Values::Refunded:
		return TEXT("REFUNDED");
	case OpenAPIRefundStatusType::Values::Failed:
		return TEXT("FAILED");
	case OpenAPIRefundStatusType::Values::WaitingForDecision:
		return TEXT("WAITING_FOR_DECISION");
	case OpenAPIRefundStatusType::Values::DecisionMade:
		return TEXT("DECISION_MADE");
	case OpenAPIRefundStatusType::Values::RefundedWithBonuses:
		return TEXT("REFUNDED_WITH_BONUSES");
	case OpenAPIRefundStatusType::Values::RefundedByShop:
		return TEXT("REFUNDED_BY_SHOP");
	case OpenAPIRefundStatusType::Values::Cancelled:
		return TEXT("CANCELLED");
	case OpenAPIRefundStatusType::Values::CompleteWithoutRefund:
		return TEXT("COMPLETE_WITHOUT_REFUND");
	case OpenAPIRefundStatusType::Values::Unknown:
		return TEXT("UNKNOWN");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIRefundStatusType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIRefundStatusType::EnumToString(const OpenAPIRefundStatusType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIRefundStatusType::Values& Value)
{
	static TMap<FString, OpenAPIRefundStatusType::Values> StringToEnum = { 
		{ TEXT("STARTED_BY_USER"), OpenAPIRefundStatusType::Values::StartedByUser },
		{ TEXT("REFUND_IN_PROGRESS"), OpenAPIRefundStatusType::Values::RefundInProgress },
		{ TEXT("REFUNDED"), OpenAPIRefundStatusType::Values::Refunded },
		{ TEXT("FAILED"), OpenAPIRefundStatusType::Values::Failed },
		{ TEXT("WAITING_FOR_DECISION"), OpenAPIRefundStatusType::Values::WaitingForDecision },
		{ TEXT("DECISION_MADE"), OpenAPIRefundStatusType::Values::DecisionMade },
		{ TEXT("REFUNDED_WITH_BONUSES"), OpenAPIRefundStatusType::Values::RefundedWithBonuses },
		{ TEXT("REFUNDED_BY_SHOP"), OpenAPIRefundStatusType::Values::RefundedByShop },
		{ TEXT("CANCELLED"), OpenAPIRefundStatusType::Values::Cancelled },
		{ TEXT("COMPLETE_WITHOUT_REFUND"), OpenAPIRefundStatusType::Values::CompleteWithoutRefund },
		{ TEXT("UNKNOWN"), OpenAPIRefundStatusType::Values::Unknown }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIRefundStatusType::EnumFromString(const FString& EnumAsString, OpenAPIRefundStatusType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIRefundStatusType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIRefundStatusType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIRefundStatusType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIRefundStatusType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
