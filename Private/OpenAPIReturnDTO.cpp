/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIReturnDTO.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIReturnDTO::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (OrderId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("orderId")); WriteJsonValue(Writer, OrderId.GetValue());
	}
	if (CreationDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("creationDate")); WriteJsonValue(Writer, CreationDate.GetValue());
	}
	if (UpdateDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("updateDate")); WriteJsonValue(Writer, UpdateDate.GetValue());
	}
	if (RefundStatus.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("refundStatus")); WriteJsonValue(Writer, RefundStatus.GetValue());
	}
	if (LogisticPickupPoint.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("logisticPickupPoint")); WriteJsonValue(Writer, LogisticPickupPoint.GetValue());
	}
	if (ShipmentRecipientType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shipmentRecipientType")); WriteJsonValue(Writer, ShipmentRecipientType.GetValue());
	}
	if (ShipmentStatus.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shipmentStatus")); WriteJsonValue(Writer, ShipmentStatus.GetValue());
	}
	if (RefundAmount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("refundAmount")); WriteJsonValue(Writer, RefundAmount.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("items")); WriteJsonValue(Writer, Items);
	if (ReturnType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("returnType")); WriteJsonValue(Writer, ReturnType.GetValue());
	}
	if (FastReturn.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fastReturn")); WriteJsonValue(Writer, FastReturn.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIReturnDTO::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("orderId"), OrderId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("creationDate"), CreationDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updateDate"), UpdateDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("refundStatus"), RefundStatus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("logisticPickupPoint"), LogisticPickupPoint);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shipmentRecipientType"), ShipmentRecipientType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shipmentStatus"), ShipmentStatus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("refundAmount"), RefundAmount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("items"), Items);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("returnType"), ReturnType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fastReturn"), FastReturn);

	return ParseSuccess;
}

}
