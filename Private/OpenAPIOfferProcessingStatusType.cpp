/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOfferProcessingStatusType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIOfferProcessingStatusType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIOfferProcessingStatusType::Values::Unknown:
		return TEXT("UNKNOWN");
	case OpenAPIOfferProcessingStatusType::Values::Ready:
		return TEXT("READY");
	case OpenAPIOfferProcessingStatusType::Values::InWork:
		return TEXT("IN_WORK");
	case OpenAPIOfferProcessingStatusType::Values::NeedInfo:
		return TEXT("NEED_INFO");
	case OpenAPIOfferProcessingStatusType::Values::NeedMapping:
		return TEXT("NEED_MAPPING");
	case OpenAPIOfferProcessingStatusType::Values::NeedContent:
		return TEXT("NEED_CONTENT");
	case OpenAPIOfferProcessingStatusType::Values::ContentProcessing:
		return TEXT("CONTENT_PROCESSING");
	case OpenAPIOfferProcessingStatusType::Values::Suspended:
		return TEXT("SUSPENDED");
	case OpenAPIOfferProcessingStatusType::Values::Rejected:
		return TEXT("REJECTED");
	case OpenAPIOfferProcessingStatusType::Values::Review:
		return TEXT("REVIEW");
	case OpenAPIOfferProcessingStatusType::Values::CreateError:
		return TEXT("CREATE_ERROR");
	case OpenAPIOfferProcessingStatusType::Values::UpdateError:
		return TEXT("UPDATE_ERROR");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOfferProcessingStatusType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOfferProcessingStatusType::EnumToString(const OpenAPIOfferProcessingStatusType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOfferProcessingStatusType::Values& Value)
{
	static TMap<FString, OpenAPIOfferProcessingStatusType::Values> StringToEnum = { 
		{ TEXT("UNKNOWN"), OpenAPIOfferProcessingStatusType::Values::Unknown },
		{ TEXT("READY"), OpenAPIOfferProcessingStatusType::Values::Ready },
		{ TEXT("IN_WORK"), OpenAPIOfferProcessingStatusType::Values::InWork },
		{ TEXT("NEED_INFO"), OpenAPIOfferProcessingStatusType::Values::NeedInfo },
		{ TEXT("NEED_MAPPING"), OpenAPIOfferProcessingStatusType::Values::NeedMapping },
		{ TEXT("NEED_CONTENT"), OpenAPIOfferProcessingStatusType::Values::NeedContent },
		{ TEXT("CONTENT_PROCESSING"), OpenAPIOfferProcessingStatusType::Values::ContentProcessing },
		{ TEXT("SUSPENDED"), OpenAPIOfferProcessingStatusType::Values::Suspended },
		{ TEXT("REJECTED"), OpenAPIOfferProcessingStatusType::Values::Rejected },
		{ TEXT("REVIEW"), OpenAPIOfferProcessingStatusType::Values::Review },
		{ TEXT("CREATE_ERROR"), OpenAPIOfferProcessingStatusType::Values::CreateError },
		{ TEXT("UPDATE_ERROR"), OpenAPIOfferProcessingStatusType::Values::UpdateError }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOfferProcessingStatusType::EnumFromString(const FString& EnumAsString, OpenAPIOfferProcessingStatusType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOfferProcessingStatusType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOfferProcessingStatusType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIOfferProcessingStatusType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIOfferProcessingStatusType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
