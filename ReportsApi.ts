/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GenerateShowsSalesReportRequest,
  GeneratePricesReportRequest,
  GenerateGoodsFeedbackRequest,
  GenerateStocksOnWarehousesReportRequest,
  GetReportInfoResponse,
  PageFormatType,
  GenerateGoodsRealizationReportRequest,
  GenerateUnitedOrdersRequest,
  GenerateGoodsTurnoverRequest,
  GenerateShelfsStatisticsRequest,
  GenerateBoostConsolidatedRequest,
  GenerateShipmentListDocumentReportRequest,
  GenerateGoodsMovementReportRequest,
  GenerateMassOrderLabelsRequest,
  ReportFormatType,
  GenerateCompetitorsPositionReportRequest,
  GenerateUnitedMarketplaceServicesReportRequest,
  GenerateUnitedNettingReportRequest,
  GenerateReportResponse,
} from './models';

/**
 * generateBoostConsolidatedReport - parameters interface
 */
export interface IGenerateBoostConsolidatedReportParams {
  generateBoostConsolidatedRequest: GenerateBoostConsolidatedRequest;
  format?: ReportFormatType;
}

/**
 * generateCompetitorsPositionReport - parameters interface
 */
export interface IGenerateCompetitorsPositionReportParams {
  generateCompetitorsPositionReportRequest: GenerateCompetitorsPositionReportRequest;
  format?: ReportFormatType;
}

/**
 * generateGoodsFeedbackReport - parameters interface
 */
export interface IGenerateGoodsFeedbackReportParams {
  generateGoodsFeedbackRequest: GenerateGoodsFeedbackRequest;
  format?: ReportFormatType;
}

/**
 * generateGoodsMovementReport - parameters interface
 */
export interface IGenerateGoodsMovementReportParams {
  generateGoodsMovementReportRequest: GenerateGoodsMovementReportRequest;
  format?: ReportFormatType;
}

/**
 * generateGoodsRealizationReport - parameters interface
 */
export interface IGenerateGoodsRealizationReportParams {
  generateGoodsRealizationReportRequest: GenerateGoodsRealizationReportRequest;
  format?: ReportFormatType;
}

/**
 * generateGoodsTurnoverReport - parameters interface
 */
export interface IGenerateGoodsTurnoverReportParams {
  generateGoodsTurnoverRequest: GenerateGoodsTurnoverRequest;
  format?: ReportFormatType;
}

/**
 * generateMassOrderLabelsReport - parameters interface
 */
export interface IGenerateMassOrderLabelsReportParams {
  generateMassOrderLabelsRequest: GenerateMassOrderLabelsRequest;
  format?: PageFormatType;
}

/**
 * generatePricesReport - parameters interface
 */
export interface IGeneratePricesReportParams {
  generatePricesReportRequest: GeneratePricesReportRequest;
  format?: ReportFormatType;
}

/**
 * generateShelfsStatisticsReport - parameters interface
 */
export interface IGenerateShelfsStatisticsReportParams {
  generateShelfsStatisticsRequest: GenerateShelfsStatisticsRequest;
  format?: ReportFormatType;
}

/**
 * generateShipmentListDocumentReport - parameters interface
 */
export interface IGenerateShipmentListDocumentReportParams {
  generateShipmentListDocumentReportRequest: GenerateShipmentListDocumentReportRequest;
}

/**
 * generateShowsSalesReport - parameters interface
 */
export interface IGenerateShowsSalesReportParams {
  generateShowsSalesReportRequest: GenerateShowsSalesReportRequest;
  format?: ReportFormatType;
}

/**
 * generateStocksOnWarehousesReport - parameters interface
 */
export interface IGenerateStocksOnWarehousesReportParams {
  generateStocksOnWarehousesReportRequest: GenerateStocksOnWarehousesReportRequest;
  format?: ReportFormatType;
}

/**
 * generateUnitedMarketplaceServicesReport - parameters interface
 */
export interface IGenerateUnitedMarketplaceServicesReportParams {
  generateUnitedMarketplaceServicesReportRequest: GenerateUnitedMarketplaceServicesReportRequest;
  format?: ReportFormatType;
}

/**
 * generateUnitedNettingReport - parameters interface
 */
export interface IGenerateUnitedNettingReportParams {
  generateUnitedNettingReportRequest: GenerateUnitedNettingReportRequest;
  format?: ReportFormatType;
}

/**
 * generateUnitedOrdersReport - parameters interface
 */
export interface IGenerateUnitedOrdersReportParams {
  generateUnitedOrdersRequest: GenerateUnitedOrdersRequest;
  format?: ReportFormatType;
}

/**
 * getReportInfo - parameters interface
 */
export interface IGetReportInfoParams {
  reportId: string;
}

/**
 * ReportsApi - API class
 */
@autoinject()
export class ReportsApi extends Api {

  /**
   * Creates a new ReportsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Отчет по бусту продаж
   * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generateBoostConsolidatedRequest 
   * @param params.format Формат отчета.
   */
  async generateBoostConsolidatedReport(params: IGenerateBoostConsolidatedReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateBoostConsolidatedReport', params, 'generateBoostConsolidatedRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/boost-consolidated/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateBoostConsolidatedRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет «Конкурентная позиция»
   * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
   * @param params.generateCompetitorsPositionReportRequest 
   * @param params.format Формат отчета.
   */
  async generateCompetitorsPositionReport(params: IGenerateCompetitorsPositionReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateCompetitorsPositionReport', params, 'generateCompetitorsPositionReportRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/competitors-position/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateCompetitorsPositionReportRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет по отзывам о товарах
   * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generateGoodsFeedbackRequest 
   * @param params.format Формат отчета.
   */
  async generateGoodsFeedbackReport(params: IGenerateGoodsFeedbackReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateGoodsFeedbackReport', params, 'generateGoodsFeedbackRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/goods-feedback/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateGoodsFeedbackRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет по движению товаров
   * Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generateGoodsMovementReportRequest 
   * @param params.format Формат отчета.
   */
  async generateGoodsMovementReport(params: IGenerateGoodsMovementReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateGoodsMovementReport', params, 'generateGoodsMovementReportRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/goods-movement/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateGoodsMovementReportRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет по реализации
   * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generateGoodsRealizationReportRequest 
   * @param params.format Формат отчета.
   */
  async generateGoodsRealizationReport(params: IGenerateGoodsRealizationReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateGoodsRealizationReport', params, 'generateGoodsRealizationReportRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/goods-realization/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateGoodsRealizationReportRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет по оборачиваемости
   * Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generateGoodsTurnoverRequest 
   * @param params.format Формат отчета.
   */
  async generateGoodsTurnoverReport(params: IGenerateGoodsTurnoverReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateGoodsTurnoverReport', params, 'generateGoodsTurnoverRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/goods-turnover/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateGoodsTurnoverRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
   * Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * @param params.generateMassOrderLabelsRequest 
   * @param params.format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.
   */
  async generateMassOrderLabelsReport(params: IGenerateMassOrderLabelsReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateMassOrderLabelsReport', params, 'generateMassOrderLabelsRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/documents/labels/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateMassOrderLabelsRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет «Цены на рынке»
   * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generatePricesReportRequest 
   * @param params.format Формат отчета.
   */
  async generatePricesReport(params: IGeneratePricesReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generatePricesReport', params, 'generatePricesReportRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/prices/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generatePricesReportRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет по полкам
   * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generateShelfsStatisticsRequest 
   * @param params.format Формат отчета.
   */
  async generateShelfsStatisticsReport(params: IGenerateShelfsStatisticsReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateShelfsStatisticsReport', params, 'generateShelfsStatisticsRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/shelf-statistics/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateShelfsStatisticsRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Получение листа сборки
   * Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generateShipmentListDocumentReportRequest 
   */
  async generateShipmentListDocumentReport(params: IGenerateShipmentListDocumentReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateShipmentListDocumentReport', params, 'generateShipmentListDocumentReportRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/documents/shipment-list/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateShipmentListDocumentReportRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет «Аналитика продаж»
   * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
   * @param params.generateShowsSalesReportRequest 
   * @param params.format Формат отчета.
   */
  async generateShowsSalesReport(params: IGenerateShowsSalesReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateShowsSalesReport', params, 'generateShowsSalesReportRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/shows-sales/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateShowsSalesReportRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет по остаткам на складах
   * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generateStocksOnWarehousesReportRequest 
   * @param params.format Формат отчета.
   */
  async generateStocksOnWarehousesReport(params: IGenerateStocksOnWarehousesReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateStocksOnWarehousesReport', params, 'generateStocksOnWarehousesReportRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/stocks-on-warehouses/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateStocksOnWarehousesReportRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет по стоимости услуг
   * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generateUnitedMarketplaceServicesReportRequest 
   * @param params.format Формат отчета.
   */
  async generateUnitedMarketplaceServicesReport(params: IGenerateUnitedMarketplaceServicesReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateUnitedMarketplaceServicesReport', params, 'generateUnitedMarketplaceServicesReportRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/united-marketplace-services/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateUnitedMarketplaceServicesReportRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет по платежам
   * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generateUnitedNettingReportRequest 
   * @param params.format Формат отчета.
   */
  async generateUnitedNettingReport(params: IGenerateUnitedNettingReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateUnitedNettingReport', params, 'generateUnitedNettingReportRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/united-netting/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateUnitedNettingReportRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет по заказам
   * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param params.generateUnitedOrdersRequest 
   * @param params.format Формат отчета.
   */
  async generateUnitedOrdersReport(params: IGenerateUnitedOrdersReportParams): Promise<GenerateReportResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('generateUnitedOrdersReport', params, 'generateUnitedOrdersRequest');

    // Create URL to call
    const url = `${this.basePath}/reports/united-orders/generate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'format': params['format'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['generateUnitedOrdersRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Получение заданного отчета
   * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
   * @param params.reportId Идентификатор отчета, который вы получили после запуска генерации. 
   */
  async getReportInfo(params: IGetReportInfoParams): Promise<GetReportInfoResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getReportInfo', params, 'reportId');

    // Create URL to call
    const url = `${this.basePath}/reports/info/{reportId}`
      .replace(`{${'reportId'}}`, encodeURIComponent(`${params['reportId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

