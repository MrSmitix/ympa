note
    description: "API tests for MODELS_API"
    date: "$Date$"
    revision: "$Revision$"


class MODELS_API_TEST

inherit

    EQA_TEST_SET

feature -- Test routines


    test_model
            -- Информация об одной модели
            --
            -- Возвращает информацию о модели товара.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
        local
            l_response: GET_MODELS_RESPONSE
            l_model_id: INTEGER_64
            l_region_id: INTEGER_64
            l_currency: CURRENCY_TYPE
        do
            -- TODO: Initialize required params.
            -- l_model_id
            -- l_region_id

            -- l_response := api.model(l_model_id, l_region_id, l_currency)
            assert ("not_implemented", False)
        end

    test_model_offers
            -- Список предложений для одной модели
            --
            -- Возвращает информацию о первых десяти предложениях, расположенных на карточке модели.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей метод не поддерживается. Идентификатор групповой модели игнорируется.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
        local
            l_response: GET_MODELS_OFFERS_RESPONSE
            l_model_id: INTEGER_64
            l_region_id: INTEGER_64
            l_currency: CURRENCY_TYPE
            l_order_by_price: SORT_ORDER_TYPE
            l_count: INTEGER_32
            l_page: INTEGER_32
        do
            -- TODO: Initialize required params.
            -- l_model_id
            -- l_region_id

            -- l_response := api.model_offers(l_model_id, l_region_id, l_currency, l_order_by_price, l_count, l_page)
            assert ("not_implemented", False)
        end

    test_models
            -- Информация о нескольких моделях
            --
            -- Возвращает информацию о моделях товаров.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
        local
            l_response: GET_MODELS_RESPONSE
            l_region_id: INTEGER_64
            l_get_models_request: GET_MODELS_REQUEST
            l_currency: CURRENCY_TYPE
        do
            -- TODO: Initialize required params.
            -- l_region_id
            -- l_get_models_request

            -- l_response := api.models(l_region_id, l_get_models_request, l_currency)
            assert ("not_implemented", False)
        end

    test_models_offers
            -- Список предложений для нескольких моделей
            --
            -- Возвращает информацию о первых десяти предложениях, расположенных на карточках моделей, идентификаторы которых указаны в запросе.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей выдача предложений не поддерживается. Идентификаторы групповых моделей игнорируются.  В одном запросе можно получить информацию о предложениях не более чем для 100 моделей.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
        local
            l_response: GET_MODELS_OFFERS_RESPONSE
            l_region_id: INTEGER_64
            l_get_models_request: GET_MODELS_REQUEST
            l_currency: CURRENCY_TYPE
            l_order_by_price: SORT_ORDER_TYPE
        do
            -- TODO: Initialize required params.
            -- l_region_id
            -- l_get_models_request

            -- l_response := api.models_offers(l_region_id, l_get_models_request, l_currency, l_order_by_price)
            assert ("not_implemented", False)
        end

    test_search_models
            -- Поиск модели товара
            --
            -- Возвращает информацию о моделях, удовлетворяющих заданным в запросе условиям поиска.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
        local
            l_response: SEARCH_MODELS_RESPONSE
            l_query: STRING_32
            l_region_id: INTEGER_64
            l_currency: CURRENCY_TYPE
            l_page: INTEGER_32
            l_page_size: INTEGER_32
        do
            -- TODO: Initialize required params.
            -- l_query
            -- l_region_id

            -- l_response := api.search_models(l_query, l_region_id, l_currency, l_page, l_page_size)
            assert ("not_implemented", False)
        end

feature {NONE} -- Implementation

    api: MODELS_API
            -- Create an object instance of `MODELS_API'.
        once
            create { MODELS_API } Result
        end

end
