/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GetChatHistoryResponse,
  CreateChatRequest,
  GetChatHistoryRequest,
  CreateChatResponse,
  SendMessageToChatRequest,
  GetChatsRequest,
  GetChatsResponse,
  EmptyApiResponse,
} from './models';

/**
 * createChat - parameters interface
 */
export interface ICreateChatParams {
  businessId: number;
  createChatRequest: CreateChatRequest;
}

/**
 * getChatHistory - parameters interface
 */
export interface IGetChatHistoryParams {
  businessId: number;
  chatId: number;
  getChatHistoryRequest: GetChatHistoryRequest;
  pageToken?: string;
  limit?: number;
}

/**
 * getChats - parameters interface
 */
export interface IGetChatsParams {
  businessId: number;
  getChatsRequest: GetChatsRequest;
  pageToken?: string;
  limit?: number;
}

/**
 * sendFileToChat - parameters interface
 */
export interface ISendFileToChatParams {
  businessId: number;
  chatId: number;
  file: File;
}

/**
 * sendMessageToChat - parameters interface
 */
export interface ISendMessageToChatParams {
  businessId: number;
  chatId: number;
  sendMessageToChatRequest: SendMessageToChatRequest;
}

/**
 * ChatsApi - API class
 */
@autoinject()
export class ChatsApi extends Api {

  /**
   * Creates a new ChatsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Создание нового чата с покупателем
   * Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.createChatRequest description
   */
  async createChat(params: ICreateChatParams): Promise<CreateChatResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('createChat', params, 'businessId');
    this.ensureParamIsSet('createChat', params, 'createChatRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/chats/new`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createChatRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Получение истории сообщений в чате
   * Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.chatId Идентификатор чата.
   * @param params.getChatHistoryRequest description
   * @param params.pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
   * @param params.limit Количество значений на одной странице. 
   */
  async getChatHistory(params: IGetChatHistoryParams): Promise<GetChatHistoryResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getChatHistory', params, 'businessId');
    this.ensureParamIsSet('getChatHistory', params, 'chatId');
    this.ensureParamIsSet('getChatHistory', params, 'getChatHistoryRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/chats/history`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'chatId': params['chatId'],
        'page_token': params['pageToken'],
        'limit': params['limit'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['getChatHistoryRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Получение доступных чатов
   * Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.getChatsRequest description
   * @param params.pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
   * @param params.limit Количество значений на одной странице. 
   */
  async getChats(params: IGetChatsParams): Promise<GetChatsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getChats', params, 'businessId');
    this.ensureParamIsSet('getChats', params, 'getChatsRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/chats`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'page_token': params['pageToken'],
        'limit': params['limit'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['getChatsRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отправка файла в чат
   * Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.chatId Идентификатор чата.
   * @param params.file Содержимое файла. Максимальный размер файла — 5 Мбайт.
   */
  async sendFileToChat(params: ISendFileToChatParams): Promise<EmptyApiResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('sendFileToChat', params, 'businessId');
    this.ensureParamIsSet('sendFileToChat', params, 'chatId');
    this.ensureParamIsSet('sendFileToChat', params, 'file');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/chats/file/send`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'chatId': params['chatId'],
      })
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'file': params['file'],
      }))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отправка сообщения в чат
   * Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.chatId Идентификатор чата.
   * @param params.sendMessageToChatRequest description
   */
  async sendMessageToChat(params: ISendMessageToChatParams): Promise<EmptyApiResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('sendMessageToChat', params, 'businessId');
    this.ensureParamIsSet('sendMessageToChat', params, 'chatId');
    this.ensureParamIsSet('sendMessageToChat', params, 'sendMessageToChatRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/chats/message`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'chatId': params['chatId'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['sendMessageToChatRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

