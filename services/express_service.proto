/*
  Партнерский API Маркета

  API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

  The version of the OpenAPI document: LATEST

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ympa_protobuf_schema.services.expressservice;

import "google/protobuf/empty.proto";
import public "models/add_hidden_offers_request.proto";
import public "models/add_offers_to_archive_request.proto";
import public "models/add_offers_to_archive_response.proto";
import public "models/api_client_data_error_response.proto";
import public "models/api_forbidden_error_response.proto";
import public "models/api_limit_error_response.proto";
import public "models/api_locked_error_response.proto";
import public "models/api_not_found_error_response.proto";
import public "models/api_server_error_response.proto";
import public "models/api_unauthorized_error_response.proto";
import public "models/calculate_tariffs_request.proto";
import public "models/calculate_tariffs_response.proto";
import public "models/confirm_prices_request.proto";
import public "models/create_chat_request.proto";
import public "models/create_chat_response.proto";
import public "models/currency_type.proto";
import public "models/delete_campaign_offers_request.proto";
import public "models/delete_campaign_offers_response.proto";
import public "models/delete_goods_feedback_comment_request.proto";
import public "models/delete_hidden_offers_request.proto";
import public "models/delete_offers_from_archive_request.proto";
import public "models/delete_offers_from_archive_response.proto";
import public "models/delete_offers_request.proto";
import public "models/delete_offers_response.proto";
import public "models/delete_promo_offers_request.proto";
import public "models/delete_promo_offers_response.proto";
import public "models/empty_api_response.proto";
import public "models/feed_index_logs_status_type.proto";
import public "models/generate_boost_consolidated_request.proto";
import public "models/generate_competitors_position_report_request.proto";
import public "models/generate_goods_feedback_request.proto";
import public "models/generate_goods_realization_report_request.proto";
import public "models/generate_mass_order_labels_request.proto";
import public "models/generate_prices_report_request.proto";
import public "models/generate_report_response.proto";
import public "models/generate_shelfs_statistics_request.proto";
import public "models/generate_shows_sales_report_request.proto";
import public "models/generate_stocks_on_warehouses_report_request.proto";
import public "models/generate_united_marketplace_services_report_request.proto";
import public "models/generate_united_netting_report_request.proto";
import public "models/generate_united_orders_request.proto";
import public "models/get_all_offers_response.proto";
import public "models/get_bids_info_request.proto";
import public "models/get_bids_info_response.proto";
import public "models/get_bids_recommendations_request.proto";
import public "models/get_bids_recommendations_response.proto";
import public "models/get_business_buyer_info_response.proto";
import public "models/get_business_documents_info_response.proto";
import public "models/get_business_settings_response.proto";
import public "models/get_campaign_logins_response.proto";
import public "models/get_campaign_offers_request.proto";
import public "models/get_campaign_offers_response.proto";
import public "models/get_campaign_region_response.proto";
import public "models/get_campaign_response.proto";
import public "models/get_campaign_settings_response.proto";
import public "models/get_campaigns_response.proto";
import public "models/get_categories_max_sale_quantum_request.proto";
import public "models/get_categories_max_sale_quantum_response.proto";
import public "models/get_categories_request.proto";
import public "models/get_categories_response.proto";
import public "models/get_category_content_parameters_response.proto";
import public "models/get_chat_history_request.proto";
import public "models/get_chat_history_response.proto";
import public "models/get_chats_request.proto";
import public "models/get_chats_response.proto";
import public "models/get_delivery_services_response.proto";
import public "models/get_feed_index_logs_response.proto";
import public "models/get_feed_response.proto";
import public "models/get_feedback_list_response.proto";
import public "models/get_feeds_response.proto";
import public "models/get_goods_feedback_comments_request.proto";
import public "models/get_goods_feedback_comments_response.proto";
import public "models/get_goods_feedback_request.proto";
import public "models/get_goods_feedback_response.proto";
import public "models/get_goods_stats_request.proto";
import public "models/get_goods_stats_response.proto";
import public "models/get_hidden_offers_response.proto";
import public "models/get_offer_cards_content_status_request.proto";
import public "models/get_offer_cards_content_status_response.proto";
import public "models/get_offer_mapping_entries_response.proto";
import public "models/get_offer_mappings_request.proto";
import public "models/get_offer_mappings_response.proto";
import public "models/get_offer_recommendations_request.proto";
import public "models/get_offer_recommendations_response.proto";
import public "models/get_offers_response.proto";
import public "models/get_order_labels_data_response.proto";
import public "models/get_order_response.proto";
import public "models/get_orders_response.proto";
import public "models/get_orders_stats_request.proto";
import public "models/get_orders_stats_response.proto";
import public "models/get_prices_by_offer_ids_request.proto";
import public "models/get_prices_by_offer_ids_response.proto";
import public "models/get_prices_response.proto";
import public "models/get_promo_offers_request.proto";
import public "models/get_promo_offers_response.proto";
import public "models/get_promos_request.proto";
import public "models/get_promos_response.proto";
import public "models/get_quality_rating_details_response.proto";
import public "models/get_quality_rating_request.proto";
import public "models/get_quality_rating_response.proto";
import public "models/get_quarantine_offers_request.proto";
import public "models/get_quarantine_offers_response.proto";
import public "models/get_region_with_children_response.proto";
import public "models/get_regions_response.proto";
import public "models/get_report_info_response.proto";
import public "models/get_return_response.proto";
import public "models/get_returns_response.proto";
import public "models/get_suggested_offer_mapping_entries_request.proto";
import public "models/get_suggested_offer_mapping_entries_response.proto";
import public "models/get_suggested_offer_mappings_request.proto";
import public "models/get_suggested_offer_mappings_response.proto";
import public "models/get_warehouse_stocks_request.proto";
import public "models/get_warehouse_stocks_response.proto";
import public "models/get_warehouses_response.proto";
import public "models/offer_availability_status_type.proto";
import public "models/offer_mapping_kind_type.proto";
import public "models/offer_processing_status_type.proto";
import public "models/order_buyer_type.proto";
import public "models/order_delivery_dispatch_type.proto";
import public "models/order_status_type.proto";
import public "models/order_substatus_type.proto";
import public "models/page_format_type.proto";
import public "models/provide_order_item_identifiers_request.proto";
import public "models/provide_order_item_identifiers_response.proto";
import public "models/put_sku_bids_request.proto";
import public "models/refund_status_type.proto";
import public "models/report_format_type.proto";
import public "models/return_type.proto";
import public "models/send_message_to_chat_request.proto";
import public "models/set_feed_params_request.proto";
import public "models/set_order_box_layout_request.proto";
import public "models/set_order_box_layout_response.proto";
import public "models/set_order_shipment_boxes_request.proto";
import public "models/set_order_shipment_boxes_response.proto";
import public "models/skip_goods_feedback_reaction_request.proto";
import public "models/suggest_prices_request.proto";
import public "models/suggest_prices_response.proto";
import public "models/update_business_prices_request.proto";
import public "models/update_campaign_offers_request.proto";
import public "models/update_goods_feedback_comment_request.proto";
import public "models/update_goods_feedback_comment_response.proto";
import public "models/update_offer_content_request.proto";
import public "models/update_offer_content_response.proto";
import public "models/update_offer_mapping_entry_request.proto";
import public "models/update_offer_mappings_request.proto";
import public "models/update_offer_mappings_response.proto";
import public "models/update_order_item_request.proto";
import public "models/update_order_status_request.proto";
import public "models/update_order_status_response.proto";
import public "models/update_order_statuses_request.proto";
import public "models/update_order_statuses_response.proto";
import public "models/update_prices_request.proto";
import public "models/update_promo_offers_request.proto";
import public "models/update_promo_offers_response.proto";
import public "models/update_stocks_request.proto";
import public "models/verify_order_eac_request.proto";
import public "models/verify_order_eac_response.proto";

service ExpressService {
  rpc AddHiddenOffers (AddHiddenOffersRequest) returns (EmptyApiResponse);

  rpc AddOffersToArchive (AddOffersToArchiveRequest) returns (AddOffersToArchiveResponse);

  rpc CalculateTariffs (CalculateTariffsRequest) returns (CalculateTariffsResponse);

  rpc ConfirmBusinessPrices (ConfirmBusinessPricesRequest) returns (EmptyApiResponse);

  rpc ConfirmCampaignPrices (ConfirmCampaignPricesRequest) returns (EmptyApiResponse);

  rpc CreateChat (CreateChatRequest) returns (CreateChatResponse);

  rpc DeleteCampaignOffers (DeleteCampaignOffersRequest) returns (DeleteCampaignOffersResponse);

  rpc DeleteGoodsFeedbackComment (DeleteGoodsFeedbackCommentRequest) returns (EmptyApiResponse);

  rpc DeleteHiddenOffers (DeleteHiddenOffersRequest) returns (EmptyApiResponse);

  rpc DeleteOffers (DeleteOffersRequest) returns (DeleteOffersResponse);

  rpc DeleteOffersFromArchive (DeleteOffersFromArchiveRequest) returns (DeleteOffersFromArchiveResponse);

  rpc DeletePromoOffers (DeletePromoOffersRequest) returns (DeletePromoOffersResponse);

  rpc GenerateBoostConsolidatedReport (GenerateBoostConsolidatedReportRequest) returns (GenerateReportResponse);

  rpc GenerateCompetitorsPositionReport (GenerateCompetitorsPositionReportRequest) returns (GenerateReportResponse);

  rpc GenerateGoodsFeedbackReport (GenerateGoodsFeedbackReportRequest) returns (GenerateReportResponse);

  rpc GenerateGoodsRealizationReport (GenerateGoodsRealizationReportRequest) returns (GenerateReportResponse);

  rpc GenerateMassOrderLabelsReport (GenerateMassOrderLabelsReportRequest) returns (GenerateReportResponse);

  rpc GenerateOrderLabel (GenerateOrderLabelRequest) returns (GenerateOrderLabelResponse);

  rpc GenerateOrderLabels (GenerateOrderLabelsRequest) returns (GenerateOrderLabelsResponse);

  rpc GeneratePricesReport (GeneratePricesReportRequest) returns (GenerateReportResponse);

  rpc GenerateShelfsStatisticsReport (GenerateShelfsStatisticsReportRequest) returns (GenerateReportResponse);

  rpc GenerateShowsSalesReport (GenerateShowsSalesReportRequest) returns (GenerateReportResponse);

  rpc GenerateStocksOnWarehousesReport (GenerateStocksOnWarehousesReportRequest) returns (GenerateReportResponse);

  rpc GenerateUnitedMarketplaceServicesReport (GenerateUnitedMarketplaceServicesReportRequest) returns (GenerateReportResponse);

  rpc GenerateUnitedNettingReport (GenerateUnitedNettingReportRequest) returns (GenerateReportResponse);

  rpc GenerateUnitedOrdersReport (GenerateUnitedOrdersReportRequest) returns (GenerateReportResponse);

  rpc GetAllOffers (GetAllOffersRequest) returns (GetAllOffersResponse);

  rpc GetBidsInfoForBusiness (GetBidsInfoForBusinessRequest) returns (GetBidsInfoResponse);

  rpc GetBidsRecommendations (GetBidsRecommendationsRequest) returns (GetBidsRecommendationsResponse);

  rpc GetBusinessQuarantineOffers (GetBusinessQuarantineOffersRequest) returns (GetQuarantineOffersResponse);

  rpc GetBusinessSettings (GetBusinessSettingsRequest) returns (GetBusinessSettingsResponse);

  rpc GetCampaign (GetCampaignRequest) returns (GetCampaignResponse);

  rpc GetCampaignLogins (GetCampaignLoginsRequest) returns (GetCampaignLoginsResponse);

  rpc GetCampaignOffers (GetCampaignOffersRequest) returns (GetCampaignOffersResponse);

  rpc GetCampaignQuarantineOffers (GetCampaignQuarantineOffersRequest) returns (GetQuarantineOffersResponse);

  rpc GetCampaignRegion (GetCampaignRegionRequest) returns (GetCampaignRegionResponse);

  rpc GetCampaignSettings (GetCampaignSettingsRequest) returns (GetCampaignSettingsResponse);

  rpc GetCampaigns (GetCampaignsRequest) returns (GetCampaignsResponse);

  rpc GetCampaignsByLogin (GetCampaignsByLoginRequest) returns (GetCampaignsResponse);

  rpc GetCategoriesMaxSaleQuantum (GetCategoriesMaxSaleQuantumRequest) returns (GetCategoriesMaxSaleQuantumResponse);

  rpc GetCategoriesTree (GetCategoriesTreeRequest) returns (GetCategoriesResponse);

  rpc GetCategoryContentParameters (GetCategoryContentParametersRequest) returns (GetCategoryContentParametersResponse);

  rpc GetChatHistory (GetChatHistoryRequest) returns (GetChatHistoryResponse);

  rpc GetChats (GetChatsRequest) returns (GetChatsResponse);

  rpc GetDeliveryServices (google.protobuf.Empty) returns (GetDeliveryServicesResponse);

  rpc GetFeed (GetFeedRequest) returns (GetFeedResponse);

  rpc GetFeedIndexLogs (GetFeedIndexLogsRequest) returns (GetFeedIndexLogsResponse);

  rpc GetFeedbackAndCommentUpdates (GetFeedbackAndCommentUpdatesRequest) returns (GetFeedbackListResponse);

  rpc GetFeeds (GetFeedsRequest) returns (GetFeedsResponse);

  rpc GetGoodsFeedbackComments (GetGoodsFeedbackCommentsRequest) returns (GetGoodsFeedbackCommentsResponse);

  rpc GetGoodsFeedbacks (GetGoodsFeedbacksRequest) returns (GetGoodsFeedbackResponse);

  rpc GetGoodsStats (GetGoodsStatsRequest) returns (GetGoodsStatsResponse);

  rpc GetHiddenOffers (GetHiddenOffersRequest) returns (GetHiddenOffersResponse);

  rpc GetOfferCardsContentStatus (GetOfferCardsContentStatusRequest) returns (GetOfferCardsContentStatusResponse);

  rpc GetOfferMappingEntries (GetOfferMappingEntriesRequest) returns (GetOfferMappingEntriesResponse);

  rpc GetOfferMappings (GetOfferMappingsRequest) returns (GetOfferMappingsResponse);

  rpc GetOfferRecommendations (GetOfferRecommendationsRequest) returns (GetOfferRecommendationsResponse);

  rpc GetOffers (GetOffersRequest) returns (GetOffersResponse);

  rpc GetOrder (GetOrderRequest) returns (GetOrderResponse);

  rpc GetOrderBusinessBuyerInfo (GetOrderBusinessBuyerInfoRequest) returns (GetBusinessBuyerInfoResponse);

  rpc GetOrderBusinessDocumentsInfo (GetOrderBusinessDocumentsInfoRequest) returns (GetBusinessDocumentsInfoResponse);

  rpc GetOrderLabelsData (GetOrderLabelsDataRequest) returns (GetOrderLabelsDataResponse);

  rpc GetOrders (GetOrdersRequest) returns (GetOrdersResponse);

  rpc GetOrdersStats (GetOrdersStatsRequest) returns (GetOrdersStatsResponse);

  rpc GetPrices (GetPricesRequest) returns (GetPricesResponse);

  rpc GetPricesByOfferIds (GetPricesByOfferIdsRequest) returns (GetPricesByOfferIdsResponse);

  rpc GetPromoOffers (GetPromoOffersRequest) returns (GetPromoOffersResponse);

  rpc GetPromos (GetPromosRequest) returns (GetPromosResponse);

  rpc GetQualityRatingDetails (GetQualityRatingDetailsRequest) returns (GetQualityRatingDetailsResponse);

  rpc GetQualityRatings (GetQualityRatingsRequest) returns (GetQualityRatingResponse);

  rpc GetReportInfo (GetReportInfoRequest) returns (GetReportInfoResponse);

  rpc GetReturn (GetReturnRequest) returns (GetReturnResponse);

  rpc GetReturnApplication (GetReturnApplicationRequest) returns (GetReturnApplicationResponse);

  rpc GetReturnPhoto (GetReturnPhotoRequest) returns (GetReturnPhotoResponse);

  rpc GetReturns (GetReturnsRequest) returns (GetReturnsResponse);

  rpc GetStocks (GetStocksRequest) returns (GetWarehouseStocksResponse);

  rpc GetSuggestedOfferMappingEntries (GetSuggestedOfferMappingEntriesRequest) returns (GetSuggestedOfferMappingEntriesResponse);

  rpc GetSuggestedOfferMappings (GetSuggestedOfferMappingsRequest) returns (GetSuggestedOfferMappingsResponse);

  rpc GetSuggestedPrices (GetSuggestedPricesRequest) returns (SuggestPricesResponse);

  rpc GetWarehouses (GetWarehousesRequest) returns (GetWarehousesResponse);

  rpc ProvideOrderItemIdentifiers (ProvideOrderItemIdentifiersRequest) returns (ProvideOrderItemIdentifiersResponse);

  rpc PutBidsForBusiness (PutBidsForBusinessRequest) returns (EmptyApiResponse);

  rpc PutBidsForCampaign (PutBidsForCampaignRequest) returns (EmptyApiResponse);

  rpc RefreshFeed (RefreshFeedRequest) returns (EmptyApiResponse);

  rpc SearchRegionChildren (SearchRegionChildrenRequest) returns (GetRegionWithChildrenResponse);

  rpc SearchRegionsById (SearchRegionsByIdRequest) returns (GetRegionsResponse);

  rpc SearchRegionsByName (SearchRegionsByNameRequest) returns (GetRegionsResponse);

  rpc SendFileToChat (SendFileToChatRequest) returns (EmptyApiResponse);

  rpc SendMessageToChat (SendMessageToChatRequest) returns (EmptyApiResponse);

  rpc SetFeedParams (SetFeedParamsRequest) returns (EmptyApiResponse);

  rpc SetOrderBoxLayout (SetOrderBoxLayoutRequest) returns (SetOrderBoxLayoutResponse);

  rpc SetOrderShipmentBoxes (SetOrderShipmentBoxesRequest) returns (SetOrderShipmentBoxesResponse);

  rpc SkipGoodsFeedbacksReaction (SkipGoodsFeedbacksReactionRequest) returns (EmptyApiResponse);

  rpc UpdateBusinessPrices (UpdateBusinessPricesRequest) returns (EmptyApiResponse);

  rpc UpdateCampaignOffers (UpdateCampaignOffersRequest) returns (EmptyApiResponse);

  rpc UpdateGoodsFeedbackComment (UpdateGoodsFeedbackCommentRequest) returns (UpdateGoodsFeedbackCommentResponse);

  rpc UpdateOfferContent (UpdateOfferContentRequest) returns (UpdateOfferContentResponse);

  rpc UpdateOfferMappingEntries (UpdateOfferMappingEntriesRequest) returns (EmptyApiResponse);

  rpc UpdateOfferMappings (UpdateOfferMappingsRequest) returns (UpdateOfferMappingsResponse);

  rpc UpdateOrderItems (UpdateOrderItemsRequest) returns (google.protobuf.Empty);

  rpc UpdateOrderStatus (UpdateOrderStatusRequest) returns (UpdateOrderStatusResponse);

  rpc UpdateOrderStatuses (UpdateOrderStatusesRequest) returns (UpdateOrderStatusesResponse);

  rpc UpdatePrices (UpdatePricesRequest) returns (EmptyApiResponse);

  rpc UpdatePromoOffers (UpdatePromoOffersRequest) returns (UpdatePromoOffersResponse);

  rpc UpdateStocks (UpdateStocksRequest) returns (EmptyApiResponse);

  rpc VerifyOrderEac (VerifyOrderEacRequest) returns (VerifyOrderEacResponse);

}

message AddHiddenOffersRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Запрос на скрытие оферов.
  AddHiddenOffersRequest addHiddenOffersRequest = 2;

}

message AddOffersToArchiveRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  AddOffersToArchiveRequest addOffersToArchiveRequest = 2;

}

message CalculateTariffsRequest {
  CalculateTariffsRequest calculateTariffsRequest = 1;

}

message ConfirmBusinessPricesRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  ConfirmPricesRequest confirmPricesRequest = 2;

}

message ConfirmCampaignPricesRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  ConfirmPricesRequest confirmPricesRequest = 2;

}

message CreateChatRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  // description
  CreateChatRequest createChatRequest = 2;

}

message DeleteCampaignOffersRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  DeleteCampaignOffersRequest deleteCampaignOffersRequest = 2;

}

message DeleteGoodsFeedbackCommentRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  DeleteGoodsFeedbackCommentRequest deleteGoodsFeedbackCommentRequest = 2;

}

message DeleteHiddenOffersRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Запрос на возобновление показа оферов.
  DeleteHiddenOffersRequest deleteHiddenOffersRequest = 2;

}

message DeleteOffersRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  DeleteOffersRequest deleteOffersRequest = 2;

}

message DeleteOffersFromArchiveRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  DeleteOffersFromArchiveRequest deleteOffersFromArchiveRequest = 2;

}

message DeletePromoOffersRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  DeletePromoOffersRequest deletePromoOffersRequest = 2;

}

message GenerateBoostConsolidatedReportRequest {
  GenerateBoostConsolidatedRequest generateBoostConsolidatedRequest = 1;
  // Формат отчета.
  ReportFormatType format = 2;

}

message GenerateCompetitorsPositionReportRequest {
  GenerateCompetitorsPositionReportRequest generateCompetitorsPositionReportRequest = 1;
  // Формат отчета.
  ReportFormatType format = 2;

}

message GenerateGoodsFeedbackReportRequest {
  GenerateGoodsFeedbackRequest generateGoodsFeedbackRequest = 1;
  // Формат отчета.
  ReportFormatType format = 2;

}

message GenerateGoodsRealizationReportRequest {
  GenerateGoodsRealizationReportRequest generateGoodsRealizationReportRequest = 1;
  // Формат отчета.
  ReportFormatType format = 2;

}

message GenerateMassOrderLabelsReportRequest {
  GenerateMassOrderLabelsRequest generateMassOrderLabelsRequest = 1;
  // Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.
  PageFormatType format = 2;

}

message GenerateOrderLabelRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;
  // Идентификатор грузоместа.
  int64 shipmentId = 3;
  // Идентификатор коробки.
  int64 boxId = 4;
  // Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.
  PageFormatType format = 5;

}

message GenerateOrderLabelResponse {
  string data = 1;
}

message GenerateOrderLabelsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;
  // Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.
  PageFormatType format = 3;

}

message GenerateOrderLabelsResponse {
  string data = 1;
}

message GeneratePricesReportRequest {
  GeneratePricesReportRequest generatePricesReportRequest = 1;
  // Формат отчета.
  ReportFormatType format = 2;

}

message GenerateShelfsStatisticsReportRequest {
  GenerateShelfsStatisticsRequest generateShelfsStatisticsRequest = 1;
  // Формат отчета.
  ReportFormatType format = 2;

}

message GenerateShowsSalesReportRequest {
  GenerateShowsSalesReportRequest generateShowsSalesReportRequest = 1;
  // Формат отчета.
  ReportFormatType format = 2;

}

message GenerateStocksOnWarehousesReportRequest {
  GenerateStocksOnWarehousesReportRequest generateStocksOnWarehousesReportRequest = 1;
  // Формат отчета.
  ReportFormatType format = 2;

}

message GenerateUnitedMarketplaceServicesReportRequest {
  GenerateUnitedMarketplaceServicesReportRequest generateUnitedMarketplaceServicesReportRequest = 1;
  // Формат отчета.
  ReportFormatType format = 2;

}

message GenerateUnitedNettingReportRequest {
  GenerateUnitedNettingReportRequest generateUnitedNettingReportRequest = 1;
  // Формат отчета.
  ReportFormatType format = 2;

}

message GenerateUnitedOrdersReportRequest {
  GenerateUnitedOrdersRequest generateUnitedOrdersRequest = 1;
  // Формат отчета.
  ReportFormatType format = 2;

}

message GetAllOffersRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор прайс-листа.
  int64 feedId = 2;
  // Номер сегмента с результатами.  Значение по умолчанию: `0`.  {% note info %}  Номера сегментов запрашиваются последовательно, пока не будет получен сегмент с пустым ответом. Пустой ответ означает, что все предложения магазина получены.  {% endnote %}  {% note alert %}  Нумерация начинается с 0. Чтобы запросить первую страницу, необходимо указать `chunk=0` и т. д.  {% endnote %} 
  int32 chunk = 3;

}

message GetBidsInfoForBusinessRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;
  // description
  GetBidsInfoRequest getBidsInfoRequest = 4;

}

message GetBidsRecommendationsRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  // description.
  GetBidsRecommendationsRequest getBidsRecommendationsRequest = 2;

}

message GetBusinessQuarantineOffersRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  GetQuarantineOffersRequest getQuarantineOffersRequest = 2;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 3;
  // Количество значений на одной странице. 
  int32 limit = 4;

}

message GetBusinessSettingsRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;

}

message GetCampaignRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;

}

message GetCampaignLoginsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;

}

message GetCampaignOffersRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  GetCampaignOffersRequest getCampaignOffersRequest = 2;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 3;
  // Количество значений на одной странице. 
  int32 limit = 4;

}

message GetCampaignQuarantineOffersRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  GetQuarantineOffersRequest getQuarantineOffersRequest = 2;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 3;
  // Количество значений на одной странице. 
  int32 limit = 4;

}

message GetCampaignRegionRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;

}

message GetCampaignSettingsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;

}

message GetCampaignsRequest {
  // Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 page = 1;
  // Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 pageSize = 2;

}

message GetCampaignsByLoginRequest {
  // Логин пользователя.
  string login = 1;
  // Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 page = 2;
  // Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 pageSize = 3;

}

message GetCategoriesMaxSaleQuantumRequest {
  GetCategoriesMaxSaleQuantumRequest getCategoriesMaxSaleQuantumRequest = 1;

}

message GetCategoriesTreeRequest {
  GetCategoriesRequest getCategoriesRequest = 1;

}

message GetCategoryContentParametersRequest {
  // Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
  int64 categoryId = 1;

}

message GetChatHistoryRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  // Идентификатор чата.
  int64 chatId = 2;
  // description
  GetChatHistoryRequest getChatHistoryRequest = 3;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 4;
  // Количество значений на одной странице. 
  int32 limit = 5;

}

message GetChatsRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  // description
  GetChatsRequest getChatsRequest = 2;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 3;
  // Количество значений на одной странице. 
  int32 limit = 4;

}

message GetFeedRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор прайс-листа.
  int64 feedId = 2;

}

message GetFeedIndexLogsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор прайс-листа.
  int64 feedId = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;
  // Начальная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Значение по умолчанию: последние восемь дней со времени отправки запроса. 
  string publishedTimeFrom = 4;
  // Конечная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-31T00:42:42+03:00`.  Значение по умолчанию: дата и время отправки запроса.  {% note info %}  Если во время переключения между страницами выходных данных на Яндекс Маркете появятся новые результаты индексации прайс-листа, вы не получите часть данных. Чтобы этого не произошло, зафиксируйте выходные данные с помощью входного параметра `published_time_to`. Значение параметра не должно быть датой из будущего.  {% endnote %} 
  string publishedTimeTo = 5;
  // Статус индексации и проверки прайс-листа на соответствие техническим требованиям.  Возможные значения: * `ERROR` — произошли ошибки. * `OK` — обработан без ошибок. * `WARNING` — наблюдались некритичные проблемы. 
  FeedIndexLogsStatusType status = 6;

}

message GetFeedbackAndCommentUpdatesRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;
  // Начальная дата обновления отзывов.  Если параметр указан, возвращаются отзывы, которые были написаны или обновлены с этой даты.  Формат даты: `ГГГГ-ММ-ДД`. 
  string fromDate = 4;

}

message GetFeedsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;

}

message GetGoodsFeedbackCommentsRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  GetGoodsFeedbackCommentsRequest getGoodsFeedbackCommentsRequest = 2;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 3;
  // Количество значений на одной странице. 
  int32 limit = 4;

}

message GetGoodsFeedbacksRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;
  GetGoodsFeedbackRequest getGoodsFeedbackRequest = 4;

}

message GetGoodsStatsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  GetGoodsStatsRequest getGoodsStatsRequest = 2;

}

message GetHiddenOffersRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор скрытого предложения. 
  repeated string offerId = 2;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 3;
  // Количество значений на одной странице. 
  int32 limit = 4;
  // Позиция в списке, начиная с которой возвращаются результаты ответа.  Используется вместе с параметром `limit`.  Если задан `offset`, параметры `page_number` и `page_size` игнорируются.  `offset` игнорируется, если задан `page_token`. 
  int32 offset = 5;
  // Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 page = 6;
  // Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 pageSize = 7;

}

message GetOfferCardsContentStatusRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;
  GetOfferCardsContentStatusRequest getOfferCardsContentStatusRequest = 4;

}

message GetOfferMappingEntriesRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор товара в каталоге.
  repeated string offerId = 2;
  // Ваш SKU товара.  Параметр может быть указан несколько раз, например:  ``` ...shop_sku=123&shop_sku=129&shop_sku=141... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
  repeated string shopSku = 3;
  // Тип маппинга.
  OfferMappingKindType mappingKind = 4;
  // Фильтрация по статусу публикации товара:  * `READY` — товар прошел модерацию. * `IN_WORK` — товар проходит модерацию. * `NEED_CONTENT` — для товара без SKU на Маркете marketSku нужно найти карточку самостоятельно или создать ее. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. * `OTHER` — товар не прошел модерацию по другой причине.  Можно указать несколько статусов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...status=READY,IN_WORK... ...status=READY&status=IN_WORK... ```  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. 
  repeated OfferProcessingStatusType status = 5;
  // Фильтрация по планам поставок товара:  * `ACTIVE` — поставки будут. * `INACTIVE` — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. * `DELISTED` — архив: товар закончился на складе, и его поставок больше не будет.  Можно указать несколько значений в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...availability=INACTIVE,DELISTED... ...availability=INACTIVE&availability=DELISTED... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
  repeated OfferAvailabilityStatusType availability = 6;
  // Фильтрация по идентификатору категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  Можно указать несколько идентификаторов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...category_id=14727164,14382343... ...category_id=14727164&category_id=14382343... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
  repeated int32 categoryId = 7;
  // Фильтрация по бренду товара.  Можно указать несколько брендов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...vendor=Aqua%20Minerale,Borjomi... ...vendor=Aqua%20Minerale&vendor=Borjomi... ```  Чтобы товар попал в результаты фильтрации, его бренд должен точно совпадать с одним из указанных в запросе. Например, если указан бренд Schwarzkopf, то в результатах не будет товаров Schwarzkopf Professional.  Если в названии бренда есть символы, которые не входят в таблицу ASCII (в том числе кириллические символы), используйте для них URL-кодирование. Например, пробел — %20, апостроф «'» — %27 и т. д. Подробнее см. в разделе [Кодирование URL русскоязычной Википедии](https://ru.wikipedia.org/wiki/URL#Кодирование_URL).  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. 
  repeated string vendor = 8;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 9;
  // Количество значений на одной странице. 
  int32 limit = 10;

}

message GetOfferMappingsRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;
  GetOfferMappingsRequest getOfferMappingsRequest = 4;

}

message GetOfferRecommendationsRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  GetOfferRecommendationsRequest getOfferRecommendationsRequest = 2;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 3;
  // Количество значений на одной странице. 
  int32 limit = 4;

}

message GetOffersRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Поисковый запрос.  Поддерживается язык запросов.  Значение по умолчанию: все предложения магазина, размещенные на Маркете. 
  string query = 2;
  // Идентификатор прайс-листа.
  int64 feedId = 3;
  // Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
  string shopCategoryId = 4;
  // Валюта, в которой указана цена предложения.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна. 
  CurrencyType currency = 5;
  // Фильтр по признаку соотнесения предложения и карточки модели.  Возможные значения:  * `0 / FALSE / NO` — поиск выполняется среди предложений, не соотнесенных ни с какой карточкой модели.  * `1 / TRUE / YES` — поиск выполняется среди предложений, соотнесенных с карточками моделей). 
  bool matched = 6;
  // Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 page = 7;
  // Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 pageSize = 8;

}

message GetOrderRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;

}

message GetOrderBusinessBuyerInfoRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;

}

message GetOrderBusinessDocumentsInfoRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;

}

message GetOrderLabelsDataRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;

}

message GetOrdersRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Фильтрация заказов по идентификаторам. <br><br> ⚠️ Не используйте это поле одновременно с другими фильтрами. Если вы хотите воспользоваться ими, оставьте поле пустым. 
  repeated int64 orderIds = 2;
  // Статус заказа:  * `CANCELLED` — заказ отменен.  * `DELIVERED` — заказ получен покупателем.  * `DELIVERY` — заказ передан в службу доставки.  * `PICKUP` — заказ доставлен в пункт самовывоза.  * `PROCESSING` — заказ находится в обработке.  * `UNPAID` — заказ оформлен, но еще не оплачен (если выбрана оплата при оформлении).  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
  repeated OrderStatusType status = 3;
  // Этап обработки заказа (если он имеет статус `PROCESSING`) или причина отмены заказа (если он имеет статус `CANCELLED`).  Возможные значения для заказа в статусе `PROCESSING`:  * `STARTED` — заказ подтвержден, его можно начать обрабатывать. * `READY_TO_SHIP` — заказ собран и готов к отправке. * `SHIPPED` — заказ передан службе доставки.  Возможные значения для заказа в статусе `CANCELLED`:  * `DELIVERY_SERVICE_UNDELIVERED` — служба доставки не смогла доставить заказ.  * `PROCESSING_EXPIRED` — значение более не используется.  * `REPLACING_ORDER` — покупатель решил заменить товар другим по собственной инициативе.  * `RESERVATION_EXPIRED` — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.  * `RESERVATION_FAILED` — Маркет не может продолжить дальнейшую обработку заказа.  * `SHOP_FAILED` — магазин не может выполнить заказ.  * `USER_CHANGED_MIND` — покупатель отменил заказ по личным причинам.  * `USER_NOT_PAID` — покупатель не оплатил заказ (для типа оплаты `PREPAID`) в течение 30 минут.  * `USER_REFUSED_DELIVERY` — покупателя не устроили условия доставки.  * `USER_REFUSED_PRODUCT` — покупателю не подошел товар.  * `USER_REFUSED_QUALITY` — покупателя не устроило качество товара.  * `USER_UNREACHABLE` — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:    * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;   * перерыв между первым и третьим звонком не менее 90 минут;   * соединение не короче 5 секунд.    Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400. * `USER_WANTS_TO_CHANGE_DELIVERY_DATE` — покупатель хочет получить заказ в другой день. * `CANCELLED_COURIER_NOT_FOUND` — не удалось найти курьера.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
  repeated OrderSubstatusType substatus = 4;
  // Начальная дата для фильтрации заказов по дате оформления.  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной и конечной датой (параметр `toDate`) должно быть не больше 30 дней.  Значение по умолчанию: 30 дней назад от текущей даты. 
  string fromDate = 5;
  // Конечная дата для фильтрации заказов по дате оформления.  Показываются заказы, созданные до 00:00 указанного дня.  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной (параметр `fromDate`) и конечной датой должно быть не больше 30 дней.  Значение по умолчанию: текущая дата. 
  string toDate = 6;
  // Начальная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр `shipmentDate`).  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной и конечной датой (параметр `supplierShipmentDateTo`) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. 
  string supplierShipmentDateFrom = 7;
  // Конечная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр `shipmentDate`).  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной (параметр `supplierShipmentDateFrom`) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. 
  string supplierShipmentDateTo = 8;
  // Начальная дата для фильтрации заказов по дате и времени обновления (параметр `updatedAt`).  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Между начальной и конечной датой (параметр `updatedAtTo`) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. 
  string updatedAtFrom = 9;
  // Конечная дата для фильтрации заказов по дате и времени обновления (параметр `updatedAt`).  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Между начальной (параметр `updatedAtFrom`) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. 
  string updatedAtTo = 10;
  // Способ отгрузки
  OrderDeliveryDispatchType dispatchType = 11;
  // Фильтрация заказов по типам:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
  bool fake = 12;
  // Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да.  * `false` — нет.  Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 
  bool hasCis = 13;
  // **Только для модели DBS**  Фильтрация заказов по наличию запросов покупателей на отмену.  При значение `true` возвращаются только заказы, которые находятся в статусе `DELIVERY` или `PICKUP` и которые пользователи решили отменить.  Чтобы подтвердить или отклонить отмену, отправьте запрос [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation). 
  bool onlyWaitingForCancellationApprove = 14;
  // Фильтрация заказов с долгой доставкой (31-60 дней) по подтвержденной дате доставки:  * `true` — возвращаются только заказы с неподтвержденной датой доставки. * `false` — фильтрация не применяется. 
  bool onlyEstimatedDelivery = 15;
  // Фильтрация заказов по типу покупателя. 
  OrderBuyerType buyerType = 16;
  // Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 page = 17;
  // Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 pageSize = 18;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 19;
  // Количество значений на одной странице. 
  int32 limit = 20;

}

message GetOrdersStatsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;
  GetOrdersStatsRequest getOrdersStatsRequest = 4;

}

message GetPricesRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;
  // Фильтр по нахождению в архиве.
  bool archived = 4;

}

message GetPricesByOfferIdsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;
  GetPricesByOfferIdsRequest getPricesByOfferIdsRequest = 4;

}

message GetPromoOffersRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  GetPromoOffersRequest getPromoOffersRequest = 2;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 3;
  // Количество значений на одной странице. 
  int32 limit = 4;

}

message GetPromosRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  GetPromosRequest getPromosRequest = 2;

}

message GetQualityRatingDetailsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;

}

message GetQualityRatingsRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  GetQualityRatingRequest getQualityRatingRequest = 2;

}

message GetReportInfoRequest {
  // Идентификатор отчета, который вы получили после запуска генерации. 
  string reportId = 1;

}

message GetReturnRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;
  // Идентификатор возврата.
  int64 returnId = 3;

}

message GetReturnApplicationRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;
  // Идентификатор возврата.
  int64 returnId = 3;

}

message GetReturnApplicationResponse {
  string data = 1;
}

message GetReturnPhotoRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;
  // Идентификатор возврата.
  int64 returnId = 3;
  // Идентификатор товара в возврате.
  int64 itemId = 4;
  // Хеш ссылки изображения для загрузки.
  string imageHash = 5;

}

message GetReturnPhotoResponse {
  string data = 1;
}

message GetReturnsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;
  // Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. 
  repeated int64 orderIds = 4;
  // Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. 
  repeated RefundStatusType statuses = 5;
  // Тип заказа для фильтрации:  * `RETURN` — возврат.  * `UNREDEEMED` — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. 
  ReturnType type = 6;
  // Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
  string fromDate = 7;
  // Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
  string toDate = 8;
  // {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `fromDate`.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления. 
  string fromDate2 = 9;
  // {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `toDate`.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления. 
  string toDate2 = 10;

}

message GetStocksRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;
  GetWarehouseStocksRequest getWarehouseStocksRequest = 4;

}

message GetSuggestedOfferMappingEntriesRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  GetSuggestedOfferMappingEntriesRequest getSuggestedOfferMappingEntriesRequest = 2;

}

message GetSuggestedOfferMappingsRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  GetSuggestedOfferMappingsRequest getSuggestedOfferMappingsRequest = 2;

}

message GetSuggestedPricesRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  SuggestPricesRequest suggestPricesRequest = 2;

}

message GetWarehousesRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;

}

message ProvideOrderItemIdentifiersRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;
  ProvideOrderItemIdentifiersRequest provideOrderItemIdentifiersRequest = 3;

}

message PutBidsForBusinessRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  // description
  PutSkuBidsRequest putSkuBidsRequest = 2;

}

message PutBidsForCampaignRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // description
  PutSkuBidsRequest putSkuBidsRequest = 2;

}

message RefreshFeedRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор прайс-листа.
  int64 feedId = 2;

}

message SearchRegionChildrenRequest {
  // Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  int64 regionId = 1;
  // Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 page = 2;
  // Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
  int32 pageSize = 3;

}

message SearchRegionsByIdRequest {
  // Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  int64 regionId = 1;

}

message SearchRegionsByNameRequest {
  // Название региона.  Важно учитывать регистр: первая буква должна быть заглавной, остальные — строчными. Например, `Москва`. 
  string name = 1;
  // Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
  string pageToken = 2;
  // Количество значений на одной странице. 
  int32 limit = 3;

}

message SendFileToChatRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  // Идентификатор чата.
  int64 chatId = 2;
  // Содержимое файла. Максимальный размер файла — 5 Мбайт.
  string file = 3;

}

message SendMessageToChatRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  // Идентификатор чата.
  int64 chatId = 2;
  // description
  SendMessageToChatRequest sendMessageToChatRequest = 3;

}

message SetFeedParamsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор прайс-листа.
  int64 feedId = 2;
  SetFeedParamsRequest setFeedParamsRequest = 3;

}

message SetOrderBoxLayoutRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;
  SetOrderBoxLayoutRequest setOrderBoxLayoutRequest = 3;

}

message SetOrderShipmentBoxesRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;
  // Параметр больше не используется. Вставьте любое число — просто чтобы получился корректный URL. 
  int64 shipmentId = 3;
  SetOrderShipmentBoxesRequest setOrderShipmentBoxesRequest = 4;

}

message SkipGoodsFeedbacksReactionRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  SkipGoodsFeedbackReactionRequest skipGoodsFeedbackReactionRequest = 2;

}

message UpdateBusinessPricesRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  UpdateBusinessPricesRequest updateBusinessPricesRequest = 2;

}

message UpdateCampaignOffersRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  UpdateCampaignOffersRequest updateCampaignOffersRequest = 2;

}

message UpdateGoodsFeedbackCommentRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  UpdateGoodsFeedbackCommentRequest updateGoodsFeedbackCommentRequest = 2;

}

message UpdateOfferContentRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  UpdateOfferContentRequest updateOfferContentRequest = 2;

}

message UpdateOfferMappingEntriesRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  UpdateOfferMappingEntryRequest updateOfferMappingEntryRequest = 2;

}

message UpdateOfferMappingsRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  UpdateOfferMappingsRequest updateOfferMappingsRequest = 2;

}

message UpdateOrderItemsRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;
  UpdateOrderItemRequest updateOrderItemRequest = 3;

}

message UpdateOrderStatusRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;
  UpdateOrderStatusRequest updateOrderStatusRequest = 3;

}

message UpdateOrderStatusesRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  UpdateOrderStatusesRequest updateOrderStatusesRequest = 2;

}

message UpdatePricesRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  UpdatePricesRequest updatePricesRequest = 2;

}

message UpdatePromoOffersRequest {
  // Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 businessId = 1;
  UpdatePromoOffersRequest updatePromoOffersRequest = 2;

}

message UpdateStocksRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  UpdateStocksRequest updateStocksRequest = 2;

}

message VerifyOrderEacRequest {
  // Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  int64 campaignId = 1;
  // Идентификатор заказа.
  int64 orderId = 2;
  VerifyOrderEacRequest verifyOrderEacRequest = 3;

}

