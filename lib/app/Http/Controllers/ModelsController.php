<?php

/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class ModelsController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation getModels
     *
     * Информация о нескольких моделях.
     *
     *
     * @return Http response
     */
    public function getModels()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['regionId'])) {
            throw new \InvalidArgumentException('Missing the required parameter $regionId when calling getModels');
        }
        $regionId = $input['regionId'];

        if (!isset($input['getModelsRequest'])) {
            throw new \InvalidArgumentException('Missing the required parameter $getModelsRequest when calling getModels');
        }
        $getModelsRequest = $input['getModelsRequest'];

        $currency = $input['currency'];


        return response('How about implementing getModels as a post method ?');
    }
    /**
     * Operation searchModels
     *
     * Поиск модели товара.
     *
     *
     * @return Http response
     */
    public function searchModels()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['query'])) {
            throw new \InvalidArgumentException('Missing the required parameter $query when calling searchModels');
        }
        $query = $input['query'];

        if (!isset($input['regionId'])) {
            throw new \InvalidArgumentException('Missing the required parameter $regionId when calling searchModels');
        }
        $regionId = $input['regionId'];

        $currency = $input['currency'];

        if ($input['page'] > 10000) {
            throw new \InvalidArgumentException('invalid value for $page when calling ModelsController.searchModels, must be smaller than or equal to 10000.');
        }
        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing searchModels as a get method ?');
    }
    /**
     * Operation getModelsOffers
     *
     * Список предложений для нескольких моделей.
     *
     *
     * @return Http response
     */
    public function getModelsOffers()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['regionId'])) {
            throw new \InvalidArgumentException('Missing the required parameter $regionId when calling getModelsOffers');
        }
        $regionId = $input['regionId'];

        if (!isset($input['getModelsRequest'])) {
            throw new \InvalidArgumentException('Missing the required parameter $getModelsRequest when calling getModelsOffers');
        }
        $getModelsRequest = $input['getModelsRequest'];

        $currency = $input['currency'];

        $orderByPrice = $input['orderByPrice'];


        return response('How about implementing getModelsOffers as a post method ?');
    }
    /**
     * Operation getModel
     *
     * Информация об одной модели.
     *
     * @param int $modelId Идентификатор модели товара. (required)
     *
     * @return Http response
     */
    public function getModel($modelId)
    {
        $input = Request::all();

        //path params validation
        if ($modelId <= 0) {
            throw new \InvalidArgumentException('invalid value for $modelId when calling ModelsController.getModel, must be bigger than 0.');
        }


        //not path params validation

        return response('How about implementing getModel as a get method ?');
    }
    /**
     * Operation getModelOffers
     *
     * Список предложений для одной модели.
     *
     * @param int $modelId Идентификатор модели товара. (required)
     *
     * @return Http response
     */
    public function getModelOffers($modelId)
    {
        $input = Request::all();

        //path params validation
        if ($modelId <= 0) {
            throw new \InvalidArgumentException('invalid value for $modelId when calling ModelsController.getModelOffers, must be bigger than 0.');
        }


        //not path params validation

        return response('How about implementing getModelOffers as a get method ?');
    }
}
