# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ПартнерскийAPIМаркета.Api.DeliveryServices do
  @moduledoc """
  API calls for all endpoints tagged `DeliveryServices`.
  """

  alias ПартнерскийAPIМаркета.Connection
  import ПартнерскийAPIМаркета.RequestBuilder

  @doc """
  Справочник служб доставки
  Возвращает справочник служб доставки: идентификаторы и наименования. |**⚙️ Лимит:** 5 000 запросов в час| |-| 

  ### Parameters

  - `connection` (ПартнерскийAPIМаркета.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ПартнерскийAPIМаркета.Model.GetDeliveryServicesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_delivery_services(Tesla.Env.client, keyword()) :: {:ok, ПартнерскийAPIМаркета.Model.ApiUnauthorizedErrorResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.GetDeliveryServicesResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.ApiLimitErrorResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.ApiNotFoundErrorResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.ApiClientDataErrorResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.ApiForbiddenErrorResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.ApiServerErrorResponse.t} | {:error, Tesla.Env.t}
  def get_delivery_services(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/delivery/services")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, ПартнерскийAPIМаркета.Model.GetDeliveryServicesResponse},
      {400, ПартнерскийAPIМаркета.Model.ApiClientDataErrorResponse},
      {401, ПартнерскийAPIМаркета.Model.ApiUnauthorizedErrorResponse},
      {403, ПартнерскийAPIМаркета.Model.ApiForbiddenErrorResponse},
      {404, ПартнерскийAPIМаркета.Model.ApiNotFoundErrorResponse},
      {420, ПартнерскийAPIМаркета.Model.ApiLimitErrorResponse},
      {500, ПартнерскийAPIМаркета.Model.ApiServerErrorResponse}
    ])
  end
end
