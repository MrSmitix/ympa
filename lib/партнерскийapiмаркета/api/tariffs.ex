# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ПартнерскийAPIМаркета.Api.Tariffs do
  @moduledoc """
  API calls for all endpoints tagged `Tariffs`.
  """

  alias ПартнерскийAPIМаркета.Connection
  import ПартнерскийAPIМаркета.RequestBuilder

  @doc """
  Калькулятор стоимости услуг
  Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 

  ### Parameters

  - `connection` (ПартнерскийAPIМаркета.Connection): Connection to server
  - `calculate_tariffs_request` (CalculateTariffsRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ПартнерскийAPIМаркета.Model.CalculateTariffsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec calculate_tariffs(Tesla.Env.client, ПартнерскийAPIМаркета.Model.CalculateTariffsRequest.t, keyword()) :: {:ok, ПартнерскийAPIМаркета.Model.ApiUnauthorizedErrorResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.ApiLimitErrorResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.ApiNotFoundErrorResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.CalculateTariffsResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.ApiClientDataErrorResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.ApiForbiddenErrorResponse.t} | {:ok, ПартнерскийAPIМаркета.Model.ApiServerErrorResponse.t} | {:error, Tesla.Env.t}
  def calculate_tariffs(connection, calculate_tariffs_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/tariffs/calculate")
      |> add_param(:body, :body, calculate_tariffs_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, ПартнерскийAPIМаркета.Model.CalculateTariffsResponse},
      {400, ПартнерскийAPIМаркета.Model.ApiClientDataErrorResponse},
      {401, ПартнерскийAPIМаркета.Model.ApiUnauthorizedErrorResponse},
      {403, ПартнерскийAPIМаркета.Model.ApiForbiddenErrorResponse},
      {404, ПартнерскийAPIМаркета.Model.ApiNotFoundErrorResponse},
      {420, ПартнерскийAPIМаркета.Model.ApiLimitErrorResponse},
      {500, ПартнерскийAPIМаркета.Model.ApiServerErrorResponse}
    ])
  end
end
