=begin comment

Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::GetOfferDTO;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use WWW::OpenAPIClient::Object::AgeDTO;
use WWW::OpenAPIClient::Object::GetPriceDTO;
use WWW::OpenAPIClient::Object::GetPriceWithDiscountDTO;
use WWW::OpenAPIClient::Object::OfferCampaignStatusDTO;
use WWW::OpenAPIClient::Object::OfferCardStatusType;
use WWW::OpenAPIClient::Object::OfferConditionDTO;
use WWW::OpenAPIClient::Object::OfferManualDTO;
use WWW::OpenAPIClient::Object::OfferParamDTO;
use WWW::OpenAPIClient::Object::OfferSellingProgramDTO;
use WWW::OpenAPIClient::Object::OfferType;
use WWW::OpenAPIClient::Object::OfferWeightDimensionsDTO;
use WWW::OpenAPIClient::Object::TimePeriodDTO;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#Параметры товара.
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            my $_json_attribute = $self->attribute_map->{$_key};
            my $_type = $self->openapi_types->{$_key};
            my $_value = $self->{$_key};
            if ($_type =~ /^array\[(.+)\]$/i) { # array
                my $_subclass = $1;
                $_data->{$_json_attribute} =  [ map { $self->_to_json_primitives($_subclass, $_) } @$_value ];
            } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
                my $_subclass = $1;
                my %_hash = ();
                while (my($_key, $_element) = each %{$_value}) {
                    $_hash{$_key} = $self->_to_json_primitives($_subclass, $_element);
                }
                $_data->{$_json_attribute} = \%_hash;
            } elsif ( grep( /^$_type$/, ('int', 'double', 'string', 'boolean', 'DATE', 'DATE_TIME'))) {
                $_data->{$_json_attribute} = $self->_to_json_primitives($_type, $_value);
            } else {
                $_data->{$_json_attribute} = $_value;
            }
        }
    }

    return $_data;
}

# to_json non-array data
sub _to_json_primitives {
    my ($self, $type, $data) = @_;
    if ( grep( /^$type$/, ('int', 'double'))) {
        # https://metacpan.org/pod/JSON#simple-scalars
        # numify it, ensuring it will be dumped as a number
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        # https://metacpan.org/pod/JSON#simple-scalars
        # stringified
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        # https://metacpan.org/pod/JSON#JSON::true,-JSON::false,-JSON::null
        return $data ? \1 : \0;
    } elsif ($type eq 'DATE') {
        return undef unless defined $data;
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Eymd($optional_separator),-$dt-%3Emdy(...),-$dt-%3Edmy(...)
            return $data->ymd;
        }
        return $data .q();
    } elsif ($type eq 'DATE_TIME') {
        return undef unless defined $data;
        # the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Erfc3339
            return $data->rfc3339;
        }
        return $data .q();
    } else { # hash (model),  In this case, the TO_JSON of the $data object is executed
        return $data;
    }
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if (grep( /^$type$/ , ('DATE_TIME', 'DATE'))) {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double'))) {
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        return !!$data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => 'Параметры товара.',
                                  class => 'GetOfferDTO',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'offer_id' => {
        datatype => 'string',
        base_name => 'offerId',
        description => 'Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ',
        format => '',
        read_only => '',
            },
    'name' => {
        datatype => 'string',
        base_name => 'name',
        description => 'Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) ',
        format => '',
        read_only => '',
            },
    'market_category_id' => {
        datatype => 'int',
        base_name => 'marketCategoryId',
        description => 'Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать &#x60;marketCategoryId&#x60;, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). ',
        format => '',
        read_only => '',
            },
    'category' => {
        datatype => 'string',
        base_name => 'category',
        description => 'Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. ',
        format => '',
        read_only => '',
            },
    'pictures' => {
        datatype => 'ARRAY[string]',
        base_name => 'pictures',
        description => 'Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/images/sku12345.jpg&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/images/sku12345.jpg&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/tovar.jpg&#x60;  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) ',
        format => '',
        read_only => '',
            },
    'videos' => {
        datatype => 'ARRAY[string]',
        base_name => 'videos',
        description => 'Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/video/sku12345.avi&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/video/sku12345.avi&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/super-tovar.avi&#x60;  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) ',
        format => '',
        read_only => '',
            },
    'manuals' => {
        datatype => 'ARRAY[OfferManualDTO]',
        base_name => 'manuals',
        description => 'Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле &#x60;manuals&#x60;, загруженные ранее инструкции удалятся. ',
        format => '',
        read_only => '',
            },
    'vendor' => {
        datatype => 'string',
        base_name => 'vendor',
        description => 'Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.',
        format => '',
        read_only => '',
            },
    'barcodes' => {
        datatype => 'ARRAY[string]',
        base_name => 'barcodes',
        description => 'Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  ',
        format => '',
        read_only => '',
            },
    'description' => {
        datatype => 'string',
        base_name => 'description',
        description => 'Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) ',
        format => '',
        read_only => '',
            },
    'manufacturer_countries' => {
        datatype => 'ARRAY[string]',
        base_name => 'manufacturerCountries',
        description => 'Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). ',
        format => '',
        read_only => '',
            },
    'weight_dimensions' => {
        datatype => 'OfferWeightDimensionsDTO',
        base_name => 'weightDimensions',
        description => '',
        format => '',
        read_only => '',
            },
    'vendor_code' => {
        datatype => 'string',
        base_name => 'vendorCode',
        description => 'Артикул товара от производителя.',
        format => '',
        read_only => '',
            },
    'tags' => {
        datatype => 'ARRAY[string]',
        base_name => 'tags',
        description => 'Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. ',
        format => '',
        read_only => '',
            },
    'shelf_life' => {
        datatype => 'TimePeriodDTO',
        base_name => 'shelfLife',
        description => '',
        format => '',
        read_only => '',
            },
    'life_time' => {
        datatype => 'TimePeriodDTO',
        base_name => 'lifeTime',
        description => '',
        format => '',
        read_only => '',
            },
    'guarantee_period' => {
        datatype => 'TimePeriodDTO',
        base_name => 'guaranteePeriod',
        description => '',
        format => '',
        read_only => '',
            },
    'customs_commodity_code' => {
        datatype => 'string',
        base_name => 'customsCommodityCode',
        description => 'Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. ',
        format => '',
        read_only => '',
            },
    'certificates' => {
        datatype => 'ARRAY[string]',
        base_name => 'certificates',
        description => 'Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). ',
        format => '',
        read_only => '',
            },
    'box_count' => {
        datatype => 'int',
        base_name => 'boxCount',
        description => 'Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. ',
        format => '',
        read_only => '',
            },
    'condition' => {
        datatype => 'OfferConditionDTO',
        base_name => 'condition',
        description => '',
        format => '',
        read_only => '',
            },
    'type' => {
        datatype => 'OfferType',
        base_name => 'type',
        description => '',
        format => '',
        read_only => '',
            },
    'downloadable' => {
        datatype => 'boolean',
        base_name => 'downloadable',
        description => 'Признак цифрового товара. Укажите &#x60;true&#x60;, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) ',
        format => '',
        read_only => '',
            },
    'adult' => {
        datatype => 'boolean',
        base_name => 'adult',
        description => 'Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. ',
        format => '',
        read_only => '',
            },
    'age' => {
        datatype => 'AgeDTO',
        base_name => 'age',
        description => '',
        format => '',
        read_only => '',
            },
    'params' => {
        datatype => 'ARRAY[OfferParamDTO]',
        base_name => 'params',
        description => '{% note warning \&quot;\&quot; %}  Этот параметр устарел. При передаче характеристик используйте &#x60;parameterValues&#x60;.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. ',
        format => '',
        read_only => '',
            },
    'basic_price' => {
        datatype => 'GetPriceWithDiscountDTO',
        base_name => 'basicPrice',
        description => '',
        format => '',
        read_only => '',
            },
    'purchase_price' => {
        datatype => 'GetPriceDTO',
        base_name => 'purchasePrice',
        description => '',
        format => '',
        read_only => '',
            },
    'additional_expenses' => {
        datatype => 'GetPriceDTO',
        base_name => 'additionalExpenses',
        description => '',
        format => '',
        read_only => '',
            },
    'cofinance_price' => {
        datatype => 'GetPriceDTO',
        base_name => 'cofinancePrice',
        description => '',
        format => '',
        read_only => '',
            },
    'card_status' => {
        datatype => 'OfferCardStatusType',
        base_name => 'cardStatus',
        description => '',
        format => '',
        read_only => '',
            },
    'campaigns' => {
        datatype => 'ARRAY[OfferCampaignStatusDTO]',
        base_name => 'campaigns',
        description => 'Список магазинов, в которых размещен товар. ',
        format => '',
        read_only => '',
            },
    'selling_programs' => {
        datatype => 'ARRAY[OfferSellingProgramDTO]',
        base_name => 'sellingPrograms',
        description => 'Информация о том, какие для товара доступны модели размещения. ',
        format => '',
        read_only => '',
            },
    'archived' => {
        datatype => 'boolean',
        base_name => 'archived',
        description => 'Товар помещен в архив. ',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'offer_id' => 'string',
    'name' => 'string',
    'market_category_id' => 'int',
    'category' => 'string',
    'pictures' => 'ARRAY[string]',
    'videos' => 'ARRAY[string]',
    'manuals' => 'ARRAY[OfferManualDTO]',
    'vendor' => 'string',
    'barcodes' => 'ARRAY[string]',
    'description' => 'string',
    'manufacturer_countries' => 'ARRAY[string]',
    'weight_dimensions' => 'OfferWeightDimensionsDTO',
    'vendor_code' => 'string',
    'tags' => 'ARRAY[string]',
    'shelf_life' => 'TimePeriodDTO',
    'life_time' => 'TimePeriodDTO',
    'guarantee_period' => 'TimePeriodDTO',
    'customs_commodity_code' => 'string',
    'certificates' => 'ARRAY[string]',
    'box_count' => 'int',
    'condition' => 'OfferConditionDTO',
    'type' => 'OfferType',
    'downloadable' => 'boolean',
    'adult' => 'boolean',
    'age' => 'AgeDTO',
    'params' => 'ARRAY[OfferParamDTO]',
    'basic_price' => 'GetPriceWithDiscountDTO',
    'purchase_price' => 'GetPriceDTO',
    'additional_expenses' => 'GetPriceDTO',
    'cofinance_price' => 'GetPriceDTO',
    'card_status' => 'OfferCardStatusType',
    'campaigns' => 'ARRAY[OfferCampaignStatusDTO]',
    'selling_programs' => 'ARRAY[OfferSellingProgramDTO]',
    'archived' => 'boolean'
} );

__PACKAGE__->attribute_map( {
    'offer_id' => 'offerId',
    'name' => 'name',
    'market_category_id' => 'marketCategoryId',
    'category' => 'category',
    'pictures' => 'pictures',
    'videos' => 'videos',
    'manuals' => 'manuals',
    'vendor' => 'vendor',
    'barcodes' => 'barcodes',
    'description' => 'description',
    'manufacturer_countries' => 'manufacturerCountries',
    'weight_dimensions' => 'weightDimensions',
    'vendor_code' => 'vendorCode',
    'tags' => 'tags',
    'shelf_life' => 'shelfLife',
    'life_time' => 'lifeTime',
    'guarantee_period' => 'guaranteePeriod',
    'customs_commodity_code' => 'customsCommodityCode',
    'certificates' => 'certificates',
    'box_count' => 'boxCount',
    'condition' => 'condition',
    'type' => 'type',
    'downloadable' => 'downloadable',
    'adult' => 'adult',
    'age' => 'age',
    'params' => 'params',
    'basic_price' => 'basicPrice',
    'purchase_price' => 'purchasePrice',
    'additional_expenses' => 'additionalExpenses',
    'cofinance_price' => 'cofinancePrice',
    'card_status' => 'cardStatus',
    'campaigns' => 'campaigns',
    'selling_programs' => 'sellingPrograms',
    'archived' => 'archived'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
