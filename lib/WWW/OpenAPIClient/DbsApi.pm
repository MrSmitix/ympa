=begin comment

Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DbsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# accept_order_cancellation
#
# Отмена заказа покупателем
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param AcceptOrderCancellationRequest $accept_order_cancellation_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'accept_order_cancellation_request' => {
        data_type => 'AcceptOrderCancellationRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'accept_order_cancellation' } = {
        summary => 'Отмена заказа покупателем',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub accept_order_cancellation {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling accept_order_cancellation");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling accept_order_cancellation");
    }

    # verify the required parameter 'accept_order_cancellation_request' is set
    unless (exists $args{'accept_order_cancellation_request'}) {
      croak("Missing the required parameter 'accept_order_cancellation_request' when calling accept_order_cancellation");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/cancellation/accept';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'accept_order_cancellation_request'}) {
        $_body_data = $args{'accept_order_cancellation_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# add_hidden_offers
#
# Скрытие товаров и настройки скрытия
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param AddHiddenOffersRequest $add_hidden_offers_request Запрос на скрытие оферов. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'add_hidden_offers_request' => {
        data_type => 'AddHiddenOffersRequest',
        description => 'Запрос на скрытие оферов.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_hidden_offers' } = {
        summary => 'Скрытие товаров и настройки скрытия',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub add_hidden_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling add_hidden_offers");
    }

    # verify the required parameter 'add_hidden_offers_request' is set
    unless (exists $args{'add_hidden_offers_request'}) {
      croak("Missing the required parameter 'add_hidden_offers_request' when calling add_hidden_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/hidden-offers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'add_hidden_offers_request'}) {
        $_body_data = $args{'add_hidden_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# add_offers_to_archive
#
# Добавление товаров в архив
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param AddOffersToArchiveRequest $add_offers_to_archive_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'add_offers_to_archive_request' => {
        data_type => 'AddOffersToArchiveRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_offers_to_archive' } = {
        summary => 'Добавление товаров в архив',
        params => $params,
        returns => 'AddOffersToArchiveResponse',
        };
}
# @return AddOffersToArchiveResponse
#
sub add_offers_to_archive {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling add_offers_to_archive");
    }

    # verify the required parameter 'add_offers_to_archive_request' is set
    unless (exists $args{'add_offers_to_archive_request'}) {
      croak("Missing the required parameter 'add_offers_to_archive_request' when calling add_offers_to_archive");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings/archive';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'add_offers_to_archive_request'}) {
        $_body_data = $args{'add_offers_to_archive_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AddOffersToArchiveResponse', $response);
    return $_response_object;
}

#
# calculate_tariffs
#
# Калькулятор стоимости услуг
#
# @param CalculateTariffsRequest $calculate_tariffs_request  (required)
{
    my $params = {
    'calculate_tariffs_request' => {
        data_type => 'CalculateTariffsRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'calculate_tariffs' } = {
        summary => 'Калькулятор стоимости услуг',
        params => $params,
        returns => 'CalculateTariffsResponse',
        };
}
# @return CalculateTariffsResponse
#
sub calculate_tariffs {
    my ($self, %args) = @_;

    # verify the required parameter 'calculate_tariffs_request' is set
    unless (exists $args{'calculate_tariffs_request'}) {
      croak("Missing the required parameter 'calculate_tariffs_request' when calling calculate_tariffs");
    }

    # parse inputs
    my $_resource_path = '/tariffs/calculate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'calculate_tariffs_request'}) {
        $_body_data = $args{'calculate_tariffs_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CalculateTariffsResponse', $response);
    return $_response_object;
}

#
# confirm_business_prices
#
# Удаление товара из карантина по цене в кабинете
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param ConfirmPricesRequest $confirm_prices_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'confirm_prices_request' => {
        data_type => 'ConfirmPricesRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'confirm_business_prices' } = {
        summary => 'Удаление товара из карантина по цене в кабинете',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub confirm_business_prices {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling confirm_business_prices");
    }

    # verify the required parameter 'confirm_prices_request' is set
    unless (exists $args{'confirm_prices_request'}) {
      croak("Missing the required parameter 'confirm_prices_request' when calling confirm_business_prices");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/price-quarantine/confirm';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'confirm_prices_request'}) {
        $_body_data = $args{'confirm_prices_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# confirm_campaign_prices
#
# Удаление товара из карантина по цене в магазине
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param ConfirmPricesRequest $confirm_prices_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'confirm_prices_request' => {
        data_type => 'ConfirmPricesRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'confirm_campaign_prices' } = {
        summary => 'Удаление товара из карантина по цене в магазине',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub confirm_campaign_prices {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling confirm_campaign_prices");
    }

    # verify the required parameter 'confirm_prices_request' is set
    unless (exists $args{'confirm_prices_request'}) {
      croak("Missing the required parameter 'confirm_prices_request' when calling confirm_campaign_prices");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/price-quarantine/confirm';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'confirm_prices_request'}) {
        $_body_data = $args{'confirm_prices_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# create_chat
#
# Создание нового чата с покупателем
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param CreateChatRequest $create_chat_request description (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'create_chat_request' => {
        data_type => 'CreateChatRequest',
        description => 'description',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_chat' } = {
        summary => 'Создание нового чата с покупателем',
        params => $params,
        returns => 'CreateChatResponse',
        };
}
# @return CreateChatResponse
#
sub create_chat {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling create_chat");
    }

    # verify the required parameter 'create_chat_request' is set
    unless (exists $args{'create_chat_request'}) {
      croak("Missing the required parameter 'create_chat_request' when calling create_chat");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/chats/new';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_chat_request'}) {
        $_body_data = $args{'create_chat_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CreateChatResponse', $response);
    return $_response_object;
}

#
# create_outlet
#
# Создание точки продаж
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param ChangeOutletRequest $change_outlet_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'change_outlet_request' => {
        data_type => 'ChangeOutletRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_outlet' } = {
        summary => 'Создание точки продаж',
        params => $params,
        returns => 'CreateOutletResponse',
        };
}
# @return CreateOutletResponse
#
sub create_outlet {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling create_outlet");
    }

    # verify the required parameter 'change_outlet_request' is set
    unless (exists $args{'change_outlet_request'}) {
      croak("Missing the required parameter 'change_outlet_request' when calling create_outlet");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/outlets';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'change_outlet_request'}) {
        $_body_data = $args{'change_outlet_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CreateOutletResponse', $response);
    return $_response_object;
}

#
# delete_campaign_offers
#
# Удаление товаров из ассортимента магазина
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param DeleteCampaignOffersRequest $delete_campaign_offers_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'delete_campaign_offers_request' => {
        data_type => 'DeleteCampaignOffersRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_campaign_offers' } = {
        summary => 'Удаление товаров из ассортимента магазина',
        params => $params,
        returns => 'DeleteCampaignOffersResponse',
        };
}
# @return DeleteCampaignOffersResponse
#
sub delete_campaign_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling delete_campaign_offers");
    }

    # verify the required parameter 'delete_campaign_offers_request' is set
    unless (exists $args{'delete_campaign_offers_request'}) {
      croak("Missing the required parameter 'delete_campaign_offers_request' when calling delete_campaign_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_campaign_offers_request'}) {
        $_body_data = $args{'delete_campaign_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeleteCampaignOffersResponse', $response);
    return $_response_object;
}

#
# delete_goods_feedback_comment
#
# Удаление комментария к отзыву
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param DeleteGoodsFeedbackCommentRequest $delete_goods_feedback_comment_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'delete_goods_feedback_comment_request' => {
        data_type => 'DeleteGoodsFeedbackCommentRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_goods_feedback_comment' } = {
        summary => 'Удаление комментария к отзыву',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub delete_goods_feedback_comment {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling delete_goods_feedback_comment");
    }

    # verify the required parameter 'delete_goods_feedback_comment_request' is set
    unless (exists $args{'delete_goods_feedback_comment_request'}) {
      croak("Missing the required parameter 'delete_goods_feedback_comment_request' when calling delete_goods_feedback_comment");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/goods-feedback/comments/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_goods_feedback_comment_request'}) {
        $_body_data = $args{'delete_goods_feedback_comment_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# delete_hidden_offers
#
# Возобновление показа товаров
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param DeleteHiddenOffersRequest $delete_hidden_offers_request Запрос на возобновление показа оферов. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'delete_hidden_offers_request' => {
        data_type => 'DeleteHiddenOffersRequest',
        description => 'Запрос на возобновление показа оферов.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_hidden_offers' } = {
        summary => 'Возобновление показа товаров',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub delete_hidden_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling delete_hidden_offers");
    }

    # verify the required parameter 'delete_hidden_offers_request' is set
    unless (exists $args{'delete_hidden_offers_request'}) {
      croak("Missing the required parameter 'delete_hidden_offers_request' when calling delete_hidden_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/hidden-offers/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_hidden_offers_request'}) {
        $_body_data = $args{'delete_hidden_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# delete_offers
#
# Удаление товаров из каталога
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param DeleteOffersRequest $delete_offers_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'delete_offers_request' => {
        data_type => 'DeleteOffersRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_offers' } = {
        summary => 'Удаление товаров из каталога',
        params => $params,
        returns => 'DeleteOffersResponse',
        };
}
# @return DeleteOffersResponse
#
sub delete_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling delete_offers");
    }

    # verify the required parameter 'delete_offers_request' is set
    unless (exists $args{'delete_offers_request'}) {
      croak("Missing the required parameter 'delete_offers_request' when calling delete_offers");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_offers_request'}) {
        $_body_data = $args{'delete_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeleteOffersResponse', $response);
    return $_response_object;
}

#
# delete_offers_from_archive
#
# Удаление товаров из архива
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param DeleteOffersFromArchiveRequest $delete_offers_from_archive_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'delete_offers_from_archive_request' => {
        data_type => 'DeleteOffersFromArchiveRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_offers_from_archive' } = {
        summary => 'Удаление товаров из архива',
        params => $params,
        returns => 'DeleteOffersFromArchiveResponse',
        };
}
# @return DeleteOffersFromArchiveResponse
#
sub delete_offers_from_archive {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling delete_offers_from_archive");
    }

    # verify the required parameter 'delete_offers_from_archive_request' is set
    unless (exists $args{'delete_offers_from_archive_request'}) {
      croak("Missing the required parameter 'delete_offers_from_archive_request' when calling delete_offers_from_archive");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings/unarchive';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_offers_from_archive_request'}) {
        $_body_data = $args{'delete_offers_from_archive_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeleteOffersFromArchiveResponse', $response);
    return $_response_object;
}

#
# delete_outlet
#
# Удаление точки продаж
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $outlet_id Идентификатор точки продаж. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'outlet_id' => {
        data_type => 'int',
        description => 'Идентификатор точки продаж.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_outlet' } = {
        summary => 'Удаление точки продаж',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub delete_outlet {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling delete_outlet");
    }

    # verify the required parameter 'outlet_id' is set
    unless (exists $args{'outlet_id'}) {
      croak("Missing the required parameter 'outlet_id' when calling delete_outlet");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/outlets/{outletId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'outlet_id'}) {
        my $_base_variable = "{" . "outletId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'outlet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# delete_outlet_licenses
#
# Удаление лицензий для точек продаж
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param ARRAY[int] $ids Список идентификаторов лицензий. (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'ids' => {
        data_type => 'ARRAY[int]',
        description => 'Список идентификаторов лицензий.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_outlet_licenses' } = {
        summary => 'Удаление лицензий для точек продаж',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub delete_outlet_licenses {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling delete_outlet_licenses");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/outlets/licenses';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# delete_promo_offers
#
# Удаление товаров из акции
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param DeletePromoOffersRequest $delete_promo_offers_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'delete_promo_offers_request' => {
        data_type => 'DeletePromoOffersRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_promo_offers' } = {
        summary => 'Удаление товаров из акции',
        params => $params,
        returns => 'DeletePromoOffersResponse',
        };
}
# @return DeletePromoOffersResponse
#
sub delete_promo_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling delete_promo_offers");
    }

    # verify the required parameter 'delete_promo_offers_request' is set
    unless (exists $args{'delete_promo_offers_request'}) {
      croak("Missing the required parameter 'delete_promo_offers_request' when calling delete_promo_offers");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/promos/offers/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_promo_offers_request'}) {
        $_body_data = $args{'delete_promo_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeletePromoOffersResponse', $response);
    return $_response_object;
}

#
# generate_boost_consolidated_report
#
# Отчет по бусту продаж
#
# @param GenerateBoostConsolidatedRequest $generate_boost_consolidated_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_boost_consolidated_request' => {
        data_type => 'GenerateBoostConsolidatedRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_boost_consolidated_report' } = {
        summary => 'Отчет по бусту продаж',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_boost_consolidated_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_boost_consolidated_request' is set
    unless (exists $args{'generate_boost_consolidated_request'}) {
      croak("Missing the required parameter 'generate_boost_consolidated_request' when calling generate_boost_consolidated_report");
    }

    # parse inputs
    my $_resource_path = '/reports/boost-consolidated/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_boost_consolidated_request'}) {
        $_body_data = $args{'generate_boost_consolidated_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_competitors_position_report
#
# Отчет «Конкурентная позиция»
#
# @param GenerateCompetitorsPositionReportRequest $generate_competitors_position_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_competitors_position_report_request' => {
        data_type => 'GenerateCompetitorsPositionReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_competitors_position_report' } = {
        summary => 'Отчет «Конкурентная позиция»',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_competitors_position_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_competitors_position_report_request' is set
    unless (exists $args{'generate_competitors_position_report_request'}) {
      croak("Missing the required parameter 'generate_competitors_position_report_request' when calling generate_competitors_position_report");
    }

    # parse inputs
    my $_resource_path = '/reports/competitors-position/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_competitors_position_report_request'}) {
        $_body_data = $args{'generate_competitors_position_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_goods_feedback_report
#
# Отчет по отзывам о товарах
#
# @param GenerateGoodsFeedbackRequest $generate_goods_feedback_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_goods_feedback_request' => {
        data_type => 'GenerateGoodsFeedbackRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_goods_feedback_report' } = {
        summary => 'Отчет по отзывам о товарах',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_goods_feedback_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_goods_feedback_request' is set
    unless (exists $args{'generate_goods_feedback_request'}) {
      croak("Missing the required parameter 'generate_goods_feedback_request' when calling generate_goods_feedback_report");
    }

    # parse inputs
    my $_resource_path = '/reports/goods-feedback/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_goods_feedback_request'}) {
        $_body_data = $args{'generate_goods_feedback_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_mass_order_labels_report
#
# Готовые ярлыки‑наклейки на все коробки в нескольких заказах
#
# @param GenerateMassOrderLabelsRequest $generate_mass_order_labels_request  (required)
# @param PageFormatType $format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7. (optional)
{
    my $params = {
    'generate_mass_order_labels_request' => {
        data_type => 'GenerateMassOrderLabelsRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'PageFormatType',
        description => 'Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_mass_order_labels_report' } = {
        summary => 'Готовые ярлыки‑наклейки на все коробки в нескольких заказах',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_mass_order_labels_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_mass_order_labels_request' is set
    unless (exists $args{'generate_mass_order_labels_request'}) {
      croak("Missing the required parameter 'generate_mass_order_labels_request' when calling generate_mass_order_labels_report");
    }

    # parse inputs
    my $_resource_path = '/reports/documents/labels/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_mass_order_labels_request'}) {
        $_body_data = $args{'generate_mass_order_labels_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_order_label
#
# Готовый ярлык‑наклейка для коробки в заказе
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param int $shipment_id Идентификатор грузоместа. (required)
# @param int $box_id Идентификатор коробки. (required)
# @param PageFormatType $format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6. (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'shipment_id' => {
        data_type => 'int',
        description => 'Идентификатор грузоместа.',
        required => '1',
    },
    'box_id' => {
        data_type => 'int',
        description => 'Идентификатор коробки.',
        required => '1',
    },
    'format' => {
        data_type => 'PageFormatType',
        description => 'Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_order_label' } = {
        summary => 'Готовый ярлык‑наклейка для коробки в заказе',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub generate_order_label {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling generate_order_label");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling generate_order_label");
    }

    # verify the required parameter 'shipment_id' is set
    unless (exists $args{'shipment_id'}) {
      croak("Missing the required parameter 'shipment_id' when calling generate_order_label");
    }

    # verify the required parameter 'box_id' is set
    unless (exists $args{'box_id'}) {
      croak("Missing the required parameter 'box_id' when calling generate_order_label");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/pdf', 'application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'shipment_id'}) {
        my $_base_variable = "{" . "shipmentId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'shipment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'box_id'}) {
        my $_base_variable = "{" . "boxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'box_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# generate_order_labels
#
# Готовые ярлыки‑наклейки на все коробки в одном заказе
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param PageFormatType $format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6. (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'format' => {
        data_type => 'PageFormatType',
        description => 'Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_order_labels' } = {
        summary => 'Готовые ярлыки‑наклейки на все коробки в одном заказе',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub generate_order_labels {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling generate_order_labels");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling generate_order_labels");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/delivery/labels';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/pdf', 'application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# generate_prices_report
#
# Отчет «Цены на рынке»
#
# @param GeneratePricesReportRequest $generate_prices_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_prices_report_request' => {
        data_type => 'GeneratePricesReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_prices_report' } = {
        summary => 'Отчет «Цены на рынке»',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_prices_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_prices_report_request' is set
    unless (exists $args{'generate_prices_report_request'}) {
      croak("Missing the required parameter 'generate_prices_report_request' when calling generate_prices_report");
    }

    # parse inputs
    my $_resource_path = '/reports/prices/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_prices_report_request'}) {
        $_body_data = $args{'generate_prices_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_shelfs_statistics_report
#
# Отчет по полкам
#
# @param GenerateShelfsStatisticsRequest $generate_shelfs_statistics_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_shelfs_statistics_request' => {
        data_type => 'GenerateShelfsStatisticsRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_shelfs_statistics_report' } = {
        summary => 'Отчет по полкам',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_shelfs_statistics_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_shelfs_statistics_request' is set
    unless (exists $args{'generate_shelfs_statistics_request'}) {
      croak("Missing the required parameter 'generate_shelfs_statistics_request' when calling generate_shelfs_statistics_report");
    }

    # parse inputs
    my $_resource_path = '/reports/shelf-statistics/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_shelfs_statistics_request'}) {
        $_body_data = $args{'generate_shelfs_statistics_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_shows_sales_report
#
# Отчет «Аналитика продаж»
#
# @param GenerateShowsSalesReportRequest $generate_shows_sales_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_shows_sales_report_request' => {
        data_type => 'GenerateShowsSalesReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_shows_sales_report' } = {
        summary => 'Отчет «Аналитика продаж»',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_shows_sales_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_shows_sales_report_request' is set
    unless (exists $args{'generate_shows_sales_report_request'}) {
      croak("Missing the required parameter 'generate_shows_sales_report_request' when calling generate_shows_sales_report");
    }

    # parse inputs
    my $_resource_path = '/reports/shows-sales/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_shows_sales_report_request'}) {
        $_body_data = $args{'generate_shows_sales_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_stocks_on_warehouses_report
#
# Отчет по остаткам на складах
#
# @param GenerateStocksOnWarehousesReportRequest $generate_stocks_on_warehouses_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_stocks_on_warehouses_report_request' => {
        data_type => 'GenerateStocksOnWarehousesReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_stocks_on_warehouses_report' } = {
        summary => 'Отчет по остаткам на складах',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_stocks_on_warehouses_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_stocks_on_warehouses_report_request' is set
    unless (exists $args{'generate_stocks_on_warehouses_report_request'}) {
      croak("Missing the required parameter 'generate_stocks_on_warehouses_report_request' when calling generate_stocks_on_warehouses_report");
    }

    # parse inputs
    my $_resource_path = '/reports/stocks-on-warehouses/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_stocks_on_warehouses_report_request'}) {
        $_body_data = $args{'generate_stocks_on_warehouses_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_united_marketplace_services_report
#
# Отчет по стоимости услуг
#
# @param GenerateUnitedMarketplaceServicesReportRequest $generate_united_marketplace_services_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_united_marketplace_services_report_request' => {
        data_type => 'GenerateUnitedMarketplaceServicesReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_united_marketplace_services_report' } = {
        summary => 'Отчет по стоимости услуг',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_united_marketplace_services_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_united_marketplace_services_report_request' is set
    unless (exists $args{'generate_united_marketplace_services_report_request'}) {
      croak("Missing the required parameter 'generate_united_marketplace_services_report_request' when calling generate_united_marketplace_services_report");
    }

    # parse inputs
    my $_resource_path = '/reports/united-marketplace-services/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_united_marketplace_services_report_request'}) {
        $_body_data = $args{'generate_united_marketplace_services_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_united_netting_report
#
# Отчет по платежам
#
# @param GenerateUnitedNettingReportRequest $generate_united_netting_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_united_netting_report_request' => {
        data_type => 'GenerateUnitedNettingReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_united_netting_report' } = {
        summary => 'Отчет по платежам',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_united_netting_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_united_netting_report_request' is set
    unless (exists $args{'generate_united_netting_report_request'}) {
      croak("Missing the required parameter 'generate_united_netting_report_request' when calling generate_united_netting_report");
    }

    # parse inputs
    my $_resource_path = '/reports/united-netting/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_united_netting_report_request'}) {
        $_body_data = $args{'generate_united_netting_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_united_orders_report
#
# Отчет по заказам
#
# @param GenerateUnitedOrdersRequest $generate_united_orders_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_united_orders_request' => {
        data_type => 'GenerateUnitedOrdersRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_united_orders_report' } = {
        summary => 'Отчет по заказам',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_united_orders_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_united_orders_request' is set
    unless (exists $args{'generate_united_orders_request'}) {
      croak("Missing the required parameter 'generate_united_orders_request' when calling generate_united_orders_report");
    }

    # parse inputs
    my $_resource_path = '/reports/united-orders/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_united_orders_request'}) {
        $_body_data = $args{'generate_united_orders_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# get_all_offers
#
# Все предложения магазина
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $feed_id Идентификатор прайс-листа. (optional)
# @param int $chunk Номер сегмента с результатами.  Значение по умолчанию: &#x60;0&#x60;.  {% note info %}  Номера сегментов запрашиваются последовательно, пока не будет получен сегмент с пустым ответом. Пустой ответ означает, что все предложения магазина получены.  {% endnote %}  {% note alert %}  Нумерация начинается с 0. Чтобы запросить первую страницу, необходимо указать &#x60;chunk&#x3D;0&#x60; и т. д.  {% endnote %}  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'feed_id' => {
        data_type => 'int',
        description => 'Идентификатор прайс-листа.',
        required => '0',
    },
    'chunk' => {
        data_type => 'int',
        description => 'Номер сегмента с результатами.  Значение по умолчанию: &#x60;0&#x60;.  {% note info %}  Номера сегментов запрашиваются последовательно, пока не будет получен сегмент с пустым ответом. Пустой ответ означает, что все предложения магазина получены.  {% endnote %}  {% note alert %}  Нумерация начинается с 0. Чтобы запросить первую страницу, необходимо указать &#x60;chunk&#x3D;0&#x60; и т. д.  {% endnote %} ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_offers' } = {
        summary => 'Все предложения магазина',
        params => $params,
        returns => 'GetAllOffersResponse',
        };
}
# @return GetAllOffersResponse
#
sub get_all_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_all_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers/all';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'feed_id'}) {
        $query_params->{'feedId'} = $self->{api_client}->to_query_value($args{'feed_id'});
    }

    # query params
    if ( exists $args{'chunk'}) {
        $query_params->{'chunk'} = $self->{api_client}->to_query_value($args{'chunk'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllOffersResponse', $response);
    return $_response_object;
}

#
# get_bids_info_for_business
#
# Информация об установленных ставках
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param GetBidsInfoRequest $get_bids_info_request description (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'get_bids_info_request' => {
        data_type => 'GetBidsInfoRequest',
        description => 'description',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_bids_info_for_business' } = {
        summary => 'Информация об установленных ставках',
        params => $params,
        returns => 'GetBidsInfoResponse',
        };
}
# @return GetBidsInfoResponse
#
sub get_bids_info_for_business {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_bids_info_for_business");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/bids/info';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_bids_info_request'}) {
        $_body_data = $args{'get_bids_info_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetBidsInfoResponse', $response);
    return $_response_object;
}

#
# get_bids_recommendations
#
# Рекомендованные ставки для заданных товаров
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetBidsRecommendationsRequest $get_bids_recommendations_request description. (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_bids_recommendations_request' => {
        data_type => 'GetBidsRecommendationsRequest',
        description => 'description.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_bids_recommendations' } = {
        summary => 'Рекомендованные ставки для заданных товаров',
        params => $params,
        returns => 'GetBidsRecommendationsResponse',
        };
}
# @return GetBidsRecommendationsResponse
#
sub get_bids_recommendations {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_bids_recommendations");
    }

    # verify the required parameter 'get_bids_recommendations_request' is set
    unless (exists $args{'get_bids_recommendations_request'}) {
      croak("Missing the required parameter 'get_bids_recommendations_request' when calling get_bids_recommendations");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/bids/recommendations';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_bids_recommendations_request'}) {
        $_body_data = $args{'get_bids_recommendations_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetBidsRecommendationsResponse', $response);
    return $_response_object;
}

#
# get_business_quarantine_offers
#
# Список товаров, находящихся в карантине по цене в кабинете
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetQuarantineOffersRequest $get_quarantine_offers_request  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_quarantine_offers_request' => {
        data_type => 'GetQuarantineOffersRequest',
        description => '',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_business_quarantine_offers' } = {
        summary => 'Список товаров, находящихся в карантине по цене в кабинете',
        params => $params,
        returns => 'GetQuarantineOffersResponse',
        };
}
# @return GetQuarantineOffersResponse
#
sub get_business_quarantine_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_business_quarantine_offers");
    }

    # verify the required parameter 'get_quarantine_offers_request' is set
    unless (exists $args{'get_quarantine_offers_request'}) {
      croak("Missing the required parameter 'get_quarantine_offers_request' when calling get_business_quarantine_offers");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/price-quarantine';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_quarantine_offers_request'}) {
        $_body_data = $args{'get_quarantine_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetQuarantineOffersResponse', $response);
    return $_response_object;
}

#
# get_business_settings
#
# Настройки кабинета
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_business_settings' } = {
        summary => 'Настройки кабинета',
        params => $params,
        returns => 'GetBusinessSettingsResponse',
        };
}
# @return GetBusinessSettingsResponse
#
sub get_business_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_business_settings");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/settings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetBusinessSettingsResponse', $response);
    return $_response_object;
}

#
# get_campaign
#
# Информация о магазине
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_campaign' } = {
        summary => 'Информация о магазине',
        params => $params,
        returns => 'GetCampaignResponse',
        };
}
# @return GetCampaignResponse
#
sub get_campaign {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_campaign");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCampaignResponse', $response);
    return $_response_object;
}

#
# get_campaign_logins
#
# Логины, связанные с магазином
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_campaign_logins' } = {
        summary => 'Логины, связанные с магазином',
        params => $params,
        returns => 'GetCampaignLoginsResponse',
        };
}
# @return GetCampaignLoginsResponse
#
sub get_campaign_logins {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_campaign_logins");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/logins';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCampaignLoginsResponse', $response);
    return $_response_object;
}

#
# get_campaign_offers
#
# Информация о товарах, которые размещены в заданном магазине
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetCampaignOffersRequest $get_campaign_offers_request  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_campaign_offers_request' => {
        data_type => 'GetCampaignOffersRequest',
        description => '',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_campaign_offers' } = {
        summary => 'Информация о товарах, которые размещены в заданном магазине',
        params => $params,
        returns => 'GetCampaignOffersResponse',
        };
}
# @return GetCampaignOffersResponse
#
sub get_campaign_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_campaign_offers");
    }

    # verify the required parameter 'get_campaign_offers_request' is set
    unless (exists $args{'get_campaign_offers_request'}) {
      croak("Missing the required parameter 'get_campaign_offers_request' when calling get_campaign_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_campaign_offers_request'}) {
        $_body_data = $args{'get_campaign_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCampaignOffersResponse', $response);
    return $_response_object;
}

#
# get_campaign_quarantine_offers
#
# Список товаров, находящихся в карантине по цене в магазине
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetQuarantineOffersRequest $get_quarantine_offers_request  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_quarantine_offers_request' => {
        data_type => 'GetQuarantineOffersRequest',
        description => '',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_campaign_quarantine_offers' } = {
        summary => 'Список товаров, находящихся в карантине по цене в магазине',
        params => $params,
        returns => 'GetQuarantineOffersResponse',
        };
}
# @return GetQuarantineOffersResponse
#
sub get_campaign_quarantine_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_campaign_quarantine_offers");
    }

    # verify the required parameter 'get_quarantine_offers_request' is set
    unless (exists $args{'get_quarantine_offers_request'}) {
      croak("Missing the required parameter 'get_quarantine_offers_request' when calling get_campaign_quarantine_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/price-quarantine';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_quarantine_offers_request'}) {
        $_body_data = $args{'get_quarantine_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetQuarantineOffersResponse', $response);
    return $_response_object;
}

#
# get_campaign_region
#
# Регион магазина
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_campaign_region' } = {
        summary => 'Регион магазина',
        params => $params,
        returns => 'GetCampaignRegionResponse',
        };
}
# @return GetCampaignRegionResponse
#
sub get_campaign_region {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_campaign_region");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/region';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCampaignRegionResponse', $response);
    return $_response_object;
}

#
# get_campaign_settings
#
# Настройки магазина
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_campaign_settings' } = {
        summary => 'Настройки магазина',
        params => $params,
        returns => 'GetCampaignSettingsResponse',
        };
}
# @return GetCampaignSettingsResponse
#
sub get_campaign_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_campaign_settings");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/settings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCampaignSettingsResponse', $response);
    return $_response_object;
}

#
# get_campaigns
#
# Список магазинов пользователя
#
# @param int $page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
# @param int $page_size Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_campaigns' } = {
        summary => 'Список магазинов пользователя',
        params => $params,
        returns => 'GetCampaignsResponse',
        };
}
# @return GetCampaignsResponse
#
sub get_campaigns {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/campaigns';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCampaignsResponse', $response);
    return $_response_object;
}

#
# get_campaigns_by_login
#
# Магазины, доступные логину
#
# @param string $login Логин пользователя. (required)
# @param int $page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
# @param int $page_size Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
{
    my $params = {
    'login' => {
        data_type => 'string',
        description => 'Логин пользователя.',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_campaigns_by_login' } = {
        summary => 'Магазины, доступные логину',
        params => $params,
        returns => 'GetCampaignsResponse',
        };
}
# @return GetCampaignsResponse
#
sub get_campaigns_by_login {
    my ($self, %args) = @_;

    # verify the required parameter 'login' is set
    unless (exists $args{'login'}) {
      croak("Missing the required parameter 'login' when calling get_campaigns_by_login");
    }

    # parse inputs
    my $_resource_path = '/campaigns/by_login/{login}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # path params
    if ( exists $args{'login'}) {
        my $_base_variable = "{" . "login" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'login'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCampaignsResponse', $response);
    return $_response_object;
}

#
# get_categories_max_sale_quantum
#
# Лимит на установку кванта продажи и минимального количества товаров в заказе
#
# @param GetCategoriesMaxSaleQuantumRequest $get_categories_max_sale_quantum_request  (required)
{
    my $params = {
    'get_categories_max_sale_quantum_request' => {
        data_type => 'GetCategoriesMaxSaleQuantumRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_categories_max_sale_quantum' } = {
        summary => 'Лимит на установку кванта продажи и минимального количества товаров в заказе',
        params => $params,
        returns => 'GetCategoriesMaxSaleQuantumResponse',
        };
}
# @return GetCategoriesMaxSaleQuantumResponse
#
sub get_categories_max_sale_quantum {
    my ($self, %args) = @_;

    # verify the required parameter 'get_categories_max_sale_quantum_request' is set
    unless (exists $args{'get_categories_max_sale_quantum_request'}) {
      croak("Missing the required parameter 'get_categories_max_sale_quantum_request' when calling get_categories_max_sale_quantum");
    }

    # parse inputs
    my $_resource_path = '/categories/max-sale-quantum';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'get_categories_max_sale_quantum_request'}) {
        $_body_data = $args{'get_categories_max_sale_quantum_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCategoriesMaxSaleQuantumResponse', $response);
    return $_response_object;
}

#
# get_categories_tree
#
# Дерево категорий
#
# @param GetCategoriesRequest $get_categories_request  (optional)
{
    my $params = {
    'get_categories_request' => {
        data_type => 'GetCategoriesRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_categories_tree' } = {
        summary => 'Дерево категорий',
        params => $params,
        returns => 'GetCategoriesResponse',
        };
}
# @return GetCategoriesResponse
#
sub get_categories_tree {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/categories/tree';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'get_categories_request'}) {
        $_body_data = $args{'get_categories_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCategoriesResponse', $response);
    return $_response_object;
}

#
# get_category_content_parameters
#
# Списки характеристик товаров по категориям
#
# @param int $category_id Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  (required)
{
    my $params = {
    'category_id' => {
        data_type => 'int',
        description => 'Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_category_content_parameters' } = {
        summary => 'Списки характеристик товаров по категориям',
        params => $params,
        returns => 'GetCategoryContentParametersResponse',
        };
}
# @return GetCategoryContentParametersResponse
#
sub get_category_content_parameters {
    my ($self, %args) = @_;

    # verify the required parameter 'category_id' is set
    unless (exists $args{'category_id'}) {
      croak("Missing the required parameter 'category_id' when calling get_category_content_parameters");
    }

    # parse inputs
    my $_resource_path = '/category/{categoryId}/parameters';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'category_id'}) {
        my $_base_variable = "{" . "categoryId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'category_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCategoryContentParametersResponse', $response);
    return $_response_object;
}

#
# get_chat_history
#
# Получение истории сообщений в чате
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $chat_id Идентификатор чата. (required)
# @param GetChatHistoryRequest $get_chat_history_request description (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'chat_id' => {
        data_type => 'int',
        description => 'Идентификатор чата.',
        required => '1',
    },
    'get_chat_history_request' => {
        data_type => 'GetChatHistoryRequest',
        description => 'description',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_chat_history' } = {
        summary => 'Получение истории сообщений в чате',
        params => $params,
        returns => 'GetChatHistoryResponse',
        };
}
# @return GetChatHistoryResponse
#
sub get_chat_history {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_chat_history");
    }

    # verify the required parameter 'chat_id' is set
    unless (exists $args{'chat_id'}) {
      croak("Missing the required parameter 'chat_id' when calling get_chat_history");
    }

    # verify the required parameter 'get_chat_history_request' is set
    unless (exists $args{'get_chat_history_request'}) {
      croak("Missing the required parameter 'get_chat_history_request' when calling get_chat_history");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/chats/history';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'chat_id'}) {
        $query_params->{'chatId'} = $self->{api_client}->to_query_value($args{'chat_id'});
    }

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_chat_history_request'}) {
        $_body_data = $args{'get_chat_history_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetChatHistoryResponse', $response);
    return $_response_object;
}

#
# get_chats
#
# Получение доступных чатов
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetChatsRequest $get_chats_request description (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_chats_request' => {
        data_type => 'GetChatsRequest',
        description => 'description',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_chats' } = {
        summary => 'Получение доступных чатов',
        params => $params,
        returns => 'GetChatsResponse',
        };
}
# @return GetChatsResponse
#
sub get_chats {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_chats");
    }

    # verify the required parameter 'get_chats_request' is set
    unless (exists $args{'get_chats_request'}) {
      croak("Missing the required parameter 'get_chats_request' when calling get_chats");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/chats';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_chats_request'}) {
        $_body_data = $args{'get_chats_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetChatsResponse', $response);
    return $_response_object;
}

#
# get_delivery_services
#
# Справочник служб доставки
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_delivery_services' } = {
        summary => 'Справочник служб доставки',
        params => $params,
        returns => 'GetDeliveryServicesResponse',
        };
}
# @return GetDeliveryServicesResponse
#
sub get_delivery_services {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/delivery/services';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetDeliveryServicesResponse', $response);
    return $_response_object;
}

#
# get_feed
#
# Информация о прайс-листе
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $feed_id Идентификатор прайс-листа. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'feed_id' => {
        data_type => 'int',
        description => 'Идентификатор прайс-листа.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_feed' } = {
        summary => 'Информация о прайс-листе',
        params => $params,
        returns => 'GetFeedResponse',
        };
}
# @return GetFeedResponse
#
sub get_feed {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_feed");
    }

    # verify the required parameter 'feed_id' is set
    unless (exists $args{'feed_id'}) {
      croak("Missing the required parameter 'feed_id' when calling get_feed");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/feeds/{feedId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'feed_id'}) {
        my $_base_variable = "{" . "feedId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'feed_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetFeedResponse', $response);
    return $_response_object;
}

#
# get_feed_index_logs
#
# Отчет по индексации прайс-листа
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $feed_id Идентификатор прайс-листа. (required)
# @param int $limit Количество значений на одной странице.  (optional)
# @param DATE_TIME $published_time_from Начальная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Значение по умолчанию: последние восемь дней со времени отправки запроса.  (optional)
# @param DATE_TIME $published_time_to Конечная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-31T00:42:42+03:00&#x60;.  Значение по умолчанию: дата и время отправки запроса.  {% note info %}  Если во время переключения между страницами выходных данных на Яндекс Маркете появятся новые результаты индексации прайс-листа, вы не получите часть данных. Чтобы этого не произошло, зафиксируйте выходные данные с помощью входного параметра &#x60;published_time_to&#x60;. Значение параметра не должно быть датой из будущего.  {% endnote %}  (optional)
# @param FeedIndexLogsStatusType $status Статус индексации и проверки прайс-листа на соответствие техническим требованиям.  Возможные значения: * &#x60;ERROR&#x60; — произошли ошибки. * &#x60;OK&#x60; — обработан без ошибок. * &#x60;WARNING&#x60; — наблюдались некритичные проблемы.  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'feed_id' => {
        data_type => 'int',
        description => 'Идентификатор прайс-листа.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'published_time_from' => {
        data_type => 'DATE_TIME',
        description => 'Начальная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Значение по умолчанию: последние восемь дней со времени отправки запроса. ',
        required => '0',
    },
    'published_time_to' => {
        data_type => 'DATE_TIME',
        description => 'Конечная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-31T00:42:42+03:00&#x60;.  Значение по умолчанию: дата и время отправки запроса.  {% note info %}  Если во время переключения между страницами выходных данных на Яндекс Маркете появятся новые результаты индексации прайс-листа, вы не получите часть данных. Чтобы этого не произошло, зафиксируйте выходные данные с помощью входного параметра &#x60;published_time_to&#x60;. Значение параметра не должно быть датой из будущего.  {% endnote %} ',
        required => '0',
    },
    'status' => {
        data_type => 'FeedIndexLogsStatusType',
        description => 'Статус индексации и проверки прайс-листа на соответствие техническим требованиям.  Возможные значения: * &#x60;ERROR&#x60; — произошли ошибки. * &#x60;OK&#x60; — обработан без ошибок. * &#x60;WARNING&#x60; — наблюдались некритичные проблемы. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_feed_index_logs' } = {
        summary => 'Отчет по индексации прайс-листа',
        params => $params,
        returns => 'GetFeedIndexLogsResponse',
        };
}
# @return GetFeedIndexLogsResponse
#
sub get_feed_index_logs {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_feed_index_logs");
    }

    # verify the required parameter 'feed_id' is set
    unless (exists $args{'feed_id'}) {
      croak("Missing the required parameter 'feed_id' when calling get_feed_index_logs");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/feeds/{feedId}/index-logs';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'published_time_from'}) {
        $query_params->{'published_time_from'} = $self->{api_client}->to_query_value($args{'published_time_from'});
    }

    # query params
    if ( exists $args{'published_time_to'}) {
        $query_params->{'published_time_to'} = $self->{api_client}->to_query_value($args{'published_time_to'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'feed_id'}) {
        my $_base_variable = "{" . "feedId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'feed_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetFeedIndexLogsResponse', $response);
    return $_response_object;
}

#
# get_feedback_and_comment_updates
#
# Новые и обновленные отзывы о магазине
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param DATE $from_date Начальная дата обновления отзывов.  Если параметр указан, возвращаются отзывы, которые были написаны или обновлены с этой даты.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;.  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'from_date' => {
        data_type => 'DATE',
        description => 'Начальная дата обновления отзывов.  Если параметр указан, возвращаются отзывы, которые были написаны или обновлены с этой даты.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_feedback_and_comment_updates' } = {
        summary => 'Новые и обновленные отзывы о магазине',
        params => $params,
        returns => 'GetFeedbackListResponse',
        };
}
# @return GetFeedbackListResponse
#
sub get_feedback_and_comment_updates {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_feedback_and_comment_updates");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/feedback/updates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'from_date'}) {
        $query_params->{'from_date'} = $self->{api_client}->to_query_value($args{'from_date'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetFeedbackListResponse', $response);
    return $_response_object;
}

#
# get_feeds
#
# Список прайс-листов магазина
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_feeds' } = {
        summary => 'Список прайс-листов магазина',
        params => $params,
        returns => 'GetFeedsResponse',
        };
}
# @return GetFeedsResponse
#
sub get_feeds {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_feeds");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/feeds';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetFeedsResponse', $response);
    return $_response_object;
}

#
# get_goods_feedback_comments
#
# Получение комментариев к отзыву
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetGoodsFeedbackCommentsRequest $get_goods_feedback_comments_request  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_goods_feedback_comments_request' => {
        data_type => 'GetGoodsFeedbackCommentsRequest',
        description => '',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_goods_feedback_comments' } = {
        summary => 'Получение комментариев к отзыву',
        params => $params,
        returns => 'GetGoodsFeedbackCommentsResponse',
        };
}
# @return GetGoodsFeedbackCommentsResponse
#
sub get_goods_feedback_comments {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_goods_feedback_comments");
    }

    # verify the required parameter 'get_goods_feedback_comments_request' is set
    unless (exists $args{'get_goods_feedback_comments_request'}) {
      croak("Missing the required parameter 'get_goods_feedback_comments_request' when calling get_goods_feedback_comments");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/goods-feedback/comments';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_goods_feedback_comments_request'}) {
        $_body_data = $args{'get_goods_feedback_comments_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetGoodsFeedbackCommentsResponse', $response);
    return $_response_object;
}

#
# get_goods_feedbacks
#
# Получение отзывов о товарах продавца
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param GetGoodsFeedbackRequest $get_goods_feedback_request  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'get_goods_feedback_request' => {
        data_type => 'GetGoodsFeedbackRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_goods_feedbacks' } = {
        summary => 'Получение отзывов о товарах продавца',
        params => $params,
        returns => 'GetGoodsFeedbackResponse',
        };
}
# @return GetGoodsFeedbackResponse
#
sub get_goods_feedbacks {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_goods_feedbacks");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/goods-feedback';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_goods_feedback_request'}) {
        $_body_data = $args{'get_goods_feedback_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetGoodsFeedbackResponse', $response);
    return $_response_object;
}

#
# get_goods_stats
#
# Отчет по товарам
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetGoodsStatsRequest $get_goods_stats_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_goods_stats_request' => {
        data_type => 'GetGoodsStatsRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_goods_stats' } = {
        summary => 'Отчет по товарам',
        params => $params,
        returns => 'GetGoodsStatsResponse',
        };
}
# @return GetGoodsStatsResponse
#
sub get_goods_stats {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_goods_stats");
    }

    # verify the required parameter 'get_goods_stats_request' is set
    unless (exists $args{'get_goods_stats_request'}) {
      croak("Missing the required parameter 'get_goods_stats_request' when calling get_goods_stats");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/stats/skus';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_goods_stats_request'}) {
        $_body_data = $args{'get_goods_stats_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetGoodsStatsResponse', $response);
    return $_response_object;
}

#
# get_hidden_offers
#
# Информация о скрытых вами товарах
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param ARRAY[string] $offer_id Идентификатор скрытого предложения.  (optional)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param int $offset Позиция в списке, начиная с которой возвращаются результаты ответа.  Используется вместе с параметром &#x60;limit&#x60;.  Если задан &#x60;offset&#x60;, параметры &#x60;page_number&#x60; и &#x60;page_size&#x60; игнорируются.  &#x60;offset&#x60; игнорируется, если задан &#x60;page_token&#x60;.  (optional)
# @param int $page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
# @param int $page_size Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'offer_id' => {
        data_type => 'ARRAY[string]',
        description => 'Идентификатор скрытого предложения. ',
        required => '0',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'Позиция в списке, начиная с которой возвращаются результаты ответа.  Используется вместе с параметром &#x60;limit&#x60;.  Если задан &#x60;offset&#x60;, параметры &#x60;page_number&#x60; и &#x60;page_size&#x60; игнорируются.  &#x60;offset&#x60; игнорируется, если задан &#x60;page_token&#x60;. ',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_hidden_offers' } = {
        summary => 'Информация о скрытых вами товарах',
        params => $params,
        returns => 'GetHiddenOffersResponse',
        };
}
# @return GetHiddenOffersResponse
#
sub get_hidden_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_hidden_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/hidden-offers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'offer_id'}) {
        $query_params->{'offer_id'} = $self->{api_client}->to_query_value($args{'offer_id'});
    }

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetHiddenOffersResponse', $response);
    return $_response_object;
}

#
# get_model
#
# Информация об одной модели
#
# @param int $model_id Идентификатор модели товара. (required)
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
# @param CurrencyType $currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина).  (optional)
{
    my $params = {
    'model_id' => {
        data_type => 'int',
        description => 'Идентификатор модели товара.',
        required => '1',
    },
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_model' } = {
        summary => 'Информация об одной модели',
        params => $params,
        returns => 'GetModelsResponse',
        };
}
# @return GetModelsResponse
#
sub get_model {
    my ($self, %args) = @_;

    # verify the required parameter 'model_id' is set
    unless (exists $args{'model_id'}) {
      croak("Missing the required parameter 'model_id' when calling get_model");
    }

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling get_model");
    }

    # parse inputs
    my $_resource_path = '/models/{modelId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'region_id'}) {
        $query_params->{'regionId'} = $self->{api_client}->to_query_value($args{'region_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    # path params
    if ( exists $args{'model_id'}) {
        my $_base_variable = "{" . "modelId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'model_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetModelsResponse', $response);
    return $_response_object;
}

#
# get_model_offers
#
# Список предложений для одной модели
#
# @param int $model_id Идентификатор модели товара. (required)
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
# @param CurrencyType $currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина).  (optional)
# @param SortOrderType $order_by_price Направление сортировки по цене.  Возможные значения: * &#x60;ASC&#x60; — сортировка по возрастанию. * &#x60;DESC&#x60; — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке.  (optional)
# @param int $count Количество предложений на странице ответа. (optional, default to 10)
# @param int $page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
{
    my $params = {
    'model_id' => {
        data_type => 'int',
        description => 'Идентификатор модели товара.',
        required => '1',
    },
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). ',
        required => '0',
    },
    'order_by_price' => {
        data_type => 'SortOrderType',
        description => 'Направление сортировки по цене.  Возможные значения: * &#x60;ASC&#x60; — сортировка по возрастанию. * &#x60;DESC&#x60; — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке. ',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'Количество предложений на странице ответа.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_model_offers' } = {
        summary => 'Список предложений для одной модели',
        params => $params,
        returns => 'GetModelsOffersResponse',
        };
}
# @return GetModelsOffersResponse
#
sub get_model_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'model_id' is set
    unless (exists $args{'model_id'}) {
      croak("Missing the required parameter 'model_id' when calling get_model_offers");
    }

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling get_model_offers");
    }

    # parse inputs
    my $_resource_path = '/models/{modelId}/offers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'region_id'}) {
        $query_params->{'regionId'} = $self->{api_client}->to_query_value($args{'region_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    # query params
    if ( exists $args{'order_by_price'}) {
        $query_params->{'orderByPrice'} = $self->{api_client}->to_query_value($args{'order_by_price'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'model_id'}) {
        my $_base_variable = "{" . "modelId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'model_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetModelsOffersResponse', $response);
    return $_response_object;
}

#
# get_models
#
# Информация о нескольких моделях
#
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
# @param GetModelsRequest $get_models_request  (required)
# @param CurrencyType $currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина).  (optional)
{
    my $params = {
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    'get_models_request' => {
        data_type => 'GetModelsRequest',
        description => '',
        required => '1',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_models' } = {
        summary => 'Информация о нескольких моделях',
        params => $params,
        returns => 'GetModelsResponse',
        };
}
# @return GetModelsResponse
#
sub get_models {
    my ($self, %args) = @_;

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling get_models");
    }

    # verify the required parameter 'get_models_request' is set
    unless (exists $args{'get_models_request'}) {
      croak("Missing the required parameter 'get_models_request' when calling get_models");
    }

    # parse inputs
    my $_resource_path = '/models';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'region_id'}) {
        $query_params->{'regionId'} = $self->{api_client}->to_query_value($args{'region_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_models_request'}) {
        $_body_data = $args{'get_models_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetModelsResponse', $response);
    return $_response_object;
}

#
# get_models_offers
#
# Список предложений для нескольких моделей
#
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
# @param GetModelsRequest $get_models_request  (required)
# @param CurrencyType $currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина).  (optional)
# @param SortOrderType $order_by_price Направление сортировки по цене.  Возможные значения: * &#x60;ASC&#x60; — сортировка по возрастанию. * &#x60;DESC&#x60; — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке.  (optional)
{
    my $params = {
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    'get_models_request' => {
        data_type => 'GetModelsRequest',
        description => '',
        required => '1',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). ',
        required => '0',
    },
    'order_by_price' => {
        data_type => 'SortOrderType',
        description => 'Направление сортировки по цене.  Возможные значения: * &#x60;ASC&#x60; — сортировка по возрастанию. * &#x60;DESC&#x60; — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_models_offers' } = {
        summary => 'Список предложений для нескольких моделей',
        params => $params,
        returns => 'GetModelsOffersResponse',
        };
}
# @return GetModelsOffersResponse
#
sub get_models_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling get_models_offers");
    }

    # verify the required parameter 'get_models_request' is set
    unless (exists $args{'get_models_request'}) {
      croak("Missing the required parameter 'get_models_request' when calling get_models_offers");
    }

    # parse inputs
    my $_resource_path = '/models/offers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'region_id'}) {
        $query_params->{'regionId'} = $self->{api_client}->to_query_value($args{'region_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    # query params
    if ( exists $args{'order_by_price'}) {
        $query_params->{'orderByPrice'} = $self->{api_client}->to_query_value($args{'order_by_price'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_models_request'}) {
        $_body_data = $args{'get_models_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetModelsOffersResponse', $response);
    return $_response_object;
}

#
# get_offer_cards_content_status
#
# Получение информации о заполненности карточек магазина
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param GetOfferCardsContentStatusRequest $get_offer_cards_content_status_request  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'get_offer_cards_content_status_request' => {
        data_type => 'GetOfferCardsContentStatusRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_offer_cards_content_status' } = {
        summary => 'Получение информации о заполненности карточек магазина',
        params => $params,
        returns => 'GetOfferCardsContentStatusResponse',
        };
}
# @return GetOfferCardsContentStatusResponse
#
sub get_offer_cards_content_status {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_offer_cards_content_status");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-cards';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_offer_cards_content_status_request'}) {
        $_body_data = $args{'get_offer_cards_content_status_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOfferCardsContentStatusResponse', $response);
    return $_response_object;
}

#
# get_offer_mapping_entries
#
# Список товаров в каталоге
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param ARRAY[string] $offer_id Идентификатор товара в каталоге. (optional)
# @param ARRAY[string] $shop_sku Ваш SKU товара.  Параметр может быть указан несколько раз, например:  &#x60;&#x60;&#x60; ...shop_sku&#x3D;123&amp;shop_sku&#x3D;129&amp;shop_sku&#x3D;141... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр &#x60;shopSku&#x60;, либо любые параметры для фильтрации товаров. Совместное использование параметра &#x60;shopSku&#x60; и параметров для фильтрации приведет к ошибке.  (optional)
# @param OfferMappingKindType $mapping_kind Тип маппинга. (optional)
# @param ARRAY[OfferProcessingStatusType] $status Фильтрация по статусу публикации товара:  * &#x60;READY&#x60; — товар прошел модерацию. * &#x60;IN_WORK&#x60; — товар проходит модерацию. * &#x60;NEED_CONTENT&#x60; — для товара без SKU на Маркете marketSku нужно найти карточку самостоятельно или создать ее. * &#x60;NEED_INFO&#x60; — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. * &#x60;REJECTED&#x60; — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * &#x60;SUSPENDED&#x60; — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. * &#x60;OTHER&#x60; — товар не прошел модерацию по другой причине.  Можно указать несколько статусов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...status&#x3D;READY,IN_WORK... ...status&#x3D;READY&amp;status&#x3D;IN_WORK... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке.  (optional)
# @param ARRAY[OfferAvailabilityStatusType] $availability Фильтрация по планам поставок товара:  * &#x60;ACTIVE&#x60; — поставки будут. * &#x60;INACTIVE&#x60; — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. * &#x60;DELISTED&#x60; — архив: товар закончился на складе, и его поставок больше не будет.  Можно указать несколько значений в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...availability&#x3D;INACTIVE,DELISTED... ...availability&#x3D;INACTIVE&amp;availability&#x3D;DELISTED... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр &#x60;shopSku&#x60;, либо любые параметры для фильтрации товаров. Совместное использование параметра &#x60;shopSku&#x60; и параметров для фильтрации приведет к ошибке.  (optional)
# @param ARRAY[int] $category_id Фильтрация по идентификатору категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  Можно указать несколько идентификаторов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...category_id&#x3D;14727164,14382343... ...category_id&#x3D;14727164&amp;category_id&#x3D;14382343... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр &#x60;shopSku&#x60;, либо любые параметры для фильтрации товаров. Совместное использование параметра &#x60;shopSku&#x60; и параметров для фильтрации приведет к ошибке.  (optional)
# @param ARRAY[string] $vendor Фильтрация по бренду товара.  Можно указать несколько брендов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...vendor&#x3D;Aqua%20Minerale,Borjomi... ...vendor&#x3D;Aqua%20Minerale&amp;vendor&#x3D;Borjomi... &#x60;&#x60;&#x60;  Чтобы товар попал в результаты фильтрации, его бренд должен точно совпадать с одним из указанных в запросе. Например, если указан бренд Schwarzkopf, то в результатах не будет товаров Schwarzkopf Professional.  Если в названии бренда есть символы, которые не входят в таблицу ASCII (в том числе кириллические символы), используйте для них URL-кодирование. Например, пробел — %20, апостроф «&#39;» — %27 и т. д. Подробнее см. в разделе [Кодирование URL русскоязычной Википедии](https://ru.wikipedia.org/wiki/URL#Кодирование_URL).  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке.  (optional)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'offer_id' => {
        data_type => 'ARRAY[string]',
        description => 'Идентификатор товара в каталоге.',
        required => '0',
    },
    'shop_sku' => {
        data_type => 'ARRAY[string]',
        description => 'Ваш SKU товара.  Параметр может быть указан несколько раз, например:  &#x60;&#x60;&#x60; ...shop_sku&#x3D;123&amp;shop_sku&#x3D;129&amp;shop_sku&#x3D;141... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр &#x60;shopSku&#x60;, либо любые параметры для фильтрации товаров. Совместное использование параметра &#x60;shopSku&#x60; и параметров для фильтрации приведет к ошибке. ',
        required => '0',
    },
    'mapping_kind' => {
        data_type => 'OfferMappingKindType',
        description => 'Тип маппинга.',
        required => '0',
    },
    'status' => {
        data_type => 'ARRAY[OfferProcessingStatusType]',
        description => 'Фильтрация по статусу публикации товара:  * &#x60;READY&#x60; — товар прошел модерацию. * &#x60;IN_WORK&#x60; — товар проходит модерацию. * &#x60;NEED_CONTENT&#x60; — для товара без SKU на Маркете marketSku нужно найти карточку самостоятельно или создать ее. * &#x60;NEED_INFO&#x60; — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. * &#x60;REJECTED&#x60; — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * &#x60;SUSPENDED&#x60; — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. * &#x60;OTHER&#x60; — товар не прошел модерацию по другой причине.  Можно указать несколько статусов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...status&#x3D;READY,IN_WORK... ...status&#x3D;READY&amp;status&#x3D;IN_WORK... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. ',
        required => '0',
    },
    'availability' => {
        data_type => 'ARRAY[OfferAvailabilityStatusType]',
        description => 'Фильтрация по планам поставок товара:  * &#x60;ACTIVE&#x60; — поставки будут. * &#x60;INACTIVE&#x60; — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. * &#x60;DELISTED&#x60; — архив: товар закончился на складе, и его поставок больше не будет.  Можно указать несколько значений в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...availability&#x3D;INACTIVE,DELISTED... ...availability&#x3D;INACTIVE&amp;availability&#x3D;DELISTED... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр &#x60;shopSku&#x60;, либо любые параметры для фильтрации товаров. Совместное использование параметра &#x60;shopSku&#x60; и параметров для фильтрации приведет к ошибке. ',
        required => '0',
    },
    'category_id' => {
        data_type => 'ARRAY[int]',
        description => 'Фильтрация по идентификатору категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  Можно указать несколько идентификаторов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...category_id&#x3D;14727164,14382343... ...category_id&#x3D;14727164&amp;category_id&#x3D;14382343... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр &#x60;shopSku&#x60;, либо любые параметры для фильтрации товаров. Совместное использование параметра &#x60;shopSku&#x60; и параметров для фильтрации приведет к ошибке. ',
        required => '0',
    },
    'vendor' => {
        data_type => 'ARRAY[string]',
        description => 'Фильтрация по бренду товара.  Можно указать несколько брендов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...vendor&#x3D;Aqua%20Minerale,Borjomi... ...vendor&#x3D;Aqua%20Minerale&amp;vendor&#x3D;Borjomi... &#x60;&#x60;&#x60;  Чтобы товар попал в результаты фильтрации, его бренд должен точно совпадать с одним из указанных в запросе. Например, если указан бренд Schwarzkopf, то в результатах не будет товаров Schwarzkopf Professional.  Если в названии бренда есть символы, которые не входят в таблицу ASCII (в том числе кириллические символы), используйте для них URL-кодирование. Например, пробел — %20, апостроф «&#39;» — %27 и т. д. Подробнее см. в разделе [Кодирование URL русскоязычной Википедии](https://ru.wikipedia.org/wiki/URL#Кодирование_URL).  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. ',
        required => '0',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_offer_mapping_entries' } = {
        summary => 'Список товаров в каталоге',
        params => $params,
        returns => 'GetOfferMappingEntriesResponse',
        };
}
# @return GetOfferMappingEntriesResponse
#
sub get_offer_mapping_entries {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_offer_mapping_entries");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offer-mapping-entries';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'offer_id'}) {
        $query_params->{'offer_id'} = $self->{api_client}->to_query_value($args{'offer_id'});
    }

    # query params
    if ( exists $args{'shop_sku'}) {
        $query_params->{'shop_sku'} = $self->{api_client}->to_query_value($args{'shop_sku'});
    }

    # query params
    if ( exists $args{'mapping_kind'}) {
        $query_params->{'mapping_kind'} = $self->{api_client}->to_query_value($args{'mapping_kind'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'availability'}) {
        $query_params->{'availability'} = $self->{api_client}->to_query_value($args{'availability'});
    }

    # query params
    if ( exists $args{'category_id'}) {
        $query_params->{'category_id'} = $self->{api_client}->to_query_value($args{'category_id'});
    }

    # query params
    if ( exists $args{'vendor'}) {
        $query_params->{'vendor'} = $self->{api_client}->to_query_value($args{'vendor'});
    }

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOfferMappingEntriesResponse', $response);
    return $_response_object;
}

#
# get_offer_mappings
#
# Информация о товарах в каталоге
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param GetOfferMappingsRequest $get_offer_mappings_request  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'get_offer_mappings_request' => {
        data_type => 'GetOfferMappingsRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_offer_mappings' } = {
        summary => 'Информация о товарах в каталоге',
        params => $params,
        returns => 'GetOfferMappingsResponse',
        };
}
# @return GetOfferMappingsResponse
#
sub get_offer_mappings {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_offer_mappings");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_offer_mappings_request'}) {
        $_body_data = $args{'get_offer_mappings_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOfferMappingsResponse', $response);
    return $_response_object;
}

#
# get_offer_recommendations
#
# Рекомендации Маркета, касающиеся цен
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetOfferRecommendationsRequest $get_offer_recommendations_request  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_offer_recommendations_request' => {
        data_type => 'GetOfferRecommendationsRequest',
        description => '',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_offer_recommendations' } = {
        summary => 'Рекомендации Маркета, касающиеся цен',
        params => $params,
        returns => 'GetOfferRecommendationsResponse',
        };
}
# @return GetOfferRecommendationsResponse
#
sub get_offer_recommendations {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_offer_recommendations");
    }

    # verify the required parameter 'get_offer_recommendations_request' is set
    unless (exists $args{'get_offer_recommendations_request'}) {
      croak("Missing the required parameter 'get_offer_recommendations_request' when calling get_offer_recommendations");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offers/recommendations';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_offer_recommendations_request'}) {
        $_body_data = $args{'get_offer_recommendations_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOfferRecommendationsResponse', $response);
    return $_response_object;
}

#
# get_offers
#
# Предложения магазина
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $query Поисковый запрос.  Поддерживается язык запросов.  Значение по умолчанию: все предложения магазина, размещенные на Маркете.  (optional)
# @param int $feed_id Идентификатор прайс-листа. (optional)
# @param string $shop_category_id Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.  (optional)
# @param CurrencyType $currency Валюта, в которой указана цена предложения.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  (optional)
# @param boolean $matched Фильтр по признаку соотнесения предложения и карточки модели.  Возможные значения:  * &#x60;0 / FALSE / NO&#x60; — поиск выполняется среди предложений, не соотнесенных ни с какой карточкой модели.  * &#x60;1 / TRUE / YES&#x60; — поиск выполняется среди предложений, соотнесенных с карточками моделей).  (optional)
# @param int $page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
# @param int $page_size Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => 'Поисковый запрос.  Поддерживается язык запросов.  Значение по умолчанию: все предложения магазина, размещенные на Маркете. ',
        required => '0',
    },
    'feed_id' => {
        data_type => 'int',
        description => 'Идентификатор прайс-листа.',
        required => '0',
    },
    'shop_category_id' => {
        data_type => 'string',
        description => 'Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. ',
        required => '0',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой указана цена предложения.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна. ',
        required => '0',
    },
    'matched' => {
        data_type => 'boolean',
        description => 'Фильтр по признаку соотнесения предложения и карточки модели.  Возможные значения:  * &#x60;0 / FALSE / NO&#x60; — поиск выполняется среди предложений, не соотнесенных ни с какой карточкой модели.  * &#x60;1 / TRUE / YES&#x60; — поиск выполняется среди предложений, соотнесенных с карточками моделей). ',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_offers' } = {
        summary => 'Предложения магазина',
        params => $params,
        returns => 'GetOffersResponse',
        };
}
# @return GetOffersResponse
#
sub get_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'feed_id'}) {
        $query_params->{'feedId'} = $self->{api_client}->to_query_value($args{'feed_id'});
    }

    # query params
    if ( exists $args{'shop_category_id'}) {
        $query_params->{'shopCategoryId'} = $self->{api_client}->to_query_value($args{'shop_category_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    # query params
    if ( exists $args{'matched'}) {
        $query_params->{'matched'} = $self->{api_client}->to_query_value($args{'matched'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOffersResponse', $response);
    return $_response_object;
}

#
# get_order
#
# Информация об одном заказе
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_order' } = {
        summary => 'Информация об одном заказе',
        params => $params,
        returns => 'GetOrderResponse',
        };
}
# @return GetOrderResponse
#
sub get_order {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_order");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling get_order");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOrderResponse', $response);
    return $_response_object;
}

#
# get_order_business_buyer_info
#
# Информация о покупателе — юридическом лице
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_order_business_buyer_info' } = {
        summary => 'Информация о покупателе — юридическом лице',
        params => $params,
        returns => 'GetBusinessBuyerInfoResponse',
        };
}
# @return GetBusinessBuyerInfoResponse
#
sub get_order_business_buyer_info {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_order_business_buyer_info");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling get_order_business_buyer_info");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/business-buyer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetBusinessBuyerInfoResponse', $response);
    return $_response_object;
}

#
# get_order_business_documents_info
#
# Информация о документах
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_order_business_documents_info' } = {
        summary => 'Информация о документах',
        params => $params,
        returns => 'GetBusinessDocumentsInfoResponse',
        };
}
# @return GetBusinessDocumentsInfoResponse
#
sub get_order_business_documents_info {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_order_business_documents_info");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling get_order_business_documents_info");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/documents';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetBusinessDocumentsInfoResponse', $response);
    return $_response_object;
}

#
# get_order_buyer_info
#
# Информация о покупателе — физическом лице
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_order_buyer_info' } = {
        summary => 'Информация о покупателе — физическом лице',
        params => $params,
        returns => 'GetOrderBuyerInfoResponse',
        };
}
# @return GetOrderBuyerInfoResponse
#
sub get_order_buyer_info {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_order_buyer_info");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling get_order_buyer_info");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/buyer';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOrderBuyerInfoResponse', $response);
    return $_response_object;
}

#
# get_order_labels_data
#
# Данные для самостоятельного изготовления ярлыков
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_order_labels_data' } = {
        summary => 'Данные для самостоятельного изготовления ярлыков',
        params => $params,
        returns => 'GetOrderLabelsDataResponse',
        };
}
# @return GetOrderLabelsDataResponse
#
sub get_order_labels_data {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_order_labels_data");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling get_order_labels_data");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOrderLabelsDataResponse', $response);
    return $_response_object;
}

#
# get_orders
#
# Информация о нескольких заказах
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param ARRAY[int] $order_ids Фильтрация заказов по идентификаторам. &lt;br&gt;&lt;br&gt; ⚠️ Не используйте это поле одновременно с другими фильтрами. Если вы хотите воспользоваться ими, оставьте поле пустым.  (optional)
# @param ARRAY[OrderStatusType] $status Статус заказа:  * &#x60;CANCELLED&#x60; — заказ отменен.  * &#x60;DELIVERED&#x60; — заказ получен покупателем.  * &#x60;DELIVERY&#x60; — заказ передан в службу доставки.  * &#x60;PICKUP&#x60; — заказ доставлен в пункт самовывоза.  * &#x60;PROCESSING&#x60; — заказ находится в обработке.  * &#x60;UNPAID&#x60; — заказ оформлен, но еще не оплачен (если выбрана оплата при оформлении).  Также могут возвращаться другие значения. Обрабатывать их не требуется.  (optional)
# @param ARRAY[OrderSubstatusType] $substatus Этап обработки заказа (если он имеет статус &#x60;PROCESSING&#x60;) или причина отмены заказа (если он имеет статус &#x60;CANCELLED&#x60;).  Возможные значения для заказа в статусе &#x60;PROCESSING&#x60;:  * &#x60;STARTED&#x60; — заказ подтвержден, его можно начать обрабатывать. * &#x60;READY_TO_SHIP&#x60; — заказ собран и готов к отправке. * &#x60;SHIPPED&#x60; — заказ передан службе доставки.  Возможные значения для заказа в статусе &#x60;CANCELLED&#x60;:  * &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60; — служба доставки не смогла доставить заказ.  * &#x60;PROCESSING_EXPIRED&#x60; — значение более не используется.  * &#x60;REPLACING_ORDER&#x60; — покупатель решил заменить товар другим по собственной инициативе.  * &#x60;RESERVATION_EXPIRED&#x60; — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.  * &#x60;RESERVATION_FAILED&#x60; — Маркет не может продолжить дальнейшую обработку заказа.  * &#x60;SHOP_FAILED&#x60; — магазин не может выполнить заказ.  * &#x60;USER_CHANGED_MIND&#x60; — покупатель отменил заказ по личным причинам.  * &#x60;USER_NOT_PAID&#x60; — покупатель не оплатил заказ (для типа оплаты &#x60;PREPAID&#x60;) в течение 30 минут.  * &#x60;USER_REFUSED_DELIVERY&#x60; — покупателя не устроили условия доставки.  * &#x60;USER_REFUSED_PRODUCT&#x60; — покупателю не подошел товар.  * &#x60;USER_REFUSED_QUALITY&#x60; — покупателя не устроило качество товара.  * &#x60;USER_UNREACHABLE&#x60; — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:    * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;   * перерыв между первым и третьим звонком не менее 90 минут;   * соединение не короче 5 секунд.    Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400. * &#x60;USER_WANTS_TO_CHANGE_DELIVERY_DATE&#x60; — покупатель хочет получить заказ в другой день. * &#x60;CANCELLED_COURIER_NOT_FOUND&#x60; — не удалось найти курьера.  Также могут возвращаться другие значения. Обрабатывать их не требуется.  (optional)
# @param DATE $from_date Начальная дата для фильтрации заказов по дате оформления.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной и конечной датой (параметр &#x60;toDate&#x60;) должно быть не больше 30 дней.  Значение по умолчанию: 30 дней назад от текущей даты.  (optional)
# @param DATE $to_date Конечная дата для фильтрации заказов по дате оформления.  Показываются заказы, созданные до 00:00 указанного дня.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной (параметр &#x60;fromDate&#x60;) и конечной датой должно быть не больше 30 дней.  Значение по умолчанию: текущая дата.  (optional)
# @param DATE $supplier_shipment_date_from Начальная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр &#x60;shipmentDate&#x60;).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной и конечной датой (параметр &#x60;supplierShipmentDateTo&#x60;) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации.  (optional)
# @param DATE $supplier_shipment_date_to Конечная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр &#x60;shipmentDate&#x60;).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной (параметр &#x60;supplierShipmentDateFrom&#x60;) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации.  (optional)
# @param DATE_TIME $updated_at_from Начальная дата для фильтрации заказов по дате и времени обновления (параметр &#x60;updatedAt&#x60;).  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Между начальной и конечной датой (параметр &#x60;updatedAtTo&#x60;) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации.  (optional)
# @param DATE_TIME $updated_at_to Конечная дата для фильтрации заказов по дате и времени обновления (параметр &#x60;updatedAt&#x60;).  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Между начальной (параметр &#x60;updatedAtFrom&#x60;) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации.  (optional)
# @param OrderDeliveryDispatchType $dispatch_type Способ отгрузки (optional)
# @param boolean $fake Фильтрация заказов по типам:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.  (optional, default to false)
# @param boolean $has_cis Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * &#x60;true&#x60; — да.  * &#x60;false&#x60; — нет.  Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям.  (optional, default to false)
# @param boolean $only_waiting_for_cancellation_approve **Только для модели DBS**  Фильтрация заказов по наличию запросов покупателей на отмену.  При значение &#x60;true&#x60; возвращаются только заказы, которые находятся в статусе &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60; и которые пользователи решили отменить.  Чтобы подтвердить или отклонить отмену, отправьте запрос [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation).  (optional, default to false)
# @param boolean $only_estimated_delivery Фильтрация заказов с долгой доставкой (31-60 дней) по подтвержденной дате доставки:  * &#x60;true&#x60; — возвращаются только заказы с неподтвержденной датой доставки. * &#x60;false&#x60; — фильтрация не применяется.  (optional, default to false)
# @param OrderBuyerType $buyer_type Фильтрация заказов по типу покупателя.  (optional)
# @param int $page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
# @param int $page_size Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_ids' => {
        data_type => 'ARRAY[int]',
        description => 'Фильтрация заказов по идентификаторам. &lt;br&gt;&lt;br&gt; ⚠️ Не используйте это поле одновременно с другими фильтрами. Если вы хотите воспользоваться ими, оставьте поле пустым. ',
        required => '0',
    },
    'status' => {
        data_type => 'ARRAY[OrderStatusType]',
        description => 'Статус заказа:  * &#x60;CANCELLED&#x60; — заказ отменен.  * &#x60;DELIVERED&#x60; — заказ получен покупателем.  * &#x60;DELIVERY&#x60; — заказ передан в службу доставки.  * &#x60;PICKUP&#x60; — заказ доставлен в пункт самовывоза.  * &#x60;PROCESSING&#x60; — заказ находится в обработке.  * &#x60;UNPAID&#x60; — заказ оформлен, но еще не оплачен (если выбрана оплата при оформлении).  Также могут возвращаться другие значения. Обрабатывать их не требуется. ',
        required => '0',
    },
    'substatus' => {
        data_type => 'ARRAY[OrderSubstatusType]',
        description => 'Этап обработки заказа (если он имеет статус &#x60;PROCESSING&#x60;) или причина отмены заказа (если он имеет статус &#x60;CANCELLED&#x60;).  Возможные значения для заказа в статусе &#x60;PROCESSING&#x60;:  * &#x60;STARTED&#x60; — заказ подтвержден, его можно начать обрабатывать. * &#x60;READY_TO_SHIP&#x60; — заказ собран и готов к отправке. * &#x60;SHIPPED&#x60; — заказ передан службе доставки.  Возможные значения для заказа в статусе &#x60;CANCELLED&#x60;:  * &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60; — служба доставки не смогла доставить заказ.  * &#x60;PROCESSING_EXPIRED&#x60; — значение более не используется.  * &#x60;REPLACING_ORDER&#x60; — покупатель решил заменить товар другим по собственной инициативе.  * &#x60;RESERVATION_EXPIRED&#x60; — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.  * &#x60;RESERVATION_FAILED&#x60; — Маркет не может продолжить дальнейшую обработку заказа.  * &#x60;SHOP_FAILED&#x60; — магазин не может выполнить заказ.  * &#x60;USER_CHANGED_MIND&#x60; — покупатель отменил заказ по личным причинам.  * &#x60;USER_NOT_PAID&#x60; — покупатель не оплатил заказ (для типа оплаты &#x60;PREPAID&#x60;) в течение 30 минут.  * &#x60;USER_REFUSED_DELIVERY&#x60; — покупателя не устроили условия доставки.  * &#x60;USER_REFUSED_PRODUCT&#x60; — покупателю не подошел товар.  * &#x60;USER_REFUSED_QUALITY&#x60; — покупателя не устроило качество товара.  * &#x60;USER_UNREACHABLE&#x60; — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:    * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;   * перерыв между первым и третьим звонком не менее 90 минут;   * соединение не короче 5 секунд.    Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400. * &#x60;USER_WANTS_TO_CHANGE_DELIVERY_DATE&#x60; — покупатель хочет получить заказ в другой день. * &#x60;CANCELLED_COURIER_NOT_FOUND&#x60; — не удалось найти курьера.  Также могут возвращаться другие значения. Обрабатывать их не требуется. ',
        required => '0',
    },
    'from_date' => {
        data_type => 'DATE',
        description => 'Начальная дата для фильтрации заказов по дате оформления.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной и конечной датой (параметр &#x60;toDate&#x60;) должно быть не больше 30 дней.  Значение по умолчанию: 30 дней назад от текущей даты. ',
        required => '0',
    },
    'to_date' => {
        data_type => 'DATE',
        description => 'Конечная дата для фильтрации заказов по дате оформления.  Показываются заказы, созданные до 00:00 указанного дня.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной (параметр &#x60;fromDate&#x60;) и конечной датой должно быть не больше 30 дней.  Значение по умолчанию: текущая дата. ',
        required => '0',
    },
    'supplier_shipment_date_from' => {
        data_type => 'DATE',
        description => 'Начальная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр &#x60;shipmentDate&#x60;).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной и конечной датой (параметр &#x60;supplierShipmentDateTo&#x60;) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. ',
        required => '0',
    },
    'supplier_shipment_date_to' => {
        data_type => 'DATE',
        description => 'Конечная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр &#x60;shipmentDate&#x60;).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной (параметр &#x60;supplierShipmentDateFrom&#x60;) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. ',
        required => '0',
    },
    'updated_at_from' => {
        data_type => 'DATE_TIME',
        description => 'Начальная дата для фильтрации заказов по дате и времени обновления (параметр &#x60;updatedAt&#x60;).  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Между начальной и конечной датой (параметр &#x60;updatedAtTo&#x60;) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. ',
        required => '0',
    },
    'updated_at_to' => {
        data_type => 'DATE_TIME',
        description => 'Конечная дата для фильтрации заказов по дате и времени обновления (параметр &#x60;updatedAt&#x60;).  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Между начальной (параметр &#x60;updatedAtFrom&#x60;) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. ',
        required => '0',
    },
    'dispatch_type' => {
        data_type => 'OrderDeliveryDispatchType',
        description => 'Способ отгрузки',
        required => '0',
    },
    'fake' => {
        data_type => 'boolean',
        description => 'Фильтрация заказов по типам:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. ',
        required => '0',
    },
    'has_cis' => {
        data_type => 'boolean',
        description => 'Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * &#x60;true&#x60; — да.  * &#x60;false&#x60; — нет.  Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. ',
        required => '0',
    },
    'only_waiting_for_cancellation_approve' => {
        data_type => 'boolean',
        description => '**Только для модели DBS**  Фильтрация заказов по наличию запросов покупателей на отмену.  При значение &#x60;true&#x60; возвращаются только заказы, которые находятся в статусе &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60; и которые пользователи решили отменить.  Чтобы подтвердить или отклонить отмену, отправьте запрос [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation). ',
        required => '0',
    },
    'only_estimated_delivery' => {
        data_type => 'boolean',
        description => 'Фильтрация заказов с долгой доставкой (31-60 дней) по подтвержденной дате доставки:  * &#x60;true&#x60; — возвращаются только заказы с неподтвержденной датой доставки. * &#x60;false&#x60; — фильтрация не применяется. ',
        required => '0',
    },
    'buyer_type' => {
        data_type => 'OrderBuyerType',
        description => 'Фильтрация заказов по типу покупателя. ',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_orders' } = {
        summary => 'Информация о нескольких заказах',
        params => $params,
        returns => 'GetOrdersResponse',
        };
}
# @return GetOrdersResponse
#
sub get_orders {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_orders");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'order_ids'}) {
        $query_params->{'orderIds'} = $self->{api_client}->to_query_value($args{'order_ids'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'substatus'}) {
        $query_params->{'substatus'} = $self->{api_client}->to_query_value($args{'substatus'});
    }

    # query params
    if ( exists $args{'from_date'}) {
        $query_params->{'fromDate'} = $self->{api_client}->to_query_value($args{'from_date'});
    }

    # query params
    if ( exists $args{'to_date'}) {
        $query_params->{'toDate'} = $self->{api_client}->to_query_value($args{'to_date'});
    }

    # query params
    if ( exists $args{'supplier_shipment_date_from'}) {
        $query_params->{'supplierShipmentDateFrom'} = $self->{api_client}->to_query_value($args{'supplier_shipment_date_from'});
    }

    # query params
    if ( exists $args{'supplier_shipment_date_to'}) {
        $query_params->{'supplierShipmentDateTo'} = $self->{api_client}->to_query_value($args{'supplier_shipment_date_to'});
    }

    # query params
    if ( exists $args{'updated_at_from'}) {
        $query_params->{'updatedAtFrom'} = $self->{api_client}->to_query_value($args{'updated_at_from'});
    }

    # query params
    if ( exists $args{'updated_at_to'}) {
        $query_params->{'updatedAtTo'} = $self->{api_client}->to_query_value($args{'updated_at_to'});
    }

    # query params
    if ( exists $args{'dispatch_type'}) {
        $query_params->{'dispatchType'} = $self->{api_client}->to_query_value($args{'dispatch_type'});
    }

    # query params
    if ( exists $args{'fake'}) {
        $query_params->{'fake'} = $self->{api_client}->to_query_value($args{'fake'});
    }

    # query params
    if ( exists $args{'has_cis'}) {
        $query_params->{'hasCis'} = $self->{api_client}->to_query_value($args{'has_cis'});
    }

    # query params
    if ( exists $args{'only_waiting_for_cancellation_approve'}) {
        $query_params->{'onlyWaitingForCancellationApprove'} = $self->{api_client}->to_query_value($args{'only_waiting_for_cancellation_approve'});
    }

    # query params
    if ( exists $args{'only_estimated_delivery'}) {
        $query_params->{'onlyEstimatedDelivery'} = $self->{api_client}->to_query_value($args{'only_estimated_delivery'});
    }

    # query params
    if ( exists $args{'buyer_type'}) {
        $query_params->{'buyerType'} = $self->{api_client}->to_query_value($args{'buyer_type'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOrdersResponse', $response);
    return $_response_object;
}

#
# get_orders_stats
#
# Детальная информация по заказам
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param GetOrdersStatsRequest $get_orders_stats_request  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'get_orders_stats_request' => {
        data_type => 'GetOrdersStatsRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_orders_stats' } = {
        summary => 'Детальная информация по заказам',
        params => $params,
        returns => 'GetOrdersStatsResponse',
        };
}
# @return GetOrdersStatsResponse
#
sub get_orders_stats {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_orders_stats");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/stats/orders';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_orders_stats_request'}) {
        $_body_data = $args{'get_orders_stats_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOrdersStatsResponse', $response);
    return $_response_object;
}

#
# get_outlet
#
# Информация об одной точке продаж
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $outlet_id Идентификатор точки продаж. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'outlet_id' => {
        data_type => 'int',
        description => 'Идентификатор точки продаж.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_outlet' } = {
        summary => 'Информация об одной точке продаж',
        params => $params,
        returns => 'GetOutletResponse',
        };
}
# @return GetOutletResponse
#
sub get_outlet {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_outlet");
    }

    # verify the required parameter 'outlet_id' is set
    unless (exists $args{'outlet_id'}) {
      croak("Missing the required parameter 'outlet_id' when calling get_outlet");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/outlets/{outletId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'outlet_id'}) {
        my $_base_variable = "{" . "outletId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'outlet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOutletResponse', $response);
    return $_response_object;
}

#
# get_outlet_licenses
#
# Информация о лицензиях для точек продаж
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param ARRAY[int] $outlet_ids Список идентификаторов точек продаж, для которых нужно получить информацию о лицензиях. Идентификаторы указываются через запятую.  В запросе должен быть либо параметр &#x60;outletIds&#x60;, либо параметр &#x60;ids&#x60;. Запрос с обоими параметрами или без них приведет к ошибке.  (optional)
# @param ARRAY[int] $ids Список идентификаторов лицензий. (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'outlet_ids' => {
        data_type => 'ARRAY[int]',
        description => 'Список идентификаторов точек продаж, для которых нужно получить информацию о лицензиях. Идентификаторы указываются через запятую.  В запросе должен быть либо параметр &#x60;outletIds&#x60;, либо параметр &#x60;ids&#x60;. Запрос с обоими параметрами или без них приведет к ошибке. ',
        required => '0',
    },
    'ids' => {
        data_type => 'ARRAY[int]',
        description => 'Список идентификаторов лицензий.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_outlet_licenses' } = {
        summary => 'Информация о лицензиях для точек продаж',
        params => $params,
        returns => 'GetOutletLicensesResponse',
        };
}
# @return GetOutletLicensesResponse
#
sub get_outlet_licenses {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_outlet_licenses");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/outlets/licenses';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'outlet_ids'}) {
        $query_params->{'outletIds'} = $self->{api_client}->to_query_value($args{'outlet_ids'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOutletLicensesResponse', $response);
    return $_response_object;
}

#
# get_outlets
#
# Информация о нескольких точках продаж
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $region_id Идентификатор региона. Если задать идентификатор родительского региона любого уровня, в выходных данных будут отображены точки продаж всех дочерних регионов. Идентификатор региона можно получить c помощью метода [GET regions](../../reference/regions/searchRegionsByName.md).  (optional)
# @param string $shop_outlet_code Идентификатор точки продаж, присвоенный магазином. (optional)
# @param int $region_id2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Для указания региона используйте &#x60;region_id&#x60;.  {% endnote %}  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона. Если задать идентификатор родительского региона любого уровня, в выходных данных будут отображены точки продаж всех дочерних регионов. Идентификатор региона можно получить c помощью метода [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '0',
    },
    'shop_outlet_code' => {
        data_type => 'string',
        description => 'Идентификатор точки продаж, присвоенный магазином.',
        required => '0',
    },
    'region_id2' => {
        data_type => 'int',
        description => '{% note warning \&quot;\&quot; %}  Этот параметр устарел. Для указания региона используйте &#x60;region_id&#x60;.  {% endnote %} ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_outlets' } = {
        summary => 'Информация о нескольких точках продаж',
        params => $params,
        returns => 'GetOutletsResponse',
        };
}
# @return GetOutletsResponse
#
sub get_outlets {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_outlets");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/outlets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'region_id'}) {
        $query_params->{'region_id'} = $self->{api_client}->to_query_value($args{'region_id'});
    }

    # query params
    if ( exists $args{'shop_outlet_code'}) {
        $query_params->{'shop_outlet_code'} = $self->{api_client}->to_query_value($args{'shop_outlet_code'});
    }

    # query params
    if ( exists $args{'region_id2'}) {
        $query_params->{'regionId'} = $self->{api_client}->to_query_value($args{'region_id2'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOutletsResponse', $response);
    return $_response_object;
}

#
# get_prices
#
# Список цен
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param boolean $archived Фильтр по нахождению в архиве. (optional, default to false)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'archived' => {
        data_type => 'boolean',
        description => 'Фильтр по нахождению в архиве.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_prices' } = {
        summary => 'Список цен',
        params => $params,
        returns => 'GetPricesResponse',
        };
}
# @return GetPricesResponse
#
sub get_prices {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_prices");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offer-prices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'archived'}) {
        $query_params->{'archived'} = $self->{api_client}->to_query_value($args{'archived'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetPricesResponse', $response);
    return $_response_object;
}

#
# get_prices_by_offer_ids
#
# Просмотр цен на указанные товары в магазине
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param GetPricesByOfferIdsRequest $get_prices_by_offer_ids_request  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'get_prices_by_offer_ids_request' => {
        data_type => 'GetPricesByOfferIdsRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_prices_by_offer_ids' } = {
        summary => 'Просмотр цен на указанные товары в магазине',
        params => $params,
        returns => 'GetPricesByOfferIdsResponse',
        };
}
# @return GetPricesByOfferIdsResponse
#
sub get_prices_by_offer_ids {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_prices_by_offer_ids");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offer-prices';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_prices_by_offer_ids_request'}) {
        $_body_data = $args{'get_prices_by_offer_ids_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetPricesByOfferIdsResponse', $response);
    return $_response_object;
}

#
# get_promo_offers
#
# Получение списка товаров, которые участвуют или могут участвовать в акции
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetPromoOffersRequest $get_promo_offers_request  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_promo_offers_request' => {
        data_type => 'GetPromoOffersRequest',
        description => '',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_promo_offers' } = {
        summary => 'Получение списка товаров, которые участвуют или могут участвовать в акции',
        params => $params,
        returns => 'GetPromoOffersResponse',
        };
}
# @return GetPromoOffersResponse
#
sub get_promo_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_promo_offers");
    }

    # verify the required parameter 'get_promo_offers_request' is set
    unless (exists $args{'get_promo_offers_request'}) {
      croak("Missing the required parameter 'get_promo_offers_request' when calling get_promo_offers");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/promos/offers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_promo_offers_request'}) {
        $_body_data = $args{'get_promo_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetPromoOffersResponse', $response);
    return $_response_object;
}

#
# get_promos
#
# Получение списка акций
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetPromosRequest $get_promos_request  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_promos_request' => {
        data_type => 'GetPromosRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_promos' } = {
        summary => 'Получение списка акций',
        params => $params,
        returns => 'GetPromosResponse',
        };
}
# @return GetPromosResponse
#
sub get_promos {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_promos");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/promos';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_promos_request'}) {
        $_body_data = $args{'get_promos_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetPromosResponse', $response);
    return $_response_object;
}

#
# get_quality_rating_details
#
# Заказы, которые повлияли на индекс качества
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_quality_rating_details' } = {
        summary => 'Заказы, которые повлияли на индекс качества',
        params => $params,
        returns => 'GetQualityRatingDetailsResponse',
        };
}
# @return GetQualityRatingDetailsResponse
#
sub get_quality_rating_details {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_quality_rating_details");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/ratings/quality/details';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetQualityRatingDetailsResponse', $response);
    return $_response_object;
}

#
# get_quality_ratings
#
# Индекс качества магазинов
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetQualityRatingRequest $get_quality_rating_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_quality_rating_request' => {
        data_type => 'GetQualityRatingRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_quality_ratings' } = {
        summary => 'Индекс качества магазинов',
        params => $params,
        returns => 'GetQualityRatingResponse',
        };
}
# @return GetQualityRatingResponse
#
sub get_quality_ratings {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_quality_ratings");
    }

    # verify the required parameter 'get_quality_rating_request' is set
    unless (exists $args{'get_quality_rating_request'}) {
      croak("Missing the required parameter 'get_quality_rating_request' when calling get_quality_ratings");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/ratings/quality';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_quality_rating_request'}) {
        $_body_data = $args{'get_quality_rating_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetQualityRatingResponse', $response);
    return $_response_object;
}

#
# get_report_info
#
# Получение заданного отчета
#
# @param string $report_id Идентификатор отчета, который вы получили после запуска генерации.  (required)
{
    my $params = {
    'report_id' => {
        data_type => 'string',
        description => 'Идентификатор отчета, который вы получили после запуска генерации. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_report_info' } = {
        summary => 'Получение заданного отчета',
        params => $params,
        returns => 'GetReportInfoResponse',
        };
}
# @return GetReportInfoResponse
#
sub get_report_info {
    my ($self, %args) = @_;

    # verify the required parameter 'report_id' is set
    unless (exists $args{'report_id'}) {
      croak("Missing the required parameter 'report_id' when calling get_report_info");
    }

    # parse inputs
    my $_resource_path = '/reports/info/{reportId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'report_id'}) {
        my $_base_variable = "{" . "reportId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'report_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetReportInfoResponse', $response);
    return $_response_object;
}

#
# get_return
#
# Информация о невыкупе или возврате
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param int $return_id Идентификатор возврата. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'return_id' => {
        data_type => 'int',
        description => 'Идентификатор возврата.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_return' } = {
        summary => 'Информация о невыкупе или возврате',
        params => $params,
        returns => 'GetReturnResponse',
        };
}
# @return GetReturnResponse
#
sub get_return {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_return");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling get_return");
    }

    # verify the required parameter 'return_id' is set
    unless (exists $args{'return_id'}) {
      croak("Missing the required parameter 'return_id' when calling get_return");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'return_id'}) {
        my $_base_variable = "{" . "returnId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'return_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetReturnResponse', $response);
    return $_response_object;
}

#
# get_return_application
#
# Получение заявления на возврат
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param int $return_id Идентификатор возврата. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'return_id' => {
        data_type => 'int',
        description => 'Идентификатор возврата.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_return_application' } = {
        summary => 'Получение заявления на возврат',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_return_application {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_return_application");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling get_return_application");
    }

    # verify the required parameter 'return_id' is set
    unless (exists $args{'return_id'}) {
      croak("Missing the required parameter 'return_id' when calling get_return_application");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/octet-stream', 'application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'return_id'}) {
        my $_base_variable = "{" . "returnId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'return_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_return_photo
#
# Получение фотографии возврата
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param int $return_id Идентификатор возврата. (required)
# @param int $item_id Идентификатор товара в возврате. (required)
# @param string $image_hash Хеш ссылки изображения для загрузки. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'return_id' => {
        data_type => 'int',
        description => 'Идентификатор возврата.',
        required => '1',
    },
    'item_id' => {
        data_type => 'int',
        description => 'Идентификатор товара в возврате.',
        required => '1',
    },
    'image_hash' => {
        data_type => 'string',
        description => 'Хеш ссылки изображения для загрузки.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_return_photo' } = {
        summary => 'Получение фотографии возврата',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_return_photo {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_return_photo");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling get_return_photo");
    }

    # verify the required parameter 'return_id' is set
    unless (exists $args{'return_id'}) {
      croak("Missing the required parameter 'return_id' when calling get_return_photo");
    }

    # verify the required parameter 'item_id' is set
    unless (exists $args{'item_id'}) {
      croak("Missing the required parameter 'item_id' when calling get_return_photo");
    }

    # verify the required parameter 'image_hash' is set
    unless (exists $args{'image_hash'}) {
      croak("Missing the required parameter 'image_hash' when calling get_return_photo");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/octet-stream', 'application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'return_id'}) {
        my $_base_variable = "{" . "returnId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'return_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'item_id'}) {
        my $_base_variable = "{" . "itemId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'item_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'image_hash'}) {
        my $_base_variable = "{" . "imageHash" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'image_hash'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_returns
#
# Список невыкупов и возвратов
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param ARRAY[int] $order_ids Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50.  (optional)
# @param ARRAY[RefundStatusType] $statuses Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую.  (optional)
# @param ReturnType $type Тип заказа для фильтрации:  * &#x60;RETURN&#x60; — возврат.  * &#x60;UNREDEEMED&#x60; — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы.  (optional)
# @param DATE $from_date Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;.  (optional)
# @param DATE $to_date Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;.  (optional)
# @param DATE $from_date2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  (optional)
# @param DATE $to_date2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'order_ids' => {
        data_type => 'ARRAY[int]',
        description => 'Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. ',
        required => '0',
    },
    'statuses' => {
        data_type => 'ARRAY[RefundStatusType]',
        description => 'Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. ',
        required => '0',
    },
    'type' => {
        data_type => 'ReturnType',
        description => 'Тип заказа для фильтрации:  * &#x60;RETURN&#x60; — возврат.  * &#x60;UNREDEEMED&#x60; — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. ',
        required => '0',
    },
    'from_date' => {
        data_type => 'DATE',
        description => 'Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. ',
        required => '0',
    },
    'to_date' => {
        data_type => 'DATE',
        description => 'Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. ',
        required => '0',
    },
    'from_date2' => {
        data_type => 'DATE',
        description => '{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления. ',
        required => '0',
    },
    'to_date2' => {
        data_type => 'DATE',
        description => '{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_returns' } = {
        summary => 'Список невыкупов и возвратов',
        params => $params,
        returns => 'GetReturnsResponse',
        };
}
# @return GetReturnsResponse
#
sub get_returns {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_returns");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/returns';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'order_ids'}) {
        $query_params->{'orderIds'} = $self->{api_client}->to_query_value($args{'order_ids'});
    }

    # query params
    if ( exists $args{'statuses'}) {
        $query_params->{'statuses'} = $self->{api_client}->to_query_value($args{'statuses'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'from_date'}) {
        $query_params->{'fromDate'} = $self->{api_client}->to_query_value($args{'from_date'});
    }

    # query params
    if ( exists $args{'to_date'}) {
        $query_params->{'toDate'} = $self->{api_client}->to_query_value($args{'to_date'});
    }

    # query params
    if ( exists $args{'from_date2'}) {
        $query_params->{'from_date'} = $self->{api_client}->to_query_value($args{'from_date2'});
    }

    # query params
    if ( exists $args{'to_date2'}) {
        $query_params->{'to_date'} = $self->{api_client}->to_query_value($args{'to_date2'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetReturnsResponse', $response);
    return $_response_object;
}

#
# get_stocks
#
# Информация об остатках и оборачиваемости
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param GetWarehouseStocksRequest $get_warehouse_stocks_request  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'get_warehouse_stocks_request' => {
        data_type => 'GetWarehouseStocksRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_stocks' } = {
        summary => 'Информация об остатках и оборачиваемости',
        params => $params,
        returns => 'GetWarehouseStocksResponse',
        };
}
# @return GetWarehouseStocksResponse
#
sub get_stocks {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_stocks");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers/stocks';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_warehouse_stocks_request'}) {
        $_body_data = $args{'get_warehouse_stocks_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetWarehouseStocksResponse', $response);
    return $_response_object;
}

#
# get_suggested_offer_mapping_entries
#
# Рекомендованные карточки для товаров
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetSuggestedOfferMappingEntriesRequest $get_suggested_offer_mapping_entries_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_suggested_offer_mapping_entries_request' => {
        data_type => 'GetSuggestedOfferMappingEntriesRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_suggested_offer_mapping_entries' } = {
        summary => 'Рекомендованные карточки для товаров',
        params => $params,
        returns => 'GetSuggestedOfferMappingEntriesResponse',
        };
}
# @return GetSuggestedOfferMappingEntriesResponse
#
sub get_suggested_offer_mapping_entries {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_suggested_offer_mapping_entries");
    }

    # verify the required parameter 'get_suggested_offer_mapping_entries_request' is set
    unless (exists $args{'get_suggested_offer_mapping_entries_request'}) {
      croak("Missing the required parameter 'get_suggested_offer_mapping_entries_request' when calling get_suggested_offer_mapping_entries");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offer-mapping-entries/suggestions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_suggested_offer_mapping_entries_request'}) {
        $_body_data = $args{'get_suggested_offer_mapping_entries_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSuggestedOfferMappingEntriesResponse', $response);
    return $_response_object;
}

#
# get_suggested_offer_mappings
#
# Просмотр карточек на Маркете, которые подходят вашим товарам
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetSuggestedOfferMappingsRequest $get_suggested_offer_mappings_request  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_suggested_offer_mappings_request' => {
        data_type => 'GetSuggestedOfferMappingsRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_suggested_offer_mappings' } = {
        summary => 'Просмотр карточек на Маркете, которые подходят вашим товарам',
        params => $params,
        returns => 'GetSuggestedOfferMappingsResponse',
        };
}
# @return GetSuggestedOfferMappingsResponse
#
sub get_suggested_offer_mappings {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_suggested_offer_mappings");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings/suggestions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_suggested_offer_mappings_request'}) {
        $_body_data = $args{'get_suggested_offer_mappings_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSuggestedOfferMappingsResponse', $response);
    return $_response_object;
}

#
# get_suggested_prices
#
# Цены для продвижения товаров
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param SuggestPricesRequest $suggest_prices_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'suggest_prices_request' => {
        data_type => 'SuggestPricesRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_suggested_prices' } = {
        summary => 'Цены для продвижения товаров',
        params => $params,
        returns => 'SuggestPricesResponse',
        };
}
# @return SuggestPricesResponse
#
sub get_suggested_prices {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_suggested_prices");
    }

    # verify the required parameter 'suggest_prices_request' is set
    unless (exists $args{'suggest_prices_request'}) {
      croak("Missing the required parameter 'suggest_prices_request' when calling get_suggested_prices");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offer-prices/suggestions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'suggest_prices_request'}) {
        $_body_data = $args{'suggest_prices_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SuggestPricesResponse', $response);
    return $_response_object;
}

#
# get_warehouses
#
# Список складов и групп складов
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_warehouses' } = {
        summary => 'Список складов и групп складов',
        params => $params,
        returns => 'GetWarehousesResponse',
        };
}
# @return GetWarehousesResponse
#
sub get_warehouses {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_warehouses");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/warehouses';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetWarehousesResponse', $response);
    return $_response_object;
}

#
# provide_order_digital_codes
#
# Передача ключей цифровых товаров
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param ProvideOrderDigitalCodesRequest $provide_order_digital_codes_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'provide_order_digital_codes_request' => {
        data_type => 'ProvideOrderDigitalCodesRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'provide_order_digital_codes' } = {
        summary => 'Передача ключей цифровых товаров',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub provide_order_digital_codes {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling provide_order_digital_codes");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling provide_order_digital_codes");
    }

    # verify the required parameter 'provide_order_digital_codes_request' is set
    unless (exists $args{'provide_order_digital_codes_request'}) {
      croak("Missing the required parameter 'provide_order_digital_codes_request' when calling provide_order_digital_codes");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'provide_order_digital_codes_request'}) {
        $_body_data = $args{'provide_order_digital_codes_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# provide_order_item_identifiers
#
# Передача кодов маркировки единиц товара
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param ProvideOrderItemIdentifiersRequest $provide_order_item_identifiers_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'provide_order_item_identifiers_request' => {
        data_type => 'ProvideOrderItemIdentifiersRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'provide_order_item_identifiers' } = {
        summary => 'Передача кодов маркировки единиц товара',
        params => $params,
        returns => 'ProvideOrderItemIdentifiersResponse',
        };
}
# @return ProvideOrderItemIdentifiersResponse
#
sub provide_order_item_identifiers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling provide_order_item_identifiers");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling provide_order_item_identifiers");
    }

    # verify the required parameter 'provide_order_item_identifiers_request' is set
    unless (exists $args{'provide_order_item_identifiers_request'}) {
      croak("Missing the required parameter 'provide_order_item_identifiers_request' when calling provide_order_item_identifiers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/identifiers';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'provide_order_item_identifiers_request'}) {
        $_body_data = $args{'provide_order_item_identifiers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ProvideOrderItemIdentifiersResponse', $response);
    return $_response_object;
}

#
# put_bids_for_business
#
# Включение буста продаж и установка ставок
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param PutSkuBidsRequest $put_sku_bids_request description (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'put_sku_bids_request' => {
        data_type => 'PutSkuBidsRequest',
        description => 'description',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'put_bids_for_business' } = {
        summary => 'Включение буста продаж и установка ставок',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub put_bids_for_business {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling put_bids_for_business");
    }

    # verify the required parameter 'put_sku_bids_request' is set
    unless (exists $args{'put_sku_bids_request'}) {
      croak("Missing the required parameter 'put_sku_bids_request' when calling put_bids_for_business");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/bids';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'put_sku_bids_request'}) {
        $_body_data = $args{'put_sku_bids_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# put_bids_for_campaign
#
# Включение буста продаж и установка ставок для магазина
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param PutSkuBidsRequest $put_sku_bids_request description (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'put_sku_bids_request' => {
        data_type => 'PutSkuBidsRequest',
        description => 'description',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'put_bids_for_campaign' } = {
        summary => 'Включение буста продаж и установка ставок для магазина',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub put_bids_for_campaign {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling put_bids_for_campaign");
    }

    # verify the required parameter 'put_sku_bids_request' is set
    unless (exists $args{'put_sku_bids_request'}) {
      croak("Missing the required parameter 'put_sku_bids_request' when calling put_bids_for_campaign");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/bids';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'put_sku_bids_request'}) {
        $_body_data = $args{'put_sku_bids_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# refresh_feed
#
# Сообщить, что прайс-лист обновился
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $feed_id Идентификатор прайс-листа. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'feed_id' => {
        data_type => 'int',
        description => 'Идентификатор прайс-листа.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'refresh_feed' } = {
        summary => 'Сообщить, что прайс-лист обновился',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub refresh_feed {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling refresh_feed");
    }

    # verify the required parameter 'feed_id' is set
    unless (exists $args{'feed_id'}) {
      croak("Missing the required parameter 'feed_id' when calling refresh_feed");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/feeds/{feedId}/refresh';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'feed_id'}) {
        my $_base_variable = "{" . "feedId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'feed_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# search_models
#
# Поиск модели товара
#
# @param string $query Поисковый запрос по названию модели товара. (required)
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
# @param CurrencyType $currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина).  (optional)
# @param int $page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
# @param int $page_size Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'Поисковый запрос по названию модели товара.',
        required => '1',
    },
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). ',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_models' } = {
        summary => 'Поиск модели товара',
        params => $params,
        returns => 'SearchModelsResponse',
        };
}
# @return SearchModelsResponse
#
sub search_models {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search_models");
    }

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling search_models");
    }

    # parse inputs
    my $_resource_path = '/models';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'region_id'}) {
        $query_params->{'regionId'} = $self->{api_client}->to_query_value($args{'region_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchModelsResponse', $response);
    return $_response_object;
}

#
# search_region_children
#
# Информация о дочерних регионах
#
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
# @param int $page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
# @param int $page_size Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
{
    my $params = {
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_region_children' } = {
        summary => 'Информация о дочерних регионах',
        params => $params,
        returns => 'GetRegionWithChildrenResponse',
        };
}
# @return GetRegionWithChildrenResponse
#
sub search_region_children {
    my ($self, %args) = @_;

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling search_region_children");
    }

    # parse inputs
    my $_resource_path = '/regions/{regionId}/children';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # path params
    if ( exists $args{'region_id'}) {
        my $_base_variable = "{" . "regionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'region_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetRegionWithChildrenResponse', $response);
    return $_response_object;
}

#
# search_regions_by_id
#
# Информация о регионе
#
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
{
    my $params = {
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_regions_by_id' } = {
        summary => 'Информация о регионе',
        params => $params,
        returns => 'GetRegionsResponse',
        };
}
# @return GetRegionsResponse
#
sub search_regions_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling search_regions_by_id");
    }

    # parse inputs
    my $_resource_path = '/regions/{regionId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'region_id'}) {
        my $_base_variable = "{" . "regionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'region_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetRegionsResponse', $response);
    return $_response_object;
}

#
# search_regions_by_name
#
# Поиск регионов по их имени
#
# @param string $name Название региона.  Важно учитывать регистр: первая буква должна быть заглавной, остальные — строчными. Например, &#x60;Москва&#x60;.  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Название региона.  Важно учитывать регистр: первая буква должна быть заглавной, остальные — строчными. Например, &#x60;Москва&#x60;. ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_regions_by_name' } = {
        summary => 'Поиск регионов по их имени',
        params => $params,
        returns => 'GetRegionsResponse',
        };
}
# @return GetRegionsResponse
#
sub search_regions_by_name {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling search_regions_by_name");
    }

    # parse inputs
    my $_resource_path = '/regions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetRegionsResponse', $response);
    return $_response_object;
}

#
# send_file_to_chat
#
# Отправка файла в чат
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $chat_id Идентификатор чата. (required)
# @param string $file Содержимое файла. Максимальный размер файла — 5 Мбайт. (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'chat_id' => {
        data_type => 'int',
        description => 'Идентификатор чата.',
        required => '1',
    },
    'file' => {
        data_type => 'string',
        description => 'Содержимое файла. Максимальный размер файла — 5 Мбайт.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_file_to_chat' } = {
        summary => 'Отправка файла в чат',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub send_file_to_chat {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling send_file_to_chat");
    }

    # verify the required parameter 'chat_id' is set
    unless (exists $args{'chat_id'}) {
      croak("Missing the required parameter 'chat_id' when calling send_file_to_chat");
    }

    # verify the required parameter 'file' is set
    unless (exists $args{'file'}) {
      croak("Missing the required parameter 'file' when calling send_file_to_chat");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/chats/file/send';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # query params
    if ( exists $args{'chat_id'}) {
        $query_params->{'chatId'} = $self->{api_client}->to_query_value($args{'chat_id'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# send_message_to_chat
#
# Отправка сообщения в чат
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $chat_id Идентификатор чата. (required)
# @param SendMessageToChatRequest $send_message_to_chat_request description (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'chat_id' => {
        data_type => 'int',
        description => 'Идентификатор чата.',
        required => '1',
    },
    'send_message_to_chat_request' => {
        data_type => 'SendMessageToChatRequest',
        description => 'description',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_message_to_chat' } = {
        summary => 'Отправка сообщения в чат',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub send_message_to_chat {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling send_message_to_chat");
    }

    # verify the required parameter 'chat_id' is set
    unless (exists $args{'chat_id'}) {
      croak("Missing the required parameter 'chat_id' when calling send_message_to_chat");
    }

    # verify the required parameter 'send_message_to_chat_request' is set
    unless (exists $args{'send_message_to_chat_request'}) {
      croak("Missing the required parameter 'send_message_to_chat_request' when calling send_message_to_chat");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/chats/message';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'chat_id'}) {
        $query_params->{'chatId'} = $self->{api_client}->to_query_value($args{'chat_id'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'send_message_to_chat_request'}) {
        $_body_data = $args{'send_message_to_chat_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# set_feed_params
#
# Изменение параметров прайс-листа
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $feed_id Идентификатор прайс-листа. (required)
# @param SetFeedParamsRequest $set_feed_params_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'feed_id' => {
        data_type => 'int',
        description => 'Идентификатор прайс-листа.',
        required => '1',
    },
    'set_feed_params_request' => {
        data_type => 'SetFeedParamsRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_feed_params' } = {
        summary => 'Изменение параметров прайс-листа',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub set_feed_params {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling set_feed_params");
    }

    # verify the required parameter 'feed_id' is set
    unless (exists $args{'feed_id'}) {
      croak("Missing the required parameter 'feed_id' when calling set_feed_params");
    }

    # verify the required parameter 'set_feed_params_request' is set
    unless (exists $args{'set_feed_params_request'}) {
      croak("Missing the required parameter 'set_feed_params_request' when calling set_feed_params");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/feeds/{feedId}/params';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'feed_id'}) {
        my $_base_variable = "{" . "feedId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'feed_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'set_feed_params_request'}) {
        $_body_data = $args{'set_feed_params_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# set_order_box_layout
#
# Подготовка заказа
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param SetOrderBoxLayoutRequest $set_order_box_layout_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'set_order_box_layout_request' => {
        data_type => 'SetOrderBoxLayoutRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_order_box_layout' } = {
        summary => 'Подготовка заказа',
        params => $params,
        returns => 'SetOrderBoxLayoutResponse',
        };
}
# @return SetOrderBoxLayoutResponse
#
sub set_order_box_layout {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling set_order_box_layout");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling set_order_box_layout");
    }

    # verify the required parameter 'set_order_box_layout_request' is set
    unless (exists $args{'set_order_box_layout_request'}) {
      croak("Missing the required parameter 'set_order_box_layout_request' when calling set_order_box_layout");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/boxes';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'set_order_box_layout_request'}) {
        $_body_data = $args{'set_order_box_layout_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SetOrderBoxLayoutResponse', $response);
    return $_response_object;
}

#
# set_order_delivery_date
#
# Изменение даты доставки заказа
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param SetOrderDeliveryDateRequest $set_order_delivery_date_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'set_order_delivery_date_request' => {
        data_type => 'SetOrderDeliveryDateRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_order_delivery_date' } = {
        summary => 'Изменение даты доставки заказа',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub set_order_delivery_date {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling set_order_delivery_date");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling set_order_delivery_date");
    }

    # verify the required parameter 'set_order_delivery_date_request' is set
    unless (exists $args{'set_order_delivery_date_request'}) {
      croak("Missing the required parameter 'set_order_delivery_date_request' when calling set_order_delivery_date");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/delivery/date';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'set_order_delivery_date_request'}) {
        $_body_data = $args{'set_order_delivery_date_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# set_order_delivery_track_code
#
# Передача трек‑номера посылки
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param SetOrderDeliveryTrackCodeRequest $set_order_delivery_track_code_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'set_order_delivery_track_code_request' => {
        data_type => 'SetOrderDeliveryTrackCodeRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_order_delivery_track_code' } = {
        summary => 'Передача трек‑номера посылки',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub set_order_delivery_track_code {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling set_order_delivery_track_code");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling set_order_delivery_track_code");
    }

    # verify the required parameter 'set_order_delivery_track_code_request' is set
    unless (exists $args{'set_order_delivery_track_code_request'}) {
      croak("Missing the required parameter 'set_order_delivery_track_code_request' when calling set_order_delivery_track_code");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/delivery/track';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'set_order_delivery_track_code_request'}) {
        $_body_data = $args{'set_order_delivery_track_code_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# set_order_shipment_boxes
#
# Передача количества грузовых мест в заказе
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param int $shipment_id Параметр больше не используется. Вставьте любое число — просто чтобы получился корректный URL.  (required)
# @param SetOrderShipmentBoxesRequest $set_order_shipment_boxes_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'shipment_id' => {
        data_type => 'int',
        description => 'Параметр больше не используется. Вставьте любое число — просто чтобы получился корректный URL. ',
        required => '1',
    },
    'set_order_shipment_boxes_request' => {
        data_type => 'SetOrderShipmentBoxesRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_order_shipment_boxes' } = {
        summary => 'Передача количества грузовых мест в заказе',
        params => $params,
        returns => 'SetOrderShipmentBoxesResponse',
        };
}
# @return SetOrderShipmentBoxesResponse
#
sub set_order_shipment_boxes {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling set_order_shipment_boxes");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling set_order_shipment_boxes");
    }

    # verify the required parameter 'shipment_id' is set
    unless (exists $args{'shipment_id'}) {
      croak("Missing the required parameter 'shipment_id' when calling set_order_shipment_boxes");
    }

    # verify the required parameter 'set_order_shipment_boxes_request' is set
    unless (exists $args{'set_order_shipment_boxes_request'}) {
      croak("Missing the required parameter 'set_order_shipment_boxes_request' when calling set_order_shipment_boxes");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'shipment_id'}) {
        my $_base_variable = "{" . "shipmentId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'shipment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'set_order_shipment_boxes_request'}) {
        $_body_data = $args{'set_order_shipment_boxes_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SetOrderShipmentBoxesResponse', $response);
    return $_response_object;
}

#
# set_return_decision
#
# Принятие или изменение решения по возврату
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param int $return_id Идентификатор возврата. (required)
# @param SetReturnDecisionRequest $set_return_decision_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'return_id' => {
        data_type => 'int',
        description => 'Идентификатор возврата.',
        required => '1',
    },
    'set_return_decision_request' => {
        data_type => 'SetReturnDecisionRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_return_decision' } = {
        summary => 'Принятие или изменение решения по возврату',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub set_return_decision {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling set_return_decision");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling set_return_decision");
    }

    # verify the required parameter 'return_id' is set
    unless (exists $args{'return_id'}) {
      croak("Missing the required parameter 'return_id' when calling set_return_decision");
    }

    # verify the required parameter 'set_return_decision_request' is set
    unless (exists $args{'set_return_decision_request'}) {
      croak("Missing the required parameter 'set_return_decision_request' when calling set_return_decision");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'return_id'}) {
        my $_base_variable = "{" . "returnId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'return_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'set_return_decision_request'}) {
        $_body_data = $args{'set_return_decision_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# skip_goods_feedbacks_reaction
#
# Отказ от ответа на отзывы
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param SkipGoodsFeedbackReactionRequest $skip_goods_feedback_reaction_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'skip_goods_feedback_reaction_request' => {
        data_type => 'SkipGoodsFeedbackReactionRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'skip_goods_feedbacks_reaction' } = {
        summary => 'Отказ от ответа на отзывы',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub skip_goods_feedbacks_reaction {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling skip_goods_feedbacks_reaction");
    }

    # verify the required parameter 'skip_goods_feedback_reaction_request' is set
    unless (exists $args{'skip_goods_feedback_reaction_request'}) {
      croak("Missing the required parameter 'skip_goods_feedback_reaction_request' when calling skip_goods_feedbacks_reaction");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/goods-feedback/skip-reaction';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'skip_goods_feedback_reaction_request'}) {
        $_body_data = $args{'skip_goods_feedback_reaction_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# submit_return_decision
#
# Подтверждение решения по возврату
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param int $return_id Идентификатор возврата. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'return_id' => {
        data_type => 'int',
        description => 'Идентификатор возврата.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'submit_return_decision' } = {
        summary => 'Подтверждение решения по возврату',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub submit_return_decision {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling submit_return_decision");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling submit_return_decision");
    }

    # verify the required parameter 'return_id' is set
    unless (exists $args{'return_id'}) {
      croak("Missing the required parameter 'return_id' when calling submit_return_decision");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'return_id'}) {
        my $_base_variable = "{" . "returnId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'return_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# update_business_prices
#
# Установка цен на товары во всех магазинах
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdateBusinessPricesRequest $update_business_prices_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_business_prices_request' => {
        data_type => 'UpdateBusinessPricesRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_business_prices' } = {
        summary => 'Установка цен на товары во всех магазинах',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub update_business_prices {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling update_business_prices");
    }

    # verify the required parameter 'update_business_prices_request' is set
    unless (exists $args{'update_business_prices_request'}) {
      croak("Missing the required parameter 'update_business_prices_request' when calling update_business_prices");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-prices/updates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_business_prices_request'}) {
        $_body_data = $args{'update_business_prices_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# update_campaign_offers
#
# Изменение условий продажи товаров в магазине
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdateCampaignOffersRequest $update_campaign_offers_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_campaign_offers_request' => {
        data_type => 'UpdateCampaignOffersRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_campaign_offers' } = {
        summary => 'Изменение условий продажи товаров в магазине',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub update_campaign_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling update_campaign_offers");
    }

    # verify the required parameter 'update_campaign_offers_request' is set
    unless (exists $args{'update_campaign_offers_request'}) {
      croak("Missing the required parameter 'update_campaign_offers_request' when calling update_campaign_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers/update';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_campaign_offers_request'}) {
        $_body_data = $args{'update_campaign_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# update_goods_feedback_comment
#
# Добавление нового или изменение созданного комментария
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdateGoodsFeedbackCommentRequest $update_goods_feedback_comment_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_goods_feedback_comment_request' => {
        data_type => 'UpdateGoodsFeedbackCommentRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_goods_feedback_comment' } = {
        summary => 'Добавление нового или изменение созданного комментария',
        params => $params,
        returns => 'UpdateGoodsFeedbackCommentResponse',
        };
}
# @return UpdateGoodsFeedbackCommentResponse
#
sub update_goods_feedback_comment {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling update_goods_feedback_comment");
    }

    # verify the required parameter 'update_goods_feedback_comment_request' is set
    unless (exists $args{'update_goods_feedback_comment_request'}) {
      croak("Missing the required parameter 'update_goods_feedback_comment_request' when calling update_goods_feedback_comment");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/goods-feedback/comments/update';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_goods_feedback_comment_request'}) {
        $_body_data = $args{'update_goods_feedback_comment_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdateGoodsFeedbackCommentResponse', $response);
    return $_response_object;
}

#
# update_offer_content
#
# Редактирование категорийных характеристик товара
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdateOfferContentRequest $update_offer_content_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_offer_content_request' => {
        data_type => 'UpdateOfferContentRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_offer_content' } = {
        summary => 'Редактирование категорийных характеристик товара',
        params => $params,
        returns => 'UpdateOfferContentResponse',
        };
}
# @return UpdateOfferContentResponse
#
sub update_offer_content {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling update_offer_content");
    }

    # verify the required parameter 'update_offer_content_request' is set
    unless (exists $args{'update_offer_content_request'}) {
      croak("Missing the required parameter 'update_offer_content_request' when calling update_offer_content");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-cards/update';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_offer_content_request'}) {
        $_body_data = $args{'update_offer_content_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdateOfferContentResponse', $response);
    return $_response_object;
}

#
# update_offer_mapping_entries
#
# Добавление и редактирование товаров в каталоге
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdateOfferMappingEntryRequest $update_offer_mapping_entry_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_offer_mapping_entry_request' => {
        data_type => 'UpdateOfferMappingEntryRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_offer_mapping_entries' } = {
        summary => 'Добавление и редактирование товаров в каталоге',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub update_offer_mapping_entries {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling update_offer_mapping_entries");
    }

    # verify the required parameter 'update_offer_mapping_entry_request' is set
    unless (exists $args{'update_offer_mapping_entry_request'}) {
      croak("Missing the required parameter 'update_offer_mapping_entry_request' when calling update_offer_mapping_entries");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offer-mapping-entries/updates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_offer_mapping_entry_request'}) {
        $_body_data = $args{'update_offer_mapping_entry_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# update_offer_mappings
#
# Добавление товаров в каталог и изменение информации о них
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdateOfferMappingsRequest $update_offer_mappings_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_offer_mappings_request' => {
        data_type => 'UpdateOfferMappingsRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_offer_mappings' } = {
        summary => 'Добавление товаров в каталог и изменение информации о них',
        params => $params,
        returns => 'UpdateOfferMappingsResponse',
        };
}
# @return UpdateOfferMappingsResponse
#
sub update_offer_mappings {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling update_offer_mappings");
    }

    # verify the required parameter 'update_offer_mappings_request' is set
    unless (exists $args{'update_offer_mappings_request'}) {
      croak("Missing the required parameter 'update_offer_mappings_request' when calling update_offer_mappings");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings/update';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_offer_mappings_request'}) {
        $_body_data = $args{'update_offer_mappings_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdateOfferMappingsResponse', $response);
    return $_response_object;
}

#
# update_order_items
#
# Удаление товара из заказа или уменьшение числа единиц
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param UpdateOrderItemRequest $update_order_item_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'update_order_item_request' => {
        data_type => 'UpdateOrderItemRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_order_items' } = {
        summary => 'Удаление товара из заказа или уменьшение числа единиц',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_order_items {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling update_order_items");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling update_order_items");
    }

    # verify the required parameter 'update_order_item_request' is set
    unless (exists $args{'update_order_item_request'}) {
      croak("Missing the required parameter 'update_order_item_request' when calling update_order_items");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/items';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_order_item_request'}) {
        $_body_data = $args{'update_order_item_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_order_status
#
# Изменение статуса одного заказа
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param UpdateOrderStatusRequest $update_order_status_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'update_order_status_request' => {
        data_type => 'UpdateOrderStatusRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_order_status' } = {
        summary => 'Изменение статуса одного заказа',
        params => $params,
        returns => 'UpdateOrderStatusResponse',
        };
}
# @return UpdateOrderStatusResponse
#
sub update_order_status {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling update_order_status");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling update_order_status");
    }

    # verify the required parameter 'update_order_status_request' is set
    unless (exists $args{'update_order_status_request'}) {
      croak("Missing the required parameter 'update_order_status_request' when calling update_order_status");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/status';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_order_status_request'}) {
        $_body_data = $args{'update_order_status_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdateOrderStatusResponse', $response);
    return $_response_object;
}

#
# update_order_statuses
#
# Изменение статусов нескольких заказов
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdateOrderStatusesRequest $update_order_statuses_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_order_statuses_request' => {
        data_type => 'UpdateOrderStatusesRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_order_statuses' } = {
        summary => 'Изменение статусов нескольких заказов',
        params => $params,
        returns => 'UpdateOrderStatusesResponse',
        };
}
# @return UpdateOrderStatusesResponse
#
sub update_order_statuses {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling update_order_statuses");
    }

    # verify the required parameter 'update_order_statuses_request' is set
    unless (exists $args{'update_order_statuses_request'}) {
      croak("Missing the required parameter 'update_order_statuses_request' when calling update_order_statuses");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/status-update';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_order_statuses_request'}) {
        $_body_data = $args{'update_order_statuses_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdateOrderStatusesResponse', $response);
    return $_response_object;
}

#
# update_order_storage_limit
#
# Продление срока хранения заказа
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param UpdateOrderStorageLimitRequest $update_order_storage_limit_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'update_order_storage_limit_request' => {
        data_type => 'UpdateOrderStorageLimitRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_order_storage_limit' } = {
        summary => 'Продление срока хранения заказа',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub update_order_storage_limit {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling update_order_storage_limit");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling update_order_storage_limit");
    }

    # verify the required parameter 'update_order_storage_limit_request' is set
    unless (exists $args{'update_order_storage_limit_request'}) {
      croak("Missing the required parameter 'update_order_storage_limit_request' when calling update_order_storage_limit");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_order_storage_limit_request'}) {
        $_body_data = $args{'update_order_storage_limit_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# update_outlet
#
# Изменение информации о точке продаж
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $outlet_id Идентификатор точки продаж. (required)
# @param ChangeOutletRequest $change_outlet_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'outlet_id' => {
        data_type => 'int',
        description => 'Идентификатор точки продаж.',
        required => '1',
    },
    'change_outlet_request' => {
        data_type => 'ChangeOutletRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_outlet' } = {
        summary => 'Изменение информации о точке продаж',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub update_outlet {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling update_outlet");
    }

    # verify the required parameter 'outlet_id' is set
    unless (exists $args{'outlet_id'}) {
      croak("Missing the required parameter 'outlet_id' when calling update_outlet");
    }

    # verify the required parameter 'change_outlet_request' is set
    unless (exists $args{'change_outlet_request'}) {
      croak("Missing the required parameter 'change_outlet_request' when calling update_outlet");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/outlets/{outletId}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'outlet_id'}) {
        my $_base_variable = "{" . "outletId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'outlet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'change_outlet_request'}) {
        $_body_data = $args{'change_outlet_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# update_outlet_licenses
#
# Создание и изменение лицензий для точек продаж
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdateOutletLicenseRequest $update_outlet_license_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_outlet_license_request' => {
        data_type => 'UpdateOutletLicenseRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_outlet_licenses' } = {
        summary => 'Создание и изменение лицензий для точек продаж',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub update_outlet_licenses {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling update_outlet_licenses");
    }

    # verify the required parameter 'update_outlet_license_request' is set
    unless (exists $args{'update_outlet_license_request'}) {
      croak("Missing the required parameter 'update_outlet_license_request' when calling update_outlet_licenses");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/outlets/licenses';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_outlet_license_request'}) {
        $_body_data = $args{'update_outlet_license_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# update_prices
#
# Установка цен на товары в конкретном магазине
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdatePricesRequest $update_prices_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_prices_request' => {
        data_type => 'UpdatePricesRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_prices' } = {
        summary => 'Установка цен на товары в конкретном магазине',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub update_prices {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling update_prices");
    }

    # verify the required parameter 'update_prices_request' is set
    unless (exists $args{'update_prices_request'}) {
      croak("Missing the required parameter 'update_prices_request' when calling update_prices");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offer-prices/updates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_prices_request'}) {
        $_body_data = $args{'update_prices_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# update_promo_offers
#
# Добавление товаров в акцию или изменение их цен
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdatePromoOffersRequest $update_promo_offers_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_promo_offers_request' => {
        data_type => 'UpdatePromoOffersRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_promo_offers' } = {
        summary => 'Добавление товаров в акцию или изменение их цен',
        params => $params,
        returns => 'UpdatePromoOffersResponse',
        };
}
# @return UpdatePromoOffersResponse
#
sub update_promo_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling update_promo_offers");
    }

    # verify the required parameter 'update_promo_offers_request' is set
    unless (exists $args{'update_promo_offers_request'}) {
      croak("Missing the required parameter 'update_promo_offers_request' when calling update_promo_offers");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/promos/offers/update';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_promo_offers_request'}) {
        $_body_data = $args{'update_promo_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdatePromoOffersResponse', $response);
    return $_response_object;
}

#
# update_stocks
#
# Передача информации об остатках
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdateStocksRequest $update_stocks_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_stocks_request' => {
        data_type => 'UpdateStocksRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_stocks' } = {
        summary => 'Передача информации об остатках',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub update_stocks {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling update_stocks");
    }

    # verify the required parameter 'update_stocks_request' is set
    unless (exists $args{'update_stocks_request'}) {
      croak("Missing the required parameter 'update_stocks_request' when calling update_stocks");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers/stocks';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_stocks_request'}) {
        $_body_data = $args{'update_stocks_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

1;
