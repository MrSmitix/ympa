=begin comment

Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ModelsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_model
#
# Информация об одной модели
#
# @param int $model_id Идентификатор модели товара. (required)
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
# @param CurrencyType $currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина).  (optional)
{
    my $params = {
    'model_id' => {
        data_type => 'int',
        description => 'Идентификатор модели товара.',
        required => '1',
    },
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_model' } = {
        summary => 'Информация об одной модели',
        params => $params,
        returns => 'GetModelsResponse',
        };
}
# @return GetModelsResponse
#
sub get_model {
    my ($self, %args) = @_;

    # verify the required parameter 'model_id' is set
    unless (exists $args{'model_id'}) {
      croak("Missing the required parameter 'model_id' when calling get_model");
    }

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling get_model");
    }

    # parse inputs
    my $_resource_path = '/models/{modelId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'region_id'}) {
        $query_params->{'regionId'} = $self->{api_client}->to_query_value($args{'region_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    # path params
    if ( exists $args{'model_id'}) {
        my $_base_variable = "{" . "modelId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'model_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetModelsResponse', $response);
    return $_response_object;
}

#
# get_model_offers
#
# Список предложений для одной модели
#
# @param int $model_id Идентификатор модели товара. (required)
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
# @param CurrencyType $currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина).  (optional)
# @param SortOrderType $order_by_price Направление сортировки по цене.  Возможные значения: * &#x60;ASC&#x60; — сортировка по возрастанию. * &#x60;DESC&#x60; — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке.  (optional)
# @param int $count Количество предложений на странице ответа. (optional, default to 10)
# @param int $page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
{
    my $params = {
    'model_id' => {
        data_type => 'int',
        description => 'Идентификатор модели товара.',
        required => '1',
    },
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). ',
        required => '0',
    },
    'order_by_price' => {
        data_type => 'SortOrderType',
        description => 'Направление сортировки по цене.  Возможные значения: * &#x60;ASC&#x60; — сортировка по возрастанию. * &#x60;DESC&#x60; — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке. ',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'Количество предложений на странице ответа.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_model_offers' } = {
        summary => 'Список предложений для одной модели',
        params => $params,
        returns => 'GetModelsOffersResponse',
        };
}
# @return GetModelsOffersResponse
#
sub get_model_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'model_id' is set
    unless (exists $args{'model_id'}) {
      croak("Missing the required parameter 'model_id' when calling get_model_offers");
    }

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling get_model_offers");
    }

    # parse inputs
    my $_resource_path = '/models/{modelId}/offers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'region_id'}) {
        $query_params->{'regionId'} = $self->{api_client}->to_query_value($args{'region_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    # query params
    if ( exists $args{'order_by_price'}) {
        $query_params->{'orderByPrice'} = $self->{api_client}->to_query_value($args{'order_by_price'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'model_id'}) {
        my $_base_variable = "{" . "modelId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'model_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetModelsOffersResponse', $response);
    return $_response_object;
}

#
# get_models
#
# Информация о нескольких моделях
#
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
# @param GetModelsRequest $get_models_request  (required)
# @param CurrencyType $currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина).  (optional)
{
    my $params = {
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    'get_models_request' => {
        data_type => 'GetModelsRequest',
        description => '',
        required => '1',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_models' } = {
        summary => 'Информация о нескольких моделях',
        params => $params,
        returns => 'GetModelsResponse',
        };
}
# @return GetModelsResponse
#
sub get_models {
    my ($self, %args) = @_;

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling get_models");
    }

    # verify the required parameter 'get_models_request' is set
    unless (exists $args{'get_models_request'}) {
      croak("Missing the required parameter 'get_models_request' when calling get_models");
    }

    # parse inputs
    my $_resource_path = '/models';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'region_id'}) {
        $query_params->{'regionId'} = $self->{api_client}->to_query_value($args{'region_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_models_request'}) {
        $_body_data = $args{'get_models_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetModelsResponse', $response);
    return $_response_object;
}

#
# get_models_offers
#
# Список предложений для нескольких моделей
#
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
# @param GetModelsRequest $get_models_request  (required)
# @param CurrencyType $currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина).  (optional)
# @param SortOrderType $order_by_price Направление сортировки по цене.  Возможные значения: * &#x60;ASC&#x60; — сортировка по возрастанию. * &#x60;DESC&#x60; — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке.  (optional)
{
    my $params = {
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    'get_models_request' => {
        data_type => 'GetModelsRequest',
        description => '',
        required => '1',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). ',
        required => '0',
    },
    'order_by_price' => {
        data_type => 'SortOrderType',
        description => 'Направление сортировки по цене.  Возможные значения: * &#x60;ASC&#x60; — сортировка по возрастанию. * &#x60;DESC&#x60; — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_models_offers' } = {
        summary => 'Список предложений для нескольких моделей',
        params => $params,
        returns => 'GetModelsOffersResponse',
        };
}
# @return GetModelsOffersResponse
#
sub get_models_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling get_models_offers");
    }

    # verify the required parameter 'get_models_request' is set
    unless (exists $args{'get_models_request'}) {
      croak("Missing the required parameter 'get_models_request' when calling get_models_offers");
    }

    # parse inputs
    my $_resource_path = '/models/offers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'region_id'}) {
        $query_params->{'regionId'} = $self->{api_client}->to_query_value($args{'region_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    # query params
    if ( exists $args{'order_by_price'}) {
        $query_params->{'orderByPrice'} = $self->{api_client}->to_query_value($args{'order_by_price'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_models_request'}) {
        $_body_data = $args{'get_models_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetModelsOffersResponse', $response);
    return $_response_object;
}

#
# search_models
#
# Поиск модели товара
#
# @param string $query Поисковый запрос по названию модели товара. (required)
# @param int $region_id Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  (required)
# @param CurrencyType $currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина).  (optional)
# @param int $page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
# @param int $page_size Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'Поисковый запрос по названию модели товара.',
        required => '1',
    },
    'region_id' => {
        data_type => 'int',
        description => 'Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). ',
        required => '1',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). ',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_models' } = {
        summary => 'Поиск модели товара',
        params => $params,
        returns => 'SearchModelsResponse',
        };
}
# @return SearchModelsResponse
#
sub search_models {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search_models");
    }

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling search_models");
    }

    # parse inputs
    my $_resource_path = '/models';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'region_id'}) {
        $query_params->{'regionId'} = $self->{api_client}->to_query_value($args{'region_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchModelsResponse', $response);
    return $_response_object;
}

1;
