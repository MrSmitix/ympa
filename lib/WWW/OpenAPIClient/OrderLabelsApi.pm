=begin comment

Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::OrderLabelsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# generate_order_label
#
# Готовый ярлык‑наклейка для коробки в заказе
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param int $shipment_id Идентификатор грузоместа. (required)
# @param int $box_id Идентификатор коробки. (required)
# @param PageFormatType $format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6. (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'shipment_id' => {
        data_type => 'int',
        description => 'Идентификатор грузоместа.',
        required => '1',
    },
    'box_id' => {
        data_type => 'int',
        description => 'Идентификатор коробки.',
        required => '1',
    },
    'format' => {
        data_type => 'PageFormatType',
        description => 'Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_order_label' } = {
        summary => 'Готовый ярлык‑наклейка для коробки в заказе',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub generate_order_label {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling generate_order_label");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling generate_order_label");
    }

    # verify the required parameter 'shipment_id' is set
    unless (exists $args{'shipment_id'}) {
      croak("Missing the required parameter 'shipment_id' when calling generate_order_label");
    }

    # verify the required parameter 'box_id' is set
    unless (exists $args{'box_id'}) {
      croak("Missing the required parameter 'box_id' when calling generate_order_label");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/pdf', 'application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'shipment_id'}) {
        my $_base_variable = "{" . "shipmentId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'shipment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'box_id'}) {
        my $_base_variable = "{" . "boxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'box_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# generate_order_labels
#
# Готовые ярлыки‑наклейки на все коробки в одном заказе
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
# @param PageFormatType $format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6. (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    'format' => {
        data_type => 'PageFormatType',
        description => 'Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_order_labels' } = {
        summary => 'Готовые ярлыки‑наклейки на все коробки в одном заказе',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub generate_order_labels {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling generate_order_labels");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling generate_order_labels");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/delivery/labels';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/pdf', 'application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_order_labels_data
#
# Данные для самостоятельного изготовления ярлыков
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $order_id Идентификатор заказа. (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'order_id' => {
        data_type => 'int',
        description => 'Идентификатор заказа.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_order_labels_data' } = {
        summary => 'Данные для самостоятельного изготовления ярлыков',
        params => $params,
        returns => 'GetOrderLabelsDataResponse',
        };
}
# @return GetOrderLabelsDataResponse
#
sub get_order_labels_data {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_order_labels_data");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling get_order_labels_data");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOrderLabelsDataResponse', $response);
    return $_response_object;
}

1;
