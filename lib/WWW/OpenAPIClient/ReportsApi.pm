=begin comment

Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ReportsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# generate_boost_consolidated_report
#
# Отчет по бусту продаж
#
# @param GenerateBoostConsolidatedRequest $generate_boost_consolidated_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_boost_consolidated_request' => {
        data_type => 'GenerateBoostConsolidatedRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_boost_consolidated_report' } = {
        summary => 'Отчет по бусту продаж',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_boost_consolidated_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_boost_consolidated_request' is set
    unless (exists $args{'generate_boost_consolidated_request'}) {
      croak("Missing the required parameter 'generate_boost_consolidated_request' when calling generate_boost_consolidated_report");
    }

    # parse inputs
    my $_resource_path = '/reports/boost-consolidated/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_boost_consolidated_request'}) {
        $_body_data = $args{'generate_boost_consolidated_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_competitors_position_report
#
# Отчет «Конкурентная позиция»
#
# @param GenerateCompetitorsPositionReportRequest $generate_competitors_position_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_competitors_position_report_request' => {
        data_type => 'GenerateCompetitorsPositionReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_competitors_position_report' } = {
        summary => 'Отчет «Конкурентная позиция»',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_competitors_position_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_competitors_position_report_request' is set
    unless (exists $args{'generate_competitors_position_report_request'}) {
      croak("Missing the required parameter 'generate_competitors_position_report_request' when calling generate_competitors_position_report");
    }

    # parse inputs
    my $_resource_path = '/reports/competitors-position/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_competitors_position_report_request'}) {
        $_body_data = $args{'generate_competitors_position_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_goods_feedback_report
#
# Отчет по отзывам о товарах
#
# @param GenerateGoodsFeedbackRequest $generate_goods_feedback_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_goods_feedback_request' => {
        data_type => 'GenerateGoodsFeedbackRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_goods_feedback_report' } = {
        summary => 'Отчет по отзывам о товарах',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_goods_feedback_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_goods_feedback_request' is set
    unless (exists $args{'generate_goods_feedback_request'}) {
      croak("Missing the required parameter 'generate_goods_feedback_request' when calling generate_goods_feedback_report");
    }

    # parse inputs
    my $_resource_path = '/reports/goods-feedback/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_goods_feedback_request'}) {
        $_body_data = $args{'generate_goods_feedback_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_goods_movement_report
#
# Отчет по движению товаров
#
# @param GenerateGoodsMovementReportRequest $generate_goods_movement_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_goods_movement_report_request' => {
        data_type => 'GenerateGoodsMovementReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_goods_movement_report' } = {
        summary => 'Отчет по движению товаров',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_goods_movement_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_goods_movement_report_request' is set
    unless (exists $args{'generate_goods_movement_report_request'}) {
      croak("Missing the required parameter 'generate_goods_movement_report_request' when calling generate_goods_movement_report");
    }

    # parse inputs
    my $_resource_path = '/reports/goods-movement/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_goods_movement_report_request'}) {
        $_body_data = $args{'generate_goods_movement_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_goods_realization_report
#
# Отчет по реализации
#
# @param GenerateGoodsRealizationReportRequest $generate_goods_realization_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_goods_realization_report_request' => {
        data_type => 'GenerateGoodsRealizationReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_goods_realization_report' } = {
        summary => 'Отчет по реализации',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_goods_realization_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_goods_realization_report_request' is set
    unless (exists $args{'generate_goods_realization_report_request'}) {
      croak("Missing the required parameter 'generate_goods_realization_report_request' when calling generate_goods_realization_report");
    }

    # parse inputs
    my $_resource_path = '/reports/goods-realization/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_goods_realization_report_request'}) {
        $_body_data = $args{'generate_goods_realization_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_goods_turnover_report
#
# Отчет по оборачиваемости
#
# @param GenerateGoodsTurnoverRequest $generate_goods_turnover_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_goods_turnover_request' => {
        data_type => 'GenerateGoodsTurnoverRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_goods_turnover_report' } = {
        summary => 'Отчет по оборачиваемости',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_goods_turnover_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_goods_turnover_request' is set
    unless (exists $args{'generate_goods_turnover_request'}) {
      croak("Missing the required parameter 'generate_goods_turnover_request' when calling generate_goods_turnover_report");
    }

    # parse inputs
    my $_resource_path = '/reports/goods-turnover/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_goods_turnover_request'}) {
        $_body_data = $args{'generate_goods_turnover_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_mass_order_labels_report
#
# Готовые ярлыки‑наклейки на все коробки в нескольких заказах
#
# @param GenerateMassOrderLabelsRequest $generate_mass_order_labels_request  (required)
# @param PageFormatType $format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7. (optional)
{
    my $params = {
    'generate_mass_order_labels_request' => {
        data_type => 'GenerateMassOrderLabelsRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'PageFormatType',
        description => 'Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_mass_order_labels_report' } = {
        summary => 'Готовые ярлыки‑наклейки на все коробки в нескольких заказах',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_mass_order_labels_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_mass_order_labels_request' is set
    unless (exists $args{'generate_mass_order_labels_request'}) {
      croak("Missing the required parameter 'generate_mass_order_labels_request' when calling generate_mass_order_labels_report");
    }

    # parse inputs
    my $_resource_path = '/reports/documents/labels/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_mass_order_labels_request'}) {
        $_body_data = $args{'generate_mass_order_labels_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_prices_report
#
# Отчет «Цены на рынке»
#
# @param GeneratePricesReportRequest $generate_prices_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_prices_report_request' => {
        data_type => 'GeneratePricesReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_prices_report' } = {
        summary => 'Отчет «Цены на рынке»',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_prices_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_prices_report_request' is set
    unless (exists $args{'generate_prices_report_request'}) {
      croak("Missing the required parameter 'generate_prices_report_request' when calling generate_prices_report");
    }

    # parse inputs
    my $_resource_path = '/reports/prices/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_prices_report_request'}) {
        $_body_data = $args{'generate_prices_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_shelfs_statistics_report
#
# Отчет по полкам
#
# @param GenerateShelfsStatisticsRequest $generate_shelfs_statistics_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_shelfs_statistics_request' => {
        data_type => 'GenerateShelfsStatisticsRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_shelfs_statistics_report' } = {
        summary => 'Отчет по полкам',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_shelfs_statistics_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_shelfs_statistics_request' is set
    unless (exists $args{'generate_shelfs_statistics_request'}) {
      croak("Missing the required parameter 'generate_shelfs_statistics_request' when calling generate_shelfs_statistics_report");
    }

    # parse inputs
    my $_resource_path = '/reports/shelf-statistics/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_shelfs_statistics_request'}) {
        $_body_data = $args{'generate_shelfs_statistics_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_shipment_list_document_report
#
# Получение листа сборки
#
# @param GenerateShipmentListDocumentReportRequest $generate_shipment_list_document_report_request  (required)
{
    my $params = {
    'generate_shipment_list_document_report_request' => {
        data_type => 'GenerateShipmentListDocumentReportRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_shipment_list_document_report' } = {
        summary => 'Получение листа сборки',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_shipment_list_document_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_shipment_list_document_report_request' is set
    unless (exists $args{'generate_shipment_list_document_report_request'}) {
      croak("Missing the required parameter 'generate_shipment_list_document_report_request' when calling generate_shipment_list_document_report");
    }

    # parse inputs
    my $_resource_path = '/reports/documents/shipment-list/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'generate_shipment_list_document_report_request'}) {
        $_body_data = $args{'generate_shipment_list_document_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_shows_sales_report
#
# Отчет «Аналитика продаж»
#
# @param GenerateShowsSalesReportRequest $generate_shows_sales_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_shows_sales_report_request' => {
        data_type => 'GenerateShowsSalesReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_shows_sales_report' } = {
        summary => 'Отчет «Аналитика продаж»',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_shows_sales_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_shows_sales_report_request' is set
    unless (exists $args{'generate_shows_sales_report_request'}) {
      croak("Missing the required parameter 'generate_shows_sales_report_request' when calling generate_shows_sales_report");
    }

    # parse inputs
    my $_resource_path = '/reports/shows-sales/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_shows_sales_report_request'}) {
        $_body_data = $args{'generate_shows_sales_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_stocks_on_warehouses_report
#
# Отчет по остаткам на складах
#
# @param GenerateStocksOnWarehousesReportRequest $generate_stocks_on_warehouses_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_stocks_on_warehouses_report_request' => {
        data_type => 'GenerateStocksOnWarehousesReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_stocks_on_warehouses_report' } = {
        summary => 'Отчет по остаткам на складах',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_stocks_on_warehouses_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_stocks_on_warehouses_report_request' is set
    unless (exists $args{'generate_stocks_on_warehouses_report_request'}) {
      croak("Missing the required parameter 'generate_stocks_on_warehouses_report_request' when calling generate_stocks_on_warehouses_report");
    }

    # parse inputs
    my $_resource_path = '/reports/stocks-on-warehouses/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_stocks_on_warehouses_report_request'}) {
        $_body_data = $args{'generate_stocks_on_warehouses_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_united_marketplace_services_report
#
# Отчет по стоимости услуг
#
# @param GenerateUnitedMarketplaceServicesReportRequest $generate_united_marketplace_services_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_united_marketplace_services_report_request' => {
        data_type => 'GenerateUnitedMarketplaceServicesReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_united_marketplace_services_report' } = {
        summary => 'Отчет по стоимости услуг',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_united_marketplace_services_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_united_marketplace_services_report_request' is set
    unless (exists $args{'generate_united_marketplace_services_report_request'}) {
      croak("Missing the required parameter 'generate_united_marketplace_services_report_request' when calling generate_united_marketplace_services_report");
    }

    # parse inputs
    my $_resource_path = '/reports/united-marketplace-services/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_united_marketplace_services_report_request'}) {
        $_body_data = $args{'generate_united_marketplace_services_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_united_netting_report
#
# Отчет по платежам
#
# @param GenerateUnitedNettingReportRequest $generate_united_netting_report_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_united_netting_report_request' => {
        data_type => 'GenerateUnitedNettingReportRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_united_netting_report' } = {
        summary => 'Отчет по платежам',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_united_netting_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_united_netting_report_request' is set
    unless (exists $args{'generate_united_netting_report_request'}) {
      croak("Missing the required parameter 'generate_united_netting_report_request' when calling generate_united_netting_report");
    }

    # parse inputs
    my $_resource_path = '/reports/united-netting/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_united_netting_report_request'}) {
        $_body_data = $args{'generate_united_netting_report_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# generate_united_orders_report
#
# Отчет по заказам
#
# @param GenerateUnitedOrdersRequest $generate_united_orders_request  (required)
# @param ReportFormatType $format Формат отчета. (optional)
{
    my $params = {
    'generate_united_orders_request' => {
        data_type => 'GenerateUnitedOrdersRequest',
        description => '',
        required => '1',
    },
    'format' => {
        data_type => 'ReportFormatType',
        description => 'Формат отчета.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_united_orders_report' } = {
        summary => 'Отчет по заказам',
        params => $params,
        returns => 'GenerateReportResponse',
        };
}
# @return GenerateReportResponse
#
sub generate_united_orders_report {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_united_orders_request' is set
    unless (exists $args{'generate_united_orders_request'}) {
      croak("Missing the required parameter 'generate_united_orders_request' when calling generate_united_orders_report");
    }

    # parse inputs
    my $_resource_path = '/reports/united-orders/generate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_united_orders_request'}) {
        $_body_data = $args{'generate_united_orders_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateReportResponse', $response);
    return $_response_object;
}

#
# get_report_info
#
# Получение заданного отчета
#
# @param string $report_id Идентификатор отчета, который вы получили после запуска генерации.  (required)
{
    my $params = {
    'report_id' => {
        data_type => 'string',
        description => 'Идентификатор отчета, который вы получили после запуска генерации. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_report_info' } = {
        summary => 'Получение заданного отчета',
        params => $params,
        returns => 'GetReportInfoResponse',
        };
}
# @return GetReportInfoResponse
#
sub get_report_info {
    my ($self, %args) = @_;

    # verify the required parameter 'report_id' is set
    unless (exists $args{'report_id'}) {
      croak("Missing the required parameter 'report_id' when calling get_report_info");
    }

    # parse inputs
    my $_resource_path = '/reports/info/{reportId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'report_id'}) {
        my $_base_variable = "{" . "reportId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'report_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetReportInfoResponse', $response);
    return $_response_object;
}

1;
