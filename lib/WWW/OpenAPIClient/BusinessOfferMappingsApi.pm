=begin comment

Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::BusinessOfferMappingsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# add_offers_to_archive
#
# Добавление товаров в архив
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param AddOffersToArchiveRequest $add_offers_to_archive_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'add_offers_to_archive_request' => {
        data_type => 'AddOffersToArchiveRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_offers_to_archive' } = {
        summary => 'Добавление товаров в архив',
        params => $params,
        returns => 'AddOffersToArchiveResponse',
        };
}
# @return AddOffersToArchiveResponse
#
sub add_offers_to_archive {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling add_offers_to_archive");
    }

    # verify the required parameter 'add_offers_to_archive_request' is set
    unless (exists $args{'add_offers_to_archive_request'}) {
      croak("Missing the required parameter 'add_offers_to_archive_request' when calling add_offers_to_archive");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings/archive';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'add_offers_to_archive_request'}) {
        $_body_data = $args{'add_offers_to_archive_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AddOffersToArchiveResponse', $response);
    return $_response_object;
}

#
# delete_offers
#
# Удаление товаров из каталога
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param DeleteOffersRequest $delete_offers_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'delete_offers_request' => {
        data_type => 'DeleteOffersRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_offers' } = {
        summary => 'Удаление товаров из каталога',
        params => $params,
        returns => 'DeleteOffersResponse',
        };
}
# @return DeleteOffersResponse
#
sub delete_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling delete_offers");
    }

    # verify the required parameter 'delete_offers_request' is set
    unless (exists $args{'delete_offers_request'}) {
      croak("Missing the required parameter 'delete_offers_request' when calling delete_offers");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_offers_request'}) {
        $_body_data = $args{'delete_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeleteOffersResponse', $response);
    return $_response_object;
}

#
# delete_offers_from_archive
#
# Удаление товаров из архива
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param DeleteOffersFromArchiveRequest $delete_offers_from_archive_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'delete_offers_from_archive_request' => {
        data_type => 'DeleteOffersFromArchiveRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_offers_from_archive' } = {
        summary => 'Удаление товаров из архива',
        params => $params,
        returns => 'DeleteOffersFromArchiveResponse',
        };
}
# @return DeleteOffersFromArchiveResponse
#
sub delete_offers_from_archive {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling delete_offers_from_archive");
    }

    # verify the required parameter 'delete_offers_from_archive_request' is set
    unless (exists $args{'delete_offers_from_archive_request'}) {
      croak("Missing the required parameter 'delete_offers_from_archive_request' when calling delete_offers_from_archive");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings/unarchive';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_offers_from_archive_request'}) {
        $_body_data = $args{'delete_offers_from_archive_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeleteOffersFromArchiveResponse', $response);
    return $_response_object;
}

#
# get_offer_mappings
#
# Информация о товарах в каталоге
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
# @param GetOfferMappingsRequest $get_offer_mappings_request  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    'get_offer_mappings_request' => {
        data_type => 'GetOfferMappingsRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_offer_mappings' } = {
        summary => 'Информация о товарах в каталоге',
        params => $params,
        returns => 'GetOfferMappingsResponse',
        };
}
# @return GetOfferMappingsResponse
#
sub get_offer_mappings {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_offer_mappings");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_offer_mappings_request'}) {
        $_body_data = $args{'get_offer_mappings_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOfferMappingsResponse', $response);
    return $_response_object;
}

#
# get_suggested_offer_mappings
#
# Просмотр карточек на Маркете, которые подходят вашим товарам
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetSuggestedOfferMappingsRequest $get_suggested_offer_mappings_request  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_suggested_offer_mappings_request' => {
        data_type => 'GetSuggestedOfferMappingsRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_suggested_offer_mappings' } = {
        summary => 'Просмотр карточек на Маркете, которые подходят вашим товарам',
        params => $params,
        returns => 'GetSuggestedOfferMappingsResponse',
        };
}
# @return GetSuggestedOfferMappingsResponse
#
sub get_suggested_offer_mappings {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_suggested_offer_mappings");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings/suggestions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_suggested_offer_mappings_request'}) {
        $_body_data = $args{'get_suggested_offer_mappings_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSuggestedOfferMappingsResponse', $response);
    return $_response_object;
}

#
# update_offer_mappings
#
# Добавление товаров в каталог и изменение информации о них
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdateOfferMappingsRequest $update_offer_mappings_request  (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_offer_mappings_request' => {
        data_type => 'UpdateOfferMappingsRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_offer_mappings' } = {
        summary => 'Добавление товаров в каталог и изменение информации о них',
        params => $params,
        returns => 'UpdateOfferMappingsResponse',
        };
}
# @return UpdateOfferMappingsResponse
#
sub update_offer_mappings {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling update_offer_mappings");
    }

    # verify the required parameter 'update_offer_mappings_request' is set
    unless (exists $args{'update_offer_mappings_request'}) {
      croak("Missing the required parameter 'update_offer_mappings_request' when calling update_offer_mappings");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offer-mappings/update';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_offer_mappings_request'}) {
        $_body_data = $args{'update_offer_mappings_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdateOfferMappingsResponse', $response);
    return $_response_object;
}

1;
