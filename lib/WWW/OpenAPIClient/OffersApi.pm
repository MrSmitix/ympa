=begin comment

Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::OffersApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# delete_campaign_offers
#
# Удаление товаров из ассортимента магазина
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param DeleteCampaignOffersRequest $delete_campaign_offers_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'delete_campaign_offers_request' => {
        data_type => 'DeleteCampaignOffersRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_campaign_offers' } = {
        summary => 'Удаление товаров из ассортимента магазина',
        params => $params,
        returns => 'DeleteCampaignOffersResponse',
        };
}
# @return DeleteCampaignOffersResponse
#
sub delete_campaign_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling delete_campaign_offers");
    }

    # verify the required parameter 'delete_campaign_offers_request' is set
    unless (exists $args{'delete_campaign_offers_request'}) {
      croak("Missing the required parameter 'delete_campaign_offers_request' when calling delete_campaign_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_campaign_offers_request'}) {
        $_body_data = $args{'delete_campaign_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeleteCampaignOffersResponse', $response);
    return $_response_object;
}

#
# get_all_offers
#
# Все предложения магазина
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $feed_id Идентификатор прайс-листа. (optional)
# @param int $chunk Номер сегмента с результатами.  Значение по умолчанию: &#x60;0&#x60;.  {% note info %}  Номера сегментов запрашиваются последовательно, пока не будет получен сегмент с пустым ответом. Пустой ответ означает, что все предложения магазина получены.  {% endnote %}  {% note alert %}  Нумерация начинается с 0. Чтобы запросить первую страницу, необходимо указать &#x60;chunk&#x3D;0&#x60; и т. д.  {% endnote %}  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'feed_id' => {
        data_type => 'int',
        description => 'Идентификатор прайс-листа.',
        required => '0',
    },
    'chunk' => {
        data_type => 'int',
        description => 'Номер сегмента с результатами.  Значение по умолчанию: &#x60;0&#x60;.  {% note info %}  Номера сегментов запрашиваются последовательно, пока не будет получен сегмент с пустым ответом. Пустой ответ означает, что все предложения магазина получены.  {% endnote %}  {% note alert %}  Нумерация начинается с 0. Чтобы запросить первую страницу, необходимо указать &#x60;chunk&#x3D;0&#x60; и т. д.  {% endnote %} ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_offers' } = {
        summary => 'Все предложения магазина',
        params => $params,
        returns => 'GetAllOffersResponse',
        };
}
# @return GetAllOffersResponse
#
sub get_all_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_all_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers/all';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'feed_id'}) {
        $query_params->{'feedId'} = $self->{api_client}->to_query_value($args{'feed_id'});
    }

    # query params
    if ( exists $args{'chunk'}) {
        $query_params->{'chunk'} = $self->{api_client}->to_query_value($args{'chunk'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllOffersResponse', $response);
    return $_response_object;
}

#
# get_campaign_offers
#
# Информация о товарах, которые размещены в заданном магазине
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetCampaignOffersRequest $get_campaign_offers_request  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_campaign_offers_request' => {
        data_type => 'GetCampaignOffersRequest',
        description => '',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_campaign_offers' } = {
        summary => 'Информация о товарах, которые размещены в заданном магазине',
        params => $params,
        returns => 'GetCampaignOffersResponse',
        };
}
# @return GetCampaignOffersResponse
#
sub get_campaign_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_campaign_offers");
    }

    # verify the required parameter 'get_campaign_offers_request' is set
    unless (exists $args{'get_campaign_offers_request'}) {
      croak("Missing the required parameter 'get_campaign_offers_request' when calling get_campaign_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_campaign_offers_request'}) {
        $_body_data = $args{'get_campaign_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCampaignOffersResponse', $response);
    return $_response_object;
}

#
# get_offer_recommendations
#
# Рекомендации Маркета, касающиеся цен
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetOfferRecommendationsRequest $get_offer_recommendations_request  (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_offer_recommendations_request' => {
        data_type => 'GetOfferRecommendationsRequest',
        description => '',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_offer_recommendations' } = {
        summary => 'Рекомендации Маркета, касающиеся цен',
        params => $params,
        returns => 'GetOfferRecommendationsResponse',
        };
}
# @return GetOfferRecommendationsResponse
#
sub get_offer_recommendations {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_offer_recommendations");
    }

    # verify the required parameter 'get_offer_recommendations_request' is set
    unless (exists $args{'get_offer_recommendations_request'}) {
      croak("Missing the required parameter 'get_offer_recommendations_request' when calling get_offer_recommendations");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/offers/recommendations';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_offer_recommendations_request'}) {
        $_body_data = $args{'get_offer_recommendations_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOfferRecommendationsResponse', $response);
    return $_response_object;
}

#
# get_offers
#
# Предложения магазина
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param string $query Поисковый запрос.  Поддерживается язык запросов.  Значение по умолчанию: все предложения магазина, размещенные на Маркете.  (optional)
# @param int $feed_id Идентификатор прайс-листа. (optional)
# @param string $shop_category_id Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.  (optional)
# @param CurrencyType $currency Валюта, в которой указана цена предложения.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  (optional)
# @param boolean $matched Фильтр по признаку соотнесения предложения и карточки модели.  Возможные значения:  * &#x60;0 / FALSE / NO&#x60; — поиск выполняется среди предложений, не соотнесенных ни с какой карточкой модели.  * &#x60;1 / TRUE / YES&#x60; — поиск выполняется среди предложений, соотнесенных с карточками моделей).  (optional)
# @param int $page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
# @param int $page_size Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => 'Поисковый запрос.  Поддерживается язык запросов.  Значение по умолчанию: все предложения магазина, размещенные на Маркете. ',
        required => '0',
    },
    'feed_id' => {
        data_type => 'int',
        description => 'Идентификатор прайс-листа.',
        required => '0',
    },
    'shop_category_id' => {
        data_type => 'string',
        description => 'Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. ',
        required => '0',
    },
    'currency' => {
        data_type => 'CurrencyType',
        description => 'Валюта, в которой указана цена предложения.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна. ',
        required => '0',
    },
    'matched' => {
        data_type => 'boolean',
        description => 'Фильтр по признаку соотнесения предложения и карточки модели.  Возможные значения:  * &#x60;0 / FALSE / NO&#x60; — поиск выполняется среди предложений, не соотнесенных ни с какой карточкой модели.  * &#x60;1 / TRUE / YES&#x60; — поиск выполняется среди предложений, соотнесенных с карточками моделей). ',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_offers' } = {
        summary => 'Предложения магазина',
        params => $params,
        returns => 'GetOffersResponse',
        };
}
# @return GetOffersResponse
#
sub get_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling get_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'feed_id'}) {
        $query_params->{'feedId'} = $self->{api_client}->to_query_value($args{'feed_id'});
    }

    # query params
    if ( exists $args{'shop_category_id'}) {
        $query_params->{'shopCategoryId'} = $self->{api_client}->to_query_value($args{'shop_category_id'});
    }

    # query params
    if ( exists $args{'currency'}) {
        $query_params->{'currency'} = $self->{api_client}->to_query_value($args{'currency'});
    }

    # query params
    if ( exists $args{'matched'}) {
        $query_params->{'matched'} = $self->{api_client}->to_query_value($args{'matched'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOffersResponse', $response);
    return $_response_object;
}

#
# update_campaign_offers
#
# Изменение условий продажи товаров в магазине
#
# @param int $campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param UpdateCampaignOffersRequest $update_campaign_offers_request  (required)
{
    my $params = {
    'campaign_id' => {
        data_type => 'int',
        description => 'Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'update_campaign_offers_request' => {
        data_type => 'UpdateCampaignOffersRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_campaign_offers' } = {
        summary => 'Изменение условий продажи товаров в магазине',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub update_campaign_offers {
    my ($self, %args) = @_;

    # verify the required parameter 'campaign_id' is set
    unless (exists $args{'campaign_id'}) {
      croak("Missing the required parameter 'campaign_id' when calling update_campaign_offers");
    }

    # verify the required parameter 'update_campaign_offers_request' is set
    unless (exists $args{'update_campaign_offers_request'}) {
      croak("Missing the required parameter 'update_campaign_offers_request' when calling update_campaign_offers");
    }

    # parse inputs
    my $_resource_path = '/campaigns/{campaignId}/offers/update';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'campaign_id'}) {
        my $_base_variable = "{" . "campaignId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'campaign_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_campaign_offers_request'}) {
        $_body_data = $args{'update_campaign_offers_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

1;
