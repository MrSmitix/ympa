=begin comment

Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ChatsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_chat
#
# Создание нового чата с покупателем
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param CreateChatRequest $create_chat_request description (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'create_chat_request' => {
        data_type => 'CreateChatRequest',
        description => 'description',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_chat' } = {
        summary => 'Создание нового чата с покупателем',
        params => $params,
        returns => 'CreateChatResponse',
        };
}
# @return CreateChatResponse
#
sub create_chat {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling create_chat");
    }

    # verify the required parameter 'create_chat_request' is set
    unless (exists $args{'create_chat_request'}) {
      croak("Missing the required parameter 'create_chat_request' when calling create_chat");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/chats/new';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_chat_request'}) {
        $_body_data = $args{'create_chat_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CreateChatResponse', $response);
    return $_response_object;
}

#
# get_chat_history
#
# Получение истории сообщений в чате
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $chat_id Идентификатор чата. (required)
# @param GetChatHistoryRequest $get_chat_history_request description (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'chat_id' => {
        data_type => 'int',
        description => 'Идентификатор чата.',
        required => '1',
    },
    'get_chat_history_request' => {
        data_type => 'GetChatHistoryRequest',
        description => 'description',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_chat_history' } = {
        summary => 'Получение истории сообщений в чате',
        params => $params,
        returns => 'GetChatHistoryResponse',
        };
}
# @return GetChatHistoryResponse
#
sub get_chat_history {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_chat_history");
    }

    # verify the required parameter 'chat_id' is set
    unless (exists $args{'chat_id'}) {
      croak("Missing the required parameter 'chat_id' when calling get_chat_history");
    }

    # verify the required parameter 'get_chat_history_request' is set
    unless (exists $args{'get_chat_history_request'}) {
      croak("Missing the required parameter 'get_chat_history_request' when calling get_chat_history");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/chats/history';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'chat_id'}) {
        $query_params->{'chatId'} = $self->{api_client}->to_query_value($args{'chat_id'});
    }

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_chat_history_request'}) {
        $_body_data = $args{'get_chat_history_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetChatHistoryResponse', $response);
    return $_response_object;
}

#
# get_chats
#
# Получение доступных чатов
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param GetChatsRequest $get_chats_request description (required)
# @param string $page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
# @param int $limit Количество значений на одной странице.  (optional)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'get_chats_request' => {
        data_type => 'GetChatsRequest',
        description => 'description',
        required => '1',
    },
    'page_token' => {
        data_type => 'string',
        description => 'Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Количество значений на одной странице. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_chats' } = {
        summary => 'Получение доступных чатов',
        params => $params,
        returns => 'GetChatsResponse',
        };
}
# @return GetChatsResponse
#
sub get_chats {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling get_chats");
    }

    # verify the required parameter 'get_chats_request' is set
    unless (exists $args{'get_chats_request'}) {
      croak("Missing the required parameter 'get_chats_request' when calling get_chats");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/chats';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page_token'}) {
        $query_params->{'page_token'} = $self->{api_client}->to_query_value($args{'page_token'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_chats_request'}) {
        $_body_data = $args{'get_chats_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetChatsResponse', $response);
    return $_response_object;
}

#
# send_file_to_chat
#
# Отправка файла в чат
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $chat_id Идентификатор чата. (required)
# @param string $file Содержимое файла. Максимальный размер файла — 5 Мбайт. (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'chat_id' => {
        data_type => 'int',
        description => 'Идентификатор чата.',
        required => '1',
    },
    'file' => {
        data_type => 'string',
        description => 'Содержимое файла. Максимальный размер файла — 5 Мбайт.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_file_to_chat' } = {
        summary => 'Отправка файла в чат',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub send_file_to_chat {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling send_file_to_chat");
    }

    # verify the required parameter 'chat_id' is set
    unless (exists $args{'chat_id'}) {
      croak("Missing the required parameter 'chat_id' when calling send_file_to_chat");
    }

    # verify the required parameter 'file' is set
    unless (exists $args{'file'}) {
      croak("Missing the required parameter 'file' when calling send_file_to_chat");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/chats/file/send';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # query params
    if ( exists $args{'chat_id'}) {
        $query_params->{'chatId'} = $self->{api_client}->to_query_value($args{'chat_id'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

#
# send_message_to_chat
#
# Отправка сообщения в чат
#
# @param int $business_id Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
# @param int $chat_id Идентификатор чата. (required)
# @param SendMessageToChatRequest $send_message_to_chat_request description (required)
{
    my $params = {
    'business_id' => {
        data_type => 'int',
        description => 'Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ',
        required => '1',
    },
    'chat_id' => {
        data_type => 'int',
        description => 'Идентификатор чата.',
        required => '1',
    },
    'send_message_to_chat_request' => {
        data_type => 'SendMessageToChatRequest',
        description => 'description',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_message_to_chat' } = {
        summary => 'Отправка сообщения в чат',
        params => $params,
        returns => 'EmptyApiResponse',
        };
}
# @return EmptyApiResponse
#
sub send_message_to_chat {
    my ($self, %args) = @_;

    # verify the required parameter 'business_id' is set
    unless (exists $args{'business_id'}) {
      croak("Missing the required parameter 'business_id' when calling send_message_to_chat");
    }

    # verify the required parameter 'chat_id' is set
    unless (exists $args{'chat_id'}) {
      croak("Missing the required parameter 'chat_id' when calling send_message_to_chat");
    }

    # verify the required parameter 'send_message_to_chat_request' is set
    unless (exists $args{'send_message_to_chat_request'}) {
      croak("Missing the required parameter 'send_message_to_chat_request' when calling send_message_to_chat");
    }

    # parse inputs
    my $_resource_path = '/businesses/{businessId}/chats/message';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'chat_id'}) {
        $query_params->{'chatId'} = $self->{api_client}->to_query_value($args{'chat_id'});
    }

    # path params
    if ( exists $args{'business_id'}) {
        my $_base_variable = "{" . "businessId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'business_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'send_message_to_chat_request'}) {
        $_body_data = $args{'send_message_to_chat_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyApiResponse', $response);
    return $_response_object;
}

1;
