{-
   Партнерский API Маркета

   API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

   OpenAPI Version: 3.0.3
   Партнерский API Маркета API version: LATEST
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : ПартнерскийAPIМаркета.API.Offers
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module ПартнерскийAPIМаркета.API.Offers where

import ПартнерскийAPIМаркета.Core
import ПартнерскийAPIМаркета.MimeTypes
import ПартнерскийAPIМаркета.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Offers

-- *** deleteCampaignOffers

-- | @POST \/campaigns\/{campaignId}\/offers\/delete@
-- 
-- Удаление товаров из ассортимента магазина
-- 
-- Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteCampaignOffers
  :: (Consumes DeleteCampaignOffers MimeJSON, MimeRender MimeJSON DeleteCampaignOffersRequest)
  => DeleteCampaignOffersRequest -- ^ "deleteCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteCampaignOffers MimeJSON DeleteCampaignOffersResponse MimeJSON
deleteCampaignOffers deleteCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteCampaignOffersRequest

data DeleteCampaignOffers 
instance HasBodyParam DeleteCampaignOffers DeleteCampaignOffersRequest 

-- | @application/json@
instance Consumes DeleteCampaignOffers MimeJSON

-- | @application/json@
instance Produces DeleteCampaignOffers MimeJSON


-- *** getAllOffers

-- | @GET \/campaigns\/{campaignId}\/offers\/all@
-- 
-- Все предложения магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getAllOffers
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetAllOffers MimeNoContent GetAllOffersResponse MimeJSON
getAllOffers (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offers/all"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getAllOffers "" #-}

data GetAllOffers  

-- | /Optional Param/ "feedId" - Идентификатор прайс-листа.
instance HasOptionalParam GetAllOffers FeedId where
  applyOptionalParam req (FeedId xs) =
    req `addQuery` toQuery ("feedId", Just xs)

-- | /Optional Param/ "chunk" - Номер сегмента с результатами.  Значение по умолчанию: `0`.  {% note info %}  Номера сегментов запрашиваются последовательно, пока не будет получен сегмент с пустым ответом. Пустой ответ означает, что все предложения магазина получены.  {% endnote %}  {% note alert %}  Нумерация начинается с 0. Чтобы запросить первую страницу, необходимо указать `chunk=0` и т. д.  {% endnote %} 
instance HasOptionalParam GetAllOffers Chunk where
  applyOptionalParam req (Chunk xs) =
    req `addQuery` toQuery ("chunk", Just xs)
-- | @application/json@
instance Produces GetAllOffers MimeJSON


-- *** getCampaignOffers

-- | @POST \/campaigns\/{campaignId}\/offers@
-- 
-- Информация о товарах, которые размещены в заданном магазине
-- 
-- Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignOffers
  :: (Consumes GetCampaignOffers MimeJSON, MimeRender MimeJSON GetCampaignOffersRequest)
  => GetCampaignOffersRequest -- ^ "getCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignOffers MimeJSON GetCampaignOffersResponse MimeJSON
getCampaignOffers getCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getCampaignOffersRequest

data GetCampaignOffers 
instance HasBodyParam GetCampaignOffers GetCampaignOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetCampaignOffers PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetCampaignOffers Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetCampaignOffers MimeJSON

-- | @application/json@
instance Produces GetCampaignOffers MimeJSON


-- *** getOfferRecommendations

-- | @POST \/businesses\/{businessId}\/offers\/recommendations@
-- 
-- Рекомендации Маркета, касающиеся цен
-- 
-- Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferRecommendations
  :: (Consumes GetOfferRecommendations MimeJSON, MimeRender MimeJSON GetOfferRecommendationsRequest)
  => GetOfferRecommendationsRequest -- ^ "getOfferRecommendationsRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferRecommendations MimeJSON GetOfferRecommendationsResponse MimeJSON
getOfferRecommendations getOfferRecommendationsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offers/recommendations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getOfferRecommendationsRequest

data GetOfferRecommendations 
instance HasBodyParam GetOfferRecommendations GetOfferRecommendationsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferRecommendations PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferRecommendations Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOfferRecommendations MimeJSON

-- | @application/json@
instance Produces GetOfferRecommendations MimeJSON


-- *** getOffers

-- | @GET \/campaigns\/{campaignId}\/offers@
-- 
-- Предложения магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOffers
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOffers MimeNoContent GetOffersResponse MimeJSON
getOffers (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getOffers "" #-}

data GetOffers  

-- | /Optional Param/ "query" - Поисковый запрос.  Поддерживается язык запросов.  Значение по умолчанию: все предложения магазина, размещенные на Маркете. 
instance HasOptionalParam GetOffers Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "feedId" - Идентификатор прайс-листа.
instance HasOptionalParam GetOffers FeedId where
  applyOptionalParam req (FeedId xs) =
    req `addQuery` toQuery ("feedId", Just xs)

-- | /Optional Param/ "shopCategoryId" - Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
instance HasOptionalParam GetOffers ShopCategoryId where
  applyOptionalParam req (ShopCategoryId xs) =
    req `addQuery` toQuery ("shopCategoryId", Just xs)

-- | /Optional Param/ "currency" - Валюта, в которой указана цена предложения.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна. 
instance HasOptionalParam GetOffers Currency where
  applyOptionalParam req (Currency xs) =
    req `addQuery` toQuery ("currency", Just xs)

-- | /Optional Param/ "matched" - Фильтр по признаку соотнесения предложения и карточки модели.  Возможные значения:  * `0 / FALSE / NO` — поиск выполняется среди предложений, не соотнесенных ни с какой карточкой модели.  * `1 / TRUE / YES` — поиск выполняется среди предложений, соотнесенных с карточками моделей). 
instance HasOptionalParam GetOffers Matched where
  applyOptionalParam req (Matched xs) =
    req `addQuery` toQuery ("matched", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOffers Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOffers PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetOffers MimeJSON


-- *** updateCampaignOffers

-- | @POST \/campaigns\/{campaignId}\/offers\/update@
-- 
-- Изменение условий продажи товаров в магазине
-- 
-- Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateCampaignOffers
  :: (Consumes UpdateCampaignOffers MimeJSON, MimeRender MimeJSON UpdateCampaignOffersRequest)
  => UpdateCampaignOffersRequest -- ^ "updateCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateCampaignOffers MimeJSON EmptyApiResponse MimeJSON
updateCampaignOffers updateCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateCampaignOffersRequest

data UpdateCampaignOffers 
instance HasBodyParam UpdateCampaignOffers UpdateCampaignOffersRequest 

-- | @application/json@
instance Consumes UpdateCampaignOffers MimeJSON

-- | @application/json@
instance Produces UpdateCampaignOffers MimeJSON

