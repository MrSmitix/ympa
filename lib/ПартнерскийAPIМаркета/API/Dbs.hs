{-
   Партнерский API Маркета

   API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

   OpenAPI Version: 3.0.3
   Партнерский API Маркета API version: LATEST
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : ПартнерскийAPIМаркета.API.Dbs
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module ПартнерскийAPIМаркета.API.Dbs where

import ПартнерскийAPIМаркета.Core
import ПартнерскийAPIМаркета.MimeTypes
import ПартнерскийAPIМаркета.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Dbs

-- *** acceptOrderCancellation0

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/cancellation\/accept@
-- 
-- Отмена заказа покупателем
-- 
-- Подтверждает или отклоняет запрос покупателя на отмену заказа, который передан службе доставки.  Покупатель может отменить заказ в течение его обработки или доставки. Если заказ еще обрабатывается (имеет статус PROCESSING), вам не нужно подтверждать отмену заказа — он будет отменен автоматически.  Если заказ уже передан службе доставки (принимает статус `DELIVERY` или `PICKUP`) и пользователь отменил его, вы можете предупредить службу об отмене в течение 48 часов. Если служба доставки узнала об отмене до передачи заказа покупателю, подтвердите отмену с помощью запроса [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation.md). Если заказ уже доставлен, отклоните отмену с помощью этого же запроса. Тогда у покупателя останется заказ, и деньги за него возвращаться не будут.  Чтобы узнать, какие заказы были отменены в статусе `DELIVERY` или `PICKUP`, отправьте запрос [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md). В его URL добавьте входной параметр `onlyWaitingForCancellationApprove=true`. Вы также можете узнать об отмененных заказах в кабинете или через почту — на нее придет уведомление об отмене.  Если в течение 48 часов вы не подтвердите или отклоните отмену, заказ будет отменен автоматически.  |**⚙️ Лимит:** 500 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
acceptOrderCancellation0
  :: (Consumes AcceptOrderCancellation0 MimeJSON, MimeRender MimeJSON AcceptOrderCancellationRequest)
  => AcceptOrderCancellationRequest -- ^ "acceptOrderCancellationRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest AcceptOrderCancellation0 MimeJSON EmptyApiResponse MimeJSON
acceptOrderCancellation0 acceptOrderCancellationRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/cancellation/accept"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` acceptOrderCancellationRequest

data AcceptOrderCancellation0 
instance HasBodyParam AcceptOrderCancellation0 AcceptOrderCancellationRequest 

-- | @application/json@
instance Consumes AcceptOrderCancellation0 MimeJSON

-- | @application/json@
instance Produces AcceptOrderCancellation0 MimeJSON


-- *** addHiddenOffers2

-- | @POST \/campaigns\/{campaignId}\/hidden-offers@
-- 
-- Скрытие товаров и настройки скрытия
-- 
-- Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
addHiddenOffers2
  :: (Consumes AddHiddenOffers2 MimeJSON, MimeRender MimeJSON AddHiddenOffersRequest)
  => AddHiddenOffersRequest -- ^ "addHiddenOffersRequest" -  Запрос на скрытие оферов.
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest AddHiddenOffers2 MimeJSON EmptyApiResponse MimeJSON
addHiddenOffers2 addHiddenOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/hidden-offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` addHiddenOffersRequest

data AddHiddenOffers2 

-- | /Body Param/ "AddHiddenOffersRequest" - Запрос на скрытие оферов.
instance HasBodyParam AddHiddenOffers2 AddHiddenOffersRequest 

-- | @application/json@
instance Consumes AddHiddenOffers2 MimeJSON

-- | @application/json@
instance Produces AddHiddenOffers2 MimeJSON


-- *** addOffersToArchive0

-- | @POST \/businesses\/{businessId}\/offer-mappings\/archive@
-- 
-- Добавление товаров в архив
-- 
-- Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
addOffersToArchive0
  :: (Consumes AddOffersToArchive0 MimeJSON, MimeRender MimeJSON AddOffersToArchiveRequest)
  => AddOffersToArchiveRequest -- ^ "addOffersToArchiveRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest AddOffersToArchive0 MimeJSON AddOffersToArchiveResponse MimeJSON
addOffersToArchive0 addOffersToArchiveRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/archive"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` addOffersToArchiveRequest

data AddOffersToArchive0 
instance HasBodyParam AddOffersToArchive0 AddOffersToArchiveRequest 

-- | @application/json@
instance Consumes AddOffersToArchive0 MimeJSON

-- | @application/json@
instance Produces AddOffersToArchive0 MimeJSON


-- *** calculateTariffs2

-- | @POST \/tariffs\/calculate@
-- 
-- Калькулятор стоимости услуг
-- 
-- Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
calculateTariffs2
  :: (Consumes CalculateTariffs2 MimeJSON, MimeRender MimeJSON CalculateTariffsRequest)
  => CalculateTariffsRequest -- ^ "calculateTariffsRequest"
  -> ПартнерскийAPIМаркетаRequest CalculateTariffs2 MimeJSON CalculateTariffsResponse MimeJSON
calculateTariffs2 calculateTariffsRequest =
  _mkRequest "POST" ["/tariffs/calculate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` calculateTariffsRequest

data CalculateTariffs2 
instance HasBodyParam CalculateTariffs2 CalculateTariffsRequest 

-- | @application/json@
instance Consumes CalculateTariffs2 MimeJSON

-- | @application/json@
instance Produces CalculateTariffs2 MimeJSON


-- *** confirmBusinessPrices0

-- | @POST \/businesses\/{businessId}\/price-quarantine\/confirm@
-- 
-- Удаление товара из карантина по цене в кабинете
-- 
-- Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
confirmBusinessPrices0
  :: (Consumes ConfirmBusinessPrices0 MimeJSON, MimeRender MimeJSON ConfirmPricesRequest)
  => ConfirmPricesRequest -- ^ "confirmPricesRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest ConfirmBusinessPrices0 MimeJSON EmptyApiResponse MimeJSON
confirmBusinessPrices0 confirmPricesRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/price-quarantine/confirm"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` confirmPricesRequest

data ConfirmBusinessPrices0 
instance HasBodyParam ConfirmBusinessPrices0 ConfirmPricesRequest 

-- | @application/json@
instance Consumes ConfirmBusinessPrices0 MimeJSON

-- | @application/json@
instance Produces ConfirmBusinessPrices0 MimeJSON


-- *** confirmCampaignPrices0

-- | @POST \/campaigns\/{campaignId}\/price-quarantine\/confirm@
-- 
-- Удаление товара из карантина по цене в магазине
-- 
-- Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
confirmCampaignPrices0
  :: (Consumes ConfirmCampaignPrices0 MimeJSON, MimeRender MimeJSON ConfirmPricesRequest)
  => ConfirmPricesRequest -- ^ "confirmPricesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest ConfirmCampaignPrices0 MimeJSON EmptyApiResponse MimeJSON
confirmCampaignPrices0 confirmPricesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/price-quarantine/confirm"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` confirmPricesRequest

data ConfirmCampaignPrices0 
instance HasBodyParam ConfirmCampaignPrices0 ConfirmPricesRequest 

-- | @application/json@
instance Consumes ConfirmCampaignPrices0 MimeJSON

-- | @application/json@
instance Produces ConfirmCampaignPrices0 MimeJSON


-- *** createChat0

-- | @POST \/businesses\/{businessId}\/chats\/new@
-- 
-- Создание нового чата с покупателем
-- 
-- Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
createChat0
  :: (Consumes CreateChat0 MimeJSON, MimeRender MimeJSON CreateChatRequest)
  => CreateChatRequest -- ^ "createChatRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest CreateChat0 MimeJSON CreateChatResponse MimeJSON
createChat0 createChatRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/new"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` createChatRequest

data CreateChat0 

-- | /Body Param/ "CreateChatRequest" - description
instance HasBodyParam CreateChat0 CreateChatRequest 

-- | @application/json@
instance Consumes CreateChat0 MimeJSON

-- | @application/json@
instance Produces CreateChat0 MimeJSON


-- *** createOutlet0

-- | @POST \/campaigns\/{campaignId}\/outlets@
-- 
-- Создание точки продаж
-- 
-- Создает точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
createOutlet0
  :: (Consumes CreateOutlet0 MimeJSON, MimeRender MimeJSON ChangeOutletRequest)
  => ChangeOutletRequest -- ^ "changeOutletRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest CreateOutlet0 MimeJSON CreateOutletResponse MimeJSON
createOutlet0 changeOutletRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/outlets"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` changeOutletRequest

data CreateOutlet0 
instance HasBodyParam CreateOutlet0 ChangeOutletRequest 

-- | @application/json@
instance Consumes CreateOutlet0 MimeJSON

-- | @application/json@
instance Produces CreateOutlet0 MimeJSON


-- *** deleteCampaignOffers0

-- | @POST \/campaigns\/{campaignId}\/offers\/delete@
-- 
-- Удаление товаров из ассортимента магазина
-- 
-- Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteCampaignOffers0
  :: (Consumes DeleteCampaignOffers0 MimeJSON, MimeRender MimeJSON DeleteCampaignOffersRequest)
  => DeleteCampaignOffersRequest -- ^ "deleteCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteCampaignOffers0 MimeJSON DeleteCampaignOffersResponse MimeJSON
deleteCampaignOffers0 deleteCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteCampaignOffersRequest

data DeleteCampaignOffers0 
instance HasBodyParam DeleteCampaignOffers0 DeleteCampaignOffersRequest 

-- | @application/json@
instance Consumes DeleteCampaignOffers0 MimeJSON

-- | @application/json@
instance Produces DeleteCampaignOffers0 MimeJSON


-- *** deleteGoodsFeedbackComment2

-- | @POST \/businesses\/{businessId}\/goods-feedback\/comments\/delete@
-- 
-- Удаление комментария к отзыву
-- 
-- Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteGoodsFeedbackComment2
  :: (Consumes DeleteGoodsFeedbackComment2 MimeJSON, MimeRender MimeJSON DeleteGoodsFeedbackCommentRequest)
  => DeleteGoodsFeedbackCommentRequest -- ^ "deleteGoodsFeedbackCommentRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteGoodsFeedbackComment2 MimeJSON EmptyApiResponse MimeJSON
deleteGoodsFeedbackComment2 deleteGoodsFeedbackCommentRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/comments/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteGoodsFeedbackCommentRequest

data DeleteGoodsFeedbackComment2 
instance HasBodyParam DeleteGoodsFeedbackComment2 DeleteGoodsFeedbackCommentRequest 

-- | @application/json@
instance Consumes DeleteGoodsFeedbackComment2 MimeJSON

-- | @application/json@
instance Produces DeleteGoodsFeedbackComment2 MimeJSON


-- *** deleteHiddenOffers2

-- | @POST \/campaigns\/{campaignId}\/hidden-offers\/delete@
-- 
-- Возобновление показа товаров
-- 
-- Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteHiddenOffers2
  :: (Consumes DeleteHiddenOffers2 MimeJSON, MimeRender MimeJSON DeleteHiddenOffersRequest)
  => DeleteHiddenOffersRequest -- ^ "deleteHiddenOffersRequest" -  Запрос на возобновление показа оферов.
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteHiddenOffers2 MimeJSON EmptyApiResponse MimeJSON
deleteHiddenOffers2 deleteHiddenOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/hidden-offers/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteHiddenOffersRequest

data DeleteHiddenOffers2 

-- | /Body Param/ "DeleteHiddenOffersRequest" - Запрос на возобновление показа оферов.
instance HasBodyParam DeleteHiddenOffers2 DeleteHiddenOffersRequest 

-- | @application/json@
instance Consumes DeleteHiddenOffers2 MimeJSON

-- | @application/json@
instance Produces DeleteHiddenOffers2 MimeJSON


-- *** deleteOffers0

-- | @POST \/businesses\/{businessId}\/offer-mappings\/delete@
-- 
-- Удаление товаров из каталога
-- 
-- Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteOffers0
  :: (Consumes DeleteOffers0 MimeJSON, MimeRender MimeJSON DeleteOffersRequest)
  => DeleteOffersRequest -- ^ "deleteOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteOffers0 MimeJSON DeleteOffersResponse MimeJSON
deleteOffers0 deleteOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteOffersRequest

data DeleteOffers0 
instance HasBodyParam DeleteOffers0 DeleteOffersRequest 

-- | @application/json@
instance Consumes DeleteOffers0 MimeJSON

-- | @application/json@
instance Produces DeleteOffers0 MimeJSON


-- *** deleteOffersFromArchive0

-- | @POST \/businesses\/{businessId}\/offer-mappings\/unarchive@
-- 
-- Удаление товаров из архива
-- 
-- Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteOffersFromArchive0
  :: (Consumes DeleteOffersFromArchive0 MimeJSON, MimeRender MimeJSON DeleteOffersFromArchiveRequest)
  => DeleteOffersFromArchiveRequest -- ^ "deleteOffersFromArchiveRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteOffersFromArchive0 MimeJSON DeleteOffersFromArchiveResponse MimeJSON
deleteOffersFromArchive0 deleteOffersFromArchiveRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/unarchive"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteOffersFromArchiveRequest

data DeleteOffersFromArchive0 
instance HasBodyParam DeleteOffersFromArchive0 DeleteOffersFromArchiveRequest 

-- | @application/json@
instance Consumes DeleteOffersFromArchive0 MimeJSON

-- | @application/json@
instance Produces DeleteOffersFromArchive0 MimeJSON


-- *** deleteOutlet0

-- | @DELETE \/campaigns\/{campaignId}\/outlets\/{outletId}@
-- 
-- Удаление точки продаж
-- 
-- Удаляет точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteOutlet0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OutletId -- ^ "outletId" -  Идентификатор точки продаж.
  -> ПартнерскийAPIМаркетаRequest DeleteOutlet0 MimeNoContent EmptyApiResponse MimeJSON
deleteOutlet0 (CampaignId campaignId) (OutletId outletId) =
  _mkRequest "DELETE" ["/campaigns/",toPath campaignId,"/outlets/",toPath outletId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data DeleteOutlet0  
-- | @application/json@
instance Produces DeleteOutlet0 MimeJSON


-- *** deleteOutletLicenses0

-- | @DELETE \/campaigns\/{campaignId}\/outlets\/licenses@
-- 
-- Удаление лицензий для точек продаж
-- 
-- Удаляет информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteOutletLicenses0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteOutletLicenses0 MimeNoContent EmptyApiResponse MimeJSON
deleteOutletLicenses0 (CampaignId campaignId) =
  _mkRequest "DELETE" ["/campaigns/",toPath campaignId,"/outlets/licenses"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data DeleteOutletLicenses0  

-- | /Optional Param/ "ids" - Список идентификаторов лицензий.
instance HasOptionalParam DeleteOutletLicenses0 Ids where
  applyOptionalParam req (Ids xs) =
    req `addQuery` toQueryColl CommaSeparated ("ids", Just xs)
-- | @application/json@
instance Produces DeleteOutletLicenses0 MimeJSON


-- *** deletePromoOffers2

-- | @POST \/businesses\/{businessId}\/promos\/offers\/delete@
-- 
-- Удаление товаров из акции
-- 
-- Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deletePromoOffers2
  :: (Consumes DeletePromoOffers2 MimeJSON, MimeRender MimeJSON DeletePromoOffersRequest)
  => DeletePromoOffersRequest -- ^ "deletePromoOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeletePromoOffers2 MimeJSON DeletePromoOffersResponse MimeJSON
deletePromoOffers2 deletePromoOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos/offers/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deletePromoOffersRequest

data DeletePromoOffers2 
instance HasBodyParam DeletePromoOffers2 DeletePromoOffersRequest 

-- | @application/json@
instance Consumes DeletePromoOffers2 MimeJSON

-- | @application/json@
instance Produces DeletePromoOffers2 MimeJSON


-- *** generateBoostConsolidatedReport2

-- | @POST \/reports\/boost-consolidated\/generate@
-- 
-- Отчет по бусту продаж
-- 
-- Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateBoostConsolidatedReport2
  :: (Consumes GenerateBoostConsolidatedReport2 MimeJSON, MimeRender MimeJSON GenerateBoostConsolidatedRequest)
  => GenerateBoostConsolidatedRequest -- ^ "generateBoostConsolidatedRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateBoostConsolidatedReport2 MimeJSON GenerateReportResponse MimeJSON
generateBoostConsolidatedReport2 generateBoostConsolidatedRequest =
  _mkRequest "POST" ["/reports/boost-consolidated/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateBoostConsolidatedRequest

data GenerateBoostConsolidatedReport2 
instance HasBodyParam GenerateBoostConsolidatedReport2 GenerateBoostConsolidatedRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateBoostConsolidatedReport2 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateBoostConsolidatedReport2 MimeJSON

-- | @application/json@
instance Produces GenerateBoostConsolidatedReport2 MimeJSON


-- *** generateCompetitorsPositionReport1

-- | @POST \/reports\/competitors-position\/generate@
-- 
-- Отчет «Конкурентная позиция»
-- 
-- Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateCompetitorsPositionReport1
  :: (Consumes GenerateCompetitorsPositionReport1 MimeJSON, MimeRender MimeJSON GenerateCompetitorsPositionReportRequest)
  => GenerateCompetitorsPositionReportRequest -- ^ "generateCompetitorsPositionReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateCompetitorsPositionReport1 MimeJSON GenerateReportResponse MimeJSON
generateCompetitorsPositionReport1 generateCompetitorsPositionReportRequest =
  _mkRequest "POST" ["/reports/competitors-position/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateCompetitorsPositionReportRequest

data GenerateCompetitorsPositionReport1 
instance HasBodyParam GenerateCompetitorsPositionReport1 GenerateCompetitorsPositionReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateCompetitorsPositionReport1 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateCompetitorsPositionReport1 MimeJSON

-- | @application/json@
instance Produces GenerateCompetitorsPositionReport1 MimeJSON


-- *** generateGoodsFeedbackReport2

-- | @POST \/reports\/goods-feedback\/generate@
-- 
-- Отчет по отзывам о товарах
-- 
-- Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateGoodsFeedbackReport2
  :: (Consumes GenerateGoodsFeedbackReport2 MimeJSON, MimeRender MimeJSON GenerateGoodsFeedbackRequest)
  => GenerateGoodsFeedbackRequest -- ^ "generateGoodsFeedbackRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateGoodsFeedbackReport2 MimeJSON GenerateReportResponse MimeJSON
generateGoodsFeedbackReport2 generateGoodsFeedbackRequest =
  _mkRequest "POST" ["/reports/goods-feedback/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateGoodsFeedbackRequest

data GenerateGoodsFeedbackReport2 
instance HasBodyParam GenerateGoodsFeedbackReport2 GenerateGoodsFeedbackRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateGoodsFeedbackReport2 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateGoodsFeedbackReport2 MimeJSON

-- | @application/json@
instance Produces GenerateGoodsFeedbackReport2 MimeJSON


-- *** generateMassOrderLabelsReport1

-- | @POST \/reports\/documents\/labels\/generate@
-- 
-- Готовые ярлыки‑наклейки на все коробки в нескольких заказах
-- 
-- Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateMassOrderLabelsReport1
  :: (Consumes GenerateMassOrderLabelsReport1 MimeJSON, MimeRender MimeJSON GenerateMassOrderLabelsRequest)
  => GenerateMassOrderLabelsRequest -- ^ "generateMassOrderLabelsRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateMassOrderLabelsReport1 MimeJSON GenerateReportResponse MimeJSON
generateMassOrderLabelsReport1 generateMassOrderLabelsRequest =
  _mkRequest "POST" ["/reports/documents/labels/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateMassOrderLabelsRequest

data GenerateMassOrderLabelsReport1 
instance HasBodyParam GenerateMassOrderLabelsReport1 GenerateMassOrderLabelsRequest 

-- | /Optional Param/ "format" - Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.
instance HasOptionalParam GenerateMassOrderLabelsReport1 Format where
  applyOptionalParam req (Format xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateMassOrderLabelsReport1 MimeJSON

-- | @application/json@
instance Produces GenerateMassOrderLabelsReport1 MimeJSON


-- *** generateOrderLabel1

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/delivery\/shipments\/{shipmentId}\/boxes\/{boxId}\/label@
-- 
-- Готовый ярлык‑наклейка для коробки в заказе
-- 
-- Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateOrderLabel1
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор грузоместа.
  -> BoxId -- ^ "boxId" -  Идентификатор коробки.
  -> ПартнерскийAPIМаркетаRequest GenerateOrderLabel1 MimeNoContent FilePath accept
generateOrderLabel1  _ (CampaignId campaignId) (OrderId orderId) (ShipmentId shipmentId) (BoxId boxId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/delivery/shipments/",toPath shipmentId,"/boxes/",toPath boxId,"/label"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GenerateOrderLabel1  

-- | /Optional Param/ "format" - Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.
instance HasOptionalParam GenerateOrderLabel1 Format where
  applyOptionalParam req (Format xs) =
    req `addQuery` toQuery ("format", Just xs)
-- | @application/pdf@
instance Produces GenerateOrderLabel1 MimePdf
-- | @application/json@
instance Produces GenerateOrderLabel1 MimeJSON


-- *** generateOrderLabels1

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/delivery\/labels@
-- 
-- Готовые ярлыки‑наклейки на все коробки в одном заказе
-- 
-- Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateOrderLabels1
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GenerateOrderLabels1 MimeNoContent FilePath accept
generateOrderLabels1  _ (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/delivery/labels"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GenerateOrderLabels1  

-- | /Optional Param/ "format" - Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.
instance HasOptionalParam GenerateOrderLabels1 Format where
  applyOptionalParam req (Format xs) =
    req `addQuery` toQuery ("format", Just xs)
-- | @application/pdf@
instance Produces GenerateOrderLabels1 MimePdf
-- | @application/json@
instance Produces GenerateOrderLabels1 MimeJSON


-- *** generatePricesReport2

-- | @POST \/reports\/prices\/generate@
-- 
-- Отчет «Цены на рынке»
-- 
-- Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generatePricesReport2
  :: (Consumes GeneratePricesReport2 MimeJSON, MimeRender MimeJSON GeneratePricesReportRequest)
  => GeneratePricesReportRequest -- ^ "generatePricesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GeneratePricesReport2 MimeJSON GenerateReportResponse MimeJSON
generatePricesReport2 generatePricesReportRequest =
  _mkRequest "POST" ["/reports/prices/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generatePricesReportRequest

data GeneratePricesReport2 
instance HasBodyParam GeneratePricesReport2 GeneratePricesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GeneratePricesReport2 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GeneratePricesReport2 MimeJSON

-- | @application/json@
instance Produces GeneratePricesReport2 MimeJSON


-- *** generateShelfsStatisticsReport2

-- | @POST \/reports\/shelf-statistics\/generate@
-- 
-- Отчет по полкам
-- 
-- Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateShelfsStatisticsReport2
  :: (Consumes GenerateShelfsStatisticsReport2 MimeJSON, MimeRender MimeJSON GenerateShelfsStatisticsRequest)
  => GenerateShelfsStatisticsRequest -- ^ "generateShelfsStatisticsRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateShelfsStatisticsReport2 MimeJSON GenerateReportResponse MimeJSON
generateShelfsStatisticsReport2 generateShelfsStatisticsRequest =
  _mkRequest "POST" ["/reports/shelf-statistics/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateShelfsStatisticsRequest

data GenerateShelfsStatisticsReport2 
instance HasBodyParam GenerateShelfsStatisticsReport2 GenerateShelfsStatisticsRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateShelfsStatisticsReport2 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateShelfsStatisticsReport2 MimeJSON

-- | @application/json@
instance Produces GenerateShelfsStatisticsReport2 MimeJSON


-- *** generateShowsSalesReport1

-- | @POST \/reports\/shows-sales\/generate@
-- 
-- Отчет «Аналитика продаж»
-- 
-- Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateShowsSalesReport1
  :: (Consumes GenerateShowsSalesReport1 MimeJSON, MimeRender MimeJSON GenerateShowsSalesReportRequest)
  => GenerateShowsSalesReportRequest -- ^ "generateShowsSalesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateShowsSalesReport1 MimeJSON GenerateReportResponse MimeJSON
generateShowsSalesReport1 generateShowsSalesReportRequest =
  _mkRequest "POST" ["/reports/shows-sales/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateShowsSalesReportRequest

data GenerateShowsSalesReport1 
instance HasBodyParam GenerateShowsSalesReport1 GenerateShowsSalesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateShowsSalesReport1 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateShowsSalesReport1 MimeJSON

-- | @application/json@
instance Produces GenerateShowsSalesReport1 MimeJSON


-- *** generateStocksOnWarehousesReport2

-- | @POST \/reports\/stocks-on-warehouses\/generate@
-- 
-- Отчет по остаткам на складах
-- 
-- Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateStocksOnWarehousesReport2
  :: (Consumes GenerateStocksOnWarehousesReport2 MimeJSON, MimeRender MimeJSON GenerateStocksOnWarehousesReportRequest)
  => GenerateStocksOnWarehousesReportRequest -- ^ "generateStocksOnWarehousesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateStocksOnWarehousesReport2 MimeJSON GenerateReportResponse MimeJSON
generateStocksOnWarehousesReport2 generateStocksOnWarehousesReportRequest =
  _mkRequest "POST" ["/reports/stocks-on-warehouses/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateStocksOnWarehousesReportRequest

data GenerateStocksOnWarehousesReport2 
instance HasBodyParam GenerateStocksOnWarehousesReport2 GenerateStocksOnWarehousesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateStocksOnWarehousesReport2 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateStocksOnWarehousesReport2 MimeJSON

-- | @application/json@
instance Produces GenerateStocksOnWarehousesReport2 MimeJSON


-- *** generateUnitedMarketplaceServicesReport1

-- | @POST \/reports\/united-marketplace-services\/generate@
-- 
-- Отчет по стоимости услуг
-- 
-- Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateUnitedMarketplaceServicesReport1
  :: (Consumes GenerateUnitedMarketplaceServicesReport1 MimeJSON, MimeRender MimeJSON GenerateUnitedMarketplaceServicesReportRequest)
  => GenerateUnitedMarketplaceServicesReportRequest -- ^ "generateUnitedMarketplaceServicesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateUnitedMarketplaceServicesReport1 MimeJSON GenerateReportResponse MimeJSON
generateUnitedMarketplaceServicesReport1 generateUnitedMarketplaceServicesReportRequest =
  _mkRequest "POST" ["/reports/united-marketplace-services/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateUnitedMarketplaceServicesReportRequest

data GenerateUnitedMarketplaceServicesReport1 
instance HasBodyParam GenerateUnitedMarketplaceServicesReport1 GenerateUnitedMarketplaceServicesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateUnitedMarketplaceServicesReport1 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateUnitedMarketplaceServicesReport1 MimeJSON

-- | @application/json@
instance Produces GenerateUnitedMarketplaceServicesReport1 MimeJSON


-- *** generateUnitedNettingReport1

-- | @POST \/reports\/united-netting\/generate@
-- 
-- Отчет по платежам
-- 
-- Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateUnitedNettingReport1
  :: (Consumes GenerateUnitedNettingReport1 MimeJSON, MimeRender MimeJSON GenerateUnitedNettingReportRequest)
  => GenerateUnitedNettingReportRequest -- ^ "generateUnitedNettingReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateUnitedNettingReport1 MimeJSON GenerateReportResponse MimeJSON
generateUnitedNettingReport1 generateUnitedNettingReportRequest =
  _mkRequest "POST" ["/reports/united-netting/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateUnitedNettingReportRequest

data GenerateUnitedNettingReport1 
instance HasBodyParam GenerateUnitedNettingReport1 GenerateUnitedNettingReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateUnitedNettingReport1 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateUnitedNettingReport1 MimeJSON

-- | @application/json@
instance Produces GenerateUnitedNettingReport1 MimeJSON


-- *** generateUnitedOrdersReport2

-- | @POST \/reports\/united-orders\/generate@
-- 
-- Отчет по заказам
-- 
-- Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateUnitedOrdersReport2
  :: (Consumes GenerateUnitedOrdersReport2 MimeJSON, MimeRender MimeJSON GenerateUnitedOrdersRequest)
  => GenerateUnitedOrdersRequest -- ^ "generateUnitedOrdersRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateUnitedOrdersReport2 MimeJSON GenerateReportResponse MimeJSON
generateUnitedOrdersReport2 generateUnitedOrdersRequest =
  _mkRequest "POST" ["/reports/united-orders/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateUnitedOrdersRequest

data GenerateUnitedOrdersReport2 
instance HasBodyParam GenerateUnitedOrdersReport2 GenerateUnitedOrdersRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateUnitedOrdersReport2 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateUnitedOrdersReport2 MimeJSON

-- | @application/json@
instance Produces GenerateUnitedOrdersReport2 MimeJSON


-- *** getAllOffers0

-- | @GET \/campaigns\/{campaignId}\/offers\/all@
-- 
-- Все предложения магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getAllOffers0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetAllOffers0 MimeNoContent GetAllOffersResponse MimeJSON
getAllOffers0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offers/all"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getAllOffers0 "" #-}

data GetAllOffers0  

-- | /Optional Param/ "feedId" - Идентификатор прайс-листа.
instance HasOptionalParam GetAllOffers0 FeedId where
  applyOptionalParam req (FeedId xs) =
    req `addQuery` toQuery ("feedId", Just xs)

-- | /Optional Param/ "chunk" - Номер сегмента с результатами.  Значение по умолчанию: `0`.  {% note info %}  Номера сегментов запрашиваются последовательно, пока не будет получен сегмент с пустым ответом. Пустой ответ означает, что все предложения магазина получены.  {% endnote %}  {% note alert %}  Нумерация начинается с 0. Чтобы запросить первую страницу, необходимо указать `chunk=0` и т. д.  {% endnote %} 
instance HasOptionalParam GetAllOffers0 Chunk where
  applyOptionalParam req (Chunk xs) =
    req `addQuery` toQuery ("chunk", Just xs)
-- | @application/json@
instance Produces GetAllOffers0 MimeJSON


-- *** getBidsInfoForBusiness0

-- | @POST \/businesses\/{businessId}\/bids\/info@
-- 
-- Информация об установленных ставках
-- 
-- Возвращает значения ставок для заданных товаров.  {% note warning \"\" %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBidsInfoForBusiness0
  :: (Consumes GetBidsInfoForBusiness0 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBidsInfoForBusiness0 MimeJSON GetBidsInfoResponse MimeJSON
getBidsInfoForBusiness0 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/bids/info"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetBidsInfoForBusiness0 

-- | /Body Param/ "GetBidsInfoRequest" - description
instance HasBodyParam GetBidsInfoForBusiness0 GetBidsInfoRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetBidsInfoForBusiness0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetBidsInfoForBusiness0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetBidsInfoForBusiness0 MimeJSON

-- | @application/json@
instance Produces GetBidsInfoForBusiness0 MimeJSON


-- *** getBidsRecommendations0

-- | @POST \/businesses\/{businessId}\/bids\/recommendations@
-- 
-- Рекомендованные ставки для заданных товаров
-- 
-- Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBidsRecommendations0
  :: (Consumes GetBidsRecommendations0 MimeJSON, MimeRender MimeJSON GetBidsRecommendationsRequest)
  => GetBidsRecommendationsRequest -- ^ "getBidsRecommendationsRequest" -  description.
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBidsRecommendations0 MimeJSON GetBidsRecommendationsResponse MimeJSON
getBidsRecommendations0 getBidsRecommendationsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/bids/recommendations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getBidsRecommendationsRequest

data GetBidsRecommendations0 

-- | /Body Param/ "GetBidsRecommendationsRequest" - description.
instance HasBodyParam GetBidsRecommendations0 GetBidsRecommendationsRequest 

-- | @application/json@
instance Consumes GetBidsRecommendations0 MimeJSON

-- | @application/json@
instance Produces GetBidsRecommendations0 MimeJSON


-- *** getBusinessQuarantineOffers0

-- | @POST \/businesses\/{businessId}\/price-quarantine@
-- 
-- Список товаров, находящихся в карантине по цене в кабинете
-- 
-- Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBusinessQuarantineOffers0
  :: (Consumes GetBusinessQuarantineOffers0 MimeJSON, MimeRender MimeJSON GetQuarantineOffersRequest)
  => GetQuarantineOffersRequest -- ^ "getQuarantineOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBusinessQuarantineOffers0 MimeJSON GetQuarantineOffersResponse MimeJSON
getBusinessQuarantineOffers0 getQuarantineOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/price-quarantine"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getQuarantineOffersRequest

data GetBusinessQuarantineOffers0 
instance HasBodyParam GetBusinessQuarantineOffers0 GetQuarantineOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetBusinessQuarantineOffers0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetBusinessQuarantineOffers0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetBusinessQuarantineOffers0 MimeJSON

-- | @application/json@
instance Produces GetBusinessQuarantineOffers0 MimeJSON


-- *** getBusinessSettings0

-- | @POST \/businesses\/{businessId}\/settings@
-- 
-- Настройки кабинета
-- 
-- Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBusinessSettings0
  :: BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBusinessSettings0 MimeNoContent GetBusinessSettingsResponse MimeJSON
getBusinessSettings0 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/settings"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetBusinessSettings0  
-- | @application/json@
instance Produces GetBusinessSettings0 MimeJSON


-- *** getCampaign0

-- | @GET \/campaigns\/{campaignId}@
-- 
-- Информация о магазине
-- 
-- Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaign0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaign0 MimeNoContent GetCampaignResponse MimeJSON
getCampaign0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaign0  
-- | @application/json@
instance Produces GetCampaign0 MimeJSON


-- *** getCampaignLogins0

-- | @GET \/campaigns\/{campaignId}\/logins@
-- 
-- Логины, связанные с магазином
-- 
-- Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignLogins0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignLogins0 MimeNoContent GetCampaignLoginsResponse MimeJSON
getCampaignLogins0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/logins"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaignLogins0  
-- | @application/json@
instance Produces GetCampaignLogins0 MimeJSON


-- *** getCampaignOffers0

-- | @POST \/campaigns\/{campaignId}\/offers@
-- 
-- Информация о товарах, которые размещены в заданном магазине
-- 
-- Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignOffers0
  :: (Consumes GetCampaignOffers0 MimeJSON, MimeRender MimeJSON GetCampaignOffersRequest)
  => GetCampaignOffersRequest -- ^ "getCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignOffers0 MimeJSON GetCampaignOffersResponse MimeJSON
getCampaignOffers0 getCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getCampaignOffersRequest

data GetCampaignOffers0 
instance HasBodyParam GetCampaignOffers0 GetCampaignOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetCampaignOffers0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetCampaignOffers0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetCampaignOffers0 MimeJSON

-- | @application/json@
instance Produces GetCampaignOffers0 MimeJSON


-- *** getCampaignQuarantineOffers0

-- | @POST \/campaigns\/{campaignId}\/price-quarantine@
-- 
-- Список товаров, находящихся в карантине по цене в магазине
-- 
-- Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignQuarantineOffers0
  :: (Consumes GetCampaignQuarantineOffers0 MimeJSON, MimeRender MimeJSON GetQuarantineOffersRequest)
  => GetQuarantineOffersRequest -- ^ "getQuarantineOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignQuarantineOffers0 MimeJSON GetQuarantineOffersResponse MimeJSON
getCampaignQuarantineOffers0 getQuarantineOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/price-quarantine"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getQuarantineOffersRequest

data GetCampaignQuarantineOffers0 
instance HasBodyParam GetCampaignQuarantineOffers0 GetQuarantineOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetCampaignQuarantineOffers0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetCampaignQuarantineOffers0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetCampaignQuarantineOffers0 MimeJSON

-- | @application/json@
instance Produces GetCampaignQuarantineOffers0 MimeJSON


-- *** getCampaignRegion0

-- | @GET \/campaigns\/{campaignId}\/region@
-- 
-- Регион магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignRegion0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignRegion0 MimeNoContent GetCampaignRegionResponse MimeJSON
getCampaignRegion0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/region"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getCampaignRegion0 "" #-}

data GetCampaignRegion0  
-- | @application/json@
instance Produces GetCampaignRegion0 MimeJSON


-- *** getCampaignSettings0

-- | @GET \/campaigns\/{campaignId}\/settings@
-- 
-- Настройки магазина
-- 
-- Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignSettings0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignSettings0 MimeNoContent GetCampaignSettingsResponse MimeJSON
getCampaignSettings0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/settings"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaignSettings0  
-- | @application/json@
instance Produces GetCampaignSettings0 MimeJSON


-- *** getCampaigns0

-- | @GET \/campaigns@
-- 
-- Список магазинов пользователя
-- 
-- Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaigns0
  :: ПартнерскийAPIМаркетаRequest GetCampaigns0 MimeNoContent GetCampaignsResponse MimeJSON
getCampaigns0 =
  _mkRequest "GET" ["/campaigns"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaigns0  

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaigns0 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaigns0 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetCampaigns0 MimeJSON


-- *** getCampaignsByLogin0

-- | @GET \/campaigns\/by_login\/{login}@
-- 
-- Магазины, доступные логину
-- 
-- Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignsByLogin0
  :: Login -- ^ "login" -  Логин пользователя.
  -> ПартнерскийAPIМаркетаRequest GetCampaignsByLogin0 MimeNoContent GetCampaignsResponse MimeJSON
getCampaignsByLogin0 (Login login) =
  _mkRequest "GET" ["/campaigns/by_login/",toPath login]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaignsByLogin0  

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaignsByLogin0 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaignsByLogin0 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetCampaignsByLogin0 MimeJSON


-- *** getCategoriesMaxSaleQuantum2

-- | @POST \/categories\/max-sale-quantum@
-- 
-- Лимит на установку кванта продажи и минимального количества товаров в заказе
-- 
-- Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCategoriesMaxSaleQuantum2
  :: (Consumes GetCategoriesMaxSaleQuantum2 MimeJSON, MimeRender MimeJSON GetCategoriesMaxSaleQuantumRequest)
  => GetCategoriesMaxSaleQuantumRequest -- ^ "getCategoriesMaxSaleQuantumRequest"
  -> ПартнерскийAPIМаркетаRequest GetCategoriesMaxSaleQuantum2 MimeJSON GetCategoriesMaxSaleQuantumResponse MimeJSON
getCategoriesMaxSaleQuantum2 getCategoriesMaxSaleQuantumRequest =
  _mkRequest "POST" ["/categories/max-sale-quantum"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getCategoriesMaxSaleQuantumRequest

data GetCategoriesMaxSaleQuantum2 
instance HasBodyParam GetCategoriesMaxSaleQuantum2 GetCategoriesMaxSaleQuantumRequest 

-- | @application/json@
instance Consumes GetCategoriesMaxSaleQuantum2 MimeJSON

-- | @application/json@
instance Produces GetCategoriesMaxSaleQuantum2 MimeJSON


-- *** getCategoriesTree2

-- | @POST \/categories\/tree@
-- 
-- Дерево категорий
-- 
-- Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCategoriesTree2
  :: (Consumes GetCategoriesTree2 MimeJSON)
  => ПартнерскийAPIМаркетаRequest GetCategoriesTree2 MimeJSON GetCategoriesResponse MimeJSON
getCategoriesTree2 =
  _mkRequest "POST" ["/categories/tree"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCategoriesTree2 
instance HasBodyParam GetCategoriesTree2 GetCategoriesRequest 

-- | @application/json@
instance Consumes GetCategoriesTree2 MimeJSON

-- | @application/json@
instance Produces GetCategoriesTree2 MimeJSON


-- *** getCategoryContentParameters0

-- | @POST \/category\/{categoryId}\/parameters@
-- 
-- Списки характеристик товаров по категориям
-- 
-- Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCategoryContentParameters0
  :: CategoryId3 -- ^ "categoryId" -  Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
  -> ПартнерскийAPIМаркетаRequest GetCategoryContentParameters0 MimeNoContent GetCategoryContentParametersResponse MimeJSON
getCategoryContentParameters0 (CategoryId3 categoryId) =
  _mkRequest "POST" ["/category/",toPath categoryId,"/parameters"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCategoryContentParameters0  
-- | @application/json@
instance Produces GetCategoryContentParameters0 MimeJSON


-- *** getChatHistory0

-- | @POST \/businesses\/{businessId}\/chats\/history@
-- 
-- Получение истории сообщений в чате
-- 
-- Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getChatHistory0
  :: (Consumes GetChatHistory0 MimeJSON, MimeRender MimeJSON GetChatHistoryRequest)
  => GetChatHistoryRequest -- ^ "getChatHistoryRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest GetChatHistory0 MimeJSON GetChatHistoryResponse MimeJSON
getChatHistory0 getChatHistoryRequest (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/history"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getChatHistoryRequest
    `addQuery` toQuery ("chatId", Just chatId)

data GetChatHistory0 

-- | /Body Param/ "GetChatHistoryRequest" - description
instance HasBodyParam GetChatHistory0 GetChatHistoryRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetChatHistory0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetChatHistory0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetChatHistory0 MimeJSON

-- | @application/json@
instance Produces GetChatHistory0 MimeJSON


-- *** getChats0

-- | @POST \/businesses\/{businessId}\/chats@
-- 
-- Получение доступных чатов
-- 
-- Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getChats0
  :: (Consumes GetChats0 MimeJSON, MimeRender MimeJSON GetChatsRequest)
  => GetChatsRequest -- ^ "getChatsRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetChats0 MimeJSON GetChatsResponse MimeJSON
getChats0 getChatsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getChatsRequest

data GetChats0 

-- | /Body Param/ "GetChatsRequest" - description
instance HasBodyParam GetChats0 GetChatsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetChats0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetChats0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetChats0 MimeJSON

-- | @application/json@
instance Produces GetChats0 MimeJSON


-- *** getDeliveryServices1

-- | @GET \/delivery\/services@
-- 
-- Справочник служб доставки
-- 
-- Возвращает справочник служб доставки: идентификаторы и наименования. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getDeliveryServices1
  :: ПартнерскийAPIМаркетаRequest GetDeliveryServices1 MimeNoContent GetDeliveryServicesResponse MimeJSON
getDeliveryServices1 =
  _mkRequest "GET" ["/delivery/services"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetDeliveryServices1  
-- | @application/json@
instance Produces GetDeliveryServices1 MimeJSON


-- *** getFeed0

-- | @GET \/campaigns\/{campaignId}\/feeds\/{feedId}@
-- 
-- Информация о прайс-листе
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeed0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest GetFeed0 MimeNoContent GetFeedResponse MimeJSON
getFeed0 (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeed0 "" #-}

data GetFeed0  
-- | @application/json@
instance Produces GetFeed0 MimeJSON


-- *** getFeedIndexLogs0

-- | @GET \/campaigns\/{campaignId}\/feeds\/{feedId}\/index-logs@
-- 
-- Отчет по индексации прайс-листа
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeedIndexLogs0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest GetFeedIndexLogs0 MimeNoContent GetFeedIndexLogsResponse MimeJSON
getFeedIndexLogs0 (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId,"/index-logs"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeedIndexLogs0 "" #-}

data GetFeedIndexLogs0  

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetFeedIndexLogs0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "published_time_from" - Начальная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Значение по умолчанию: последние восемь дней со времени отправки запроса. 
instance HasOptionalParam GetFeedIndexLogs0 PublishedTimeFrom where
  applyOptionalParam req (PublishedTimeFrom xs) =
    req `addQuery` toQuery ("published_time_from", Just xs)

-- | /Optional Param/ "published_time_to" - Конечная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-31T00:42:42+03:00`.  Значение по умолчанию: дата и время отправки запроса.  {% note info %}  Если во время переключения между страницами выходных данных на Яндекс Маркете появятся новые результаты индексации прайс-листа, вы не получите часть данных. Чтобы этого не произошло, зафиксируйте выходные данные с помощью входного параметра `published_time_to`. Значение параметра не должно быть датой из будущего.  {% endnote %} 
instance HasOptionalParam GetFeedIndexLogs0 PublishedTimeTo where
  applyOptionalParam req (PublishedTimeTo xs) =
    req `addQuery` toQuery ("published_time_to", Just xs)

-- | /Optional Param/ "status" - Статус индексации и проверки прайс-листа на соответствие техническим требованиям.  Возможные значения: * `ERROR` — произошли ошибки. * `OK` — обработан без ошибок. * `WARNING` — наблюдались некритичные проблемы. 
instance HasOptionalParam GetFeedIndexLogs0 Status2 where
  applyOptionalParam req (Status2 xs) =
    req `addQuery` toQuery ("status", Just xs)
-- | @application/json@
instance Produces GetFeedIndexLogs0 MimeJSON


-- *** getFeedbackAndCommentUpdates0

-- | @GET \/campaigns\/{campaignId}\/feedback\/updates@
-- 
-- Новые и обновленные отзывы о магазине
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeedbackAndCommentUpdates0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetFeedbackAndCommentUpdates0 MimeNoContent GetFeedbackListResponse MimeJSON
getFeedbackAndCommentUpdates0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feedback/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeedbackAndCommentUpdates0 "" #-}

data GetFeedbackAndCommentUpdates0  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetFeedbackAndCommentUpdates0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetFeedbackAndCommentUpdates0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "from_date" - Начальная дата обновления отзывов.  Если параметр указан, возвращаются отзывы, которые были написаны или обновлены с этой даты.  Формат даты: `ГГГГ-ММ-ДД`. 
instance HasOptionalParam GetFeedbackAndCommentUpdates0 FromDate where
  applyOptionalParam req (FromDate xs) =
    req `addQuery` toQuery ("from_date", Just xs)
-- | @application/json@
instance Produces GetFeedbackAndCommentUpdates0 MimeJSON


-- *** getFeeds0

-- | @GET \/campaigns\/{campaignId}\/feeds@
-- 
-- Список прайс-листов магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeeds0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetFeeds0 MimeNoContent GetFeedsResponse MimeJSON
getFeeds0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feeds"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeeds0 "" #-}

data GetFeeds0  
-- | @application/json@
instance Produces GetFeeds0 MimeJSON


-- *** getGoodsFeedbackComments2

-- | @POST \/businesses\/{businessId}\/goods-feedback\/comments@
-- 
-- Получение комментариев к отзыву
-- 
-- Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getGoodsFeedbackComments2
  :: (Consumes GetGoodsFeedbackComments2 MimeJSON, MimeRender MimeJSON GetGoodsFeedbackCommentsRequest)
  => GetGoodsFeedbackCommentsRequest -- ^ "getGoodsFeedbackCommentsRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetGoodsFeedbackComments2 MimeJSON GetGoodsFeedbackCommentsResponse MimeJSON
getGoodsFeedbackComments2 getGoodsFeedbackCommentsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/comments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getGoodsFeedbackCommentsRequest

data GetGoodsFeedbackComments2 
instance HasBodyParam GetGoodsFeedbackComments2 GetGoodsFeedbackCommentsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetGoodsFeedbackComments2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetGoodsFeedbackComments2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetGoodsFeedbackComments2 MimeJSON

-- | @application/json@
instance Produces GetGoodsFeedbackComments2 MimeJSON


-- *** getGoodsFeedbacks2

-- | @POST \/businesses\/{businessId}\/goods-feedback@
-- 
-- Получение отзывов о товарах продавца
-- 
-- Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getGoodsFeedbacks2
  :: (Consumes GetGoodsFeedbacks2 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetGoodsFeedbacks2 MimeJSON GetGoodsFeedbackResponse MimeJSON
getGoodsFeedbacks2 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetGoodsFeedbacks2 
instance HasBodyParam GetGoodsFeedbacks2 GetGoodsFeedbackRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetGoodsFeedbacks2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetGoodsFeedbacks2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetGoodsFeedbacks2 MimeJSON

-- | @application/json@
instance Produces GetGoodsFeedbacks2 MimeJSON


-- *** getGoodsStats3

-- | @POST \/campaigns\/{campaignId}\/stats\/skus@
-- 
-- Отчет по товарам
-- 
-- Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getGoodsStats3
  :: (Consumes GetGoodsStats3 MimeJSON, MimeRender MimeJSON GetGoodsStatsRequest)
  => GetGoodsStatsRequest -- ^ "getGoodsStatsRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetGoodsStats3 MimeJSON GetGoodsStatsResponse MimeJSON
getGoodsStats3 getGoodsStatsRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/stats/skus"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getGoodsStatsRequest

data GetGoodsStats3 
instance HasBodyParam GetGoodsStats3 GetGoodsStatsRequest 

-- | @application/json@
instance Consumes GetGoodsStats3 MimeJSON

-- | @application/json@
instance Produces GetGoodsStats3 MimeJSON


-- *** getHiddenOffers2

-- | @GET \/campaigns\/{campaignId}\/hidden-offers@
-- 
-- Информация о скрытых вами товарах
-- 
-- Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getHiddenOffers2
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetHiddenOffers2 MimeNoContent GetHiddenOffersResponse MimeJSON
getHiddenOffers2 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/hidden-offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetHiddenOffers2  

-- | /Optional Param/ "offer_id" - Идентификатор скрытого предложения. 
instance HasOptionalParam GetHiddenOffers2 OfferId where
  applyOptionalParam req (OfferId xs) =
    req `addQuery` toQueryColl CommaSeparated ("offer_id", Just xs)

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetHiddenOffers2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetHiddenOffers2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "offset" - Позиция в списке, начиная с которой возвращаются результаты ответа.  Используется вместе с параметром `limit`.  Если задан `offset`, параметры `page_number` и `page_size` игнорируются.  `offset` игнорируется, если задан `page_token`. 
instance HasOptionalParam GetHiddenOffers2 Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetHiddenOffers2 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetHiddenOffers2 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetHiddenOffers2 MimeJSON


-- *** getModel0

-- | @GET \/models\/{modelId}@
-- 
-- Информация об одной модели
-- 
-- Возвращает информацию о модели товара.  Для методов `GET models`, `GET models/{modelId}` и `POST models` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getModel0
  :: ModelId -- ^ "modelId" -  Идентификатор модели товара.
  -> RegionId -- ^ "regionId" -  Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  -> ПартнерскийAPIМаркетаRequest GetModel0 MimeNoContent GetModelsResponse MimeJSON
getModel0 (ModelId modelId) (RegionId regionId) =
  _mkRequest "GET" ["/models/",toPath modelId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `addQuery` toQuery ("regionId", Just regionId)

data GetModel0  

-- | /Optional Param/ "currency" - Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
instance HasOptionalParam GetModel0 Currency where
  applyOptionalParam req (Currency xs) =
    req `addQuery` toQuery ("currency", Just xs)
-- | @application/json@
instance Produces GetModel0 MimeJSON


-- *** getModelOffers0

-- | @GET \/models\/{modelId}\/offers@
-- 
-- Список предложений для одной модели
-- 
-- Возвращает информацию о первых десяти предложениях, расположенных на карточке модели.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей метод не поддерживается. Идентификатор групповой модели игнорируется.  Для методов `GET models/{modelId}/offers` и `POST models/offers` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getModelOffers0
  :: ModelId -- ^ "modelId" -  Идентификатор модели товара.
  -> RegionId -- ^ "regionId" -  Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  -> ПартнерскийAPIМаркетаRequest GetModelOffers0 MimeNoContent GetModelsOffersResponse MimeJSON
getModelOffers0 (ModelId modelId) (RegionId regionId) =
  _mkRequest "GET" ["/models/",toPath modelId,"/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `addQuery` toQuery ("regionId", Just regionId)

data GetModelOffers0  

-- | /Optional Param/ "currency" - Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
instance HasOptionalParam GetModelOffers0 Currency where
  applyOptionalParam req (Currency xs) =
    req `addQuery` toQuery ("currency", Just xs)

-- | /Optional Param/ "orderByPrice" - Направление сортировки по цене.  Возможные значения: * `ASC` — сортировка по возрастанию. * `DESC` — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке. 
instance HasOptionalParam GetModelOffers0 OrderByPrice where
  applyOptionalParam req (OrderByPrice xs) =
    req `addQuery` toQuery ("orderByPrice", Just xs)

-- | /Optional Param/ "count" - Количество предложений на странице ответа.
instance HasOptionalParam GetModelOffers0 Count where
  applyOptionalParam req (Count xs) =
    req `addQuery` toQuery ("count", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetModelOffers0 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)
-- | @application/json@
instance Produces GetModelOffers0 MimeJSON


-- *** getModels0

-- | @POST \/models@
-- 
-- Информация о нескольких моделях
-- 
-- Возвращает информацию о моделях товаров.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов `GET models`, `GET models/{modelId}` и `POST models` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getModels0
  :: (Consumes GetModels0 MimeJSON, MimeRender MimeJSON GetModelsRequest)
  => GetModelsRequest -- ^ "getModelsRequest"
  -> RegionId -- ^ "regionId" -  Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  -> ПартнерскийAPIМаркетаRequest GetModels0 MimeJSON GetModelsResponse MimeJSON
getModels0 getModelsRequest (RegionId regionId) =
  _mkRequest "POST" ["/models"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getModelsRequest
    `addQuery` toQuery ("regionId", Just regionId)

data GetModels0 
instance HasBodyParam GetModels0 GetModelsRequest 

-- | /Optional Param/ "currency" - Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
instance HasOptionalParam GetModels0 Currency where
  applyOptionalParam req (Currency xs) =
    req `addQuery` toQuery ("currency", Just xs)

-- | @application/json@
instance Consumes GetModels0 MimeJSON

-- | @application/json@
instance Produces GetModels0 MimeJSON


-- *** getModelsOffers0

-- | @POST \/models\/offers@
-- 
-- Список предложений для нескольких моделей
-- 
-- Возвращает информацию о первых десяти предложениях, расположенных на карточках моделей, идентификаторы которых указаны в запросе.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей выдача предложений не поддерживается. Идентификаторы групповых моделей игнорируются.  В одном запросе можно получить информацию о предложениях не более чем для 100 моделей.  Для методов `GET models/{modelId}/offers` и `POST models/offers` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getModelsOffers0
  :: (Consumes GetModelsOffers0 MimeJSON, MimeRender MimeJSON GetModelsRequest)
  => GetModelsRequest -- ^ "getModelsRequest"
  -> RegionId -- ^ "regionId" -  Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  -> ПартнерскийAPIМаркетаRequest GetModelsOffers0 MimeJSON GetModelsOffersResponse MimeJSON
getModelsOffers0 getModelsRequest (RegionId regionId) =
  _mkRequest "POST" ["/models/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getModelsRequest
    `addQuery` toQuery ("regionId", Just regionId)

data GetModelsOffers0 
instance HasBodyParam GetModelsOffers0 GetModelsRequest 

-- | /Optional Param/ "currency" - Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
instance HasOptionalParam GetModelsOffers0 Currency where
  applyOptionalParam req (Currency xs) =
    req `addQuery` toQuery ("currency", Just xs)

-- | /Optional Param/ "orderByPrice" - Направление сортировки по цене.  Возможные значения: * `ASC` — сортировка по возрастанию. * `DESC` — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке. 
instance HasOptionalParam GetModelsOffers0 OrderByPrice where
  applyOptionalParam req (OrderByPrice xs) =
    req `addQuery` toQuery ("orderByPrice", Just xs)

-- | @application/json@
instance Consumes GetModelsOffers0 MimeJSON

-- | @application/json@
instance Produces GetModelsOffers0 MimeJSON


-- *** getOfferCardsContentStatus0

-- | @POST \/businesses\/{businessId}\/offer-cards@
-- 
-- Получение информации о заполненности карточек магазина
-- 
-- Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferCardsContentStatus0
  :: (Consumes GetOfferCardsContentStatus0 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferCardsContentStatus0 MimeJSON GetOfferCardsContentStatusResponse MimeJSON
getOfferCardsContentStatus0 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-cards"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOfferCardsContentStatus0 
instance HasBodyParam GetOfferCardsContentStatus0 GetOfferCardsContentStatusRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferCardsContentStatus0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferCardsContentStatus0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOfferCardsContentStatus0 MimeJSON

-- | @application/json@
instance Produces GetOfferCardsContentStatus0 MimeJSON


-- *** getOfferMappingEntries3

-- | @GET \/campaigns\/{campaignId}\/offer-mapping-entries@
-- 
-- Список товаров в каталоге
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferMappingEntries3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferMappingEntries3 MimeNoContent GetOfferMappingEntriesResponse MimeJSON
getOfferMappingEntries3 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offer-mapping-entries"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getOfferMappingEntries3 "" #-}

data GetOfferMappingEntries3  

-- | /Optional Param/ "offer_id" - Идентификатор товара в каталоге.
instance HasOptionalParam GetOfferMappingEntries3 OfferId where
  applyOptionalParam req (OfferId xs) =
    req `addQuery` toQueryColl CommaSeparated ("offer_id", Just xs)

-- | /Optional Param/ "shop_sku" - Ваш SKU товара.  Параметр может быть указан несколько раз, например:  ``` ...shop_sku=123&shop_sku=129&shop_sku=141... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries3 ShopSku2 where
  applyOptionalParam req (ShopSku2 xs) =
    req `addQuery` toQueryColl CommaSeparated ("shop_sku", Just xs)

-- | /Optional Param/ "mapping_kind" - Тип маппинга.
instance HasOptionalParam GetOfferMappingEntries3 MappingKind where
  applyOptionalParam req (MappingKind xs) =
    req `addQuery` toQuery ("mapping_kind", Just xs)

-- | /Optional Param/ "status" - Фильтрация по статусу публикации товара:  * `READY` — товар прошел модерацию. * `IN_WORK` — товар проходит модерацию. * `NEED_CONTENT` — для товара без SKU на Маркете marketSku нужно найти карточку самостоятельно или создать ее. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. * `OTHER` — товар не прошел модерацию по другой причине.  Можно указать несколько статусов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...status=READY,IN_WORK... ...status=READY&status=IN_WORK... ```  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries3 StatusOfferProcessingStatusType where
  applyOptionalParam req (StatusOfferProcessingStatusType xs) =
    req `addQuery` toQueryColl CommaSeparated ("status", Just xs)

-- | /Optional Param/ "availability" - Фильтрация по планам поставок товара:  * `ACTIVE` — поставки будут. * `INACTIVE` — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. * `DELISTED` — архив: товар закончился на складе, и его поставок больше не будет.  Можно указать несколько значений в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...availability=INACTIVE,DELISTED... ...availability=INACTIVE&availability=DELISTED... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries3 Availability where
  applyOptionalParam req (Availability xs) =
    req `addQuery` toQueryColl CommaSeparated ("availability", Just xs)

-- | /Optional Param/ "category_id" - Фильтрация по идентификатору категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  Можно указать несколько идентификаторов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...category_id=14727164,14382343... ...category_id=14727164&category_id=14382343... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries3 CategoryId2 where
  applyOptionalParam req (CategoryId2 xs) =
    req `addQuery` toQueryColl CommaSeparated ("category_id", Just xs)

-- | /Optional Param/ "vendor" - Фильтрация по бренду товара.  Можно указать несколько брендов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...vendor=Aqua%20Minerale,Borjomi... ...vendor=Aqua%20Minerale&vendor=Borjomi... ```  Чтобы товар попал в результаты фильтрации, его бренд должен точно совпадать с одним из указанных в запросе. Например, если указан бренд Schwarzkopf, то в результатах не будет товаров Schwarzkopf Professional.  Если в названии бренда есть символы, которые не входят в таблицу ASCII (в том числе кириллические символы), используйте для них URL-кодирование. Например, пробел — %20, апостроф «'» — %27 и т. д. Подробнее см. в разделе [Кодирование URL русскоязычной Википедии](https://ru.wikipedia.org/wiki/URL#Кодирование_URL).  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries3 Vendor where
  applyOptionalParam req (Vendor xs) =
    req `addQuery` toQueryColl CommaSeparated ("vendor", Just xs)

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferMappingEntries3 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferMappingEntries3 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces GetOfferMappingEntries3 MimeJSON


-- *** getOfferMappings0

-- | @POST \/businesses\/{businessId}\/offer-mappings@
-- 
-- Информация о товарах в каталоге
-- 
-- Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferMappings0
  :: (Consumes GetOfferMappings0 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferMappings0 MimeJSON GetOfferMappingsResponse MimeJSON
getOfferMappings0 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOfferMappings0 
instance HasBodyParam GetOfferMappings0 GetOfferMappingsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferMappings0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferMappings0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOfferMappings0 MimeJSON

-- | @application/json@
instance Produces GetOfferMappings0 MimeJSON


-- *** getOfferRecommendations0

-- | @POST \/businesses\/{businessId}\/offers\/recommendations@
-- 
-- Рекомендации Маркета, касающиеся цен
-- 
-- Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferRecommendations0
  :: (Consumes GetOfferRecommendations0 MimeJSON, MimeRender MimeJSON GetOfferRecommendationsRequest)
  => GetOfferRecommendationsRequest -- ^ "getOfferRecommendationsRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferRecommendations0 MimeJSON GetOfferRecommendationsResponse MimeJSON
getOfferRecommendations0 getOfferRecommendationsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offers/recommendations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getOfferRecommendationsRequest

data GetOfferRecommendations0 
instance HasBodyParam GetOfferRecommendations0 GetOfferRecommendationsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferRecommendations0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferRecommendations0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOfferRecommendations0 MimeJSON

-- | @application/json@
instance Produces GetOfferRecommendations0 MimeJSON


-- *** getOffers0

-- | @GET \/campaigns\/{campaignId}\/offers@
-- 
-- Предложения магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOffers0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOffers0 MimeNoContent GetOffersResponse MimeJSON
getOffers0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getOffers0 "" #-}

data GetOffers0  

-- | /Optional Param/ "query" - Поисковый запрос.  Поддерживается язык запросов.  Значение по умолчанию: все предложения магазина, размещенные на Маркете. 
instance HasOptionalParam GetOffers0 Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "feedId" - Идентификатор прайс-листа.
instance HasOptionalParam GetOffers0 FeedId where
  applyOptionalParam req (FeedId xs) =
    req `addQuery` toQuery ("feedId", Just xs)

-- | /Optional Param/ "shopCategoryId" - Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
instance HasOptionalParam GetOffers0 ShopCategoryId where
  applyOptionalParam req (ShopCategoryId xs) =
    req `addQuery` toQuery ("shopCategoryId", Just xs)

-- | /Optional Param/ "currency" - Валюта, в которой указана цена предложения.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна. 
instance HasOptionalParam GetOffers0 Currency where
  applyOptionalParam req (Currency xs) =
    req `addQuery` toQuery ("currency", Just xs)

-- | /Optional Param/ "matched" - Фильтр по признаку соотнесения предложения и карточки модели.  Возможные значения:  * `0 / FALSE / NO` — поиск выполняется среди предложений, не соотнесенных ни с какой карточкой модели.  * `1 / TRUE / YES` — поиск выполняется среди предложений, соотнесенных с карточками моделей). 
instance HasOptionalParam GetOffers0 Matched where
  applyOptionalParam req (Matched xs) =
    req `addQuery` toQuery ("matched", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOffers0 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOffers0 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetOffers0 MimeJSON


-- *** getOrder2

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}@
-- 
-- Информация об одном заказе
-- 
-- Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrder2
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrder2 MimeNoContent GetOrderResponse MimeJSON
getOrder2 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrder2  
-- | @application/json@
instance Produces GetOrder2 MimeJSON


-- *** getOrderBusinessBuyerInfo2

-- | @POST \/campaigns\/{campaignId}\/orders\/{orderId}\/business-buyer@
-- 
-- Информация о покупателе — юридическом лице
-- 
-- Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY`, `PICKUP` или `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrderBusinessBuyerInfo2
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrderBusinessBuyerInfo2 MimeNoContent GetBusinessBuyerInfoResponse MimeJSON
getOrderBusinessBuyerInfo2 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/business-buyer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrderBusinessBuyerInfo2  
-- | @application/json@
instance Produces GetOrderBusinessBuyerInfo2 MimeJSON


-- *** getOrderBusinessDocumentsInfo2

-- | @POST \/campaigns\/{campaignId}\/orders\/{orderId}\/documents@
-- 
-- Информация о документах
-- 
-- Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrderBusinessDocumentsInfo2
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrderBusinessDocumentsInfo2 MimeNoContent GetBusinessDocumentsInfoResponse MimeJSON
getOrderBusinessDocumentsInfo2 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/documents"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrderBusinessDocumentsInfo2  
-- | @application/json@
instance Produces GetOrderBusinessDocumentsInfo2 MimeJSON


-- *** getOrderBuyerInfo0

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/buyer@
-- 
-- Информация о покупателе — физическом лице
-- 
-- Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY` или `PICKUP`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrderBuyerInfo0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrderBuyerInfo0 MimeNoContent GetOrderBuyerInfoResponse MimeJSON
getOrderBuyerInfo0 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/buyer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrderBuyerInfo0  
-- | @application/json@
instance Produces GetOrderBuyerInfo0 MimeJSON


-- *** getOrderLabelsData1

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/delivery\/labels\/data@
-- 
-- Данные для самостоятельного изготовления ярлыков
-- 
-- Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrderLabelsData1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrderLabelsData1 MimeNoContent GetOrderLabelsDataResponse MimeJSON
getOrderLabelsData1 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/delivery/labels/data"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrderLabelsData1  
-- | @application/json@
instance Produces GetOrderLabelsData1 MimeJSON


-- *** getOrders1

-- | @GET \/campaigns\/{campaignId}\/orders@
-- 
-- Информация о нескольких заказах
-- 
-- Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры `page_token` и `limit`.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrders1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOrders1 MimeNoContent GetOrdersResponse MimeJSON
getOrders1 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrders1  

-- | /Optional Param/ "orderIds" - Фильтрация заказов по идентификаторам. <br><br> ⚠️ Не используйте это поле одновременно с другими фильтрами. Если вы хотите воспользоваться ими, оставьте поле пустым. 
instance HasOptionalParam GetOrders1 OrderIds where
  applyOptionalParam req (OrderIds xs) =
    req `addQuery` toQueryColl CommaSeparated ("orderIds", Just xs)

-- | /Optional Param/ "status" - Статус заказа:  * `CANCELLED` — заказ отменен.  * `DELIVERED` — заказ получен покупателем.  * `DELIVERY` — заказ передан в службу доставки.  * `PICKUP` — заказ доставлен в пункт самовывоза.  * `PROCESSING` — заказ находится в обработке.  * `UNPAID` — заказ оформлен, но еще не оплачен (если выбрана оплата при оформлении).  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
instance HasOptionalParam GetOrders1 Status where
  applyOptionalParam req (Status xs) =
    req `addQuery` toQueryColl CommaSeparated ("status", Just xs)

-- | /Optional Param/ "substatus" - Этап обработки заказа (если он имеет статус `PROCESSING`) или причина отмены заказа (если он имеет статус `CANCELLED`).  Возможные значения для заказа в статусе `PROCESSING`:  * `STARTED` — заказ подтвержден, его можно начать обрабатывать. * `READY_TO_SHIP` — заказ собран и готов к отправке. * `SHIPPED` — заказ передан службе доставки.  Возможные значения для заказа в статусе `CANCELLED`:  * `DELIVERY_SERVICE_UNDELIVERED` — служба доставки не смогла доставить заказ.  * `PROCESSING_EXPIRED` — значение более не используется.  * `REPLACING_ORDER` — покупатель решил заменить товар другим по собственной инициативе.  * `RESERVATION_EXPIRED` — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.  * `RESERVATION_FAILED` — Маркет не может продолжить дальнейшую обработку заказа.  * `SHOP_FAILED` — магазин не может выполнить заказ.  * `USER_CHANGED_MIND` — покупатель отменил заказ по личным причинам.  * `USER_NOT_PAID` — покупатель не оплатил заказ (для типа оплаты `PREPAID`) в течение 30 минут.  * `USER_REFUSED_DELIVERY` — покупателя не устроили условия доставки.  * `USER_REFUSED_PRODUCT` — покупателю не подошел товар.  * `USER_REFUSED_QUALITY` — покупателя не устроило качество товара.  * `USER_UNREACHABLE` — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:    * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;   * перерыв между первым и третьим звонком не менее 90 минут;   * соединение не короче 5 секунд.    Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400. * `USER_WANTS_TO_CHANGE_DELIVERY_DATE` — покупатель хочет получить заказ в другой день. * `CANCELLED_COURIER_NOT_FOUND` — не удалось найти курьера.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
instance HasOptionalParam GetOrders1 Substatus where
  applyOptionalParam req (Substatus xs) =
    req `addQuery` toQueryColl CommaSeparated ("substatus", Just xs)

-- | /Optional Param/ "fromDate" - Начальная дата для фильтрации заказов по дате оформления.  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной и конечной датой (параметр `toDate`) должно быть не больше 30 дней.  Значение по умолчанию: 30 дней назад от текущей даты. 
instance HasOptionalParam GetOrders1 FromDate where
  applyOptionalParam req (FromDate xs) =
    req `addQuery` toQuery ("fromDate", Just xs)

-- | /Optional Param/ "toDate" - Конечная дата для фильтрации заказов по дате оформления.  Показываются заказы, созданные до 00:00 указанного дня.  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной (параметр `fromDate`) и конечной датой должно быть не больше 30 дней.  Значение по умолчанию: текущая дата. 
instance HasOptionalParam GetOrders1 ToDate where
  applyOptionalParam req (ToDate xs) =
    req `addQuery` toQuery ("toDate", Just xs)

-- | /Optional Param/ "supplierShipmentDateFrom" - Начальная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр `shipmentDate`).  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной и конечной датой (параметр `supplierShipmentDateTo`) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders1 SupplierShipmentDateFrom where
  applyOptionalParam req (SupplierShipmentDateFrom xs) =
    req `addQuery` toQuery ("supplierShipmentDateFrom", Just xs)

-- | /Optional Param/ "supplierShipmentDateTo" - Конечная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр `shipmentDate`).  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной (параметр `supplierShipmentDateFrom`) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders1 SupplierShipmentDateTo where
  applyOptionalParam req (SupplierShipmentDateTo xs) =
    req `addQuery` toQuery ("supplierShipmentDateTo", Just xs)

-- | /Optional Param/ "updatedAtFrom" - Начальная дата для фильтрации заказов по дате и времени обновления (параметр `updatedAt`).  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Между начальной и конечной датой (параметр `updatedAtTo`) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders1 UpdatedAtFrom where
  applyOptionalParam req (UpdatedAtFrom xs) =
    req `addQuery` toQuery ("updatedAtFrom", Just xs)

-- | /Optional Param/ "updatedAtTo" - Конечная дата для фильтрации заказов по дате и времени обновления (параметр `updatedAt`).  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Между начальной (параметр `updatedAtFrom`) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders1 UpdatedAtTo where
  applyOptionalParam req (UpdatedAtTo xs) =
    req `addQuery` toQuery ("updatedAtTo", Just xs)

-- | /Optional Param/ "dispatchType" - Способ отгрузки
instance HasOptionalParam GetOrders1 DispatchType where
  applyOptionalParam req (DispatchType xs) =
    req `addQuery` toQuery ("dispatchType", Just xs)

-- | /Optional Param/ "fake" - Фильтрация заказов по типам:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
instance HasOptionalParam GetOrders1 Fake where
  applyOptionalParam req (Fake xs) =
    req `addQuery` toQuery ("fake", Just xs)

-- | /Optional Param/ "hasCis" - Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да.  * `false` — нет.  Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 
instance HasOptionalParam GetOrders1 HasCis where
  applyOptionalParam req (HasCis xs) =
    req `addQuery` toQuery ("hasCis", Just xs)

-- | /Optional Param/ "onlyWaitingForCancellationApprove" - **Только для модели DBS**  Фильтрация заказов по наличию запросов покупателей на отмену.  При значение `true` возвращаются только заказы, которые находятся в статусе `DELIVERY` или `PICKUP` и которые пользователи решили отменить.  Чтобы подтвердить или отклонить отмену, отправьте запрос [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation). 
instance HasOptionalParam GetOrders1 OnlyWaitingForCancellationApprove where
  applyOptionalParam req (OnlyWaitingForCancellationApprove xs) =
    req `addQuery` toQuery ("onlyWaitingForCancellationApprove", Just xs)

-- | /Optional Param/ "onlyEstimatedDelivery" - Фильтрация заказов с долгой доставкой (31-60 дней) по подтвержденной дате доставки:  * `true` — возвращаются только заказы с неподтвержденной датой доставки. * `false` — фильтрация не применяется. 
instance HasOptionalParam GetOrders1 OnlyEstimatedDelivery where
  applyOptionalParam req (OnlyEstimatedDelivery xs) =
    req `addQuery` toQuery ("onlyEstimatedDelivery", Just xs)

-- | /Optional Param/ "buyerType" - Фильтрация заказов по типу покупателя. 
instance HasOptionalParam GetOrders1 BuyerType where
  applyOptionalParam req (BuyerType xs) =
    req `addQuery` toQuery ("buyerType", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOrders1 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOrders1 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOrders1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOrders1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces GetOrders1 MimeJSON


-- *** getOrdersStats2

-- | @POST \/campaigns\/{campaignId}\/stats\/orders@
-- 
-- Детальная информация по заказам
-- 
-- Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \"\" %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrdersStats2
  :: (Consumes GetOrdersStats2 MimeJSON)
  => CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOrdersStats2 MimeJSON GetOrdersStatsResponse MimeJSON
getOrdersStats2 (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/stats/orders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrdersStats2 
instance HasBodyParam GetOrdersStats2 GetOrdersStatsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOrdersStats2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOrdersStats2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOrdersStats2 MimeJSON

-- | @application/json@
instance Produces GetOrdersStats2 MimeJSON


-- *** getOutlet0

-- | @GET \/campaigns\/{campaignId}\/outlets\/{outletId}@
-- 
-- Информация об одной точке продаж
-- 
-- Возвращает информацию о точках продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOutlet0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OutletId -- ^ "outletId" -  Идентификатор точки продаж.
  -> ПартнерскийAPIМаркетаRequest GetOutlet0 MimeNoContent GetOutletResponse MimeJSON
getOutlet0 (CampaignId campaignId) (OutletId outletId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/outlets/",toPath outletId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOutlet0  
-- | @application/json@
instance Produces GetOutlet0 MimeJSON


-- *** getOutletLicenses0

-- | @GET \/campaigns\/{campaignId}\/outlets\/licenses@
-- 
-- Информация о лицензиях для точек продаж
-- 
-- Возвращает информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOutletLicenses0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOutletLicenses0 MimeNoContent GetOutletLicensesResponse MimeJSON
getOutletLicenses0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/outlets/licenses"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOutletLicenses0  

-- | /Optional Param/ "outletIds" - Список идентификаторов точек продаж, для которых нужно получить информацию о лицензиях. Идентификаторы указываются через запятую.  В запросе должен быть либо параметр `outletIds`, либо параметр `ids`. Запрос с обоими параметрами или без них приведет к ошибке. 
instance HasOptionalParam GetOutletLicenses0 OutletIds where
  applyOptionalParam req (OutletIds xs) =
    req `addQuery` toQueryColl CommaSeparated ("outletIds", Just xs)

-- | /Optional Param/ "ids" - Список идентификаторов лицензий.
instance HasOptionalParam GetOutletLicenses0 Ids where
  applyOptionalParam req (Ids xs) =
    req `addQuery` toQueryColl CommaSeparated ("ids", Just xs)
-- | @application/json@
instance Produces GetOutletLicenses0 MimeJSON


-- *** getOutlets0

-- | @GET \/campaigns\/{campaignId}\/outlets@
-- 
-- Информация о нескольких точках продаж
-- 
-- Возвращает список точек продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOutlets0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOutlets0 MimeNoContent GetOutletsResponse MimeJSON
getOutlets0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/outlets"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOutlets0  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOutlets0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "region_id" - Идентификатор региона. Если задать идентификатор родительского региона любого уровня, в выходных данных будут отображены точки продаж всех дочерних регионов. Идентификатор региона можно получить c помощью метода [GET regions](../../reference/regions/searchRegionsByName.md). 
instance HasOptionalParam GetOutlets0 RegionId where
  applyOptionalParam req (RegionId xs) =
    req `addQuery` toQuery ("region_id", Just xs)

-- | /Optional Param/ "shop_outlet_code" - Идентификатор точки продаж, присвоенный магазином.
instance HasOptionalParam GetOutlets0 ShopOutletCode where
  applyOptionalParam req (ShopOutletCode xs) =
    req `addQuery` toQuery ("shop_outlet_code", Just xs)

-- | /Optional Param/ "regionId" - {% note warning \"\" %}  Этот параметр устарел. Для указания региона используйте `region_id`.  {% endnote %} 
instance HasOptionalParam GetOutlets0 RegionId2 where
  applyOptionalParam req (RegionId2 xs) =
    req `addQuery` toQuery ("regionId", Just xs)
-- | @application/json@
instance Produces GetOutlets0 MimeJSON


-- *** getPrices2

-- | @GET \/campaigns\/{campaignId}\/offer-prices@
-- 
-- Список цен
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** ```(количество товаров партнера на витрине) * 25``` товаров в сутки| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPrices2
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPrices2 MimeNoContent GetPricesResponse MimeJSON
getPrices2 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offer-prices"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getPrices2 "" #-}

data GetPrices2  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetPrices2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetPrices2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "archived" - Фильтр по нахождению в архиве.
instance HasOptionalParam GetPrices2 Archived where
  applyOptionalParam req (Archived xs) =
    req `addQuery` toQuery ("archived", Just xs)
-- | @application/json@
instance Produces GetPrices2 MimeJSON


-- *** getPricesByOfferIds2

-- | @POST \/campaigns\/{campaignId}\/offer-prices@
-- 
-- Просмотр цен на указанные товары в магазине
-- 
-- Возвращает список цен на указанные товары в магазине.  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров на витрине * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPricesByOfferIds2
  :: (Consumes GetPricesByOfferIds2 MimeJSON)
  => CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPricesByOfferIds2 MimeJSON GetPricesByOfferIdsResponse MimeJSON
getPricesByOfferIds2 (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-prices"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetPricesByOfferIds2 
instance HasBodyParam GetPricesByOfferIds2 GetPricesByOfferIdsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetPricesByOfferIds2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetPricesByOfferIds2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetPricesByOfferIds2 MimeJSON

-- | @application/json@
instance Produces GetPricesByOfferIds2 MimeJSON


-- *** getPromoOffers2

-- | @POST \/businesses\/{businessId}\/promos\/offers@
-- 
-- Получение списка товаров, которые участвуют или могут участвовать в акции
-- 
-- Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPromoOffers2
  :: (Consumes GetPromoOffers2 MimeJSON, MimeRender MimeJSON GetPromoOffersRequest)
  => GetPromoOffersRequest -- ^ "getPromoOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPromoOffers2 MimeJSON GetPromoOffersResponse MimeJSON
getPromoOffers2 getPromoOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getPromoOffersRequest

data GetPromoOffers2 
instance HasBodyParam GetPromoOffers2 GetPromoOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetPromoOffers2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetPromoOffers2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetPromoOffers2 MimeJSON

-- | @application/json@
instance Produces GetPromoOffers2 MimeJSON


-- *** getPromos2

-- | @POST \/businesses\/{businessId}\/promos@
-- 
-- Получение списка акций
-- 
-- Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPromos2
  :: (Consumes GetPromos2 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPromos2 MimeJSON GetPromosResponse MimeJSON
getPromos2 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetPromos2 
instance HasBodyParam GetPromos2 GetPromosRequest 

-- | @application/json@
instance Consumes GetPromos2 MimeJSON

-- | @application/json@
instance Produces GetPromos2 MimeJSON


-- *** getQualityRatingDetails1

-- | @POST \/campaigns\/{campaignId}\/ratings\/quality\/details@
-- 
-- Заказы, которые повлияли на индекс качества
-- 
-- Возвращает список заказов, которые повлияли на индекс качества магазина. Чтобы узнать значение индекса качества, выполните запрос [POST businesses/{businessId}/ratings/quality](../../reference/ratings/getQualityRatings.md).  |**⚙️ Лимит:** 100000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getQualityRatingDetails1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetQualityRatingDetails1 MimeNoContent GetQualityRatingDetailsResponse MimeJSON
getQualityRatingDetails1 (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/ratings/quality/details"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetQualityRatingDetails1  
-- | @application/json@
instance Produces GetQualityRatingDetails1 MimeJSON


-- *** getQualityRatings2

-- | @POST \/businesses\/{businessId}\/ratings\/quality@
-- 
-- Индекс качества магазинов
-- 
-- Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getQualityRatings2
  :: (Consumes GetQualityRatings2 MimeJSON, MimeRender MimeJSON GetQualityRatingRequest)
  => GetQualityRatingRequest -- ^ "getQualityRatingRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetQualityRatings2 MimeJSON GetQualityRatingResponse MimeJSON
getQualityRatings2 getQualityRatingRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/ratings/quality"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getQualityRatingRequest

data GetQualityRatings2 
instance HasBodyParam GetQualityRatings2 GetQualityRatingRequest 

-- | @application/json@
instance Consumes GetQualityRatings2 MimeJSON

-- | @application/json@
instance Produces GetQualityRatings2 MimeJSON


-- *** getReportInfo1

-- | @GET \/reports\/info\/{reportId}@
-- 
-- Получение заданного отчета
-- 
-- Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReportInfo1
  :: ReportId -- ^ "reportId" -  Идентификатор отчета, который вы получили после запуска генерации. 
  -> ПартнерскийAPIМаркетаRequest GetReportInfo1 MimeNoContent GetReportInfoResponse MimeJSON
getReportInfo1 (ReportId reportId) =
  _mkRequest "GET" ["/reports/info/",toPath reportId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReportInfo1  
-- | @application/json@
instance Produces GetReportInfo1 MimeJSON


-- *** getReturn1

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/returns\/{returnId}@
-- 
-- Информация о невыкупе или возврате
-- 
-- Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReturn1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ReturnId -- ^ "returnId" -  Идентификатор возврата.
  -> ПартнерскийAPIМаркетаRequest GetReturn1 MimeNoContent GetReturnResponse MimeJSON
getReturn1 (CampaignId campaignId) (OrderId orderId) (ReturnId returnId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/returns/",toPath returnId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReturn1  
-- | @application/json@
instance Produces GetReturn1 MimeJSON


-- *** getReturnApplication1

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/returns\/{returnId}\/application@
-- 
-- Получение заявления на возврат
-- 
-- Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReturnApplication1
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ReturnId -- ^ "returnId" -  Идентификатор возврата.
  -> ПартнерскийAPIМаркетаRequest GetReturnApplication1 MimeNoContent FilePath accept
getReturnApplication1  _ (CampaignId campaignId) (OrderId orderId) (ReturnId returnId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/returns/",toPath returnId,"/application"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReturnApplication1  
-- | @application/octet-stream@
instance Produces GetReturnApplication1 MimeOctetStream
-- | @application/json@
instance Produces GetReturnApplication1 MimeJSON


-- *** getReturnPhoto1

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/returns\/{returnId}\/decision\/{itemId}\/image\/{imageHash}@
-- 
-- Получение фотографии возврата
-- 
-- Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReturnPhoto1
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ReturnId -- ^ "returnId" -  Идентификатор возврата.
  -> ItemId -- ^ "itemId" -  Идентификатор товара в возврате.
  -> ImageHash -- ^ "imageHash" -  Хеш ссылки изображения для загрузки.
  -> ПартнерскийAPIМаркетаRequest GetReturnPhoto1 MimeNoContent FilePath accept
getReturnPhoto1  _ (CampaignId campaignId) (OrderId orderId) (ReturnId returnId) (ItemId itemId) (ImageHash imageHash) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/returns/",toPath returnId,"/decision/",toPath itemId,"/image/",toPath imageHash]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReturnPhoto1  
-- | @application/octet-stream@
instance Produces GetReturnPhoto1 MimeOctetStream
-- | @application/json@
instance Produces GetReturnPhoto1 MimeJSON


-- *** getReturns1

-- | @GET \/campaigns\/{campaignId}\/returns@
-- 
-- Список невыкупов и возвратов
-- 
-- Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReturns1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetReturns1 MimeNoContent GetReturnsResponse MimeJSON
getReturns1 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/returns"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReturns1  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetReturns1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetReturns1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "orderIds" - Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. 
instance HasOptionalParam GetReturns1 OrderIds where
  applyOptionalParam req (OrderIds xs) =
    req `addQuery` toQueryColl CommaSeparated ("orderIds", Just xs)

-- | /Optional Param/ "statuses" - Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. 
instance HasOptionalParam GetReturns1 Statuses where
  applyOptionalParam req (Statuses xs) =
    req `addQuery` toQueryColl CommaSeparated ("statuses", Just xs)

-- | /Optional Param/ "type" - Тип заказа для фильтрации:  * `RETURN` — возврат.  * `UNREDEEMED` — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. 
instance HasOptionalParam GetReturns1 ParamType where
  applyOptionalParam req (ParamType xs) =
    req `addQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "fromDate" - Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
instance HasOptionalParam GetReturns1 FromDate where
  applyOptionalParam req (FromDate xs) =
    req `addQuery` toQuery ("fromDate", Just xs)

-- | /Optional Param/ "toDate" - Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
instance HasOptionalParam GetReturns1 ToDate where
  applyOptionalParam req (ToDate xs) =
    req `addQuery` toQuery ("toDate", Just xs)

-- | /Optional Param/ "from_date" - {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `fromDate`.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления. 
instance HasOptionalParam GetReturns1 FromDate2 where
  applyOptionalParam req (FromDate2 xs) =
    req `addQuery` toQuery ("from_date", Just xs)

-- | /Optional Param/ "to_date" - {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `toDate`.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления. 
instance HasOptionalParam GetReturns1 ToDate2 where
  applyOptionalParam req (ToDate2 xs) =
    req `addQuery` toQuery ("to_date", Just xs)
-- | @application/json@
instance Produces GetReturns1 MimeJSON


-- *** getStocks2

-- | @POST \/campaigns\/{campaignId}\/offers\/stocks@
-- 
-- Информация об остатках и оборачиваемости
-- 
-- Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \"По умолчанию данные по оборачивамости не возращаются\" %}  Чтобы они были в ответе, передавайте `true` в поле `withTurnover`.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: <> (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getStocks2
  :: (Consumes GetStocks2 MimeJSON)
  => CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetStocks2 MimeJSON GetWarehouseStocksResponse MimeJSON
getStocks2 (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers/stocks"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetStocks2 
instance HasBodyParam GetStocks2 GetWarehouseStocksRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetStocks2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetStocks2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetStocks2 MimeJSON

-- | @application/json@
instance Produces GetStocks2 MimeJSON


-- *** getSuggestedOfferMappingEntries3

-- | @POST \/campaigns\/{campaignId}\/offer-mapping-entries\/suggestions@
-- 
-- Рекомендованные карточки для товаров
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku=», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getSuggestedOfferMappingEntries3
  :: (Consumes GetSuggestedOfferMappingEntries3 MimeJSON, MimeRender MimeJSON GetSuggestedOfferMappingEntriesRequest)
  => GetSuggestedOfferMappingEntriesRequest -- ^ "getSuggestedOfferMappingEntriesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetSuggestedOfferMappingEntries3 MimeJSON GetSuggestedOfferMappingEntriesResponse MimeJSON
getSuggestedOfferMappingEntries3 getSuggestedOfferMappingEntriesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-mapping-entries/suggestions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getSuggestedOfferMappingEntriesRequest

{-# DEPRECATED getSuggestedOfferMappingEntries3 "" #-}

data GetSuggestedOfferMappingEntries3 
instance HasBodyParam GetSuggestedOfferMappingEntries3 GetSuggestedOfferMappingEntriesRequest 

-- | @application/json@
instance Consumes GetSuggestedOfferMappingEntries3 MimeJSON

-- | @application/json@
instance Produces GetSuggestedOfferMappingEntries3 MimeJSON


-- *** getSuggestedOfferMappings0

-- | @POST \/businesses\/{businessId}\/offer-mappings\/suggestions@
-- 
-- Просмотр карточек на Маркете, которые подходят вашим товарам
-- 
-- Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getSuggestedOfferMappings0
  :: (Consumes GetSuggestedOfferMappings0 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetSuggestedOfferMappings0 MimeJSON GetSuggestedOfferMappingsResponse MimeJSON
getSuggestedOfferMappings0 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/suggestions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetSuggestedOfferMappings0 
instance HasBodyParam GetSuggestedOfferMappings0 GetSuggestedOfferMappingsRequest 

-- | @application/json@
instance Consumes GetSuggestedOfferMappings0 MimeJSON

-- | @application/json@
instance Produces GetSuggestedOfferMappings0 MimeJSON


-- *** getSuggestedPrices3

-- | @POST \/campaigns\/{campaignId}\/offer-prices\/suggestions@
-- 
-- Цены для продвижения товаров
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \"\" %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getSuggestedPrices3
  :: (Consumes GetSuggestedPrices3 MimeJSON, MimeRender MimeJSON SuggestPricesRequest)
  => SuggestPricesRequest -- ^ "suggestPricesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetSuggestedPrices3 MimeJSON SuggestPricesResponse MimeJSON
getSuggestedPrices3 suggestPricesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-prices/suggestions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` suggestPricesRequest

{-# DEPRECATED getSuggestedPrices3 "" #-}

data GetSuggestedPrices3 
instance HasBodyParam GetSuggestedPrices3 SuggestPricesRequest 

-- | @application/json@
instance Consumes GetSuggestedPrices3 MimeJSON

-- | @application/json@
instance Produces GetSuggestedPrices3 MimeJSON


-- *** getWarehouses1

-- | @GET \/businesses\/{businessId}\/warehouses@
-- 
-- Список складов и групп складов
-- 
-- Возвращает список складов и, если склады объединены, список групп складов. [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)  Среди прочего запрос позволяет определить идентификатор, который нужно использовать при передаче остатков для группы складов.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getWarehouses1
  :: BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetWarehouses1 MimeNoContent GetWarehousesResponse MimeJSON
getWarehouses1 (BusinessId businessId) =
  _mkRequest "GET" ["/businesses/",toPath businessId,"/warehouses"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetWarehouses1  
-- | @application/json@
instance Produces GetWarehouses1 MimeJSON


-- *** provideOrderDigitalCodes0

-- | @POST \/campaigns\/{campaignId}\/orders\/{orderId}\/deliverDigitalGoods@
-- 
-- Передача ключей цифровых товаров
-- 
-- Передает ключи цифровых товаров, которые покупатель заказал и оплатил. После выполнения запроса Маркет отправит ему письмо с ключами и инструкциями по активации, а также переведет заказ в финальный статус `DELIVERED`.  Ключ нужно передать в течение 30 минут после перехода заказа в статус `PROCESSING`.  Если в один заказ входят несколько ключей, передавайте их все в одном запросе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
provideOrderDigitalCodes0
  :: (Consumes ProvideOrderDigitalCodes0 MimeJSON, MimeRender MimeJSON ProvideOrderDigitalCodesRequest)
  => ProvideOrderDigitalCodesRequest -- ^ "provideOrderDigitalCodesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest ProvideOrderDigitalCodes0 MimeJSON EmptyApiResponse MimeJSON
provideOrderDigitalCodes0 provideOrderDigitalCodesRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/deliverDigitalGoods"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` provideOrderDigitalCodesRequest

data ProvideOrderDigitalCodes0 
instance HasBodyParam ProvideOrderDigitalCodes0 ProvideOrderDigitalCodesRequest 

-- | @application/json@
instance Consumes ProvideOrderDigitalCodes0 MimeJSON

-- | @application/json@
instance Produces ProvideOrderDigitalCodes0 MimeJSON


-- *** provideOrderItemIdentifiers1

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/identifiers@
-- 
-- Передача кодов маркировки единиц товара
-- 
-- {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Передает Маркету коды маркировки для единиц товара в указанном заказе.  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  {% note warning %}  Прежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).  {% endnote %}  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
provideOrderItemIdentifiers1
  :: (Consumes ProvideOrderItemIdentifiers1 MimeJSON, MimeRender MimeJSON ProvideOrderItemIdentifiersRequest)
  => ProvideOrderItemIdentifiersRequest -- ^ "provideOrderItemIdentifiersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest ProvideOrderItemIdentifiers1 MimeJSON ProvideOrderItemIdentifiersResponse MimeJSON
provideOrderItemIdentifiers1 provideOrderItemIdentifiersRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/identifiers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` provideOrderItemIdentifiersRequest

data ProvideOrderItemIdentifiers1 
instance HasBodyParam ProvideOrderItemIdentifiers1 ProvideOrderItemIdentifiersRequest 

-- | @application/json@
instance Consumes ProvideOrderItemIdentifiers1 MimeJSON

-- | @application/json@
instance Produces ProvideOrderItemIdentifiers1 MimeJSON


-- *** putBidsForBusiness0

-- | @PUT \/businesses\/{businessId}\/bids@
-- 
-- Включение буста продаж и установка ставок
-- 
-- Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \"Как в кабинете выглядит кампания, созданная через API\" %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
putBidsForBusiness0
  :: (Consumes PutBidsForBusiness0 MimeJSON, MimeRender MimeJSON PutSkuBidsRequest)
  => PutSkuBidsRequest -- ^ "putSkuBidsRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest PutBidsForBusiness0 MimeJSON EmptyApiResponse MimeJSON
putBidsForBusiness0 putSkuBidsRequest (BusinessId businessId) =
  _mkRequest "PUT" ["/businesses/",toPath businessId,"/bids"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` putSkuBidsRequest

data PutBidsForBusiness0 

-- | /Body Param/ "PutSkuBidsRequest" - description
instance HasBodyParam PutBidsForBusiness0 PutSkuBidsRequest 

-- | @application/json@
instance Consumes PutBidsForBusiness0 MimeJSON

-- | @application/json@
instance Produces PutBidsForBusiness0 MimeJSON


-- *** putBidsForCampaign0

-- | @PUT \/campaigns\/{campaignId}\/bids@
-- 
-- Включение буста продаж и установка ставок для магазина
-- 
-- Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
putBidsForCampaign0
  :: (Consumes PutBidsForCampaign0 MimeJSON, MimeRender MimeJSON PutSkuBidsRequest)
  => PutSkuBidsRequest -- ^ "putSkuBidsRequest" -  description
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest PutBidsForCampaign0 MimeJSON EmptyApiResponse MimeJSON
putBidsForCampaign0 putSkuBidsRequest (CampaignId campaignId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/bids"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` putSkuBidsRequest

data PutBidsForCampaign0 

-- | /Body Param/ "PutSkuBidsRequest" - description
instance HasBodyParam PutBidsForCampaign0 PutSkuBidsRequest 

-- | @application/json@
instance Consumes PutBidsForCampaign0 MimeJSON

-- | @application/json@
instance Produces PutBidsForCampaign0 MimeJSON


-- *** refreshFeed0

-- | @POST \/campaigns\/{campaignId}\/feeds\/{feedId}\/refresh@
-- 
-- Сообщить, что прайс-лист обновился
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
refreshFeed0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest RefreshFeed0 MimeNoContent EmptyApiResponse MimeJSON
refreshFeed0 (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId,"/refresh"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED refreshFeed0 "" #-}

data RefreshFeed0  
-- | @application/json@
instance Produces RefreshFeed0 MimeJSON


-- *** searchModels0

-- | @GET \/models@
-- 
-- Поиск модели товара
-- 
-- Возвращает информацию о моделях, удовлетворяющих заданным в запросе условиям поиска.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов `GET models`, `GET models/{modelId}` и `POST models` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
searchModels0
  :: Query -- ^ "query" -  Поисковый запрос по названию модели товара.
  -> RegionId -- ^ "regionId" -  Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  -> ПартнерскийAPIМаркетаRequest SearchModels0 MimeNoContent SearchModelsResponse MimeJSON
searchModels0 (Query query) (RegionId regionId) =
  _mkRequest "GET" ["/models"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `addQuery` toQuery ("query", Just query)
    `addQuery` toQuery ("regionId", Just regionId)

data SearchModels0  

-- | /Optional Param/ "currency" - Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
instance HasOptionalParam SearchModels0 Currency where
  applyOptionalParam req (Currency xs) =
    req `addQuery` toQuery ("currency", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam SearchModels0 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam SearchModels0 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces SearchModels0 MimeJSON


-- *** searchRegionChildren2

-- | @GET \/regions\/{regionId}\/children@
-- 
-- Информация о дочерних регионах
-- 
-- Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
searchRegionChildren2
  :: RegionId -- ^ "regionId" -  Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  -> ПартнерскийAPIМаркетаRequest SearchRegionChildren2 MimeNoContent GetRegionWithChildrenResponse MimeJSON
searchRegionChildren2 (RegionId regionId) =
  _mkRequest "GET" ["/regions/",toPath regionId,"/children"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data SearchRegionChildren2  

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam SearchRegionChildren2 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam SearchRegionChildren2 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces SearchRegionChildren2 MimeJSON


-- *** searchRegionsById2

-- | @GET \/regions\/{regionId}@
-- 
-- Информация о регионе
-- 
-- Возвращает информацию о регионе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
searchRegionsById2
  :: RegionId -- ^ "regionId" -  Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  -> ПартнерскийAPIМаркетаRequest SearchRegionsById2 MimeNoContent GetRegionsResponse MimeJSON
searchRegionsById2 (RegionId regionId) =
  _mkRequest "GET" ["/regions/",toPath regionId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data SearchRegionsById2  
-- | @application/json@
instance Produces SearchRegionsById2 MimeJSON


-- *** searchRegionsByName2

-- | @GET \/regions@
-- 
-- Поиск регионов по их имени
-- 
-- Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
searchRegionsByName2
  :: Name -- ^ "name" -  Название региона.  Важно учитывать регистр: первая буква должна быть заглавной, остальные — строчными. Например, `Москва`. 
  -> ПартнерскийAPIМаркетаRequest SearchRegionsByName2 MimeNoContent GetRegionsResponse MimeJSON
searchRegionsByName2 (Name name) =
  _mkRequest "GET" ["/regions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `addQuery` toQuery ("name", Just name)

data SearchRegionsByName2  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam SearchRegionsByName2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam SearchRegionsByName2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces SearchRegionsByName2 MimeJSON


-- *** sendFileToChat0

-- | @POST \/businesses\/{businessId}\/chats\/file\/send@
-- 
-- Отправка файла в чат
-- 
-- Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
sendFileToChat0
  :: (Consumes SendFileToChat0 MimeMultipartFormData)
  => File -- ^ "file" -  Содержимое файла. Максимальный размер файла — 5 Мбайт.
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest SendFileToChat0 MimeMultipartFormData EmptyApiResponse MimeJSON
sendFileToChat0 (File file) (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/file/send"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `_addMultiFormPart` NH.partFileSource "file" file
    `addQuery` toQuery ("chatId", Just chatId)

data SendFileToChat0  

-- | @multipart/form-data@
instance Consumes SendFileToChat0 MimeMultipartFormData

-- | @application/json@
instance Produces SendFileToChat0 MimeJSON


-- *** sendMessageToChat0

-- | @POST \/businesses\/{businessId}\/chats\/message@
-- 
-- Отправка сообщения в чат
-- 
-- Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
sendMessageToChat0
  :: (Consumes SendMessageToChat0 MimeJSON, MimeRender MimeJSON SendMessageToChatRequest)
  => SendMessageToChatRequest -- ^ "sendMessageToChatRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest SendMessageToChat0 MimeJSON EmptyApiResponse MimeJSON
sendMessageToChat0 sendMessageToChatRequest (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/message"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` sendMessageToChatRequest
    `addQuery` toQuery ("chatId", Just chatId)

data SendMessageToChat0 

-- | /Body Param/ "SendMessageToChatRequest" - description
instance HasBodyParam SendMessageToChat0 SendMessageToChatRequest 

-- | @application/json@
instance Consumes SendMessageToChat0 MimeJSON

-- | @application/json@
instance Produces SendMessageToChat0 MimeJSON


-- *** setFeedParams0

-- | @POST \/campaigns\/{campaignId}\/feeds\/{feedId}\/params@
-- 
-- Изменение параметров прайс-листа
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
setFeedParams0
  :: (Consumes SetFeedParams0 MimeJSON, MimeRender MimeJSON SetFeedParamsRequest)
  => SetFeedParamsRequest -- ^ "setFeedParamsRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest SetFeedParams0 MimeJSON EmptyApiResponse MimeJSON
setFeedParams0 setFeedParamsRequest (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId,"/params"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` setFeedParamsRequest

{-# DEPRECATED setFeedParams0 "" #-}

data SetFeedParams0 
instance HasBodyParam SetFeedParams0 SetFeedParamsRequest 

-- | @application/json@
instance Consumes SetFeedParams0 MimeJSON

-- | @application/json@
instance Produces SetFeedParams0 MimeJSON


-- *** setOrderBoxLayout2

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/boxes@
-- 
-- Подготовка заказа
-- 
-- {% note tip \"Подходит и для DBS\" %}  Запрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.  {% endnote %}  Позволяет выполнить три операции:  * передать Маркету информацию о распределении товаров по коробкам; * передать Маркету коды маркировки для товаров; * удалить товар из заказа, если его не оказалось на складе.  Если нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.  ## Как передать информацию о распределении товаров  В этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:  * **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.  * **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.  ⚠️ Одна коробка не может содержать и товары целиком, и части товаров.  ## Как передавать коды маркировки  Если в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  Если товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.  ## Как удалить товар из заказа  Чтобы удалить товар из заказа:  1. Добавьте в запрос `allowRemove: true`. 2. Передайте распределение по коробкам без товара, который нужно удалить.  {% note warning \"Удаление нельзя отменить\" %}  Эта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.  {% endnote %}  Чтобы удалить позицию целиком, не передавайте соответствующий `OrderBoxLayoutItemDTO`. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле `fullCount`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  ## Примеры  {% cut \"Товар умещается в коробку\" %}  Вот как будет выглядеть запрос, если в одной коробке едут:    * три единицы одного товара, требующего маркировки;   * одна единица другого товара, не требущего маркировки.    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"fullCount\": 3,                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           },                           {                               \"cis\": \"010304109478gftJ14545762!\\u001dhGt264\"                           },                           {                               \"cis\": \"010304109478fRs28323ks23!\\u001dhet201\"                           }                       ]                   },                   {                       \"id\": 654321,                       \"fullCount\": 1                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Товар едет в разных коробках\" %}  Вот как будет выглядеть запрос, если товар едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Одинаковые товары, где каждый едет в нескольких коробках\" %}  Вот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
setOrderBoxLayout2
  :: (Consumes SetOrderBoxLayout2 MimeJSON, MimeRender MimeJSON SetOrderBoxLayoutRequest)
  => SetOrderBoxLayoutRequest -- ^ "setOrderBoxLayoutRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest SetOrderBoxLayout2 MimeJSON SetOrderBoxLayoutResponse MimeJSON
setOrderBoxLayout2 setOrderBoxLayoutRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/boxes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` setOrderBoxLayoutRequest

data SetOrderBoxLayout2 
instance HasBodyParam SetOrderBoxLayout2 SetOrderBoxLayoutRequest 

-- | @application/json@
instance Consumes SetOrderBoxLayout2 MimeJSON

-- | @application/json@
instance Produces SetOrderBoxLayout2 MimeJSON


-- *** setOrderDeliveryDate0

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/delivery\/date@
-- 
-- Изменение даты доставки заказа
-- 
-- Метод изменяет дату доставки заказа в статусе `PROCESSING` или `DELIVERY`. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
setOrderDeliveryDate0
  :: (Consumes SetOrderDeliveryDate0 MimeJSON, MimeRender MimeJSON SetOrderDeliveryDateRequest)
  => SetOrderDeliveryDateRequest -- ^ "setOrderDeliveryDateRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest SetOrderDeliveryDate0 MimeJSON EmptyApiResponse MimeJSON
setOrderDeliveryDate0 setOrderDeliveryDateRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/delivery/date"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` setOrderDeliveryDateRequest

data SetOrderDeliveryDate0 
instance HasBodyParam SetOrderDeliveryDate0 SetOrderDeliveryDateRequest 

-- | @application/json@
instance Consumes SetOrderDeliveryDate0 MimeJSON

-- | @application/json@
instance Produces SetOrderDeliveryDate0 MimeJSON


-- *** setOrderDeliveryTrackCode0

-- | @POST \/campaigns\/{campaignId}\/orders\/{orderId}\/delivery\/track@
-- 
-- Передача трек‑номера посылки
-- 
-- {% note warning \"Этот запрос только для DBS\" %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY` или `PICKUP`.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
setOrderDeliveryTrackCode0
  :: (Consumes SetOrderDeliveryTrackCode0 MimeJSON, MimeRender MimeJSON SetOrderDeliveryTrackCodeRequest)
  => SetOrderDeliveryTrackCodeRequest -- ^ "setOrderDeliveryTrackCodeRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest SetOrderDeliveryTrackCode0 MimeJSON EmptyApiResponse MimeJSON
setOrderDeliveryTrackCode0 setOrderDeliveryTrackCodeRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/delivery/track"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` setOrderDeliveryTrackCodeRequest

data SetOrderDeliveryTrackCode0 
instance HasBodyParam SetOrderDeliveryTrackCode0 SetOrderDeliveryTrackCodeRequest 

-- | @application/json@
instance Consumes SetOrderDeliveryTrackCode0 MimeJSON

-- | @application/json@
instance Produces SetOrderDeliveryTrackCode0 MimeJSON


-- *** setOrderShipmentBoxes1

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/delivery\/shipments\/{shipmentId}\/boxes@
-- 
-- Передача количества грузовых мест в заказе
-- 
-- {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Отгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.  Количество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).  Метод устроен немного нестандартно: количество задается длиной массива пустых объектов.  Раньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.  {% cut \"Как было раньше\" %}  Структура тела PUT-запроса:  ``` {   \"boxes\":   [     {       \"fulfilmentId\": \"{string}\",       \"weight\": {int64},       \"width\": {int64},       \"height\": {int64},       \"depth\": {int64},       \"items\":       [         {           \"id\": {int64},           \"count\": {int32}         },         ...       ]     },     ...   ] } ``` | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `boxes`       |           | Список грузовых мест.       |  **Параметры, вложенные в `boxes`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `fulfilmentId`       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: `номер заказа на Маркете-номер грузового места`. Например, `7206821‑1, 7206821‑2` и т. д. | | `weight`       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. | | `width`       | Int64   | Ширина грузового места в сантиметрах.       | | `height`       | Int64   | Высота грузового места в сантиметрах.       | | `depth`       | Int64   | Глубина грузового места в сантиметрах.        | | `items`       | Int64   | Список товаров в грузовом месте.       |  **Параметры, вложенные в `items`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `id`       | Int64     | Идентификатор товара в рамках заказа.   | | `count`    | Int32     | Количество единиц товара в грузовом месте.       |  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
setOrderShipmentBoxes1
  :: (Consumes SetOrderShipmentBoxes1 MimeJSON, MimeRender MimeJSON SetOrderShipmentBoxesRequest)
  => SetOrderShipmentBoxesRequest -- ^ "setOrderShipmentBoxesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ShipmentId -- ^ "shipmentId" -  Параметр больше не используется. Вставьте любое число — просто чтобы получился корректный URL. 
  -> ПартнерскийAPIМаркетаRequest SetOrderShipmentBoxes1 MimeJSON SetOrderShipmentBoxesResponse MimeJSON
setOrderShipmentBoxes1 setOrderShipmentBoxesRequest (CampaignId campaignId) (OrderId orderId) (ShipmentId shipmentId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/delivery/shipments/",toPath shipmentId,"/boxes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` setOrderShipmentBoxesRequest

data SetOrderShipmentBoxes1 
instance HasBodyParam SetOrderShipmentBoxes1 SetOrderShipmentBoxesRequest 

-- | @application/json@
instance Consumes SetOrderShipmentBoxes1 MimeJSON

-- | @application/json@
instance Produces SetOrderShipmentBoxes1 MimeJSON


-- *** setReturnDecision0

-- | @POST \/campaigns\/{campaignId}\/orders\/{orderId}\/returns\/{returnId}\/decision@
-- 
-- Принятие или изменение решения по возврату
-- 
-- Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
setReturnDecision0
  :: (Consumes SetReturnDecision0 MimeJSON, MimeRender MimeJSON SetReturnDecisionRequest)
  => SetReturnDecisionRequest -- ^ "setReturnDecisionRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ReturnId -- ^ "returnId" -  Идентификатор возврата.
  -> ПартнерскийAPIМаркетаRequest SetReturnDecision0 MimeJSON EmptyApiResponse MimeJSON
setReturnDecision0 setReturnDecisionRequest (CampaignId campaignId) (OrderId orderId) (ReturnId returnId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/returns/",toPath returnId,"/decision"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` setReturnDecisionRequest

data SetReturnDecision0 
instance HasBodyParam SetReturnDecision0 SetReturnDecisionRequest 

-- | @application/json@
instance Consumes SetReturnDecision0 MimeJSON

-- | @application/json@
instance Produces SetReturnDecision0 MimeJSON


-- *** skipGoodsFeedbacksReaction2

-- | @POST \/businesses\/{businessId}\/goods-feedback\/skip-reaction@
-- 
-- Отказ от ответа на отзывы
-- 
-- Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
skipGoodsFeedbacksReaction2
  :: (Consumes SkipGoodsFeedbacksReaction2 MimeJSON, MimeRender MimeJSON SkipGoodsFeedbackReactionRequest)
  => SkipGoodsFeedbackReactionRequest -- ^ "skipGoodsFeedbackReactionRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest SkipGoodsFeedbacksReaction2 MimeJSON EmptyApiResponse MimeJSON
skipGoodsFeedbacksReaction2 skipGoodsFeedbackReactionRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/skip-reaction"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` skipGoodsFeedbackReactionRequest

data SkipGoodsFeedbacksReaction2 
instance HasBodyParam SkipGoodsFeedbacksReaction2 SkipGoodsFeedbackReactionRequest 

-- | @application/json@
instance Consumes SkipGoodsFeedbacksReaction2 MimeJSON

-- | @application/json@
instance Produces SkipGoodsFeedbacksReaction2 MimeJSON


-- *** submitReturnDecision0

-- | @POST \/campaigns\/{campaignId}\/orders\/{orderId}\/returns\/{returnId}\/decision\/submit@
-- 
-- Подтверждение решения по возврату
-- 
-- Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
submitReturnDecision0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ReturnId -- ^ "returnId" -  Идентификатор возврата.
  -> ПартнерскийAPIМаркетаRequest SubmitReturnDecision0 MimeNoContent EmptyApiResponse MimeJSON
submitReturnDecision0 (CampaignId campaignId) (OrderId orderId) (ReturnId returnId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/returns/",toPath returnId,"/decision/submit"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data SubmitReturnDecision0  
-- | @application/json@
instance Produces SubmitReturnDecision0 MimeJSON


-- *** updateBusinessPrices2

-- | @POST \/businesses\/{businessId}\/offer-prices\/updates@
-- 
-- Установка цен на товары во всех магазинах
-- 
-- Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateBusinessPrices2
  :: (Consumes UpdateBusinessPrices2 MimeJSON, MimeRender MimeJSON UpdateBusinessPricesRequest)
  => UpdateBusinessPricesRequest -- ^ "updateBusinessPricesRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateBusinessPrices2 MimeJSON EmptyApiResponse MimeJSON
updateBusinessPrices2 updateBusinessPricesRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-prices/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateBusinessPricesRequest

data UpdateBusinessPrices2 
instance HasBodyParam UpdateBusinessPrices2 UpdateBusinessPricesRequest 

-- | @application/json@
instance Consumes UpdateBusinessPrices2 MimeJSON

-- | @application/json@
instance Produces UpdateBusinessPrices2 MimeJSON


-- *** updateCampaignOffers0

-- | @POST \/campaigns\/{campaignId}\/offers\/update@
-- 
-- Изменение условий продажи товаров в магазине
-- 
-- Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateCampaignOffers0
  :: (Consumes UpdateCampaignOffers0 MimeJSON, MimeRender MimeJSON UpdateCampaignOffersRequest)
  => UpdateCampaignOffersRequest -- ^ "updateCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateCampaignOffers0 MimeJSON EmptyApiResponse MimeJSON
updateCampaignOffers0 updateCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateCampaignOffersRequest

data UpdateCampaignOffers0 
instance HasBodyParam UpdateCampaignOffers0 UpdateCampaignOffersRequest 

-- | @application/json@
instance Consumes UpdateCampaignOffers0 MimeJSON

-- | @application/json@
instance Produces UpdateCampaignOffers0 MimeJSON


-- *** updateGoodsFeedbackComment2

-- | @POST \/businesses\/{businessId}\/goods-feedback\/comments\/update@
-- 
-- Добавление нового или изменение созданного комментария
-- 
-- Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateGoodsFeedbackComment2
  :: (Consumes UpdateGoodsFeedbackComment2 MimeJSON, MimeRender MimeJSON UpdateGoodsFeedbackCommentRequest)
  => UpdateGoodsFeedbackCommentRequest -- ^ "updateGoodsFeedbackCommentRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateGoodsFeedbackComment2 MimeJSON UpdateGoodsFeedbackCommentResponse MimeJSON
updateGoodsFeedbackComment2 updateGoodsFeedbackCommentRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/comments/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateGoodsFeedbackCommentRequest

data UpdateGoodsFeedbackComment2 
instance HasBodyParam UpdateGoodsFeedbackComment2 UpdateGoodsFeedbackCommentRequest 

-- | @application/json@
instance Consumes UpdateGoodsFeedbackComment2 MimeJSON

-- | @application/json@
instance Produces UpdateGoodsFeedbackComment2 MimeJSON


-- *** updateOfferContent0

-- | @POST \/businesses\/{businessId}\/offer-cards\/update@
-- 
-- Редактирование категорийных характеристик товара
-- 
-- Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOfferContent0
  :: (Consumes UpdateOfferContent0 MimeJSON, MimeRender MimeJSON UpdateOfferContentRequest)
  => UpdateOfferContentRequest -- ^ "updateOfferContentRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOfferContent0 MimeJSON UpdateOfferContentResponse MimeJSON
updateOfferContent0 updateOfferContentRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-cards/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOfferContentRequest

data UpdateOfferContent0 
instance HasBodyParam UpdateOfferContent0 UpdateOfferContentRequest 

-- | @application/json@
instance Consumes UpdateOfferContent0 MimeJSON

-- | @application/json@
instance Produces UpdateOfferContent0 MimeJSON


-- *** updateOfferMappingEntries3

-- | @POST \/campaigns\/{campaignId}\/offer-mapping-entries\/updates@
-- 
-- Добавление и редактирование товаров в каталоге
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре `shopSku` ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре `shopSku` ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус `NEED_CONTENT` (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус `NEED_INFO` (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOfferMappingEntries3
  :: (Consumes UpdateOfferMappingEntries3 MimeJSON, MimeRender MimeJSON UpdateOfferMappingEntryRequest)
  => UpdateOfferMappingEntryRequest -- ^ "updateOfferMappingEntryRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOfferMappingEntries3 MimeJSON EmptyApiResponse MimeJSON
updateOfferMappingEntries3 updateOfferMappingEntryRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-mapping-entries/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOfferMappingEntryRequest

{-# DEPRECATED updateOfferMappingEntries3 "" #-}

data UpdateOfferMappingEntries3 
instance HasBodyParam UpdateOfferMappingEntries3 UpdateOfferMappingEntryRequest 

-- | @application/json@
instance Consumes UpdateOfferMappingEntries3 MimeJSON

-- | @application/json@
instance Produces UpdateOfferMappingEntries3 MimeJSON


-- *** updateOfferMappings0

-- | @POST \/businesses\/{businessId}\/offer-mappings\/update@
-- 
-- Добавление товаров в каталог и изменение информации о них
-- 
-- Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOfferMappings0
  :: (Consumes UpdateOfferMappings0 MimeJSON, MimeRender MimeJSON UpdateOfferMappingsRequest)
  => UpdateOfferMappingsRequest -- ^ "updateOfferMappingsRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOfferMappings0 MimeJSON UpdateOfferMappingsResponse MimeJSON
updateOfferMappings0 updateOfferMappingsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOfferMappingsRequest

data UpdateOfferMappings0 
instance HasBodyParam UpdateOfferMappings0 UpdateOfferMappingsRequest 

-- | @application/json@
instance Consumes UpdateOfferMappings0 MimeJSON

-- | @application/json@
instance Produces UpdateOfferMappings0 MimeJSON


-- *** updateOrderItems1

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/items@
-- 
-- Удаление товара из заказа или уменьшение числа единиц
-- 
-- {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Изменяет состав заказа, если позволяет выбранная служба доставки, в случаях:  * покупатель уменьшил количество товара; * магазин не может поставить все товары в заказе.  Для этого заказ должен находится в статусе `\"status\": \"PROCESSING\"` этапа обработки `\"substatus\": \"STARTED\"`. После передачи статуса `\"substatus\": \"READY_TO_SHIP\"` изменить состав невозможно.  Если одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте `count` параметра `item`.  Чтобы полностью удалить товар из заказа:  * передайте значение `0`; или * не передавайте параметр `item`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  **Возврат денег покупателю**  Если покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:  * при оплате банковской картой — с момента, когда магазин переведет заказ в статус `SHIPPED`;  * при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOrderItems1
  :: (Consumes UpdateOrderItems1 MimeJSON, MimeRender MimeJSON UpdateOrderItemRequest)
  => UpdateOrderItemRequest -- ^ "updateOrderItemRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest UpdateOrderItems1 MimeJSON NoContent MimeNoContent
updateOrderItems1 updateOrderItemRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/items"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOrderItemRequest

data UpdateOrderItems1 
instance HasBodyParam UpdateOrderItems1 UpdateOrderItemRequest 

-- | @application/json@
instance Consumes UpdateOrderItems1 MimeJSON

instance Produces UpdateOrderItems1 MimeNoContent


-- *** updateOrderStatus1

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/status@
-- 
-- Изменение статуса одного заказа
-- 
-- Изменяет статус заказа. Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOrderStatus1
  :: (Consumes UpdateOrderStatus1 MimeJSON, MimeRender MimeJSON UpdateOrderStatusRequest)
  => UpdateOrderStatusRequest -- ^ "updateOrderStatusRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest UpdateOrderStatus1 MimeJSON UpdateOrderStatusResponse MimeJSON
updateOrderStatus1 updateOrderStatusRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOrderStatusRequest

data UpdateOrderStatus1 
instance HasBodyParam UpdateOrderStatus1 UpdateOrderStatusRequest 

-- | @application/json@
instance Consumes UpdateOrderStatus1 MimeJSON

-- | @application/json@
instance Produces UpdateOrderStatus1 MimeJSON


-- *** updateOrderStatuses1

-- | @POST \/campaigns\/{campaignId}\/orders\/status-update@
-- 
-- Изменение статусов нескольких заказов
-- 
-- Изменяет статусы нескольких заказов.  Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"`и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  Максимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOrderStatuses1
  :: (Consumes UpdateOrderStatuses1 MimeJSON, MimeRender MimeJSON UpdateOrderStatusesRequest)
  => UpdateOrderStatusesRequest -- ^ "updateOrderStatusesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOrderStatuses1 MimeJSON UpdateOrderStatusesResponse MimeJSON
updateOrderStatuses1 updateOrderStatusesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/status-update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOrderStatusesRequest

data UpdateOrderStatuses1 
instance HasBodyParam UpdateOrderStatuses1 UpdateOrderStatusesRequest 

-- | @application/json@
instance Consumes UpdateOrderStatuses1 MimeJSON

-- | @application/json@
instance Produces UpdateOrderStatuses1 MimeJSON


-- *** updateOrderStorageLimit0

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/delivery\/storage-limit@
-- 
-- Продление срока хранения заказа
-- 
-- Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе `PICKUP`. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре `outletStorageLimitDate` запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOrderStorageLimit0
  :: (Consumes UpdateOrderStorageLimit0 MimeJSON, MimeRender MimeJSON UpdateOrderStorageLimitRequest)
  => UpdateOrderStorageLimitRequest -- ^ "updateOrderStorageLimitRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest UpdateOrderStorageLimit0 MimeJSON EmptyApiResponse MimeJSON
updateOrderStorageLimit0 updateOrderStorageLimitRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/delivery/storage-limit"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOrderStorageLimitRequest

data UpdateOrderStorageLimit0 
instance HasBodyParam UpdateOrderStorageLimit0 UpdateOrderStorageLimitRequest 

-- | @application/json@
instance Consumes UpdateOrderStorageLimit0 MimeJSON

-- | @application/json@
instance Produces UpdateOrderStorageLimit0 MimeJSON


-- *** updateOutlet0

-- | @PUT \/campaigns\/{campaignId}\/outlets\/{outletId}@
-- 
-- Изменение информации о точке продаж
-- 
-- Изменяет информацию о точке продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOutlet0
  :: (Consumes UpdateOutlet0 MimeJSON, MimeRender MimeJSON ChangeOutletRequest)
  => ChangeOutletRequest -- ^ "changeOutletRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OutletId -- ^ "outletId" -  Идентификатор точки продаж.
  -> ПартнерскийAPIМаркетаRequest UpdateOutlet0 MimeJSON EmptyApiResponse MimeJSON
updateOutlet0 changeOutletRequest (CampaignId campaignId) (OutletId outletId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/outlets/",toPath outletId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` changeOutletRequest

data UpdateOutlet0 
instance HasBodyParam UpdateOutlet0 ChangeOutletRequest 

-- | @application/json@
instance Consumes UpdateOutlet0 MimeJSON

-- | @application/json@
instance Produces UpdateOutlet0 MimeJSON


-- *** updateOutletLicenses0

-- | @POST \/campaigns\/{campaignId}\/outlets\/licenses@
-- 
-- Создание и изменение лицензий для точек продаж
-- 
-- Передает информацию о новых и существующих лицензиях для точек продаж. Поддерживаются только лицензии на розничную продажу алкоголя.  Чтобы размещать алкогольную продукцию на Маркете, надо также прислать гарантийное письмо (если вы еще не делали этого раньше) и правильно оформить предложения в прайс-листе. Далее информация о лицензиях проходит проверку.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOutletLicenses0
  :: (Consumes UpdateOutletLicenses0 MimeJSON, MimeRender MimeJSON UpdateOutletLicenseRequest)
  => UpdateOutletLicenseRequest -- ^ "updateOutletLicenseRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOutletLicenses0 MimeJSON EmptyApiResponse MimeJSON
updateOutletLicenses0 updateOutletLicenseRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/outlets/licenses"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOutletLicenseRequest

data UpdateOutletLicenses0 
instance HasBodyParam UpdateOutletLicenses0 UpdateOutletLicenseRequest 

-- | @application/json@
instance Consumes UpdateOutletLicenses0 MimeJSON

-- | @application/json@
instance Produces UpdateOutletLicenses0 MimeJSON


-- *** updatePrices2

-- | @POST \/campaigns\/{campaignId}\/offer-prices\/updates@
-- 
-- Установка цен на товары в конкретном магазине
-- 
-- Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updatePrices2
  :: (Consumes UpdatePrices2 MimeJSON, MimeRender MimeJSON UpdatePricesRequest)
  => UpdatePricesRequest -- ^ "updatePricesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdatePrices2 MimeJSON EmptyApiResponse MimeJSON
updatePrices2 updatePricesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-prices/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updatePricesRequest

data UpdatePrices2 
instance HasBodyParam UpdatePrices2 UpdatePricesRequest 

-- | @application/json@
instance Consumes UpdatePrices2 MimeJSON

-- | @application/json@
instance Produces UpdatePrices2 MimeJSON


-- *** updatePromoOffers2

-- | @POST \/businesses\/{businessId}\/promos\/offers\/update@
-- 
-- Добавление товаров в акцию или изменение их цен
-- 
-- Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updatePromoOffers2
  :: (Consumes UpdatePromoOffers2 MimeJSON, MimeRender MimeJSON UpdatePromoOffersRequest)
  => UpdatePromoOffersRequest -- ^ "updatePromoOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdatePromoOffers2 MimeJSON UpdatePromoOffersResponse MimeJSON
updatePromoOffers2 updatePromoOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos/offers/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updatePromoOffersRequest

data UpdatePromoOffers2 
instance HasBodyParam UpdatePromoOffers2 UpdatePromoOffersRequest 

-- | @application/json@
instance Consumes UpdatePromoOffers2 MimeJSON

-- | @application/json@
instance Produces UpdatePromoOffers2 MimeJSON


-- *** updateStocks1

-- | @PUT \/campaigns\/{campaignId}\/offers\/stocks@
-- 
-- Передача информации об остатках
-- 
-- Передает данные об остатках товаров на витрине.  Обязательно указывайте SKU **в точности** так, как он указан в каталоге. Например, _557722_ и _0557722_ — это два разных SKU.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateStocks1
  :: (Consumes UpdateStocks1 MimeJSON, MimeRender MimeJSON UpdateStocksRequest)
  => UpdateStocksRequest -- ^ "updateStocksRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateStocks1 MimeJSON EmptyApiResponse MimeJSON
updateStocks1 updateStocksRequest (CampaignId campaignId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/offers/stocks"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateStocksRequest

data UpdateStocks1 
instance HasBodyParam UpdateStocks1 UpdateStocksRequest 

-- | @application/json@
instance Consumes UpdateStocks1 MimeJSON

-- | @application/json@
instance Produces UpdateStocks1 MimeJSON

