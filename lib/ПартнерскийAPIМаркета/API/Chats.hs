{-
   Партнерский API Маркета

   API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

   OpenAPI Version: 3.0.3
   Партнерский API Маркета API version: LATEST
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : ПартнерскийAPIМаркета.API.Chats
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module ПартнерскийAPIМаркета.API.Chats where

import ПартнерскийAPIМаркета.Core
import ПартнерскийAPIМаркета.MimeTypes
import ПартнерскийAPIМаркета.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Chats

-- *** createChat

-- | @POST \/businesses\/{businessId}\/chats\/new@
-- 
-- Создание нового чата с покупателем
-- 
-- Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
createChat
  :: (Consumes CreateChat MimeJSON, MimeRender MimeJSON CreateChatRequest)
  => CreateChatRequest -- ^ "createChatRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest CreateChat MimeJSON CreateChatResponse MimeJSON
createChat createChatRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/new"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` createChatRequest

data CreateChat 

-- | /Body Param/ "CreateChatRequest" - description
instance HasBodyParam CreateChat CreateChatRequest 

-- | @application/json@
instance Consumes CreateChat MimeJSON

-- | @application/json@
instance Produces CreateChat MimeJSON


-- *** getChatHistory

-- | @POST \/businesses\/{businessId}\/chats\/history@
-- 
-- Получение истории сообщений в чате
-- 
-- Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getChatHistory
  :: (Consumes GetChatHistory MimeJSON, MimeRender MimeJSON GetChatHistoryRequest)
  => GetChatHistoryRequest -- ^ "getChatHistoryRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest GetChatHistory MimeJSON GetChatHistoryResponse MimeJSON
getChatHistory getChatHistoryRequest (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/history"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getChatHistoryRequest
    `addQuery` toQuery ("chatId", Just chatId)

data GetChatHistory 

-- | /Body Param/ "GetChatHistoryRequest" - description
instance HasBodyParam GetChatHistory GetChatHistoryRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetChatHistory PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetChatHistory Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetChatHistory MimeJSON

-- | @application/json@
instance Produces GetChatHistory MimeJSON


-- *** getChats

-- | @POST \/businesses\/{businessId}\/chats@
-- 
-- Получение доступных чатов
-- 
-- Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getChats
  :: (Consumes GetChats MimeJSON, MimeRender MimeJSON GetChatsRequest)
  => GetChatsRequest -- ^ "getChatsRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetChats MimeJSON GetChatsResponse MimeJSON
getChats getChatsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getChatsRequest

data GetChats 

-- | /Body Param/ "GetChatsRequest" - description
instance HasBodyParam GetChats GetChatsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetChats PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetChats Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetChats MimeJSON

-- | @application/json@
instance Produces GetChats MimeJSON


-- *** sendFileToChat

-- | @POST \/businesses\/{businessId}\/chats\/file\/send@
-- 
-- Отправка файла в чат
-- 
-- Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
sendFileToChat
  :: (Consumes SendFileToChat MimeMultipartFormData)
  => File -- ^ "file" -  Содержимое файла. Максимальный размер файла — 5 Мбайт.
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest SendFileToChat MimeMultipartFormData EmptyApiResponse MimeJSON
sendFileToChat (File file) (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/file/send"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `_addMultiFormPart` NH.partFileSource "file" file
    `addQuery` toQuery ("chatId", Just chatId)

data SendFileToChat  

-- | @multipart/form-data@
instance Consumes SendFileToChat MimeMultipartFormData

-- | @application/json@
instance Produces SendFileToChat MimeJSON


-- *** sendMessageToChat

-- | @POST \/businesses\/{businessId}\/chats\/message@
-- 
-- Отправка сообщения в чат
-- 
-- Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
sendMessageToChat
  :: (Consumes SendMessageToChat MimeJSON, MimeRender MimeJSON SendMessageToChatRequest)
  => SendMessageToChatRequest -- ^ "sendMessageToChatRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest SendMessageToChat MimeJSON EmptyApiResponse MimeJSON
sendMessageToChat sendMessageToChatRequest (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/message"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` sendMessageToChatRequest
    `addQuery` toQuery ("chatId", Just chatId)

data SendMessageToChat 

-- | /Body Param/ "SendMessageToChatRequest" - description
instance HasBodyParam SendMessageToChat SendMessageToChatRequest 

-- | @application/json@
instance Consumes SendMessageToChat MimeJSON

-- | @application/json@
instance Produces SendMessageToChat MimeJSON

