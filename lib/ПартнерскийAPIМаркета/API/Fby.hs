{-
   Партнерский API Маркета

   API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

   OpenAPI Version: 3.0.3
   Партнерский API Маркета API version: LATEST
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : ПартнерскийAPIМаркета.API.Fby
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module ПартнерскийAPIМаркета.API.Fby where

import ПартнерскийAPIМаркета.Core
import ПартнерскийAPIМаркета.MimeTypes
import ПартнерскийAPIМаркета.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Fby

-- *** addHiddenOffers0

-- | @POST \/campaigns\/{campaignId}\/hidden-offers@
-- 
-- Скрытие товаров и настройки скрытия
-- 
-- Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
addHiddenOffers0
  :: (Consumes AddHiddenOffers0 MimeJSON, MimeRender MimeJSON AddHiddenOffersRequest)
  => AddHiddenOffersRequest -- ^ "addHiddenOffersRequest" -  Запрос на скрытие оферов.
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest AddHiddenOffers0 MimeJSON EmptyApiResponse MimeJSON
addHiddenOffers0 addHiddenOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/hidden-offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` addHiddenOffersRequest

data AddHiddenOffers0 

-- | /Body Param/ "AddHiddenOffersRequest" - Запрос на скрытие оферов.
instance HasBodyParam AddHiddenOffers0 AddHiddenOffersRequest 

-- | @application/json@
instance Consumes AddHiddenOffers0 MimeJSON

-- | @application/json@
instance Produces AddHiddenOffers0 MimeJSON


-- *** addOffersToArchive1

-- | @POST \/businesses\/{businessId}\/offer-mappings\/archive@
-- 
-- Добавление товаров в архив
-- 
-- Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
addOffersToArchive1
  :: (Consumes AddOffersToArchive1 MimeJSON, MimeRender MimeJSON AddOffersToArchiveRequest)
  => AddOffersToArchiveRequest -- ^ "addOffersToArchiveRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest AddOffersToArchive1 MimeJSON AddOffersToArchiveResponse MimeJSON
addOffersToArchive1 addOffersToArchiveRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/archive"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` addOffersToArchiveRequest

data AddOffersToArchive1 
instance HasBodyParam AddOffersToArchive1 AddOffersToArchiveRequest 

-- | @application/json@
instance Consumes AddOffersToArchive1 MimeJSON

-- | @application/json@
instance Produces AddOffersToArchive1 MimeJSON


-- *** calculateTariffs1

-- | @POST \/tariffs\/calculate@
-- 
-- Калькулятор стоимости услуг
-- 
-- Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
calculateTariffs1
  :: (Consumes CalculateTariffs1 MimeJSON, MimeRender MimeJSON CalculateTariffsRequest)
  => CalculateTariffsRequest -- ^ "calculateTariffsRequest"
  -> ПартнерскийAPIМаркетаRequest CalculateTariffs1 MimeJSON CalculateTariffsResponse MimeJSON
calculateTariffs1 calculateTariffsRequest =
  _mkRequest "POST" ["/tariffs/calculate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` calculateTariffsRequest

data CalculateTariffs1 
instance HasBodyParam CalculateTariffs1 CalculateTariffsRequest 

-- | @application/json@
instance Consumes CalculateTariffs1 MimeJSON

-- | @application/json@
instance Produces CalculateTariffs1 MimeJSON


-- *** confirmBusinessPrices1

-- | @POST \/businesses\/{businessId}\/price-quarantine\/confirm@
-- 
-- Удаление товара из карантина по цене в кабинете
-- 
-- Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
confirmBusinessPrices1
  :: (Consumes ConfirmBusinessPrices1 MimeJSON, MimeRender MimeJSON ConfirmPricesRequest)
  => ConfirmPricesRequest -- ^ "confirmPricesRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest ConfirmBusinessPrices1 MimeJSON EmptyApiResponse MimeJSON
confirmBusinessPrices1 confirmPricesRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/price-quarantine/confirm"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` confirmPricesRequest

data ConfirmBusinessPrices1 
instance HasBodyParam ConfirmBusinessPrices1 ConfirmPricesRequest 

-- | @application/json@
instance Consumes ConfirmBusinessPrices1 MimeJSON

-- | @application/json@
instance Produces ConfirmBusinessPrices1 MimeJSON


-- *** confirmCampaignPrices1

-- | @POST \/campaigns\/{campaignId}\/price-quarantine\/confirm@
-- 
-- Удаление товара из карантина по цене в магазине
-- 
-- Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
confirmCampaignPrices1
  :: (Consumes ConfirmCampaignPrices1 MimeJSON, MimeRender MimeJSON ConfirmPricesRequest)
  => ConfirmPricesRequest -- ^ "confirmPricesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest ConfirmCampaignPrices1 MimeJSON EmptyApiResponse MimeJSON
confirmCampaignPrices1 confirmPricesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/price-quarantine/confirm"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` confirmPricesRequest

data ConfirmCampaignPrices1 
instance HasBodyParam ConfirmCampaignPrices1 ConfirmPricesRequest 

-- | @application/json@
instance Consumes ConfirmCampaignPrices1 MimeJSON

-- | @application/json@
instance Produces ConfirmCampaignPrices1 MimeJSON


-- *** createChat2

-- | @POST \/businesses\/{businessId}\/chats\/new@
-- 
-- Создание нового чата с покупателем
-- 
-- Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
createChat2
  :: (Consumes CreateChat2 MimeJSON, MimeRender MimeJSON CreateChatRequest)
  => CreateChatRequest -- ^ "createChatRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest CreateChat2 MimeJSON CreateChatResponse MimeJSON
createChat2 createChatRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/new"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` createChatRequest

data CreateChat2 

-- | /Body Param/ "CreateChatRequest" - description
instance HasBodyParam CreateChat2 CreateChatRequest 

-- | @application/json@
instance Consumes CreateChat2 MimeJSON

-- | @application/json@
instance Produces CreateChat2 MimeJSON


-- *** deleteCampaignOffers1

-- | @POST \/campaigns\/{campaignId}\/offers\/delete@
-- 
-- Удаление товаров из ассортимента магазина
-- 
-- Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteCampaignOffers1
  :: (Consumes DeleteCampaignOffers1 MimeJSON, MimeRender MimeJSON DeleteCampaignOffersRequest)
  => DeleteCampaignOffersRequest -- ^ "deleteCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteCampaignOffers1 MimeJSON DeleteCampaignOffersResponse MimeJSON
deleteCampaignOffers1 deleteCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteCampaignOffersRequest

data DeleteCampaignOffers1 
instance HasBodyParam DeleteCampaignOffers1 DeleteCampaignOffersRequest 

-- | @application/json@
instance Consumes DeleteCampaignOffers1 MimeJSON

-- | @application/json@
instance Produces DeleteCampaignOffers1 MimeJSON


-- *** deleteGoodsFeedbackComment0

-- | @POST \/businesses\/{businessId}\/goods-feedback\/comments\/delete@
-- 
-- Удаление комментария к отзыву
-- 
-- Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteGoodsFeedbackComment0
  :: (Consumes DeleteGoodsFeedbackComment0 MimeJSON, MimeRender MimeJSON DeleteGoodsFeedbackCommentRequest)
  => DeleteGoodsFeedbackCommentRequest -- ^ "deleteGoodsFeedbackCommentRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteGoodsFeedbackComment0 MimeJSON EmptyApiResponse MimeJSON
deleteGoodsFeedbackComment0 deleteGoodsFeedbackCommentRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/comments/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteGoodsFeedbackCommentRequest

data DeleteGoodsFeedbackComment0 
instance HasBodyParam DeleteGoodsFeedbackComment0 DeleteGoodsFeedbackCommentRequest 

-- | @application/json@
instance Consumes DeleteGoodsFeedbackComment0 MimeJSON

-- | @application/json@
instance Produces DeleteGoodsFeedbackComment0 MimeJSON


-- *** deleteHiddenOffers0

-- | @POST \/campaigns\/{campaignId}\/hidden-offers\/delete@
-- 
-- Возобновление показа товаров
-- 
-- Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteHiddenOffers0
  :: (Consumes DeleteHiddenOffers0 MimeJSON, MimeRender MimeJSON DeleteHiddenOffersRequest)
  => DeleteHiddenOffersRequest -- ^ "deleteHiddenOffersRequest" -  Запрос на возобновление показа оферов.
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteHiddenOffers0 MimeJSON EmptyApiResponse MimeJSON
deleteHiddenOffers0 deleteHiddenOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/hidden-offers/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteHiddenOffersRequest

data DeleteHiddenOffers0 

-- | /Body Param/ "DeleteHiddenOffersRequest" - Запрос на возобновление показа оферов.
instance HasBodyParam DeleteHiddenOffers0 DeleteHiddenOffersRequest 

-- | @application/json@
instance Consumes DeleteHiddenOffers0 MimeJSON

-- | @application/json@
instance Produces DeleteHiddenOffers0 MimeJSON


-- *** deleteOffers1

-- | @POST \/businesses\/{businessId}\/offer-mappings\/delete@
-- 
-- Удаление товаров из каталога
-- 
-- Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteOffers1
  :: (Consumes DeleteOffers1 MimeJSON, MimeRender MimeJSON DeleteOffersRequest)
  => DeleteOffersRequest -- ^ "deleteOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteOffers1 MimeJSON DeleteOffersResponse MimeJSON
deleteOffers1 deleteOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteOffersRequest

data DeleteOffers1 
instance HasBodyParam DeleteOffers1 DeleteOffersRequest 

-- | @application/json@
instance Consumes DeleteOffers1 MimeJSON

-- | @application/json@
instance Produces DeleteOffers1 MimeJSON


-- *** deleteOffersFromArchive1

-- | @POST \/businesses\/{businessId}\/offer-mappings\/unarchive@
-- 
-- Удаление товаров из архива
-- 
-- Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteOffersFromArchive1
  :: (Consumes DeleteOffersFromArchive1 MimeJSON, MimeRender MimeJSON DeleteOffersFromArchiveRequest)
  => DeleteOffersFromArchiveRequest -- ^ "deleteOffersFromArchiveRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteOffersFromArchive1 MimeJSON DeleteOffersFromArchiveResponse MimeJSON
deleteOffersFromArchive1 deleteOffersFromArchiveRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/unarchive"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteOffersFromArchiveRequest

data DeleteOffersFromArchive1 
instance HasBodyParam DeleteOffersFromArchive1 DeleteOffersFromArchiveRequest 

-- | @application/json@
instance Consumes DeleteOffersFromArchive1 MimeJSON

-- | @application/json@
instance Produces DeleteOffersFromArchive1 MimeJSON


-- *** deletePromoOffers0

-- | @POST \/businesses\/{businessId}\/promos\/offers\/delete@
-- 
-- Удаление товаров из акции
-- 
-- Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deletePromoOffers0
  :: (Consumes DeletePromoOffers0 MimeJSON, MimeRender MimeJSON DeletePromoOffersRequest)
  => DeletePromoOffersRequest -- ^ "deletePromoOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeletePromoOffers0 MimeJSON DeletePromoOffersResponse MimeJSON
deletePromoOffers0 deletePromoOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos/offers/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deletePromoOffersRequest

data DeletePromoOffers0 
instance HasBodyParam DeletePromoOffers0 DeletePromoOffersRequest 

-- | @application/json@
instance Consumes DeletePromoOffers0 MimeJSON

-- | @application/json@
instance Produces DeletePromoOffers0 MimeJSON


-- *** generateBoostConsolidatedReport0

-- | @POST \/reports\/boost-consolidated\/generate@
-- 
-- Отчет по бусту продаж
-- 
-- Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateBoostConsolidatedReport0
  :: (Consumes GenerateBoostConsolidatedReport0 MimeJSON, MimeRender MimeJSON GenerateBoostConsolidatedRequest)
  => GenerateBoostConsolidatedRequest -- ^ "generateBoostConsolidatedRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateBoostConsolidatedReport0 MimeJSON GenerateReportResponse MimeJSON
generateBoostConsolidatedReport0 generateBoostConsolidatedRequest =
  _mkRequest "POST" ["/reports/boost-consolidated/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateBoostConsolidatedRequest

data GenerateBoostConsolidatedReport0 
instance HasBodyParam GenerateBoostConsolidatedReport0 GenerateBoostConsolidatedRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateBoostConsolidatedReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateBoostConsolidatedReport0 MimeJSON

-- | @application/json@
instance Produces GenerateBoostConsolidatedReport0 MimeJSON


-- *** generateCompetitorsPositionReport0

-- | @POST \/reports\/competitors-position\/generate@
-- 
-- Отчет «Конкурентная позиция»
-- 
-- Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateCompetitorsPositionReport0
  :: (Consumes GenerateCompetitorsPositionReport0 MimeJSON, MimeRender MimeJSON GenerateCompetitorsPositionReportRequest)
  => GenerateCompetitorsPositionReportRequest -- ^ "generateCompetitorsPositionReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateCompetitorsPositionReport0 MimeJSON GenerateReportResponse MimeJSON
generateCompetitorsPositionReport0 generateCompetitorsPositionReportRequest =
  _mkRequest "POST" ["/reports/competitors-position/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateCompetitorsPositionReportRequest

data GenerateCompetitorsPositionReport0 
instance HasBodyParam GenerateCompetitorsPositionReport0 GenerateCompetitorsPositionReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateCompetitorsPositionReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateCompetitorsPositionReport0 MimeJSON

-- | @application/json@
instance Produces GenerateCompetitorsPositionReport0 MimeJSON


-- *** generateGoodsFeedbackReport0

-- | @POST \/reports\/goods-feedback\/generate@
-- 
-- Отчет по отзывам о товарах
-- 
-- Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateGoodsFeedbackReport0
  :: (Consumes GenerateGoodsFeedbackReport0 MimeJSON, MimeRender MimeJSON GenerateGoodsFeedbackRequest)
  => GenerateGoodsFeedbackRequest -- ^ "generateGoodsFeedbackRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateGoodsFeedbackReport0 MimeJSON GenerateReportResponse MimeJSON
generateGoodsFeedbackReport0 generateGoodsFeedbackRequest =
  _mkRequest "POST" ["/reports/goods-feedback/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateGoodsFeedbackRequest

data GenerateGoodsFeedbackReport0 
instance HasBodyParam GenerateGoodsFeedbackReport0 GenerateGoodsFeedbackRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateGoodsFeedbackReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateGoodsFeedbackReport0 MimeJSON

-- | @application/json@
instance Produces GenerateGoodsFeedbackReport0 MimeJSON


-- *** generateGoodsMovementReport0

-- | @POST \/reports\/goods-movement\/generate@
-- 
-- Отчет по движению товаров
-- 
-- Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateGoodsMovementReport0
  :: (Consumes GenerateGoodsMovementReport0 MimeJSON, MimeRender MimeJSON GenerateGoodsMovementReportRequest)
  => GenerateGoodsMovementReportRequest -- ^ "generateGoodsMovementReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateGoodsMovementReport0 MimeJSON GenerateReportResponse MimeJSON
generateGoodsMovementReport0 generateGoodsMovementReportRequest =
  _mkRequest "POST" ["/reports/goods-movement/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateGoodsMovementReportRequest

data GenerateGoodsMovementReport0 
instance HasBodyParam GenerateGoodsMovementReport0 GenerateGoodsMovementReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateGoodsMovementReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateGoodsMovementReport0 MimeJSON

-- | @application/json@
instance Produces GenerateGoodsMovementReport0 MimeJSON


-- *** generateGoodsRealizationReport0

-- | @POST \/reports\/goods-realization\/generate@
-- 
-- Отчет по реализации
-- 
-- Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateGoodsRealizationReport0
  :: (Consumes GenerateGoodsRealizationReport0 MimeJSON, MimeRender MimeJSON GenerateGoodsRealizationReportRequest)
  => GenerateGoodsRealizationReportRequest -- ^ "generateGoodsRealizationReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateGoodsRealizationReport0 MimeJSON GenerateReportResponse MimeJSON
generateGoodsRealizationReport0 generateGoodsRealizationReportRequest =
  _mkRequest "POST" ["/reports/goods-realization/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateGoodsRealizationReportRequest

data GenerateGoodsRealizationReport0 
instance HasBodyParam GenerateGoodsRealizationReport0 GenerateGoodsRealizationReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateGoodsRealizationReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateGoodsRealizationReport0 MimeJSON

-- | @application/json@
instance Produces GenerateGoodsRealizationReport0 MimeJSON


-- *** generateGoodsTurnoverReport0

-- | @POST \/reports\/goods-turnover\/generate@
-- 
-- Отчет по оборачиваемости
-- 
-- Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateGoodsTurnoverReport0
  :: (Consumes GenerateGoodsTurnoverReport0 MimeJSON, MimeRender MimeJSON GenerateGoodsTurnoverRequest)
  => GenerateGoodsTurnoverRequest -- ^ "generateGoodsTurnoverRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateGoodsTurnoverReport0 MimeJSON GenerateReportResponse MimeJSON
generateGoodsTurnoverReport0 generateGoodsTurnoverRequest =
  _mkRequest "POST" ["/reports/goods-turnover/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateGoodsTurnoverRequest

data GenerateGoodsTurnoverReport0 
instance HasBodyParam GenerateGoodsTurnoverReport0 GenerateGoodsTurnoverRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateGoodsTurnoverReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateGoodsTurnoverReport0 MimeJSON

-- | @application/json@
instance Produces GenerateGoodsTurnoverReport0 MimeJSON


-- *** generatePricesReport0

-- | @POST \/reports\/prices\/generate@
-- 
-- Отчет «Цены на рынке»
-- 
-- Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generatePricesReport0
  :: (Consumes GeneratePricesReport0 MimeJSON, MimeRender MimeJSON GeneratePricesReportRequest)
  => GeneratePricesReportRequest -- ^ "generatePricesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GeneratePricesReport0 MimeJSON GenerateReportResponse MimeJSON
generatePricesReport0 generatePricesReportRequest =
  _mkRequest "POST" ["/reports/prices/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generatePricesReportRequest

data GeneratePricesReport0 
instance HasBodyParam GeneratePricesReport0 GeneratePricesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GeneratePricesReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GeneratePricesReport0 MimeJSON

-- | @application/json@
instance Produces GeneratePricesReport0 MimeJSON


-- *** generateShelfsStatisticsReport0

-- | @POST \/reports\/shelf-statistics\/generate@
-- 
-- Отчет по полкам
-- 
-- Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateShelfsStatisticsReport0
  :: (Consumes GenerateShelfsStatisticsReport0 MimeJSON, MimeRender MimeJSON GenerateShelfsStatisticsRequest)
  => GenerateShelfsStatisticsRequest -- ^ "generateShelfsStatisticsRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateShelfsStatisticsReport0 MimeJSON GenerateReportResponse MimeJSON
generateShelfsStatisticsReport0 generateShelfsStatisticsRequest =
  _mkRequest "POST" ["/reports/shelf-statistics/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateShelfsStatisticsRequest

data GenerateShelfsStatisticsReport0 
instance HasBodyParam GenerateShelfsStatisticsReport0 GenerateShelfsStatisticsRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateShelfsStatisticsReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateShelfsStatisticsReport0 MimeJSON

-- | @application/json@
instance Produces GenerateShelfsStatisticsReport0 MimeJSON


-- *** generateShowsSalesReport0

-- | @POST \/reports\/shows-sales\/generate@
-- 
-- Отчет «Аналитика продаж»
-- 
-- Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateShowsSalesReport0
  :: (Consumes GenerateShowsSalesReport0 MimeJSON, MimeRender MimeJSON GenerateShowsSalesReportRequest)
  => GenerateShowsSalesReportRequest -- ^ "generateShowsSalesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateShowsSalesReport0 MimeJSON GenerateReportResponse MimeJSON
generateShowsSalesReport0 generateShowsSalesReportRequest =
  _mkRequest "POST" ["/reports/shows-sales/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateShowsSalesReportRequest

data GenerateShowsSalesReport0 
instance HasBodyParam GenerateShowsSalesReport0 GenerateShowsSalesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateShowsSalesReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateShowsSalesReport0 MimeJSON

-- | @application/json@
instance Produces GenerateShowsSalesReport0 MimeJSON


-- *** generateStocksOnWarehousesReport0

-- | @POST \/reports\/stocks-on-warehouses\/generate@
-- 
-- Отчет по остаткам на складах
-- 
-- Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateStocksOnWarehousesReport0
  :: (Consumes GenerateStocksOnWarehousesReport0 MimeJSON, MimeRender MimeJSON GenerateStocksOnWarehousesReportRequest)
  => GenerateStocksOnWarehousesReportRequest -- ^ "generateStocksOnWarehousesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateStocksOnWarehousesReport0 MimeJSON GenerateReportResponse MimeJSON
generateStocksOnWarehousesReport0 generateStocksOnWarehousesReportRequest =
  _mkRequest "POST" ["/reports/stocks-on-warehouses/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateStocksOnWarehousesReportRequest

data GenerateStocksOnWarehousesReport0 
instance HasBodyParam GenerateStocksOnWarehousesReport0 GenerateStocksOnWarehousesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateStocksOnWarehousesReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateStocksOnWarehousesReport0 MimeJSON

-- | @application/json@
instance Produces GenerateStocksOnWarehousesReport0 MimeJSON


-- *** generateUnitedMarketplaceServicesReport0

-- | @POST \/reports\/united-marketplace-services\/generate@
-- 
-- Отчет по стоимости услуг
-- 
-- Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateUnitedMarketplaceServicesReport0
  :: (Consumes GenerateUnitedMarketplaceServicesReport0 MimeJSON, MimeRender MimeJSON GenerateUnitedMarketplaceServicesReportRequest)
  => GenerateUnitedMarketplaceServicesReportRequest -- ^ "generateUnitedMarketplaceServicesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateUnitedMarketplaceServicesReport0 MimeJSON GenerateReportResponse MimeJSON
generateUnitedMarketplaceServicesReport0 generateUnitedMarketplaceServicesReportRequest =
  _mkRequest "POST" ["/reports/united-marketplace-services/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateUnitedMarketplaceServicesReportRequest

data GenerateUnitedMarketplaceServicesReport0 
instance HasBodyParam GenerateUnitedMarketplaceServicesReport0 GenerateUnitedMarketplaceServicesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateUnitedMarketplaceServicesReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateUnitedMarketplaceServicesReport0 MimeJSON

-- | @application/json@
instance Produces GenerateUnitedMarketplaceServicesReport0 MimeJSON


-- *** generateUnitedNettingReport0

-- | @POST \/reports\/united-netting\/generate@
-- 
-- Отчет по платежам
-- 
-- Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateUnitedNettingReport0
  :: (Consumes GenerateUnitedNettingReport0 MimeJSON, MimeRender MimeJSON GenerateUnitedNettingReportRequest)
  => GenerateUnitedNettingReportRequest -- ^ "generateUnitedNettingReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateUnitedNettingReport0 MimeJSON GenerateReportResponse MimeJSON
generateUnitedNettingReport0 generateUnitedNettingReportRequest =
  _mkRequest "POST" ["/reports/united-netting/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateUnitedNettingReportRequest

data GenerateUnitedNettingReport0 
instance HasBodyParam GenerateUnitedNettingReport0 GenerateUnitedNettingReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateUnitedNettingReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateUnitedNettingReport0 MimeJSON

-- | @application/json@
instance Produces GenerateUnitedNettingReport0 MimeJSON


-- *** generateUnitedOrdersReport0

-- | @POST \/reports\/united-orders\/generate@
-- 
-- Отчет по заказам
-- 
-- Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateUnitedOrdersReport0
  :: (Consumes GenerateUnitedOrdersReport0 MimeJSON, MimeRender MimeJSON GenerateUnitedOrdersRequest)
  => GenerateUnitedOrdersRequest -- ^ "generateUnitedOrdersRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateUnitedOrdersReport0 MimeJSON GenerateReportResponse MimeJSON
generateUnitedOrdersReport0 generateUnitedOrdersRequest =
  _mkRequest "POST" ["/reports/united-orders/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateUnitedOrdersRequest

data GenerateUnitedOrdersReport0 
instance HasBodyParam GenerateUnitedOrdersReport0 GenerateUnitedOrdersRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateUnitedOrdersReport0 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateUnitedOrdersReport0 MimeJSON

-- | @application/json@
instance Produces GenerateUnitedOrdersReport0 MimeJSON


-- *** getAllOffers3

-- | @GET \/campaigns\/{campaignId}\/offers\/all@
-- 
-- Все предложения магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getAllOffers3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetAllOffers3 MimeNoContent GetAllOffersResponse MimeJSON
getAllOffers3 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offers/all"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getAllOffers3 "" #-}

data GetAllOffers3  

-- | /Optional Param/ "feedId" - Идентификатор прайс-листа.
instance HasOptionalParam GetAllOffers3 FeedId where
  applyOptionalParam req (FeedId xs) =
    req `addQuery` toQuery ("feedId", Just xs)

-- | /Optional Param/ "chunk" - Номер сегмента с результатами.  Значение по умолчанию: `0`.  {% note info %}  Номера сегментов запрашиваются последовательно, пока не будет получен сегмент с пустым ответом. Пустой ответ означает, что все предложения магазина получены.  {% endnote %}  {% note alert %}  Нумерация начинается с 0. Чтобы запросить первую страницу, необходимо указать `chunk=0` и т. д.  {% endnote %} 
instance HasOptionalParam GetAllOffers3 Chunk where
  applyOptionalParam req (Chunk xs) =
    req `addQuery` toQuery ("chunk", Just xs)
-- | @application/json@
instance Produces GetAllOffers3 MimeJSON


-- *** getBidsInfoForBusiness2

-- | @POST \/businesses\/{businessId}\/bids\/info@
-- 
-- Информация об установленных ставках
-- 
-- Возвращает значения ставок для заданных товаров.  {% note warning \"\" %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBidsInfoForBusiness2
  :: (Consumes GetBidsInfoForBusiness2 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBidsInfoForBusiness2 MimeJSON GetBidsInfoResponse MimeJSON
getBidsInfoForBusiness2 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/bids/info"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetBidsInfoForBusiness2 

-- | /Body Param/ "GetBidsInfoRequest" - description
instance HasBodyParam GetBidsInfoForBusiness2 GetBidsInfoRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetBidsInfoForBusiness2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetBidsInfoForBusiness2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetBidsInfoForBusiness2 MimeJSON

-- | @application/json@
instance Produces GetBidsInfoForBusiness2 MimeJSON


-- *** getBidsRecommendations2

-- | @POST \/businesses\/{businessId}\/bids\/recommendations@
-- 
-- Рекомендованные ставки для заданных товаров
-- 
-- Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBidsRecommendations2
  :: (Consumes GetBidsRecommendations2 MimeJSON, MimeRender MimeJSON GetBidsRecommendationsRequest)
  => GetBidsRecommendationsRequest -- ^ "getBidsRecommendationsRequest" -  description.
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBidsRecommendations2 MimeJSON GetBidsRecommendationsResponse MimeJSON
getBidsRecommendations2 getBidsRecommendationsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/bids/recommendations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getBidsRecommendationsRequest

data GetBidsRecommendations2 

-- | /Body Param/ "GetBidsRecommendationsRequest" - description.
instance HasBodyParam GetBidsRecommendations2 GetBidsRecommendationsRequest 

-- | @application/json@
instance Consumes GetBidsRecommendations2 MimeJSON

-- | @application/json@
instance Produces GetBidsRecommendations2 MimeJSON


-- *** getBusinessQuarantineOffers1

-- | @POST \/businesses\/{businessId}\/price-quarantine@
-- 
-- Список товаров, находящихся в карантине по цене в кабинете
-- 
-- Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBusinessQuarantineOffers1
  :: (Consumes GetBusinessQuarantineOffers1 MimeJSON, MimeRender MimeJSON GetQuarantineOffersRequest)
  => GetQuarantineOffersRequest -- ^ "getQuarantineOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBusinessQuarantineOffers1 MimeJSON GetQuarantineOffersResponse MimeJSON
getBusinessQuarantineOffers1 getQuarantineOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/price-quarantine"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getQuarantineOffersRequest

data GetBusinessQuarantineOffers1 
instance HasBodyParam GetBusinessQuarantineOffers1 GetQuarantineOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetBusinessQuarantineOffers1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetBusinessQuarantineOffers1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetBusinessQuarantineOffers1 MimeJSON

-- | @application/json@
instance Produces GetBusinessQuarantineOffers1 MimeJSON


-- *** getBusinessSettings2

-- | @POST \/businesses\/{businessId}\/settings@
-- 
-- Настройки кабинета
-- 
-- Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBusinessSettings2
  :: BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBusinessSettings2 MimeNoContent GetBusinessSettingsResponse MimeJSON
getBusinessSettings2 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/settings"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetBusinessSettings2  
-- | @application/json@
instance Produces GetBusinessSettings2 MimeJSON


-- *** getCampaign3

-- | @GET \/campaigns\/{campaignId}@
-- 
-- Информация о магазине
-- 
-- Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaign3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaign3 MimeNoContent GetCampaignResponse MimeJSON
getCampaign3 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaign3  
-- | @application/json@
instance Produces GetCampaign3 MimeJSON


-- *** getCampaignLogins3

-- | @GET \/campaigns\/{campaignId}\/logins@
-- 
-- Логины, связанные с магазином
-- 
-- Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignLogins3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignLogins3 MimeNoContent GetCampaignLoginsResponse MimeJSON
getCampaignLogins3 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/logins"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaignLogins3  
-- | @application/json@
instance Produces GetCampaignLogins3 MimeJSON


-- *** getCampaignOffers1

-- | @POST \/campaigns\/{campaignId}\/offers@
-- 
-- Информация о товарах, которые размещены в заданном магазине
-- 
-- Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignOffers1
  :: (Consumes GetCampaignOffers1 MimeJSON, MimeRender MimeJSON GetCampaignOffersRequest)
  => GetCampaignOffersRequest -- ^ "getCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignOffers1 MimeJSON GetCampaignOffersResponse MimeJSON
getCampaignOffers1 getCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getCampaignOffersRequest

data GetCampaignOffers1 
instance HasBodyParam GetCampaignOffers1 GetCampaignOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetCampaignOffers1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetCampaignOffers1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetCampaignOffers1 MimeJSON

-- | @application/json@
instance Produces GetCampaignOffers1 MimeJSON


-- *** getCampaignQuarantineOffers1

-- | @POST \/campaigns\/{campaignId}\/price-quarantine@
-- 
-- Список товаров, находящихся в карантине по цене в магазине
-- 
-- Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignQuarantineOffers1
  :: (Consumes GetCampaignQuarantineOffers1 MimeJSON, MimeRender MimeJSON GetQuarantineOffersRequest)
  => GetQuarantineOffersRequest -- ^ "getQuarantineOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignQuarantineOffers1 MimeJSON GetQuarantineOffersResponse MimeJSON
getCampaignQuarantineOffers1 getQuarantineOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/price-quarantine"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getQuarantineOffersRequest

data GetCampaignQuarantineOffers1 
instance HasBodyParam GetCampaignQuarantineOffers1 GetQuarantineOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetCampaignQuarantineOffers1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetCampaignQuarantineOffers1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetCampaignQuarantineOffers1 MimeJSON

-- | @application/json@
instance Produces GetCampaignQuarantineOffers1 MimeJSON


-- *** getCampaignRegion1

-- | @GET \/campaigns\/{campaignId}\/region@
-- 
-- Регион магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignRegion1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignRegion1 MimeNoContent GetCampaignRegionResponse MimeJSON
getCampaignRegion1 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/region"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getCampaignRegion1 "" #-}

data GetCampaignRegion1  
-- | @application/json@
instance Produces GetCampaignRegion1 MimeJSON


-- *** getCampaignSettings3

-- | @GET \/campaigns\/{campaignId}\/settings@
-- 
-- Настройки магазина
-- 
-- Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignSettings3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignSettings3 MimeNoContent GetCampaignSettingsResponse MimeJSON
getCampaignSettings3 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/settings"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaignSettings3  
-- | @application/json@
instance Produces GetCampaignSettings3 MimeJSON


-- *** getCampaigns3

-- | @GET \/campaigns@
-- 
-- Список магазинов пользователя
-- 
-- Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaigns3
  :: ПартнерскийAPIМаркетаRequest GetCampaigns3 MimeNoContent GetCampaignsResponse MimeJSON
getCampaigns3 =
  _mkRequest "GET" ["/campaigns"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaigns3  

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaigns3 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaigns3 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetCampaigns3 MimeJSON


-- *** getCampaignsByLogin3

-- | @GET \/campaigns\/by_login\/{login}@
-- 
-- Магазины, доступные логину
-- 
-- Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignsByLogin3
  :: Login -- ^ "login" -  Логин пользователя.
  -> ПартнерскийAPIМаркетаRequest GetCampaignsByLogin3 MimeNoContent GetCampaignsResponse MimeJSON
getCampaignsByLogin3 (Login login) =
  _mkRequest "GET" ["/campaigns/by_login/",toPath login]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaignsByLogin3  

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaignsByLogin3 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaignsByLogin3 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetCampaignsByLogin3 MimeJSON


-- *** getCategoriesMaxSaleQuantum0

-- | @POST \/categories\/max-sale-quantum@
-- 
-- Лимит на установку кванта продажи и минимального количества товаров в заказе
-- 
-- Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCategoriesMaxSaleQuantum0
  :: (Consumes GetCategoriesMaxSaleQuantum0 MimeJSON, MimeRender MimeJSON GetCategoriesMaxSaleQuantumRequest)
  => GetCategoriesMaxSaleQuantumRequest -- ^ "getCategoriesMaxSaleQuantumRequest"
  -> ПартнерскийAPIМаркетаRequest GetCategoriesMaxSaleQuantum0 MimeJSON GetCategoriesMaxSaleQuantumResponse MimeJSON
getCategoriesMaxSaleQuantum0 getCategoriesMaxSaleQuantumRequest =
  _mkRequest "POST" ["/categories/max-sale-quantum"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getCategoriesMaxSaleQuantumRequest

data GetCategoriesMaxSaleQuantum0 
instance HasBodyParam GetCategoriesMaxSaleQuantum0 GetCategoriesMaxSaleQuantumRequest 

-- | @application/json@
instance Consumes GetCategoriesMaxSaleQuantum0 MimeJSON

-- | @application/json@
instance Produces GetCategoriesMaxSaleQuantum0 MimeJSON


-- *** getCategoriesTree0

-- | @POST \/categories\/tree@
-- 
-- Дерево категорий
-- 
-- Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCategoriesTree0
  :: (Consumes GetCategoriesTree0 MimeJSON)
  => ПартнерскийAPIМаркетаRequest GetCategoriesTree0 MimeJSON GetCategoriesResponse MimeJSON
getCategoriesTree0 =
  _mkRequest "POST" ["/categories/tree"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCategoriesTree0 
instance HasBodyParam GetCategoriesTree0 GetCategoriesRequest 

-- | @application/json@
instance Consumes GetCategoriesTree0 MimeJSON

-- | @application/json@
instance Produces GetCategoriesTree0 MimeJSON


-- *** getCategoryContentParameters1

-- | @POST \/category\/{categoryId}\/parameters@
-- 
-- Списки характеристик товаров по категориям
-- 
-- Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCategoryContentParameters1
  :: CategoryId3 -- ^ "categoryId" -  Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
  -> ПартнерскийAPIМаркетаRequest GetCategoryContentParameters1 MimeNoContent GetCategoryContentParametersResponse MimeJSON
getCategoryContentParameters1 (CategoryId3 categoryId) =
  _mkRequest "POST" ["/category/",toPath categoryId,"/parameters"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCategoryContentParameters1  
-- | @application/json@
instance Produces GetCategoryContentParameters1 MimeJSON


-- *** getChatHistory2

-- | @POST \/businesses\/{businessId}\/chats\/history@
-- 
-- Получение истории сообщений в чате
-- 
-- Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getChatHistory2
  :: (Consumes GetChatHistory2 MimeJSON, MimeRender MimeJSON GetChatHistoryRequest)
  => GetChatHistoryRequest -- ^ "getChatHistoryRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest GetChatHistory2 MimeJSON GetChatHistoryResponse MimeJSON
getChatHistory2 getChatHistoryRequest (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/history"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getChatHistoryRequest
    `addQuery` toQuery ("chatId", Just chatId)

data GetChatHistory2 

-- | /Body Param/ "GetChatHistoryRequest" - description
instance HasBodyParam GetChatHistory2 GetChatHistoryRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetChatHistory2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetChatHistory2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetChatHistory2 MimeJSON

-- | @application/json@
instance Produces GetChatHistory2 MimeJSON


-- *** getChats2

-- | @POST \/businesses\/{businessId}\/chats@
-- 
-- Получение доступных чатов
-- 
-- Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getChats2
  :: (Consumes GetChats2 MimeJSON, MimeRender MimeJSON GetChatsRequest)
  => GetChatsRequest -- ^ "getChatsRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetChats2 MimeJSON GetChatsResponse MimeJSON
getChats2 getChatsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getChatsRequest

data GetChats2 

-- | /Body Param/ "GetChatsRequest" - description
instance HasBodyParam GetChats2 GetChatsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetChats2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetChats2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetChats2 MimeJSON

-- | @application/json@
instance Produces GetChats2 MimeJSON


-- *** getFeed3

-- | @GET \/campaigns\/{campaignId}\/feeds\/{feedId}@
-- 
-- Информация о прайс-листе
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeed3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest GetFeed3 MimeNoContent GetFeedResponse MimeJSON
getFeed3 (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeed3 "" #-}

data GetFeed3  
-- | @application/json@
instance Produces GetFeed3 MimeJSON


-- *** getFeedIndexLogs3

-- | @GET \/campaigns\/{campaignId}\/feeds\/{feedId}\/index-logs@
-- 
-- Отчет по индексации прайс-листа
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeedIndexLogs3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest GetFeedIndexLogs3 MimeNoContent GetFeedIndexLogsResponse MimeJSON
getFeedIndexLogs3 (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId,"/index-logs"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeedIndexLogs3 "" #-}

data GetFeedIndexLogs3  

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetFeedIndexLogs3 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "published_time_from" - Начальная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Значение по умолчанию: последние восемь дней со времени отправки запроса. 
instance HasOptionalParam GetFeedIndexLogs3 PublishedTimeFrom where
  applyOptionalParam req (PublishedTimeFrom xs) =
    req `addQuery` toQuery ("published_time_from", Just xs)

-- | /Optional Param/ "published_time_to" - Конечная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-31T00:42:42+03:00`.  Значение по умолчанию: дата и время отправки запроса.  {% note info %}  Если во время переключения между страницами выходных данных на Яндекс Маркете появятся новые результаты индексации прайс-листа, вы не получите часть данных. Чтобы этого не произошло, зафиксируйте выходные данные с помощью входного параметра `published_time_to`. Значение параметра не должно быть датой из будущего.  {% endnote %} 
instance HasOptionalParam GetFeedIndexLogs3 PublishedTimeTo where
  applyOptionalParam req (PublishedTimeTo xs) =
    req `addQuery` toQuery ("published_time_to", Just xs)

-- | /Optional Param/ "status" - Статус индексации и проверки прайс-листа на соответствие техническим требованиям.  Возможные значения: * `ERROR` — произошли ошибки. * `OK` — обработан без ошибок. * `WARNING` — наблюдались некритичные проблемы. 
instance HasOptionalParam GetFeedIndexLogs3 Status2 where
  applyOptionalParam req (Status2 xs) =
    req `addQuery` toQuery ("status", Just xs)
-- | @application/json@
instance Produces GetFeedIndexLogs3 MimeJSON


-- *** getFeedbackAndCommentUpdates1

-- | @GET \/campaigns\/{campaignId}\/feedback\/updates@
-- 
-- Новые и обновленные отзывы о магазине
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeedbackAndCommentUpdates1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetFeedbackAndCommentUpdates1 MimeNoContent GetFeedbackListResponse MimeJSON
getFeedbackAndCommentUpdates1 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feedback/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeedbackAndCommentUpdates1 "" #-}

data GetFeedbackAndCommentUpdates1  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetFeedbackAndCommentUpdates1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetFeedbackAndCommentUpdates1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "from_date" - Начальная дата обновления отзывов.  Если параметр указан, возвращаются отзывы, которые были написаны или обновлены с этой даты.  Формат даты: `ГГГГ-ММ-ДД`. 
instance HasOptionalParam GetFeedbackAndCommentUpdates1 FromDate where
  applyOptionalParam req (FromDate xs) =
    req `addQuery` toQuery ("from_date", Just xs)
-- | @application/json@
instance Produces GetFeedbackAndCommentUpdates1 MimeJSON


-- *** getFeeds3

-- | @GET \/campaigns\/{campaignId}\/feeds@
-- 
-- Список прайс-листов магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeeds3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetFeeds3 MimeNoContent GetFeedsResponse MimeJSON
getFeeds3 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feeds"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeeds3 "" #-}

data GetFeeds3  
-- | @application/json@
instance Produces GetFeeds3 MimeJSON


-- *** getFulfillmentWarehouses0

-- | @GET \/warehouses@
-- 
-- Идентификаторы складов Маркета (FBY)
-- 
-- Возвращает список складов Маркета с их идентификаторами.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFulfillmentWarehouses0
  :: ПартнерскийAPIМаркетаRequest GetFulfillmentWarehouses0 MimeNoContent GetFulfillmentWarehousesResponse MimeJSON
getFulfillmentWarehouses0 =
  _mkRequest "GET" ["/warehouses"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetFulfillmentWarehouses0  
-- | @application/json@
instance Produces GetFulfillmentWarehouses0 MimeJSON


-- *** getGoodsFeedbackComments0

-- | @POST \/businesses\/{businessId}\/goods-feedback\/comments@
-- 
-- Получение комментариев к отзыву
-- 
-- Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getGoodsFeedbackComments0
  :: (Consumes GetGoodsFeedbackComments0 MimeJSON, MimeRender MimeJSON GetGoodsFeedbackCommentsRequest)
  => GetGoodsFeedbackCommentsRequest -- ^ "getGoodsFeedbackCommentsRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetGoodsFeedbackComments0 MimeJSON GetGoodsFeedbackCommentsResponse MimeJSON
getGoodsFeedbackComments0 getGoodsFeedbackCommentsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/comments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getGoodsFeedbackCommentsRequest

data GetGoodsFeedbackComments0 
instance HasBodyParam GetGoodsFeedbackComments0 GetGoodsFeedbackCommentsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetGoodsFeedbackComments0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetGoodsFeedbackComments0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetGoodsFeedbackComments0 MimeJSON

-- | @application/json@
instance Produces GetGoodsFeedbackComments0 MimeJSON


-- *** getGoodsFeedbacks0

-- | @POST \/businesses\/{businessId}\/goods-feedback@
-- 
-- Получение отзывов о товарах продавца
-- 
-- Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getGoodsFeedbacks0
  :: (Consumes GetGoodsFeedbacks0 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetGoodsFeedbacks0 MimeJSON GetGoodsFeedbackResponse MimeJSON
getGoodsFeedbacks0 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetGoodsFeedbacks0 
instance HasBodyParam GetGoodsFeedbacks0 GetGoodsFeedbackRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetGoodsFeedbacks0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetGoodsFeedbacks0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetGoodsFeedbacks0 MimeJSON

-- | @application/json@
instance Produces GetGoodsFeedbacks0 MimeJSON


-- *** getGoodsStats0

-- | @POST \/campaigns\/{campaignId}\/stats\/skus@
-- 
-- Отчет по товарам
-- 
-- Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getGoodsStats0
  :: (Consumes GetGoodsStats0 MimeJSON, MimeRender MimeJSON GetGoodsStatsRequest)
  => GetGoodsStatsRequest -- ^ "getGoodsStatsRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetGoodsStats0 MimeJSON GetGoodsStatsResponse MimeJSON
getGoodsStats0 getGoodsStatsRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/stats/skus"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getGoodsStatsRequest

data GetGoodsStats0 
instance HasBodyParam GetGoodsStats0 GetGoodsStatsRequest 

-- | @application/json@
instance Consumes GetGoodsStats0 MimeJSON

-- | @application/json@
instance Produces GetGoodsStats0 MimeJSON


-- *** getHiddenOffers0

-- | @GET \/campaigns\/{campaignId}\/hidden-offers@
-- 
-- Информация о скрытых вами товарах
-- 
-- Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getHiddenOffers0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetHiddenOffers0 MimeNoContent GetHiddenOffersResponse MimeJSON
getHiddenOffers0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/hidden-offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetHiddenOffers0  

-- | /Optional Param/ "offer_id" - Идентификатор скрытого предложения. 
instance HasOptionalParam GetHiddenOffers0 OfferId where
  applyOptionalParam req (OfferId xs) =
    req `addQuery` toQueryColl CommaSeparated ("offer_id", Just xs)

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetHiddenOffers0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetHiddenOffers0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "offset" - Позиция в списке, начиная с которой возвращаются результаты ответа.  Используется вместе с параметром `limit`.  Если задан `offset`, параметры `page_number` и `page_size` игнорируются.  `offset` игнорируется, если задан `page_token`. 
instance HasOptionalParam GetHiddenOffers0 Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetHiddenOffers0 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetHiddenOffers0 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetHiddenOffers0 MimeJSON


-- *** getOfferCardsContentStatus1

-- | @POST \/businesses\/{businessId}\/offer-cards@
-- 
-- Получение информации о заполненности карточек магазина
-- 
-- Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferCardsContentStatus1
  :: (Consumes GetOfferCardsContentStatus1 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferCardsContentStatus1 MimeJSON GetOfferCardsContentStatusResponse MimeJSON
getOfferCardsContentStatus1 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-cards"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOfferCardsContentStatus1 
instance HasBodyParam GetOfferCardsContentStatus1 GetOfferCardsContentStatusRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferCardsContentStatus1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferCardsContentStatus1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOfferCardsContentStatus1 MimeJSON

-- | @application/json@
instance Produces GetOfferCardsContentStatus1 MimeJSON


-- *** getOfferMappingEntries0

-- | @GET \/campaigns\/{campaignId}\/offer-mapping-entries@
-- 
-- Список товаров в каталоге
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferMappingEntries0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferMappingEntries0 MimeNoContent GetOfferMappingEntriesResponse MimeJSON
getOfferMappingEntries0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offer-mapping-entries"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getOfferMappingEntries0 "" #-}

data GetOfferMappingEntries0  

-- | /Optional Param/ "offer_id" - Идентификатор товара в каталоге.
instance HasOptionalParam GetOfferMappingEntries0 OfferId where
  applyOptionalParam req (OfferId xs) =
    req `addQuery` toQueryColl CommaSeparated ("offer_id", Just xs)

-- | /Optional Param/ "shop_sku" - Ваш SKU товара.  Параметр может быть указан несколько раз, например:  ``` ...shop_sku=123&shop_sku=129&shop_sku=141... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries0 ShopSku2 where
  applyOptionalParam req (ShopSku2 xs) =
    req `addQuery` toQueryColl CommaSeparated ("shop_sku", Just xs)

-- | /Optional Param/ "mapping_kind" - Тип маппинга.
instance HasOptionalParam GetOfferMappingEntries0 MappingKind where
  applyOptionalParam req (MappingKind xs) =
    req `addQuery` toQuery ("mapping_kind", Just xs)

-- | /Optional Param/ "status" - Фильтрация по статусу публикации товара:  * `READY` — товар прошел модерацию. * `IN_WORK` — товар проходит модерацию. * `NEED_CONTENT` — для товара без SKU на Маркете marketSku нужно найти карточку самостоятельно или создать ее. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. * `OTHER` — товар не прошел модерацию по другой причине.  Можно указать несколько статусов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...status=READY,IN_WORK... ...status=READY&status=IN_WORK... ```  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries0 StatusOfferProcessingStatusType where
  applyOptionalParam req (StatusOfferProcessingStatusType xs) =
    req `addQuery` toQueryColl CommaSeparated ("status", Just xs)

-- | /Optional Param/ "availability" - Фильтрация по планам поставок товара:  * `ACTIVE` — поставки будут. * `INACTIVE` — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. * `DELISTED` — архив: товар закончился на складе, и его поставок больше не будет.  Можно указать несколько значений в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...availability=INACTIVE,DELISTED... ...availability=INACTIVE&availability=DELISTED... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries0 Availability where
  applyOptionalParam req (Availability xs) =
    req `addQuery` toQueryColl CommaSeparated ("availability", Just xs)

-- | /Optional Param/ "category_id" - Фильтрация по идентификатору категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  Можно указать несколько идентификаторов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...category_id=14727164,14382343... ...category_id=14727164&category_id=14382343... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries0 CategoryId2 where
  applyOptionalParam req (CategoryId2 xs) =
    req `addQuery` toQueryColl CommaSeparated ("category_id", Just xs)

-- | /Optional Param/ "vendor" - Фильтрация по бренду товара.  Можно указать несколько брендов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...vendor=Aqua%20Minerale,Borjomi... ...vendor=Aqua%20Minerale&vendor=Borjomi... ```  Чтобы товар попал в результаты фильтрации, его бренд должен точно совпадать с одним из указанных в запросе. Например, если указан бренд Schwarzkopf, то в результатах не будет товаров Schwarzkopf Professional.  Если в названии бренда есть символы, которые не входят в таблицу ASCII (в том числе кириллические символы), используйте для них URL-кодирование. Например, пробел — %20, апостроф «'» — %27 и т. д. Подробнее см. в разделе [Кодирование URL русскоязычной Википедии](https://ru.wikipedia.org/wiki/URL#Кодирование_URL).  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries0 Vendor where
  applyOptionalParam req (Vendor xs) =
    req `addQuery` toQueryColl CommaSeparated ("vendor", Just xs)

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferMappingEntries0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferMappingEntries0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces GetOfferMappingEntries0 MimeJSON


-- *** getOfferMappings1

-- | @POST \/businesses\/{businessId}\/offer-mappings@
-- 
-- Информация о товарах в каталоге
-- 
-- Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferMappings1
  :: (Consumes GetOfferMappings1 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferMappings1 MimeJSON GetOfferMappingsResponse MimeJSON
getOfferMappings1 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOfferMappings1 
instance HasBodyParam GetOfferMappings1 GetOfferMappingsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferMappings1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferMappings1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOfferMappings1 MimeJSON

-- | @application/json@
instance Produces GetOfferMappings1 MimeJSON


-- *** getOfferRecommendations1

-- | @POST \/businesses\/{businessId}\/offers\/recommendations@
-- 
-- Рекомендации Маркета, касающиеся цен
-- 
-- Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferRecommendations1
  :: (Consumes GetOfferRecommendations1 MimeJSON, MimeRender MimeJSON GetOfferRecommendationsRequest)
  => GetOfferRecommendationsRequest -- ^ "getOfferRecommendationsRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferRecommendations1 MimeJSON GetOfferRecommendationsResponse MimeJSON
getOfferRecommendations1 getOfferRecommendationsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offers/recommendations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getOfferRecommendationsRequest

data GetOfferRecommendations1 
instance HasBodyParam GetOfferRecommendations1 GetOfferRecommendationsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferRecommendations1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferRecommendations1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOfferRecommendations1 MimeJSON

-- | @application/json@
instance Produces GetOfferRecommendations1 MimeJSON


-- *** getOffers3

-- | @GET \/campaigns\/{campaignId}\/offers@
-- 
-- Предложения магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOffers3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOffers3 MimeNoContent GetOffersResponse MimeJSON
getOffers3 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getOffers3 "" #-}

data GetOffers3  

-- | /Optional Param/ "query" - Поисковый запрос.  Поддерживается язык запросов.  Значение по умолчанию: все предложения магазина, размещенные на Маркете. 
instance HasOptionalParam GetOffers3 Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "feedId" - Идентификатор прайс-листа.
instance HasOptionalParam GetOffers3 FeedId where
  applyOptionalParam req (FeedId xs) =
    req `addQuery` toQuery ("feedId", Just xs)

-- | /Optional Param/ "shopCategoryId" - Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
instance HasOptionalParam GetOffers3 ShopCategoryId where
  applyOptionalParam req (ShopCategoryId xs) =
    req `addQuery` toQuery ("shopCategoryId", Just xs)

-- | /Optional Param/ "currency" - Валюта, в которой указана цена предложения.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна. 
instance HasOptionalParam GetOffers3 Currency where
  applyOptionalParam req (Currency xs) =
    req `addQuery` toQuery ("currency", Just xs)

-- | /Optional Param/ "matched" - Фильтр по признаку соотнесения предложения и карточки модели.  Возможные значения:  * `0 / FALSE / NO` — поиск выполняется среди предложений, не соотнесенных ни с какой карточкой модели.  * `1 / TRUE / YES` — поиск выполняется среди предложений, соотнесенных с карточками моделей). 
instance HasOptionalParam GetOffers3 Matched where
  applyOptionalParam req (Matched xs) =
    req `addQuery` toQuery ("matched", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOffers3 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOffers3 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetOffers3 MimeJSON


-- *** getOrder0

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}@
-- 
-- Информация об одном заказе
-- 
-- Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrder0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrder0 MimeNoContent GetOrderResponse MimeJSON
getOrder0 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrder0  
-- | @application/json@
instance Produces GetOrder0 MimeJSON


-- *** getOrderBusinessBuyerInfo1

-- | @POST \/campaigns\/{campaignId}\/orders\/{orderId}\/business-buyer@
-- 
-- Информация о покупателе — юридическом лице
-- 
-- Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY`, `PICKUP` или `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrderBusinessBuyerInfo1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrderBusinessBuyerInfo1 MimeNoContent GetBusinessBuyerInfoResponse MimeJSON
getOrderBusinessBuyerInfo1 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/business-buyer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrderBusinessBuyerInfo1  
-- | @application/json@
instance Produces GetOrderBusinessBuyerInfo1 MimeJSON


-- *** getOrderBusinessDocumentsInfo1

-- | @POST \/campaigns\/{campaignId}\/orders\/{orderId}\/documents@
-- 
-- Информация о документах
-- 
-- Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrderBusinessDocumentsInfo1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrderBusinessDocumentsInfo1 MimeNoContent GetBusinessDocumentsInfoResponse MimeJSON
getOrderBusinessDocumentsInfo1 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/documents"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrderBusinessDocumentsInfo1  
-- | @application/json@
instance Produces GetOrderBusinessDocumentsInfo1 MimeJSON


-- *** getOrders2

-- | @GET \/campaigns\/{campaignId}\/orders@
-- 
-- Информация о нескольких заказах
-- 
-- Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры `page_token` и `limit`.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrders2
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOrders2 MimeNoContent GetOrdersResponse MimeJSON
getOrders2 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrders2  

-- | /Optional Param/ "orderIds" - Фильтрация заказов по идентификаторам. <br><br> ⚠️ Не используйте это поле одновременно с другими фильтрами. Если вы хотите воспользоваться ими, оставьте поле пустым. 
instance HasOptionalParam GetOrders2 OrderIds where
  applyOptionalParam req (OrderIds xs) =
    req `addQuery` toQueryColl CommaSeparated ("orderIds", Just xs)

-- | /Optional Param/ "status" - Статус заказа:  * `CANCELLED` — заказ отменен.  * `DELIVERED` — заказ получен покупателем.  * `DELIVERY` — заказ передан в службу доставки.  * `PICKUP` — заказ доставлен в пункт самовывоза.  * `PROCESSING` — заказ находится в обработке.  * `UNPAID` — заказ оформлен, но еще не оплачен (если выбрана оплата при оформлении).  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
instance HasOptionalParam GetOrders2 Status where
  applyOptionalParam req (Status xs) =
    req `addQuery` toQueryColl CommaSeparated ("status", Just xs)

-- | /Optional Param/ "substatus" - Этап обработки заказа (если он имеет статус `PROCESSING`) или причина отмены заказа (если он имеет статус `CANCELLED`).  Возможные значения для заказа в статусе `PROCESSING`:  * `STARTED` — заказ подтвержден, его можно начать обрабатывать. * `READY_TO_SHIP` — заказ собран и готов к отправке. * `SHIPPED` — заказ передан службе доставки.  Возможные значения для заказа в статусе `CANCELLED`:  * `DELIVERY_SERVICE_UNDELIVERED` — служба доставки не смогла доставить заказ.  * `PROCESSING_EXPIRED` — значение более не используется.  * `REPLACING_ORDER` — покупатель решил заменить товар другим по собственной инициативе.  * `RESERVATION_EXPIRED` — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.  * `RESERVATION_FAILED` — Маркет не может продолжить дальнейшую обработку заказа.  * `SHOP_FAILED` — магазин не может выполнить заказ.  * `USER_CHANGED_MIND` — покупатель отменил заказ по личным причинам.  * `USER_NOT_PAID` — покупатель не оплатил заказ (для типа оплаты `PREPAID`) в течение 30 минут.  * `USER_REFUSED_DELIVERY` — покупателя не устроили условия доставки.  * `USER_REFUSED_PRODUCT` — покупателю не подошел товар.  * `USER_REFUSED_QUALITY` — покупателя не устроило качество товара.  * `USER_UNREACHABLE` — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:    * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;   * перерыв между первым и третьим звонком не менее 90 минут;   * соединение не короче 5 секунд.    Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400. * `USER_WANTS_TO_CHANGE_DELIVERY_DATE` — покупатель хочет получить заказ в другой день. * `CANCELLED_COURIER_NOT_FOUND` — не удалось найти курьера.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
instance HasOptionalParam GetOrders2 Substatus where
  applyOptionalParam req (Substatus xs) =
    req `addQuery` toQueryColl CommaSeparated ("substatus", Just xs)

-- | /Optional Param/ "fromDate" - Начальная дата для фильтрации заказов по дате оформления.  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной и конечной датой (параметр `toDate`) должно быть не больше 30 дней.  Значение по умолчанию: 30 дней назад от текущей даты. 
instance HasOptionalParam GetOrders2 FromDate where
  applyOptionalParam req (FromDate xs) =
    req `addQuery` toQuery ("fromDate", Just xs)

-- | /Optional Param/ "toDate" - Конечная дата для фильтрации заказов по дате оформления.  Показываются заказы, созданные до 00:00 указанного дня.  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной (параметр `fromDate`) и конечной датой должно быть не больше 30 дней.  Значение по умолчанию: текущая дата. 
instance HasOptionalParam GetOrders2 ToDate where
  applyOptionalParam req (ToDate xs) =
    req `addQuery` toQuery ("toDate", Just xs)

-- | /Optional Param/ "supplierShipmentDateFrom" - Начальная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр `shipmentDate`).  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной и конечной датой (параметр `supplierShipmentDateTo`) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders2 SupplierShipmentDateFrom where
  applyOptionalParam req (SupplierShipmentDateFrom xs) =
    req `addQuery` toQuery ("supplierShipmentDateFrom", Just xs)

-- | /Optional Param/ "supplierShipmentDateTo" - Конечная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр `shipmentDate`).  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной (параметр `supplierShipmentDateFrom`) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders2 SupplierShipmentDateTo where
  applyOptionalParam req (SupplierShipmentDateTo xs) =
    req `addQuery` toQuery ("supplierShipmentDateTo", Just xs)

-- | /Optional Param/ "updatedAtFrom" - Начальная дата для фильтрации заказов по дате и времени обновления (параметр `updatedAt`).  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Между начальной и конечной датой (параметр `updatedAtTo`) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders2 UpdatedAtFrom where
  applyOptionalParam req (UpdatedAtFrom xs) =
    req `addQuery` toQuery ("updatedAtFrom", Just xs)

-- | /Optional Param/ "updatedAtTo" - Конечная дата для фильтрации заказов по дате и времени обновления (параметр `updatedAt`).  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Между начальной (параметр `updatedAtFrom`) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders2 UpdatedAtTo where
  applyOptionalParam req (UpdatedAtTo xs) =
    req `addQuery` toQuery ("updatedAtTo", Just xs)

-- | /Optional Param/ "dispatchType" - Способ отгрузки
instance HasOptionalParam GetOrders2 DispatchType where
  applyOptionalParam req (DispatchType xs) =
    req `addQuery` toQuery ("dispatchType", Just xs)

-- | /Optional Param/ "fake" - Фильтрация заказов по типам:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
instance HasOptionalParam GetOrders2 Fake where
  applyOptionalParam req (Fake xs) =
    req `addQuery` toQuery ("fake", Just xs)

-- | /Optional Param/ "hasCis" - Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да.  * `false` — нет.  Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 
instance HasOptionalParam GetOrders2 HasCis where
  applyOptionalParam req (HasCis xs) =
    req `addQuery` toQuery ("hasCis", Just xs)

-- | /Optional Param/ "onlyWaitingForCancellationApprove" - **Только для модели DBS**  Фильтрация заказов по наличию запросов покупателей на отмену.  При значение `true` возвращаются только заказы, которые находятся в статусе `DELIVERY` или `PICKUP` и которые пользователи решили отменить.  Чтобы подтвердить или отклонить отмену, отправьте запрос [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation). 
instance HasOptionalParam GetOrders2 OnlyWaitingForCancellationApprove where
  applyOptionalParam req (OnlyWaitingForCancellationApprove xs) =
    req `addQuery` toQuery ("onlyWaitingForCancellationApprove", Just xs)

-- | /Optional Param/ "onlyEstimatedDelivery" - Фильтрация заказов с долгой доставкой (31-60 дней) по подтвержденной дате доставки:  * `true` — возвращаются только заказы с неподтвержденной датой доставки. * `false` — фильтрация не применяется. 
instance HasOptionalParam GetOrders2 OnlyEstimatedDelivery where
  applyOptionalParam req (OnlyEstimatedDelivery xs) =
    req `addQuery` toQuery ("onlyEstimatedDelivery", Just xs)

-- | /Optional Param/ "buyerType" - Фильтрация заказов по типу покупателя. 
instance HasOptionalParam GetOrders2 BuyerType where
  applyOptionalParam req (BuyerType xs) =
    req `addQuery` toQuery ("buyerType", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOrders2 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOrders2 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOrders2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOrders2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces GetOrders2 MimeJSON


-- *** getOrdersStats0

-- | @POST \/campaigns\/{campaignId}\/stats\/orders@
-- 
-- Детальная информация по заказам
-- 
-- Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \"\" %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrdersStats0
  :: (Consumes GetOrdersStats0 MimeJSON)
  => CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOrdersStats0 MimeJSON GetOrdersStatsResponse MimeJSON
getOrdersStats0 (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/stats/orders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrdersStats0 
instance HasBodyParam GetOrdersStats0 GetOrdersStatsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOrdersStats0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOrdersStats0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOrdersStats0 MimeJSON

-- | @application/json@
instance Produces GetOrdersStats0 MimeJSON


-- *** getPrices0

-- | @GET \/campaigns\/{campaignId}\/offer-prices@
-- 
-- Список цен
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** ```(количество товаров партнера на витрине) * 25``` товаров в сутки| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPrices0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPrices0 MimeNoContent GetPricesResponse MimeJSON
getPrices0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offer-prices"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getPrices0 "" #-}

data GetPrices0  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetPrices0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetPrices0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "archived" - Фильтр по нахождению в архиве.
instance HasOptionalParam GetPrices0 Archived where
  applyOptionalParam req (Archived xs) =
    req `addQuery` toQuery ("archived", Just xs)
-- | @application/json@
instance Produces GetPrices0 MimeJSON


-- *** getPricesByOfferIds0

-- | @POST \/campaigns\/{campaignId}\/offer-prices@
-- 
-- Просмотр цен на указанные товары в магазине
-- 
-- Возвращает список цен на указанные товары в магазине.  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров на витрине * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPricesByOfferIds0
  :: (Consumes GetPricesByOfferIds0 MimeJSON)
  => CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPricesByOfferIds0 MimeJSON GetPricesByOfferIdsResponse MimeJSON
getPricesByOfferIds0 (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-prices"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetPricesByOfferIds0 
instance HasBodyParam GetPricesByOfferIds0 GetPricesByOfferIdsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetPricesByOfferIds0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetPricesByOfferIds0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetPricesByOfferIds0 MimeJSON

-- | @application/json@
instance Produces GetPricesByOfferIds0 MimeJSON


-- *** getPromoOffers0

-- | @POST \/businesses\/{businessId}\/promos\/offers@
-- 
-- Получение списка товаров, которые участвуют или могут участвовать в акции
-- 
-- Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPromoOffers0
  :: (Consumes GetPromoOffers0 MimeJSON, MimeRender MimeJSON GetPromoOffersRequest)
  => GetPromoOffersRequest -- ^ "getPromoOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPromoOffers0 MimeJSON GetPromoOffersResponse MimeJSON
getPromoOffers0 getPromoOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getPromoOffersRequest

data GetPromoOffers0 
instance HasBodyParam GetPromoOffers0 GetPromoOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetPromoOffers0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetPromoOffers0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetPromoOffers0 MimeJSON

-- | @application/json@
instance Produces GetPromoOffers0 MimeJSON


-- *** getPromos0

-- | @POST \/businesses\/{businessId}\/promos@
-- 
-- Получение списка акций
-- 
-- Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPromos0
  :: (Consumes GetPromos0 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPromos0 MimeJSON GetPromosResponse MimeJSON
getPromos0 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetPromos0 
instance HasBodyParam GetPromos0 GetPromosRequest 

-- | @application/json@
instance Consumes GetPromos0 MimeJSON

-- | @application/json@
instance Produces GetPromos0 MimeJSON


-- *** getQualityRatings0

-- | @POST \/businesses\/{businessId}\/ratings\/quality@
-- 
-- Индекс качества магазинов
-- 
-- Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getQualityRatings0
  :: (Consumes GetQualityRatings0 MimeJSON, MimeRender MimeJSON GetQualityRatingRequest)
  => GetQualityRatingRequest -- ^ "getQualityRatingRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetQualityRatings0 MimeJSON GetQualityRatingResponse MimeJSON
getQualityRatings0 getQualityRatingRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/ratings/quality"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getQualityRatingRequest

data GetQualityRatings0 
instance HasBodyParam GetQualityRatings0 GetQualityRatingRequest 

-- | @application/json@
instance Consumes GetQualityRatings0 MimeJSON

-- | @application/json@
instance Produces GetQualityRatings0 MimeJSON


-- *** getReportInfo0

-- | @GET \/reports\/info\/{reportId}@
-- 
-- Получение заданного отчета
-- 
-- Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReportInfo0
  :: ReportId -- ^ "reportId" -  Идентификатор отчета, который вы получили после запуска генерации. 
  -> ПартнерскийAPIМаркетаRequest GetReportInfo0 MimeNoContent GetReportInfoResponse MimeJSON
getReportInfo0 (ReportId reportId) =
  _mkRequest "GET" ["/reports/info/",toPath reportId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReportInfo0  
-- | @application/json@
instance Produces GetReportInfo0 MimeJSON


-- *** getReturn3

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/returns\/{returnId}@
-- 
-- Информация о невыкупе или возврате
-- 
-- Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReturn3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ReturnId -- ^ "returnId" -  Идентификатор возврата.
  -> ПартнерскийAPIМаркетаRequest GetReturn3 MimeNoContent GetReturnResponse MimeJSON
getReturn3 (CampaignId campaignId) (OrderId orderId) (ReturnId returnId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/returns/",toPath returnId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReturn3  
-- | @application/json@
instance Produces GetReturn3 MimeJSON


-- *** getReturnPhoto3

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/returns\/{returnId}\/decision\/{itemId}\/image\/{imageHash}@
-- 
-- Получение фотографии возврата
-- 
-- Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReturnPhoto3
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ReturnId -- ^ "returnId" -  Идентификатор возврата.
  -> ItemId -- ^ "itemId" -  Идентификатор товара в возврате.
  -> ImageHash -- ^ "imageHash" -  Хеш ссылки изображения для загрузки.
  -> ПартнерскийAPIМаркетаRequest GetReturnPhoto3 MimeNoContent FilePath accept
getReturnPhoto3  _ (CampaignId campaignId) (OrderId orderId) (ReturnId returnId) (ItemId itemId) (ImageHash imageHash) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/returns/",toPath returnId,"/decision/",toPath itemId,"/image/",toPath imageHash]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReturnPhoto3  
-- | @application/octet-stream@
instance Produces GetReturnPhoto3 MimeOctetStream
-- | @application/json@
instance Produces GetReturnPhoto3 MimeJSON


-- *** getReturns3

-- | @GET \/campaigns\/{campaignId}\/returns@
-- 
-- Список невыкупов и возвратов
-- 
-- Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReturns3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetReturns3 MimeNoContent GetReturnsResponse MimeJSON
getReturns3 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/returns"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReturns3  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetReturns3 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetReturns3 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "orderIds" - Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. 
instance HasOptionalParam GetReturns3 OrderIds where
  applyOptionalParam req (OrderIds xs) =
    req `addQuery` toQueryColl CommaSeparated ("orderIds", Just xs)

-- | /Optional Param/ "statuses" - Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. 
instance HasOptionalParam GetReturns3 Statuses where
  applyOptionalParam req (Statuses xs) =
    req `addQuery` toQueryColl CommaSeparated ("statuses", Just xs)

-- | /Optional Param/ "type" - Тип заказа для фильтрации:  * `RETURN` — возврат.  * `UNREDEEMED` — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. 
instance HasOptionalParam GetReturns3 ParamType where
  applyOptionalParam req (ParamType xs) =
    req `addQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "fromDate" - Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
instance HasOptionalParam GetReturns3 FromDate where
  applyOptionalParam req (FromDate xs) =
    req `addQuery` toQuery ("fromDate", Just xs)

-- | /Optional Param/ "toDate" - Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
instance HasOptionalParam GetReturns3 ToDate where
  applyOptionalParam req (ToDate xs) =
    req `addQuery` toQuery ("toDate", Just xs)

-- | /Optional Param/ "from_date" - {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `fromDate`.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления. 
instance HasOptionalParam GetReturns3 FromDate2 where
  applyOptionalParam req (FromDate2 xs) =
    req `addQuery` toQuery ("from_date", Just xs)

-- | /Optional Param/ "to_date" - {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `toDate`.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления. 
instance HasOptionalParam GetReturns3 ToDate2 where
  applyOptionalParam req (ToDate2 xs) =
    req `addQuery` toQuery ("to_date", Just xs)
-- | @application/json@
instance Produces GetReturns3 MimeJSON


-- *** getStocks0

-- | @POST \/campaigns\/{campaignId}\/offers\/stocks@
-- 
-- Информация об остатках и оборачиваемости
-- 
-- Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \"По умолчанию данные по оборачивамости не возращаются\" %}  Чтобы они были в ответе, передавайте `true` в поле `withTurnover`.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: <> (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getStocks0
  :: (Consumes GetStocks0 MimeJSON)
  => CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetStocks0 MimeJSON GetWarehouseStocksResponse MimeJSON
getStocks0 (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers/stocks"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetStocks0 
instance HasBodyParam GetStocks0 GetWarehouseStocksRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetStocks0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetStocks0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetStocks0 MimeJSON

-- | @application/json@
instance Produces GetStocks0 MimeJSON


-- *** getSuggestedOfferMappingEntries0

-- | @POST \/campaigns\/{campaignId}\/offer-mapping-entries\/suggestions@
-- 
-- Рекомендованные карточки для товаров
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku=», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getSuggestedOfferMappingEntries0
  :: (Consumes GetSuggestedOfferMappingEntries0 MimeJSON, MimeRender MimeJSON GetSuggestedOfferMappingEntriesRequest)
  => GetSuggestedOfferMappingEntriesRequest -- ^ "getSuggestedOfferMappingEntriesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetSuggestedOfferMappingEntries0 MimeJSON GetSuggestedOfferMappingEntriesResponse MimeJSON
getSuggestedOfferMappingEntries0 getSuggestedOfferMappingEntriesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-mapping-entries/suggestions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getSuggestedOfferMappingEntriesRequest

{-# DEPRECATED getSuggestedOfferMappingEntries0 "" #-}

data GetSuggestedOfferMappingEntries0 
instance HasBodyParam GetSuggestedOfferMappingEntries0 GetSuggestedOfferMappingEntriesRequest 

-- | @application/json@
instance Consumes GetSuggestedOfferMappingEntries0 MimeJSON

-- | @application/json@
instance Produces GetSuggestedOfferMappingEntries0 MimeJSON


-- *** getSuggestedOfferMappings1

-- | @POST \/businesses\/{businessId}\/offer-mappings\/suggestions@
-- 
-- Просмотр карточек на Маркете, которые подходят вашим товарам
-- 
-- Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getSuggestedOfferMappings1
  :: (Consumes GetSuggestedOfferMappings1 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetSuggestedOfferMappings1 MimeJSON GetSuggestedOfferMappingsResponse MimeJSON
getSuggestedOfferMappings1 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/suggestions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetSuggestedOfferMappings1 
instance HasBodyParam GetSuggestedOfferMappings1 GetSuggestedOfferMappingsRequest 

-- | @application/json@
instance Consumes GetSuggestedOfferMappings1 MimeJSON

-- | @application/json@
instance Produces GetSuggestedOfferMappings1 MimeJSON


-- *** getSuggestedPrices0

-- | @POST \/campaigns\/{campaignId}\/offer-prices\/suggestions@
-- 
-- Цены для продвижения товаров
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \"\" %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getSuggestedPrices0
  :: (Consumes GetSuggestedPrices0 MimeJSON, MimeRender MimeJSON SuggestPricesRequest)
  => SuggestPricesRequest -- ^ "suggestPricesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetSuggestedPrices0 MimeJSON SuggestPricesResponse MimeJSON
getSuggestedPrices0 suggestPricesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-prices/suggestions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` suggestPricesRequest

{-# DEPRECATED getSuggestedPrices0 "" #-}

data GetSuggestedPrices0 
instance HasBodyParam GetSuggestedPrices0 SuggestPricesRequest 

-- | @application/json@
instance Consumes GetSuggestedPrices0 MimeJSON

-- | @application/json@
instance Produces GetSuggestedPrices0 MimeJSON


-- *** putBidsForBusiness2

-- | @PUT \/businesses\/{businessId}\/bids@
-- 
-- Включение буста продаж и установка ставок
-- 
-- Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \"Как в кабинете выглядит кампания, созданная через API\" %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
putBidsForBusiness2
  :: (Consumes PutBidsForBusiness2 MimeJSON, MimeRender MimeJSON PutSkuBidsRequest)
  => PutSkuBidsRequest -- ^ "putSkuBidsRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest PutBidsForBusiness2 MimeJSON EmptyApiResponse MimeJSON
putBidsForBusiness2 putSkuBidsRequest (BusinessId businessId) =
  _mkRequest "PUT" ["/businesses/",toPath businessId,"/bids"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` putSkuBidsRequest

data PutBidsForBusiness2 

-- | /Body Param/ "PutSkuBidsRequest" - description
instance HasBodyParam PutBidsForBusiness2 PutSkuBidsRequest 

-- | @application/json@
instance Consumes PutBidsForBusiness2 MimeJSON

-- | @application/json@
instance Produces PutBidsForBusiness2 MimeJSON


-- *** putBidsForCampaign3

-- | @PUT \/campaigns\/{campaignId}\/bids@
-- 
-- Включение буста продаж и установка ставок для магазина
-- 
-- Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
putBidsForCampaign3
  :: (Consumes PutBidsForCampaign3 MimeJSON, MimeRender MimeJSON PutSkuBidsRequest)
  => PutSkuBidsRequest -- ^ "putSkuBidsRequest" -  description
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest PutBidsForCampaign3 MimeJSON EmptyApiResponse MimeJSON
putBidsForCampaign3 putSkuBidsRequest (CampaignId campaignId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/bids"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` putSkuBidsRequest

data PutBidsForCampaign3 

-- | /Body Param/ "PutSkuBidsRequest" - description
instance HasBodyParam PutBidsForCampaign3 PutSkuBidsRequest 

-- | @application/json@
instance Consumes PutBidsForCampaign3 MimeJSON

-- | @application/json@
instance Produces PutBidsForCampaign3 MimeJSON


-- *** refreshFeed3

-- | @POST \/campaigns\/{campaignId}\/feeds\/{feedId}\/refresh@
-- 
-- Сообщить, что прайс-лист обновился
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
refreshFeed3
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest RefreshFeed3 MimeNoContent EmptyApiResponse MimeJSON
refreshFeed3 (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId,"/refresh"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED refreshFeed3 "" #-}

data RefreshFeed3  
-- | @application/json@
instance Produces RefreshFeed3 MimeJSON


-- *** searchRegionChildren0

-- | @GET \/regions\/{regionId}\/children@
-- 
-- Информация о дочерних регионах
-- 
-- Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
searchRegionChildren0
  :: RegionId -- ^ "regionId" -  Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  -> ПартнерскийAPIМаркетаRequest SearchRegionChildren0 MimeNoContent GetRegionWithChildrenResponse MimeJSON
searchRegionChildren0 (RegionId regionId) =
  _mkRequest "GET" ["/regions/",toPath regionId,"/children"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data SearchRegionChildren0  

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam SearchRegionChildren0 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam SearchRegionChildren0 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces SearchRegionChildren0 MimeJSON


-- *** searchRegionsById0

-- | @GET \/regions\/{regionId}@
-- 
-- Информация о регионе
-- 
-- Возвращает информацию о регионе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
searchRegionsById0
  :: RegionId -- ^ "regionId" -  Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  -> ПартнерскийAPIМаркетаRequest SearchRegionsById0 MimeNoContent GetRegionsResponse MimeJSON
searchRegionsById0 (RegionId regionId) =
  _mkRequest "GET" ["/regions/",toPath regionId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data SearchRegionsById0  
-- | @application/json@
instance Produces SearchRegionsById0 MimeJSON


-- *** searchRegionsByName0

-- | @GET \/regions@
-- 
-- Поиск регионов по их имени
-- 
-- Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
searchRegionsByName0
  :: Name -- ^ "name" -  Название региона.  Важно учитывать регистр: первая буква должна быть заглавной, остальные — строчными. Например, `Москва`. 
  -> ПартнерскийAPIМаркетаRequest SearchRegionsByName0 MimeNoContent GetRegionsResponse MimeJSON
searchRegionsByName0 (Name name) =
  _mkRequest "GET" ["/regions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `addQuery` toQuery ("name", Just name)

data SearchRegionsByName0  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam SearchRegionsByName0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam SearchRegionsByName0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces SearchRegionsByName0 MimeJSON


-- *** sendFileToChat2

-- | @POST \/businesses\/{businessId}\/chats\/file\/send@
-- 
-- Отправка файла в чат
-- 
-- Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
sendFileToChat2
  :: (Consumes SendFileToChat2 MimeMultipartFormData)
  => File -- ^ "file" -  Содержимое файла. Максимальный размер файла — 5 Мбайт.
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest SendFileToChat2 MimeMultipartFormData EmptyApiResponse MimeJSON
sendFileToChat2 (File file) (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/file/send"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `_addMultiFormPart` NH.partFileSource "file" file
    `addQuery` toQuery ("chatId", Just chatId)

data SendFileToChat2  

-- | @multipart/form-data@
instance Consumes SendFileToChat2 MimeMultipartFormData

-- | @application/json@
instance Produces SendFileToChat2 MimeJSON


-- *** sendMessageToChat2

-- | @POST \/businesses\/{businessId}\/chats\/message@
-- 
-- Отправка сообщения в чат
-- 
-- Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
sendMessageToChat2
  :: (Consumes SendMessageToChat2 MimeJSON, MimeRender MimeJSON SendMessageToChatRequest)
  => SendMessageToChatRequest -- ^ "sendMessageToChatRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest SendMessageToChat2 MimeJSON EmptyApiResponse MimeJSON
sendMessageToChat2 sendMessageToChatRequest (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/message"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` sendMessageToChatRequest
    `addQuery` toQuery ("chatId", Just chatId)

data SendMessageToChat2 

-- | /Body Param/ "SendMessageToChatRequest" - description
instance HasBodyParam SendMessageToChat2 SendMessageToChatRequest 

-- | @application/json@
instance Consumes SendMessageToChat2 MimeJSON

-- | @application/json@
instance Produces SendMessageToChat2 MimeJSON


-- *** setFeedParams3

-- | @POST \/campaigns\/{campaignId}\/feeds\/{feedId}\/params@
-- 
-- Изменение параметров прайс-листа
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
setFeedParams3
  :: (Consumes SetFeedParams3 MimeJSON, MimeRender MimeJSON SetFeedParamsRequest)
  => SetFeedParamsRequest -- ^ "setFeedParamsRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest SetFeedParams3 MimeJSON EmptyApiResponse MimeJSON
setFeedParams3 setFeedParamsRequest (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId,"/params"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` setFeedParamsRequest

{-# DEPRECATED setFeedParams3 "" #-}

data SetFeedParams3 
instance HasBodyParam SetFeedParams3 SetFeedParamsRequest 

-- | @application/json@
instance Consumes SetFeedParams3 MimeJSON

-- | @application/json@
instance Produces SetFeedParams3 MimeJSON


-- *** skipGoodsFeedbacksReaction0

-- | @POST \/businesses\/{businessId}\/goods-feedback\/skip-reaction@
-- 
-- Отказ от ответа на отзывы
-- 
-- Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
skipGoodsFeedbacksReaction0
  :: (Consumes SkipGoodsFeedbacksReaction0 MimeJSON, MimeRender MimeJSON SkipGoodsFeedbackReactionRequest)
  => SkipGoodsFeedbackReactionRequest -- ^ "skipGoodsFeedbackReactionRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest SkipGoodsFeedbacksReaction0 MimeJSON EmptyApiResponse MimeJSON
skipGoodsFeedbacksReaction0 skipGoodsFeedbackReactionRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/skip-reaction"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` skipGoodsFeedbackReactionRequest

data SkipGoodsFeedbacksReaction0 
instance HasBodyParam SkipGoodsFeedbacksReaction0 SkipGoodsFeedbackReactionRequest 

-- | @application/json@
instance Consumes SkipGoodsFeedbacksReaction0 MimeJSON

-- | @application/json@
instance Produces SkipGoodsFeedbacksReaction0 MimeJSON


-- *** updateBusinessPrices0

-- | @POST \/businesses\/{businessId}\/offer-prices\/updates@
-- 
-- Установка цен на товары во всех магазинах
-- 
-- Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateBusinessPrices0
  :: (Consumes UpdateBusinessPrices0 MimeJSON, MimeRender MimeJSON UpdateBusinessPricesRequest)
  => UpdateBusinessPricesRequest -- ^ "updateBusinessPricesRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateBusinessPrices0 MimeJSON EmptyApiResponse MimeJSON
updateBusinessPrices0 updateBusinessPricesRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-prices/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateBusinessPricesRequest

data UpdateBusinessPrices0 
instance HasBodyParam UpdateBusinessPrices0 UpdateBusinessPricesRequest 

-- | @application/json@
instance Consumes UpdateBusinessPrices0 MimeJSON

-- | @application/json@
instance Produces UpdateBusinessPrices0 MimeJSON


-- *** updateCampaignOffers1

-- | @POST \/campaigns\/{campaignId}\/offers\/update@
-- 
-- Изменение условий продажи товаров в магазине
-- 
-- Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateCampaignOffers1
  :: (Consumes UpdateCampaignOffers1 MimeJSON, MimeRender MimeJSON UpdateCampaignOffersRequest)
  => UpdateCampaignOffersRequest -- ^ "updateCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateCampaignOffers1 MimeJSON EmptyApiResponse MimeJSON
updateCampaignOffers1 updateCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateCampaignOffersRequest

data UpdateCampaignOffers1 
instance HasBodyParam UpdateCampaignOffers1 UpdateCampaignOffersRequest 

-- | @application/json@
instance Consumes UpdateCampaignOffers1 MimeJSON

-- | @application/json@
instance Produces UpdateCampaignOffers1 MimeJSON


-- *** updateGoodsFeedbackComment0

-- | @POST \/businesses\/{businessId}\/goods-feedback\/comments\/update@
-- 
-- Добавление нового или изменение созданного комментария
-- 
-- Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateGoodsFeedbackComment0
  :: (Consumes UpdateGoodsFeedbackComment0 MimeJSON, MimeRender MimeJSON UpdateGoodsFeedbackCommentRequest)
  => UpdateGoodsFeedbackCommentRequest -- ^ "updateGoodsFeedbackCommentRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateGoodsFeedbackComment0 MimeJSON UpdateGoodsFeedbackCommentResponse MimeJSON
updateGoodsFeedbackComment0 updateGoodsFeedbackCommentRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/comments/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateGoodsFeedbackCommentRequest

data UpdateGoodsFeedbackComment0 
instance HasBodyParam UpdateGoodsFeedbackComment0 UpdateGoodsFeedbackCommentRequest 

-- | @application/json@
instance Consumes UpdateGoodsFeedbackComment0 MimeJSON

-- | @application/json@
instance Produces UpdateGoodsFeedbackComment0 MimeJSON


-- *** updateOfferContent1

-- | @POST \/businesses\/{businessId}\/offer-cards\/update@
-- 
-- Редактирование категорийных характеристик товара
-- 
-- Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOfferContent1
  :: (Consumes UpdateOfferContent1 MimeJSON, MimeRender MimeJSON UpdateOfferContentRequest)
  => UpdateOfferContentRequest -- ^ "updateOfferContentRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOfferContent1 MimeJSON UpdateOfferContentResponse MimeJSON
updateOfferContent1 updateOfferContentRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-cards/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOfferContentRequest

data UpdateOfferContent1 
instance HasBodyParam UpdateOfferContent1 UpdateOfferContentRequest 

-- | @application/json@
instance Consumes UpdateOfferContent1 MimeJSON

-- | @application/json@
instance Produces UpdateOfferContent1 MimeJSON


-- *** updateOfferMappingEntries0

-- | @POST \/campaigns\/{campaignId}\/offer-mapping-entries\/updates@
-- 
-- Добавление и редактирование товаров в каталоге
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре `shopSku` ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре `shopSku` ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус `NEED_CONTENT` (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус `NEED_INFO` (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOfferMappingEntries0
  :: (Consumes UpdateOfferMappingEntries0 MimeJSON, MimeRender MimeJSON UpdateOfferMappingEntryRequest)
  => UpdateOfferMappingEntryRequest -- ^ "updateOfferMappingEntryRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOfferMappingEntries0 MimeJSON EmptyApiResponse MimeJSON
updateOfferMappingEntries0 updateOfferMappingEntryRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-mapping-entries/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOfferMappingEntryRequest

{-# DEPRECATED updateOfferMappingEntries0 "" #-}

data UpdateOfferMappingEntries0 
instance HasBodyParam UpdateOfferMappingEntries0 UpdateOfferMappingEntryRequest 

-- | @application/json@
instance Consumes UpdateOfferMappingEntries0 MimeJSON

-- | @application/json@
instance Produces UpdateOfferMappingEntries0 MimeJSON


-- *** updateOfferMappings1

-- | @POST \/businesses\/{businessId}\/offer-mappings\/update@
-- 
-- Добавление товаров в каталог и изменение информации о них
-- 
-- Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOfferMappings1
  :: (Consumes UpdateOfferMappings1 MimeJSON, MimeRender MimeJSON UpdateOfferMappingsRequest)
  => UpdateOfferMappingsRequest -- ^ "updateOfferMappingsRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOfferMappings1 MimeJSON UpdateOfferMappingsResponse MimeJSON
updateOfferMappings1 updateOfferMappingsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOfferMappingsRequest

data UpdateOfferMappings1 
instance HasBodyParam UpdateOfferMappings1 UpdateOfferMappingsRequest 

-- | @application/json@
instance Consumes UpdateOfferMappings1 MimeJSON

-- | @application/json@
instance Produces UpdateOfferMappings1 MimeJSON


-- *** updatePrices0

-- | @POST \/campaigns\/{campaignId}\/offer-prices\/updates@
-- 
-- Установка цен на товары в конкретном магазине
-- 
-- Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updatePrices0
  :: (Consumes UpdatePrices0 MimeJSON, MimeRender MimeJSON UpdatePricesRequest)
  => UpdatePricesRequest -- ^ "updatePricesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdatePrices0 MimeJSON EmptyApiResponse MimeJSON
updatePrices0 updatePricesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-prices/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updatePricesRequest

data UpdatePrices0 
instance HasBodyParam UpdatePrices0 UpdatePricesRequest 

-- | @application/json@
instance Consumes UpdatePrices0 MimeJSON

-- | @application/json@
instance Produces UpdatePrices0 MimeJSON


-- *** updatePromoOffers0

-- | @POST \/businesses\/{businessId}\/promos\/offers\/update@
-- 
-- Добавление товаров в акцию или изменение их цен
-- 
-- Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updatePromoOffers0
  :: (Consumes UpdatePromoOffers0 MimeJSON, MimeRender MimeJSON UpdatePromoOffersRequest)
  => UpdatePromoOffersRequest -- ^ "updatePromoOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdatePromoOffers0 MimeJSON UpdatePromoOffersResponse MimeJSON
updatePromoOffers0 updatePromoOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos/offers/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updatePromoOffersRequest

data UpdatePromoOffers0 
instance HasBodyParam UpdatePromoOffers0 UpdatePromoOffersRequest 

-- | @application/json@
instance Consumes UpdatePromoOffers0 MimeJSON

-- | @application/json@
instance Produces UpdatePromoOffers0 MimeJSON

