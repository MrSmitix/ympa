{-
   Партнерский API Маркета

   API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

   OpenAPI Version: 3.0.3
   Партнерский API Маркета API version: LATEST
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : ПартнерскийAPIМаркета.API.Fbs
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module ПартнерскийAPIМаркета.API.Fbs where

import ПартнерскийAPIМаркета.Core
import ПартнерскийAPIМаркета.MimeTypes
import ПартнерскийAPIМаркета.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Fbs

-- *** addHiddenOffers1

-- | @POST \/campaigns\/{campaignId}\/hidden-offers@
-- 
-- Скрытие товаров и настройки скрытия
-- 
-- Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
addHiddenOffers1
  :: (Consumes AddHiddenOffers1 MimeJSON, MimeRender MimeJSON AddHiddenOffersRequest)
  => AddHiddenOffersRequest -- ^ "addHiddenOffersRequest" -  Запрос на скрытие оферов.
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest AddHiddenOffers1 MimeJSON EmptyApiResponse MimeJSON
addHiddenOffers1 addHiddenOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/hidden-offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` addHiddenOffersRequest

data AddHiddenOffers1 

-- | /Body Param/ "AddHiddenOffersRequest" - Запрос на скрытие оферов.
instance HasBodyParam AddHiddenOffers1 AddHiddenOffersRequest 

-- | @application/json@
instance Consumes AddHiddenOffers1 MimeJSON

-- | @application/json@
instance Produces AddHiddenOffers1 MimeJSON


-- *** addOffersToArchive2

-- | @POST \/businesses\/{businessId}\/offer-mappings\/archive@
-- 
-- Добавление товаров в архив
-- 
-- Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
addOffersToArchive2
  :: (Consumes AddOffersToArchive2 MimeJSON, MimeRender MimeJSON AddOffersToArchiveRequest)
  => AddOffersToArchiveRequest -- ^ "addOffersToArchiveRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest AddOffersToArchive2 MimeJSON AddOffersToArchiveResponse MimeJSON
addOffersToArchive2 addOffersToArchiveRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/archive"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` addOffersToArchiveRequest

data AddOffersToArchive2 
instance HasBodyParam AddOffersToArchive2 AddOffersToArchiveRequest 

-- | @application/json@
instance Consumes AddOffersToArchive2 MimeJSON

-- | @application/json@
instance Produces AddOffersToArchive2 MimeJSON


-- *** calculateTariffs0

-- | @POST \/tariffs\/calculate@
-- 
-- Калькулятор стоимости услуг
-- 
-- Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
calculateTariffs0
  :: (Consumes CalculateTariffs0 MimeJSON, MimeRender MimeJSON CalculateTariffsRequest)
  => CalculateTariffsRequest -- ^ "calculateTariffsRequest"
  -> ПартнерскийAPIМаркетаRequest CalculateTariffs0 MimeJSON CalculateTariffsResponse MimeJSON
calculateTariffs0 calculateTariffsRequest =
  _mkRequest "POST" ["/tariffs/calculate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` calculateTariffsRequest

data CalculateTariffs0 
instance HasBodyParam CalculateTariffs0 CalculateTariffsRequest 

-- | @application/json@
instance Consumes CalculateTariffs0 MimeJSON

-- | @application/json@
instance Produces CalculateTariffs0 MimeJSON


-- *** confirmBusinessPrices2

-- | @POST \/businesses\/{businessId}\/price-quarantine\/confirm@
-- 
-- Удаление товара из карантина по цене в кабинете
-- 
-- Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
confirmBusinessPrices2
  :: (Consumes ConfirmBusinessPrices2 MimeJSON, MimeRender MimeJSON ConfirmPricesRequest)
  => ConfirmPricesRequest -- ^ "confirmPricesRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest ConfirmBusinessPrices2 MimeJSON EmptyApiResponse MimeJSON
confirmBusinessPrices2 confirmPricesRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/price-quarantine/confirm"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` confirmPricesRequest

data ConfirmBusinessPrices2 
instance HasBodyParam ConfirmBusinessPrices2 ConfirmPricesRequest 

-- | @application/json@
instance Consumes ConfirmBusinessPrices2 MimeJSON

-- | @application/json@
instance Produces ConfirmBusinessPrices2 MimeJSON


-- *** confirmCampaignPrices2

-- | @POST \/campaigns\/{campaignId}\/price-quarantine\/confirm@
-- 
-- Удаление товара из карантина по цене в магазине
-- 
-- Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
confirmCampaignPrices2
  :: (Consumes ConfirmCampaignPrices2 MimeJSON, MimeRender MimeJSON ConfirmPricesRequest)
  => ConfirmPricesRequest -- ^ "confirmPricesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest ConfirmCampaignPrices2 MimeJSON EmptyApiResponse MimeJSON
confirmCampaignPrices2 confirmPricesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/price-quarantine/confirm"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` confirmPricesRequest

data ConfirmCampaignPrices2 
instance HasBodyParam ConfirmCampaignPrices2 ConfirmPricesRequest 

-- | @application/json@
instance Consumes ConfirmCampaignPrices2 MimeJSON

-- | @application/json@
instance Produces ConfirmCampaignPrices2 MimeJSON


-- *** confirmShipment0

-- | @POST \/campaigns\/{campaignId}\/first-mile\/shipments\/{shipmentId}\/confirm@
-- 
-- Подтверждение отгрузки
-- 
-- Подтверждает отгрузку товаров в сортировочный центр или пункт приема заказов. |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
confirmShipment0
  :: (Consumes ConfirmShipment0 MimeJSON)
  => CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор отгрузки.
  -> ПартнерскийAPIМаркетаRequest ConfirmShipment0 MimeJSON EmptyApiResponse MimeJSON
confirmShipment0 (CampaignId campaignId) (ShipmentId shipmentId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/first-mile/shipments/",toPath shipmentId,"/confirm"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data ConfirmShipment0 
instance HasBodyParam ConfirmShipment0 ConfirmShipmentRequest 

-- | @application/json@
instance Consumes ConfirmShipment0 MimeJSON

-- | @application/json@
instance Produces ConfirmShipment0 MimeJSON


-- *** createChat1

-- | @POST \/businesses\/{businessId}\/chats\/new@
-- 
-- Создание нового чата с покупателем
-- 
-- Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
createChat1
  :: (Consumes CreateChat1 MimeJSON, MimeRender MimeJSON CreateChatRequest)
  => CreateChatRequest -- ^ "createChatRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest CreateChat1 MimeJSON CreateChatResponse MimeJSON
createChat1 createChatRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/new"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` createChatRequest

data CreateChat1 

-- | /Body Param/ "CreateChatRequest" - description
instance HasBodyParam CreateChat1 CreateChatRequest 

-- | @application/json@
instance Consumes CreateChat1 MimeJSON

-- | @application/json@
instance Produces CreateChat1 MimeJSON


-- *** deleteCampaignOffers2

-- | @POST \/campaigns\/{campaignId}\/offers\/delete@
-- 
-- Удаление товаров из ассортимента магазина
-- 
-- Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteCampaignOffers2
  :: (Consumes DeleteCampaignOffers2 MimeJSON, MimeRender MimeJSON DeleteCampaignOffersRequest)
  => DeleteCampaignOffersRequest -- ^ "deleteCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteCampaignOffers2 MimeJSON DeleteCampaignOffersResponse MimeJSON
deleteCampaignOffers2 deleteCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteCampaignOffersRequest

data DeleteCampaignOffers2 
instance HasBodyParam DeleteCampaignOffers2 DeleteCampaignOffersRequest 

-- | @application/json@
instance Consumes DeleteCampaignOffers2 MimeJSON

-- | @application/json@
instance Produces DeleteCampaignOffers2 MimeJSON


-- *** deleteGoodsFeedbackComment1

-- | @POST \/businesses\/{businessId}\/goods-feedback\/comments\/delete@
-- 
-- Удаление комментария к отзыву
-- 
-- Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteGoodsFeedbackComment1
  :: (Consumes DeleteGoodsFeedbackComment1 MimeJSON, MimeRender MimeJSON DeleteGoodsFeedbackCommentRequest)
  => DeleteGoodsFeedbackCommentRequest -- ^ "deleteGoodsFeedbackCommentRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteGoodsFeedbackComment1 MimeJSON EmptyApiResponse MimeJSON
deleteGoodsFeedbackComment1 deleteGoodsFeedbackCommentRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/comments/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteGoodsFeedbackCommentRequest

data DeleteGoodsFeedbackComment1 
instance HasBodyParam DeleteGoodsFeedbackComment1 DeleteGoodsFeedbackCommentRequest 

-- | @application/json@
instance Consumes DeleteGoodsFeedbackComment1 MimeJSON

-- | @application/json@
instance Produces DeleteGoodsFeedbackComment1 MimeJSON


-- *** deleteHiddenOffers1

-- | @POST \/campaigns\/{campaignId}\/hidden-offers\/delete@
-- 
-- Возобновление показа товаров
-- 
-- Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteHiddenOffers1
  :: (Consumes DeleteHiddenOffers1 MimeJSON, MimeRender MimeJSON DeleteHiddenOffersRequest)
  => DeleteHiddenOffersRequest -- ^ "deleteHiddenOffersRequest" -  Запрос на возобновление показа оферов.
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteHiddenOffers1 MimeJSON EmptyApiResponse MimeJSON
deleteHiddenOffers1 deleteHiddenOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/hidden-offers/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteHiddenOffersRequest

data DeleteHiddenOffers1 

-- | /Body Param/ "DeleteHiddenOffersRequest" - Запрос на возобновление показа оферов.
instance HasBodyParam DeleteHiddenOffers1 DeleteHiddenOffersRequest 

-- | @application/json@
instance Consumes DeleteHiddenOffers1 MimeJSON

-- | @application/json@
instance Produces DeleteHiddenOffers1 MimeJSON


-- *** deleteOffers2

-- | @POST \/businesses\/{businessId}\/offer-mappings\/delete@
-- 
-- Удаление товаров из каталога
-- 
-- Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteOffers2
  :: (Consumes DeleteOffers2 MimeJSON, MimeRender MimeJSON DeleteOffersRequest)
  => DeleteOffersRequest -- ^ "deleteOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteOffers2 MimeJSON DeleteOffersResponse MimeJSON
deleteOffers2 deleteOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteOffersRequest

data DeleteOffers2 
instance HasBodyParam DeleteOffers2 DeleteOffersRequest 

-- | @application/json@
instance Consumes DeleteOffers2 MimeJSON

-- | @application/json@
instance Produces DeleteOffers2 MimeJSON


-- *** deleteOffersFromArchive2

-- | @POST \/businesses\/{businessId}\/offer-mappings\/unarchive@
-- 
-- Удаление товаров из архива
-- 
-- Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deleteOffersFromArchive2
  :: (Consumes DeleteOffersFromArchive2 MimeJSON, MimeRender MimeJSON DeleteOffersFromArchiveRequest)
  => DeleteOffersFromArchiveRequest -- ^ "deleteOffersFromArchiveRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeleteOffersFromArchive2 MimeJSON DeleteOffersFromArchiveResponse MimeJSON
deleteOffersFromArchive2 deleteOffersFromArchiveRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/unarchive"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deleteOffersFromArchiveRequest

data DeleteOffersFromArchive2 
instance HasBodyParam DeleteOffersFromArchive2 DeleteOffersFromArchiveRequest 

-- | @application/json@
instance Consumes DeleteOffersFromArchive2 MimeJSON

-- | @application/json@
instance Produces DeleteOffersFromArchive2 MimeJSON


-- *** deletePromoOffers1

-- | @POST \/businesses\/{businessId}\/promos\/offers\/delete@
-- 
-- Удаление товаров из акции
-- 
-- Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
deletePromoOffers1
  :: (Consumes DeletePromoOffers1 MimeJSON, MimeRender MimeJSON DeletePromoOffersRequest)
  => DeletePromoOffersRequest -- ^ "deletePromoOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DeletePromoOffers1 MimeJSON DeletePromoOffersResponse MimeJSON
deletePromoOffers1 deletePromoOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos/offers/delete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` deletePromoOffersRequest

data DeletePromoOffers1 
instance HasBodyParam DeletePromoOffers1 DeletePromoOffersRequest 

-- | @application/json@
instance Consumes DeletePromoOffers1 MimeJSON

-- | @application/json@
instance Produces DeletePromoOffers1 MimeJSON


-- *** downloadShipmentAct0

-- | @GET \/campaigns\/{campaignId}\/first-mile\/shipments\/{shipmentId}\/act@
-- 
-- Получение акта приема-передачи
-- 
-- {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам Яндекс Go, подготавливать акт приема‑передачи не нужно.  {% endnote %}  Запрос формирует акт приема-передачи заказов, входящих в отгрузку, и возвращает акт в формате PDF. В акте содержатся собранные и готовые к отправке заказы.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                         | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Дата                                                      | Дата запроса.                                                                                                                                                                                                                                                        | | Отправитель                                               | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                               | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                         | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика)       | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                      | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Вес                                                       | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                           | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
downloadShipmentAct0
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор отгрузки.
  -> ПартнерскийAPIМаркетаRequest DownloadShipmentAct0 MimeNoContent FilePath accept
downloadShipmentAct0  _ (CampaignId campaignId) (ShipmentId shipmentId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/first-mile/shipments/",toPath shipmentId,"/act"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data DownloadShipmentAct0  
-- | @application/pdf@
instance Produces DownloadShipmentAct0 MimePdf
-- | @application/json@
instance Produces DownloadShipmentAct0 MimeJSON


-- *** downloadShipmentDiscrepancyAct0

-- | @GET \/campaigns\/{campaignId}\/first-mile\/shipments\/{shipmentId}\/discrepancy-act@
-- 
-- Получение акта расхождений
-- 
-- Возвращает акт расхождений для заданной отгрузки. |**⚙️ Лимит:** 200 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
downloadShipmentDiscrepancyAct0
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор отгрузки.
  -> ПартнерскийAPIМаркетаRequest DownloadShipmentDiscrepancyAct0 MimeNoContent FilePath accept
downloadShipmentDiscrepancyAct0  _ (CampaignId campaignId) (ShipmentId shipmentId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/first-mile/shipments/",toPath shipmentId,"/discrepancy-act"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data DownloadShipmentDiscrepancyAct0  
-- | @application/json@
instance Produces DownloadShipmentDiscrepancyAct0 MimeJSON
-- | @application/vnd.ms-excel@
instance Produces DownloadShipmentDiscrepancyAct0 MimeVndMsExcel


-- *** downloadShipmentInboundAct0

-- | @GET \/campaigns\/{campaignId}\/first-mile\/shipments\/{shipmentId}\/inbound-act@
-- 
-- Получение фактического акта приема-передачи
-- 
-- Возвращает фактический акт приема-передачи для заданной отгрузки.  Такой акт становится доступен спустя несколько часов после завершения отгрузки. Он может понадобиться, если после отгрузки обнаружатся расхождения.  |**⚙️ Лимит:** 200 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
downloadShipmentInboundAct0
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор отгрузки.
  -> ПартнерскийAPIМаркетаRequest DownloadShipmentInboundAct0 MimeNoContent FilePath accept
downloadShipmentInboundAct0  _ (CampaignId campaignId) (ShipmentId shipmentId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/first-mile/shipments/",toPath shipmentId,"/inbound-act"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data DownloadShipmentInboundAct0  
-- | @application/pdf@
instance Produces DownloadShipmentInboundAct0 MimePdf
-- | @application/json@
instance Produces DownloadShipmentInboundAct0 MimeJSON


-- *** downloadShipmentPalletLabels0

-- | @GET \/campaigns\/{campaignId}\/first-mile\/shipments\/{shipmentId}\/pallet\/labels@
-- 
-- Ярлыки для доверительной приемки (FBS)
-- 
-- PDF-файл с ярлыками на каждый короб или палету в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Распечатайте по несколько копий каждого ярлыка: на одну тару нужно наклеить минимум 2 ярлыка с разных сторон.  Количество упаковок в отгрузке задается в запросе [PUT campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets](../../reference/shipments/setShipmentPalletsCount.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
downloadShipmentPalletLabels0
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор отгрузки.
  -> ПартнерскийAPIМаркетаRequest DownloadShipmentPalletLabels0 MimeNoContent FilePath accept
downloadShipmentPalletLabels0  _ (CampaignId campaignId) (ShipmentId shipmentId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/first-mile/shipments/",toPath shipmentId,"/pallet/labels"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data DownloadShipmentPalletLabels0  

-- | /Optional Param/ "format" - Формат страниц PDF-файла с ярлыками:  * `A4` — по 16 ярлыков на странице. * `A8` — по одному ярлыку на странице. 
instance HasOptionalParam DownloadShipmentPalletLabels0 Format2 where
  applyOptionalParam req (Format2 xs) =
    req `addQuery` toQuery ("format", Just xs)
-- | @application/pdf@
instance Produces DownloadShipmentPalletLabels0 MimePdf
-- | @application/json@
instance Produces DownloadShipmentPalletLabels0 MimeJSON


-- *** downloadShipmentReceptionTransferAct0

-- | @GET \/campaigns\/{campaignId}\/shipments\/reception-transfer-act@
-- 
-- Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
-- 
-- Запрос подтверждает ближайшую отгрузку и возвращает акт приема-передачи в формате PDF.  {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам [Яндекс Go](https://go.yandex/), подготавливать акт приема‑передачи не нужно.  {% endnote %}  В акт входят собранные и готовые к отправке заказы, которые отгружаются в сортировочный центр или пункт приема или курьерам Маркета.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                   | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Отправитель                                         | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                         | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                   | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика) | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Стоимость всех товаров в заказе                     | Стоимость всех заказанных товаров.                                                                                                                                                                                                                                   | | Вес                                                 | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                     | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
downloadShipmentReceptionTransferAct0
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest DownloadShipmentReceptionTransferAct0 MimeNoContent FilePath accept
downloadShipmentReceptionTransferAct0  _ (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/shipments/reception-transfer-act"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data DownloadShipmentReceptionTransferAct0  

-- | /Optional Param/ "warehouse_id" - Идентификатор склада.
instance HasOptionalParam DownloadShipmentReceptionTransferAct0 WarehouseId where
  applyOptionalParam req (WarehouseId xs) =
    req `addQuery` toQuery ("warehouse_id", Just xs)
-- | @application/pdf@
instance Produces DownloadShipmentReceptionTransferAct0 MimePdf
-- | @application/json@
instance Produces DownloadShipmentReceptionTransferAct0 MimeJSON


-- *** downloadShipmentTransportationWaybill0

-- | @GET \/campaigns\/{campaignId}\/first-mile\/shipments\/{shipmentId}\/transportation-waybill@
-- 
-- Получение транспортной накладной
-- 
-- Возвращает транспортную накладную для заданной отгрузки.  Транспортная накладная понадобится, если вы отгружаете товары непосредственно со своего склада. [Подробно об этом способе отгрузки](https://yandex.ru/support/marketplace/orders/fbs/settings/shipment.html#at-your-warehouse)  |**⚙️ Лимит:** 200 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
downloadShipmentTransportationWaybill0
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор отгрузки.
  -> ПартнерскийAPIМаркетаRequest DownloadShipmentTransportationWaybill0 MimeNoContent FilePath accept
downloadShipmentTransportationWaybill0  _ (CampaignId campaignId) (ShipmentId shipmentId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/first-mile/shipments/",toPath shipmentId,"/transportation-waybill"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data DownloadShipmentTransportationWaybill0  
-- | @application/json@
instance Produces DownloadShipmentTransportationWaybill0 MimeJSON
-- | @application/vnd.ms-excel@
instance Produces DownloadShipmentTransportationWaybill0 MimeVndMsExcel


-- *** generateBoostConsolidatedReport1

-- | @POST \/reports\/boost-consolidated\/generate@
-- 
-- Отчет по бусту продаж
-- 
-- Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateBoostConsolidatedReport1
  :: (Consumes GenerateBoostConsolidatedReport1 MimeJSON, MimeRender MimeJSON GenerateBoostConsolidatedRequest)
  => GenerateBoostConsolidatedRequest -- ^ "generateBoostConsolidatedRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateBoostConsolidatedReport1 MimeJSON GenerateReportResponse MimeJSON
generateBoostConsolidatedReport1 generateBoostConsolidatedRequest =
  _mkRequest "POST" ["/reports/boost-consolidated/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateBoostConsolidatedRequest

data GenerateBoostConsolidatedReport1 
instance HasBodyParam GenerateBoostConsolidatedReport1 GenerateBoostConsolidatedRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateBoostConsolidatedReport1 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateBoostConsolidatedReport1 MimeJSON

-- | @application/json@
instance Produces GenerateBoostConsolidatedReport1 MimeJSON


-- *** generateCompetitorsPositionReport2

-- | @POST \/reports\/competitors-position\/generate@
-- 
-- Отчет «Конкурентная позиция»
-- 
-- Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateCompetitorsPositionReport2
  :: (Consumes GenerateCompetitorsPositionReport2 MimeJSON, MimeRender MimeJSON GenerateCompetitorsPositionReportRequest)
  => GenerateCompetitorsPositionReportRequest -- ^ "generateCompetitorsPositionReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateCompetitorsPositionReport2 MimeJSON GenerateReportResponse MimeJSON
generateCompetitorsPositionReport2 generateCompetitorsPositionReportRequest =
  _mkRequest "POST" ["/reports/competitors-position/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateCompetitorsPositionReportRequest

data GenerateCompetitorsPositionReport2 
instance HasBodyParam GenerateCompetitorsPositionReport2 GenerateCompetitorsPositionReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateCompetitorsPositionReport2 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateCompetitorsPositionReport2 MimeJSON

-- | @application/json@
instance Produces GenerateCompetitorsPositionReport2 MimeJSON


-- *** generateGoodsFeedbackReport1

-- | @POST \/reports\/goods-feedback\/generate@
-- 
-- Отчет по отзывам о товарах
-- 
-- Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateGoodsFeedbackReport1
  :: (Consumes GenerateGoodsFeedbackReport1 MimeJSON, MimeRender MimeJSON GenerateGoodsFeedbackRequest)
  => GenerateGoodsFeedbackRequest -- ^ "generateGoodsFeedbackRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateGoodsFeedbackReport1 MimeJSON GenerateReportResponse MimeJSON
generateGoodsFeedbackReport1 generateGoodsFeedbackRequest =
  _mkRequest "POST" ["/reports/goods-feedback/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateGoodsFeedbackRequest

data GenerateGoodsFeedbackReport1 
instance HasBodyParam GenerateGoodsFeedbackReport1 GenerateGoodsFeedbackRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateGoodsFeedbackReport1 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateGoodsFeedbackReport1 MimeJSON

-- | @application/json@
instance Produces GenerateGoodsFeedbackReport1 MimeJSON


-- *** generateGoodsRealizationReport1

-- | @POST \/reports\/goods-realization\/generate@
-- 
-- Отчет по реализации
-- 
-- Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateGoodsRealizationReport1
  :: (Consumes GenerateGoodsRealizationReport1 MimeJSON, MimeRender MimeJSON GenerateGoodsRealizationReportRequest)
  => GenerateGoodsRealizationReportRequest -- ^ "generateGoodsRealizationReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateGoodsRealizationReport1 MimeJSON GenerateReportResponse MimeJSON
generateGoodsRealizationReport1 generateGoodsRealizationReportRequest =
  _mkRequest "POST" ["/reports/goods-realization/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateGoodsRealizationReportRequest

data GenerateGoodsRealizationReport1 
instance HasBodyParam GenerateGoodsRealizationReport1 GenerateGoodsRealizationReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateGoodsRealizationReport1 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateGoodsRealizationReport1 MimeJSON

-- | @application/json@
instance Produces GenerateGoodsRealizationReport1 MimeJSON


-- *** generateMassOrderLabelsReport0

-- | @POST \/reports\/documents\/labels\/generate@
-- 
-- Готовые ярлыки‑наклейки на все коробки в нескольких заказах
-- 
-- Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateMassOrderLabelsReport0
  :: (Consumes GenerateMassOrderLabelsReport0 MimeJSON, MimeRender MimeJSON GenerateMassOrderLabelsRequest)
  => GenerateMassOrderLabelsRequest -- ^ "generateMassOrderLabelsRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateMassOrderLabelsReport0 MimeJSON GenerateReportResponse MimeJSON
generateMassOrderLabelsReport0 generateMassOrderLabelsRequest =
  _mkRequest "POST" ["/reports/documents/labels/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateMassOrderLabelsRequest

data GenerateMassOrderLabelsReport0 
instance HasBodyParam GenerateMassOrderLabelsReport0 GenerateMassOrderLabelsRequest 

-- | /Optional Param/ "format" - Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.
instance HasOptionalParam GenerateMassOrderLabelsReport0 Format where
  applyOptionalParam req (Format xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateMassOrderLabelsReport0 MimeJSON

-- | @application/json@
instance Produces GenerateMassOrderLabelsReport0 MimeJSON


-- *** generateOrderLabel0

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/delivery\/shipments\/{shipmentId}\/boxes\/{boxId}\/label@
-- 
-- Готовый ярлык‑наклейка для коробки в заказе
-- 
-- Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateOrderLabel0
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор грузоместа.
  -> BoxId -- ^ "boxId" -  Идентификатор коробки.
  -> ПартнерскийAPIМаркетаRequest GenerateOrderLabel0 MimeNoContent FilePath accept
generateOrderLabel0  _ (CampaignId campaignId) (OrderId orderId) (ShipmentId shipmentId) (BoxId boxId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/delivery/shipments/",toPath shipmentId,"/boxes/",toPath boxId,"/label"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GenerateOrderLabel0  

-- | /Optional Param/ "format" - Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.
instance HasOptionalParam GenerateOrderLabel0 Format where
  applyOptionalParam req (Format xs) =
    req `addQuery` toQuery ("format", Just xs)
-- | @application/pdf@
instance Produces GenerateOrderLabel0 MimePdf
-- | @application/json@
instance Produces GenerateOrderLabel0 MimeJSON


-- *** generateOrderLabels0

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/delivery\/labels@
-- 
-- Готовые ярлыки‑наклейки на все коробки в одном заказе
-- 
-- Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateOrderLabels0
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GenerateOrderLabels0 MimeNoContent FilePath accept
generateOrderLabels0  _ (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/delivery/labels"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GenerateOrderLabels0  

-- | /Optional Param/ "format" - Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.
instance HasOptionalParam GenerateOrderLabels0 Format where
  applyOptionalParam req (Format xs) =
    req `addQuery` toQuery ("format", Just xs)
-- | @application/pdf@
instance Produces GenerateOrderLabels0 MimePdf
-- | @application/json@
instance Produces GenerateOrderLabels0 MimeJSON


-- *** generatePricesReport1

-- | @POST \/reports\/prices\/generate@
-- 
-- Отчет «Цены на рынке»
-- 
-- Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generatePricesReport1
  :: (Consumes GeneratePricesReport1 MimeJSON, MimeRender MimeJSON GeneratePricesReportRequest)
  => GeneratePricesReportRequest -- ^ "generatePricesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GeneratePricesReport1 MimeJSON GenerateReportResponse MimeJSON
generatePricesReport1 generatePricesReportRequest =
  _mkRequest "POST" ["/reports/prices/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generatePricesReportRequest

data GeneratePricesReport1 
instance HasBodyParam GeneratePricesReport1 GeneratePricesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GeneratePricesReport1 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GeneratePricesReport1 MimeJSON

-- | @application/json@
instance Produces GeneratePricesReport1 MimeJSON


-- *** generateShelfsStatisticsReport1

-- | @POST \/reports\/shelf-statistics\/generate@
-- 
-- Отчет по полкам
-- 
-- Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateShelfsStatisticsReport1
  :: (Consumes GenerateShelfsStatisticsReport1 MimeJSON, MimeRender MimeJSON GenerateShelfsStatisticsRequest)
  => GenerateShelfsStatisticsRequest -- ^ "generateShelfsStatisticsRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateShelfsStatisticsReport1 MimeJSON GenerateReportResponse MimeJSON
generateShelfsStatisticsReport1 generateShelfsStatisticsRequest =
  _mkRequest "POST" ["/reports/shelf-statistics/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateShelfsStatisticsRequest

data GenerateShelfsStatisticsReport1 
instance HasBodyParam GenerateShelfsStatisticsReport1 GenerateShelfsStatisticsRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateShelfsStatisticsReport1 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateShelfsStatisticsReport1 MimeJSON

-- | @application/json@
instance Produces GenerateShelfsStatisticsReport1 MimeJSON


-- *** generateShipmentListDocumentReport0

-- | @POST \/reports\/documents\/shipment-list\/generate@
-- 
-- Получение листа сборки
-- 
-- Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateShipmentListDocumentReport0
  :: (Consumes GenerateShipmentListDocumentReport0 MimeJSON, MimeRender MimeJSON GenerateShipmentListDocumentReportRequest)
  => GenerateShipmentListDocumentReportRequest -- ^ "generateShipmentListDocumentReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateShipmentListDocumentReport0 MimeJSON GenerateReportResponse MimeJSON
generateShipmentListDocumentReport0 generateShipmentListDocumentReportRequest =
  _mkRequest "POST" ["/reports/documents/shipment-list/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateShipmentListDocumentReportRequest

data GenerateShipmentListDocumentReport0 
instance HasBodyParam GenerateShipmentListDocumentReport0 GenerateShipmentListDocumentReportRequest 

-- | @application/json@
instance Consumes GenerateShipmentListDocumentReport0 MimeJSON

-- | @application/json@
instance Produces GenerateShipmentListDocumentReport0 MimeJSON


-- *** generateShowsSalesReport2

-- | @POST \/reports\/shows-sales\/generate@
-- 
-- Отчет «Аналитика продаж»
-- 
-- Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateShowsSalesReport2
  :: (Consumes GenerateShowsSalesReport2 MimeJSON, MimeRender MimeJSON GenerateShowsSalesReportRequest)
  => GenerateShowsSalesReportRequest -- ^ "generateShowsSalesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateShowsSalesReport2 MimeJSON GenerateReportResponse MimeJSON
generateShowsSalesReport2 generateShowsSalesReportRequest =
  _mkRequest "POST" ["/reports/shows-sales/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateShowsSalesReportRequest

data GenerateShowsSalesReport2 
instance HasBodyParam GenerateShowsSalesReport2 GenerateShowsSalesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateShowsSalesReport2 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateShowsSalesReport2 MimeJSON

-- | @application/json@
instance Produces GenerateShowsSalesReport2 MimeJSON


-- *** generateStocksOnWarehousesReport1

-- | @POST \/reports\/stocks-on-warehouses\/generate@
-- 
-- Отчет по остаткам на складах
-- 
-- Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateStocksOnWarehousesReport1
  :: (Consumes GenerateStocksOnWarehousesReport1 MimeJSON, MimeRender MimeJSON GenerateStocksOnWarehousesReportRequest)
  => GenerateStocksOnWarehousesReportRequest -- ^ "generateStocksOnWarehousesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateStocksOnWarehousesReport1 MimeJSON GenerateReportResponse MimeJSON
generateStocksOnWarehousesReport1 generateStocksOnWarehousesReportRequest =
  _mkRequest "POST" ["/reports/stocks-on-warehouses/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateStocksOnWarehousesReportRequest

data GenerateStocksOnWarehousesReport1 
instance HasBodyParam GenerateStocksOnWarehousesReport1 GenerateStocksOnWarehousesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateStocksOnWarehousesReport1 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateStocksOnWarehousesReport1 MimeJSON

-- | @application/json@
instance Produces GenerateStocksOnWarehousesReport1 MimeJSON


-- *** generateUnitedMarketplaceServicesReport2

-- | @POST \/reports\/united-marketplace-services\/generate@
-- 
-- Отчет по стоимости услуг
-- 
-- Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateUnitedMarketplaceServicesReport2
  :: (Consumes GenerateUnitedMarketplaceServicesReport2 MimeJSON, MimeRender MimeJSON GenerateUnitedMarketplaceServicesReportRequest)
  => GenerateUnitedMarketplaceServicesReportRequest -- ^ "generateUnitedMarketplaceServicesReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateUnitedMarketplaceServicesReport2 MimeJSON GenerateReportResponse MimeJSON
generateUnitedMarketplaceServicesReport2 generateUnitedMarketplaceServicesReportRequest =
  _mkRequest "POST" ["/reports/united-marketplace-services/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateUnitedMarketplaceServicesReportRequest

data GenerateUnitedMarketplaceServicesReport2 
instance HasBodyParam GenerateUnitedMarketplaceServicesReport2 GenerateUnitedMarketplaceServicesReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateUnitedMarketplaceServicesReport2 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateUnitedMarketplaceServicesReport2 MimeJSON

-- | @application/json@
instance Produces GenerateUnitedMarketplaceServicesReport2 MimeJSON


-- *** generateUnitedNettingReport2

-- | @POST \/reports\/united-netting\/generate@
-- 
-- Отчет по платежам
-- 
-- Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateUnitedNettingReport2
  :: (Consumes GenerateUnitedNettingReport2 MimeJSON, MimeRender MimeJSON GenerateUnitedNettingReportRequest)
  => GenerateUnitedNettingReportRequest -- ^ "generateUnitedNettingReportRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateUnitedNettingReport2 MimeJSON GenerateReportResponse MimeJSON
generateUnitedNettingReport2 generateUnitedNettingReportRequest =
  _mkRequest "POST" ["/reports/united-netting/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateUnitedNettingReportRequest

data GenerateUnitedNettingReport2 
instance HasBodyParam GenerateUnitedNettingReport2 GenerateUnitedNettingReportRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateUnitedNettingReport2 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateUnitedNettingReport2 MimeJSON

-- | @application/json@
instance Produces GenerateUnitedNettingReport2 MimeJSON


-- *** generateUnitedOrdersReport1

-- | @POST \/reports\/united-orders\/generate@
-- 
-- Отчет по заказам
-- 
-- Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
generateUnitedOrdersReport1
  :: (Consumes GenerateUnitedOrdersReport1 MimeJSON, MimeRender MimeJSON GenerateUnitedOrdersRequest)
  => GenerateUnitedOrdersRequest -- ^ "generateUnitedOrdersRequest"
  -> ПартнерскийAPIМаркетаRequest GenerateUnitedOrdersReport1 MimeJSON GenerateReportResponse MimeJSON
generateUnitedOrdersReport1 generateUnitedOrdersRequest =
  _mkRequest "POST" ["/reports/united-orders/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` generateUnitedOrdersRequest

data GenerateUnitedOrdersReport1 
instance HasBodyParam GenerateUnitedOrdersReport1 GenerateUnitedOrdersRequest 

-- | /Optional Param/ "format" - Формат отчета.
instance HasOptionalParam GenerateUnitedOrdersReport1 Format3 where
  applyOptionalParam req (Format3 xs) =
    req `addQuery` toQuery ("format", Just xs)

-- | @application/json@
instance Consumes GenerateUnitedOrdersReport1 MimeJSON

-- | @application/json@
instance Produces GenerateUnitedOrdersReport1 MimeJSON


-- *** getAllOffers1

-- | @GET \/campaigns\/{campaignId}\/offers\/all@
-- 
-- Все предложения магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getAllOffers1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetAllOffers1 MimeNoContent GetAllOffersResponse MimeJSON
getAllOffers1 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offers/all"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getAllOffers1 "" #-}

data GetAllOffers1  

-- | /Optional Param/ "feedId" - Идентификатор прайс-листа.
instance HasOptionalParam GetAllOffers1 FeedId where
  applyOptionalParam req (FeedId xs) =
    req `addQuery` toQuery ("feedId", Just xs)

-- | /Optional Param/ "chunk" - Номер сегмента с результатами.  Значение по умолчанию: `0`.  {% note info %}  Номера сегментов запрашиваются последовательно, пока не будет получен сегмент с пустым ответом. Пустой ответ означает, что все предложения магазина получены.  {% endnote %}  {% note alert %}  Нумерация начинается с 0. Чтобы запросить первую страницу, необходимо указать `chunk=0` и т. д.  {% endnote %} 
instance HasOptionalParam GetAllOffers1 Chunk where
  applyOptionalParam req (Chunk xs) =
    req `addQuery` toQuery ("chunk", Just xs)
-- | @application/json@
instance Produces GetAllOffers1 MimeJSON


-- *** getBidsInfoForBusiness1

-- | @POST \/businesses\/{businessId}\/bids\/info@
-- 
-- Информация об установленных ставках
-- 
-- Возвращает значения ставок для заданных товаров.  {% note warning \"\" %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBidsInfoForBusiness1
  :: (Consumes GetBidsInfoForBusiness1 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBidsInfoForBusiness1 MimeJSON GetBidsInfoResponse MimeJSON
getBidsInfoForBusiness1 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/bids/info"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetBidsInfoForBusiness1 

-- | /Body Param/ "GetBidsInfoRequest" - description
instance HasBodyParam GetBidsInfoForBusiness1 GetBidsInfoRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetBidsInfoForBusiness1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetBidsInfoForBusiness1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetBidsInfoForBusiness1 MimeJSON

-- | @application/json@
instance Produces GetBidsInfoForBusiness1 MimeJSON


-- *** getBidsRecommendations1

-- | @POST \/businesses\/{businessId}\/bids\/recommendations@
-- 
-- Рекомендованные ставки для заданных товаров
-- 
-- Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBidsRecommendations1
  :: (Consumes GetBidsRecommendations1 MimeJSON, MimeRender MimeJSON GetBidsRecommendationsRequest)
  => GetBidsRecommendationsRequest -- ^ "getBidsRecommendationsRequest" -  description.
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBidsRecommendations1 MimeJSON GetBidsRecommendationsResponse MimeJSON
getBidsRecommendations1 getBidsRecommendationsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/bids/recommendations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getBidsRecommendationsRequest

data GetBidsRecommendations1 

-- | /Body Param/ "GetBidsRecommendationsRequest" - description.
instance HasBodyParam GetBidsRecommendations1 GetBidsRecommendationsRequest 

-- | @application/json@
instance Consumes GetBidsRecommendations1 MimeJSON

-- | @application/json@
instance Produces GetBidsRecommendations1 MimeJSON


-- *** getBusinessQuarantineOffers2

-- | @POST \/businesses\/{businessId}\/price-quarantine@
-- 
-- Список товаров, находящихся в карантине по цене в кабинете
-- 
-- Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBusinessQuarantineOffers2
  :: (Consumes GetBusinessQuarantineOffers2 MimeJSON, MimeRender MimeJSON GetQuarantineOffersRequest)
  => GetQuarantineOffersRequest -- ^ "getQuarantineOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBusinessQuarantineOffers2 MimeJSON GetQuarantineOffersResponse MimeJSON
getBusinessQuarantineOffers2 getQuarantineOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/price-quarantine"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getQuarantineOffersRequest

data GetBusinessQuarantineOffers2 
instance HasBodyParam GetBusinessQuarantineOffers2 GetQuarantineOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetBusinessQuarantineOffers2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetBusinessQuarantineOffers2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetBusinessQuarantineOffers2 MimeJSON

-- | @application/json@
instance Produces GetBusinessQuarantineOffers2 MimeJSON


-- *** getBusinessSettings1

-- | @POST \/businesses\/{businessId}\/settings@
-- 
-- Настройки кабинета
-- 
-- Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getBusinessSettings1
  :: BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetBusinessSettings1 MimeNoContent GetBusinessSettingsResponse MimeJSON
getBusinessSettings1 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/settings"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetBusinessSettings1  
-- | @application/json@
instance Produces GetBusinessSettings1 MimeJSON


-- *** getCampaign2

-- | @GET \/campaigns\/{campaignId}@
-- 
-- Информация о магазине
-- 
-- Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaign2
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaign2 MimeNoContent GetCampaignResponse MimeJSON
getCampaign2 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaign2  
-- | @application/json@
instance Produces GetCampaign2 MimeJSON


-- *** getCampaignLogins2

-- | @GET \/campaigns\/{campaignId}\/logins@
-- 
-- Логины, связанные с магазином
-- 
-- Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignLogins2
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignLogins2 MimeNoContent GetCampaignLoginsResponse MimeJSON
getCampaignLogins2 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/logins"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaignLogins2  
-- | @application/json@
instance Produces GetCampaignLogins2 MimeJSON


-- *** getCampaignOffers2

-- | @POST \/campaigns\/{campaignId}\/offers@
-- 
-- Информация о товарах, которые размещены в заданном магазине
-- 
-- Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignOffers2
  :: (Consumes GetCampaignOffers2 MimeJSON, MimeRender MimeJSON GetCampaignOffersRequest)
  => GetCampaignOffersRequest -- ^ "getCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignOffers2 MimeJSON GetCampaignOffersResponse MimeJSON
getCampaignOffers2 getCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getCampaignOffersRequest

data GetCampaignOffers2 
instance HasBodyParam GetCampaignOffers2 GetCampaignOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetCampaignOffers2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetCampaignOffers2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetCampaignOffers2 MimeJSON

-- | @application/json@
instance Produces GetCampaignOffers2 MimeJSON


-- *** getCampaignQuarantineOffers2

-- | @POST \/campaigns\/{campaignId}\/price-quarantine@
-- 
-- Список товаров, находящихся в карантине по цене в магазине
-- 
-- Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignQuarantineOffers2
  :: (Consumes GetCampaignQuarantineOffers2 MimeJSON, MimeRender MimeJSON GetQuarantineOffersRequest)
  => GetQuarantineOffersRequest -- ^ "getQuarantineOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignQuarantineOffers2 MimeJSON GetQuarantineOffersResponse MimeJSON
getCampaignQuarantineOffers2 getQuarantineOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/price-quarantine"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getQuarantineOffersRequest

data GetCampaignQuarantineOffers2 
instance HasBodyParam GetCampaignQuarantineOffers2 GetQuarantineOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetCampaignQuarantineOffers2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetCampaignQuarantineOffers2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetCampaignQuarantineOffers2 MimeJSON

-- | @application/json@
instance Produces GetCampaignQuarantineOffers2 MimeJSON


-- *** getCampaignRegion2

-- | @GET \/campaigns\/{campaignId}\/region@
-- 
-- Регион магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignRegion2
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignRegion2 MimeNoContent GetCampaignRegionResponse MimeJSON
getCampaignRegion2 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/region"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getCampaignRegion2 "" #-}

data GetCampaignRegion2  
-- | @application/json@
instance Produces GetCampaignRegion2 MimeJSON


-- *** getCampaignSettings1

-- | @GET \/campaigns\/{campaignId}\/settings@
-- 
-- Настройки магазина
-- 
-- Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignSettings1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetCampaignSettings1 MimeNoContent GetCampaignSettingsResponse MimeJSON
getCampaignSettings1 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/settings"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaignSettings1  
-- | @application/json@
instance Produces GetCampaignSettings1 MimeJSON


-- *** getCampaigns2

-- | @GET \/campaigns@
-- 
-- Список магазинов пользователя
-- 
-- Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaigns2
  :: ПартнерскийAPIМаркетаRequest GetCampaigns2 MimeNoContent GetCampaignsResponse MimeJSON
getCampaigns2 =
  _mkRequest "GET" ["/campaigns"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaigns2  

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaigns2 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaigns2 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetCampaigns2 MimeJSON


-- *** getCampaignsByLogin2

-- | @GET \/campaigns\/by_login\/{login}@
-- 
-- Магазины, доступные логину
-- 
-- Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCampaignsByLogin2
  :: Login -- ^ "login" -  Логин пользователя.
  -> ПартнерскийAPIМаркетаRequest GetCampaignsByLogin2 MimeNoContent GetCampaignsResponse MimeJSON
getCampaignsByLogin2 (Login login) =
  _mkRequest "GET" ["/campaigns/by_login/",toPath login]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCampaignsByLogin2  

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaignsByLogin2 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetCampaignsByLogin2 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetCampaignsByLogin2 MimeJSON


-- *** getCategoriesMaxSaleQuantum1

-- | @POST \/categories\/max-sale-quantum@
-- 
-- Лимит на установку кванта продажи и минимального количества товаров в заказе
-- 
-- Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCategoriesMaxSaleQuantum1
  :: (Consumes GetCategoriesMaxSaleQuantum1 MimeJSON, MimeRender MimeJSON GetCategoriesMaxSaleQuantumRequest)
  => GetCategoriesMaxSaleQuantumRequest -- ^ "getCategoriesMaxSaleQuantumRequest"
  -> ПартнерскийAPIМаркетаRequest GetCategoriesMaxSaleQuantum1 MimeJSON GetCategoriesMaxSaleQuantumResponse MimeJSON
getCategoriesMaxSaleQuantum1 getCategoriesMaxSaleQuantumRequest =
  _mkRequest "POST" ["/categories/max-sale-quantum"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getCategoriesMaxSaleQuantumRequest

data GetCategoriesMaxSaleQuantum1 
instance HasBodyParam GetCategoriesMaxSaleQuantum1 GetCategoriesMaxSaleQuantumRequest 

-- | @application/json@
instance Consumes GetCategoriesMaxSaleQuantum1 MimeJSON

-- | @application/json@
instance Produces GetCategoriesMaxSaleQuantum1 MimeJSON


-- *** getCategoriesTree1

-- | @POST \/categories\/tree@
-- 
-- Дерево категорий
-- 
-- Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCategoriesTree1
  :: (Consumes GetCategoriesTree1 MimeJSON)
  => ПартнерскийAPIМаркетаRequest GetCategoriesTree1 MimeJSON GetCategoriesResponse MimeJSON
getCategoriesTree1 =
  _mkRequest "POST" ["/categories/tree"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCategoriesTree1 
instance HasBodyParam GetCategoriesTree1 GetCategoriesRequest 

-- | @application/json@
instance Consumes GetCategoriesTree1 MimeJSON

-- | @application/json@
instance Produces GetCategoriesTree1 MimeJSON


-- *** getCategoryContentParameters2

-- | @POST \/category\/{categoryId}\/parameters@
-- 
-- Списки характеристик товаров по категориям
-- 
-- Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getCategoryContentParameters2
  :: CategoryId3 -- ^ "categoryId" -  Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
  -> ПартнерскийAPIМаркетаRequest GetCategoryContentParameters2 MimeNoContent GetCategoryContentParametersResponse MimeJSON
getCategoryContentParameters2 (CategoryId3 categoryId) =
  _mkRequest "POST" ["/category/",toPath categoryId,"/parameters"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetCategoryContentParameters2  
-- | @application/json@
instance Produces GetCategoryContentParameters2 MimeJSON


-- *** getChatHistory1

-- | @POST \/businesses\/{businessId}\/chats\/history@
-- 
-- Получение истории сообщений в чате
-- 
-- Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getChatHistory1
  :: (Consumes GetChatHistory1 MimeJSON, MimeRender MimeJSON GetChatHistoryRequest)
  => GetChatHistoryRequest -- ^ "getChatHistoryRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest GetChatHistory1 MimeJSON GetChatHistoryResponse MimeJSON
getChatHistory1 getChatHistoryRequest (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/history"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getChatHistoryRequest
    `addQuery` toQuery ("chatId", Just chatId)

data GetChatHistory1 

-- | /Body Param/ "GetChatHistoryRequest" - description
instance HasBodyParam GetChatHistory1 GetChatHistoryRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetChatHistory1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetChatHistory1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetChatHistory1 MimeJSON

-- | @application/json@
instance Produces GetChatHistory1 MimeJSON


-- *** getChats1

-- | @POST \/businesses\/{businessId}\/chats@
-- 
-- Получение доступных чатов
-- 
-- Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getChats1
  :: (Consumes GetChats1 MimeJSON, MimeRender MimeJSON GetChatsRequest)
  => GetChatsRequest -- ^ "getChatsRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetChats1 MimeJSON GetChatsResponse MimeJSON
getChats1 getChatsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getChatsRequest

data GetChats1 

-- | /Body Param/ "GetChatsRequest" - description
instance HasBodyParam GetChats1 GetChatsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetChats1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetChats1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetChats1 MimeJSON

-- | @application/json@
instance Produces GetChats1 MimeJSON


-- *** getDeliveryServices0

-- | @GET \/delivery\/services@
-- 
-- Справочник служб доставки
-- 
-- Возвращает справочник служб доставки: идентификаторы и наименования. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getDeliveryServices0
  :: ПартнерскийAPIМаркетаRequest GetDeliveryServices0 MimeNoContent GetDeliveryServicesResponse MimeJSON
getDeliveryServices0 =
  _mkRequest "GET" ["/delivery/services"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetDeliveryServices0  
-- | @application/json@
instance Produces GetDeliveryServices0 MimeJSON


-- *** getFeed1

-- | @GET \/campaigns\/{campaignId}\/feeds\/{feedId}@
-- 
-- Информация о прайс-листе
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeed1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest GetFeed1 MimeNoContent GetFeedResponse MimeJSON
getFeed1 (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeed1 "" #-}

data GetFeed1  
-- | @application/json@
instance Produces GetFeed1 MimeJSON


-- *** getFeedIndexLogs1

-- | @GET \/campaigns\/{campaignId}\/feeds\/{feedId}\/index-logs@
-- 
-- Отчет по индексации прайс-листа
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeedIndexLogs1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest GetFeedIndexLogs1 MimeNoContent GetFeedIndexLogsResponse MimeJSON
getFeedIndexLogs1 (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId,"/index-logs"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeedIndexLogs1 "" #-}

data GetFeedIndexLogs1  

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetFeedIndexLogs1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "published_time_from" - Начальная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Значение по умолчанию: последние восемь дней со времени отправки запроса. 
instance HasOptionalParam GetFeedIndexLogs1 PublishedTimeFrom where
  applyOptionalParam req (PublishedTimeFrom xs) =
    req `addQuery` toQuery ("published_time_from", Just xs)

-- | /Optional Param/ "published_time_to" - Конечная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-31T00:42:42+03:00`.  Значение по умолчанию: дата и время отправки запроса.  {% note info %}  Если во время переключения между страницами выходных данных на Яндекс Маркете появятся новые результаты индексации прайс-листа, вы не получите часть данных. Чтобы этого не произошло, зафиксируйте выходные данные с помощью входного параметра `published_time_to`. Значение параметра не должно быть датой из будущего.  {% endnote %} 
instance HasOptionalParam GetFeedIndexLogs1 PublishedTimeTo where
  applyOptionalParam req (PublishedTimeTo xs) =
    req `addQuery` toQuery ("published_time_to", Just xs)

-- | /Optional Param/ "status" - Статус индексации и проверки прайс-листа на соответствие техническим требованиям.  Возможные значения: * `ERROR` — произошли ошибки. * `OK` — обработан без ошибок. * `WARNING` — наблюдались некритичные проблемы. 
instance HasOptionalParam GetFeedIndexLogs1 Status2 where
  applyOptionalParam req (Status2 xs) =
    req `addQuery` toQuery ("status", Just xs)
-- | @application/json@
instance Produces GetFeedIndexLogs1 MimeJSON


-- *** getFeedbackAndCommentUpdates2

-- | @GET \/campaigns\/{campaignId}\/feedback\/updates@
-- 
-- Новые и обновленные отзывы о магазине
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeedbackAndCommentUpdates2
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetFeedbackAndCommentUpdates2 MimeNoContent GetFeedbackListResponse MimeJSON
getFeedbackAndCommentUpdates2 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feedback/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeedbackAndCommentUpdates2 "" #-}

data GetFeedbackAndCommentUpdates2  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetFeedbackAndCommentUpdates2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetFeedbackAndCommentUpdates2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "from_date" - Начальная дата обновления отзывов.  Если параметр указан, возвращаются отзывы, которые были написаны или обновлены с этой даты.  Формат даты: `ГГГГ-ММ-ДД`. 
instance HasOptionalParam GetFeedbackAndCommentUpdates2 FromDate where
  applyOptionalParam req (FromDate xs) =
    req `addQuery` toQuery ("from_date", Just xs)
-- | @application/json@
instance Produces GetFeedbackAndCommentUpdates2 MimeJSON


-- *** getFeeds1

-- | @GET \/campaigns\/{campaignId}\/feeds@
-- 
-- Список прайс-листов магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getFeeds1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetFeeds1 MimeNoContent GetFeedsResponse MimeJSON
getFeeds1 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/feeds"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getFeeds1 "" #-}

data GetFeeds1  
-- | @application/json@
instance Produces GetFeeds1 MimeJSON


-- *** getGoodsFeedbackComments1

-- | @POST \/businesses\/{businessId}\/goods-feedback\/comments@
-- 
-- Получение комментариев к отзыву
-- 
-- Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getGoodsFeedbackComments1
  :: (Consumes GetGoodsFeedbackComments1 MimeJSON, MimeRender MimeJSON GetGoodsFeedbackCommentsRequest)
  => GetGoodsFeedbackCommentsRequest -- ^ "getGoodsFeedbackCommentsRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetGoodsFeedbackComments1 MimeJSON GetGoodsFeedbackCommentsResponse MimeJSON
getGoodsFeedbackComments1 getGoodsFeedbackCommentsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/comments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getGoodsFeedbackCommentsRequest

data GetGoodsFeedbackComments1 
instance HasBodyParam GetGoodsFeedbackComments1 GetGoodsFeedbackCommentsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetGoodsFeedbackComments1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetGoodsFeedbackComments1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetGoodsFeedbackComments1 MimeJSON

-- | @application/json@
instance Produces GetGoodsFeedbackComments1 MimeJSON


-- *** getGoodsFeedbacks1

-- | @POST \/businesses\/{businessId}\/goods-feedback@
-- 
-- Получение отзывов о товарах продавца
-- 
-- Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getGoodsFeedbacks1
  :: (Consumes GetGoodsFeedbacks1 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetGoodsFeedbacks1 MimeJSON GetGoodsFeedbackResponse MimeJSON
getGoodsFeedbacks1 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetGoodsFeedbacks1 
instance HasBodyParam GetGoodsFeedbacks1 GetGoodsFeedbackRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetGoodsFeedbacks1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetGoodsFeedbacks1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetGoodsFeedbacks1 MimeJSON

-- | @application/json@
instance Produces GetGoodsFeedbacks1 MimeJSON


-- *** getGoodsStats1

-- | @POST \/campaigns\/{campaignId}\/stats\/skus@
-- 
-- Отчет по товарам
-- 
-- Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getGoodsStats1
  :: (Consumes GetGoodsStats1 MimeJSON, MimeRender MimeJSON GetGoodsStatsRequest)
  => GetGoodsStatsRequest -- ^ "getGoodsStatsRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetGoodsStats1 MimeJSON GetGoodsStatsResponse MimeJSON
getGoodsStats1 getGoodsStatsRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/stats/skus"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getGoodsStatsRequest

data GetGoodsStats1 
instance HasBodyParam GetGoodsStats1 GetGoodsStatsRequest 

-- | @application/json@
instance Consumes GetGoodsStats1 MimeJSON

-- | @application/json@
instance Produces GetGoodsStats1 MimeJSON


-- *** getHiddenOffers1

-- | @GET \/campaigns\/{campaignId}\/hidden-offers@
-- 
-- Информация о скрытых вами товарах
-- 
-- Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getHiddenOffers1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetHiddenOffers1 MimeNoContent GetHiddenOffersResponse MimeJSON
getHiddenOffers1 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/hidden-offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetHiddenOffers1  

-- | /Optional Param/ "offer_id" - Идентификатор скрытого предложения. 
instance HasOptionalParam GetHiddenOffers1 OfferId where
  applyOptionalParam req (OfferId xs) =
    req `addQuery` toQueryColl CommaSeparated ("offer_id", Just xs)

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetHiddenOffers1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetHiddenOffers1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "offset" - Позиция в списке, начиная с которой возвращаются результаты ответа.  Используется вместе с параметром `limit`.  Если задан `offset`, параметры `page_number` и `page_size` игнорируются.  `offset` игнорируется, если задан `page_token`. 
instance HasOptionalParam GetHiddenOffers1 Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetHiddenOffers1 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetHiddenOffers1 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetHiddenOffers1 MimeJSON


-- *** getOfferCardsContentStatus2

-- | @POST \/businesses\/{businessId}\/offer-cards@
-- 
-- Получение информации о заполненности карточек магазина
-- 
-- Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferCardsContentStatus2
  :: (Consumes GetOfferCardsContentStatus2 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferCardsContentStatus2 MimeJSON GetOfferCardsContentStatusResponse MimeJSON
getOfferCardsContentStatus2 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-cards"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOfferCardsContentStatus2 
instance HasBodyParam GetOfferCardsContentStatus2 GetOfferCardsContentStatusRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferCardsContentStatus2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferCardsContentStatus2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOfferCardsContentStatus2 MimeJSON

-- | @application/json@
instance Produces GetOfferCardsContentStatus2 MimeJSON


-- *** getOfferMappingEntries1

-- | @GET \/campaigns\/{campaignId}\/offer-mapping-entries@
-- 
-- Список товаров в каталоге
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferMappingEntries1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferMappingEntries1 MimeNoContent GetOfferMappingEntriesResponse MimeJSON
getOfferMappingEntries1 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offer-mapping-entries"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getOfferMappingEntries1 "" #-}

data GetOfferMappingEntries1  

-- | /Optional Param/ "offer_id" - Идентификатор товара в каталоге.
instance HasOptionalParam GetOfferMappingEntries1 OfferId where
  applyOptionalParam req (OfferId xs) =
    req `addQuery` toQueryColl CommaSeparated ("offer_id", Just xs)

-- | /Optional Param/ "shop_sku" - Ваш SKU товара.  Параметр может быть указан несколько раз, например:  ``` ...shop_sku=123&shop_sku=129&shop_sku=141... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries1 ShopSku2 where
  applyOptionalParam req (ShopSku2 xs) =
    req `addQuery` toQueryColl CommaSeparated ("shop_sku", Just xs)

-- | /Optional Param/ "mapping_kind" - Тип маппинга.
instance HasOptionalParam GetOfferMappingEntries1 MappingKind where
  applyOptionalParam req (MappingKind xs) =
    req `addQuery` toQuery ("mapping_kind", Just xs)

-- | /Optional Param/ "status" - Фильтрация по статусу публикации товара:  * `READY` — товар прошел модерацию. * `IN_WORK` — товар проходит модерацию. * `NEED_CONTENT` — для товара без SKU на Маркете marketSku нужно найти карточку самостоятельно или создать ее. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. * `OTHER` — товар не прошел модерацию по другой причине.  Можно указать несколько статусов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...status=READY,IN_WORK... ...status=READY&status=IN_WORK... ```  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries1 StatusOfferProcessingStatusType where
  applyOptionalParam req (StatusOfferProcessingStatusType xs) =
    req `addQuery` toQueryColl CommaSeparated ("status", Just xs)

-- | /Optional Param/ "availability" - Фильтрация по планам поставок товара:  * `ACTIVE` — поставки будут. * `INACTIVE` — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. * `DELISTED` — архив: товар закончился на складе, и его поставок больше не будет.  Можно указать несколько значений в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...availability=INACTIVE,DELISTED... ...availability=INACTIVE&availability=DELISTED... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries1 Availability where
  applyOptionalParam req (Availability xs) =
    req `addQuery` toQueryColl CommaSeparated ("availability", Just xs)

-- | /Optional Param/ "category_id" - Фильтрация по идентификатору категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  Можно указать несколько идентификаторов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...category_id=14727164,14382343... ...category_id=14727164&category_id=14382343... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries1 CategoryId2 where
  applyOptionalParam req (CategoryId2 xs) =
    req `addQuery` toQueryColl CommaSeparated ("category_id", Just xs)

-- | /Optional Param/ "vendor" - Фильтрация по бренду товара.  Можно указать несколько брендов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...vendor=Aqua%20Minerale,Borjomi... ...vendor=Aqua%20Minerale&vendor=Borjomi... ```  Чтобы товар попал в результаты фильтрации, его бренд должен точно совпадать с одним из указанных в запросе. Например, если указан бренд Schwarzkopf, то в результатах не будет товаров Schwarzkopf Professional.  Если в названии бренда есть символы, которые не входят в таблицу ASCII (в том числе кириллические символы), используйте для них URL-кодирование. Например, пробел — %20, апостроф «'» — %27 и т. д. Подробнее см. в разделе [Кодирование URL русскоязычной Википедии](https://ru.wikipedia.org/wiki/URL#Кодирование_URL).  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. 
instance HasOptionalParam GetOfferMappingEntries1 Vendor where
  applyOptionalParam req (Vendor xs) =
    req `addQuery` toQueryColl CommaSeparated ("vendor", Just xs)

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferMappingEntries1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferMappingEntries1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces GetOfferMappingEntries1 MimeJSON


-- *** getOfferMappings2

-- | @POST \/businesses\/{businessId}\/offer-mappings@
-- 
-- Информация о товарах в каталоге
-- 
-- Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferMappings2
  :: (Consumes GetOfferMappings2 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferMappings2 MimeJSON GetOfferMappingsResponse MimeJSON
getOfferMappings2 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOfferMappings2 
instance HasBodyParam GetOfferMappings2 GetOfferMappingsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferMappings2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferMappings2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOfferMappings2 MimeJSON

-- | @application/json@
instance Produces GetOfferMappings2 MimeJSON


-- *** getOfferRecommendations2

-- | @POST \/businesses\/{businessId}\/offers\/recommendations@
-- 
-- Рекомендации Маркета, касающиеся цен
-- 
-- Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOfferRecommendations2
  :: (Consumes GetOfferRecommendations2 MimeJSON, MimeRender MimeJSON GetOfferRecommendationsRequest)
  => GetOfferRecommendationsRequest -- ^ "getOfferRecommendationsRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOfferRecommendations2 MimeJSON GetOfferRecommendationsResponse MimeJSON
getOfferRecommendations2 getOfferRecommendationsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offers/recommendations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getOfferRecommendationsRequest

data GetOfferRecommendations2 
instance HasBodyParam GetOfferRecommendations2 GetOfferRecommendationsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOfferRecommendations2 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOfferRecommendations2 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOfferRecommendations2 MimeJSON

-- | @application/json@
instance Produces GetOfferRecommendations2 MimeJSON


-- *** getOffers1

-- | @GET \/campaigns\/{campaignId}\/offers@
-- 
-- Предложения магазина
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOffers1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOffers1 MimeNoContent GetOffersResponse MimeJSON
getOffers1 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getOffers1 "" #-}

data GetOffers1  

-- | /Optional Param/ "query" - Поисковый запрос.  Поддерживается язык запросов.  Значение по умолчанию: все предложения магазина, размещенные на Маркете. 
instance HasOptionalParam GetOffers1 Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "feedId" - Идентификатор прайс-листа.
instance HasOptionalParam GetOffers1 FeedId where
  applyOptionalParam req (FeedId xs) =
    req `addQuery` toQuery ("feedId", Just xs)

-- | /Optional Param/ "shopCategoryId" - Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
instance HasOptionalParam GetOffers1 ShopCategoryId where
  applyOptionalParam req (ShopCategoryId xs) =
    req `addQuery` toQuery ("shopCategoryId", Just xs)

-- | /Optional Param/ "currency" - Валюта, в которой указана цена предложения.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна. 
instance HasOptionalParam GetOffers1 Currency where
  applyOptionalParam req (Currency xs) =
    req `addQuery` toQuery ("currency", Just xs)

-- | /Optional Param/ "matched" - Фильтр по признаку соотнесения предложения и карточки модели.  Возможные значения:  * `0 / FALSE / NO` — поиск выполняется среди предложений, не соотнесенных ни с какой карточкой модели.  * `1 / TRUE / YES` — поиск выполняется среди предложений, соотнесенных с карточками моделей). 
instance HasOptionalParam GetOffers1 Matched where
  applyOptionalParam req (Matched xs) =
    req `addQuery` toQuery ("matched", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOffers1 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOffers1 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces GetOffers1 MimeJSON


-- *** getOrder1

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}@
-- 
-- Информация об одном заказе
-- 
-- Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrder1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrder1 MimeNoContent GetOrderResponse MimeJSON
getOrder1 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrder1  
-- | @application/json@
instance Produces GetOrder1 MimeJSON


-- *** getOrderBusinessBuyerInfo0

-- | @POST \/campaigns\/{campaignId}\/orders\/{orderId}\/business-buyer@
-- 
-- Информация о покупателе — юридическом лице
-- 
-- Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY`, `PICKUP` или `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrderBusinessBuyerInfo0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrderBusinessBuyerInfo0 MimeNoContent GetBusinessBuyerInfoResponse MimeJSON
getOrderBusinessBuyerInfo0 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/business-buyer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrderBusinessBuyerInfo0  
-- | @application/json@
instance Produces GetOrderBusinessBuyerInfo0 MimeJSON


-- *** getOrderBusinessDocumentsInfo0

-- | @POST \/campaigns\/{campaignId}\/orders\/{orderId}\/documents@
-- 
-- Информация о документах
-- 
-- Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrderBusinessDocumentsInfo0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrderBusinessDocumentsInfo0 MimeNoContent GetBusinessDocumentsInfoResponse MimeJSON
getOrderBusinessDocumentsInfo0 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/documents"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrderBusinessDocumentsInfo0  
-- | @application/json@
instance Produces GetOrderBusinessDocumentsInfo0 MimeJSON


-- *** getOrderLabelsData0

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/delivery\/labels\/data@
-- 
-- Данные для самостоятельного изготовления ярлыков
-- 
-- Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrderLabelsData0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest GetOrderLabelsData0 MimeNoContent GetOrderLabelsDataResponse MimeJSON
getOrderLabelsData0 (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/delivery/labels/data"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrderLabelsData0  
-- | @application/json@
instance Produces GetOrderLabelsData0 MimeJSON


-- *** getOrders0

-- | @GET \/campaigns\/{campaignId}\/orders@
-- 
-- Информация о нескольких заказах
-- 
-- Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры `page_token` и `limit`.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrders0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOrders0 MimeNoContent GetOrdersResponse MimeJSON
getOrders0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrders0  

-- | /Optional Param/ "orderIds" - Фильтрация заказов по идентификаторам. <br><br> ⚠️ Не используйте это поле одновременно с другими фильтрами. Если вы хотите воспользоваться ими, оставьте поле пустым. 
instance HasOptionalParam GetOrders0 OrderIds where
  applyOptionalParam req (OrderIds xs) =
    req `addQuery` toQueryColl CommaSeparated ("orderIds", Just xs)

-- | /Optional Param/ "status" - Статус заказа:  * `CANCELLED` — заказ отменен.  * `DELIVERED` — заказ получен покупателем.  * `DELIVERY` — заказ передан в службу доставки.  * `PICKUP` — заказ доставлен в пункт самовывоза.  * `PROCESSING` — заказ находится в обработке.  * `UNPAID` — заказ оформлен, но еще не оплачен (если выбрана оплата при оформлении).  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
instance HasOptionalParam GetOrders0 Status where
  applyOptionalParam req (Status xs) =
    req `addQuery` toQueryColl CommaSeparated ("status", Just xs)

-- | /Optional Param/ "substatus" - Этап обработки заказа (если он имеет статус `PROCESSING`) или причина отмены заказа (если он имеет статус `CANCELLED`).  Возможные значения для заказа в статусе `PROCESSING`:  * `STARTED` — заказ подтвержден, его можно начать обрабатывать. * `READY_TO_SHIP` — заказ собран и готов к отправке. * `SHIPPED` — заказ передан службе доставки.  Возможные значения для заказа в статусе `CANCELLED`:  * `DELIVERY_SERVICE_UNDELIVERED` — служба доставки не смогла доставить заказ.  * `PROCESSING_EXPIRED` — значение более не используется.  * `REPLACING_ORDER` — покупатель решил заменить товар другим по собственной инициативе.  * `RESERVATION_EXPIRED` — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.  * `RESERVATION_FAILED` — Маркет не может продолжить дальнейшую обработку заказа.  * `SHOP_FAILED` — магазин не может выполнить заказ.  * `USER_CHANGED_MIND` — покупатель отменил заказ по личным причинам.  * `USER_NOT_PAID` — покупатель не оплатил заказ (для типа оплаты `PREPAID`) в течение 30 минут.  * `USER_REFUSED_DELIVERY` — покупателя не устроили условия доставки.  * `USER_REFUSED_PRODUCT` — покупателю не подошел товар.  * `USER_REFUSED_QUALITY` — покупателя не устроило качество товара.  * `USER_UNREACHABLE` — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:    * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;   * перерыв между первым и третьим звонком не менее 90 минут;   * соединение не короче 5 секунд.    Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400. * `USER_WANTS_TO_CHANGE_DELIVERY_DATE` — покупатель хочет получить заказ в другой день. * `CANCELLED_COURIER_NOT_FOUND` — не удалось найти курьера.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
instance HasOptionalParam GetOrders0 Substatus where
  applyOptionalParam req (Substatus xs) =
    req `addQuery` toQueryColl CommaSeparated ("substatus", Just xs)

-- | /Optional Param/ "fromDate" - Начальная дата для фильтрации заказов по дате оформления.  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной и конечной датой (параметр `toDate`) должно быть не больше 30 дней.  Значение по умолчанию: 30 дней назад от текущей даты. 
instance HasOptionalParam GetOrders0 FromDate where
  applyOptionalParam req (FromDate xs) =
    req `addQuery` toQuery ("fromDate", Just xs)

-- | /Optional Param/ "toDate" - Конечная дата для фильтрации заказов по дате оформления.  Показываются заказы, созданные до 00:00 указанного дня.  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной (параметр `fromDate`) и конечной датой должно быть не больше 30 дней.  Значение по умолчанию: текущая дата. 
instance HasOptionalParam GetOrders0 ToDate where
  applyOptionalParam req (ToDate xs) =
    req `addQuery` toQuery ("toDate", Just xs)

-- | /Optional Param/ "supplierShipmentDateFrom" - Начальная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр `shipmentDate`).  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной и конечной датой (параметр `supplierShipmentDateTo`) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders0 SupplierShipmentDateFrom where
  applyOptionalParam req (SupplierShipmentDateFrom xs) =
    req `addQuery` toQuery ("supplierShipmentDateFrom", Just xs)

-- | /Optional Param/ "supplierShipmentDateTo" - Конечная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр `shipmentDate`).  Формат даты: `ДД-ММ-ГГГГ`.  Между начальной (параметр `supplierShipmentDateFrom`) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders0 SupplierShipmentDateTo where
  applyOptionalParam req (SupplierShipmentDateTo xs) =
    req `addQuery` toQuery ("supplierShipmentDateTo", Just xs)

-- | /Optional Param/ "updatedAtFrom" - Начальная дата для фильтрации заказов по дате и времени обновления (параметр `updatedAt`).  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Между начальной и конечной датой (параметр `updatedAtTo`) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders0 UpdatedAtFrom where
  applyOptionalParam req (UpdatedAtFrom xs) =
    req `addQuery` toQuery ("updatedAtFrom", Just xs)

-- | /Optional Param/ "updatedAtTo" - Конечная дата для фильтрации заказов по дате и времени обновления (параметр `updatedAt`).  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Между начальной (параметр `updatedAtFrom`) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. 
instance HasOptionalParam GetOrders0 UpdatedAtTo where
  applyOptionalParam req (UpdatedAtTo xs) =
    req `addQuery` toQuery ("updatedAtTo", Just xs)

-- | /Optional Param/ "dispatchType" - Способ отгрузки
instance HasOptionalParam GetOrders0 DispatchType where
  applyOptionalParam req (DispatchType xs) =
    req `addQuery` toQuery ("dispatchType", Just xs)

-- | /Optional Param/ "fake" - Фильтрация заказов по типам:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
instance HasOptionalParam GetOrders0 Fake where
  applyOptionalParam req (Fake xs) =
    req `addQuery` toQuery ("fake", Just xs)

-- | /Optional Param/ "hasCis" - Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да.  * `false` — нет.  Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 
instance HasOptionalParam GetOrders0 HasCis where
  applyOptionalParam req (HasCis xs) =
    req `addQuery` toQuery ("hasCis", Just xs)

-- | /Optional Param/ "onlyWaitingForCancellationApprove" - **Только для модели DBS**  Фильтрация заказов по наличию запросов покупателей на отмену.  При значение `true` возвращаются только заказы, которые находятся в статусе `DELIVERY` или `PICKUP` и которые пользователи решили отменить.  Чтобы подтвердить или отклонить отмену, отправьте запрос [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation). 
instance HasOptionalParam GetOrders0 OnlyWaitingForCancellationApprove where
  applyOptionalParam req (OnlyWaitingForCancellationApprove xs) =
    req `addQuery` toQuery ("onlyWaitingForCancellationApprove", Just xs)

-- | /Optional Param/ "onlyEstimatedDelivery" - Фильтрация заказов с долгой доставкой (31-60 дней) по подтвержденной дате доставки:  * `true` — возвращаются только заказы с неподтвержденной датой доставки. * `false` — фильтрация не применяется. 
instance HasOptionalParam GetOrders0 OnlyEstimatedDelivery where
  applyOptionalParam req (OnlyEstimatedDelivery xs) =
    req `addQuery` toQuery ("onlyEstimatedDelivery", Just xs)

-- | /Optional Param/ "buyerType" - Фильтрация заказов по типу покупателя. 
instance HasOptionalParam GetOrders0 BuyerType where
  applyOptionalParam req (BuyerType xs) =
    req `addQuery` toQuery ("buyerType", Just xs)

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOrders0 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam GetOrders0 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOrders0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOrders0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces GetOrders0 MimeJSON


-- *** getOrdersStats1

-- | @POST \/campaigns\/{campaignId}\/stats\/orders@
-- 
-- Детальная информация по заказам
-- 
-- Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \"\" %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getOrdersStats1
  :: (Consumes GetOrdersStats1 MimeJSON)
  => CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetOrdersStats1 MimeJSON GetOrdersStatsResponse MimeJSON
getOrdersStats1 (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/stats/orders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetOrdersStats1 
instance HasBodyParam GetOrdersStats1 GetOrdersStatsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetOrdersStats1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetOrdersStats1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetOrdersStats1 MimeJSON

-- | @application/json@
instance Produces GetOrdersStats1 MimeJSON


-- *** getPrices1

-- | @GET \/campaigns\/{campaignId}\/offer-prices@
-- 
-- Список цен
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** ```(количество товаров партнера на витрине) * 25``` товаров в сутки| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPrices1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPrices1 MimeNoContent GetPricesResponse MimeJSON
getPrices1 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/offer-prices"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED getPrices1 "" #-}

data GetPrices1  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetPrices1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetPrices1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "archived" - Фильтр по нахождению в архиве.
instance HasOptionalParam GetPrices1 Archived where
  applyOptionalParam req (Archived xs) =
    req `addQuery` toQuery ("archived", Just xs)
-- | @application/json@
instance Produces GetPrices1 MimeJSON


-- *** getPricesByOfferIds1

-- | @POST \/campaigns\/{campaignId}\/offer-prices@
-- 
-- Просмотр цен на указанные товары в магазине
-- 
-- Возвращает список цен на указанные товары в магазине.  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров на витрине * 25) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPricesByOfferIds1
  :: (Consumes GetPricesByOfferIds1 MimeJSON)
  => CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPricesByOfferIds1 MimeJSON GetPricesByOfferIdsResponse MimeJSON
getPricesByOfferIds1 (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-prices"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetPricesByOfferIds1 
instance HasBodyParam GetPricesByOfferIds1 GetPricesByOfferIdsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetPricesByOfferIds1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetPricesByOfferIds1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetPricesByOfferIds1 MimeJSON

-- | @application/json@
instance Produces GetPricesByOfferIds1 MimeJSON


-- *** getPromoOffers1

-- | @POST \/businesses\/{businessId}\/promos\/offers@
-- 
-- Получение списка товаров, которые участвуют или могут участвовать в акции
-- 
-- Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPromoOffers1
  :: (Consumes GetPromoOffers1 MimeJSON, MimeRender MimeJSON GetPromoOffersRequest)
  => GetPromoOffersRequest -- ^ "getPromoOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPromoOffers1 MimeJSON GetPromoOffersResponse MimeJSON
getPromoOffers1 getPromoOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos/offers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getPromoOffersRequest

data GetPromoOffers1 
instance HasBodyParam GetPromoOffers1 GetPromoOffersRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetPromoOffers1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetPromoOffers1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetPromoOffers1 MimeJSON

-- | @application/json@
instance Produces GetPromoOffers1 MimeJSON


-- *** getPromos1

-- | @POST \/businesses\/{businessId}\/promos@
-- 
-- Получение списка акций
-- 
-- Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getPromos1
  :: (Consumes GetPromos1 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetPromos1 MimeJSON GetPromosResponse MimeJSON
getPromos1 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetPromos1 
instance HasBodyParam GetPromos1 GetPromosRequest 

-- | @application/json@
instance Consumes GetPromos1 MimeJSON

-- | @application/json@
instance Produces GetPromos1 MimeJSON


-- *** getQualityRatingDetails0

-- | @POST \/campaigns\/{campaignId}\/ratings\/quality\/details@
-- 
-- Заказы, которые повлияли на индекс качества
-- 
-- Возвращает список заказов, которые повлияли на индекс качества магазина. Чтобы узнать значение индекса качества, выполните запрос [POST businesses/{businessId}/ratings/quality](../../reference/ratings/getQualityRatings.md).  |**⚙️ Лимит:** 100000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getQualityRatingDetails0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetQualityRatingDetails0 MimeNoContent GetQualityRatingDetailsResponse MimeJSON
getQualityRatingDetails0 (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/ratings/quality/details"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetQualityRatingDetails0  
-- | @application/json@
instance Produces GetQualityRatingDetails0 MimeJSON


-- *** getQualityRatings1

-- | @POST \/businesses\/{businessId}\/ratings\/quality@
-- 
-- Индекс качества магазинов
-- 
-- Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getQualityRatings1
  :: (Consumes GetQualityRatings1 MimeJSON, MimeRender MimeJSON GetQualityRatingRequest)
  => GetQualityRatingRequest -- ^ "getQualityRatingRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetQualityRatings1 MimeJSON GetQualityRatingResponse MimeJSON
getQualityRatings1 getQualityRatingRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/ratings/quality"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getQualityRatingRequest

data GetQualityRatings1 
instance HasBodyParam GetQualityRatings1 GetQualityRatingRequest 

-- | @application/json@
instance Consumes GetQualityRatings1 MimeJSON

-- | @application/json@
instance Produces GetQualityRatings1 MimeJSON


-- *** getReportInfo2

-- | @GET \/reports\/info\/{reportId}@
-- 
-- Получение заданного отчета
-- 
-- Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReportInfo2
  :: ReportId -- ^ "reportId" -  Идентификатор отчета, который вы получили после запуска генерации. 
  -> ПартнерскийAPIМаркетаRequest GetReportInfo2 MimeNoContent GetReportInfoResponse MimeJSON
getReportInfo2 (ReportId reportId) =
  _mkRequest "GET" ["/reports/info/",toPath reportId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReportInfo2  
-- | @application/json@
instance Produces GetReportInfo2 MimeJSON


-- *** getReturn0

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/returns\/{returnId}@
-- 
-- Информация о невыкупе или возврате
-- 
-- Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReturn0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ReturnId -- ^ "returnId" -  Идентификатор возврата.
  -> ПартнерскийAPIМаркетаRequest GetReturn0 MimeNoContent GetReturnResponse MimeJSON
getReturn0 (CampaignId campaignId) (OrderId orderId) (ReturnId returnId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/returns/",toPath returnId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReturn0  
-- | @application/json@
instance Produces GetReturn0 MimeJSON


-- *** getReturnApplication0

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/returns\/{returnId}\/application@
-- 
-- Получение заявления на возврат
-- 
-- Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReturnApplication0
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ReturnId -- ^ "returnId" -  Идентификатор возврата.
  -> ПартнерскийAPIМаркетаRequest GetReturnApplication0 MimeNoContent FilePath accept
getReturnApplication0  _ (CampaignId campaignId) (OrderId orderId) (ReturnId returnId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/returns/",toPath returnId,"/application"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReturnApplication0  
-- | @application/octet-stream@
instance Produces GetReturnApplication0 MimeOctetStream
-- | @application/json@
instance Produces GetReturnApplication0 MimeJSON


-- *** getReturnPhoto0

-- | @GET \/campaigns\/{campaignId}\/orders\/{orderId}\/returns\/{returnId}\/decision\/{itemId}\/image\/{imageHash}@
-- 
-- Получение фотографии возврата
-- 
-- Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReturnPhoto0
  :: Accept accept -- ^ request accept ('MimeType')
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ReturnId -- ^ "returnId" -  Идентификатор возврата.
  -> ItemId -- ^ "itemId" -  Идентификатор товара в возврате.
  -> ImageHash -- ^ "imageHash" -  Хеш ссылки изображения для загрузки.
  -> ПартнерскийAPIМаркетаRequest GetReturnPhoto0 MimeNoContent FilePath accept
getReturnPhoto0  _ (CampaignId campaignId) (OrderId orderId) (ReturnId returnId) (ItemId itemId) (ImageHash imageHash) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/returns/",toPath returnId,"/decision/",toPath itemId,"/image/",toPath imageHash]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReturnPhoto0  
-- | @application/octet-stream@
instance Produces GetReturnPhoto0 MimeOctetStream
-- | @application/json@
instance Produces GetReturnPhoto0 MimeJSON


-- *** getReturns0

-- | @GET \/campaigns\/{campaignId}\/returns@
-- 
-- Список невыкупов и возвратов
-- 
-- Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getReturns0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetReturns0 MimeNoContent GetReturnsResponse MimeJSON
getReturns0 (CampaignId campaignId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/returns"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetReturns0  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetReturns0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetReturns0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "orderIds" - Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. 
instance HasOptionalParam GetReturns0 OrderIds where
  applyOptionalParam req (OrderIds xs) =
    req `addQuery` toQueryColl CommaSeparated ("orderIds", Just xs)

-- | /Optional Param/ "statuses" - Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. 
instance HasOptionalParam GetReturns0 Statuses where
  applyOptionalParam req (Statuses xs) =
    req `addQuery` toQueryColl CommaSeparated ("statuses", Just xs)

-- | /Optional Param/ "type" - Тип заказа для фильтрации:  * `RETURN` — возврат.  * `UNREDEEMED` — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. 
instance HasOptionalParam GetReturns0 ParamType where
  applyOptionalParam req (ParamType xs) =
    req `addQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "fromDate" - Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
instance HasOptionalParam GetReturns0 FromDate where
  applyOptionalParam req (FromDate xs) =
    req `addQuery` toQuery ("fromDate", Just xs)

-- | /Optional Param/ "toDate" - Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
instance HasOptionalParam GetReturns0 ToDate where
  applyOptionalParam req (ToDate xs) =
    req `addQuery` toQuery ("toDate", Just xs)

-- | /Optional Param/ "from_date" - {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `fromDate`.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления. 
instance HasOptionalParam GetReturns0 FromDate2 where
  applyOptionalParam req (FromDate2 xs) =
    req `addQuery` toQuery ("from_date", Just xs)

-- | /Optional Param/ "to_date" - {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `toDate`.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления. 
instance HasOptionalParam GetReturns0 ToDate2 where
  applyOptionalParam req (ToDate2 xs) =
    req `addQuery` toQuery ("to_date", Just xs)
-- | @application/json@
instance Produces GetReturns0 MimeJSON


-- *** getShipment0

-- | @GET \/campaigns\/{campaignId}\/first-mile\/shipments\/{shipmentId}@
-- 
-- Получение информации об одной отгрузке
-- 
-- Возвращает информацию об отгрузке по ее идентификатору. |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getShipment0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор отгрузки.
  -> ПартнерскийAPIМаркетаRequest GetShipment0 MimeNoContent GetShipmentResponse MimeJSON
getShipment0 (CampaignId campaignId) (ShipmentId shipmentId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/first-mile/shipments/",toPath shipmentId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetShipment0  

-- | /Optional Param/ "cancelledOrders" - Возвращать ли отмененные заказы.  Значение по умолчанию — `true`. Если возвращать отмененные заказы не нужно, передайте значение `false`. 
instance HasOptionalParam GetShipment0 CancelledOrders where
  applyOptionalParam req (CancelledOrders xs) =
    req `addQuery` toQuery ("cancelledOrders", Just xs)
-- | @application/json@
instance Produces GetShipment0 MimeJSON


-- *** getShipmentOrdersInfo0

-- | @GET \/campaigns\/{campaignId}\/first-mile\/shipments\/{shipmentId}\/orders\/info@
-- 
-- Получение информации о возможности печати ярлыков (FBS)
-- 
-- Возвращает информацию о возможности печати ярлыков-наклеек для заказов в отгрузке. |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getShipmentOrdersInfo0
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор отгрузки.
  -> ПартнерскийAPIМаркетаRequest GetShipmentOrdersInfo0 MimeNoContent GetShipmentOrdersInfoResponse MimeJSON
getShipmentOrdersInfo0 (CampaignId campaignId) (ShipmentId shipmentId) =
  _mkRequest "GET" ["/campaigns/",toPath campaignId,"/first-mile/shipments/",toPath shipmentId,"/orders/info"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetShipmentOrdersInfo0  
-- | @application/json@
instance Produces GetShipmentOrdersInfo0 MimeJSON


-- *** getStocks1

-- | @POST \/campaigns\/{campaignId}\/offers\/stocks@
-- 
-- Информация об остатках и оборачиваемости
-- 
-- Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \"По умолчанию данные по оборачивамости не возращаются\" %}  Чтобы они были в ответе, передавайте `true` в поле `withTurnover`.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: <> (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getStocks1
  :: (Consumes GetStocks1 MimeJSON)
  => CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetStocks1 MimeJSON GetWarehouseStocksResponse MimeJSON
getStocks1 (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers/stocks"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetStocks1 
instance HasBodyParam GetStocks1 GetWarehouseStocksRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam GetStocks1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam GetStocks1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes GetStocks1 MimeJSON

-- | @application/json@
instance Produces GetStocks1 MimeJSON


-- *** getSuggestedOfferMappingEntries1

-- | @POST \/campaigns\/{campaignId}\/offer-mapping-entries\/suggestions@
-- 
-- Рекомендованные карточки для товаров
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku=», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getSuggestedOfferMappingEntries1
  :: (Consumes GetSuggestedOfferMappingEntries1 MimeJSON, MimeRender MimeJSON GetSuggestedOfferMappingEntriesRequest)
  => GetSuggestedOfferMappingEntriesRequest -- ^ "getSuggestedOfferMappingEntriesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetSuggestedOfferMappingEntries1 MimeJSON GetSuggestedOfferMappingEntriesResponse MimeJSON
getSuggestedOfferMappingEntries1 getSuggestedOfferMappingEntriesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-mapping-entries/suggestions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` getSuggestedOfferMappingEntriesRequest

{-# DEPRECATED getSuggestedOfferMappingEntries1 "" #-}

data GetSuggestedOfferMappingEntries1 
instance HasBodyParam GetSuggestedOfferMappingEntries1 GetSuggestedOfferMappingEntriesRequest 

-- | @application/json@
instance Consumes GetSuggestedOfferMappingEntries1 MimeJSON

-- | @application/json@
instance Produces GetSuggestedOfferMappingEntries1 MimeJSON


-- *** getSuggestedOfferMappings2

-- | @POST \/businesses\/{businessId}\/offer-mappings\/suggestions@
-- 
-- Просмотр карточек на Маркете, которые подходят вашим товарам
-- 
-- Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getSuggestedOfferMappings2
  :: (Consumes GetSuggestedOfferMappings2 MimeJSON)
  => BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetSuggestedOfferMappings2 MimeJSON GetSuggestedOfferMappingsResponse MimeJSON
getSuggestedOfferMappings2 (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/suggestions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetSuggestedOfferMappings2 
instance HasBodyParam GetSuggestedOfferMappings2 GetSuggestedOfferMappingsRequest 

-- | @application/json@
instance Consumes GetSuggestedOfferMappings2 MimeJSON

-- | @application/json@
instance Produces GetSuggestedOfferMappings2 MimeJSON


-- *** getSuggestedPrices1

-- | @POST \/campaigns\/{campaignId}\/offer-prices\/suggestions@
-- 
-- Цены для продвижения товаров
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \"\" %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getSuggestedPrices1
  :: (Consumes GetSuggestedPrices1 MimeJSON, MimeRender MimeJSON SuggestPricesRequest)
  => SuggestPricesRequest -- ^ "suggestPricesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetSuggestedPrices1 MimeJSON SuggestPricesResponse MimeJSON
getSuggestedPrices1 suggestPricesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-prices/suggestions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` suggestPricesRequest

{-# DEPRECATED getSuggestedPrices1 "" #-}

data GetSuggestedPrices1 
instance HasBodyParam GetSuggestedPrices1 SuggestPricesRequest 

-- | @application/json@
instance Consumes GetSuggestedPrices1 MimeJSON

-- | @application/json@
instance Produces GetSuggestedPrices1 MimeJSON


-- *** getWarehouses0

-- | @GET \/businesses\/{businessId}\/warehouses@
-- 
-- Список складов и групп складов
-- 
-- Возвращает список складов и, если склады объединены, список групп складов. [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)  Среди прочего запрос позволяет определить идентификатор, который нужно использовать при передаче остатков для группы складов.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
getWarehouses0
  :: BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest GetWarehouses0 MimeNoContent GetWarehousesResponse MimeJSON
getWarehouses0 (BusinessId businessId) =
  _mkRequest "GET" ["/businesses/",toPath businessId,"/warehouses"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data GetWarehouses0  
-- | @application/json@
instance Produces GetWarehouses0 MimeJSON


-- *** provideOrderItemIdentifiers0

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/identifiers@
-- 
-- Передача кодов маркировки единиц товара
-- 
-- {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Передает Маркету коды маркировки для единиц товара в указанном заказе.  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  {% note warning %}  Прежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).  {% endnote %}  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
provideOrderItemIdentifiers0
  :: (Consumes ProvideOrderItemIdentifiers0 MimeJSON, MimeRender MimeJSON ProvideOrderItemIdentifiersRequest)
  => ProvideOrderItemIdentifiersRequest -- ^ "provideOrderItemIdentifiersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest ProvideOrderItemIdentifiers0 MimeJSON ProvideOrderItemIdentifiersResponse MimeJSON
provideOrderItemIdentifiers0 provideOrderItemIdentifiersRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/identifiers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` provideOrderItemIdentifiersRequest

data ProvideOrderItemIdentifiers0 
instance HasBodyParam ProvideOrderItemIdentifiers0 ProvideOrderItemIdentifiersRequest 

-- | @application/json@
instance Consumes ProvideOrderItemIdentifiers0 MimeJSON

-- | @application/json@
instance Produces ProvideOrderItemIdentifiers0 MimeJSON


-- *** putBidsForBusiness1

-- | @PUT \/businesses\/{businessId}\/bids@
-- 
-- Включение буста продаж и установка ставок
-- 
-- Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \"Как в кабинете выглядит кампания, созданная через API\" %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
putBidsForBusiness1
  :: (Consumes PutBidsForBusiness1 MimeJSON, MimeRender MimeJSON PutSkuBidsRequest)
  => PutSkuBidsRequest -- ^ "putSkuBidsRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest PutBidsForBusiness1 MimeJSON EmptyApiResponse MimeJSON
putBidsForBusiness1 putSkuBidsRequest (BusinessId businessId) =
  _mkRequest "PUT" ["/businesses/",toPath businessId,"/bids"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` putSkuBidsRequest

data PutBidsForBusiness1 

-- | /Body Param/ "PutSkuBidsRequest" - description
instance HasBodyParam PutBidsForBusiness1 PutSkuBidsRequest 

-- | @application/json@
instance Consumes PutBidsForBusiness1 MimeJSON

-- | @application/json@
instance Produces PutBidsForBusiness1 MimeJSON


-- *** putBidsForCampaign1

-- | @PUT \/campaigns\/{campaignId}\/bids@
-- 
-- Включение буста продаж и установка ставок для магазина
-- 
-- Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
putBidsForCampaign1
  :: (Consumes PutBidsForCampaign1 MimeJSON, MimeRender MimeJSON PutSkuBidsRequest)
  => PutSkuBidsRequest -- ^ "putSkuBidsRequest" -  description
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest PutBidsForCampaign1 MimeJSON EmptyApiResponse MimeJSON
putBidsForCampaign1 putSkuBidsRequest (CampaignId campaignId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/bids"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` putSkuBidsRequest

data PutBidsForCampaign1 

-- | /Body Param/ "PutSkuBidsRequest" - description
instance HasBodyParam PutBidsForCampaign1 PutSkuBidsRequest 

-- | @application/json@
instance Consumes PutBidsForCampaign1 MimeJSON

-- | @application/json@
instance Produces PutBidsForCampaign1 MimeJSON


-- *** refreshFeed1

-- | @POST \/campaigns\/{campaignId}\/feeds\/{feedId}\/refresh@
-- 
-- Сообщить, что прайс-лист обновился
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
refreshFeed1
  :: CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest RefreshFeed1 MimeNoContent EmptyApiResponse MimeJSON
refreshFeed1 (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId,"/refresh"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

{-# DEPRECATED refreshFeed1 "" #-}

data RefreshFeed1  
-- | @application/json@
instance Produces RefreshFeed1 MimeJSON


-- *** searchRegionChildren1

-- | @GET \/regions\/{regionId}\/children@
-- 
-- Информация о дочерних регионах
-- 
-- Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
searchRegionChildren1
  :: RegionId -- ^ "regionId" -  Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  -> ПартнерскийAPIМаркетаRequest SearchRegionChildren1 MimeNoContent GetRegionWithChildrenResponse MimeJSON
searchRegionChildren1 (RegionId regionId) =
  _mkRequest "GET" ["/regions/",toPath regionId,"/children"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data SearchRegionChildren1  

-- | /Optional Param/ "page" - Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam SearchRegionChildren1 Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "pageSize" - Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
instance HasOptionalParam SearchRegionChildren1 PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)
-- | @application/json@
instance Produces SearchRegionChildren1 MimeJSON


-- *** searchRegionsById1

-- | @GET \/regions\/{regionId}@
-- 
-- Информация о регионе
-- 
-- Возвращает информацию о регионе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
searchRegionsById1
  :: RegionId -- ^ "regionId" -  Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
  -> ПартнерскийAPIМаркетаRequest SearchRegionsById1 MimeNoContent GetRegionsResponse MimeJSON
searchRegionsById1 (RegionId regionId) =
  _mkRequest "GET" ["/regions/",toPath regionId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)

data SearchRegionsById1  
-- | @application/json@
instance Produces SearchRegionsById1 MimeJSON


-- *** searchRegionsByName1

-- | @GET \/regions@
-- 
-- Поиск регионов по их имени
-- 
-- Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
searchRegionsByName1
  :: Name -- ^ "name" -  Название региона.  Важно учитывать регистр: первая буква должна быть заглавной, остальные — строчными. Например, `Москва`. 
  -> ПартнерскийAPIМаркетаRequest SearchRegionsByName1 MimeNoContent GetRegionsResponse MimeJSON
searchRegionsByName1 (Name name) =
  _mkRequest "GET" ["/regions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `addQuery` toQuery ("name", Just name)

data SearchRegionsByName1  

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam SearchRegionsByName1 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam SearchRegionsByName1 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces SearchRegionsByName1 MimeJSON


-- *** searchShipments0

-- | @PUT \/campaigns\/{campaignId}\/first-mile\/shipments@
-- 
-- Получение информации о нескольких отгрузках
-- 
-- Возвращает информацию об отгрузках по заданным параметрам:  * дате; * статусу; * идентификаторам заказов.  Результаты возвращаются постранично. |**⚙️ Лимит:** 100 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
searchShipments0
  :: (Consumes SearchShipments0 MimeJSON, MimeRender MimeJSON SearchShipmentsRequest)
  => SearchShipmentsRequest -- ^ "searchShipmentsRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest SearchShipments0 MimeJSON SearchShipmentsResponse MimeJSON
searchShipments0 searchShipmentsRequest (CampaignId campaignId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/first-mile/shipments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` searchShipmentsRequest

data SearchShipments0 
instance HasBodyParam SearchShipments0 SearchShipmentsRequest 

-- | /Optional Param/ "page_token" - Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
instance HasOptionalParam SearchShipments0 PageToken where
  applyOptionalParam req (PageToken xs) =
    req `addQuery` toQuery ("page_token", Just xs)

-- | /Optional Param/ "limit" - Количество значений на одной странице. 
instance HasOptionalParam SearchShipments0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | @application/json@
instance Consumes SearchShipments0 MimeJSON

-- | @application/json@
instance Produces SearchShipments0 MimeJSON


-- *** sendFileToChat1

-- | @POST \/businesses\/{businessId}\/chats\/file\/send@
-- 
-- Отправка файла в чат
-- 
-- Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
sendFileToChat1
  :: (Consumes SendFileToChat1 MimeMultipartFormData)
  => File -- ^ "file" -  Содержимое файла. Максимальный размер файла — 5 Мбайт.
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest SendFileToChat1 MimeMultipartFormData EmptyApiResponse MimeJSON
sendFileToChat1 (File file) (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/file/send"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `_addMultiFormPart` NH.partFileSource "file" file
    `addQuery` toQuery ("chatId", Just chatId)

data SendFileToChat1  

-- | @multipart/form-data@
instance Consumes SendFileToChat1 MimeMultipartFormData

-- | @application/json@
instance Produces SendFileToChat1 MimeJSON


-- *** sendMessageToChat1

-- | @POST \/businesses\/{businessId}\/chats\/message@
-- 
-- Отправка сообщения в чат
-- 
-- Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
sendMessageToChat1
  :: (Consumes SendMessageToChat1 MimeJSON, MimeRender MimeJSON SendMessageToChatRequest)
  => SendMessageToChatRequest -- ^ "sendMessageToChatRequest" -  description
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ChatId -- ^ "chatId" -  Идентификатор чата.
  -> ПартнерскийAPIМаркетаRequest SendMessageToChat1 MimeJSON EmptyApiResponse MimeJSON
sendMessageToChat1 sendMessageToChatRequest (BusinessId businessId) (ChatId chatId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/chats/message"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` sendMessageToChatRequest
    `addQuery` toQuery ("chatId", Just chatId)

data SendMessageToChat1 

-- | /Body Param/ "SendMessageToChatRequest" - description
instance HasBodyParam SendMessageToChat1 SendMessageToChatRequest 

-- | @application/json@
instance Consumes SendMessageToChat1 MimeJSON

-- | @application/json@
instance Produces SendMessageToChat1 MimeJSON


-- *** setFeedParams1

-- | @POST \/campaigns\/{campaignId}\/feeds\/{feedId}\/params@
-- 
-- Изменение параметров прайс-листа
-- 
-- {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
setFeedParams1
  :: (Consumes SetFeedParams1 MimeJSON, MimeRender MimeJSON SetFeedParamsRequest)
  => SetFeedParamsRequest -- ^ "setFeedParamsRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> FeedId -- ^ "feedId" -  Идентификатор прайс-листа.
  -> ПартнерскийAPIМаркетаRequest SetFeedParams1 MimeJSON EmptyApiResponse MimeJSON
setFeedParams1 setFeedParamsRequest (CampaignId campaignId) (FeedId feedId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/feeds/",toPath feedId,"/params"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` setFeedParamsRequest

{-# DEPRECATED setFeedParams1 "" #-}

data SetFeedParams1 
instance HasBodyParam SetFeedParams1 SetFeedParamsRequest 

-- | @application/json@
instance Consumes SetFeedParams1 MimeJSON

-- | @application/json@
instance Produces SetFeedParams1 MimeJSON


-- *** setOrderBoxLayout0

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/boxes@
-- 
-- Подготовка заказа
-- 
-- {% note tip \"Подходит и для DBS\" %}  Запрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.  {% endnote %}  Позволяет выполнить три операции:  * передать Маркету информацию о распределении товаров по коробкам; * передать Маркету коды маркировки для товаров; * удалить товар из заказа, если его не оказалось на складе.  Если нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.  ## Как передать информацию о распределении товаров  В этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:  * **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.  * **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.  ⚠️ Одна коробка не может содержать и товары целиком, и части товаров.  ## Как передавать коды маркировки  Если в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  Если товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.  ## Как удалить товар из заказа  Чтобы удалить товар из заказа:  1. Добавьте в запрос `allowRemove: true`. 2. Передайте распределение по коробкам без товара, который нужно удалить.  {% note warning \"Удаление нельзя отменить\" %}  Эта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.  {% endnote %}  Чтобы удалить позицию целиком, не передавайте соответствующий `OrderBoxLayoutItemDTO`. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле `fullCount`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  ## Примеры  {% cut \"Товар умещается в коробку\" %}  Вот как будет выглядеть запрос, если в одной коробке едут:    * три единицы одного товара, требующего маркировки;   * одна единица другого товара, не требущего маркировки.    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"fullCount\": 3,                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           },                           {                               \"cis\": \"010304109478gftJ14545762!\\u001dhGt264\"                           },                           {                               \"cis\": \"010304109478fRs28323ks23!\\u001dhet201\"                           }                       ]                   },                   {                       \"id\": 654321,                       \"fullCount\": 1                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Товар едет в разных коробках\" %}  Вот как будет выглядеть запрос, если товар едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Одинаковые товары, где каждый едет в нескольких коробках\" %}  Вот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
setOrderBoxLayout0
  :: (Consumes SetOrderBoxLayout0 MimeJSON, MimeRender MimeJSON SetOrderBoxLayoutRequest)
  => SetOrderBoxLayoutRequest -- ^ "setOrderBoxLayoutRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest SetOrderBoxLayout0 MimeJSON SetOrderBoxLayoutResponse MimeJSON
setOrderBoxLayout0 setOrderBoxLayoutRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/boxes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` setOrderBoxLayoutRequest

data SetOrderBoxLayout0 
instance HasBodyParam SetOrderBoxLayout0 SetOrderBoxLayoutRequest 

-- | @application/json@
instance Consumes SetOrderBoxLayout0 MimeJSON

-- | @application/json@
instance Produces SetOrderBoxLayout0 MimeJSON


-- *** setOrderShipmentBoxes0

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/delivery\/shipments\/{shipmentId}\/boxes@
-- 
-- Передача количества грузовых мест в заказе
-- 
-- {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Отгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.  Количество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).  Метод устроен немного нестандартно: количество задается длиной массива пустых объектов.  Раньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.  {% cut \"Как было раньше\" %}  Структура тела PUT-запроса:  ``` {   \"boxes\":   [     {       \"fulfilmentId\": \"{string}\",       \"weight\": {int64},       \"width\": {int64},       \"height\": {int64},       \"depth\": {int64},       \"items\":       [         {           \"id\": {int64},           \"count\": {int32}         },         ...       ]     },     ...   ] } ``` | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `boxes`       |           | Список грузовых мест.       |  **Параметры, вложенные в `boxes`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `fulfilmentId`       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: `номер заказа на Маркете-номер грузового места`. Например, `7206821‑1, 7206821‑2` и т. д. | | `weight`       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. | | `width`       | Int64   | Ширина грузового места в сантиметрах.       | | `height`       | Int64   | Высота грузового места в сантиметрах.       | | `depth`       | Int64   | Глубина грузового места в сантиметрах.        | | `items`       | Int64   | Список товаров в грузовом месте.       |  **Параметры, вложенные в `items`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `id`       | Int64     | Идентификатор товара в рамках заказа.   | | `count`    | Int32     | Количество единиц товара в грузовом месте.       |  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
setOrderShipmentBoxes0
  :: (Consumes SetOrderShipmentBoxes0 MimeJSON, MimeRender MimeJSON SetOrderShipmentBoxesRequest)
  => SetOrderShipmentBoxesRequest -- ^ "setOrderShipmentBoxesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ShipmentId -- ^ "shipmentId" -  Параметр больше не используется. Вставьте любое число — просто чтобы получился корректный URL. 
  -> ПартнерскийAPIМаркетаRequest SetOrderShipmentBoxes0 MimeJSON SetOrderShipmentBoxesResponse MimeJSON
setOrderShipmentBoxes0 setOrderShipmentBoxesRequest (CampaignId campaignId) (OrderId orderId) (ShipmentId shipmentId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/delivery/shipments/",toPath shipmentId,"/boxes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` setOrderShipmentBoxesRequest

data SetOrderShipmentBoxes0 
instance HasBodyParam SetOrderShipmentBoxes0 SetOrderShipmentBoxesRequest 

-- | @application/json@
instance Consumes SetOrderShipmentBoxes0 MimeJSON

-- | @application/json@
instance Produces SetOrderShipmentBoxes0 MimeJSON


-- *** setShipmentPalletsCount0

-- | @PUT \/campaigns\/{campaignId}\/first-mile\/shipments\/{shipmentId}\/pallets@
-- 
-- Передача количества упаковок в отгрузке
-- 
-- Передает Маркету количество коробов или палет в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Получить PDF-файл с ярлыками для упаковок можно с помощью запроса [GET campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels](../../reference/shipments/downloadShipmentPalletLabels.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
setShipmentPalletsCount0
  :: (Consumes SetShipmentPalletsCount0 MimeJSON, MimeRender MimeJSON SetShipmentPalletsCountRequest)
  => SetShipmentPalletsCountRequest -- ^ "setShipmentPalletsCountRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор отгрузки.
  -> ПартнерскийAPIМаркетаRequest SetShipmentPalletsCount0 MimeJSON EmptyApiResponse MimeJSON
setShipmentPalletsCount0 setShipmentPalletsCountRequest (CampaignId campaignId) (ShipmentId shipmentId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/first-mile/shipments/",toPath shipmentId,"/pallets"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` setShipmentPalletsCountRequest

data SetShipmentPalletsCount0 
instance HasBodyParam SetShipmentPalletsCount0 SetShipmentPalletsCountRequest 

-- | @application/json@
instance Consumes SetShipmentPalletsCount0 MimeJSON

-- | @application/json@
instance Produces SetShipmentPalletsCount0 MimeJSON


-- *** skipGoodsFeedbacksReaction1

-- | @POST \/businesses\/{businessId}\/goods-feedback\/skip-reaction@
-- 
-- Отказ от ответа на отзывы
-- 
-- Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
skipGoodsFeedbacksReaction1
  :: (Consumes SkipGoodsFeedbacksReaction1 MimeJSON, MimeRender MimeJSON SkipGoodsFeedbackReactionRequest)
  => SkipGoodsFeedbackReactionRequest -- ^ "skipGoodsFeedbackReactionRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest SkipGoodsFeedbacksReaction1 MimeJSON EmptyApiResponse MimeJSON
skipGoodsFeedbacksReaction1 skipGoodsFeedbackReactionRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/skip-reaction"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` skipGoodsFeedbackReactionRequest

data SkipGoodsFeedbacksReaction1 
instance HasBodyParam SkipGoodsFeedbacksReaction1 SkipGoodsFeedbackReactionRequest 

-- | @application/json@
instance Consumes SkipGoodsFeedbacksReaction1 MimeJSON

-- | @application/json@
instance Produces SkipGoodsFeedbacksReaction1 MimeJSON


-- *** transferOrdersFromShipment0

-- | @POST \/campaigns\/{campaignId}\/first-mile\/shipments\/{shipmentId}\/orders\/transfer@
-- 
-- Перенос заказов в следующую отгрузку
-- 
-- Переносит указанные заказы из указанной отгрузки в следующую отгрузку. [Что такое отгрузка?](https://yandex.ru/support/marketplace/orders/fbs/process.html#ship)  Используйте этот запрос, если не успеваете собрать и упаковать заказы вовремя.  {% note warning \"Такие переносы снижают индекс качества магазина\" %}  Этот запрос предназначен для исключительных случаев. Если вы будете переносить заказы слишком часто, магазин столкнется с ограничениями. [Что за ограничения?](https://yandex.ru/support/marketplace/quality/score/fbs.html)  {% endnote %}  Переносить заказы можно, если до формирования отгрузки осталось больше получаса.  Перенос происходит не мгновенно, а занимает несколько минут.  |**⚙️ Лимит:** 200 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
transferOrdersFromShipment0
  :: (Consumes TransferOrdersFromShipment0 MimeJSON, MimeRender MimeJSON TransferOrdersFromShipmentRequest)
  => TransferOrdersFromShipmentRequest -- ^ "transferOrdersFromShipmentRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ShipmentId -- ^ "shipmentId" -  Идентификатор отгрузки.
  -> ПартнерскийAPIМаркетаRequest TransferOrdersFromShipment0 MimeJSON EmptyApiResponse MimeJSON
transferOrdersFromShipment0 transferOrdersFromShipmentRequest (CampaignId campaignId) (ShipmentId shipmentId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/first-mile/shipments/",toPath shipmentId,"/orders/transfer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` transferOrdersFromShipmentRequest

data TransferOrdersFromShipment0 
instance HasBodyParam TransferOrdersFromShipment0 TransferOrdersFromShipmentRequest 

-- | @application/json@
instance Consumes TransferOrdersFromShipment0 MimeJSON

-- | @application/json@
instance Produces TransferOrdersFromShipment0 MimeJSON


-- *** updateBusinessPrices1

-- | @POST \/businesses\/{businessId}\/offer-prices\/updates@
-- 
-- Установка цен на товары во всех магазинах
-- 
-- Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateBusinessPrices1
  :: (Consumes UpdateBusinessPrices1 MimeJSON, MimeRender MimeJSON UpdateBusinessPricesRequest)
  => UpdateBusinessPricesRequest -- ^ "updateBusinessPricesRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateBusinessPrices1 MimeJSON EmptyApiResponse MimeJSON
updateBusinessPrices1 updateBusinessPricesRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-prices/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateBusinessPricesRequest

data UpdateBusinessPrices1 
instance HasBodyParam UpdateBusinessPrices1 UpdateBusinessPricesRequest 

-- | @application/json@
instance Consumes UpdateBusinessPrices1 MimeJSON

-- | @application/json@
instance Produces UpdateBusinessPrices1 MimeJSON


-- *** updateCampaignOffers2

-- | @POST \/campaigns\/{campaignId}\/offers\/update@
-- 
-- Изменение условий продажи товаров в магазине
-- 
-- Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateCampaignOffers2
  :: (Consumes UpdateCampaignOffers2 MimeJSON, MimeRender MimeJSON UpdateCampaignOffersRequest)
  => UpdateCampaignOffersRequest -- ^ "updateCampaignOffersRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateCampaignOffers2 MimeJSON EmptyApiResponse MimeJSON
updateCampaignOffers2 updateCampaignOffersRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offers/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateCampaignOffersRequest

data UpdateCampaignOffers2 
instance HasBodyParam UpdateCampaignOffers2 UpdateCampaignOffersRequest 

-- | @application/json@
instance Consumes UpdateCampaignOffers2 MimeJSON

-- | @application/json@
instance Produces UpdateCampaignOffers2 MimeJSON


-- *** updateGoodsFeedbackComment1

-- | @POST \/businesses\/{businessId}\/goods-feedback\/comments\/update@
-- 
-- Добавление нового или изменение созданного комментария
-- 
-- Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateGoodsFeedbackComment1
  :: (Consumes UpdateGoodsFeedbackComment1 MimeJSON, MimeRender MimeJSON UpdateGoodsFeedbackCommentRequest)
  => UpdateGoodsFeedbackCommentRequest -- ^ "updateGoodsFeedbackCommentRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateGoodsFeedbackComment1 MimeJSON UpdateGoodsFeedbackCommentResponse MimeJSON
updateGoodsFeedbackComment1 updateGoodsFeedbackCommentRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/goods-feedback/comments/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateGoodsFeedbackCommentRequest

data UpdateGoodsFeedbackComment1 
instance HasBodyParam UpdateGoodsFeedbackComment1 UpdateGoodsFeedbackCommentRequest 

-- | @application/json@
instance Consumes UpdateGoodsFeedbackComment1 MimeJSON

-- | @application/json@
instance Produces UpdateGoodsFeedbackComment1 MimeJSON


-- *** updateOfferContent2

-- | @POST \/businesses\/{businessId}\/offer-cards\/update@
-- 
-- Редактирование категорийных характеристик товара
-- 
-- Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOfferContent2
  :: (Consumes UpdateOfferContent2 MimeJSON, MimeRender MimeJSON UpdateOfferContentRequest)
  => UpdateOfferContentRequest -- ^ "updateOfferContentRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOfferContent2 MimeJSON UpdateOfferContentResponse MimeJSON
updateOfferContent2 updateOfferContentRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-cards/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOfferContentRequest

data UpdateOfferContent2 
instance HasBodyParam UpdateOfferContent2 UpdateOfferContentRequest 

-- | @application/json@
instance Consumes UpdateOfferContent2 MimeJSON

-- | @application/json@
instance Produces UpdateOfferContent2 MimeJSON


-- *** updateOfferMappingEntries1

-- | @POST \/campaigns\/{campaignId}\/offer-mapping-entries\/updates@
-- 
-- Добавление и редактирование товаров в каталоге
-- 
-- {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре `shopSku` ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре `shopSku` ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус `NEED_CONTENT` (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус `NEED_INFO` (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOfferMappingEntries1
  :: (Consumes UpdateOfferMappingEntries1 MimeJSON, MimeRender MimeJSON UpdateOfferMappingEntryRequest)
  => UpdateOfferMappingEntryRequest -- ^ "updateOfferMappingEntryRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOfferMappingEntries1 MimeJSON EmptyApiResponse MimeJSON
updateOfferMappingEntries1 updateOfferMappingEntryRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-mapping-entries/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOfferMappingEntryRequest

{-# DEPRECATED updateOfferMappingEntries1 "" #-}

data UpdateOfferMappingEntries1 
instance HasBodyParam UpdateOfferMappingEntries1 UpdateOfferMappingEntryRequest 

-- | @application/json@
instance Consumes UpdateOfferMappingEntries1 MimeJSON

-- | @application/json@
instance Produces UpdateOfferMappingEntries1 MimeJSON


-- *** updateOfferMappings2

-- | @POST \/businesses\/{businessId}\/offer-mappings\/update@
-- 
-- Добавление товаров в каталог и изменение информации о них
-- 
-- Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOfferMappings2
  :: (Consumes UpdateOfferMappings2 MimeJSON, MimeRender MimeJSON UpdateOfferMappingsRequest)
  => UpdateOfferMappingsRequest -- ^ "updateOfferMappingsRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOfferMappings2 MimeJSON UpdateOfferMappingsResponse MimeJSON
updateOfferMappings2 updateOfferMappingsRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/offer-mappings/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOfferMappingsRequest

data UpdateOfferMappings2 
instance HasBodyParam UpdateOfferMappings2 UpdateOfferMappingsRequest 

-- | @application/json@
instance Consumes UpdateOfferMappings2 MimeJSON

-- | @application/json@
instance Produces UpdateOfferMappings2 MimeJSON


-- *** updateOrderItems0

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/items@
-- 
-- Удаление товара из заказа или уменьшение числа единиц
-- 
-- {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Изменяет состав заказа, если позволяет выбранная служба доставки, в случаях:  * покупатель уменьшил количество товара; * магазин не может поставить все товары в заказе.  Для этого заказ должен находится в статусе `\"status\": \"PROCESSING\"` этапа обработки `\"substatus\": \"STARTED\"`. После передачи статуса `\"substatus\": \"READY_TO_SHIP\"` изменить состав невозможно.  Если одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте `count` параметра `item`.  Чтобы полностью удалить товар из заказа:  * передайте значение `0`; или * не передавайте параметр `item`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  **Возврат денег покупателю**  Если покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:  * при оплате банковской картой — с момента, когда магазин переведет заказ в статус `SHIPPED`;  * при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOrderItems0
  :: (Consumes UpdateOrderItems0 MimeJSON, MimeRender MimeJSON UpdateOrderItemRequest)
  => UpdateOrderItemRequest -- ^ "updateOrderItemRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest UpdateOrderItems0 MimeJSON NoContent MimeNoContent
updateOrderItems0 updateOrderItemRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/items"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOrderItemRequest

data UpdateOrderItems0 
instance HasBodyParam UpdateOrderItems0 UpdateOrderItemRequest 

-- | @application/json@
instance Consumes UpdateOrderItems0 MimeJSON

instance Produces UpdateOrderItems0 MimeNoContent


-- *** updateOrderStatus0

-- | @PUT \/campaigns\/{campaignId}\/orders\/{orderId}\/status@
-- 
-- Изменение статуса одного заказа
-- 
-- Изменяет статус заказа. Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOrderStatus0
  :: (Consumes UpdateOrderStatus0 MimeJSON, MimeRender MimeJSON UpdateOrderStatusRequest)
  => UpdateOrderStatusRequest -- ^ "updateOrderStatusRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> OrderId -- ^ "orderId" -  Идентификатор заказа.
  -> ПартнерскийAPIМаркетаRequest UpdateOrderStatus0 MimeJSON UpdateOrderStatusResponse MimeJSON
updateOrderStatus0 updateOrderStatusRequest (CampaignId campaignId) (OrderId orderId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/orders/",toPath orderId,"/status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOrderStatusRequest

data UpdateOrderStatus0 
instance HasBodyParam UpdateOrderStatus0 UpdateOrderStatusRequest 

-- | @application/json@
instance Consumes UpdateOrderStatus0 MimeJSON

-- | @application/json@
instance Produces UpdateOrderStatus0 MimeJSON


-- *** updateOrderStatuses0

-- | @POST \/campaigns\/{campaignId}\/orders\/status-update@
-- 
-- Изменение статусов нескольких заказов
-- 
-- Изменяет статусы нескольких заказов.  Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"`и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  Максимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateOrderStatuses0
  :: (Consumes UpdateOrderStatuses0 MimeJSON, MimeRender MimeJSON UpdateOrderStatusesRequest)
  => UpdateOrderStatusesRequest -- ^ "updateOrderStatusesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateOrderStatuses0 MimeJSON UpdateOrderStatusesResponse MimeJSON
updateOrderStatuses0 updateOrderStatusesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/orders/status-update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateOrderStatusesRequest

data UpdateOrderStatuses0 
instance HasBodyParam UpdateOrderStatuses0 UpdateOrderStatusesRequest 

-- | @application/json@
instance Consumes UpdateOrderStatuses0 MimeJSON

-- | @application/json@
instance Produces UpdateOrderStatuses0 MimeJSON


-- *** updatePrices1

-- | @POST \/campaigns\/{campaignId}\/offer-prices\/updates@
-- 
-- Установка цен на товары в конкретном магазине
-- 
-- Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updatePrices1
  :: (Consumes UpdatePrices1 MimeJSON, MimeRender MimeJSON UpdatePricesRequest)
  => UpdatePricesRequest -- ^ "updatePricesRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdatePrices1 MimeJSON EmptyApiResponse MimeJSON
updatePrices1 updatePricesRequest (CampaignId campaignId) =
  _mkRequest "POST" ["/campaigns/",toPath campaignId,"/offer-prices/updates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updatePricesRequest

data UpdatePrices1 
instance HasBodyParam UpdatePrices1 UpdatePricesRequest 

-- | @application/json@
instance Consumes UpdatePrices1 MimeJSON

-- | @application/json@
instance Produces UpdatePrices1 MimeJSON


-- *** updatePromoOffers1

-- | @POST \/businesses\/{businessId}\/promos\/offers\/update@
-- 
-- Добавление товаров в акцию или изменение их цен
-- 
-- Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updatePromoOffers1
  :: (Consumes UpdatePromoOffers1 MimeJSON, MimeRender MimeJSON UpdatePromoOffersRequest)
  => UpdatePromoOffersRequest -- ^ "updatePromoOffersRequest"
  -> BusinessId -- ^ "businessId" -  Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdatePromoOffers1 MimeJSON UpdatePromoOffersResponse MimeJSON
updatePromoOffers1 updatePromoOffersRequest (BusinessId businessId) =
  _mkRequest "POST" ["/businesses/",toPath businessId,"/promos/offers/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updatePromoOffersRequest

data UpdatePromoOffers1 
instance HasBodyParam UpdatePromoOffers1 UpdatePromoOffersRequest 

-- | @application/json@
instance Consumes UpdatePromoOffers1 MimeJSON

-- | @application/json@
instance Produces UpdatePromoOffers1 MimeJSON


-- *** updateStocks0

-- | @PUT \/campaigns\/{campaignId}\/offers\/stocks@
-- 
-- Передача информации об остатках
-- 
-- Передает данные об остатках товаров на витрине.  Обязательно указывайте SKU **в точности** так, как он указан в каталоге. Например, _557722_ и _0557722_ — это два разных SKU.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-| 
-- 
-- AuthMethod: 'AuthOAuthOAuth'
-- 
updateStocks0
  :: (Consumes UpdateStocks0 MimeJSON, MimeRender MimeJSON UpdateStocksRequest)
  => UpdateStocksRequest -- ^ "updateStocksRequest"
  -> CampaignId -- ^ "campaignId" -  Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
  -> ПартнерскийAPIМаркетаRequest UpdateStocks0 MimeJSON EmptyApiResponse MimeJSON
updateStocks0 updateStocksRequest (CampaignId campaignId) =
  _mkRequest "PUT" ["/campaigns/",toPath campaignId,"/offers/stocks"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth)
    `setBodyParam` updateStocksRequest

data UpdateStocks0 
instance HasBodyParam UpdateStocks0 UpdateStocksRequest 

-- | @application/json@
instance Consumes UpdateStocks0 MimeJSON

-- | @application/json@
instance Produces UpdateStocks0 MimeJSON

