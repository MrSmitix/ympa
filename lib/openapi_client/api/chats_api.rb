=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module OpenapiClient
  class ChatsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Создание нового чата с покупателем
    # Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param create_chat_request [CreateChatRequest] description
    # @param [Hash] opts the optional parameters
    # @return [CreateChatResponse]
    def create_chat(business_id, create_chat_request, opts = {})
      data, _status_code, _headers = create_chat_with_http_info(business_id, create_chat_request, opts)
      data
    end

    # Создание нового чата с покупателем
    # Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param create_chat_request [CreateChatRequest] description
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateChatResponse, Integer, Hash)>] CreateChatResponse data, response status code and response headers
    def create_chat_with_http_info(business_id, create_chat_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatsApi.create_chat ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling ChatsApi.create_chat"
      end
      # verify the required parameter 'create_chat_request' is set
      if @api_client.config.client_side_validation && create_chat_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_chat_request' when calling ChatsApi.create_chat"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/chats/new'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_chat_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateChatResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"ChatsApi.create_chat",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#create_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Получение истории сообщений в чате
    # Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Integer] Идентификатор чата.
    # @param get_chat_history_request [GetChatHistoryRequest] description
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
    # @option opts [Integer] :limit Количество значений на одной странице. 
    # @return [GetChatHistoryResponse]
    def get_chat_history(business_id, chat_id, get_chat_history_request, opts = {})
      data, _status_code, _headers = get_chat_history_with_http_info(business_id, chat_id, get_chat_history_request, opts)
      data
    end

    # Получение истории сообщений в чате
    # Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Integer] Идентификатор чата.
    # @param get_chat_history_request [GetChatHistoryRequest] description
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
    # @option opts [Integer] :limit Количество значений на одной странице. 
    # @return [Array<(GetChatHistoryResponse, Integer, Hash)>] GetChatHistoryResponse data, response status code and response headers
    def get_chat_history_with_http_info(business_id, chat_id, get_chat_history_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatsApi.get_chat_history ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling ChatsApi.get_chat_history"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.get_chat_history"
      end
      # verify the required parameter 'get_chat_history_request' is set
      if @api_client.config.client_side_validation && get_chat_history_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_chat_history_request' when calling ChatsApi.get_chat_history"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/chats/history'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chatId'] = chat_id
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_chat_history_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetChatHistoryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"ChatsApi.get_chat_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#get_chat_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Получение доступных чатов
    # Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_chats_request [GetChatsRequest] description
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
    # @option opts [Integer] :limit Количество значений на одной странице. 
    # @return [GetChatsResponse]
    def get_chats(business_id, get_chats_request, opts = {})
      data, _status_code, _headers = get_chats_with_http_info(business_id, get_chats_request, opts)
      data
    end

    # Получение доступных чатов
    # Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_chats_request [GetChatsRequest] description
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
    # @option opts [Integer] :limit Количество значений на одной странице. 
    # @return [Array<(GetChatsResponse, Integer, Hash)>] GetChatsResponse data, response status code and response headers
    def get_chats_with_http_info(business_id, get_chats_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatsApi.get_chats ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling ChatsApi.get_chats"
      end
      # verify the required parameter 'get_chats_request' is set
      if @api_client.config.client_side_validation && get_chats_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_chats_request' when calling ChatsApi.get_chats"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/chats'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_chats_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetChatsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"ChatsApi.get_chats",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#get_chats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Отправка файла в чат
    # Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Integer] Идентификатор чата.
    # @param file [File] Содержимое файла. Максимальный размер файла — 5 Мбайт.
    # @param [Hash] opts the optional parameters
    # @return [EmptyApiResponse]
    def send_file_to_chat(business_id, chat_id, file, opts = {})
      data, _status_code, _headers = send_file_to_chat_with_http_info(business_id, chat_id, file, opts)
      data
    end

    # Отправка файла в чат
    # Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Integer] Идентификатор чата.
    # @param file [File] Содержимое файла. Максимальный размер файла — 5 Мбайт.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def send_file_to_chat_with_http_info(business_id, chat_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatsApi.send_file_to_chat ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling ChatsApi.send_file_to_chat"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.send_file_to_chat"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ChatsApi.send_file_to_chat"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/chats/file/send'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chatId'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"ChatsApi.send_file_to_chat",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#send_file_to_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Отправка сообщения в чат
    # Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Integer] Идентификатор чата.
    # @param send_message_to_chat_request [SendMessageToChatRequest] description
    # @param [Hash] opts the optional parameters
    # @return [EmptyApiResponse]
    def send_message_to_chat(business_id, chat_id, send_message_to_chat_request, opts = {})
      data, _status_code, _headers = send_message_to_chat_with_http_info(business_id, chat_id, send_message_to_chat_request, opts)
      data
    end

    # Отправка сообщения в чат
    # Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Integer] Идентификатор чата.
    # @param send_message_to_chat_request [SendMessageToChatRequest] description
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def send_message_to_chat_with_http_info(business_id, chat_id, send_message_to_chat_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatsApi.send_message_to_chat ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling ChatsApi.send_message_to_chat"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.send_message_to_chat"
      end
      # verify the required parameter 'send_message_to_chat_request' is set
      if @api_client.config.client_side_validation && send_message_to_chat_request.nil?
        fail ArgumentError, "Missing the required parameter 'send_message_to_chat_request' when calling ChatsApi.send_message_to_chat"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/chats/message'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chatId'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(send_message_to_chat_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"ChatsApi.send_message_to_chat",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#send_message_to_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
