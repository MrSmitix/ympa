=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module OpenapiClient
  class PromosApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Удаление товаров из акции
    # Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_promo_offers_request [DeletePromoOffersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DeletePromoOffersResponse]
    def delete_promo_offers(business_id, delete_promo_offers_request, opts = {})
      data, _status_code, _headers = delete_promo_offers_with_http_info(business_id, delete_promo_offers_request, opts)
      data
    end

    # Удаление товаров из акции
    # Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_promo_offers_request [DeletePromoOffersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletePromoOffersResponse, Integer, Hash)>] DeletePromoOffersResponse data, response status code and response headers
    def delete_promo_offers_with_http_info(business_id, delete_promo_offers_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PromosApi.delete_promo_offers ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling PromosApi.delete_promo_offers"
      end
      # verify the required parameter 'delete_promo_offers_request' is set
      if @api_client.config.client_side_validation && delete_promo_offers_request.nil?
        fail ArgumentError, "Missing the required parameter 'delete_promo_offers_request' when calling PromosApi.delete_promo_offers"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/promos/offers/delete'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(delete_promo_offers_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DeletePromoOffersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"PromosApi.delete_promo_offers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromosApi#delete_promo_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Получение списка товаров, которые участвуют или могут участвовать в акции
    # Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_promo_offers_request [GetPromoOffersRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
    # @option opts [Integer] :limit Количество значений на одной странице. 
    # @return [GetPromoOffersResponse]
    def get_promo_offers(business_id, get_promo_offers_request, opts = {})
      data, _status_code, _headers = get_promo_offers_with_http_info(business_id, get_promo_offers_request, opts)
      data
    end

    # Получение списка товаров, которые участвуют или могут участвовать в акции
    # Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре &#x60;limit&#x60; не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_promo_offers_request [GetPromoOffersRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
    # @option opts [Integer] :limit Количество значений на одной странице. 
    # @return [Array<(GetPromoOffersResponse, Integer, Hash)>] GetPromoOffersResponse data, response status code and response headers
    def get_promo_offers_with_http_info(business_id, get_promo_offers_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PromosApi.get_promo_offers ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling PromosApi.get_promo_offers"
      end
      # verify the required parameter 'get_promo_offers_request' is set
      if @api_client.config.client_side_validation && get_promo_offers_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_promo_offers_request' when calling PromosApi.get_promo_offers"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/promos/offers'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_promo_offers_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetPromoOffersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"PromosApi.get_promo_offers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromosApi#get_promo_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Получение списка акций
    # Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param [Hash] opts the optional parameters
    # @option opts [GetPromosRequest] :get_promos_request 
    # @return [GetPromosResponse]
    def get_promos(business_id, opts = {})
      data, _status_code, _headers = get_promos_with_http_info(business_id, opts)
      data
    end

    # Получение списка акций
    # Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр &#x60;participation&#x60;.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param [Hash] opts the optional parameters
    # @option opts [GetPromosRequest] :get_promos_request 
    # @return [Array<(GetPromosResponse, Integer, Hash)>] GetPromosResponse data, response status code and response headers
    def get_promos_with_http_info(business_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PromosApi.get_promos ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling PromosApi.get_promos"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/promos'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_promos_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetPromosResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"PromosApi.get_promos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromosApi#get_promos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Добавление товаров в акцию или изменение их цен
    # Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_promo_offers_request [UpdatePromoOffersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UpdatePromoOffersResponse]
    def update_promo_offers(business_id, update_promo_offers_request, opts = {})
      data, _status_code, _headers = update_promo_offers_with_http_info(business_id, update_promo_offers_request, opts)
      data
    end

    # Добавление товаров в акцию или изменение их цен
    # Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_promo_offers_request [UpdatePromoOffersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdatePromoOffersResponse, Integer, Hash)>] UpdatePromoOffersResponse data, response status code and response headers
    def update_promo_offers_with_http_info(business_id, update_promo_offers_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PromosApi.update_promo_offers ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling PromosApi.update_promo_offers"
      end
      # verify the required parameter 'update_promo_offers_request' is set
      if @api_client.config.client_side_validation && update_promo_offers_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_promo_offers_request' when calling PromosApi.update_promo_offers"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/promos/offers/update'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_promo_offers_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdatePromoOffersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"PromosApi.update_promo_offers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromosApi#update_promo_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
