=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module OpenapiClient
  class CategoriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Лимит на установку кванта продажи и минимального количества товаров в заказе
    # Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param get_categories_max_sale_quantum_request [GetCategoriesMaxSaleQuantumRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetCategoriesMaxSaleQuantumResponse]
    def get_categories_max_sale_quantum(get_categories_max_sale_quantum_request, opts = {})
      data, _status_code, _headers = get_categories_max_sale_quantum_with_http_info(get_categories_max_sale_quantum_request, opts)
      data
    end

    # Лимит на установку кванта продажи и минимального количества товаров в заказе
    # Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param get_categories_max_sale_quantum_request [GetCategoriesMaxSaleQuantumRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCategoriesMaxSaleQuantumResponse, Integer, Hash)>] GetCategoriesMaxSaleQuantumResponse data, response status code and response headers
    def get_categories_max_sale_quantum_with_http_info(get_categories_max_sale_quantum_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.get_categories_max_sale_quantum ...'
      end
      # verify the required parameter 'get_categories_max_sale_quantum_request' is set
      if @api_client.config.client_side_validation && get_categories_max_sale_quantum_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_categories_max_sale_quantum_request' when calling CategoriesApi.get_categories_max_sale_quantum"
      end
      # resource path
      local_var_path = '/categories/max-sale-quantum'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_categories_max_sale_quantum_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetCategoriesMaxSaleQuantumResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"CategoriesApi.get_categories_max_sale_quantum",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#get_categories_max_sale_quantum\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Дерево категорий
    # Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param [Hash] opts the optional parameters
    # @option opts [GetCategoriesRequest] :get_categories_request 
    # @return [GetCategoriesResponse]
    def get_categories_tree(opts = {})
      data, _status_code, _headers = get_categories_tree_with_http_info(opts)
      data
    end

    # Дерево категорий
    # Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param [Hash] opts the optional parameters
    # @option opts [GetCategoriesRequest] :get_categories_request 
    # @return [Array<(GetCategoriesResponse, Integer, Hash)>] GetCategoriesResponse data, response status code and response headers
    def get_categories_tree_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.get_categories_tree ...'
      end
      # resource path
      local_var_path = '/categories/tree'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_categories_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetCategoriesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"CategoriesApi.get_categories_tree",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#get_categories_tree\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
