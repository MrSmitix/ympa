=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module OpenapiClient
  class GoodsFeedbackApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Удаление комментария к отзыву
    # Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_goods_feedback_comment_request [DeleteGoodsFeedbackCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EmptyApiResponse]
    def delete_goods_feedback_comment(business_id, delete_goods_feedback_comment_request, opts = {})
      data, _status_code, _headers = delete_goods_feedback_comment_with_http_info(business_id, delete_goods_feedback_comment_request, opts)
      data
    end

    # Удаление комментария к отзыву
    # Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_goods_feedback_comment_request [DeleteGoodsFeedbackCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def delete_goods_feedback_comment_with_http_info(business_id, delete_goods_feedback_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoodsFeedbackApi.delete_goods_feedback_comment ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling GoodsFeedbackApi.delete_goods_feedback_comment"
      end
      # verify the required parameter 'delete_goods_feedback_comment_request' is set
      if @api_client.config.client_side_validation && delete_goods_feedback_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'delete_goods_feedback_comment_request' when calling GoodsFeedbackApi.delete_goods_feedback_comment"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/goods-feedback/comments/delete'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(delete_goods_feedback_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"GoodsFeedbackApi.delete_goods_feedback_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoodsFeedbackApi#delete_goods_feedback_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Получение комментариев к отзыву
    # Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_goods_feedback_comments_request [GetGoodsFeedbackCommentsRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
    # @option opts [Integer] :limit Количество значений на одной странице. 
    # @return [GetGoodsFeedbackCommentsResponse]
    def get_goods_feedback_comments(business_id, get_goods_feedback_comments_request, opts = {})
      data, _status_code, _headers = get_goods_feedback_comments_with_http_info(business_id, get_goods_feedback_comments_request, opts)
      data
    end

    # Получение комментариев к отзыву
    # Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_goods_feedback_comments_request [GetGoodsFeedbackCommentsRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
    # @option opts [Integer] :limit Количество значений на одной странице. 
    # @return [Array<(GetGoodsFeedbackCommentsResponse, Integer, Hash)>] GetGoodsFeedbackCommentsResponse data, response status code and response headers
    def get_goods_feedback_comments_with_http_info(business_id, get_goods_feedback_comments_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoodsFeedbackApi.get_goods_feedback_comments ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling GoodsFeedbackApi.get_goods_feedback_comments"
      end
      # verify the required parameter 'get_goods_feedback_comments_request' is set
      if @api_client.config.client_side_validation && get_goods_feedback_comments_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_goods_feedback_comments_request' when calling GoodsFeedbackApi.get_goods_feedback_comments"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/goods-feedback/comments'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_goods_feedback_comments_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetGoodsFeedbackCommentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"GoodsFeedbackApi.get_goods_feedback_comments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoodsFeedbackApi#get_goods_feedback_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Получение отзывов о товарах продавца
    # Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
    # @option opts [Integer] :limit Количество значений на одной странице. 
    # @option opts [GetGoodsFeedbackRequest] :get_goods_feedback_request 
    # @return [GetGoodsFeedbackResponse]
    def get_goods_feedbacks(business_id, opts = {})
      data, _status_code, _headers = get_goods_feedbacks_with_http_info(business_id, opts)
      data
    end

    # Получение отзывов о товарах продавца
    # Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
    # @option opts [Integer] :limit Количество значений на одной странице. 
    # @option opts [GetGoodsFeedbackRequest] :get_goods_feedback_request 
    # @return [Array<(GetGoodsFeedbackResponse, Integer, Hash)>] GetGoodsFeedbackResponse data, response status code and response headers
    def get_goods_feedbacks_with_http_info(business_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoodsFeedbackApi.get_goods_feedbacks ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling GoodsFeedbackApi.get_goods_feedbacks"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/goods-feedback'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_goods_feedback_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetGoodsFeedbackResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"GoodsFeedbackApi.get_goods_feedbacks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoodsFeedbackApi#get_goods_feedbacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Отказ от ответа на отзывы
    # Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param skip_goods_feedback_reaction_request [SkipGoodsFeedbackReactionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EmptyApiResponse]
    def skip_goods_feedbacks_reaction(business_id, skip_goods_feedback_reaction_request, opts = {})
      data, _status_code, _headers = skip_goods_feedbacks_reaction_with_http_info(business_id, skip_goods_feedback_reaction_request, opts)
      data
    end

    # Отказ от ответа на отзывы
    # Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param skip_goods_feedback_reaction_request [SkipGoodsFeedbackReactionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def skip_goods_feedbacks_reaction_with_http_info(business_id, skip_goods_feedback_reaction_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoodsFeedbackApi.skip_goods_feedbacks_reaction ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling GoodsFeedbackApi.skip_goods_feedbacks_reaction"
      end
      # verify the required parameter 'skip_goods_feedback_reaction_request' is set
      if @api_client.config.client_side_validation && skip_goods_feedback_reaction_request.nil?
        fail ArgumentError, "Missing the required parameter 'skip_goods_feedback_reaction_request' when calling GoodsFeedbackApi.skip_goods_feedbacks_reaction"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/goods-feedback/skip-reaction'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(skip_goods_feedback_reaction_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"GoodsFeedbackApi.skip_goods_feedbacks_reaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoodsFeedbackApi#skip_goods_feedbacks_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Добавление нового или изменение созданного комментария
    # Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_goods_feedback_comment_request [UpdateGoodsFeedbackCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateGoodsFeedbackCommentResponse]
    def update_goods_feedback_comment(business_id, update_goods_feedback_comment_request, opts = {})
      data, _status_code, _headers = update_goods_feedback_comment_with_http_info(business_id, update_goods_feedback_comment_request, opts)
      data
    end

    # Добавление нового или изменение созданного комментария
    # Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Integer] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_goods_feedback_comment_request [UpdateGoodsFeedbackCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateGoodsFeedbackCommentResponse, Integer, Hash)>] UpdateGoodsFeedbackCommentResponse data, response status code and response headers
    def update_goods_feedback_comment_with_http_info(business_id, update_goods_feedback_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoodsFeedbackApi.update_goods_feedback_comment ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling GoodsFeedbackApi.update_goods_feedback_comment"
      end
      # verify the required parameter 'update_goods_feedback_comment_request' is set
      if @api_client.config.client_side_validation && update_goods_feedback_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_goods_feedback_comment_request' when calling GoodsFeedbackApi.update_goods_feedback_comment"
      end
      # resource path
      local_var_path = '/businesses/{businessId}/goods-feedback/comments/update'.sub('{' + 'businessId' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_goods_feedback_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateGoodsFeedbackCommentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"GoodsFeedbackApi.update_goods_feedback_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoodsFeedbackApi#update_goods_feedback_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
