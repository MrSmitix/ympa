=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  class CurrencyType
    RUR = "RUR".freeze
    USD = "USD".freeze
    EUR = "EUR".freeze
    UAH = "UAH".freeze
    AUD = "AUD".freeze
    GBP = "GBP".freeze
    BYR = "BYR".freeze
    BYN = "BYN".freeze
    DKK = "DKK".freeze
    ISK = "ISK".freeze
    KZT = "KZT".freeze
    CAD = "CAD".freeze
    CNY = "CNY".freeze
    NOK = "NOK".freeze
    XDR = "XDR".freeze
    SGD = "SGD".freeze
    TRY = "TRY".freeze
    SEK = "SEK".freeze
    CHF = "CHF".freeze
    JPY = "JPY".freeze
    AZN = "AZN".freeze
    ALL = "ALL".freeze
    DZD = "DZD".freeze
    AOA = "AOA".freeze
    ARS = "ARS".freeze
    AMD = "AMD".freeze
    AFN = "AFN".freeze
    BHD = "BHD".freeze
    BGN = "BGN".freeze
    BOB = "BOB".freeze
    BWP = "BWP".freeze
    BND = "BND".freeze
    BRL = "BRL".freeze
    BIF = "BIF".freeze
    HUF = "HUF".freeze
    VEF = "VEF".freeze
    KPW = "KPW".freeze
    VND = "VND".freeze
    GMD = "GMD".freeze
    GHS = "GHS".freeze
    GNF = "GNF".freeze
    HKD = "HKD".freeze
    GEL = "GEL".freeze
    AED = "AED".freeze
    EGP = "EGP".freeze
    ZMK = "ZMK".freeze
    ILS = "ILS".freeze
    INR = "INR".freeze
    IDR = "IDR".freeze
    JOD = "JOD".freeze
    IQD = "IQD".freeze
    IRR = "IRR".freeze
    YER = "YER".freeze
    QAR = "QAR".freeze
    KES = "KES".freeze
    KGS = "KGS".freeze
    COP = "COP".freeze
    CDF = "CDF".freeze
    CRC = "CRC".freeze
    KWD = "KWD".freeze
    CUP = "CUP".freeze
    LAK = "LAK".freeze
    LVL = "LVL".freeze
    SLL = "SLL".freeze
    LBP = "LBP".freeze
    LYD = "LYD".freeze
    SZL = "SZL".freeze
    LTL = "LTL".freeze
    MUR = "MUR".freeze
    MRO = "MRO".freeze
    MKD = "MKD".freeze
    MWK = "MWK".freeze
    MGA = "MGA".freeze
    MYR = "MYR".freeze
    MAD = "MAD".freeze
    MXN = "MXN".freeze
    MZN = "MZN".freeze
    MDL = "MDL".freeze
    MNT = "MNT".freeze
    NPR = "NPR".freeze
    NGN = "NGN".freeze
    NIO = "NIO".freeze
    NZD = "NZD".freeze
    OMR = "OMR".freeze
    PKR = "PKR".freeze
    PYG = "PYG".freeze
    PEN = "PEN".freeze
    PLN = "PLN".freeze
    KHR = "KHR".freeze
    SAR = "SAR".freeze
    RON = "RON".freeze
    SCR = "SCR".freeze
    SYP = "SYP".freeze
    SKK = "SKK".freeze
    SOS = "SOS".freeze
    SDG = "SDG".freeze
    SRD = "SRD".freeze
    TJS = "TJS".freeze
    THB = "THB".freeze
    TWD = "TWD".freeze
    BDT = "BDT".freeze
    TZS = "TZS".freeze
    TND = "TND".freeze
    TMM = "TMM".freeze
    UGX = "UGX".freeze
    UZS = "UZS".freeze
    UYU = "UYU".freeze
    PHP = "PHP".freeze
    DJF = "DJF".freeze
    XAF = "XAF".freeze
    XOF = "XOF".freeze
    HRK = "HRK".freeze
    CZK = "CZK".freeze
    CLP = "CLP".freeze
    LKR = "LKR".freeze
    EEK = "EEK".freeze
    ETB = "ETB".freeze
    RSD = "RSD".freeze
    ZAR = "ZAR".freeze
    KRW = "KRW".freeze
    NAD = "NAD".freeze
    TL = "TL".freeze
    UE = "UE".freeze

    def self.all_vars
      @all_vars ||= [RUR, USD, EUR, UAH, AUD, GBP, BYR, BYN, DKK, ISK, KZT, CAD, CNY, NOK, XDR, SGD, TRY, SEK, CHF, JPY, AZN, ALL, DZD, AOA, ARS, AMD, AFN, BHD, BGN, BOB, BWP, BND, BRL, BIF, HUF, VEF, KPW, VND, GMD, GHS, GNF, HKD, GEL, AED, EGP, ZMK, ILS, INR, IDR, JOD, IQD, IRR, YER, QAR, KES, KGS, COP, CDF, CRC, KWD, CUP, LAK, LVL, SLL, LBP, LYD, SZL, LTL, MUR, MRO, MKD, MWK, MGA, MYR, MAD, MXN, MZN, MDL, MNT, NPR, NGN, NIO, NZD, OMR, PKR, PYG, PEN, PLN, KHR, SAR, RON, SCR, SYP, SKK, SOS, SDG, SRD, TJS, THB, TWD, BDT, TZS, TND, TMM, UGX, UZS, UYU, PHP, DJF, XAF, XOF, HRK, CZK, CLP, LKR, EEK, ETB, RSD, ZAR, KRW, NAD, TL, UE].freeze
    end

    # Builds the enum from string
    # @param [String] The enum value in the form of the string
    # @return [String] The enum value
    def self.build_from_hash(value)
      new.build_from_hash(value)
    end

    # Builds the enum from string
    # @param [String] The enum value in the form of the string
    # @return [String] The enum value
    def build_from_hash(value)
      return value if CurrencyType.all_vars.include?(value)
      raise "Invalid ENUM value #{value} for class #CurrencyType"
    end
  end
end
