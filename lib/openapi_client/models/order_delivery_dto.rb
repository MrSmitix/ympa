=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Информация о доставке.
  class OrderDeliveryDTO
    # Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
    attr_accessor :id

    attr_accessor :type

    # Наименование службы доставки.
    attr_accessor :service_name

    # {% note warning \"\" %}  Этот параметр устарел. Стоимость доставки смотрите в параметре `deliveryTotal`.  {% endnote %}  Стоимость доставки в валюте заказа. 
    attr_accessor :price

    attr_accessor :delivery_partner_type

    attr_accessor :courier

    attr_accessor :dates

    attr_accessor :region

    attr_accessor :address

    attr_accessor :vat

    # Идентификатор службы доставки.
    attr_accessor :delivery_service_id

    attr_accessor :lift_type

    # Стоимость подъема на этаж.
    attr_accessor :lift_price

    # Идентификатор пункта самовывоза, присвоенный магазином.
    attr_accessor :outlet_code

    # Формат даты: `ДД-ММ-ГГГГ`. 
    attr_accessor :outlet_storage_limit_date

    attr_accessor :dispatch_type

    # Информация для отслеживания перемещений посылки.
    attr_accessor :tracks

    # Информация о посылках.
    attr_accessor :shipments

    # Приблизительная ли дата доставки.
    attr_accessor :estimated

    attr_accessor :eac_type

    # Код подтверждения ЭАПП (для типа `MERCHANT_TO_COURIER`). 
    attr_accessor :eac_code

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'type' => :'type',
        :'service_name' => :'serviceName',
        :'price' => :'price',
        :'delivery_partner_type' => :'deliveryPartnerType',
        :'courier' => :'courier',
        :'dates' => :'dates',
        :'region' => :'region',
        :'address' => :'address',
        :'vat' => :'vat',
        :'delivery_service_id' => :'deliveryServiceId',
        :'lift_type' => :'liftType',
        :'lift_price' => :'liftPrice',
        :'outlet_code' => :'outletCode',
        :'outlet_storage_limit_date' => :'outletStorageLimitDate',
        :'dispatch_type' => :'dispatchType',
        :'tracks' => :'tracks',
        :'shipments' => :'shipments',
        :'estimated' => :'estimated',
        :'eac_type' => :'eacType',
        :'eac_code' => :'eacCode'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'type' => :'OrderDeliveryType',
        :'service_name' => :'String',
        :'price' => :'Float',
        :'delivery_partner_type' => :'OrderDeliveryPartnerType',
        :'courier' => :'OrderCourierDTO',
        :'dates' => :'OrderDeliveryDatesDTO',
        :'region' => :'RegionDTO',
        :'address' => :'OrderDeliveryAddressDTO',
        :'vat' => :'OrderVatType',
        :'delivery_service_id' => :'Integer',
        :'lift_type' => :'OrderLiftType',
        :'lift_price' => :'Float',
        :'outlet_code' => :'String',
        :'outlet_storage_limit_date' => :'String',
        :'dispatch_type' => :'OrderDeliveryDispatchType',
        :'tracks' => :'Array<OrderTrackDTO>',
        :'shipments' => :'Array<OrderShipmentDTO>',
        :'estimated' => :'Boolean',
        :'eac_type' => :'OrderDeliveryEacType',
        :'eac_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'tracks',
        :'shipments',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrderDeliveryDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrderDeliveryDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'service_name')
        self.service_name = attributes[:'service_name']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'delivery_partner_type')
        self.delivery_partner_type = attributes[:'delivery_partner_type']
      end

      if attributes.key?(:'courier')
        self.courier = attributes[:'courier']
      end

      if attributes.key?(:'dates')
        self.dates = attributes[:'dates']
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'vat')
        self.vat = attributes[:'vat']
      end

      if attributes.key?(:'delivery_service_id')
        self.delivery_service_id = attributes[:'delivery_service_id']
      end

      if attributes.key?(:'lift_type')
        self.lift_type = attributes[:'lift_type']
      end

      if attributes.key?(:'lift_price')
        self.lift_price = attributes[:'lift_price']
      end

      if attributes.key?(:'outlet_code')
        self.outlet_code = attributes[:'outlet_code']
      end

      if attributes.key?(:'outlet_storage_limit_date')
        self.outlet_storage_limit_date = attributes[:'outlet_storage_limit_date']
      end

      if attributes.key?(:'dispatch_type')
        self.dispatch_type = attributes[:'dispatch_type']
      end

      if attributes.key?(:'tracks')
        if (value = attributes[:'tracks']).is_a?(Array)
          self.tracks = value
        end
      end

      if attributes.key?(:'shipments')
        if (value = attributes[:'shipments']).is_a?(Array)
          self.shipments = value
        end
      end

      if attributes.key?(:'estimated')
        self.estimated = attributes[:'estimated']
      end

      if attributes.key?(:'eac_type')
        self.eac_type = attributes[:'eac_type']
      end

      if attributes.key?(:'eac_code')
        self.eac_code = attributes[:'eac_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          type == o.type &&
          service_name == o.service_name &&
          price == o.price &&
          delivery_partner_type == o.delivery_partner_type &&
          courier == o.courier &&
          dates == o.dates &&
          region == o.region &&
          address == o.address &&
          vat == o.vat &&
          delivery_service_id == o.delivery_service_id &&
          lift_type == o.lift_type &&
          lift_price == o.lift_price &&
          outlet_code == o.outlet_code &&
          outlet_storage_limit_date == o.outlet_storage_limit_date &&
          dispatch_type == o.dispatch_type &&
          tracks == o.tracks &&
          shipments == o.shipments &&
          estimated == o.estimated &&
          eac_type == o.eac_type &&
          eac_code == o.eac_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, type, service_name, price, delivery_partner_type, courier, dates, region, address, vat, delivery_service_id, lift_type, lift_price, outlet_code, outlet_storage_limit_date, dispatch_type, tracks, shipments, estimated, eac_type, eac_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
