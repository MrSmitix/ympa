=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Список товаров в заказе.
  class OrderItemDTO
    # Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    attr_accessor :id

    # Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    attr_accessor :offer_id

    # Название товара.
    attr_accessor :offer_name

    # Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`). 
    attr_accessor :price

    # Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
    attr_accessor :buyer_price

    # Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
    attr_accessor :buyer_price_before_discount

    # {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
    attr_accessor :price_before_discount

    # Количество единиц товара.
    attr_accessor :count

    attr_accessor :vat

    # Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    attr_accessor :shop_sku

    # {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
    attr_accessor :subsidy

    # {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
    attr_accessor :partner_warehouse_id

    # Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
    attr_accessor :promos

    # Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. 
    attr_accessor :instances

    # Информация об удалении товара из заказа. 
    attr_accessor :details

    # Список субсидий по типам.
    attr_accessor :subsidies

    # Список необходимых маркировок товара.
    attr_accessor :required_instance_types

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'offer_id' => :'offerId',
        :'offer_name' => :'offerName',
        :'price' => :'price',
        :'buyer_price' => :'buyerPrice',
        :'buyer_price_before_discount' => :'buyerPriceBeforeDiscount',
        :'price_before_discount' => :'priceBeforeDiscount',
        :'count' => :'count',
        :'vat' => :'vat',
        :'shop_sku' => :'shopSku',
        :'subsidy' => :'subsidy',
        :'partner_warehouse_id' => :'partnerWarehouseId',
        :'promos' => :'promos',
        :'instances' => :'instances',
        :'details' => :'details',
        :'subsidies' => :'subsidies',
        :'required_instance_types' => :'requiredInstanceTypes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'offer_id' => :'String',
        :'offer_name' => :'String',
        :'price' => :'Float',
        :'buyer_price' => :'Float',
        :'buyer_price_before_discount' => :'Float',
        :'price_before_discount' => :'Float',
        :'count' => :'Integer',
        :'vat' => :'OrderVatType',
        :'shop_sku' => :'String',
        :'subsidy' => :'Float',
        :'partner_warehouse_id' => :'String',
        :'promos' => :'Array<OrderItemPromoDTO>',
        :'instances' => :'Array<OrderItemInstanceDTO>',
        :'details' => :'Array<OrderItemDetailDTO>',
        :'subsidies' => :'Array<OrderItemSubsidyDTO>',
        :'required_instance_types' => :'Array<OrderItemInstanceType>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'promos',
        :'instances',
        :'details',
        :'subsidies',
        :'required_instance_types'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrderItemDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrderItemDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'offer_id')
        self.offer_id = attributes[:'offer_id']
      end

      if attributes.key?(:'offer_name')
        self.offer_name = attributes[:'offer_name']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'buyer_price')
        self.buyer_price = attributes[:'buyer_price']
      end

      if attributes.key?(:'buyer_price_before_discount')
        self.buyer_price_before_discount = attributes[:'buyer_price_before_discount']
      end

      if attributes.key?(:'price_before_discount')
        self.price_before_discount = attributes[:'price_before_discount']
      end

      if attributes.key?(:'count')
        self.count = attributes[:'count']
      end

      if attributes.key?(:'vat')
        self.vat = attributes[:'vat']
      end

      if attributes.key?(:'shop_sku')
        self.shop_sku = attributes[:'shop_sku']
      end

      if attributes.key?(:'subsidy')
        self.subsidy = attributes[:'subsidy']
      end

      if attributes.key?(:'partner_warehouse_id')
        self.partner_warehouse_id = attributes[:'partner_warehouse_id']
      end

      if attributes.key?(:'promos')
        if (value = attributes[:'promos']).is_a?(Array)
          self.promos = value
        end
      end

      if attributes.key?(:'instances')
        if (value = attributes[:'instances']).is_a?(Array)
          self.instances = value
        end
      end

      if attributes.key?(:'details')
        if (value = attributes[:'details']).is_a?(Array)
          self.details = value
        end
      end

      if attributes.key?(:'subsidies')
        if (value = attributes[:'subsidies']).is_a?(Array)
          self.subsidies = value
        end
      end

      if attributes.key?(:'required_instance_types')
        if (value = attributes[:'required_instance_types']).is_a?(Array)
          self.required_instance_types = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@offer_id.nil? && @offer_id.to_s.length > 255
        invalid_properties.push('invalid value for "offer_id", the character length must be smaller than or equal to 255.')
      end

      if !@offer_id.nil? && @offer_id.to_s.length < 1
        invalid_properties.push('invalid value for "offer_id", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if !@offer_id.nil? && @offer_id !~ pattern
        invalid_properties.push("invalid value for \"offer_id\", must conform to the pattern #{pattern}.")
      end

      if !@shop_sku.nil? && @shop_sku.to_s.length > 255
        invalid_properties.push('invalid value for "shop_sku", the character length must be smaller than or equal to 255.')
      end

      if !@shop_sku.nil? && @shop_sku.to_s.length < 1
        invalid_properties.push('invalid value for "shop_sku", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if !@shop_sku.nil? && @shop_sku !~ pattern
        invalid_properties.push("invalid value for \"shop_sku\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@offer_id.nil? && @offer_id.to_s.length > 255
      return false if !@offer_id.nil? && @offer_id.to_s.length < 1
      return false if !@offer_id.nil? && @offer_id !~ Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      return false if !@shop_sku.nil? && @shop_sku.to_s.length > 255
      return false if !@shop_sku.nil? && @shop_sku.to_s.length < 1
      return false if !@shop_sku.nil? && @shop_sku !~ Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] offer_id Value to be assigned
    def offer_id=(offer_id)
      if offer_id.nil?
        fail ArgumentError, 'offer_id cannot be nil'
      end

      if offer_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "offer_id", the character length must be smaller than or equal to 255.'
      end

      if offer_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "offer_id", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if offer_id !~ pattern
        fail ArgumentError, "invalid value for \"offer_id\", must conform to the pattern #{pattern}."
      end

      @offer_id = offer_id
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_sku Value to be assigned
    def shop_sku=(shop_sku)
      if shop_sku.nil?
        fail ArgumentError, 'shop_sku cannot be nil'
      end

      if shop_sku.to_s.length > 255
        fail ArgumentError, 'invalid value for "shop_sku", the character length must be smaller than or equal to 255.'
      end

      if shop_sku.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_sku", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if shop_sku !~ pattern
        fail ArgumentError, "invalid value for \"shop_sku\", must conform to the pattern #{pattern}."
      end

      @shop_sku = shop_sku
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          offer_id == o.offer_id &&
          offer_name == o.offer_name &&
          price == o.price &&
          buyer_price == o.buyer_price &&
          buyer_price_before_discount == o.buyer_price_before_discount &&
          price_before_discount == o.price_before_discount &&
          count == o.count &&
          vat == o.vat &&
          shop_sku == o.shop_sku &&
          subsidy == o.subsidy &&
          partner_warehouse_id == o.partner_warehouse_id &&
          promos == o.promos &&
          instances == o.instances &&
          details == o.details &&
          subsidies == o.subsidies &&
          required_instance_types == o.required_instance_types
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, offer_id, offer_name, price, buyer_price, buyer_price_before_discount, price_before_discount, count, vat, shop_sku, subsidy, partner_warehouse_id, promos, instances, details, subsidies, required_instance_types].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
