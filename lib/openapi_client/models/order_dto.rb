=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Заказ.
  class OrderDTO
    # Идентификатор заказа.
    attr_accessor :id

    attr_accessor :status

    attr_accessor :substatus

    attr_accessor :creation_date

    attr_accessor :updated_at

    attr_accessor :currency

    # Платеж покупателя. 
    attr_accessor :items_total

    # Стоимость доставки. 
    attr_accessor :delivery_total

    # {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
    attr_accessor :buyer_items_total

    # {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
    attr_accessor :buyer_total

    # Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
    attr_accessor :buyer_items_total_before_discount

    # {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). 
    attr_accessor :buyer_total_before_discount

    attr_accessor :payment_type

    attr_accessor :payment_method

    # Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
    attr_accessor :fake

    # Список товаров в заказе.
    attr_accessor :items

    # Список субсидий по типам.
    attr_accessor :subsidies

    attr_accessor :delivery

    attr_accessor :buyer

    # Комментарий к заказу.
    attr_accessor :notes

    attr_accessor :tax_system

    # **Только для модели DBS**  Запрошена ли отмена. 
    attr_accessor :cancel_requested

    attr_accessor :expiry_date

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'status' => :'status',
        :'substatus' => :'substatus',
        :'creation_date' => :'creationDate',
        :'updated_at' => :'updatedAt',
        :'currency' => :'currency',
        :'items_total' => :'itemsTotal',
        :'delivery_total' => :'deliveryTotal',
        :'buyer_items_total' => :'buyerItemsTotal',
        :'buyer_total' => :'buyerTotal',
        :'buyer_items_total_before_discount' => :'buyerItemsTotalBeforeDiscount',
        :'buyer_total_before_discount' => :'buyerTotalBeforeDiscount',
        :'payment_type' => :'paymentType',
        :'payment_method' => :'paymentMethod',
        :'fake' => :'fake',
        :'items' => :'items',
        :'subsidies' => :'subsidies',
        :'delivery' => :'delivery',
        :'buyer' => :'buyer',
        :'notes' => :'notes',
        :'tax_system' => :'taxSystem',
        :'cancel_requested' => :'cancelRequested',
        :'expiry_date' => :'expiryDate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'status' => :'OrderStatusType',
        :'substatus' => :'OrderSubstatusType',
        :'creation_date' => :'String',
        :'updated_at' => :'String',
        :'currency' => :'CurrencyType',
        :'items_total' => :'Float',
        :'delivery_total' => :'Float',
        :'buyer_items_total' => :'Float',
        :'buyer_total' => :'Float',
        :'buyer_items_total_before_discount' => :'Float',
        :'buyer_total_before_discount' => :'Float',
        :'payment_type' => :'OrderPaymentType',
        :'payment_method' => :'OrderPaymentMethodType',
        :'fake' => :'Boolean',
        :'items' => :'Array<OrderItemDTO>',
        :'subsidies' => :'Array<OrderSubsidyDTO>',
        :'delivery' => :'OrderDeliveryDTO',
        :'buyer' => :'OrderBuyerDTO',
        :'notes' => :'String',
        :'tax_system' => :'OrderTaxSystemType',
        :'cancel_requested' => :'Boolean',
        :'expiry_date' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'subsidies',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrderDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrderDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'substatus')
        self.substatus = attributes[:'substatus']
      end

      if attributes.key?(:'creation_date')
        self.creation_date = attributes[:'creation_date']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'items_total')
        self.items_total = attributes[:'items_total']
      end

      if attributes.key?(:'delivery_total')
        self.delivery_total = attributes[:'delivery_total']
      end

      if attributes.key?(:'buyer_items_total')
        self.buyer_items_total = attributes[:'buyer_items_total']
      end

      if attributes.key?(:'buyer_total')
        self.buyer_total = attributes[:'buyer_total']
      end

      if attributes.key?(:'buyer_items_total_before_discount')
        self.buyer_items_total_before_discount = attributes[:'buyer_items_total_before_discount']
      end

      if attributes.key?(:'buyer_total_before_discount')
        self.buyer_total_before_discount = attributes[:'buyer_total_before_discount']
      end

      if attributes.key?(:'payment_type')
        self.payment_type = attributes[:'payment_type']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'fake')
        self.fake = attributes[:'fake']
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      else
        self.items = nil
      end

      if attributes.key?(:'subsidies')
        if (value = attributes[:'subsidies']).is_a?(Array)
          self.subsidies = value
        end
      end

      if attributes.key?(:'delivery')
        self.delivery = attributes[:'delivery']
      end

      if attributes.key?(:'buyer')
        self.buyer = attributes[:'buyer']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'tax_system')
        self.tax_system = attributes[:'tax_system']
      end

      if attributes.key?(:'cancel_requested')
        self.cancel_requested = attributes[:'cancel_requested']
      end

      if attributes.key?(:'expiry_date')
        self.expiry_date = attributes[:'expiry_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @items.nil?
        invalid_properties.push('invalid value for "items", items cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @items.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          status == o.status &&
          substatus == o.substatus &&
          creation_date == o.creation_date &&
          updated_at == o.updated_at &&
          currency == o.currency &&
          items_total == o.items_total &&
          delivery_total == o.delivery_total &&
          buyer_items_total == o.buyer_items_total &&
          buyer_total == o.buyer_total &&
          buyer_items_total_before_discount == o.buyer_items_total_before_discount &&
          buyer_total_before_discount == o.buyer_total_before_discount &&
          payment_type == o.payment_type &&
          payment_method == o.payment_method &&
          fake == o.fake &&
          items == o.items &&
          subsidies == o.subsidies &&
          delivery == o.delivery &&
          buyer == o.buyer &&
          notes == o.notes &&
          tax_system == o.tax_system &&
          cancel_requested == o.cancel_requested &&
          expiry_date == o.expiry_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, status, substatus, creation_date, updated_at, currency, items_total, delivery_total, buyer_items_total, buyer_total, buyer_items_total_before_discount, buyer_total_before_discount, payment_type, payment_method, fake, items, subsidies, delivery, buyer, notes, tax_system, cancel_requested, expiry_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
