=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Параметры товара, для которого нужно рассчитать стоимость услуг.
  class CalculateTariffsOfferDTO
    # Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
    attr_accessor :category_id

    # Цена на товар в рублях.
    attr_accessor :price

    # Длина товара в сантиметрах.
    attr_accessor :length

    # Ширина товара в сантиметрах.
    attr_accessor :width

    # Высота товара в сантиметрах.
    attr_accessor :height

    # Вес товара в килограммах.
    attr_accessor :weight

    # Квант продажи — количество единиц товара в одном товарном предложении.
    attr_accessor :quantity

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'category_id' => :'categoryId',
        :'price' => :'price',
        :'length' => :'length',
        :'width' => :'width',
        :'height' => :'height',
        :'weight' => :'weight',
        :'quantity' => :'quantity'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'category_id' => :'Integer',
        :'price' => :'Float',
        :'length' => :'Float',
        :'width' => :'Float',
        :'height' => :'Float',
        :'weight' => :'Float',
        :'quantity' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CalculateTariffsOfferDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CalculateTariffsOfferDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'category_id')
        self.category_id = attributes[:'category_id']
      else
        self.category_id = nil
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      else
        self.price = nil
      end

      if attributes.key?(:'length')
        self.length = attributes[:'length']
      else
        self.length = nil
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      else
        self.width = nil
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      else
        self.height = nil
      end

      if attributes.key?(:'weight')
        self.weight = attributes[:'weight']
      else
        self.weight = nil
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      else
        self.quantity = 1
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @category_id.nil?
        invalid_properties.push('invalid value for "category_id", category_id cannot be nil.')
      end

      if @category_id <= 0
        invalid_properties.push('invalid value for "category_id", must be greater than 0.')
      end

      if @price.nil?
        invalid_properties.push('invalid value for "price", price cannot be nil.')
      end

      if @price <= 0
        invalid_properties.push('invalid value for "price", must be greater than 0.')
      end

      if @length.nil?
        invalid_properties.push('invalid value for "length", length cannot be nil.')
      end

      if @length <= 0
        invalid_properties.push('invalid value for "length", must be greater than 0.')
      end

      if @width.nil?
        invalid_properties.push('invalid value for "width", width cannot be nil.')
      end

      if @width <= 0
        invalid_properties.push('invalid value for "width", must be greater than 0.')
      end

      if @height.nil?
        invalid_properties.push('invalid value for "height", height cannot be nil.')
      end

      if @height <= 0
        invalid_properties.push('invalid value for "height", must be greater than 0.')
      end

      if @weight.nil?
        invalid_properties.push('invalid value for "weight", weight cannot be nil.')
      end

      if @weight <= 0
        invalid_properties.push('invalid value for "weight", must be greater than 0.')
      end

      if !@quantity.nil? && @quantity < 1
        invalid_properties.push('invalid value for "quantity", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @category_id.nil?
      return false if @category_id <= 0
      return false if @price.nil?
      return false if @price <= 0
      return false if @length.nil?
      return false if @length <= 0
      return false if @width.nil?
      return false if @width <= 0
      return false if @height.nil?
      return false if @height <= 0
      return false if @weight.nil?
      return false if @weight <= 0
      return false if !@quantity.nil? && @quantity < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] category_id Value to be assigned
    def category_id=(category_id)
      if category_id.nil?
        fail ArgumentError, 'category_id cannot be nil'
      end

      if category_id <= 0
        fail ArgumentError, 'invalid value for "category_id", must be greater than 0.'
      end

      @category_id = category_id
    end

    # Custom attribute writer method with validation
    # @param [Object] price Value to be assigned
    def price=(price)
      if price.nil?
        fail ArgumentError, 'price cannot be nil'
      end

      if price <= 0
        fail ArgumentError, 'invalid value for "price", must be greater than 0.'
      end

      @price = price
    end

    # Custom attribute writer method with validation
    # @param [Object] length Value to be assigned
    def length=(length)
      if length.nil?
        fail ArgumentError, 'length cannot be nil'
      end

      if length <= 0
        fail ArgumentError, 'invalid value for "length", must be greater than 0.'
      end

      @length = length
    end

    # Custom attribute writer method with validation
    # @param [Object] width Value to be assigned
    def width=(width)
      if width.nil?
        fail ArgumentError, 'width cannot be nil'
      end

      if width <= 0
        fail ArgumentError, 'invalid value for "width", must be greater than 0.'
      end

      @width = width
    end

    # Custom attribute writer method with validation
    # @param [Object] height Value to be assigned
    def height=(height)
      if height.nil?
        fail ArgumentError, 'height cannot be nil'
      end

      if height <= 0
        fail ArgumentError, 'invalid value for "height", must be greater than 0.'
      end

      @height = height
    end

    # Custom attribute writer method with validation
    # @param [Object] weight Value to be assigned
    def weight=(weight)
      if weight.nil?
        fail ArgumentError, 'weight cannot be nil'
      end

      if weight <= 0
        fail ArgumentError, 'invalid value for "weight", must be greater than 0.'
      end

      @weight = weight
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)
      if quantity.nil?
        fail ArgumentError, 'quantity cannot be nil'
      end

      if quantity < 1
        fail ArgumentError, 'invalid value for "quantity", must be greater than or equal to 1.'
      end

      @quantity = quantity
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          category_id == o.category_id &&
          price == o.price &&
          length == o.length &&
          width == o.width &&
          height == o.height &&
          weight == o.weight &&
          quantity == o.quantity
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [category_id, price, length, width, height, weight, quantity].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
