=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Информация об отгрузке.
  class ShipmentDTO
    # Идентификатор отгрузки.
    attr_accessor :id

    # Начало планового интервала отгрузки.
    attr_accessor :plan_interval_from

    # Конец планового интервала отгрузки.
    attr_accessor :plan_interval_to

    attr_accessor :shipment_type

    attr_accessor :warehouse

    attr_accessor :warehouse_to

    # Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.
    attr_accessor :external_id

    attr_accessor :delivery_service

    attr_accessor :pallets_count

    # Идентификаторы заказов в отгрузке.
    attr_accessor :order_ids

    # Количество заказов, которое Маркет запланировал к отгрузке.
    attr_accessor :draft_count

    # Количество заказов, которое Маркет подтвердил к отгрузке.
    attr_accessor :planned_count

    # Количество заказов, принятых в сортировочном центре или пункте приема.
    attr_accessor :fact_count

    attr_accessor :current_status

    # Доступные действия над отгрузкой.
    attr_accessor :available_actions

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'plan_interval_from' => :'planIntervalFrom',
        :'plan_interval_to' => :'planIntervalTo',
        :'shipment_type' => :'shipmentType',
        :'warehouse' => :'warehouse',
        :'warehouse_to' => :'warehouseTo',
        :'external_id' => :'externalId',
        :'delivery_service' => :'deliveryService',
        :'pallets_count' => :'palletsCount',
        :'order_ids' => :'orderIds',
        :'draft_count' => :'draftCount',
        :'planned_count' => :'plannedCount',
        :'fact_count' => :'factCount',
        :'current_status' => :'currentStatus',
        :'available_actions' => :'availableActions'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'plan_interval_from' => :'Time',
        :'plan_interval_to' => :'Time',
        :'shipment_type' => :'ShipmentType',
        :'warehouse' => :'PartnerShipmentWarehouseDTO',
        :'warehouse_to' => :'PartnerShipmentWarehouseDTO',
        :'external_id' => :'String',
        :'delivery_service' => :'DeliveryServiceDTO',
        :'pallets_count' => :'PalletsCountDTO',
        :'order_ids' => :'Array<Integer>',
        :'draft_count' => :'Integer',
        :'planned_count' => :'Integer',
        :'fact_count' => :'Integer',
        :'current_status' => :'ShipmentStatusChangeDTO',
        :'available_actions' => :'Array<ShipmentActionType>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'BaseShipmentDTO',
      :'ExtensionShipmentDTO'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ShipmentDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ShipmentDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'plan_interval_from')
        self.plan_interval_from = attributes[:'plan_interval_from']
      end

      if attributes.key?(:'plan_interval_to')
        self.plan_interval_to = attributes[:'plan_interval_to']
      end

      if attributes.key?(:'shipment_type')
        self.shipment_type = attributes[:'shipment_type']
      end

      if attributes.key?(:'warehouse')
        self.warehouse = attributes[:'warehouse']
      end

      if attributes.key?(:'warehouse_to')
        self.warehouse_to = attributes[:'warehouse_to']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'delivery_service')
        self.delivery_service = attributes[:'delivery_service']
      end

      if attributes.key?(:'pallets_count')
        self.pallets_count = attributes[:'pallets_count']
      end

      if attributes.key?(:'order_ids')
        if (value = attributes[:'order_ids']).is_a?(Array)
          self.order_ids = value
        end
      else
        self.order_ids = nil
      end

      if attributes.key?(:'draft_count')
        self.draft_count = attributes[:'draft_count']
      end

      if attributes.key?(:'planned_count')
        self.planned_count = attributes[:'planned_count']
      end

      if attributes.key?(:'fact_count')
        self.fact_count = attributes[:'fact_count']
      end

      if attributes.key?(:'current_status')
        self.current_status = attributes[:'current_status']
      end

      if attributes.key?(:'available_actions')
        if (value = attributes[:'available_actions']).is_a?(Array)
          self.available_actions = value
        end
      else
        self.available_actions = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @order_ids.nil?
        invalid_properties.push('invalid value for "order_ids", order_ids cannot be nil.')
      end

      if @available_actions.nil?
        invalid_properties.push('invalid value for "available_actions", available_actions cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @order_ids.nil?
      return false if @available_actions.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] order_ids Value to be assigned
    def order_ids=(order_ids)
      if order_ids.nil?
        fail ArgumentError, 'order_ids cannot be nil'
      end

      @order_ids = order_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] available_actions Value to be assigned
    def available_actions=(available_actions)
      if available_actions.nil?
        fail ArgumentError, 'available_actions cannot be nil'
      end

      @available_actions = available_actions
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          plan_interval_from == o.plan_interval_from &&
          plan_interval_to == o.plan_interval_to &&
          shipment_type == o.shipment_type &&
          warehouse == o.warehouse &&
          warehouse_to == o.warehouse_to &&
          external_id == o.external_id &&
          delivery_service == o.delivery_service &&
          pallets_count == o.pallets_count &&
          order_ids == o.order_ids &&
          draft_count == o.draft_count &&
          planned_count == o.planned_count &&
          fact_count == o.fact_count &&
          current_status == o.current_status &&
          available_actions == o.available_actions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, plan_interval_from, plan_interval_to, shipment_type, warehouse, warehouse_to, external_id, delivery_service, pallets_count, order_ids, draft_count, planned_count, fact_count, current_status, available_actions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
