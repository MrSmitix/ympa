=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Информация о товарах в каталоге.
  class MappingsOfferDTO
    # Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
    attr_accessor :name

    # Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    attr_accessor :shop_sku

    # Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
    attr_accessor :category

    # Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
    attr_accessor :vendor

    # Артикул товара от производителя.
    attr_accessor :vendor_code

    # Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
    attr_accessor :description

    # Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    attr_accessor :id

    # Идентификатор фида.
    attr_accessor :feed_id

    # Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
    attr_accessor :barcodes

    # URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
    attr_accessor :urls

    # Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. 
    attr_accessor :pictures

    # Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
    attr_accessor :manufacturer

    # Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
    attr_accessor :manufacturer_countries

    # Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
    attr_accessor :min_shipment

    # Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
    attr_accessor :transport_unit_size

    # Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
    attr_accessor :quantum_of_supply

    # Срок, за который продавец поставляет товары на склад, в днях.
    attr_accessor :delivery_duration_days

    # Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
    attr_accessor :box_count

    # Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
    attr_accessor :customs_commodity_codes

    attr_accessor :weight_dimensions

    # Дни недели, в которые продавец поставляет товары на склад.
    attr_accessor :supply_schedule_days

    # {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
    attr_accessor :shelf_life_days

    # {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
    attr_accessor :life_time_days

    # Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
    attr_accessor :guarantee_period_days

    attr_accessor :processing_state

    attr_accessor :availability

    attr_accessor :shelf_life

    attr_accessor :life_time

    attr_accessor :guarantee_period

    # Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
    attr_accessor :certificate

    # Цена на товар в рублях.
    attr_accessor :price

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'shop_sku' => :'shopSku',
        :'category' => :'category',
        :'vendor' => :'vendor',
        :'vendor_code' => :'vendorCode',
        :'description' => :'description',
        :'id' => :'id',
        :'feed_id' => :'feedId',
        :'barcodes' => :'barcodes',
        :'urls' => :'urls',
        :'pictures' => :'pictures',
        :'manufacturer' => :'manufacturer',
        :'manufacturer_countries' => :'manufacturerCountries',
        :'min_shipment' => :'minShipment',
        :'transport_unit_size' => :'transportUnitSize',
        :'quantum_of_supply' => :'quantumOfSupply',
        :'delivery_duration_days' => :'deliveryDurationDays',
        :'box_count' => :'boxCount',
        :'customs_commodity_codes' => :'customsCommodityCodes',
        :'weight_dimensions' => :'weightDimensions',
        :'supply_schedule_days' => :'supplyScheduleDays',
        :'shelf_life_days' => :'shelfLifeDays',
        :'life_time_days' => :'lifeTimeDays',
        :'guarantee_period_days' => :'guaranteePeriodDays',
        :'processing_state' => :'processingState',
        :'availability' => :'availability',
        :'shelf_life' => :'shelfLife',
        :'life_time' => :'lifeTime',
        :'guarantee_period' => :'guaranteePeriod',
        :'certificate' => :'certificate',
        :'price' => :'price'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'shop_sku' => :'String',
        :'category' => :'String',
        :'vendor' => :'String',
        :'vendor_code' => :'String',
        :'description' => :'String',
        :'id' => :'String',
        :'feed_id' => :'Integer',
        :'barcodes' => :'Array<String>',
        :'urls' => :'Array<String>',
        :'pictures' => :'Array<String>',
        :'manufacturer' => :'String',
        :'manufacturer_countries' => :'Array<String>',
        :'min_shipment' => :'Integer',
        :'transport_unit_size' => :'Integer',
        :'quantum_of_supply' => :'Integer',
        :'delivery_duration_days' => :'Integer',
        :'box_count' => :'Integer',
        :'customs_commodity_codes' => :'Array<String>',
        :'weight_dimensions' => :'OfferWeightDimensionsDTO',
        :'supply_schedule_days' => :'Array<DayOfWeekType>',
        :'shelf_life_days' => :'Integer',
        :'life_time_days' => :'Integer',
        :'guarantee_period_days' => :'Integer',
        :'processing_state' => :'OfferProcessingStateDTO',
        :'availability' => :'OfferAvailabilityStatusType',
        :'shelf_life' => :'TimePeriodDTO',
        :'life_time' => :'TimePeriodDTO',
        :'guarantee_period' => :'TimePeriodDTO',
        :'certificate' => :'String',
        :'price' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'barcodes',
        :'urls',
        :'pictures',
        :'manufacturer_countries',
        :'customs_commodity_codes',
        :'supply_schedule_days',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'MappingsOfferInfoDTO'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::MappingsOfferDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::MappingsOfferDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'shop_sku')
        self.shop_sku = attributes[:'shop_sku']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.key?(:'vendor_code')
        self.vendor_code = attributes[:'vendor_code']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'feed_id')
        self.feed_id = attributes[:'feed_id']
      end

      if attributes.key?(:'barcodes')
        if (value = attributes[:'barcodes']).is_a?(Array)
          self.barcodes = value
        end
      end

      if attributes.key?(:'urls')
        if (value = attributes[:'urls']).is_a?(Array)
          self.urls = value
        end
      end

      if attributes.key?(:'pictures')
        if (value = attributes[:'pictures']).is_a?(Array)
          self.pictures = value
        end
      end

      if attributes.key?(:'manufacturer')
        self.manufacturer = attributes[:'manufacturer']
      end

      if attributes.key?(:'manufacturer_countries')
        if (value = attributes[:'manufacturer_countries']).is_a?(Array)
          self.manufacturer_countries = value
        end
      end

      if attributes.key?(:'min_shipment')
        self.min_shipment = attributes[:'min_shipment']
      end

      if attributes.key?(:'transport_unit_size')
        self.transport_unit_size = attributes[:'transport_unit_size']
      end

      if attributes.key?(:'quantum_of_supply')
        self.quantum_of_supply = attributes[:'quantum_of_supply']
      end

      if attributes.key?(:'delivery_duration_days')
        self.delivery_duration_days = attributes[:'delivery_duration_days']
      end

      if attributes.key?(:'box_count')
        self.box_count = attributes[:'box_count']
      end

      if attributes.key?(:'customs_commodity_codes')
        if (value = attributes[:'customs_commodity_codes']).is_a?(Array)
          self.customs_commodity_codes = value
        end
      end

      if attributes.key?(:'weight_dimensions')
        self.weight_dimensions = attributes[:'weight_dimensions']
      end

      if attributes.key?(:'supply_schedule_days')
        if (value = attributes[:'supply_schedule_days']).is_a?(Array)
          self.supply_schedule_days = value
        end
      end

      if attributes.key?(:'shelf_life_days')
        self.shelf_life_days = attributes[:'shelf_life_days']
      end

      if attributes.key?(:'life_time_days')
        self.life_time_days = attributes[:'life_time_days']
      end

      if attributes.key?(:'guarantee_period_days')
        self.guarantee_period_days = attributes[:'guarantee_period_days']
      end

      if attributes.key?(:'processing_state')
        self.processing_state = attributes[:'processing_state']
      end

      if attributes.key?(:'availability')
        self.availability = attributes[:'availability']
      end

      if attributes.key?(:'shelf_life')
        self.shelf_life = attributes[:'shelf_life']
      end

      if attributes.key?(:'life_time')
        self.life_time = attributes[:'life_time']
      end

      if attributes.key?(:'guarantee_period')
        self.guarantee_period = attributes[:'guarantee_period']
      end

      if attributes.key?(:'certificate')
        self.certificate = attributes[:'certificate']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@name.nil? && @name.to_s.length > 256
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 256.')
      end

      if !@shop_sku.nil? && @shop_sku.to_s.length > 255
        invalid_properties.push('invalid value for "shop_sku", the character length must be smaller than or equal to 255.')
      end

      if !@shop_sku.nil? && @shop_sku.to_s.length < 1
        invalid_properties.push('invalid value for "shop_sku", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if !@shop_sku.nil? && @shop_sku !~ pattern
        invalid_properties.push("invalid value for \"shop_sku\", must conform to the pattern #{pattern}.")
      end

      if !@description.nil? && @description.to_s.length > 6000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 6000.')
      end

      if !@id.nil? && @id.to_s.length > 255
        invalid_properties.push('invalid value for "id", the character length must be smaller than or equal to 255.')
      end

      if !@id.nil? && @id.to_s.length < 1
        invalid_properties.push('invalid value for "id", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if !@id.nil? && @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@name.nil? && @name.to_s.length > 256
      return false if !@shop_sku.nil? && @shop_sku.to_s.length > 255
      return false if !@shop_sku.nil? && @shop_sku.to_s.length < 1
      return false if !@shop_sku.nil? && @shop_sku !~ Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      return false if !@description.nil? && @description.to_s.length > 6000
      return false if !@id.nil? && @id.to_s.length > 255
      return false if !@id.nil? && @id.to_s.length < 1
      return false if !@id.nil? && @id !~ Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 256
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 256.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_sku Value to be assigned
    def shop_sku=(shop_sku)
      if shop_sku.nil?
        fail ArgumentError, 'shop_sku cannot be nil'
      end

      if shop_sku.to_s.length > 255
        fail ArgumentError, 'invalid value for "shop_sku", the character length must be smaller than or equal to 255.'
      end

      if shop_sku.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_sku", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if shop_sku !~ pattern
        fail ArgumentError, "invalid value for \"shop_sku\", must conform to the pattern #{pattern}."
      end

      @shop_sku = shop_sku
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 6000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 6000.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      if id.to_s.length > 255
        fail ArgumentError, 'invalid value for "id", the character length must be smaller than or equal to 255.'
      end

      if id.to_s.length < 1
        fail ArgumentError, 'invalid value for "id", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if id !~ pattern
        fail ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}."
      end

      @id = id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          shop_sku == o.shop_sku &&
          category == o.category &&
          vendor == o.vendor &&
          vendor_code == o.vendor_code &&
          description == o.description &&
          id == o.id &&
          feed_id == o.feed_id &&
          barcodes == o.barcodes &&
          urls == o.urls &&
          pictures == o.pictures &&
          manufacturer == o.manufacturer &&
          manufacturer_countries == o.manufacturer_countries &&
          min_shipment == o.min_shipment &&
          transport_unit_size == o.transport_unit_size &&
          quantum_of_supply == o.quantum_of_supply &&
          delivery_duration_days == o.delivery_duration_days &&
          box_count == o.box_count &&
          customs_commodity_codes == o.customs_commodity_codes &&
          weight_dimensions == o.weight_dimensions &&
          supply_schedule_days == o.supply_schedule_days &&
          shelf_life_days == o.shelf_life_days &&
          life_time_days == o.life_time_days &&
          guarantee_period_days == o.guarantee_period_days &&
          processing_state == o.processing_state &&
          availability == o.availability &&
          shelf_life == o.shelf_life &&
          life_time == o.life_time &&
          guarantee_period == o.guarantee_period &&
          certificate == o.certificate &&
          price == o.price
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, shop_sku, category, vendor, vendor_code, description, id, feed_id, barcodes, urls, pictures, manufacturer, manufacturer_countries, min_shipment, transport_unit_size, quantum_of_supply, delivery_duration_days, box_count, customs_commodity_codes, weight_dimensions, supply_schedule_days, shelf_life_days, life_time_days, guarantee_period_days, processing_state, availability, shelf_life, life_time, guarantee_period, certificate, price].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
