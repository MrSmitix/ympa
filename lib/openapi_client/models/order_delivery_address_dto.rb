=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Адрес доставки.  Указывается, если `type=DELIVERY`, `type=POST` или `type=PICKUP` (адрес пункта выдачи). 
  class OrderDeliveryAddressDTO
    # Страна.  Обязательный параметр. 
    attr_accessor :country

    # Почтовый индекс.  Указывается, если выбрана доставка почтой (`delivery type=POST`). 
    attr_accessor :postcode

    # Город или населенный пункт.  Обязательный параметр. 
    attr_accessor :city

    # Район.
    attr_accessor :district

    # Станция метро.
    attr_accessor :subway

    # Улица.  Обязательный параметр. 
    attr_accessor :street

    # Дом или владение.  Обязательный параметр. 
    attr_accessor :house

    # Корпус или строение.
    attr_accessor :block

    # Подъезд.
    attr_accessor :entrance

    # Код домофона.
    attr_accessor :entryphone

    # Этаж.
    attr_accessor :floor

    # Квартира или офис.
    attr_accessor :apartment

    # Телефон получателя заказа.  Обязательный параметр. 
    attr_accessor :phone

    # Фамилия, имя и отчество получателя заказа.  Обязательный параметр. 
    attr_accessor :recipient

    attr_accessor :gps

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'country' => :'country',
        :'postcode' => :'postcode',
        :'city' => :'city',
        :'district' => :'district',
        :'subway' => :'subway',
        :'street' => :'street',
        :'house' => :'house',
        :'block' => :'block',
        :'entrance' => :'entrance',
        :'entryphone' => :'entryphone',
        :'floor' => :'floor',
        :'apartment' => :'apartment',
        :'phone' => :'phone',
        :'recipient' => :'recipient',
        :'gps' => :'gps'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'country' => :'String',
        :'postcode' => :'String',
        :'city' => :'String',
        :'district' => :'String',
        :'subway' => :'String',
        :'street' => :'String',
        :'house' => :'String',
        :'block' => :'String',
        :'entrance' => :'String',
        :'entryphone' => :'String',
        :'floor' => :'String',
        :'apartment' => :'String',
        :'phone' => :'String',
        :'recipient' => :'String',
        :'gps' => :'GpsDTO'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrderDeliveryAddressDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrderDeliveryAddressDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'district')
        self.district = attributes[:'district']
      end

      if attributes.key?(:'subway')
        self.subway = attributes[:'subway']
      end

      if attributes.key?(:'street')
        self.street = attributes[:'street']
      end

      if attributes.key?(:'house')
        self.house = attributes[:'house']
      end

      if attributes.key?(:'block')
        self.block = attributes[:'block']
      end

      if attributes.key?(:'entrance')
        self.entrance = attributes[:'entrance']
      end

      if attributes.key?(:'entryphone')
        self.entryphone = attributes[:'entryphone']
      end

      if attributes.key?(:'floor')
        self.floor = attributes[:'floor']
      end

      if attributes.key?(:'apartment')
        self.apartment = attributes[:'apartment']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'recipient')
        self.recipient = attributes[:'recipient']
      end

      if attributes.key?(:'gps')
        self.gps = attributes[:'gps']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          country == o.country &&
          postcode == o.postcode &&
          city == o.city &&
          district == o.district &&
          subway == o.subway &&
          street == o.street &&
          house == o.house &&
          block == o.block &&
          entrance == o.entrance &&
          entryphone == o.entryphone &&
          floor == o.floor &&
          apartment == o.apartment &&
          phone == o.phone &&
          recipient == o.recipient &&
          gps == o.gps
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [country, postcode, city, district, subway, street, house, block, entrance, entryphone, floor, apartment, phone, recipient, gps].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
