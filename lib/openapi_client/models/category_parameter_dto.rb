=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Характеристика товара.
  class CategoryParameterDTO
    # Идентификатор характеристики.
    attr_accessor :id

    # Название характеристики.
    attr_accessor :name

    attr_accessor :type

    attr_accessor :unit

    # Описание характеристики.
    attr_accessor :description

    # Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
    attr_accessor :recommendation_types

    # Обязательность характеристики.
    attr_accessor :required

    # Используется ли характеристика в фильтре.
    attr_accessor :filtering

    # Является ли характеристика особенностью варианта.
    attr_accessor :distinctive

    # Можно ли передать сразу несколько значений.
    attr_accessor :multivalue

    # Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
    attr_accessor :allow_custom_values

    # Список допустимых значений параметра. Только для характеристик типа `ENUM`.
    attr_accessor :values

    attr_accessor :constraints

    # Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.
    attr_accessor :value_restrictions

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'type' => :'type',
        :'unit' => :'unit',
        :'description' => :'description',
        :'recommendation_types' => :'recommendationTypes',
        :'required' => :'required',
        :'filtering' => :'filtering',
        :'distinctive' => :'distinctive',
        :'multivalue' => :'multivalue',
        :'allow_custom_values' => :'allowCustomValues',
        :'values' => :'values',
        :'constraints' => :'constraints',
        :'value_restrictions' => :'valueRestrictions'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'type' => :'ParameterType',
        :'unit' => :'CategoryParameterUnitDTO',
        :'description' => :'String',
        :'recommendation_types' => :'Array<OfferCardRecommendationType>',
        :'required' => :'Boolean',
        :'filtering' => :'Boolean',
        :'distinctive' => :'Boolean',
        :'multivalue' => :'Boolean',
        :'allow_custom_values' => :'Boolean',
        :'values' => :'Array<ParameterValueOptionDTO>',
        :'constraints' => :'ParameterValueConstraintsDTO',
        :'value_restrictions' => :'Array<ValueRestrictionDTO>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'recommendation_types',
        :'values',
        :'value_restrictions'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CategoryParameterDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CategoryParameterDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'unit')
        self.unit = attributes[:'unit']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'recommendation_types')
        if (value = attributes[:'recommendation_types']).is_a?(Array)
          self.recommendation_types = value
        end
      end

      if attributes.key?(:'required')
        self.required = attributes[:'required']
      else
        self.required = nil
      end

      if attributes.key?(:'filtering')
        self.filtering = attributes[:'filtering']
      else
        self.filtering = nil
      end

      if attributes.key?(:'distinctive')
        self.distinctive = attributes[:'distinctive']
      else
        self.distinctive = nil
      end

      if attributes.key?(:'multivalue')
        self.multivalue = attributes[:'multivalue']
      else
        self.multivalue = nil
      end

      if attributes.key?(:'allow_custom_values')
        self.allow_custom_values = attributes[:'allow_custom_values']
      else
        self.allow_custom_values = nil
      end

      if attributes.key?(:'values')
        if (value = attributes[:'values']).is_a?(Array)
          self.values = value
        end
      end

      if attributes.key?(:'constraints')
        self.constraints = attributes[:'constraints']
      end

      if attributes.key?(:'value_restrictions')
        if (value = attributes[:'value_restrictions']).is_a?(Array)
          self.value_restrictions = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @required.nil?
        invalid_properties.push('invalid value for "required", required cannot be nil.')
      end

      if @filtering.nil?
        invalid_properties.push('invalid value for "filtering", filtering cannot be nil.')
      end

      if @distinctive.nil?
        invalid_properties.push('invalid value for "distinctive", distinctive cannot be nil.')
      end

      if @multivalue.nil?
        invalid_properties.push('invalid value for "multivalue", multivalue cannot be nil.')
      end

      if @allow_custom_values.nil?
        invalid_properties.push('invalid value for "allow_custom_values", allow_custom_values cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @type.nil?
      return false if @required.nil?
      return false if @filtering.nil?
      return false if @distinctive.nil?
      return false if @multivalue.nil?
      return false if @allow_custom_values.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          type == o.type &&
          unit == o.unit &&
          description == o.description &&
          recommendation_types == o.recommendation_types &&
          required == o.required &&
          filtering == o.filtering &&
          distinctive == o.distinctive &&
          multivalue == o.multivalue &&
          allow_custom_values == o.allow_custom_values &&
          values == o.values &&
          constraints == o.constraints &&
          value_restrictions == o.value_restrictions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, type, unit, description, recommendation_types, required, filtering, distinctive, multivalue, allow_custom_values, values, constraints, value_restrictions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
