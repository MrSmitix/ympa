=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Информация о ярлыке для коробки.
  class ParcelBoxLabelDTO
    # Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 
    attr_accessor :url

    # Юридическое название магазина.
    attr_accessor :supplier_name

    # Юридическое название службы доставки.
    attr_accessor :delivery_service_name

    # Идентификатор заказа в системе Маркета.
    attr_accessor :order_id

    # Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина. 
    attr_accessor :order_num

    # Фамилия и инициалы получателя заказа.
    attr_accessor :recipient_name

    # Идентификатор коробки.
    attr_accessor :box_id

    # Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д. 
    attr_accessor :fulfilment_id

    # Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`. 
    attr_accessor :place

    # {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`. 
    attr_accessor :weight

    # Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
    attr_accessor :delivery_service_id

    # Адрес получателя.
    attr_accessor :delivery_address

    # Дата отгрузки в формате `dd.MM.yyyy`.
    attr_accessor :shipment_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'url',
        :'supplier_name' => :'supplierName',
        :'delivery_service_name' => :'deliveryServiceName',
        :'order_id' => :'orderId',
        :'order_num' => :'orderNum',
        :'recipient_name' => :'recipientName',
        :'box_id' => :'boxId',
        :'fulfilment_id' => :'fulfilmentId',
        :'place' => :'place',
        :'weight' => :'weight',
        :'delivery_service_id' => :'deliveryServiceId',
        :'delivery_address' => :'deliveryAddress',
        :'shipment_date' => :'shipmentDate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'url' => :'String',
        :'supplier_name' => :'String',
        :'delivery_service_name' => :'String',
        :'order_id' => :'Integer',
        :'order_num' => :'String',
        :'recipient_name' => :'String',
        :'box_id' => :'Integer',
        :'fulfilment_id' => :'String',
        :'place' => :'String',
        :'weight' => :'String',
        :'delivery_service_id' => :'String',
        :'delivery_address' => :'String',
        :'shipment_date' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ParcelBoxLabelDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ParcelBoxLabelDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      else
        self.url = nil
      end

      if attributes.key?(:'supplier_name')
        self.supplier_name = attributes[:'supplier_name']
      else
        self.supplier_name = nil
      end

      if attributes.key?(:'delivery_service_name')
        self.delivery_service_name = attributes[:'delivery_service_name']
      else
        self.delivery_service_name = nil
      end

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      else
        self.order_id = nil
      end

      if attributes.key?(:'order_num')
        self.order_num = attributes[:'order_num']
      else
        self.order_num = nil
      end

      if attributes.key?(:'recipient_name')
        self.recipient_name = attributes[:'recipient_name']
      else
        self.recipient_name = nil
      end

      if attributes.key?(:'box_id')
        self.box_id = attributes[:'box_id']
      else
        self.box_id = nil
      end

      if attributes.key?(:'fulfilment_id')
        self.fulfilment_id = attributes[:'fulfilment_id']
      else
        self.fulfilment_id = nil
      end

      if attributes.key?(:'place')
        self.place = attributes[:'place']
      else
        self.place = nil
      end

      if attributes.key?(:'weight')
        self.weight = attributes[:'weight']
      else
        self.weight = nil
      end

      if attributes.key?(:'delivery_service_id')
        self.delivery_service_id = attributes[:'delivery_service_id']
      else
        self.delivery_service_id = nil
      end

      if attributes.key?(:'delivery_address')
        self.delivery_address = attributes[:'delivery_address']
      end

      if attributes.key?(:'shipment_date')
        self.shipment_date = attributes[:'shipment_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @supplier_name.nil?
        invalid_properties.push('invalid value for "supplier_name", supplier_name cannot be nil.')
      end

      if @delivery_service_name.nil?
        invalid_properties.push('invalid value for "delivery_service_name", delivery_service_name cannot be nil.')
      end

      if @order_id.nil?
        invalid_properties.push('invalid value for "order_id", order_id cannot be nil.')
      end

      if @order_num.nil?
        invalid_properties.push('invalid value for "order_num", order_num cannot be nil.')
      end

      if @recipient_name.nil?
        invalid_properties.push('invalid value for "recipient_name", recipient_name cannot be nil.')
      end

      if @box_id.nil?
        invalid_properties.push('invalid value for "box_id", box_id cannot be nil.')
      end

      if @fulfilment_id.nil?
        invalid_properties.push('invalid value for "fulfilment_id", fulfilment_id cannot be nil.')
      end

      if @place.nil?
        invalid_properties.push('invalid value for "place", place cannot be nil.')
      end

      if @weight.nil?
        invalid_properties.push('invalid value for "weight", weight cannot be nil.')
      end

      if @delivery_service_id.nil?
        invalid_properties.push('invalid value for "delivery_service_id", delivery_service_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @url.nil?
      return false if @supplier_name.nil?
      return false if @delivery_service_name.nil?
      return false if @order_id.nil?
      return false if @order_num.nil?
      return false if @recipient_name.nil?
      return false if @box_id.nil?
      return false if @fulfilment_id.nil?
      return false if @place.nil?
      return false if @weight.nil?
      return false if @delivery_service_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          supplier_name == o.supplier_name &&
          delivery_service_name == o.delivery_service_name &&
          order_id == o.order_id &&
          order_num == o.order_num &&
          recipient_name == o.recipient_name &&
          box_id == o.box_id &&
          fulfilment_id == o.fulfilment_id &&
          place == o.place &&
          weight == o.weight &&
          delivery_service_id == o.delivery_service_id &&
          delivery_address == o.delivery_address &&
          shipment_date == o.shipment_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [url, supplier_name, delivery_service_name, order_id, order_num, recipient_name, box_id, fulfilment_id, place, weight, delivery_service_id, delivery_address, shipment_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
