=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке `items` — только в списке `initialItems`.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке `items` (с уменьшенным количеством единиц `count`), и в списке `initialItems` (с первоначальным количеством единиц `initialCount`). 
  class OrdersStatsItemDTO
    # Название товара.
    attr_accessor :offer_name

    # SKU на Маркете.
    attr_accessor :market_sku

    # Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    attr_accessor :shop_sku

    # Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`. 
    attr_accessor :count

    # Цена или скидки на товар.
    attr_accessor :prices

    attr_accessor :warehouse

    # Информация об удалении товара из заказа.
    attr_accessor :details

    # Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
    attr_accessor :cis_list

    # Первоначальное количество единиц товара.
    attr_accessor :initial_count

    # Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
    attr_accessor :bid_fee

    # Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
    attr_accessor :cofinance_threshold

    # Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
    attr_accessor :cofinance_value

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'offer_name' => :'offerName',
        :'market_sku' => :'marketSku',
        :'shop_sku' => :'shopSku',
        :'count' => :'count',
        :'prices' => :'prices',
        :'warehouse' => :'warehouse',
        :'details' => :'details',
        :'cis_list' => :'cisList',
        :'initial_count' => :'initialCount',
        :'bid_fee' => :'bidFee',
        :'cofinance_threshold' => :'cofinanceThreshold',
        :'cofinance_value' => :'cofinanceValue'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'offer_name' => :'String',
        :'market_sku' => :'Integer',
        :'shop_sku' => :'String',
        :'count' => :'Integer',
        :'prices' => :'Array<OrdersStatsPriceDTO>',
        :'warehouse' => :'OrdersStatsWarehouseDTO',
        :'details' => :'Array<OrdersStatsDetailsDTO>',
        :'cis_list' => :'Array<String>',
        :'initial_count' => :'Integer',
        :'bid_fee' => :'Integer',
        :'cofinance_threshold' => :'Float',
        :'cofinance_value' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'prices',
        :'details',
        :'cis_list',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrdersStatsItemDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrdersStatsItemDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'offer_name')
        self.offer_name = attributes[:'offer_name']
      end

      if attributes.key?(:'market_sku')
        self.market_sku = attributes[:'market_sku']
      end

      if attributes.key?(:'shop_sku')
        self.shop_sku = attributes[:'shop_sku']
      end

      if attributes.key?(:'count')
        self.count = attributes[:'count']
      end

      if attributes.key?(:'prices')
        if (value = attributes[:'prices']).is_a?(Array)
          self.prices = value
        end
      end

      if attributes.key?(:'warehouse')
        self.warehouse = attributes[:'warehouse']
      end

      if attributes.key?(:'details')
        if (value = attributes[:'details']).is_a?(Array)
          self.details = value
        end
      end

      if attributes.key?(:'cis_list')
        if (value = attributes[:'cis_list']).is_a?(Array)
          self.cis_list = value
        end
      end

      if attributes.key?(:'initial_count')
        self.initial_count = attributes[:'initial_count']
      end

      if attributes.key?(:'bid_fee')
        self.bid_fee = attributes[:'bid_fee']
      end

      if attributes.key?(:'cofinance_threshold')
        self.cofinance_threshold = attributes[:'cofinance_threshold']
      end

      if attributes.key?(:'cofinance_value')
        self.cofinance_value = attributes[:'cofinance_value']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@shop_sku.nil? && @shop_sku.to_s.length > 255
        invalid_properties.push('invalid value for "shop_sku", the character length must be smaller than or equal to 255.')
      end

      if !@shop_sku.nil? && @shop_sku.to_s.length < 1
        invalid_properties.push('invalid value for "shop_sku", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if !@shop_sku.nil? && @shop_sku !~ pattern
        invalid_properties.push("invalid value for \"shop_sku\", must conform to the pattern #{pattern}.")
      end

      if !@bid_fee.nil? && @bid_fee > 10000
        invalid_properties.push('invalid value for "bid_fee", must be smaller than or equal to 10000.')
      end

      if !@bid_fee.nil? && @bid_fee < 0
        invalid_properties.push('invalid value for "bid_fee", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@shop_sku.nil? && @shop_sku.to_s.length > 255
      return false if !@shop_sku.nil? && @shop_sku.to_s.length < 1
      return false if !@shop_sku.nil? && @shop_sku !~ Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      return false if !@bid_fee.nil? && @bid_fee > 10000
      return false if !@bid_fee.nil? && @bid_fee < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_sku Value to be assigned
    def shop_sku=(shop_sku)
      if shop_sku.nil?
        fail ArgumentError, 'shop_sku cannot be nil'
      end

      if shop_sku.to_s.length > 255
        fail ArgumentError, 'invalid value for "shop_sku", the character length must be smaller than or equal to 255.'
      end

      if shop_sku.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_sku", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if shop_sku !~ pattern
        fail ArgumentError, "invalid value for \"shop_sku\", must conform to the pattern #{pattern}."
      end

      @shop_sku = shop_sku
    end

    # Custom attribute writer method with validation
    # @param [Object] bid_fee Value to be assigned
    def bid_fee=(bid_fee)
      if bid_fee.nil?
        fail ArgumentError, 'bid_fee cannot be nil'
      end

      if bid_fee > 10000
        fail ArgumentError, 'invalid value for "bid_fee", must be smaller than or equal to 10000.'
      end

      if bid_fee < 0
        fail ArgumentError, 'invalid value for "bid_fee", must be greater than or equal to 0.'
      end

      @bid_fee = bid_fee
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          offer_name == o.offer_name &&
          market_sku == o.market_sku &&
          shop_sku == o.shop_sku &&
          count == o.count &&
          prices == o.prices &&
          warehouse == o.warehouse &&
          details == o.details &&
          cis_list == o.cis_list &&
          initial_count == o.initial_count &&
          bid_fee == o.bid_fee &&
          cofinance_threshold == o.cofinance_threshold &&
          cofinance_value == o.cofinance_value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [offer_name, market_sku, shop_sku, count, prices, warehouse, details, cis_list, initial_count, bid_fee, cofinance_threshold, cofinance_value].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
