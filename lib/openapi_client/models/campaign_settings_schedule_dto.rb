=begin
#Партнерский API Маркета

#API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Расписание работы службы доставки в своем регионе.
  class CampaignSettingsScheduleDTO
    # Признак работы службы доставки в государственные праздники. Возможные значения. * `false` — служба доставки не работает в праздничные дни. * `true` — служба доставки работает в праздничные дни. 
    attr_accessor :available_on_holidays

    # Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.
    attr_accessor :custom_holidays

    # Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.
    attr_accessor :custom_working_days

    attr_accessor :period

    # Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.
    attr_accessor :total_holidays

    # Список выходных дней недели и государственных праздников.
    attr_accessor :weekly_holidays

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'available_on_holidays' => :'availableOnHolidays',
        :'custom_holidays' => :'customHolidays',
        :'custom_working_days' => :'customWorkingDays',
        :'period' => :'period',
        :'total_holidays' => :'totalHolidays',
        :'weekly_holidays' => :'weeklyHolidays'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'available_on_holidays' => :'Boolean',
        :'custom_holidays' => :'Array<String>',
        :'custom_working_days' => :'Array<String>',
        :'period' => :'CampaignSettingsTimePeriodDTO',
        :'total_holidays' => :'Array<String>',
        :'weekly_holidays' => :'Array<Integer>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CampaignSettingsScheduleDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CampaignSettingsScheduleDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'available_on_holidays')
        self.available_on_holidays = attributes[:'available_on_holidays']
      end

      if attributes.key?(:'custom_holidays')
        if (value = attributes[:'custom_holidays']).is_a?(Array)
          self.custom_holidays = value
        end
      else
        self.custom_holidays = nil
      end

      if attributes.key?(:'custom_working_days')
        if (value = attributes[:'custom_working_days']).is_a?(Array)
          self.custom_working_days = value
        end
      else
        self.custom_working_days = nil
      end

      if attributes.key?(:'period')
        self.period = attributes[:'period']
      end

      if attributes.key?(:'total_holidays')
        if (value = attributes[:'total_holidays']).is_a?(Array)
          self.total_holidays = value
        end
      else
        self.total_holidays = nil
      end

      if attributes.key?(:'weekly_holidays')
        if (value = attributes[:'weekly_holidays']).is_a?(Array)
          self.weekly_holidays = value
        end
      else
        self.weekly_holidays = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @custom_holidays.nil?
        invalid_properties.push('invalid value for "custom_holidays", custom_holidays cannot be nil.')
      end

      if @custom_working_days.nil?
        invalid_properties.push('invalid value for "custom_working_days", custom_working_days cannot be nil.')
      end

      if @total_holidays.nil?
        invalid_properties.push('invalid value for "total_holidays", total_holidays cannot be nil.')
      end

      if @weekly_holidays.nil?
        invalid_properties.push('invalid value for "weekly_holidays", weekly_holidays cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @custom_holidays.nil?
      return false if @custom_working_days.nil?
      return false if @total_holidays.nil?
      return false if @weekly_holidays.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          available_on_holidays == o.available_on_holidays &&
          custom_holidays == o.custom_holidays &&
          custom_working_days == o.custom_working_days &&
          period == o.period &&
          total_holidays == o.total_holidays &&
          weekly_holidays == o.weekly_holidays
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [available_on_holidays, custom_holidays, custom_working_days, period, total_holidays, weekly_holidays].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
