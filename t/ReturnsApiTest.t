=begin comment

Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

The version of the OpenAPI document: LATEST

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator
# Please update the test cases below to test the API endpoints.
# Ref: https://openapi-generator.tech
#
use Test::More;
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('WWW::OpenAPIClient::ReturnsApi');

my $api = WWW::OpenAPIClient::ReturnsApi->new();
isa_ok($api, 'WWW::OpenAPIClient::ReturnsApi');

#
# get_return test
#
# uncomment below and update the test
#my $get_return_campaign_id = undef; # replace NULL with a proper value
#my $get_return_order_id = undef; # replace NULL with a proper value
#my $get_return_return_id = undef; # replace NULL with a proper value
#my $get_return_result = $api->get_return(campaign_id => $get_return_campaign_id, order_id => $get_return_order_id, return_id => $get_return_return_id);

#
# get_return_application test
#
# uncomment below and update the test
#my $get_return_application_campaign_id = undef; # replace NULL with a proper value
#my $get_return_application_order_id = undef; # replace NULL with a proper value
#my $get_return_application_return_id = undef; # replace NULL with a proper value
#my $get_return_application_result = $api->get_return_application(campaign_id => $get_return_application_campaign_id, order_id => $get_return_application_order_id, return_id => $get_return_application_return_id);

#
# get_return_photo test
#
# uncomment below and update the test
#my $get_return_photo_campaign_id = undef; # replace NULL with a proper value
#my $get_return_photo_order_id = undef; # replace NULL with a proper value
#my $get_return_photo_return_id = undef; # replace NULL with a proper value
#my $get_return_photo_item_id = undef; # replace NULL with a proper value
#my $get_return_photo_image_hash = undef; # replace NULL with a proper value
#my $get_return_photo_result = $api->get_return_photo(campaign_id => $get_return_photo_campaign_id, order_id => $get_return_photo_order_id, return_id => $get_return_photo_return_id, item_id => $get_return_photo_item_id, image_hash => $get_return_photo_image_hash);

#
# get_returns test
#
# uncomment below and update the test
#my $get_returns_campaign_id = undef; # replace NULL with a proper value
#my $get_returns_page_token = undef; # replace NULL with a proper value
#my $get_returns_limit = undef; # replace NULL with a proper value
#my $get_returns_order_ids = undef; # replace NULL with a proper value
#my $get_returns_statuses = undef; # replace NULL with a proper value
#my $get_returns_type = undef; # replace NULL with a proper value
#my $get_returns_from_date = undef; # replace NULL with a proper value
#my $get_returns_to_date = undef; # replace NULL with a proper value
#my $get_returns_from_date2 = undef; # replace NULL with a proper value
#my $get_returns_to_date2 = undef; # replace NULL with a proper value
#my $get_returns_result = $api->get_returns(campaign_id => $get_returns_campaign_id, page_token => $get_returns_page_token, limit => $get_returns_limit, order_ids => $get_returns_order_ids, statuses => $get_returns_statuses, type => $get_returns_type, from_date => $get_returns_from_date, to_date => $get_returns_to_date, from_date2 => $get_returns_from_date2, to_date2 => $get_returns_to_date2);

#
# set_return_decision test
#
# uncomment below and update the test
#my $set_return_decision_campaign_id = undef; # replace NULL with a proper value
#my $set_return_decision_order_id = undef; # replace NULL with a proper value
#my $set_return_decision_return_id = undef; # replace NULL with a proper value
#my $set_return_decision_set_return_decision_request = undef; # replace NULL with a proper value
#my $set_return_decision_result = $api->set_return_decision(campaign_id => $set_return_decision_campaign_id, order_id => $set_return_decision_order_id, return_id => $set_return_decision_return_id, set_return_decision_request => $set_return_decision_set_return_decision_request);

#
# submit_return_decision test
#
# uncomment below and update the test
#my $submit_return_decision_campaign_id = undef; # replace NULL with a proper value
#my $submit_return_decision_order_id = undef; # replace NULL with a proper value
#my $submit_return_decision_return_id = undef; # replace NULL with a proper value
#my $submit_return_decision_result = $api->submit_return_decision(campaign_id => $submit_return_decision_campaign_id, order_id => $submit_return_decision_order_id, return_id => $submit_return_decision_return_id);


done_testing();
