/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * Generator version: 7.8.0
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://api.partner.market.yandex.ru";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export default function() {
    group("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}", () => {
        let cancelledOrders = 'TODO_EDIT_THE_CANCELLEDORDERS'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getShipment
        {
            let url = BASE_URL + `/campaigns/${campaignId}/first-mile/shipments/${shipmentId}?cancelledOrders=${cancelledOrders}`;
            let request = http.get(url);

            check(request, {
                "Найденная отгрузка.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/offer-mappings/delete", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: deleteOffers
        {
            let url = BASE_URL + `/businesses/${businessId}/offer-mappings/delete`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/offer-prices", () => {
        let archived = 'TODO_EDIT_THE_ARCHIVED'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getPrices
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offer-prices?page_token=${page_token}&limit=${limit}&archived=${archived}`;
            let request = http.get(url);

            check(request, {
                "Список всех товаров с установленными ценами.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: getPricesByOfferIds
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offer-prices?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Список товаров с установленными для заданного магазина ценами.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: provideOrderDigitalCodes
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/deliverDigitalGoods`;
            // TODO: edit the parameters of the request body.
            let body = {"items": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Пустой ответ.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}", () => {
        let itemId = 'TODO_EDIT_THE_ITEMID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let returnId = 'TODO_EDIT_THE_RETURNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let imageHash = 'TODO_EDIT_THE_IMAGEHASH'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getReturnPhoto
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/returns/${returnId}/decision/${itemId}/image/${imageHash}`;
            let request = http.get(url);

            check(request, {
                "Фотография возврата.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/ratings/quality", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getQualityRatings
        {
            let url = BASE_URL + `/businesses/${businessId}/ratings/quality`;
            // TODO: edit the parameters of the request body.
            let body = {"dateFrom": "date", "dateTo": "date", "campaignIds": "set"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Значение индекса качества магазинов и его составляющие.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/promos/offers/update", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updatePromoOffers
        {
            let url = BASE_URL + `/businesses/${businessId}/promos/offers/update`;
            // TODO: edit the parameters of the request body.
            let body = {"promoId": "string", "offers": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Результат добавления товаров в акцию или обновления их цен.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/bids", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: putBidsForBusiness
        {
            let url = BASE_URL + `/businesses/${businessId}/bids`;
            // TODO: edit the parameters of the request body.
            let body = {"bids": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания.
": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let returnId = 'TODO_EDIT_THE_RETURNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getReturn
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/returns/${returnId}`;
            let request = http.get(url);

            check(request, {
                "Детали возврата.": (r) => r.status === 200
            });
        }
    });

    group("/categories/tree", () => {

        // Request No. 1: getCategoriesTree
        {
            let url = BASE_URL + `/categories/tree`;
            // TODO: edit the parameters of the request body.
            let body = {"language": "languagetype"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Категории Маркета.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/offers/recommendations", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getOfferRecommendations
        {
            let url = BASE_URL + `/businesses/${businessId}/offers/recommendations?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list", "cofinancePriceFilter": "fieldstatetype", "recommendedCofinancePriceFilter": "fieldstatetype", "competitivenessFilter": "pricecompetitivenesstype"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Список товаров с рекомендациями.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/promos/offers", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getPromoOffers
        {
            let url = BASE_URL + `/businesses/${businessId}/promos/offers?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"promoId": "string", "statusType": "promoofferparticipationstatusfiltertype"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Список товаров, которые участвуют или могут участвовать в акции.": (r) => r.status === 200
            });
        }
    });

    group("/reports/prices/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generatePricesReport
        {
            let url = BASE_URL + `/reports/prices/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"businessId": "long", "campaignId": "long", "categoryIds": "list", "creationDateFrom": "date", "creationDateTo": "date"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/settings", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getCampaignSettings
        {
            let url = BASE_URL + `/campaigns/${campaignId}/settings`;
            let request = http.get(url);

            check(request, {
                "Настройки магазина.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/offer-cards", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getOfferCardsContentStatus
        {
            let url = BASE_URL + `/businesses/${businessId}/offer-cards?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "set", "cardStatuses": "set", "categoryIds": "set"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Информация о карточках указанных товаров.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: downloadShipmentPalletLabels
        {
            let url = BASE_URL + `/campaigns/${campaignId}/first-mile/shipments/${shipmentId}/pallet/labels?format=${format}`;
            let request = http.get(url);

            check(request, {
                "PDF‑файл с ярлыками на все упаковки в отгрузке.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/shipments/reception-transfer-act", () => {
        let warehouseId = '123123'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: downloadShipmentReceptionTransferAct
        {
            let url = BASE_URL + `/campaigns/${campaignId}/shipments/reception-transfer-act?warehouse_id=${warehouse_id}`;
            let request = http.get(url);

            check(request, {
                "Акт приема-передачи в формате PDF.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/bids", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: putBidsForCampaign
        {
            let url = BASE_URL + `/campaigns/${campaignId}/bids`;
            // TODO: edit the parameters of the request body.
            let body = {"bids": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Пустой ответ.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/offers/update", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updateCampaignOffers
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offers/update`;
            // TODO: edit the parameters of the request body.
            let body = {"offers": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Ответ 200 обозначает, что новые параметры получены Маркетом и скоро вступят в силу.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let returnId = 'TODO_EDIT_THE_RETURNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: submitReturnDecision
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/returns/${returnId}/decision/submit`;
            let request = http.post(url);

            check(request, {
                "Статус выполнения операции.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/chats/history", () => {
        let chatId = 'TODO_EDIT_THE_CHATID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getChatHistory
        {
            let url = BASE_URL + `/businesses/${businessId}/chats/history?chatId=${chatId}&page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"messageIdFrom": "long"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "История сообщений успешно получена.
": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/bids/info", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getBidsInfoForBusiness
        {
            let url = BASE_URL + `/businesses/${businessId}/bids/info?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"skus": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getCampaign
        {
            let url = BASE_URL + `/campaigns/${campaignId}`;
            let request = http.get(url);

            check(request, {
                "Информация о магазине.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/offer-mappings/suggestions", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getSuggestedOfferMappings
        {
            let url = BASE_URL + `/businesses/${businessId}/offer-mappings/suggestions`;
            // TODO: edit the parameters of the request body.
            let body = {"offers": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Подобранные карточки на Маркете.

По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую.
": (r) => r.status === 200
            });
        }
    });

    group("/reports/goods-movement/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateGoodsMovementReport
        {
            let url = BASE_URL + `/reports/goods-movement/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"campaignId": "long", "dateFrom": "date", "dateTo": "date", "shopSku": "string"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/feeds/{feedId}/index-logs", () => {
        let publishedTimeFrom = 'TODO_EDIT_THE_PUBLISHED_TIME_FROM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let publishedTimeTo = 'TODO_EDIT_THE_PUBLISHED_TIME_TO'; // specify value as there is no example value for this parameter in OpenAPI spec
        let feedId = 'TODO_EDIT_THE_FEEDID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let status = 'TODO_EDIT_THE_STATUS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getFeedIndexLogs
        {
            let url = BASE_URL + `/campaigns/${campaignId}/feeds/${feedId}/index-logs?limit=${limit}&published_time_from=${published_time_from}&published_time_to=${published_time_to}&status=${status}`;
            let request = http.get(url);

            check(request, {
                "Отчет по индексации прайс-листа.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/price-quarantine", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getBusinessQuarantineOffers
        {
            let url = BASE_URL + `/businesses/${businessId}/price-quarantine?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list", "cardStatuses": "list", "categoryIds": "list", "vendorNames": "list", "tags": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Список товаров в карантине.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/offer-mapping-entries/suggestions", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getSuggestedOfferMappingEntries
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offer-mapping-entries/suggestions`;
            // TODO: edit the parameters of the request body.
            let body = {"offers": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Информация о товарах в каталоге.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/by_login/{login}", () => {
        let pageSize = 'TODO_EDIT_THE_PAGESIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let login = 'TODO_EDIT_THE_LOGIN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getCampaignsByLogin
        {
            let url = BASE_URL + `/campaigns/by_login/${login}?page=${page}&pageSize=${pageSize}`;
            let request = http.get(url);

            check(request, {
                "Информация о магазинах.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/outlets", () => {
        let regionId = 'TODO_EDIT_THE_REGION_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let regionId = 'TODO_EDIT_THE_REGIONID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shopOutletCode = 'TODO_EDIT_THE_SHOP_OUTLET_CODE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getOutlets
        {
            let url = BASE_URL + `/campaigns/${campaignId}/outlets?page_token=${page_token}&region_id=${region_id}&shop_outlet_code=${shop_outlet_code}&regionId=${regionId}`;
            let request = http.get(url);

            check(request, {
                "Информация о точках продаж.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: createOutlet
        {
            let url = BASE_URL + `/campaigns/${campaignId}/outlets`;
            // TODO: edit the parameters of the request body.
            let body = {"name": "string", "type": "outlettype", "coords": "string", "isMain": "boolean", "shopOutletCode": "string", "visibility": "outletvisibilitytype", "address": {"regionId": "long", "street": "string", "number": "string", "building": "string", "estate": "string", "block": "string", "additional": "string", "km": "integer", "city": "string"}, "phones": "list", "workingSchedule": {"workInHoliday": "boolean", "scheduleItems": "list"}, "deliveryRules": "list", "storagePeriod": "long"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Информация о созданной точке продаж.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: setShipmentPalletsCount
        {
            let url = BASE_URL + `/campaigns/${campaignId}/first-mile/shipments/${shipmentId}/pallets`;
            // TODO: edit the parameters of the request body.
            let body = {"placesCount": "integer"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Имеет значение только тип ответа. Если ответ `ОК`, количество упаковок записано.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/status-update", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updateOrderStatuses
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/status-update`;
            // TODO: edit the parameters of the request body.
            let body = {"orders": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Возвращается информация об обновленных статусах заказов.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/goods-feedback/skip-reaction", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: skipGoodsFeedbacksReaction
        {
            let url = BASE_URL + `/businesses/${businessId}/goods-feedback/skip-reaction`;
            // TODO: edit the parameters of the request body.
            let body = {"feedbackIds": "set"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Пустой ответ.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/buyer", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOrderBuyerInfo
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/buyer`;
            let request = http.get(url);

            check(request, {
                "Информация о покупателе.": (r) => r.status === 200
            });
        }
    });

    group("/reports/goods-realization/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateGoodsRealizationReport
        {
            let url = BASE_URL + `/reports/goods-realization/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"campaignId": "long", "year": "integer", "month": "integer"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/hidden-offers", () => {
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let offerId = 'TODO_EDIT_THE_OFFER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageSize = 'TODO_EDIT_THE_PAGESIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getHiddenOffers
        {
            let url = BASE_URL + `/campaigns/${campaignId}/hidden-offers?offer_id=${offer_id}&page_token=${page_token}&limit=${limit}&offset=${offset}&page=${page}&pageSize=${pageSize}`;
            let request = http.get(url);

            check(request, {
                "Информация о скрытых вами товарах.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: addHiddenOffers
        {
            let url = BASE_URL + `/campaigns/${campaignId}/hidden-offers`;
            // TODO: edit the parameters of the request body.
            let body = {"hiddenOffers": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Настройки скрытия получены и скоро вступят в силу.": (r) => r.status === 200
            });
        }
    });

    group("/reports/competitors-position/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateCompetitorsPositionReport
        {
            let url = BASE_URL + `/reports/competitors-position/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"businessId": "long", "categoryId": "long", "dateFrom": "date", "dateTo": "date"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/offer-mapping-entries/updates", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updateOfferMappingEntries
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offer-mapping-entries/updates`;
            // TODO: edit the parameters of the request body.
            let body = {"offerMappingEntries": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Статус выполнения операции.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/outlets/{outletId}", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let outletId = 'TODO_EDIT_THE_OUTLETID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOutlet
        {
            let url = BASE_URL + `/campaigns/${campaignId}/outlets/${outletId}`;
            let request = http.get(url);

            check(request, {
                "Информация о точке продаж.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteOutlet
        {
            let url = BASE_URL + `/campaigns/${campaignId}/outlets/${outletId}`;
            let request = http.del(url);

            check(request, {
                "Пустой ответ.": (r) => r.status === 200
            });
        }
    });

    group("/reports/united-netting/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateUnitedNettingReport
        {
            let url = BASE_URL + `/reports/united-netting/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"businessId": "long", "dateTimeFrom": "date", "dateTimeTo": "date", "dateFrom": "date", "dateTo": "date", "bankOrderId": "long", "bankOrderDateTime": "date", "placementPrograms": "list", "inns": "list", "campaignIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/feeds", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getFeeds
        {
            let url = BASE_URL + `/campaigns/${campaignId}/feeds`;
            let request = http.get(url);

            check(request, {
                "Список прайс-листов.": (r) => r.status === 200
            });
        }
    });

    group("/models/offers", () => {
        let orderByPrice = 'TODO_EDIT_THE_ORDERBYPRICE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let regionId = 'TODO_EDIT_THE_REGIONID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let currency = 'TODO_EDIT_THE_CURRENCY'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getModelsOffers
        {
            let url = BASE_URL + `/models/offers?regionId=${regionId}&currency=${currency}&orderByPrice=${orderByPrice}`;
            // TODO: edit the parameters of the request body.
            let body = {"models": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Список предложений для моделей.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/goods-feedback/comments/update", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updateGoodsFeedbackComment
        {
            let url = BASE_URL + `/businesses/${businessId}/goods-feedback/comments/update`;
            // TODO: edit the parameters of the request body.
            let body = {"feedbackId": "long", "comment": {"id": "long", "parentId": "long", "text": "string"}};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Информация о добавленном или измененном комментарии.": (r) => r.status === 200
            });
        }
    });

    group("/reports/united-marketplace-services/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateUnitedMarketplaceServicesReport
        {
            let url = BASE_URL + `/reports/united-marketplace-services/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"businessId": "long", "dateTimeFrom": "date", "dateTimeTo": "date", "dateFrom": "date", "dateTo": "date", "yearFrom": "integer", "monthFrom": "integer", "yearTo": "integer", "monthTo": "integer", "placementPrograms": "list", "inns": "list", "campaignIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/reports/goods-feedback/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateGoodsFeedbackReport
        {
            let url = BASE_URL + `/reports/goods-feedback/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"businessId": "long"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/cancellation/accept", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: acceptOrderCancellation
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/cancellation/accept`;
            // TODO: edit the parameters of the request body.
            let body = {"accepted": "boolean", "reason": "ordercancellationreasontype"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Ответ на отмену заказа был успешно передан.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/returns", () => {
        let fromDate = '2022-10-31'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let toDate = '2022-11-30'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let statuses = 'STARTED_BY_USER,WAITING_FOR_DECISION'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let orderIds = 'TODO_EDIT_THE_ORDERIDS'; // specify value as there is no example value for this parameter in OpenAPI spec
        let type = 'TODO_EDIT_THE_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getReturns
        {
            let url = BASE_URL + `/campaigns/${campaignId}/returns?page_token=${page_token}&limit=${limit}&orderIds=${orderIds}&statuses=${statuses}&type=${type}&fromDate=${fromDate}&toDate=${toDate}&from_date=${from_date}&to_date=${to_date}`;
            let request = http.get(url);

            check(request, {
                "Постраничные возвраты партнера.": (r) => r.status === 200
            });
        }
    });

    group("/reports/united-orders/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateUnitedOrdersReport
        {
            let url = BASE_URL + `/reports/united-orders/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"businessId": "long", "dateFrom": "date", "dateTo": "date", "campaignIds": "list", "promoId": "string"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/offer-mappings/archive", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: addOffersToArchive
        {
            let url = BASE_URL + `/businesses/${businessId}/offer-mappings/archive`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.

Список успешно добавленных товаров не возвращается.
": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updateOrderStorageLimit
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/delivery/storage-limit`;
            // TODO: edit the parameters of the request body.
            let body = {"newDate": "date"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Пустой ответ.": (r) => r.status === 200
            });
        }
    });

    group("/categories/max-sale-quantum", () => {

        // Request No. 1: getCategoriesMaxSaleQuantum
        {
            let url = BASE_URL + `/categories/max-sale-quantum`;
            // TODO: edit the parameters of the request body.
            let body = {"marketCategoryIds": "set"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Лимит на установку кванта и минимального количества товаров.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/promos", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPromos
        {
            let url = BASE_URL + `/businesses/${businessId}/promos`;
            // TODO: edit the parameters of the request body.
            let body = {"participation": "promoparticipationtype", "mechanics": "mechanicstype"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Список акций Маркета.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/logins", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getCampaignLogins
        {
            let url = BASE_URL + `/campaigns/${campaignId}/logins`;
            let request = http.get(url);

            check(request, {
                "Список логинов, связанных с магазином.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let boxId = 'TODO_EDIT_THE_BOXID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateOrderLabel
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/delivery/shipments/${shipmentId}/boxes/${boxId}/label?format=${format}`;
            let request = http.get(url);

            check(request, {
                "PDF‑файл с ярлыками для коробки. Файл содержит одну страницу с ярлыком.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/offer-cards/update", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updateOfferContent
        {
            let url = BASE_URL + `/businesses/${businessId}/offer-cards/update`;
            // TODO: edit the parameters of the request body.
            let body = {"offersContent": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Запрос выполнен корректно, данные обработаны.

{% note warning "Ответ 200 сам по себе не значит, что переданные значения корректны" %}

Обязательно посмотрите детали ответа: `status` и перечень ошибок, если он есть.

Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.

{% endnote %}

Если в `status` вернулось `ERROR`, убедитесь, что:

* все обязательные характеристики заполнены;
* характеристики действительно существуют в указанных категориях;
* значения соответствуют характеристикам;
* ваши собственные значения имеют нужный тип данных.

Найти проблемы помогут поля `errors` и `warnings`.
": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/boxes", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: setOrderBoxLayout
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/boxes`;
            // TODO: edit the parameters of the request body.
            let body = {"boxes": "list", "allowRemove": "boolean"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков.
": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/delivery/track", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: setOrderDeliveryTrackCode
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/delivery/track`;
            // TODO: edit the parameters of the request body.
            let body = {"trackCode": "string", "deliveryServiceId": "long"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Трек‑номер посылки и идентификатор службы доставки были успешно переданы.": (r) => r.status === 200
            });
        }
    });

    group("/reports/info/{reportId}", () => {
        let reportId = 'TODO_EDIT_THE_REPORTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getReportInfo
        {
            let url = BASE_URL + `/reports/info/${reportId}`;
            let request = http.get(url);

            check(request, {
                "Статус генерации отчета и ссылка, если она уже есть.

{% note tip %}

Если статус генерации отчета — `FAILED` или `NO_DATA`, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.

{% endnote %}

 
": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/chats/new", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: createChat
        {
            let url = BASE_URL + `/businesses/${businessId}/chats/new`;
            // TODO: edit the parameters of the request body.
            let body = {"orderId": "long"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Все получилось: чат создан.
": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/settings", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getBusinessSettings
        {
            let url = BASE_URL + `/businesses/${businessId}/settings`;
            let request = http.post(url);

            check(request, {
                "Настройки кабинета.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders", () => {
        let dispatchType = 'TODO_EDIT_THE_DISPATCHTYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let supplierShipmentDateFrom = 'TODO_EDIT_THE_SUPPLIERSHIPMENTDATEFROM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let updatedAtFrom = 'TODO_EDIT_THE_UPDATEDATFROM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let substatus = 'TODO_EDIT_THE_SUBSTATUS'; // specify value as there is no example value for this parameter in OpenAPI spec
        let supplierShipmentDateTo = 'TODO_EDIT_THE_SUPPLIERSHIPMENTDATETO'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let toDate = 'TODO_EDIT_THE_TODATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let onlyEstimatedDelivery = 'TODO_EDIT_THE_ONLYESTIMATEDDELIVERY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let updatedAtTo = 'TODO_EDIT_THE_UPDATEDATTO'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageSize = 'TODO_EDIT_THE_PAGESIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let onlyWaitingForCancellationApprove = 'TODO_EDIT_THE_ONLYWAITINGFORCANCELLATIONAPPROVE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let fromDate = 'TODO_EDIT_THE_FROMDATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let hasCis = 'TODO_EDIT_THE_HASCIS'; // specify value as there is no example value for this parameter in OpenAPI spec
        let buyerType = 'TODO_EDIT_THE_BUYERTYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let fake = 'TODO_EDIT_THE_FAKE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let orderIds = 'TODO_EDIT_THE_ORDERIDS'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let status = 'TODO_EDIT_THE_STATUS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOrders
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders?orderIds=${orderIds}&status=${status}&substatus=${substatus}&fromDate=${fromDate}&toDate=${toDate}&supplierShipmentDateFrom=${supplierShipmentDateFrom}&supplierShipmentDateTo=${supplierShipmentDateTo}&updatedAtFrom=${updatedAtFrom}&updatedAtTo=${updatedAtTo}&dispatchType=${dispatchType}&fake=${fake}&hasCis=${hasCis}&onlyWaitingForCancellationApprove=${onlyWaitingForCancellationApprove}&onlyEstimatedDelivery=${onlyEstimatedDelivery}&buyerType=${buyerType}&page=${page}&pageSize=${pageSize}&page_token=${page_token}&limit=${limit}`;
            let request = http.get(url);

            check(request, {
                "Информация о заказах.": (r) => r.status === 200
            });
        }
    });

    group("/regions/{regionId}", () => {
        let regionId = 'TODO_EDIT_THE_REGIONID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: searchRegionsById
        {
            let url = BASE_URL + `/regions/${regionId}`;
            let request = http.get(url);

            check(request, {
                "Найденный регион.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/price-quarantine", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getCampaignQuarantineOffers
        {
            let url = BASE_URL + `/campaigns/${campaignId}/price-quarantine?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list", "cardStatuses": "list", "categoryIds": "list", "vendorNames": "list", "tags": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Список товаров в карантине.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/offers", () => {
        let feedId = 'TODO_EDIT_THE_FEEDID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shopCategoryId = 'TODO_EDIT_THE_SHOPCATEGORYID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let query = 'TODO_EDIT_THE_QUERY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageSize = 'TODO_EDIT_THE_PAGESIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let currency = 'TODO_EDIT_THE_CURRENCY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let matched = 'TODO_EDIT_THE_MATCHED'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOffers
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offers?query=${query}&feedId=${feedId}&shopCategoryId=${shopCategoryId}&currency=${currency}&matched=${matched}&page=${page}&pageSize=${pageSize}`;
            let request = http.get(url);

            check(request, {
                "Предложения магазина.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: getCampaignOffers
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offers?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list", "statuses": "list", "categoryIds": "list", "vendorNames": "list", "tags": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Список товаров, размещенных в заданном магазине.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/outlets/licenses", () => {
        let outletIds = 'TODO_EDIT_THE_OUTLETIDS'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let ids = 'TODO_EDIT_THE_IDS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOutletLicenses
        {
            let url = BASE_URL + `/campaigns/${campaignId}/outlets/licenses?outletIds=${outletIds}&ids=${ids}`;
            let request = http.get(url);

            check(request, {
                "Найденные лицензии собственных точек продаж.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteOutletLicenses
        {
            let url = BASE_URL + `/campaigns/${campaignId}/outlets/licenses?ids=${ids}`;
            let request = http.del(url);

            check(request, {
                "Пустой ответ.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/status", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updateOrderStatus
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/status`;
            // TODO: edit the parameters of the request body.
            let body = {"order": {"status": "orderstatustype", "substatus": "ordersubstatustype", "delivery": "orderstatuschangedeliverydto"}};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "В случае успешного изменения статуса заказа возвращается обновленная информация о заказе.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: confirmShipment
        {
            let url = BASE_URL + `/campaigns/${campaignId}/first-mile/shipments/${shipmentId}/confirm`;
            // TODO: edit the parameters of the request body.
            let body = {"externalShipmentId": "string"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Пустой ответ.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/delivery/labels", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateOrderLabels
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/delivery/labels?format=${format}`;
            let request = http.get(url);

            check(request, {
                "PDF‑файл с ярлыками на все коробки.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/feeds/{feedId}/refresh", () => {
        let feedId = 'TODO_EDIT_THE_FEEDID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: refreshFeed
        {
            let url = BASE_URL + `/campaigns/${campaignId}/feeds/${feedId}/refresh`;
            let request = http.post(url);

            check(request, {
                "Пустой ответ.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/offer-mappings/update", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updateOfferMappings
        {
            let url = BASE_URL + `/businesses/${businessId}/offer-mappings/update`;
            // TODO: edit the parameters of the request body.
            let body = {"offerMappings": "list", "onlyPartnerMediaContent": "boolean"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге.
": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/warehouses", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getWarehouses
        {
            let url = BASE_URL + `/businesses/${businessId}/warehouses`;
            let request = http.get(url);

            check(request, {
                "Список складов и групп складов.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/promos/offers/delete", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: deletePromoOffers
        {
            let url = BASE_URL + `/businesses/${businessId}/promos/offers/delete`;
            // TODO: edit the parameters of the request body.
            let body = {"promoId": "string", "deleteAllOffers": "boolean", "offerIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Результат удаления товаров из акции.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/feedback/updates", () => {
        let fromDate = 'TODO_EDIT_THE_FROM_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getFeedbackAndCommentUpdates
        {
            let url = BASE_URL + `/campaigns/${campaignId}/feedback/updates?page_token=${page_token}&limit=${limit}&from_date=${from_date}`;
            let request = http.get(url);

            check(request, {
                "Список отзывов для магазина.": (r) => r.status === 200
            });
        }
    });

    group("/warehouses", () => {

        // Request No. 1: getFulfillmentWarehouses
        {
            let url = BASE_URL + `/warehouses`;
            let request = http.get(url);

            check(request, {
                "Список складов.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/goods-feedback", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getGoodsFeedbacks
        {
            let url = BASE_URL + `/businesses/${businessId}/goods-feedback?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"dateTimeFrom": "date", "dateTimeTo": "date", "reactionStatus": "feedbackreactionstatustype", "ratingValues": "set", "modelIds": "set", "paid": "boolean"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Список отзывов.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/price-quarantine/confirm", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: confirmCampaignPrices
        {
            let url = BASE_URL + `/campaigns/${campaignId}/price-quarantine/confirm`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Ответ 200 обозначает, что цены подтверждены.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/first-mile/shipments", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: searchShipments
        {
            let url = BASE_URL + `/campaigns/${campaignId}/first-mile/shipments?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"dateFrom": "date", "dateTo": "date", "statuses": "set", "orderIds": "set", "cancelledOrders": "boolean"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Найденные отгрузки.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: setOrderShipmentBoxes
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/delivery/shipments/${shipmentId}/boxes`;
            // TODO: edit the parameters of the request body.
            let body = {"boxes": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Имеет значение только тип ответа. Если ответ `ОК`, количество грузомест записано.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/chats", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getChats
        {
            let url = BASE_URL + `/businesses/${businessId}/chats?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"orderIds": "list", "types": "list", "statuses": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Список чатов.
": (r) => r.status === 200
            });
        }
    });

    group("/reports/shows-sales/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateShowsSalesReport
        {
            let url = BASE_URL + `/reports/shows-sales/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"businessId": "long", "campaignId": "long", "dateFrom": "date", "dateTo": "date", "grouping": "showssalesgroupingtype"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/business-buyer", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOrderBusinessBuyerInfo
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/business-buyer`;
            let request = http.post(url);

            check(request, {
                "Информация о покупателе.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: transferOrdersFromShipment
        {
            let url = BASE_URL + `/campaigns/${campaignId}/first-mile/shipments/${shipmentId}/orders/transfer`;
            // TODO: edit the parameters of the request body.
            let body = {"orderIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Запрос на перенос заказов проверен и принят, и они будут перенесены спустя несколько минут.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: downloadShipmentInboundAct
        {
            let url = BASE_URL + `/campaigns/${campaignId}/first-mile/shipments/${shipmentId}/inbound-act`;
            let request = http.get(url);

            check(request, {
                "Акт в формате PDF.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/offer-mappings", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getOfferMappings
        {
            let url = BASE_URL + `/businesses/${businessId}/offer-mappings?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list", "cardStatuses": "list", "categoryIds": "list", "vendorNames": "list", "tags": "list", "archived": "boolean"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Информация о товарах в каталоге.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: downloadShipmentAct
        {
            let url = BASE_URL + `/campaigns/${campaignId}/first-mile/shipments/${shipmentId}/act`;
            let request = http.get(url);

            check(request, {
                "Акт приема-передачи для отгрузки в формате PDF.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/documents", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOrderBusinessDocumentsInfo
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/documents`;
            let request = http.post(url);

            check(request, {
                "Информация о документах.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/stats/skus", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getGoodsStats
        {
            let url = BASE_URL + `/campaigns/${campaignId}/stats/skus`;
            // TODO: edit the parameters of the request body.
            let body = {"shopSkus": "set"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Отчет по товарам.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/chats/message", () => {
        let chatId = 'TODO_EDIT_THE_CHATID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: sendMessageToChat
        {
            let url = BASE_URL + `/businesses/${businessId}/chats/message?chatId=${chatId}`;
            // TODO: edit the parameters of the request body.
            let body = {"message": "string"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Пустой ответ. Означает, что сообщение отправлено.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOrderLabelsData
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/delivery/labels/data`;
            let request = http.get(url);

            check(request, {
                "Информация для печати ярлыков.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/offers/stocks", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updateStocks
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offers/stocks`;
            // TODO: edit the parameters of the request body.
            let body = {"skus": "set"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Пустой ответ.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: getStocks
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offers/stocks?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"withTurnover": "boolean", "archived": "boolean", "offerIds": "set"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Остатки товаров на складах.": (r) => r.status === 200
            });
        }
    });

    group("/tariffs/calculate", () => {

        // Request No. 1: calculateTariffs
        {
            let url = BASE_URL + `/tariffs/calculate`;
            // TODO: edit the parameters of the request body.
            let body = {"parameters": {"campaignId": "long", "sellingProgram": "sellingprogramtype", "frequency": "paymentfrequencytype"}, "offers": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Стоимость услуг.": (r) => r.status === 200
            });
        }
    });

    group("/models/{modelId}/offers", () => {
        let orderByPrice = 'TODO_EDIT_THE_ORDERBYPRICE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let modelId = 'TODO_EDIT_THE_MODELID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let regionId = 'TODO_EDIT_THE_REGIONID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let count = 'TODO_EDIT_THE_COUNT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let currency = 'TODO_EDIT_THE_CURRENCY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getModelOffers
        {
            let url = BASE_URL + `/models/${modelId}/offers?regionId=${regionId}&currency=${currency}&orderByPrice=${orderByPrice}&count=${count}&page=${page}`;
            let request = http.get(url);

            check(request, {
                "Список предложений для модели.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/goods-feedback/comments", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getGoodsFeedbackComments
        {
            let url = BASE_URL + `/businesses/${businessId}/goods-feedback/comments?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"feedbackId": "long"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Дерево комментариев к отзыву.": (r) => r.status === 200
            });
        }
    });

    group("/reports/stocks-on-warehouses/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateStocksOnWarehousesReport
        {
            let url = BASE_URL + `/reports/stocks-on-warehouses/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"campaignId": "long", "warehouseIds": "list", "reportDate": "date", "categoryIds": "list", "hasStocks": "boolean"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/verifyEac", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: verifyOrderEac
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/verifyEac`;
            // TODO: edit the parameters of the request body.
            let body = {"code": "string"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Проверка кода выполнена успешно.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/offer-mapping-entries", () => {
        let shopSku = 'TODO_EDIT_THE_SHOP_SKU'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let vendor = 'TODO_EDIT_THE_VENDOR'; // specify value as there is no example value for this parameter in OpenAPI spec
        let mappingKind = 'TODO_EDIT_THE_MAPPING_KIND'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let offerId = 'TODO_EDIT_THE_OFFER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let availability = 'TODO_EDIT_THE_AVAILABILITY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let categoryId = 'TODO_EDIT_THE_CATEGORY_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let status = 'TODO_EDIT_THE_STATUS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOfferMappingEntries
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offer-mapping-entries?offer_id=${offer_id}&shop_sku=${shop_sku}&mapping_kind=${mapping_kind}&status=${status}&availability=${availability}&category_id=${category_id}&vendor=${vendor}&page_token=${page_token}&limit=${limit}`;
            let request = http.get(url);

            check(request, {
                "Информация о товарах в каталоге.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/stats/orders", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getOrdersStats
        {
            let url = BASE_URL + `/campaigns/${campaignId}/stats/orders?page_token=${page_token}&limit=${limit}`;
            // TODO: edit the parameters of the request body.
            let body = {"dateFrom": "date", "dateTo": "date", "updateFrom": "date", "updateTo": "date", "orders": "list", "statuses": "list", "hasCis": "boolean"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Информация по заказам.": (r) => r.status === 200
            });
        }
    });

    group("/category/{categoryId}/parameters", () => {
        let categoryId = 'TODO_EDIT_THE_CATEGORYID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getCategoryContentParameters
        {
            let url = BASE_URL + `/category/${categoryId}/parameters`;
            let request = http.post(url);

            check(request, {
                "Список характеристик товаров из заданной категории.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: downloadShipmentTransportationWaybill
        {
            let url = BASE_URL + `/campaigns/${campaignId}/first-mile/shipments/${shipmentId}/transportation-waybill`;
            let request = http.get(url);

            check(request, {
                "Транспортная накладная в формате XLSX.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/feeds/{feedId}", () => {
        let feedId = 'TODO_EDIT_THE_FEEDID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getFeed
        {
            let url = BASE_URL + `/campaigns/${campaignId}/feeds/${feedId}`;
            let request = http.get(url);

            check(request, {
                "Информация о прайс-листе.": (r) => r.status === 200
            });
        }
    });

    group("/models", () => {
        let regionId = 'TODO_EDIT_THE_REGIONID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let query = 'TODO_EDIT_THE_QUERY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageSize = 'TODO_EDIT_THE_PAGESIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let currency = 'TODO_EDIT_THE_CURRENCY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: searchModels
        {
            let url = BASE_URL + `/models?query=${query}&regionId=${regionId}&currency=${currency}&page=${page}&pageSize=${pageSize}`;
            let request = http.get(url);

            check(request, {
                "Информация о моделях.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: getModels
        {
            let url = BASE_URL + `/models?regionId=${regionId}&currency=${currency}`;
            // TODO: edit the parameters of the request body.
            let body = {"models": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Информация о моделях.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/hidden-offers/delete", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: deleteHiddenOffers
        {
            let url = BASE_URL + `/campaigns/${campaignId}/hidden-offers/delete`;
            // TODO: edit the parameters of the request body.
            let body = {"hiddenOffers": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Показ товаров возобновлен.": (r) => r.status === 200
            });
        }
    });

    group("/reports/documents/labels/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateMassOrderLabelsReport
        {
            let url = BASE_URL + `/reports/documents/labels/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"businessId": "long", "orderIds": "set"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.

Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус `RESOURCE_NOT_FOUND`.
": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let returnId = 'TODO_EDIT_THE_RETURNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: setReturnDecision
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/returns/${returnId}/decision`;
            // TODO: edit the parameters of the request body.
            let body = {"returnItemId": "long", "decisionType": "returnrequestdecisiontype", "comment": "string"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Детали возврата.": (r) => r.status === 200
            });
        }
    });

    group("/reports/shelf-statistics/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateShelfsStatisticsReport
        {
            let url = BASE_URL + `/reports/shelf-statistics/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"businessId": "long", "dateFrom": "date", "dateTo": "date", "attributionType": "shelfsstatisticsattributiontype"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/region", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getCampaignRegion
        {
            let url = BASE_URL + `/campaigns/${campaignId}/region`;
            let request = http.get(url);

            check(request, {
                "Возвращает регион, в котором находится магазин.

|**⚙️ Лимит:** 1000 запросов в час|
|-|
": (r) => r.status === 200
            });
        }
    });

    group("/delivery/services", () => {

        // Request No. 1: getDeliveryServices
        {
            let url = BASE_URL + `/delivery/services`;
            let request = http.get(url);

            check(request, {
                "Информация о службах доставки.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/offer-prices/updates", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updateBusinessPrices
        {
            let url = BASE_URL + `/businesses/${businessId}/offer-prices/updates`;
            // TODO: edit the parameters of the request body.
            let body = {"offers": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Маркет принял информацию о новых ценах.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/chats/file/send", () => {
        let chatId = 'TODO_EDIT_THE_CHATID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: sendFileToChat
        {
            let url = BASE_URL + `/businesses/${businessId}/chats/file/send?chatId=${chatId}`;
            // TODO: edit the parameters of the request body.
            let body = {"file": http.file(open("/path/to/file.bin", "b"), "test.bin")};
            let params = {
                headers: {
                    "Content-Type": "multipart/form-data", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Пустой ответ. Означает, что файл отправлен.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: downloadShipmentDiscrepancyAct
        {
            let url = BASE_URL + `/campaigns/${campaignId}/first-mile/shipments/${shipmentId}/discrepancy-act`;
            let request = http.get(url);

            check(request, {
                "Акт расхождений в формате XLSX.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/bids/recommendations", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getBidsRecommendations
        {
            let url = BASE_URL + `/businesses/${businessId}/bids/recommendations`;
            // TODO: edit the parameters of the request body.
            let body = {"skus": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Рекомендованные ставки для заданных товаров.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/offers/all", () => {
        let feedId = 'TODO_EDIT_THE_FEEDID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let chunk = 'TODO_EDIT_THE_CHUNK'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getAllOffers
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offers/all?feedId=${feedId}&chunk=${chunk}`;
            let request = http.get(url);

            check(request, {
                "Предложения магазина.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/offer-prices/suggestions", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getSuggestedPrices
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offer-prices/suggestions`;
            // TODO: edit the parameters of the request body.
            let body = {"offers": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Список цен для продвижения на Маркете.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let shipmentId = 'TODO_EDIT_THE_SHIPMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getShipmentOrdersInfo
        {
            let url = BASE_URL + `/campaigns/${campaignId}/first-mile/shipments/${shipmentId}/orders/info`;
            let request = http.get(url);

            check(request, {
                "Информация по годным/негодным для печати ярлыков заказам в отгрузке.": (r) => r.status === 200
            });
        }
    });

    group("/regions/{regionId}/children", () => {
        let regionId = 'TODO_EDIT_THE_REGIONID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageSize = 'TODO_EDIT_THE_PAGESIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: searchRegionChildren
        {
            let url = BASE_URL + `/regions/${regionId}/children?page=${page}&pageSize=${pageSize}`;
            let request = http.get(url);

            check(request, {
                "Регионы, являющиеся дочерними к указанному в запросе.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/offer-prices/updates", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updatePrices
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offer-prices/updates`;
            // TODO: edit the parameters of the request body.
            let body = {"offers": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Маркет принял информацию о новых ценах.": (r) => r.status === 200
            });
        }
    });

    group("/regions", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '20'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let pageToken = 'eyBuZXh0SWQ6IDIzNDIgfQ=='; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: searchRegionsByName
        {
            let url = BASE_URL + `/regions?name=${name}&page_token=${page_token}&limit=${limit}`;
            let request = http.get(url);

            check(request, {
                "Список найденных регионов.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let returnId = 'TODO_EDIT_THE_RETURNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getReturnApplication
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/returns/${returnId}/application`;
            let request = http.get(url);

            check(request, {
                "Заявление на возврат.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns", () => {
        let pageSize = 'TODO_EDIT_THE_PAGESIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getCampaigns
        {
            let url = BASE_URL + `/campaigns?page=${page}&pageSize=${pageSize}`;
            let request = http.get(url);

            check(request, {
                "Магазины пользователя.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/ratings/quality/details", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getQualityRatingDetails
        {
            let url = BASE_URL + `/campaigns/${campaignId}/ratings/quality/details`;
            let request = http.post(url);

            check(request, {
                "Информация о заказах, которые повлияли на индекс качества.": (r) => r.status === 200
            });
        }
    });

    group("/reports/documents/shipment-list/generate", () => {

        // Request No. 1: generateShipmentListDocumentReport
        {
            let url = BASE_URL + `/reports/documents/shipment-list/generate`;
            // TODO: edit the parameters of the request body.
            let body = {"campaignId": "long", "shipmentId": "long", "orderIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый документ.": (r) => r.status === 200
            });
        }
    });

    group("/reports/goods-turnover/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateGoodsTurnoverReport
        {
            let url = BASE_URL + `/reports/goods-turnover/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"campaignId": "long", "date": "date"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/goods-feedback/comments/delete", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: deleteGoodsFeedbackComment
        {
            let url = BASE_URL + `/businesses/${businessId}/goods-feedback/comments/delete`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "long"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Пустой ответ.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/offers/delete", () => {
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: deleteCampaignOffers
        {
            let url = BASE_URL + `/campaigns/${campaignId}/offers/delete`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/identifiers", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: provideOrderItemIdentifiers
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/identifiers`;
            // TODO: edit the parameters of the request body.
            let body = {"items": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах.": (r) => r.status === 200
            });
        }
    });

    group("/reports/boost-consolidated/generate", () => {
        let format = 'TODO_EDIT_THE_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: generateBoostConsolidatedReport
        {
            let url = BASE_URL + `/reports/boost-consolidated/generate?format=${format}`;
            // TODO: edit the parameters of the request body.
            let body = {"businessId": "long", "dateFrom": "date", "dateTo": "date"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/items", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: updateOrderItems
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/items`;
            // TODO: edit the parameters of the request body.
            let body = {"items": "list", "reason": "orderitemsmodificationrequestreasontype"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Маркет успешно обработал ваш запрос. Выходные данные не ожидаются.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/feeds/{feedId}/params", () => {
        let feedId = 'TODO_EDIT_THE_FEEDID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: setFeedParams
        {
            let url = BASE_URL + `/campaigns/${campaignId}/feeds/${feedId}/params`;
            // TODO: edit the parameters of the request body.
            let body = {"parameters": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Статус выполнения операции.": (r) => r.status === 200
            });
        }
    });

    group("/models/{modelId}", () => {
        let modelId = 'TODO_EDIT_THE_MODELID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let regionId = 'TODO_EDIT_THE_REGIONID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let currency = 'TODO_EDIT_THE_CURRENCY'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getModel
        {
            let url = BASE_URL + `/models/${modelId}?regionId=${regionId}&currency=${currency}`;
            let request = http.get(url);

            check(request, {
                "Информация о модели.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/price-quarantine/confirm", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: confirmBusinessPrices
        {
            let url = BASE_URL + `/businesses/${businessId}/price-quarantine/confirm`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Ответ 200 обозначает, что цены подтверждены.": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}/delivery/date", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: setOrderDeliveryDate
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}/delivery/date`;
            // TODO: edit the parameters of the request body.
            let body = {"dates": {"toDate": "date"}, "reason": "orderdeliverydatereasontype"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Успешное изменение даты доставки.": (r) => r.status === 200
            });
        }
    });

    group("/businesses/{businessId}/offer-mappings/unarchive", () => {
        let businessId = 'TODO_EDIT_THE_BUSINESSID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: deleteOffersFromArchive
        {
            let url = BASE_URL + `/businesses/${businessId}/offer-mappings/unarchive`;
            // TODO: edit the parameters of the request body.
            let body = {"offerIds": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.

Список успешно восстановленных товаров не возвращается.
": (r) => r.status === 200
            });
        }
    });

    group("/campaigns/{campaignId}/orders/{orderId}", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let campaignId = 'TODO_EDIT_THE_CAMPAIGNID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOrder
        {
            let url = BASE_URL + `/campaigns/${campaignId}/orders/${orderId}`;
            let request = http.get(url);

            check(request, {
                "Информация о заказе.": (r) => r.status === 200
            });
        }
    });

}
