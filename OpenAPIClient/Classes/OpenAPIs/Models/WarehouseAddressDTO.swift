//
// WarehouseAddressDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Адрес склада. */
public struct WarehouseAddressDTO: Codable, JSONEncodable, Hashable {

    static let cityRule = StringRule(minLength: nil, maxLength: 200, pattern: nil)
    static let streetRule = StringRule(minLength: nil, maxLength: 512, pattern: nil)
    static let numberRule = StringRule(minLength: nil, maxLength: 256, pattern: nil)
    static let buildingRule = StringRule(minLength: nil, maxLength: 16, pattern: nil)
    static let blockRule = StringRule(minLength: nil, maxLength: 16, pattern: nil)
    /** Город. */
    public var city: String
    /** Улица. */
    public var street: String?
    /** Номер дома. */
    public var number: String?
    /** Номер строения. */
    public var building: String?
    /** Номер корпуса. */
    public var block: String?
    public var gps: GpsDTO

    public init(city: String, street: String? = nil, number: String? = nil, building: String? = nil, block: String? = nil, gps: GpsDTO) {
        self.city = city
        self.street = street
        self.number = number
        self.building = building
        self.block = block
        self.gps = gps
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case city
        case street
        case number
        case building
        case block
        case gps
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(city, forKey: .city)
        try container.encodeIfPresent(street, forKey: .street)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(building, forKey: .building)
        try container.encodeIfPresent(block, forKey: .block)
        try container.encode(gps, forKey: .gps)
    }
}

