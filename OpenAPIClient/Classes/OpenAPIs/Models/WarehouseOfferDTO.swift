//
// WarehouseOfferDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация об остатках товара. */
public struct WarehouseOfferDTO: Codable, JSONEncodable, Hashable {

    static let offerIdRule = StringRule(minLength: 1, maxLength: 255, pattern: "/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")
    /** Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    public var offerId: String
    public var turnoverSummary: TurnoverDTO?
    /** Информация об остатках. */
    public var stocks: [WarehouseStockDTO]
    /** Дата и время последнего обновления информации об остатках.  Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2023-11-21T00:42:42+03:00`.  */
    public var updatedAt: Date?

    public init(offerId: String, turnoverSummary: TurnoverDTO? = nil, stocks: [WarehouseStockDTO], updatedAt: Date? = nil) {
        self.offerId = offerId
        self.turnoverSummary = turnoverSummary
        self.stocks = stocks
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case offerId
        case turnoverSummary
        case stocks
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(offerId, forKey: .offerId)
        try container.encodeIfPresent(turnoverSummary, forKey: .turnoverSummary)
        try container.encode(stocks, forKey: .stocks)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

