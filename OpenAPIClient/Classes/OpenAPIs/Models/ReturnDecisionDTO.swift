//
// ReturnDecisionDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Решения по возвратам. */
public struct ReturnDecisionDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор товара в возврате. */
    public var returnItemId: Int64?
    /** Количество единиц товара. */
    public var count: Int?
    /** Комментарий. */
    public var comment: String?
    public var reasonType: ReturnDecisionReasonType?
    public var subreasonType: ReturnDecisionSubreasonType?
    public var decisionType: ReturnDecisionType?
    /** Сумма возврата. */
    public var refundAmount: Int64?
    /** Компенсация за обратную доставку. */
    public var partnerCompensation: Int64?
    /** Список хеш-кодов фотографий товара от покупателя. */
    public var images: [String]?

    public init(returnItemId: Int64? = nil, count: Int? = nil, comment: String? = nil, reasonType: ReturnDecisionReasonType? = nil, subreasonType: ReturnDecisionSubreasonType? = nil, decisionType: ReturnDecisionType? = nil, refundAmount: Int64? = nil, partnerCompensation: Int64? = nil, images: [String]? = nil) {
        self.returnItemId = returnItemId
        self.count = count
        self.comment = comment
        self.reasonType = reasonType
        self.subreasonType = subreasonType
        self.decisionType = decisionType
        self.refundAmount = refundAmount
        self.partnerCompensation = partnerCompensation
        self.images = images
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case returnItemId
        case count
        case comment
        case reasonType
        case subreasonType
        case decisionType
        case refundAmount
        case partnerCompensation
        case images
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(returnItemId, forKey: .returnItemId)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(reasonType, forKey: .reasonType)
        try container.encodeIfPresent(subreasonType, forKey: .subreasonType)
        try container.encodeIfPresent(decisionType, forKey: .decisionType)
        try container.encodeIfPresent(refundAmount, forKey: .refundAmount)
        try container.encodeIfPresent(partnerCompensation, forKey: .partnerCompensation)
        try container.encodeIfPresent(images, forKey: .images)
    }
}

