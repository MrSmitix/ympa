//
// GetGoodsFeedbackRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтр запроса отзывов в кабинете.  */
public struct GetGoodsFeedbackRequest: Codable, JSONEncodable, Hashable {

    static let ratingValuesRule = ArrayRule(minItems: nil, maxItems: 5, uniqueItems: true)
    static let modelIdsRule = ArrayRule(minItems: nil, maxItems: 20, uniqueItems: true)
    /** Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты.  */
    public var dateTimeFrom: Date?
    /** Конец периода. Не включительно.  Если параметр не указан, используется текущая дата.  */
    public var dateTimeTo: Date?
    public var reactionStatus: FeedbackReactionStatusType?
    /** Оценка товара. */
    public var ratingValues: Set<Int>?
    /** Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md).  */
    public var modelIds: Set<Int64>?
    /** Фильтр отзывов за баллы Плюса. */
    public var paid: Bool?

    public init(dateTimeFrom: Date? = nil, dateTimeTo: Date? = nil, reactionStatus: FeedbackReactionStatusType? = nil, ratingValues: Set<Int>? = nil, modelIds: Set<Int64>? = nil, paid: Bool? = nil) {
        self.dateTimeFrom = dateTimeFrom
        self.dateTimeTo = dateTimeTo
        self.reactionStatus = reactionStatus
        self.ratingValues = ratingValues
        self.modelIds = modelIds
        self.paid = paid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dateTimeFrom
        case dateTimeTo
        case reactionStatus
        case ratingValues
        case modelIds
        case paid
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(dateTimeFrom, forKey: .dateTimeFrom)
        try container.encodeIfPresent(dateTimeTo, forKey: .dateTimeTo)
        try container.encodeIfPresent(reactionStatus, forKey: .reactionStatus)
        try container.encodeIfPresent(ratingValues, forKey: .ratingValues)
        try container.encodeIfPresent(modelIds, forKey: .modelIds)
        try container.encodeIfPresent(paid, forKey: .paid)
    }
}

