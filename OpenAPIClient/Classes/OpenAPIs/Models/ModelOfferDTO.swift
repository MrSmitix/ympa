//
// ModelOfferDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о предложении. */
public struct ModelOfferDTO: Codable, JSONEncodable, Hashable {

    /** Скидка на предложение в процентах. */
    public var discount: Int?
    /** Наименование предложения. */
    public var name: String?
    /** Позиция предложения в выдаче Маркета на карточке модели. */
    public var pos: Int?
    /** Цена предложения без скидки магазина. */
    public var preDiscountPrice: Double?
    /** Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay. */
    public var price: Double?
    /** Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре `regionId`. Предложения, доставляемые из других регионов, показываются после них.  */
    public var regionId: Int64?
    /** Стоимость доставки товара в регион:  * `0` — доставка осуществляется бесплатно. * `-1` — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится.  */
    public var shippingCost: Double?
    /** Название магазина (в том виде, в котором отображается на Маркете). */
    public var shopName: String?
    /** Рейтинг магазина.  Возможные значения: * `-1` — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение `-1`. * `1`. * `2`. * `3`. * `4`. * `5`.  */
    public var shopRating: Int?
    /** {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  */
    @available(*, deprecated, message: "This property is deprecated.")
    public var inStock: Int?

    public init(discount: Int? = nil, name: String? = nil, pos: Int? = nil, preDiscountPrice: Double? = nil, price: Double? = nil, regionId: Int64? = nil, shippingCost: Double? = nil, shopName: String? = nil, shopRating: Int? = nil, inStock: Int? = nil) {
        self.discount = discount
        self.name = name
        self.pos = pos
        self.preDiscountPrice = preDiscountPrice
        self.price = price
        self.regionId = regionId
        self.shippingCost = shippingCost
        self.shopName = shopName
        self.shopRating = shopRating
        self.inStock = inStock
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case discount
        case name
        case pos
        case preDiscountPrice
        case price
        case regionId
        case shippingCost
        case shopName
        case shopRating
        case inStock
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(discount, forKey: .discount)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(pos, forKey: .pos)
        try container.encodeIfPresent(preDiscountPrice, forKey: .preDiscountPrice)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(regionId, forKey: .regionId)
        try container.encodeIfPresent(shippingCost, forKey: .shippingCost)
        try container.encodeIfPresent(shopName, forKey: .shopName)
        try container.encodeIfPresent(shopRating, forKey: .shopRating)
        try container.encodeIfPresent(inStock, forKey: .inStock)
    }
}

