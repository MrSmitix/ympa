//
// FeedDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о прайс-листе. */
public struct FeedDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор прайс-листа. */
    public var id: Int64?
    /** Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.  */
    public var login: String?
    /** Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета.  */
    public var name: String?
    /** Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.  */
    public var password: String?
    /** Дата загрузки прайс-листа на Маркет.  Формат даты: `ДД-ММ-ГГГГ`.  Параметр выводится при размещении прайс-листа на сервере Маркета.  */
    public var uploadDate: Date?
    /** URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина.  */
    public var url: String?
    public var content: FeedContentDTO?
    public var download: FeedDownloadDTO?
    public var placement: FeedPlacementDTO?
    public var publication: FeedPublicationDTO?

    public init(id: Int64? = nil, login: String? = nil, name: String? = nil, password: String? = nil, uploadDate: Date? = nil, url: String? = nil, content: FeedContentDTO? = nil, download: FeedDownloadDTO? = nil, placement: FeedPlacementDTO? = nil, publication: FeedPublicationDTO? = nil) {
        self.id = id
        self.login = login
        self.name = name
        self.password = password
        self.uploadDate = uploadDate
        self.url = url
        self.content = content
        self.download = download
        self.placement = placement
        self.publication = publication
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case login
        case name
        case password
        case uploadDate
        case url
        case content
        case download
        case placement
        case publication
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(login, forKey: .login)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(uploadDate, forKey: .uploadDate)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(download, forKey: .download)
        try container.encodeIfPresent(placement, forKey: .placement)
        try container.encodeIfPresent(publication, forKey: .publication)
    }
}

