//
// GetMappingDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о товарах в каталоге.  */
public struct GetMappingDTO: Codable, JSONEncodable, Hashable {

    /** SKU на Маркете. */
    public var marketSku: Int64?
    /** Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */
    public var marketSkuName: String?
    /** Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */
    public var marketModelId: Int64?
    /** Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */
    public var marketModelName: String?
    /** Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара.  */
    public var marketCategoryId: Int64?
    /** Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара.  */
    public var marketCategoryName: String?

    public init(marketSku: Int64? = nil, marketSkuName: String? = nil, marketModelId: Int64? = nil, marketModelName: String? = nil, marketCategoryId: Int64? = nil, marketCategoryName: String? = nil) {
        self.marketSku = marketSku
        self.marketSkuName = marketSkuName
        self.marketModelId = marketModelId
        self.marketModelName = marketModelName
        self.marketCategoryId = marketCategoryId
        self.marketCategoryName = marketCategoryName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case marketSku
        case marketSkuName
        case marketModelId
        case marketModelName
        case marketCategoryId
        case marketCategoryName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(marketSku, forKey: .marketSku)
        try container.encodeIfPresent(marketSkuName, forKey: .marketSkuName)
        try container.encodeIfPresent(marketModelId, forKey: .marketModelId)
        try container.encodeIfPresent(marketModelName, forKey: .marketModelName)
        try container.encodeIfPresent(marketCategoryId, forKey: .marketCategoryId)
        try container.encodeIfPresent(marketCategoryName, forKey: .marketCategoryName)
    }
}

