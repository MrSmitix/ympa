//
// SkuBidRecommendationItemDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Список товаров с рекомендованными ставками. */
public struct SkuBidRecommendationItemDTO: Codable, JSONEncodable, Hashable {

    static let skuRule = StringRule(minLength: 1, maxLength: 255, pattern: "/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")
    static let bidRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 9999, exclusiveMaximum: false, multipleOf: nil)
    /** Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    public var sku: String
    /** Значение ставки. */
    public var bid: Int
    /** Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить.  */
    public var bidRecommendations: [BidRecommendationItemDTO]?
    /** Рекомендованные цены. */
    public var priceRecommendations: [PriceRecommendationItemDTO]?

    public init(sku: String, bid: Int, bidRecommendations: [BidRecommendationItemDTO]? = nil, priceRecommendations: [PriceRecommendationItemDTO]? = nil) {
        self.sku = sku
        self.bid = bid
        self.bidRecommendations = bidRecommendations
        self.priceRecommendations = priceRecommendations
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sku
        case bid
        case bidRecommendations
        case priceRecommendations
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(sku, forKey: .sku)
        try container.encode(bid, forKey: .bid)
        try container.encodeIfPresent(bidRecommendations, forKey: .bidRecommendations)
        try container.encodeIfPresent(priceRecommendations, forKey: .priceRecommendations)
    }
}

