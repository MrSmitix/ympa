//
// FeedbackCommentDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Комментарий к отзыву на магазин. */
public struct FeedbackCommentDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор ответа. */
    public var id: Int64?
    /** Идентификатор родительского ответа. */
    public var parentId: Int64?
    /** Текст ответа. */
    public var body: String?
    /** Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.  */
    public var createdAt: Date?
    /** Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.  */
    public var updatedAt: Date?
    public var author: FeedbackCommentAuthorDTO?
    /** Дочерние ответы. */
    public var children: [FeedbackCommentDTO]?

    public init(id: Int64? = nil, parentId: Int64? = nil, body: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, author: FeedbackCommentAuthorDTO? = nil, children: [FeedbackCommentDTO]? = nil) {
        self.id = id
        self.parentId = parentId
        self.body = body
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.author = author
        self.children = children
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case parentId
        case body
        case createdAt
        case updatedAt
        case author
        case children
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(parentId, forKey: .parentId)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(author, forKey: .author)
        try container.encodeIfPresent(children, forKey: .children)
    }
}

