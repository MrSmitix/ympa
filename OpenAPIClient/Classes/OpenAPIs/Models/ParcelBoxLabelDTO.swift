//
// ParcelBoxLabelDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о ярлыке для коробки. */
public struct ParcelBoxLabelDTO: Codable, JSONEncodable, Hashable {

    /** Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md).  */
    public var url: String
    /** Юридическое название магазина. */
    public var supplierName: String
    /** Юридическое название службы доставки. */
    public var deliveryServiceName: String
    /** Идентификатор заказа в системе Маркета. */
    public var orderId: Int64
    /** Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина.  */
    public var orderNum: String
    /** Фамилия и инициалы получателя заказа. */
    public var recipientName: String
    /** Идентификатор коробки. */
    public var boxId: Int64
    /** Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д.  */
    public var fulfilmentId: String
    /** Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`.  */
    public var place: String
    /** {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`.  */
    public var weight: String
    /** Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md). */
    public var deliveryServiceId: String
    /** Адрес получателя. */
    public var deliveryAddress: String?
    /** Дата отгрузки в формате `dd.MM.yyyy`. */
    public var shipmentDate: String?

    public init(url: String, supplierName: String, deliveryServiceName: String, orderId: Int64, orderNum: String, recipientName: String, boxId: Int64, fulfilmentId: String, place: String, weight: String, deliveryServiceId: String, deliveryAddress: String? = nil, shipmentDate: String? = nil) {
        self.url = url
        self.supplierName = supplierName
        self.deliveryServiceName = deliveryServiceName
        self.orderId = orderId
        self.orderNum = orderNum
        self.recipientName = recipientName
        self.boxId = boxId
        self.fulfilmentId = fulfilmentId
        self.place = place
        self.weight = weight
        self.deliveryServiceId = deliveryServiceId
        self.deliveryAddress = deliveryAddress
        self.shipmentDate = shipmentDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case url
        case supplierName
        case deliveryServiceName
        case orderId
        case orderNum
        case recipientName
        case boxId
        case fulfilmentId
        case place
        case weight
        case deliveryServiceId
        case deliveryAddress
        case shipmentDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(url, forKey: .url)
        try container.encode(supplierName, forKey: .supplierName)
        try container.encode(deliveryServiceName, forKey: .deliveryServiceName)
        try container.encode(orderId, forKey: .orderId)
        try container.encode(orderNum, forKey: .orderNum)
        try container.encode(recipientName, forKey: .recipientName)
        try container.encode(boxId, forKey: .boxId)
        try container.encode(fulfilmentId, forKey: .fulfilmentId)
        try container.encode(place, forKey: .place)
        try container.encode(weight, forKey: .weight)
        try container.encode(deliveryServiceId, forKey: .deliveryServiceId)
        try container.encodeIfPresent(deliveryAddress, forKey: .deliveryAddress)
        try container.encodeIfPresent(shipmentDate, forKey: .shipmentDate)
    }
}

