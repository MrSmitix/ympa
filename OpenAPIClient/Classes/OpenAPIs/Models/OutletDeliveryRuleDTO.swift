//
// OutletDeliveryRuleDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация об условиях доставки для данной точки продаж. */
public struct OutletDeliveryRuleDTO: Codable, JSONEncodable, Hashable {

    static let orderBeforeRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 24, exclusiveMaximum: false, multipleOf: nil)
    /** Минимальный срок доставки товаров в точку продаж. Указан в рабочих днях.  Минимальное значение: `0` — доставка в день заказа.  Максимальное значение: `60`.  Допустимые сроки доставки (разница между `minDeliveryDays` и `maxDeliveryDays`) зависят от региона.  Для доставки по своему региону разница не должна превышать двух дней. Например, если `minDeliveryDays` равно 1, то для `maxDeliveryDays` допускаются значения от 1 до 3.  Для доставки в другие регионы:  * Если `minDeliveryDays` до 18 дней, разница не должна превышать четырех дней. Например, если `minDeliveryDays` равно 10, то для `maxDeliveryDays` допускаются значения от 10 до 14. * Если `minDeliveryDays` больше 18 дней, разница должна быть не больше чем в два раза. Например, если `minDeliveryDays` равно 21, то для `maxDeliveryDays` допускаются значения от 21 до 42.  Обязательный параметр, если `type=\"DEPOT\"` или `type=\"MIXED\"`.  Взаимоисключающий с параметром `unspecifiedDeliveryInterval`.  */
    public var minDeliveryDays: Int?
    /** Максимальный срок доставки товаров в точку продаж. Указан в рабочих днях.  Минимальное значение: `0` — доставка в день заказа.  Максимальное значение: `60`.  Допустимые сроки доставки (разница между `minDeliveryDays` и `maxDeliveryDays`) зависят от региона.  Для доставки по своему региону разница не должна превышать двух дней. Например, если `minDeliveryDays` равно 1, то для `maxDeliveryDays` допускаются значения от 1 до 3.  Для доставки в другие регионы:  * Если `minDeliveryDays` до 18 дней, разница не должна превышать четырех дней. Например, если `minDeliveryDays` равно 10, то для `maxDeliveryDays` допускаются значения от 10 до 14. * Если `minDeliveryDays` больше 18 дней, разница должна быть не больше чем в два раза. Например, если `minDeliveryDays` равно 21, то для `maxDeliveryDays` допускаются значения от 21 до 42.  Обязательный параметр, если `type=\"DEPOT\"` или `type=\"MIXED\"`.  Взаимоисключающий с параметром `unspecifiedDeliveryInterval`.  */
    public var maxDeliveryDays: Int?
    /** Идентификатор службы доставки товаров в точку продаж.  Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).  */
    public var deliveryServiceId: Int64?
    /** Час, до которого покупателю нужно сделать заказ, чтобы он был доставлен в точку продаж в сроки от `minDeliveryDays` до `maxDeliveryDays`.  Если покупатель оформит заказ после указанного часа, он будет доставлен в сроки от `minDeliveryDays` + 1 рабочий день до `maxDeliveryDays` + 1 рабочий день.  Значение по умолчанию: `24`.  */
    public var orderBefore: Int?
    /** Цена на товар, начиная с которой действует бесплатный самовывоз товара из точки продаж. */
    public var priceFreePickup: Double?
    /** Признак доставки товаров в точку продаж на заказ.  Признак выставлен, если:  * точный срок доставки в точку продаж заранее неизвестен (например, если магазин собирает несколько заказов для отправки в точку или населенный пункт); * все товары изготавливаются или поставляются на заказ.  Возможные значения: * `true` — товары доставляются в точку продаж на заказ.  Параметр указывается только со значением `true`.  Взаимоисключающий с параметрами `minDeliveryDays` и `maxDeliveryDays`.  */
    public var unspecifiedDeliveryInterval: Bool?

    public init(minDeliveryDays: Int? = nil, maxDeliveryDays: Int? = nil, deliveryServiceId: Int64? = nil, orderBefore: Int? = nil, priceFreePickup: Double? = nil, unspecifiedDeliveryInterval: Bool? = nil) {
        self.minDeliveryDays = minDeliveryDays
        self.maxDeliveryDays = maxDeliveryDays
        self.deliveryServiceId = deliveryServiceId
        self.orderBefore = orderBefore
        self.priceFreePickup = priceFreePickup
        self.unspecifiedDeliveryInterval = unspecifiedDeliveryInterval
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case minDeliveryDays
        case maxDeliveryDays
        case deliveryServiceId
        case orderBefore
        case priceFreePickup
        case unspecifiedDeliveryInterval
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(minDeliveryDays, forKey: .minDeliveryDays)
        try container.encodeIfPresent(maxDeliveryDays, forKey: .maxDeliveryDays)
        try container.encodeIfPresent(deliveryServiceId, forKey: .deliveryServiceId)
        try container.encodeIfPresent(orderBefore, forKey: .orderBefore)
        try container.encodeIfPresent(priceFreePickup, forKey: .priceFreePickup)
        try container.encodeIfPresent(unspecifiedDeliveryInterval, forKey: .unspecifiedDeliveryInterval)
    }
}

