//
// QuarantineOfferDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Товар в карантине. */
public struct QuarantineOfferDTO: Codable, JSONEncodable, Hashable {

    static let offerIdRule = StringRule(minLength: 1, maxLength: 255, pattern: "/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")
    /** Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    public var offerId: String?
    public var currentPrice: BasePriceDTO?
    public var lastValidPrice: BasePriceDTO?
    /** Причины попадания товара в карантин. */
    public var verdicts: [PriceQuarantineVerdictDTO]?

    public init(offerId: String? = nil, currentPrice: BasePriceDTO? = nil, lastValidPrice: BasePriceDTO? = nil, verdicts: [PriceQuarantineVerdictDTO]? = nil) {
        self.offerId = offerId
        self.currentPrice = currentPrice
        self.lastValidPrice = lastValidPrice
        self.verdicts = verdicts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case offerId
        case currentPrice
        case lastValidPrice
        case verdicts
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(offerId, forKey: .offerId)
        try container.encodeIfPresent(currentPrice, forKey: .currentPrice)
        try container.encodeIfPresent(lastValidPrice, forKey: .lastValidPrice)
        try container.encodeIfPresent(verdicts, forKey: .verdicts)
    }
}

