//
// OrderDeliveryAddressDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи).  */
public struct OrderDeliveryAddressDTO: Codable, JSONEncodable, Hashable {

    /** Страна.  Обязательный параметр.  */
    public var country: String?
    /** Почтовый индекс.  Указывается, если выбрана доставка почтой (`delivery type=POST`).  */
    public var postcode: String?
    /** Город или населенный пункт.  Обязательный параметр.  */
    public var city: String?
    /** Район. */
    public var district: String?
    /** Станция метро. */
    public var subway: String?
    /** Улица.  Обязательный параметр.  */
    public var street: String?
    /** Дом или владение.  Обязательный параметр.  */
    public var house: String?
    /** Корпус или строение. */
    public var block: String?
    /** Подъезд. */
    public var entrance: String?
    /** Код домофона. */
    public var entryphone: String?
    /** Этаж. */
    public var floor: String?
    /** Квартира или офис. */
    public var apartment: String?
    /** Телефон получателя заказа.  Обязательный параметр.  */
    public var phone: String?
    /** Фамилия, имя и отчество получателя заказа.  Обязательный параметр.  */
    public var recipient: String?
    public var gps: GpsDTO?

    public init(country: String? = nil, postcode: String? = nil, city: String? = nil, district: String? = nil, subway: String? = nil, street: String? = nil, house: String? = nil, block: String? = nil, entrance: String? = nil, entryphone: String? = nil, floor: String? = nil, apartment: String? = nil, phone: String? = nil, recipient: String? = nil, gps: GpsDTO? = nil) {
        self.country = country
        self.postcode = postcode
        self.city = city
        self.district = district
        self.subway = subway
        self.street = street
        self.house = house
        self.block = block
        self.entrance = entrance
        self.entryphone = entryphone
        self.floor = floor
        self.apartment = apartment
        self.phone = phone
        self.recipient = recipient
        self.gps = gps
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case country
        case postcode
        case city
        case district
        case subway
        case street
        case house
        case block
        case entrance
        case entryphone
        case floor
        case apartment
        case phone
        case recipient
        case gps
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(postcode, forKey: .postcode)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(district, forKey: .district)
        try container.encodeIfPresent(subway, forKey: .subway)
        try container.encodeIfPresent(street, forKey: .street)
        try container.encodeIfPresent(house, forKey: .house)
        try container.encodeIfPresent(block, forKey: .block)
        try container.encodeIfPresent(entrance, forKey: .entrance)
        try container.encodeIfPresent(entryphone, forKey: .entryphone)
        try container.encodeIfPresent(floor, forKey: .floor)
        try container.encodeIfPresent(apartment, forKey: .apartment)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(recipient, forKey: .recipient)
        try container.encodeIfPresent(gps, forKey: .gps)
    }
}

