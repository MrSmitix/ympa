//
// GetPromoDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация об акции. */
public struct GetPromoDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор акции. */
    public var id: String
    /** Название акции. */
    public var name: String
    public var period: PromoPeriodDTO
    /** Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением `true`, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением `false`.  Для прошедших акций всегда возвращается со значением `true`.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index).  */
    public var participating: Bool
    public var assortmentInfo: GetPromoAssortmentInfoDTO
    public var mechanicsInfo: GetPromoMechanicsInfoDTO
    public var bestsellerInfo: GetPromoBestsellerInfoDTO
    /** Список каналов продвижения товаров. */
    public var channels: [ChannelType]?
    public var constraints: GetPromoConstraintsDTO?

    public init(id: String, name: String, period: PromoPeriodDTO, participating: Bool, assortmentInfo: GetPromoAssortmentInfoDTO, mechanicsInfo: GetPromoMechanicsInfoDTO, bestsellerInfo: GetPromoBestsellerInfoDTO, channels: [ChannelType]? = nil, constraints: GetPromoConstraintsDTO? = nil) {
        self.id = id
        self.name = name
        self.period = period
        self.participating = participating
        self.assortmentInfo = assortmentInfo
        self.mechanicsInfo = mechanicsInfo
        self.bestsellerInfo = bestsellerInfo
        self.channels = channels
        self.constraints = constraints
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case period
        case participating
        case assortmentInfo
        case mechanicsInfo
        case bestsellerInfo
        case channels
        case constraints
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(period, forKey: .period)
        try container.encode(participating, forKey: .participating)
        try container.encode(assortmentInfo, forKey: .assortmentInfo)
        try container.encode(mechanicsInfo, forKey: .mechanicsInfo)
        try container.encode(bestsellerInfo, forKey: .bestsellerInfo)
        try container.encodeIfPresent(channels, forKey: .channels)
        try container.encodeIfPresent(constraints, forKey: .constraints)
    }
}

