//
// OrderDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Заказ. */
public struct OrderDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор заказа. */
    public var id: Int64?
    public var status: OrderStatusType?
    public var substatus: OrderSubstatusType?
    public var creationDate: String?
    public var updatedAt: String?
    public var currency: CurrencyType?
    /** Платеж покупателя.  */
    public var itemsTotal: Double?
    /** Стоимость доставки.  */
    public var deliveryTotal: Double?
    /** {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки.  */
    @available(*, deprecated, message: "This property is deprecated.")
    public var buyerItemsTotal: Double?
    /** {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки.  */
    @available(*, deprecated, message: "This property is deprecated.")
    public var buyerTotal: Double?
    /** Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам.  */
    public var buyerItemsTotalBeforeDiscount: Double?
    /** {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки).  */
    @available(*, deprecated, message: "This property is deprecated.")
    public var buyerTotalBeforeDiscount: Double?
    public var paymentType: OrderPaymentType?
    public var paymentMethod: OrderPaymentMethodType?
    /** Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.  */
    public var fake: Bool?
    /** Список товаров в заказе. */
    public var items: [OrderItemDTO]
    /** Список субсидий по типам. */
    public var subsidies: [OrderSubsidyDTO]?
    public var delivery: OrderDeliveryDTO?
    public var buyer: OrderBuyerDTO?
    /** Комментарий к заказу. */
    public var notes: String?
    public var taxSystem: OrderTaxSystemType?
    /** **Только для модели DBS**  Запрошена ли отмена.  */
    public var cancelRequested: Bool?
    public var expiryDate: String?

    public init(id: Int64? = nil, status: OrderStatusType? = nil, substatus: OrderSubstatusType? = nil, creationDate: String? = nil, updatedAt: String? = nil, currency: CurrencyType? = nil, itemsTotal: Double? = nil, deliveryTotal: Double? = nil, buyerItemsTotal: Double? = nil, buyerTotal: Double? = nil, buyerItemsTotalBeforeDiscount: Double? = nil, buyerTotalBeforeDiscount: Double? = nil, paymentType: OrderPaymentType? = nil, paymentMethod: OrderPaymentMethodType? = nil, fake: Bool? = nil, items: [OrderItemDTO], subsidies: [OrderSubsidyDTO]? = nil, delivery: OrderDeliveryDTO? = nil, buyer: OrderBuyerDTO? = nil, notes: String? = nil, taxSystem: OrderTaxSystemType? = nil, cancelRequested: Bool? = nil, expiryDate: String? = nil) {
        self.id = id
        self.status = status
        self.substatus = substatus
        self.creationDate = creationDate
        self.updatedAt = updatedAt
        self.currency = currency
        self.itemsTotal = itemsTotal
        self.deliveryTotal = deliveryTotal
        self.buyerItemsTotal = buyerItemsTotal
        self.buyerTotal = buyerTotal
        self.buyerItemsTotalBeforeDiscount = buyerItemsTotalBeforeDiscount
        self.buyerTotalBeforeDiscount = buyerTotalBeforeDiscount
        self.paymentType = paymentType
        self.paymentMethod = paymentMethod
        self.fake = fake
        self.items = items
        self.subsidies = subsidies
        self.delivery = delivery
        self.buyer = buyer
        self.notes = notes
        self.taxSystem = taxSystem
        self.cancelRequested = cancelRequested
        self.expiryDate = expiryDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case status
        case substatus
        case creationDate
        case updatedAt
        case currency
        case itemsTotal
        case deliveryTotal
        case buyerItemsTotal
        case buyerTotal
        case buyerItemsTotalBeforeDiscount
        case buyerTotalBeforeDiscount
        case paymentType
        case paymentMethod
        case fake
        case items
        case subsidies
        case delivery
        case buyer
        case notes
        case taxSystem
        case cancelRequested
        case expiryDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(substatus, forKey: .substatus)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(itemsTotal, forKey: .itemsTotal)
        try container.encodeIfPresent(deliveryTotal, forKey: .deliveryTotal)
        try container.encodeIfPresent(buyerItemsTotal, forKey: .buyerItemsTotal)
        try container.encodeIfPresent(buyerTotal, forKey: .buyerTotal)
        try container.encodeIfPresent(buyerItemsTotalBeforeDiscount, forKey: .buyerItemsTotalBeforeDiscount)
        try container.encodeIfPresent(buyerTotalBeforeDiscount, forKey: .buyerTotalBeforeDiscount)
        try container.encodeIfPresent(paymentType, forKey: .paymentType)
        try container.encodeIfPresent(paymentMethod, forKey: .paymentMethod)
        try container.encodeIfPresent(fake, forKey: .fake)
        try container.encode(items, forKey: .items)
        try container.encodeIfPresent(subsidies, forKey: .subsidies)
        try container.encodeIfPresent(delivery, forKey: .delivery)
        try container.encodeIfPresent(buyer, forKey: .buyer)
        try container.encodeIfPresent(notes, forKey: .notes)
        try container.encodeIfPresent(taxSystem, forKey: .taxSystem)
        try container.encodeIfPresent(cancelRequested, forKey: .cancelRequested)
        try container.encodeIfPresent(expiryDate, forKey: .expiryDate)
    }
}

