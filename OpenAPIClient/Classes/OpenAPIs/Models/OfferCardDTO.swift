//
// OfferCardDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут.  */
public struct OfferCardDTO: Codable, JSONEncodable, Hashable {

    static let offerIdRule = StringRule(minLength: 1, maxLength: 255, pattern: "/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")
    /** Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    public var offerId: String
    public var mapping: GetMappingDTO?
    /** Список характеристик с их значениями.  */
    public var parameterValues: [ParameterValueDTO]?
    public var cardStatus: OfferCardStatusType?
    /** Процент заполненности карточки. */
    public var contentRating: Int?
    /** Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку.  */
    public var recommendations: [OfferCardRecommendationDTO]?
    /** Ошибки в контенте, препятствующие размещению товара на витрине. */
    public var errors: [OfferErrorDTO]?
    /** Связанные с контентом предупреждения, не препятствующие размещению товара на витрине. */
    public var warnings: [OfferErrorDTO]?

    public init(offerId: String, mapping: GetMappingDTO? = nil, parameterValues: [ParameterValueDTO]? = nil, cardStatus: OfferCardStatusType? = nil, contentRating: Int? = nil, recommendations: [OfferCardRecommendationDTO]? = nil, errors: [OfferErrorDTO]? = nil, warnings: [OfferErrorDTO]? = nil) {
        self.offerId = offerId
        self.mapping = mapping
        self.parameterValues = parameterValues
        self.cardStatus = cardStatus
        self.contentRating = contentRating
        self.recommendations = recommendations
        self.errors = errors
        self.warnings = warnings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case offerId
        case mapping
        case parameterValues
        case cardStatus
        case contentRating
        case recommendations
        case errors
        case warnings
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(offerId, forKey: .offerId)
        try container.encodeIfPresent(mapping, forKey: .mapping)
        try container.encodeIfPresent(parameterValues, forKey: .parameterValues)
        try container.encodeIfPresent(cardStatus, forKey: .cardStatus)
        try container.encodeIfPresent(contentRating, forKey: .contentRating)
        try container.encodeIfPresent(recommendations, forKey: .recommendations)
        try container.encodeIfPresent(errors, forKey: .errors)
        try container.encodeIfPresent(warnings, forKey: .warnings)
    }
}

