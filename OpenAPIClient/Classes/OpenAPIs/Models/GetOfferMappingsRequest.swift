//
// GetOfferMappingsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetOfferMappingsRequest: Codable, JSONEncodable, Hashable {

    static let offerIdsRule = ArrayRule(minItems: 1, maxItems: 200, uniqueItems: false)
    static let cardStatusesRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    static let categoryIdsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    static let vendorNamesRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    static let tagsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    /** Идентификаторы товаров, информация о которых нужна.  {% note warning \"Такой список возвращается только целиком\" %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте: * `page_token`; * `limit`; * `cardStatuses`; * `categoryIds`; * `vendorNames`; * `tags`; * `archived`.  {% endnote %}     */
    public var offerIds: [String]?
    /** Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html)  */
    public var cardStatuses: [OfferCardStatusType]?
    /** Фильтр по категориям на Маркете. */
    public var categoryIds: [Int]?
    /** Фильтр по брендам. */
    public var vendorNames: [String]?
    /** Фильтр по тегам. */
    public var tags: [String]?
    /** Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить товары, находящиеся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращаются товары, не находящиеся в архиве.  */
    public var archived: Bool?

    public init(offerIds: [String]? = nil, cardStatuses: [OfferCardStatusType]? = nil, categoryIds: [Int]? = nil, vendorNames: [String]? = nil, tags: [String]? = nil, archived: Bool? = nil) {
        self.offerIds = offerIds
        self.cardStatuses = cardStatuses
        self.categoryIds = categoryIds
        self.vendorNames = vendorNames
        self.tags = tags
        self.archived = archived
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case offerIds
        case cardStatuses
        case categoryIds
        case vendorNames
        case tags
        case archived
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(offerIds, forKey: .offerIds)
        try container.encodeIfPresent(cardStatuses, forKey: .cardStatuses)
        try container.encodeIfPresent(categoryIds, forKey: .categoryIds)
        try container.encodeIfPresent(vendorNames, forKey: .vendorNames)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(archived, forKey: .archived)
    }
}

