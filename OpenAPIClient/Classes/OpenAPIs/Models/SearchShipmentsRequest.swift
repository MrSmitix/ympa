//
// SearchShipmentsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Запрос информации об отгрузках. */
public struct SearchShipmentsRequest: Codable, JSONEncodable, Hashable {

    static let statusesRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: true)
    static let orderIdsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: true)
    /** Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`.  */
    public var dateFrom: Date
    /** Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`.  */
    public var dateTo: Date
    /** Список статусов отгрузок. */
    public var statuses: Set<ShipmentStatusType>?
    /** Список идентификаторов заказов из отгрузок. */
    public var orderIds: Set<Int64>?
    /** Возвращать ли отмененные заказы.  Значение по умолчанию — `true`. Если возвращать отмененные заказы не нужно, передайте значение `false`.  */
    public var cancelledOrders: Bool? = true

    public init(dateFrom: Date, dateTo: Date, statuses: Set<ShipmentStatusType>? = nil, orderIds: Set<Int64>? = nil, cancelledOrders: Bool? = true) {
        self.dateFrom = dateFrom
        self.dateTo = dateTo
        self.statuses = statuses
        self.orderIds = orderIds
        self.cancelledOrders = cancelledOrders
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dateFrom
        case dateTo
        case statuses
        case orderIds
        case cancelledOrders
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(dateFrom, forKey: .dateFrom)
        try container.encode(dateTo, forKey: .dateTo)
        try container.encodeIfPresent(statuses, forKey: .statuses)
        try container.encodeIfPresent(orderIds, forKey: .orderIds)
        try container.encodeIfPresent(cancelledOrders, forKey: .cancelledOrders)
    }
}

