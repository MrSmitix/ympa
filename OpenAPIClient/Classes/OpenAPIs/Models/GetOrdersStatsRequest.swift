//
// GetOrdersStatsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Запрос информации по заказам. */
public struct GetOrdersStatsRequest: Codable, JSONEncodable, Hashable {

    /** Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`.  */
    public var dateFrom: Date?
    /** Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`.  */
    public var dateTo: Date?
    /** Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`.  */
    public var updateFrom: Date?
    /** Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`.  */
    public var updateTo: Date?
    /** Список идентификаторов заказов. */
    public var orders: [Int64]?
    /** Список статусов заказов. */
    public var statuses: [OrderStatsStatusType]?
    /** Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям.  */
    public var hasCis: Bool?

    public init(dateFrom: Date? = nil, dateTo: Date? = nil, updateFrom: Date? = nil, updateTo: Date? = nil, orders: [Int64]? = nil, statuses: [OrderStatsStatusType]? = nil, hasCis: Bool? = nil) {
        self.dateFrom = dateFrom
        self.dateTo = dateTo
        self.updateFrom = updateFrom
        self.updateTo = updateTo
        self.orders = orders
        self.statuses = statuses
        self.hasCis = hasCis
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dateFrom
        case dateTo
        case updateFrom
        case updateTo
        case orders
        case statuses
        case hasCis
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(dateFrom, forKey: .dateFrom)
        try container.encodeIfPresent(dateTo, forKey: .dateTo)
        try container.encodeIfPresent(updateFrom, forKey: .updateFrom)
        try container.encodeIfPresent(updateTo, forKey: .updateTo)
        try container.encodeIfPresent(orders, forKey: .orders)
        try container.encodeIfPresent(statuses, forKey: .statuses)
        try container.encodeIfPresent(hasCis, forKey: .hasCis)
    }
}

