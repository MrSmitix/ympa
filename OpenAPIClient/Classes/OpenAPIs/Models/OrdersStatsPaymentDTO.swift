//
// OrdersStatsPaymentDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о денежных переводах по заказу. */
public struct OrdersStatsPaymentDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор денежного перевода. */
    public var id: String?
    /** Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`.  */
    public var date: Date?
    public var type: OrdersStatsPaymentType?
    public var source: OrdersStatsPaymentSourceType?
    /** Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой.  */
    public var total: Double?
    public var paymentOrder: OrdersStatsPaymentOrderDTO?

    public init(id: String? = nil, date: Date? = nil, type: OrdersStatsPaymentType? = nil, source: OrdersStatsPaymentSourceType? = nil, total: Double? = nil, paymentOrder: OrdersStatsPaymentOrderDTO? = nil) {
        self.id = id
        self.date = date
        self.type = type
        self.source = source
        self.total = total
        self.paymentOrder = paymentOrder
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case date
        case type
        case source
        case total
        case paymentOrder
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(paymentOrder, forKey: .paymentOrder)
    }
}

