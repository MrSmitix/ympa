//
// ReturnDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Возврат заказа. */
public struct ReturnDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор возврата. */
    public var id: Int64?
    /** Номер заказа. */
    public var orderId: Int64?
    /** Дата создания возврата клиентом. */
    public var creationDate: Date?
    /** Дата обновления возврата. */
    public var updateDate: Date?
    public var refundStatus: RefundStatusType?
    public var logisticPickupPoint: LogisticPickupPointDTO?
    public var shipmentRecipientType: RecipientType?
    public var shipmentStatus: ReturnShipmentStatusType?
    /** Сумма возврата. */
    public var refundAmount: Int64?
    /** Список товаров в возврате. */
    public var items: [ReturnItemDTO]
    public var returnType: ReturnType?
    /** Используется ли опция **Быстрый возврат денег за дешевый брак**.  */
    public var fastReturn: Bool?

    public init(id: Int64? = nil, orderId: Int64? = nil, creationDate: Date? = nil, updateDate: Date? = nil, refundStatus: RefundStatusType? = nil, logisticPickupPoint: LogisticPickupPointDTO? = nil, shipmentRecipientType: RecipientType? = nil, shipmentStatus: ReturnShipmentStatusType? = nil, refundAmount: Int64? = nil, items: [ReturnItemDTO], returnType: ReturnType? = nil, fastReturn: Bool? = nil) {
        self.id = id
        self.orderId = orderId
        self.creationDate = creationDate
        self.updateDate = updateDate
        self.refundStatus = refundStatus
        self.logisticPickupPoint = logisticPickupPoint
        self.shipmentRecipientType = shipmentRecipientType
        self.shipmentStatus = shipmentStatus
        self.refundAmount = refundAmount
        self.items = items
        self.returnType = returnType
        self.fastReturn = fastReturn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case orderId
        case creationDate
        case updateDate
        case refundStatus
        case logisticPickupPoint
        case shipmentRecipientType
        case shipmentStatus
        case refundAmount
        case items
        case returnType
        case fastReturn
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(updateDate, forKey: .updateDate)
        try container.encodeIfPresent(refundStatus, forKey: .refundStatus)
        try container.encodeIfPresent(logisticPickupPoint, forKey: .logisticPickupPoint)
        try container.encodeIfPresent(shipmentRecipientType, forKey: .shipmentRecipientType)
        try container.encodeIfPresent(shipmentStatus, forKey: .shipmentStatus)
        try container.encodeIfPresent(refundAmount, forKey: .refundAmount)
        try container.encode(items, forKey: .items)
        try container.encodeIfPresent(returnType, forKey: .returnType)
        try container.encodeIfPresent(fastReturn, forKey: .fastReturn)
    }
}

