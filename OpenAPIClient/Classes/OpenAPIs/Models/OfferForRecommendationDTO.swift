//
// OfferForRecommendationDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о состоянии цены на товар. */
public struct OfferForRecommendationDTO: Codable, JSONEncodable, Hashable {

    static let offerIdRule = StringRule(minLength: 1, maxLength: 255, pattern: "/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")
    /** Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    public var offerId: String?
    public var price: BasePriceDTO?
    public var cofinancePrice: GetPriceDTO?
    public var competitiveness: PriceCompetitivenessType?
    /** Количество показов карточки товара за последние 7 дней. */
    public var shows: Int64?

    public init(offerId: String? = nil, price: BasePriceDTO? = nil, cofinancePrice: GetPriceDTO? = nil, competitiveness: PriceCompetitivenessType? = nil, shows: Int64? = nil) {
        self.offerId = offerId
        self.price = price
        self.cofinancePrice = cofinancePrice
        self.competitiveness = competitiveness
        self.shows = shows
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case offerId
        case price
        case cofinancePrice
        case competitiveness
        case shows
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(offerId, forKey: .offerId)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(cofinancePrice, forKey: .cofinancePrice)
        try container.encodeIfPresent(competitiveness, forKey: .competitiveness)
        try container.encodeIfPresent(shows, forKey: .shows)
    }
}

