//
// OfferDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Предложение. */
public struct OfferDTO: Codable, JSONEncodable, Hashable {

    /** Цена предложения.  До версии 2.0 партнерского API у параметра был тип String.  */
    public var price: Double?
    /** Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API.  */
    public var feedId: Int64?
    /** Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API.  */
    public var id: String?
    /** Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.  */
    public var shopCategoryId: String?
    /** Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API.  */
    public var marketCategoryId: Int?
    /** Цена предложения без скидки. */
    public var preDiscountPrice: Double?
    /** Скидка на предложение в процентах. */
    public var discount: Int?
    /** Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API.  */
    public var cutPrice: Bool?
    /** URL-адрес предложения на сайте магазина. */
    public var url: String?
    /** Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %}  */
    public var modelId: Int64
    /** Наименование предложения. */
    public var name: String?
    public var currency: CurrencyType?
    /** {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.  */
    public var bid: Double?
    /** {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.  */
    public var cbid: Double?
    /** {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA.  */
    public var fee: Double?
    /** Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина.  */
    public var blocked: Bool?

    public init(price: Double? = nil, feedId: Int64? = nil, id: String? = nil, shopCategoryId: String? = nil, marketCategoryId: Int? = nil, preDiscountPrice: Double? = nil, discount: Int? = nil, cutPrice: Bool? = nil, url: String? = nil, modelId: Int64, name: String? = nil, currency: CurrencyType? = nil, bid: Double? = nil, cbid: Double? = nil, fee: Double? = nil, blocked: Bool? = nil) {
        self.price = price
        self.feedId = feedId
        self.id = id
        self.shopCategoryId = shopCategoryId
        self.marketCategoryId = marketCategoryId
        self.preDiscountPrice = preDiscountPrice
        self.discount = discount
        self.cutPrice = cutPrice
        self.url = url
        self.modelId = modelId
        self.name = name
        self.currency = currency
        self.bid = bid
        self.cbid = cbid
        self.fee = fee
        self.blocked = blocked
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case price
        case feedId
        case id
        case shopCategoryId
        case marketCategoryId
        case preDiscountPrice
        case discount
        case cutPrice
        case url
        case modelId
        case name
        case currency
        case bid
        case cbid
        case fee
        case blocked
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(feedId, forKey: .feedId)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(shopCategoryId, forKey: .shopCategoryId)
        try container.encodeIfPresent(marketCategoryId, forKey: .marketCategoryId)
        try container.encodeIfPresent(preDiscountPrice, forKey: .preDiscountPrice)
        try container.encodeIfPresent(discount, forKey: .discount)
        try container.encodeIfPresent(cutPrice, forKey: .cutPrice)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encode(modelId, forKey: .modelId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(bid, forKey: .bid)
        try container.encodeIfPresent(cbid, forKey: .cbid)
        try container.encodeIfPresent(fee, forKey: .fee)
        try container.encodeIfPresent(blocked, forKey: .blocked)
    }
}

