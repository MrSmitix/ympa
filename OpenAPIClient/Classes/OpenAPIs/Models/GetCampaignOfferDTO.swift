//
// GetCampaignOfferDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Параметры размещения товара в магазине. */
public struct GetCampaignOfferDTO: Codable, JSONEncodable, Hashable {

    static let offerIdRule = StringRule(minLength: 1, maxLength: 255, pattern: "/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")
    /** Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    public var offerId: String
    public var quantum: QuantumDTO?
    /** Есть ли товар в продаже.  */
    public var available: Bool?
    public var basicPrice: GetPriceWithDiscountDTO?
    public var campaignPrice: GetPriceWithVatDTO?
    public var status: OfferCampaignStatusType?
    /** Ошибки, препятствующие размещению товара на витрине.  */
    public var errors: [OfferErrorDTO]?
    /** Предупреждения, не препятствующие размещению товара на витрине.  */
    public var warnings: [OfferErrorDTO]?

    public init(offerId: String, quantum: QuantumDTO? = nil, available: Bool? = nil, basicPrice: GetPriceWithDiscountDTO? = nil, campaignPrice: GetPriceWithVatDTO? = nil, status: OfferCampaignStatusType? = nil, errors: [OfferErrorDTO]? = nil, warnings: [OfferErrorDTO]? = nil) {
        self.offerId = offerId
        self.quantum = quantum
        self.available = available
        self.basicPrice = basicPrice
        self.campaignPrice = campaignPrice
        self.status = status
        self.errors = errors
        self.warnings = warnings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case offerId
        case quantum
        case available
        case basicPrice
        case campaignPrice
        case status
        case errors
        case warnings
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(offerId, forKey: .offerId)
        try container.encodeIfPresent(quantum, forKey: .quantum)
        try container.encodeIfPresent(available, forKey: .available)
        try container.encodeIfPresent(basicPrice, forKey: .basicPrice)
        try container.encodeIfPresent(campaignPrice, forKey: .campaignPrice)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(errors, forKey: .errors)
        try container.encodeIfPresent(warnings, forKey: .warnings)
    }
}

