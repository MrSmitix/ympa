//
// FeedIndexLogsRecordDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Список отчетов по индексации прайс-листа. */
public struct FeedIndexLogsRecordDTO: Codable, JSONEncodable, Hashable {

    /** Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */
    public var downloadTime: Date?
    /** Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */
    public var fileTime: Date?
    /** Идентификатор индексации. */
    public var generationId: Int64?
    public var indexType: FeedIndexLogsIndexType?
    /** Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */
    public var publishedTime: Date?
    public var status: FeedIndexLogsStatusType?
    public var error: FeedIndexLogsErrorDTO?
    public var offers: FeedIndexLogsOffersDTO?

    public init(downloadTime: Date? = nil, fileTime: Date? = nil, generationId: Int64? = nil, indexType: FeedIndexLogsIndexType? = nil, publishedTime: Date? = nil, status: FeedIndexLogsStatusType? = nil, error: FeedIndexLogsErrorDTO? = nil, offers: FeedIndexLogsOffersDTO? = nil) {
        self.downloadTime = downloadTime
        self.fileTime = fileTime
        self.generationId = generationId
        self.indexType = indexType
        self.publishedTime = publishedTime
        self.status = status
        self.error = error
        self.offers = offers
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case downloadTime
        case fileTime
        case generationId
        case indexType
        case publishedTime
        case status
        case error
        case offers
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(downloadTime, forKey: .downloadTime)
        try container.encodeIfPresent(fileTime, forKey: .fileTime)
        try container.encodeIfPresent(generationId, forKey: .generationId)
        try container.encodeIfPresent(indexType, forKey: .indexType)
        try container.encodeIfPresent(publishedTime, forKey: .publishedTime)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(offers, forKey: .offers)
    }
}

