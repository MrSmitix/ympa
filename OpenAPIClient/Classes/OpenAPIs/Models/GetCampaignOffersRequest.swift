//
// GetCampaignOffersRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке.  */
public struct GetCampaignOffersRequest: Codable, JSONEncodable, Hashable {

    static let offerIdsRule = ArrayRule(minItems: nil, maxItems: 200, uniqueItems: false)
    /** Идентификаторы товаров, информация о которых нужна.  {% note warning \"Такой список возвращается только целиком\" %}  Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * `page_token` * `limit`  {% endnote %}     */
    public var offerIds: [String]?
    /** Фильтр по статусам товаров.  */
    public var statuses: [OfferCampaignStatusType]?
    /** Фильтр по категориям на Маркете. */
    public var categoryIds: [Int]?
    /** Фильтр по брендам. */
    public var vendorNames: [String]?
    /** Фильтр по тегам. */
    public var tags: [String]?

    public init(offerIds: [String]? = nil, statuses: [OfferCampaignStatusType]? = nil, categoryIds: [Int]? = nil, vendorNames: [String]? = nil, tags: [String]? = nil) {
        self.offerIds = offerIds
        self.statuses = statuses
        self.categoryIds = categoryIds
        self.vendorNames = vendorNames
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case offerIds
        case statuses
        case categoryIds
        case vendorNames
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(offerIds, forKey: .offerIds)
        try container.encodeIfPresent(statuses, forKey: .statuses)
        try container.encodeIfPresent(categoryIds, forKey: .categoryIds)
        try container.encodeIfPresent(vendorNames, forKey: .vendorNames)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}

