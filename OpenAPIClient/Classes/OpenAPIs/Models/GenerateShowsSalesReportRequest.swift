//
// GenerateShowsSalesReportRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Данные, необходимые для генерации отчета. */
public struct GenerateShowsSalesReportRequest: Codable, JSONEncodable, Hashable {

    /** Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.  */
    public var businessId: Int64?
    /** Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.  */
    public var campaignId: Int64?
    /** Начало периода, включительно. */
    public var dateFrom: Date
    /** Конец периода, включительно. */
    public var dateTo: Date
    public var grouping: ShowsSalesGroupingType

    public init(businessId: Int64? = nil, campaignId: Int64? = nil, dateFrom: Date, dateTo: Date, grouping: ShowsSalesGroupingType) {
        self.businessId = businessId
        self.campaignId = campaignId
        self.dateFrom = dateFrom
        self.dateTo = dateTo
        self.grouping = grouping
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case businessId
        case campaignId
        case dateFrom
        case dateTo
        case grouping
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(businessId, forKey: .businessId)
        try container.encodeIfPresent(campaignId, forKey: .campaignId)
        try container.encode(dateFrom, forKey: .dateFrom)
        try container.encode(dateTo, forKey: .dateTo)
        try container.encode(grouping, forKey: .grouping)
    }
}

