//
// BriefOrderItemDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о маркированном товаре. */
public struct BriefOrderItemDTO: Codable, JSONEncodable, Hashable {

    static let offerIdRule = StringRule(minLength: 1, maxLength: 255, pattern: "/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")
    /** Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.  */
    public var id: Int64?
    public var vat: OrderVatType?
    /** Количество единиц товара. */
    public var count: Int?
    /** Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка.  */
    public var price: Double?
    /** Название товара. */
    public var offerName: String?
    /** Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    public var offerId: String?
    /** Переданные вами коды маркировки. */
    public var instances: [OrderItemInstanceDTO]?

    public init(id: Int64? = nil, vat: OrderVatType? = nil, count: Int? = nil, price: Double? = nil, offerName: String? = nil, offerId: String? = nil, instances: [OrderItemInstanceDTO]? = nil) {
        self.id = id
        self.vat = vat
        self.count = count
        self.price = price
        self.offerName = offerName
        self.offerId = offerId
        self.instances = instances
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case vat
        case count
        case price
        case offerName
        case offerId
        case instances
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(vat, forKey: .vat)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(offerName, forKey: .offerName)
        try container.encodeIfPresent(offerId, forKey: .offerId)
        try container.encodeIfPresent(instances, forKey: .instances)
    }
}

