//
// GoodsStatsGoodsDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о товаре. */
public struct GoodsStatsGoodsDTO: Codable, JSONEncodable, Hashable {

    static let shopSkuRule = StringRule(minLength: 1, maxLength: 255, pattern: "/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")
    /** Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    public var shopSku: String?
    /** SKU на Маркете. */
    public var marketSku: Int64?
    /** Название товара. */
    public var name: String?
    /** Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/). */
    public var price: Double?
    /** Идентификатор категории товара на Маркете. */
    public var categoryId: Int64?
    /** Название категории товара на Маркете. */
    public var categoryName: String?
    public var weightDimensions: GoodsStatsWeightDimensionsDTO?
    /** Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе.  */
    public var warehouses: [GoodsStatsWarehouseDTO]?
    /** Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/).  */
    public var tariffs: [TariffDTO]?
    /** Ссылки (URL) изображений товара в хорошем качестве. */
    public var pictures: [String]?

    public init(shopSku: String? = nil, marketSku: Int64? = nil, name: String? = nil, price: Double? = nil, categoryId: Int64? = nil, categoryName: String? = nil, weightDimensions: GoodsStatsWeightDimensionsDTO? = nil, warehouses: [GoodsStatsWarehouseDTO]? = nil, tariffs: [TariffDTO]? = nil, pictures: [String]? = nil) {
        self.shopSku = shopSku
        self.marketSku = marketSku
        self.name = name
        self.price = price
        self.categoryId = categoryId
        self.categoryName = categoryName
        self.weightDimensions = weightDimensions
        self.warehouses = warehouses
        self.tariffs = tariffs
        self.pictures = pictures
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case shopSku
        case marketSku
        case name
        case price
        case categoryId
        case categoryName
        case weightDimensions
        case warehouses
        case tariffs
        case pictures
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(shopSku, forKey: .shopSku)
        try container.encodeIfPresent(marketSku, forKey: .marketSku)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(categoryName, forKey: .categoryName)
        try container.encodeIfPresent(weightDimensions, forKey: .weightDimensions)
        try container.encodeIfPresent(warehouses, forKey: .warehouses)
        try container.encodeIfPresent(tariffs, forKey: .tariffs)
        try container.encodeIfPresent(pictures, forKey: .pictures)
    }
}

