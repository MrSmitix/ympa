//
// OrderBoxLayoutItemDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о товаре в коробке. */
public struct OrderBoxLayoutItemDTO: Codable, JSONEncodable, Hashable {

    static let fullCountRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** Идентификатор товара в заказе.  {% cut \"Где его взять\" %}  Идентификатор приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`.  {% endcut %}    */
    public var id: Int64
    /** Количество единиц товара в коробке.  Используйте это поле, если в коробке поедут целые товары, не разделенные на части. Не используйте это поле одновременно с `partialCount`.  */
    public var fullCount: Int?
    public var partialCount: OrderBoxLayoutPartialCountDTO?
    /** Переданные вами коды маркировки. */
    public var instances: [BriefOrderItemInstanceDTO]?

    public init(id: Int64, fullCount: Int? = nil, partialCount: OrderBoxLayoutPartialCountDTO? = nil, instances: [BriefOrderItemInstanceDTO]? = nil) {
        self.id = id
        self.fullCount = fullCount
        self.partialCount = partialCount
        self.instances = instances
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case fullCount
        case partialCount
        case instances
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(fullCount, forKey: .fullCount)
        try container.encodeIfPresent(partialCount, forKey: .partialCount)
        try container.encodeIfPresent(instances, forKey: .instances)
    }
}

