//
// OrderDeliveryDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о доставке. */
public struct OrderDeliveryDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md).  */
    public var id: String?
    public var type: OrderDeliveryType?
    /** Наименование службы доставки. */
    public var serviceName: String?
    /** {% note warning \"\" %}  Этот параметр устарел. Стоимость доставки смотрите в параметре `deliveryTotal`.  {% endnote %}  Стоимость доставки в валюте заказа.  */
    @available(*, deprecated, message: "This property is deprecated.")
    public var price: Double?
    public var deliveryPartnerType: OrderDeliveryPartnerType?
    public var courier: OrderCourierDTO?
    public var dates: OrderDeliveryDatesDTO?
    public var region: RegionDTO?
    public var address: OrderDeliveryAddressDTO?
    public var vat: OrderVatType?
    /** Идентификатор службы доставки. */
    public var deliveryServiceId: Int64?
    public var liftType: OrderLiftType?
    /** Стоимость подъема на этаж. */
    public var liftPrice: Double?
    /** Идентификатор пункта самовывоза, присвоенный магазином. */
    public var outletCode: String?
    /** Формат даты: `ДД-ММ-ГГГГ`.  */
    public var outletStorageLimitDate: String?
    public var dispatchType: OrderDeliveryDispatchType?
    /** Информация для отслеживания перемещений посылки. */
    public var tracks: [OrderTrackDTO]?
    /** Информация о посылках. */
    public var shipments: [OrderShipmentDTO]?
    /** Приблизительная ли дата доставки. */
    public var estimated: Bool?
    public var eacType: OrderDeliveryEacType?
    /** Код подтверждения ЭАПП (для типа `MERCHANT_TO_COURIER`).  */
    public var eacCode: String?

    public init(id: String? = nil, type: OrderDeliveryType? = nil, serviceName: String? = nil, price: Double? = nil, deliveryPartnerType: OrderDeliveryPartnerType? = nil, courier: OrderCourierDTO? = nil, dates: OrderDeliveryDatesDTO? = nil, region: RegionDTO? = nil, address: OrderDeliveryAddressDTO? = nil, vat: OrderVatType? = nil, deliveryServiceId: Int64? = nil, liftType: OrderLiftType? = nil, liftPrice: Double? = nil, outletCode: String? = nil, outletStorageLimitDate: String? = nil, dispatchType: OrderDeliveryDispatchType? = nil, tracks: [OrderTrackDTO]? = nil, shipments: [OrderShipmentDTO]? = nil, estimated: Bool? = nil, eacType: OrderDeliveryEacType? = nil, eacCode: String? = nil) {
        self.id = id
        self.type = type
        self.serviceName = serviceName
        self.price = price
        self.deliveryPartnerType = deliveryPartnerType
        self.courier = courier
        self.dates = dates
        self.region = region
        self.address = address
        self.vat = vat
        self.deliveryServiceId = deliveryServiceId
        self.liftType = liftType
        self.liftPrice = liftPrice
        self.outletCode = outletCode
        self.outletStorageLimitDate = outletStorageLimitDate
        self.dispatchType = dispatchType
        self.tracks = tracks
        self.shipments = shipments
        self.estimated = estimated
        self.eacType = eacType
        self.eacCode = eacCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case serviceName
        case price
        case deliveryPartnerType
        case courier
        case dates
        case region
        case address
        case vat
        case deliveryServiceId
        case liftType
        case liftPrice
        case outletCode
        case outletStorageLimitDate
        case dispatchType
        case tracks
        case shipments
        case estimated
        case eacType
        case eacCode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(serviceName, forKey: .serviceName)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(deliveryPartnerType, forKey: .deliveryPartnerType)
        try container.encodeIfPresent(courier, forKey: .courier)
        try container.encodeIfPresent(dates, forKey: .dates)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(vat, forKey: .vat)
        try container.encodeIfPresent(deliveryServiceId, forKey: .deliveryServiceId)
        try container.encodeIfPresent(liftType, forKey: .liftType)
        try container.encodeIfPresent(liftPrice, forKey: .liftPrice)
        try container.encodeIfPresent(outletCode, forKey: .outletCode)
        try container.encodeIfPresent(outletStorageLimitDate, forKey: .outletStorageLimitDate)
        try container.encodeIfPresent(dispatchType, forKey: .dispatchType)
        try container.encodeIfPresent(tracks, forKey: .tracks)
        try container.encodeIfPresent(shipments, forKey: .shipments)
        try container.encodeIfPresent(estimated, forKey: .estimated)
        try container.encodeIfPresent(eacType, forKey: .eacType)
        try container.encodeIfPresent(eacCode, forKey: .eacCode)
    }
}

