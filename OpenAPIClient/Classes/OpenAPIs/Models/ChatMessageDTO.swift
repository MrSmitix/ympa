//
// ChatMessageDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о сообщениях. */
public struct ChatMessageDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор сообщения. */
    public var messageId: Int64
    /** Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.  */
    public var createdAt: Date
    public var sender: ChatMessageSenderType
    /** Текст сообщения.  Необязательный параметр, если возвращается параметр `payload`.  */
    public var message: String?
    /** Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр `message`.  */
    public var payload: [ChatMessagePayloadDTO]?

    public init(messageId: Int64, createdAt: Date, sender: ChatMessageSenderType, message: String? = nil, payload: [ChatMessagePayloadDTO]? = nil) {
        self.messageId = messageId
        self.createdAt = createdAt
        self.sender = sender
        self.message = message
        self.payload = payload
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case messageId
        case createdAt
        case sender
        case message
        case payload
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(messageId, forKey: .messageId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(sender, forKey: .sender)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(payload, forKey: .payload)
    }
}

