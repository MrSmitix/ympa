//
// UpdateOfferContentResultDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Ошибки и предупреждения, которые появились из-за переданных характеристик. */
public struct UpdateOfferContentResultDTO: Codable, JSONEncodable, Hashable {

    static let offerIdRule = StringRule(minLength: 1, maxLength: 255, pattern: "/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")
    /** Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    public var offerId: String
    /** Ошибки — информация в каталоге не обновится. */
    public var errors: [OfferContentErrorDTO]?
    /** Предупреждения — информация в каталоге обновится. */
    public var warnings: [OfferContentErrorDTO]?

    public init(offerId: String, errors: [OfferContentErrorDTO]? = nil, warnings: [OfferContentErrorDTO]? = nil) {
        self.offerId = offerId
        self.errors = errors
        self.warnings = warnings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case offerId
        case errors
        case warnings
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(offerId, forKey: .offerId)
        try container.encodeIfPresent(errors, forKey: .errors)
        try container.encodeIfPresent(warnings, forKey: .warnings)
    }
}

