//
// ValueRestrictionDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: &#x60;S&#x60;, &#x60;M&#x60;, &#x60;L&#x60;, &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;, &#x60;42/164&#x60;, &#x60;46/176&#x60;, &#x60;44S&#x60;.  Если ограничивающая характеристика **размерная сетка** принимает значение &#x60;RU&#x60;, список возможных значений размера сокращается до &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;.  */
public struct ValueRestrictionDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор ограничивающей характеристики. */
    public var limitingParameterId: Int64
    /** Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики. */
    public var limitedValues: [OptionValuesLimitedDTO]

    public init(limitingParameterId: Int64, limitedValues: [OptionValuesLimitedDTO]) {
        self.limitingParameterId = limitingParameterId
        self.limitedValues = limitedValues
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case limitingParameterId
        case limitedValues
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(limitingParameterId, forKey: .limitingParameterId)
        try container.encode(limitedValues, forKey: .limitedValues)
    }
}

