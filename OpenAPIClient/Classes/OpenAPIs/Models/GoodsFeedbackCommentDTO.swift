//
// GoodsFeedbackCommentDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Комментарий к отзыву. */
public struct GoodsFeedbackCommentDTO: Codable, JSONEncodable, Hashable {

    static let textRule = StringRule(minLength: 1, maxLength: 4096, pattern: nil)
    /** Идентификатор комментария к отзыву.  */
    public var id: Int64
    /** Текст комментария. */
    public var text: String
    /** Может ли продавец изменять комментарий или удалять его. */
    public var canModify: Bool?
    /** Идентификатор комментария к отзыву.  */
    public var parentId: Int64?
    public var author: GoodsFeedbackCommentAuthorDTO
    public var status: GoodsFeedbackCommentStatusType

    public init(id: Int64, text: String, canModify: Bool? = nil, parentId: Int64? = nil, author: GoodsFeedbackCommentAuthorDTO, status: GoodsFeedbackCommentStatusType) {
        self.id = id
        self.text = text
        self.canModify = canModify
        self.parentId = parentId
        self.author = author
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case text
        case canModify
        case parentId
        case author
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(text, forKey: .text)
        try container.encodeIfPresent(canModify, forKey: .canModify)
        try container.encodeIfPresent(parentId, forKey: .parentId)
        try container.encode(author, forKey: .author)
        try container.encode(status, forKey: .status)
    }
}

