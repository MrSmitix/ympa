//
// OrdersStatsOrderDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о заказе. */
public struct OrdersStatsOrderDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор заказа. */
    public var id: Int64?
    /** Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`.  */
    public var creationDate: Date?
    /** Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва).  */
    public var statusUpdateDate: Date?
    public var status: OrderStatsStatusType?
    /** Идентификатор заказа в информационной системе магазина. */
    public var partnerOrderId: String?
    public var paymentType: OrdersStatsOrderPaymentType?
    /** Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.  */
    public var fake: Bool?
    public var deliveryRegion: OrdersStatsDeliveryRegionDTO?
    /** Список товаров в заказе после возможных изменений. */
    public var items: [OrdersStatsItemDTO]
    /** Список товаров в заказе до изменений. */
    public var initialItems: [OrdersStatsItemDTO]?
    /** Информация о денежных переводах по заказу. */
    public var payments: [OrdersStatsPaymentDTO]
    /** Информация о комиссиях за заказ. */
    public var commissions: [OrdersStatsCommissionDTO]

    public init(id: Int64? = nil, creationDate: Date? = nil, statusUpdateDate: Date? = nil, status: OrderStatsStatusType? = nil, partnerOrderId: String? = nil, paymentType: OrdersStatsOrderPaymentType? = nil, fake: Bool? = nil, deliveryRegion: OrdersStatsDeliveryRegionDTO? = nil, items: [OrdersStatsItemDTO], initialItems: [OrdersStatsItemDTO]? = nil, payments: [OrdersStatsPaymentDTO], commissions: [OrdersStatsCommissionDTO]) {
        self.id = id
        self.creationDate = creationDate
        self.statusUpdateDate = statusUpdateDate
        self.status = status
        self.partnerOrderId = partnerOrderId
        self.paymentType = paymentType
        self.fake = fake
        self.deliveryRegion = deliveryRegion
        self.items = items
        self.initialItems = initialItems
        self.payments = payments
        self.commissions = commissions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case creationDate
        case statusUpdateDate
        case status
        case partnerOrderId
        case paymentType
        case fake
        case deliveryRegion
        case items
        case initialItems
        case payments
        case commissions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(statusUpdateDate, forKey: .statusUpdateDate)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(partnerOrderId, forKey: .partnerOrderId)
        try container.encodeIfPresent(paymentType, forKey: .paymentType)
        try container.encodeIfPresent(fake, forKey: .fake)
        try container.encodeIfPresent(deliveryRegion, forKey: .deliveryRegion)
        try container.encode(items, forKey: .items)
        try container.encodeIfPresent(initialItems, forKey: .initialItems)
        try container.encode(payments, forKey: .payments)
        try container.encode(commissions, forKey: .commissions)
    }
}

