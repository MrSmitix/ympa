//
// GoodsFeedbackDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Отзыв о товаре. */
public struct GoodsFeedbackDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор отзыва.  */
    public var feedbackId: Int64
    /** Дата и время создания отзыва. */
    public var createdAt: Date
    /** Нужен ли ответ на отзыв. */
    public var needReaction: Bool
    public var identifiers: GoodsFeedbackIdentifiersDTO
    /** Имя автора отзыва. */
    public var author: String?
    public var description: GoodsFeedbackDescriptionDTO?
    public var media: GoodsFeedbackMediaDTO?
    public var statistics: GoodsFeedbackStatisticsDTO

    public init(feedbackId: Int64, createdAt: Date, needReaction: Bool, identifiers: GoodsFeedbackIdentifiersDTO, author: String? = nil, description: GoodsFeedbackDescriptionDTO? = nil, media: GoodsFeedbackMediaDTO? = nil, statistics: GoodsFeedbackStatisticsDTO) {
        self.feedbackId = feedbackId
        self.createdAt = createdAt
        self.needReaction = needReaction
        self.identifiers = identifiers
        self.author = author
        self.description = description
        self.media = media
        self.statistics = statistics
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case feedbackId
        case createdAt
        case needReaction
        case identifiers
        case author
        case description
        case media
        case statistics
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(feedbackId, forKey: .feedbackId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(needReaction, forKey: .needReaction)
        try container.encode(identifiers, forKey: .identifiers)
        try container.encodeIfPresent(author, forKey: .author)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(media, forKey: .media)
        try container.encode(statistics, forKey: .statistics)
    }
}

