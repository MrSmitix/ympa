//
// GetWarehouseStocksRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтры для запроса остатков.  */
public struct GetWarehouseStocksRequest: Codable, JSONEncodable, Hashable {

    static let offerIdsRule = ArrayRule(minItems: nil, maxItems: 500, uniqueItems: true)
    /** **Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию — `false`. Если информация нужна, передайте значение `true`.  */
    public var withTurnover: Bool? = false
    /** Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращается информация о товарах, которые не находятся в архиве.  */
    public var archived: Bool?
    /** Фильтр по вашим SKU товаров.  Возвращается информация об остатках всех переданных SKU, включая товары в архиве.  {% note warning \"Такой список возвращается только целиком\" %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * `page_token` * `limit` * `archived`  {% endnote %}     */
    public var offerIds: Set<String>?

    public init(withTurnover: Bool? = false, archived: Bool? = nil, offerIds: Set<String>? = nil) {
        self.withTurnover = withTurnover
        self.archived = archived
        self.offerIds = offerIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case withTurnover
        case archived
        case offerIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(withTurnover, forKey: .withTurnover)
        try container.encodeIfPresent(archived, forKey: .archived)
        try container.encodeIfPresent(offerIds, forKey: .offerIds)
    }
}

