//
// ParameterValueDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — &#x60;ENUM&#x60;. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле &#x60;multivalue&#x60; имеет значение &#x60;true&#x60;.  Для этого в &#x60;parameterValues&#x60; передавайте каждое значение отдельно — несколько объектов с параметрами &#x60;parameterId&#x60;, &#x60;valueId&#x60; и &#x60;value&#x60;. Параметр &#x60;parameterId&#x60; должен быть одинаковым.  */
public struct ParameterValueDTO: Codable, JSONEncodable, Hashable {

    /** Идентификатор характеристики. */
    public var parameterId: Int64
    /** Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию. */
    public var unitId: Int64?
    /** Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`.  */
    public var valueId: Int64?
    /** Значение. */
    public var value: String?

    public init(parameterId: Int64, unitId: Int64? = nil, valueId: Int64? = nil, value: String? = nil) {
        self.parameterId = parameterId
        self.unitId = unitId
        self.valueId = valueId
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case parameterId
        case unitId
        case valueId
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(parameterId, forKey: .parameterId)
        try container.encodeIfPresent(unitId, forKey: .unitId)
        try container.encodeIfPresent(valueId, forKey: .valueId)
        try container.encodeIfPresent(value, forKey: .value)
    }
}

