//
// CategoriesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CategoriesAPI {

    /**
     Лимит на установку кванта продажи и минимального количества товаров в заказе
     
     - parameter getCategoriesMaxSaleQuantumRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCategoriesMaxSaleQuantum(getCategoriesMaxSaleQuantumRequest: GetCategoriesMaxSaleQuantumRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetCategoriesMaxSaleQuantumResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getCategoriesMaxSaleQuantumWithRequestBuilder(getCategoriesMaxSaleQuantumRequest: getCategoriesMaxSaleQuantumRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Лимит на установку кванта продажи и минимального количества товаров в заказе
     - POST /categories/max-sale-quantum
     - Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     - OAuth:
       - type: oauth2
       - name: OAuth
     - parameter getCategoriesMaxSaleQuantumRequest: (body)  
     - returns: RequestBuilder<GetCategoriesMaxSaleQuantumResponse> 
     */
    open class func getCategoriesMaxSaleQuantumWithRequestBuilder(getCategoriesMaxSaleQuantumRequest: GetCategoriesMaxSaleQuantumRequest) -> RequestBuilder<GetCategoriesMaxSaleQuantumResponse> {
        let localVariablePath = "/categories/max-sale-quantum"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getCategoriesMaxSaleQuantumRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetCategoriesMaxSaleQuantumResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Дерево категорий
     
     - parameter getCategoriesRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCategoriesTree(getCategoriesRequest: GetCategoriesRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetCategoriesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getCategoriesTreeWithRequestBuilder(getCategoriesRequest: getCategoriesRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Дерево категорий
     - POST /categories/tree
     - Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     - OAuth:
       - type: oauth2
       - name: OAuth
     - parameter getCategoriesRequest: (body)  (optional)
     - returns: RequestBuilder<GetCategoriesResponse> 
     */
    open class func getCategoriesTreeWithRequestBuilder(getCategoriesRequest: GetCategoriesRequest? = nil) -> RequestBuilder<GetCategoriesResponse> {
        let localVariablePath = "/categories/tree"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getCategoriesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetCategoriesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
