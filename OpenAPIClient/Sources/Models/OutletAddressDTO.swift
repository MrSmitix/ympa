//
// OutletAddressDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Адрес точки продаж.  
public struct OutletAddressDTO: Codable {
    /// Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
    public var regionId: Int64
    /// Улица.
    public var street: String?
    /// Номер дома.
    public var number: String?
    /// Номер строения.
    public var building: String?
    /// Номер владения.
    public var estate: String?
    /// Номер корпуса.
    public var block: String?
    /// Дополнительная информация.
    public var additional: String?
    /// Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
    public var km: Int?
    /// {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 
    public var city: String?

    public init(regionId: Int64, street: String? = nil, number: String? = nil, building: String? = nil, estate: String? = nil, block: String? = nil, additional: String? = nil, km: Int? = nil, city: String? = nil) {
        self.regionId = regionId
        self.street = street
        self.number = number
        self.building = building
        self.estate = estate
        self.block = block
        self.additional = additional
        self.km = km
        self.city = city
    }
}
