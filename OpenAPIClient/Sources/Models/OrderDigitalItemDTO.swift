//
// OrderDigitalItemDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Ключ цифрового товара. 
public struct OrderDigitalItemDTO: Codable {
    /// Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`. 
    public var id: Int64
    /// Сам ключ.
    public var code: String
    /// Инструкция по активации.
    public var slip: String
    /// Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: `ГГГГ-ММ-ДД`. 
    public var activateTill: Date

    public init(id: Int64, code: String, slip: String, activateTill: Date) {
        self.id = id
        self.code = code
        self.slip = slip
        self.activateTill = activateTill
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case code
        case slip
        case activateTill = "activate_till"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decode(Int64.self, forKey: .id)
        code = try container.decode(String.self, forKey: .code)
        slip = try container.decode(String.self, forKey: .slip)
        activateTill = try container.decode(Date.self, forKey: .activateTill)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(code, forKey: .code)
        try container.encode(slip, forKey: .slip)
        try container.encode(activateTill, forKey: .activateTill)
    }
}
