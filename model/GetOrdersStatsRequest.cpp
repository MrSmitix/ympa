/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetOrdersStatsRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetOrdersStatsRequest::GetOrdersStatsRequest()
{
    m_DateFromIsSet = false;
    m_DateToIsSet = false;
    m_UpdateFromIsSet = false;
    m_UpdateToIsSet = false;
    m_OrdersIsSet = false;
    m_StatusesIsSet = false;
    m_HasCis = false;
    m_HasCisIsSet = false;
    
}

void GetOrdersStatsRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetOrdersStatsRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetOrdersStatsRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetOrdersStatsRequest" : pathPrefix;

                         
    if (ordersIsSet())
    {
        const std::vector<int64_t>& value = m_Orders;
        const std::string currentValuePath = _pathPrefix + ".orders";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (statusesIsSet())
    {
        const std::vector<org::openapitools::server::model::OrderStatsStatusType>& value = m_Statuses;
        const std::string currentValuePath = _pathPrefix + ".statuses";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderStatsStatusType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool GetOrdersStatsRequest::operator==(const GetOrdersStatsRequest& rhs) const
{
    return
    
    
    
    ((!dateFromIsSet() && !rhs.dateFromIsSet()) || (dateFromIsSet() && rhs.dateFromIsSet() && getDateFrom() == rhs.getDateFrom())) &&
    
    
    ((!dateToIsSet() && !rhs.dateToIsSet()) || (dateToIsSet() && rhs.dateToIsSet() && getDateTo() == rhs.getDateTo())) &&
    
    
    ((!updateFromIsSet() && !rhs.updateFromIsSet()) || (updateFromIsSet() && rhs.updateFromIsSet() && getUpdateFrom() == rhs.getUpdateFrom())) &&
    
    
    ((!updateToIsSet() && !rhs.updateToIsSet()) || (updateToIsSet() && rhs.updateToIsSet() && getUpdateTo() == rhs.getUpdateTo())) &&
    
    
    ((!ordersIsSet() && !rhs.ordersIsSet()) || (ordersIsSet() && rhs.ordersIsSet() && getOrders() == rhs.getOrders())) &&
    
    
    ((!statusesIsSet() && !rhs.statusesIsSet()) || (statusesIsSet() && rhs.statusesIsSet() && getStatuses() == rhs.getStatuses())) &&
    
    
    ((!hasCisIsSet() && !rhs.hasCisIsSet()) || (hasCisIsSet() && rhs.hasCisIsSet() && isHasCis() == rhs.isHasCis()))
    
    ;
}

bool GetOrdersStatsRequest::operator!=(const GetOrdersStatsRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetOrdersStatsRequest& o)
{
    j = nlohmann::json::object();
    if(o.dateFromIsSet())
        j["dateFrom"] = o.m_DateFrom;
    if(o.dateToIsSet())
        j["dateTo"] = o.m_DateTo;
    if(o.updateFromIsSet())
        j["updateFrom"] = o.m_UpdateFrom;
    if(o.updateToIsSet())
        j["updateTo"] = o.m_UpdateTo;
    if(o.ordersIsSet() || !o.m_Orders.empty())
        j["orders"] = o.m_Orders;
    if(o.statusesIsSet() || !o.m_Statuses.empty())
        j["statuses"] = o.m_Statuses;
    if(o.hasCisIsSet())
        j["hasCis"] = o.m_HasCis;
    
}

void from_json(const nlohmann::json& j, GetOrdersStatsRequest& o)
{
    if(j.find("dateFrom") != j.end())
    {
        j.at("dateFrom").get_to(o.m_DateFrom);
        o.m_DateFromIsSet = true;
    } 
    if(j.find("dateTo") != j.end())
    {
        j.at("dateTo").get_to(o.m_DateTo);
        o.m_DateToIsSet = true;
    } 
    if(j.find("updateFrom") != j.end())
    {
        j.at("updateFrom").get_to(o.m_UpdateFrom);
        o.m_UpdateFromIsSet = true;
    } 
    if(j.find("updateTo") != j.end())
    {
        j.at("updateTo").get_to(o.m_UpdateTo);
        o.m_UpdateToIsSet = true;
    } 
    if(j.find("orders") != j.end())
    {
        j.at("orders").get_to(o.m_Orders);
        o.m_OrdersIsSet = true;
    } 
    if(j.find("statuses") != j.end())
    {
        j.at("statuses").get_to(o.m_Statuses);
        o.m_StatusesIsSet = true;
    } 
    if(j.find("hasCis") != j.end())
    {
        j.at("hasCis").get_to(o.m_HasCis);
        o.m_HasCisIsSet = true;
    } 
    
}

std::string GetOrdersStatsRequest::getDateFrom() const
{
    return m_DateFrom;
}
void GetOrdersStatsRequest::setDateFrom(std::string const& value)
{
    m_DateFrom = value;
    m_DateFromIsSet = true;
}
bool GetOrdersStatsRequest::dateFromIsSet() const
{
    return m_DateFromIsSet;
}
void GetOrdersStatsRequest::unsetDateFrom()
{
    m_DateFromIsSet = false;
}
std::string GetOrdersStatsRequest::getDateTo() const
{
    return m_DateTo;
}
void GetOrdersStatsRequest::setDateTo(std::string const& value)
{
    m_DateTo = value;
    m_DateToIsSet = true;
}
bool GetOrdersStatsRequest::dateToIsSet() const
{
    return m_DateToIsSet;
}
void GetOrdersStatsRequest::unsetDateTo()
{
    m_DateToIsSet = false;
}
std::string GetOrdersStatsRequest::getUpdateFrom() const
{
    return m_UpdateFrom;
}
void GetOrdersStatsRequest::setUpdateFrom(std::string const& value)
{
    m_UpdateFrom = value;
    m_UpdateFromIsSet = true;
}
bool GetOrdersStatsRequest::updateFromIsSet() const
{
    return m_UpdateFromIsSet;
}
void GetOrdersStatsRequest::unsetUpdateFrom()
{
    m_UpdateFromIsSet = false;
}
std::string GetOrdersStatsRequest::getUpdateTo() const
{
    return m_UpdateTo;
}
void GetOrdersStatsRequest::setUpdateTo(std::string const& value)
{
    m_UpdateTo = value;
    m_UpdateToIsSet = true;
}
bool GetOrdersStatsRequest::updateToIsSet() const
{
    return m_UpdateToIsSet;
}
void GetOrdersStatsRequest::unsetUpdateTo()
{
    m_UpdateToIsSet = false;
}
std::vector<int64_t> GetOrdersStatsRequest::getOrders() const
{
    return m_Orders;
}
void GetOrdersStatsRequest::setOrders(std::vector<int64_t> const value)
{
    m_Orders = value;
    m_OrdersIsSet = true;
}
bool GetOrdersStatsRequest::ordersIsSet() const
{
    return m_OrdersIsSet;
}
void GetOrdersStatsRequest::unsetOrders()
{
    m_OrdersIsSet = false;
}
std::vector<org::openapitools::server::model::OrderStatsStatusType> GetOrdersStatsRequest::getStatuses() const
{
    return m_Statuses;
}
void GetOrdersStatsRequest::setStatuses(std::vector<org::openapitools::server::model::OrderStatsStatusType> const& value)
{
    m_Statuses = value;
    m_StatusesIsSet = true;
}
bool GetOrdersStatsRequest::statusesIsSet() const
{
    return m_StatusesIsSet;
}
void GetOrdersStatsRequest::unsetStatuses()
{
    m_StatusesIsSet = false;
}
bool GetOrdersStatsRequest::isHasCis() const
{
    return m_HasCis;
}
void GetOrdersStatsRequest::setHasCis(bool const value)
{
    m_HasCis = value;
    m_HasCisIsSet = true;
}
bool GetOrdersStatsRequest::hasCisIsSet() const
{
    return m_HasCisIsSet;
}
void GetOrdersStatsRequest::unsetHasCis()
{
    m_HasCisIsSet = false;
}


} // namespace org::openapitools::server::model

