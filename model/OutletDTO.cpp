/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OutletDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OutletDTO::OutletDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string OutletDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void OutletDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree OutletDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void OutletDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string OutletDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void OutletDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OutletDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	pt.put("coords", m_Coords);
	pt.put("isMain", m_IsMain);
	pt.put("shopOutletCode", m_ShopOutletCode);
	if (m_Address != nullptr) {
		pt.add_child("address", m_Address->toPropertyTree());
	}
	// generate tree for Phones
	if (!m_Phones.empty()) {
		for (const auto &childEntry : m_Phones) {
            ptree Phones_node;
            Phones_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Phones_node));
		}
		pt.add_child("phones", tmp_node);
		tmp_node.clear();
	}
	if (m_WorkingSchedule != nullptr) {
		pt.add_child("workingSchedule", m_WorkingSchedule->toPropertyTree());
	}
	// generate tree for DeliveryRules
	if (!m_DeliveryRules.empty()) {
		for (const auto &childEntry : m_DeliveryRules) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("deliveryRules", tmp_node);
		tmp_node.clear();
	}
	pt.put("storagePeriod", m_StoragePeriod);
	return pt;
}

void OutletDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	m_Coords = pt.get("coords", "");
	m_IsMain = pt.get("isMain", false);
	m_ShopOutletCode = pt.get("shopOutletCode", "");
	if (pt.get_child_optional("address")) {
		m_Address = std::make_shared<OutletAddressDTO>();
		m_Address->fromPropertyTree(pt.get_child("address"));
	}
	// push all items of Phones into member vector
	if (pt.get_child_optional("phones")) {
		for (const auto &childTree : pt.get_child("phones")) {
            std::string val =
                childTree.second.data();
            m_Phones.emplace_back(std::move(val));
		}
	}
	if (pt.get_child_optional("workingSchedule")) {
		m_WorkingSchedule = std::make_shared<OutletWorkingScheduleDTO>();
		m_WorkingSchedule->fromPropertyTree(pt.get_child("workingSchedule"));
	}
	// push all items of DeliveryRules into member vector
	if (pt.get_child_optional("deliveryRules")) {
		for (const auto &childTree : pt.get_child("deliveryRules")) {
            std::shared_ptr<OutletDeliveryRuleDTO> val =
                std::make_shared<OutletDeliveryRuleDTO>(childTree.second);
            m_DeliveryRules.emplace_back(std::move(val));
		}
	}
	m_StoragePeriod = pt.get("storagePeriod", 0L);
}

std::string OutletDTO::getName() const
{
    return m_Name;
}

void OutletDTO::setName(std::string value)
{
	m_Name = value;
}
std::shared_ptr<OutletType> OutletDTO::getType() const
{
    return m_Type;
}

void OutletDTO::setType(std::shared_ptr<OutletType> value)
{
	m_Type = value;
}
std::string OutletDTO::getCoords() const
{
    return m_Coords;
}

void OutletDTO::setCoords(std::string value)
{
	m_Coords = value;
}
bool OutletDTO::isIsMain() const
{
    return m_IsMain;
}

void OutletDTO::setIsMain(bool value)
{
	m_IsMain = value;
}
std::string OutletDTO::getShopOutletCode() const
{
    return m_ShopOutletCode;
}

void OutletDTO::setShopOutletCode(std::string value)
{
	m_ShopOutletCode = value;
}
std::shared_ptr<OutletVisibilityType> OutletDTO::getVisibility() const
{
    return m_Visibility;
}

void OutletDTO::setVisibility(std::shared_ptr<OutletVisibilityType> value)
{
	m_Visibility = value;
}
std::shared_ptr<OutletAddressDTO> OutletDTO::getAddress() const
{
    return m_Address;
}

void OutletDTO::setAddress(std::shared_ptr<OutletAddressDTO> value)
{
	m_Address = value;
}
std::vector<std::string> OutletDTO::getPhones() const
{
    return m_Phones;
}

void OutletDTO::setPhones(std::vector<std::string> value)
{
	m_Phones = value;
}
std::shared_ptr<OutletWorkingScheduleDTO> OutletDTO::getWorkingSchedule() const
{
    return m_WorkingSchedule;
}

void OutletDTO::setWorkingSchedule(std::shared_ptr<OutletWorkingScheduleDTO> value)
{
	m_WorkingSchedule = value;
}
std::vector<std::shared_ptr<OutletDeliveryRuleDTO>> OutletDTO::getDeliveryRules() const
{
    return m_DeliveryRules;
}

void OutletDTO::setDeliveryRules(std::vector<std::shared_ptr<OutletDeliveryRuleDTO>> value)
{
	m_DeliveryRules = value;
}
int64_t OutletDTO::getStoragePeriod() const
{
    return m_StoragePeriod;
}

void OutletDTO::setStoragePeriod(int64_t value)
{
	m_StoragePeriod = value;
}

std::vector<OutletDTO> createOutletDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OutletDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OutletDTO(child.second));
    }

    return vec;
}

}
}
}
}

