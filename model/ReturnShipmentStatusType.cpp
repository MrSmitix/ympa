/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ReturnShipmentStatusType.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

ReturnShipmentStatusType::ReturnShipmentStatusType()
{
    
}

void ReturnShipmentStatusType::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ReturnShipmentStatusType::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ReturnShipmentStatusType::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ReturnShipmentStatusType" : pathPrefix;

    
    if (m_value == ReturnShipmentStatusType::eReturnShipmentStatusType::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool ReturnShipmentStatusType::operator==(const ReturnShipmentStatusType& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool ReturnShipmentStatusType::operator!=(const ReturnShipmentStatusType& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ReturnShipmentStatusType& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case ReturnShipmentStatusType::eReturnShipmentStatusType::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::CREATED:
            j = "CREATED";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::RECEIVED:
            j = "RECEIVED";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::IN_TRANSIT:
            j = "IN_TRANSIT";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::READY_FOR_PICKUP:
            j = "READY_FOR_PICKUP";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::PICKED:
            j = "PICKED";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::LOST:
            j = "LOST";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::EXPIRED:
            j = "EXPIRED";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::CANCELLED:
            j = "CANCELLED";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::FULFILMENT_RECEIVED:
            j = "FULFILMENT_RECEIVED";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::PREPARED_FOR_UTILIZATION:
            j = "PREPARED_FOR_UTILIZATION";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::NOT_IN_DEMAND:
            j = "NOT_IN_DEMAND";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::UTILIZED:
            j = "UTILIZED";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::READY_FOR_EXPROPRIATION:
            j = "READY_FOR_EXPROPRIATION";
            break;
        case ReturnShipmentStatusType::eReturnShipmentStatusType::RECEIVED_FOR_EXPROPRIATION:
            j = "RECEIVED_FOR_EXPROPRIATION";
            break;
    }
}

void from_json(const nlohmann::json& j, ReturnShipmentStatusType& o)
{
    
    auto s = j.get<std::string>();
    if (s == "CREATED") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::CREATED);
    } 
    else if (s == "RECEIVED") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::RECEIVED);
    } 
    else if (s == "IN_TRANSIT") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::IN_TRANSIT);
    } 
    else if (s == "READY_FOR_PICKUP") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::READY_FOR_PICKUP);
    } 
    else if (s == "PICKED") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::PICKED);
    } 
    else if (s == "LOST") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::LOST);
    } 
    else if (s == "EXPIRED") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::EXPIRED);
    } 
    else if (s == "CANCELLED") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::CANCELLED);
    } 
    else if (s == "FULFILMENT_RECEIVED") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::FULFILMENT_RECEIVED);
    } 
    else if (s == "PREPARED_FOR_UTILIZATION") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::PREPARED_FOR_UTILIZATION);
    } 
    else if (s == "NOT_IN_DEMAND") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::NOT_IN_DEMAND);
    } 
    else if (s == "UTILIZED") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::UTILIZED);
    } 
    else if (s == "READY_FOR_EXPROPRIATION") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::READY_FOR_EXPROPRIATION);
    } 
    else if (s == "RECEIVED_FOR_EXPROPRIATION") {
     o.setValue(ReturnShipmentStatusType::eReturnShipmentStatusType::RECEIVED_FOR_EXPROPRIATION);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " ReturnShipmentStatusType::eReturnShipmentStatusType";
     throw std::invalid_argument(ss.str());
    } 

}

ReturnShipmentStatusType::eReturnShipmentStatusType ReturnShipmentStatusType::getValue() const
{
    return m_value;
}
void ReturnShipmentStatusType::setValue(ReturnShipmentStatusType::eReturnShipmentStatusType value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

