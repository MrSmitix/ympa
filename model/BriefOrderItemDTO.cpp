/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BriefOrderItemDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BriefOrderItemDTO::BriefOrderItemDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_VatIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_OfferName = "";
    m_OfferNameIsSet = false;
    m_OfferId = "";
    m_OfferIdIsSet = false;
    m_InstancesIsSet = false;
    
}

void BriefOrderItemDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BriefOrderItemDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BriefOrderItemDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BriefOrderItemDTO" : pathPrefix;

                             
    if (offerIdIsSet())
    {
        const std::string& value = m_OfferId;
        const std::string currentValuePath = _pathPrefix + ".offerId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
         
    if (instancesIsSet())
    {
        const std::vector<org::openapitools::server::model::OrderItemInstanceDTO>& value = m_Instances;
        const std::string currentValuePath = _pathPrefix + ".instances";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderItemInstanceDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".instances") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool BriefOrderItemDTO::operator==(const BriefOrderItemDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!vatIsSet() && !rhs.vatIsSet()) || (vatIsSet() && rhs.vatIsSet() && getVat() == rhs.getVat())) &&
    
    
    ((!countIsSet() && !rhs.countIsSet()) || (countIsSet() && rhs.countIsSet() && getCount() == rhs.getCount())) &&
    
    
    ((!priceIsSet() && !rhs.priceIsSet()) || (priceIsSet() && rhs.priceIsSet() && getPrice() == rhs.getPrice())) &&
    
    
    ((!offerNameIsSet() && !rhs.offerNameIsSet()) || (offerNameIsSet() && rhs.offerNameIsSet() && getOfferName() == rhs.getOfferName())) &&
    
    
    ((!offerIdIsSet() && !rhs.offerIdIsSet()) || (offerIdIsSet() && rhs.offerIdIsSet() && getOfferId() == rhs.getOfferId())) &&
    
    
    ((!instancesIsSet() && !rhs.instancesIsSet()) || (instancesIsSet() && rhs.instancesIsSet() && getInstances() == rhs.getInstances()))
    
    ;
}

bool BriefOrderItemDTO::operator!=(const BriefOrderItemDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BriefOrderItemDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.vatIsSet())
        j["vat"] = o.m_Vat;
    if(o.countIsSet())
        j["count"] = o.m_Count;
    if(o.priceIsSet())
        j["price"] = o.m_Price;
    if(o.offerNameIsSet())
        j["offerName"] = o.m_OfferName;
    if(o.offerIdIsSet())
        j["offerId"] = o.m_OfferId;
    if(o.instancesIsSet() || !o.m_Instances.empty())
        j["instances"] = o.m_Instances;
    
}

void from_json(const nlohmann::json& j, BriefOrderItemDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("vat") != j.end())
    {
        j.at("vat").get_to(o.m_Vat);
        o.m_VatIsSet = true;
    } 
    if(j.find("count") != j.end())
    {
        j.at("count").get_to(o.m_Count);
        o.m_CountIsSet = true;
    } 
    if(j.find("price") != j.end())
    {
        j.at("price").get_to(o.m_Price);
        o.m_PriceIsSet = true;
    } 
    if(j.find("offerName") != j.end())
    {
        j.at("offerName").get_to(o.m_OfferName);
        o.m_OfferNameIsSet = true;
    } 
    if(j.find("offerId") != j.end())
    {
        j.at("offerId").get_to(o.m_OfferId);
        o.m_OfferIdIsSet = true;
    } 
    if(j.find("instances") != j.end())
    {
        j.at("instances").get_to(o.m_Instances);
        o.m_InstancesIsSet = true;
    } 
    
}

int64_t BriefOrderItemDTO::getId() const
{
    return m_Id;
}
void BriefOrderItemDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool BriefOrderItemDTO::idIsSet() const
{
    return m_IdIsSet;
}
void BriefOrderItemDTO::unsetId()
{
    m_IdIsSet = false;
}
org::openapitools::server::model::OrderVatType BriefOrderItemDTO::getVat() const
{
    return m_Vat;
}
void BriefOrderItemDTO::setVat(org::openapitools::server::model::OrderVatType const& value)
{
    m_Vat = value;
    m_VatIsSet = true;
}
bool BriefOrderItemDTO::vatIsSet() const
{
    return m_VatIsSet;
}
void BriefOrderItemDTO::unsetVat()
{
    m_VatIsSet = false;
}
int32_t BriefOrderItemDTO::getCount() const
{
    return m_Count;
}
void BriefOrderItemDTO::setCount(int32_t const value)
{
    m_Count = value;
    m_CountIsSet = true;
}
bool BriefOrderItemDTO::countIsSet() const
{
    return m_CountIsSet;
}
void BriefOrderItemDTO::unsetCount()
{
    m_CountIsSet = false;
}
double BriefOrderItemDTO::getPrice() const
{
    return m_Price;
}
void BriefOrderItemDTO::setPrice(double const value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool BriefOrderItemDTO::priceIsSet() const
{
    return m_PriceIsSet;
}
void BriefOrderItemDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
std::string BriefOrderItemDTO::getOfferName() const
{
    return m_OfferName;
}
void BriefOrderItemDTO::setOfferName(std::string const& value)
{
    m_OfferName = value;
    m_OfferNameIsSet = true;
}
bool BriefOrderItemDTO::offerNameIsSet() const
{
    return m_OfferNameIsSet;
}
void BriefOrderItemDTO::unsetOfferName()
{
    m_OfferNameIsSet = false;
}
std::string BriefOrderItemDTO::getOfferId() const
{
    return m_OfferId;
}
void BriefOrderItemDTO::setOfferId(std::string const& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}
bool BriefOrderItemDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}
void BriefOrderItemDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
std::vector<org::openapitools::server::model::OrderItemInstanceDTO> BriefOrderItemDTO::getInstances() const
{
    return m_Instances;
}
void BriefOrderItemDTO::setInstances(std::vector<org::openapitools::server::model::OrderItemInstanceDTO> const& value)
{
    m_Instances = value;
    m_InstancesIsSet = true;
}
bool BriefOrderItemDTO::instancesIsSet() const
{
    return m_InstancesIsSet;
}
void BriefOrderItemDTO::unsetInstances()
{
    m_InstancesIsSet = false;
}


} // namespace org::openapitools::server::model

