/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ReturnDecisionDTO.h
 *
 * Решения по возвратам.
 */

#ifndef ReturnDecisionDTO_H_
#define ReturnDecisionDTO_H_


#include "ReturnDecisionType.h"
#include <string>
#include "ReturnDecisionSubreasonType.h"
#include "ReturnDecisionReasonType.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Решения по возвратам.
/// </summary>
class  ReturnDecisionDTO
{
public:
    ReturnDecisionDTO();
    virtual ~ReturnDecisionDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ReturnDecisionDTO& rhs) const;
    bool operator!=(const ReturnDecisionDTO& rhs) const;

    /////////////////////////////////////////////
    /// ReturnDecisionDTO members

    /// <summary>
    /// Идентификатор товара в возврате.
    /// </summary>
    int64_t getReturnItemId() const;
    void setReturnItemId(int64_t const value);
    bool returnItemIdIsSet() const;
    void unsetReturnItemId();
    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int32_t getCount() const;
    void setCount(int32_t const value);
    bool countIsSet() const;
    void unsetCount();
    /// <summary>
    /// Комментарий.
    /// </summary>
    std::string getComment() const;
    void setComment(std::string const& value);
    bool commentIsSet() const;
    void unsetComment();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ReturnDecisionReasonType getReasonType() const;
    void setReasonType(org::openapitools::server::model::ReturnDecisionReasonType const& value);
    bool reasonTypeIsSet() const;
    void unsetReasonType();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ReturnDecisionSubreasonType getSubreasonType() const;
    void setSubreasonType(org::openapitools::server::model::ReturnDecisionSubreasonType const& value);
    bool subreasonTypeIsSet() const;
    void unsetSubreasonType();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ReturnDecisionType getDecisionType() const;
    void setDecisionType(org::openapitools::server::model::ReturnDecisionType const& value);
    bool decisionTypeIsSet() const;
    void unsetDecisionType();
    /// <summary>
    /// Сумма возврата.
    /// </summary>
    int64_t getRefundAmount() const;
    void setRefundAmount(int64_t const value);
    bool refundAmountIsSet() const;
    void unsetRefundAmount();
    /// <summary>
    /// Компенсация за обратную доставку.
    /// </summary>
    int64_t getPartnerCompensation() const;
    void setPartnerCompensation(int64_t const value);
    bool partnerCompensationIsSet() const;
    void unsetPartnerCompensation();
    /// <summary>
    /// Список хеш-кодов фотографий товара от покупателя.
    /// </summary>
    std::vector<std::string> getImages() const;
    void setImages(std::vector<std::string> const& value);
    bool imagesIsSet() const;
    void unsetImages();

    friend  void to_json(nlohmann::json& j, const ReturnDecisionDTO& o);
    friend  void from_json(const nlohmann::json& j, ReturnDecisionDTO& o);
protected:
    int64_t m_ReturnItemId;
    bool m_ReturnItemIdIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    std::string m_Comment;
    bool m_CommentIsSet;
    org::openapitools::server::model::ReturnDecisionReasonType m_ReasonType;
    bool m_ReasonTypeIsSet;
    org::openapitools::server::model::ReturnDecisionSubreasonType m_SubreasonType;
    bool m_SubreasonTypeIsSet;
    org::openapitools::server::model::ReturnDecisionType m_DecisionType;
    bool m_DecisionTypeIsSet;
    int64_t m_RefundAmount;
    bool m_RefundAmountIsSet;
    int64_t m_PartnerCompensation;
    bool m_PartnerCompensationIsSet;
    std::vector<std::string> m_Images;
    bool m_ImagesIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ReturnDecisionDTO_H_ */
