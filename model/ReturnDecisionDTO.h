/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnDecisionDTO.h
 *
 * Решения по возвратам.
 */

#ifndef ReturnDecisionDTO_H_
#define ReturnDecisionDTO_H_



#include "ReturnDecisionType.h"
#include <string>
#include "ReturnDecisionSubreasonType.h"
#include "ReturnDecisionReasonType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Решения по возвратам.
/// </summary>
class  ReturnDecisionDTO 
{
public:
    ReturnDecisionDTO() = default;
    explicit ReturnDecisionDTO(boost::property_tree::ptree const& pt);
    virtual ~ReturnDecisionDTO() = default;

    ReturnDecisionDTO(const ReturnDecisionDTO& other) = default; // copy constructor
    ReturnDecisionDTO(ReturnDecisionDTO&& other) noexcept = default; // move constructor

    ReturnDecisionDTO& operator=(const ReturnDecisionDTO& other) = default; // copy assignment
    ReturnDecisionDTO& operator=(ReturnDecisionDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ReturnDecisionDTO members

    /// <summary>
    /// Идентификатор товара в возврате.
    /// </summary>
    int64_t getReturnItemId() const;
    void setReturnItemId(int64_t value);

    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int32_t getCount() const;
    void setCount(int32_t value);

    /// <summary>
    /// Комментарий.
    /// </summary>
    std::string getComment() const;
    void setComment(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ReturnDecisionReasonType getReasonType() const;
    void setReasonType(ReturnDecisionReasonType value);

    /// <summary>
    /// 
    /// </summary>
    ReturnDecisionSubreasonType getSubreasonType() const;
    void setSubreasonType(ReturnDecisionSubreasonType value);

    /// <summary>
    /// 
    /// </summary>
    ReturnDecisionType getDecisionType() const;
    void setDecisionType(ReturnDecisionType value);

    /// <summary>
    /// Сумма возврата.
    /// </summary>
    int64_t getRefundAmount() const;
    void setRefundAmount(int64_t value);

    /// <summary>
    /// Компенсация за обратную доставку.
    /// </summary>
    int64_t getPartnerCompensation() const;
    void setPartnerCompensation(int64_t value);

    /// <summary>
    /// Список хеш-кодов фотографий товара от покупателя.
    /// </summary>
    std::vector<std::string> getImages() const;
    void setImages(std::vector<std::string> value);

protected:
    int64_t m_ReturnItemId = 0L;
    int32_t m_Count = 0;
    std::string m_Comment = "";
    ReturnDecisionReasonType m_ReasonType = ReturnDecisionReasonType{};
    ReturnDecisionSubreasonType m_SubreasonType = ReturnDecisionSubreasonType{};
    ReturnDecisionType m_DecisionType = ReturnDecisionType{};
    int64_t m_RefundAmount = 0L;
    int64_t m_PartnerCompensation = 0L;
    std::vector<std::string> m_Images;
};

std::vector<ReturnDecisionDTO> createReturnDecisionDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ReturnDecisionDTO>(const ReturnDecisionDTO& val) {
    return val.toPropertyTree();
}

template<>
inline ReturnDecisionDTO fromPt<ReturnDecisionDTO>(const boost::property_tree::ptree& pt) {
    ReturnDecisionDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ReturnDecisionDTO_H_ */
