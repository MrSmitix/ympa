/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnDecisionDTO.h
 *
 * Решения по возвратам.
 */

#ifndef ReturnDecisionDTO_H_
#define ReturnDecisionDTO_H_



#include "ReturnDecisionType.h"
#include <string>
#include "ReturnDecisionSubreasonType.h"
#include "ReturnDecisionReasonType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Решения по возвратам.
/// </summary>
class  ReturnDecisionDTO 
{
public:
    ReturnDecisionDTO() = default;
    explicit ReturnDecisionDTO(boost::property_tree::ptree const& pt);
    virtual ~ReturnDecisionDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// ReturnDecisionDTO members

    /// <summary>
    /// Идентификатор товара в возврате.
    /// </summary>
    int64_t getReturnItemId() const;
    void setReturnItemId(int64_t value);

    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int32_t getCount() const;
    void setCount(int32_t value);

    /// <summary>
    /// Комментарий.
    /// </summary>
    std::string getComment() const;
    void setComment(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReturnDecisionReasonType> getReasonType() const;
    void setReasonType(std::shared_ptr<ReturnDecisionReasonType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReturnDecisionSubreasonType> getSubreasonType() const;
    void setSubreasonType(std::shared_ptr<ReturnDecisionSubreasonType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReturnDecisionType> getDecisionType() const;
    void setDecisionType(std::shared_ptr<ReturnDecisionType> value);

    /// <summary>
    /// Сумма возврата.
    /// </summary>
    int64_t getRefundAmount() const;
    void setRefundAmount(int64_t value);

    /// <summary>
    /// Компенсация за обратную доставку.
    /// </summary>
    int64_t getPartnerCompensation() const;
    void setPartnerCompensation(int64_t value);

    /// <summary>
    /// Список хеш-кодов фотографий товара от покупателя.
    /// </summary>
    std::vector<std::string> getImages() const;
    void setImages(std::vector<std::string> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_ReturnItemId = 0L;
    int32_t m_Count = 0;
    std::string m_Comment = "";
    std::shared_ptr<ReturnDecisionReasonType> m_ReasonType = std::make_shared<ReturnDecisionReasonType>();
    std::shared_ptr<ReturnDecisionSubreasonType> m_SubreasonType = std::make_shared<ReturnDecisionSubreasonType>();
    std::shared_ptr<ReturnDecisionType> m_DecisionType = std::make_shared<ReturnDecisionType>();
    int64_t m_RefundAmount = 0L;
    int64_t m_PartnerCompensation = 0L;
    std::vector<std::string> m_Images;
};

std::vector<ReturnDecisionDTO> createReturnDecisionDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* ReturnDecisionDTO_H_ */
