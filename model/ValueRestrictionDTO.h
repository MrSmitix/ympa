/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ValueRestrictionDTO.h
 *
 * Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: &#x60;S&#x60;, &#x60;M&#x60;, &#x60;L&#x60;, &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;, &#x60;42/164&#x60;, &#x60;46/176&#x60;, &#x60;44S&#x60;.  Если ограничивающая характеристика **размерная сетка** принимает значение &#x60;RU&#x60;, список возможных значений размера сокращается до &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;. 
 */

#ifndef ValueRestrictionDTO_H_
#define ValueRestrictionDTO_H_



#include "OptionValuesLimitedDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: &#x60;S&#x60;, &#x60;M&#x60;, &#x60;L&#x60;, &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;, &#x60;42/164&#x60;, &#x60;46/176&#x60;, &#x60;44S&#x60;.  Если ограничивающая характеристика **размерная сетка** принимает значение &#x60;RU&#x60;, список возможных значений размера сокращается до &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;. 
/// </summary>
class  ValueRestrictionDTO 
{
public:
    ValueRestrictionDTO() = default;
    explicit ValueRestrictionDTO(boost::property_tree::ptree const& pt);
    virtual ~ValueRestrictionDTO() = default;

    ValueRestrictionDTO(const ValueRestrictionDTO& other) = default; // copy constructor
    ValueRestrictionDTO(ValueRestrictionDTO&& other) noexcept = default; // move constructor

    ValueRestrictionDTO& operator=(const ValueRestrictionDTO& other) = default; // copy assignment
    ValueRestrictionDTO& operator=(ValueRestrictionDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ValueRestrictionDTO members

    /// <summary>
    /// Идентификатор ограничивающей характеристики.
    /// </summary>
    int64_t getLimitingParameterId() const;
    void setLimitingParameterId(int64_t value);

    /// <summary>
    /// Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.
    /// </summary>
    std::vector<OptionValuesLimitedDTO> getLimitedValues() const;
    void setLimitedValues(std::vector<OptionValuesLimitedDTO> value);

protected:
    int64_t m_LimitingParameterId = 0L;
    std::vector<OptionValuesLimitedDTO> m_LimitedValues;
};

std::vector<ValueRestrictionDTO> createValueRestrictionDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ValueRestrictionDTO>(const ValueRestrictionDTO& val) {
    return val.toPropertyTree();
}

template<>
inline ValueRestrictionDTO fromPt<ValueRestrictionDTO>(const boost::property_tree::ptree& pt) {
    ValueRestrictionDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ValueRestrictionDTO_H_ */
