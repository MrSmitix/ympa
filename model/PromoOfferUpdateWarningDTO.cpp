/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PromoOfferUpdateWarningDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PromoOfferUpdateWarningDTO::PromoOfferUpdateWarningDTO()
{
    m_CampaignIdsIsSet = false;
    
}

void PromoOfferUpdateWarningDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PromoOfferUpdateWarningDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PromoOfferUpdateWarningDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PromoOfferUpdateWarningDTO" : pathPrefix;

             
    if (campaignIdsIsSet())
    {
        const std::vector<int64_t>& value = m_CampaignIds;
        const std::string currentValuePath = _pathPrefix + ".campaignIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool PromoOfferUpdateWarningDTO::operator==(const PromoOfferUpdateWarningDTO& rhs) const
{
    return
    
    
    (getCode() == rhs.getCode())
     &&
    
    
    ((!campaignIdsIsSet() && !rhs.campaignIdsIsSet()) || (campaignIdsIsSet() && rhs.campaignIdsIsSet() && getCampaignIds() == rhs.getCampaignIds()))
    
    ;
}

bool PromoOfferUpdateWarningDTO::operator!=(const PromoOfferUpdateWarningDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PromoOfferUpdateWarningDTO& o)
{
    j = nlohmann::json::object();
    j["code"] = o.m_Code;
    if(o.campaignIdsIsSet() || !o.m_CampaignIds.empty())
        j["campaignIds"] = o.m_CampaignIds;
    
}

void from_json(const nlohmann::json& j, PromoOfferUpdateWarningDTO& o)
{
    j.at("code").get_to(o.m_Code);
    if(j.find("campaignIds") != j.end())
    {
        j.at("campaignIds").get_to(o.m_CampaignIds);
        o.m_CampaignIdsIsSet = true;
    } 
    
}

org::openapitools::server::model::PromoOfferUpdateWarningCodeType PromoOfferUpdateWarningDTO::getCode() const
{
    return m_Code;
}
void PromoOfferUpdateWarningDTO::setCode(org::openapitools::server::model::PromoOfferUpdateWarningCodeType const& value)
{
    m_Code = value;
}
std::vector<int64_t> PromoOfferUpdateWarningDTO::getCampaignIds() const
{
    return m_CampaignIds;
}
void PromoOfferUpdateWarningDTO::setCampaignIds(std::vector<int64_t> const value)
{
    m_CampaignIds = value;
    m_CampaignIdsIsSet = true;
}
bool PromoOfferUpdateWarningDTO::campaignIdsIsSet() const
{
    return m_CampaignIdsIsSet;
}
void PromoOfferUpdateWarningDTO::unsetCampaignIds()
{
    m_CampaignIdsIsSet = false;
}


} // namespace org::openapitools::server::model

