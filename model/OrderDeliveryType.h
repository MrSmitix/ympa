/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderDeliveryType.h
 *
 * Способ доставки заказа:  * &#x60;DELIVERY&#x60; — курьерская доставка.  * &#x60;PICKUP&#x60; — самовывоз.  * &#x60;POST&#x60; — почта.  * &#x60;DIGITAL&#x60; — для цифровых товаров.  * &#x60;UNKNOWN&#x60; — неизвестный тип. 
 */

#ifndef OrderDeliveryType_H_
#define OrderDeliveryType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Способ доставки заказа:  * &#x60;DELIVERY&#x60; — курьерская доставка.  * &#x60;PICKUP&#x60; — самовывоз.  * &#x60;POST&#x60; — почта.  * &#x60;DIGITAL&#x60; — для цифровых товаров.  * &#x60;UNKNOWN&#x60; — неизвестный тип. 
/// </summary>
class  OrderDeliveryType 
{
public:
    OrderDeliveryType() = default;
    explicit OrderDeliveryType(boost::property_tree::ptree const& pt);
    virtual ~OrderDeliveryType() = default;

    OrderDeliveryType(const OrderDeliveryType& other) = default; // copy constructor
    OrderDeliveryType(OrderDeliveryType&& other) noexcept = default; // move constructor

    OrderDeliveryType& operator=(const OrderDeliveryType& other) = default; // copy assignment
    OrderDeliveryType& operator=(OrderDeliveryType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// OrderDeliveryType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_OrderDeliveryTypeEnumValue;
};

std::vector<OrderDeliveryType> createOrderDeliveryTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderDeliveryType>(const OrderDeliveryType& val) {
    return val.toPropertyTree();
}

template<>
inline OrderDeliveryType fromPt<OrderDeliveryType>(const boost::property_tree::ptree& pt) {
    OrderDeliveryType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderDeliveryType_H_ */
