/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ModelOfferDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ModelOfferDTO::ModelOfferDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ModelOfferDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ModelOfferDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ModelOfferDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("discount", m_Discount);
	pt.put("name", m_Name);
	pt.put("pos", m_Pos);
	pt.put("preDiscountPrice", m_PreDiscountPrice);
	pt.put("price", m_Price);
	pt.put("regionId", m_RegionId);
	pt.put("shippingCost", m_ShippingCost);
	pt.put("shopName", m_ShopName);
	pt.put("shopRating", m_ShopRating);
	pt.put("inStock", m_InStock);
	return pt;
}

void ModelOfferDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Discount = pt.get("discount", 0);
	m_Name = pt.get("name", "");
	m_Pos = pt.get("pos", 0);
	m_PreDiscountPrice = pt.get("preDiscountPrice", 0.0);
	m_Price = pt.get("price", 0.0);
	m_RegionId = pt.get("regionId", 0L);
	m_ShippingCost = pt.get("shippingCost", 0.0);
	m_ShopName = pt.get("shopName", "");
	m_ShopRating = pt.get("shopRating", 0);
	m_InStock = pt.get("inStock", 0);
}

int32_t ModelOfferDTO::getDiscount() const
{
    return m_Discount;
}

void ModelOfferDTO::setDiscount(int32_t value)
{
    m_Discount = value;
}


std::string ModelOfferDTO::getName() const
{
    return m_Name;
}

void ModelOfferDTO::setName(std::string value)
{
    m_Name = value;
}


int32_t ModelOfferDTO::getPos() const
{
    return m_Pos;
}

void ModelOfferDTO::setPos(int32_t value)
{
    m_Pos = value;
}


double ModelOfferDTO::getPreDiscountPrice() const
{
    return m_PreDiscountPrice;
}

void ModelOfferDTO::setPreDiscountPrice(double value)
{
    m_PreDiscountPrice = value;
}


double ModelOfferDTO::getPrice() const
{
    return m_Price;
}

void ModelOfferDTO::setPrice(double value)
{
    m_Price = value;
}


int64_t ModelOfferDTO::getRegionId() const
{
    return m_RegionId;
}

void ModelOfferDTO::setRegionId(int64_t value)
{
    m_RegionId = value;
}


double ModelOfferDTO::getShippingCost() const
{
    return m_ShippingCost;
}

void ModelOfferDTO::setShippingCost(double value)
{
    m_ShippingCost = value;
}


std::string ModelOfferDTO::getShopName() const
{
    return m_ShopName;
}

void ModelOfferDTO::setShopName(std::string value)
{
    m_ShopName = value;
}


int32_t ModelOfferDTO::getShopRating() const
{
    return m_ShopRating;
}

void ModelOfferDTO::setShopRating(int32_t value)
{
    m_ShopRating = value;
}


int32_t ModelOfferDTO::getInStock() const
{
    return m_InStock;
}

void ModelOfferDTO::setInStock(int32_t value)
{
    m_InStock = value;
}



std::vector<ModelOfferDTO> createModelOfferDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ModelOfferDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(ModelOfferDTO(child.second));
    }

    return vec;
}

}
}
}
}

