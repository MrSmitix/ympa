/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PriceQuarantineVerdictType.h
 *
 * Типы карантина:  * &#x60;PRICE_CHANGE&#x60; — новая цена слишком сильно отличается от прежней. В поле &#x60;params&#x60; будет  новая цена &#x60;CURRENT_PRICE&#x60; и последняя цена до попадания в карантин &#x60;LAST_VALID_PRICE&#x60;. * &#x60;LOW_PRICE&#x60; — установленная цена слишком сильно отличается от рыночной. В поле &#x60;params&#x60; будет установленная вами цена &#x60;CURRENT_PRICE&#x60; и порог попадания в карантин &#x60;MIN_PRICE&#x60;. * &#x60;LOW_PRICE_PROMO&#x60; — цена после применения акций слишком сильно отличается от рыночной. В поле &#x60;params&#x60; будет цена после применения акций &#x60;CURRENT_PRICE&#x60; и порог попадания в карантин &#x60;MIN_PRICE&#x60;. 
 */

#ifndef PriceQuarantineVerdictType_H_
#define PriceQuarantineVerdictType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Типы карантина:  * &#x60;PRICE_CHANGE&#x60; — новая цена слишком сильно отличается от прежней. В поле &#x60;params&#x60; будет  новая цена &#x60;CURRENT_PRICE&#x60; и последняя цена до попадания в карантин &#x60;LAST_VALID_PRICE&#x60;. * &#x60;LOW_PRICE&#x60; — установленная цена слишком сильно отличается от рыночной. В поле &#x60;params&#x60; будет установленная вами цена &#x60;CURRENT_PRICE&#x60; и порог попадания в карантин &#x60;MIN_PRICE&#x60;. * &#x60;LOW_PRICE_PROMO&#x60; — цена после применения акций слишком сильно отличается от рыночной. В поле &#x60;params&#x60; будет цена после применения акций &#x60;CURRENT_PRICE&#x60; и порог попадания в карантин &#x60;MIN_PRICE&#x60;. 
/// </summary>
class  PriceQuarantineVerdictType 
{
public:
    PriceQuarantineVerdictType() = default;
    explicit PriceQuarantineVerdictType(boost::property_tree::ptree const& pt);
    virtual ~PriceQuarantineVerdictType() = default;

    PriceQuarantineVerdictType(const PriceQuarantineVerdictType& other) = default; // copy constructor
    PriceQuarantineVerdictType(PriceQuarantineVerdictType&& other) noexcept = default; // move constructor

    PriceQuarantineVerdictType& operator=(const PriceQuarantineVerdictType& other) = default; // copy assignment
    PriceQuarantineVerdictType& operator=(PriceQuarantineVerdictType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// PriceQuarantineVerdictType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_PriceQuarantineVerdictTypeEnumValue;
};

std::vector<PriceQuarantineVerdictType> createPriceQuarantineVerdictTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PriceQuarantineVerdictType>(const PriceQuarantineVerdictType& val) {
    return val.toPropertyTree();
}

template<>
inline PriceQuarantineVerdictType fromPt<PriceQuarantineVerdictType>(const boost::property_tree::ptree& pt) {
    PriceQuarantineVerdictType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PriceQuarantineVerdictType_H_ */
