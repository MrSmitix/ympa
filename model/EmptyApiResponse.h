/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmptyApiResponse.h
 *
 * Пустой ответ сервера.
 */

#ifndef EmptyApiResponse_H_
#define EmptyApiResponse_H_



#include "ApiResponseStatusType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "ApiResponse.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Пустой ответ сервера.
/// </summary>
class  EmptyApiResponse : public ApiResponse
{
public:
    EmptyApiResponse() = default;
    explicit EmptyApiResponse(boost::property_tree::ptree const& pt);
    virtual ~EmptyApiResponse() = default;

    EmptyApiResponse(const EmptyApiResponse& other) = default; // copy constructor
    EmptyApiResponse(EmptyApiResponse&& other) noexcept = default; // move constructor

    EmptyApiResponse& operator=(const EmptyApiResponse& other) = default; // copy assignment
    EmptyApiResponse& operator=(EmptyApiResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// EmptyApiResponse members

    /// <summary>
    /// 
    /// </summary>
    ApiResponseStatusType getStatus() const;
    void setStatus(ApiResponseStatusType value);

protected:
    ApiResponseStatusType m_Status = ApiResponseStatusType{};
};

std::vector<EmptyApiResponse> createEmptyApiResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<EmptyApiResponse>(const EmptyApiResponse& val) {
    return val.toPropertyTree();
}

template<>
inline EmptyApiResponse fromPt<EmptyApiResponse>(const boost::property_tree::ptree& pt) {
    EmptyApiResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* EmptyApiResponse_H_ */
