/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DeletePromoOffersRequest.h
 *
 * Удаление товаров из акции.  Чтобы убрать:  * все товары из акции и больше не участвовать в ней, передайте значение &#x60;true&#x60; в параметре &#x60;deleteAllOffers&#x60;;  * часть товаров, передайте их идентификаторы в параметре &#x60;offersIds&#x60;. 
 */

#ifndef DeletePromoOffersRequest_H_
#define DeletePromoOffersRequest_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Удаление товаров из акции.  Чтобы убрать:  * все товары из акции и больше не участвовать в ней, передайте значение &#x60;true&#x60; в параметре &#x60;deleteAllOffers&#x60;;  * часть товаров, передайте их идентификаторы в параметре &#x60;offersIds&#x60;. 
/// </summary>
class  DeletePromoOffersRequest
{
public:
    DeletePromoOffersRequest();
    virtual ~DeletePromoOffersRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const DeletePromoOffersRequest& rhs) const;
    bool operator!=(const DeletePromoOffersRequest& rhs) const;

    /////////////////////////////////////////////
    /// DeletePromoOffersRequest members

    /// <summary>
    /// Идентификатор акции.
    /// </summary>
    std::string getPromoId() const;
    void setPromoId(std::string const& value);
    /// <summary>
    /// Чтобы убрать все товары из акции и больше не участвовать в ней, передайте значение &#x60;true&#x60; и не передавайте параметр &#x60;offerIds&#x60;.
    /// </summary>
    bool isDeleteAllOffers() const;
    void setDeleteAllOffers(bool const value);
    bool deleteAllOffersIsSet() const;
    void unsetDeleteAllOffers();
    /// <summary>
    /// Товары, которые нужно убрать из акции.
    /// </summary>
    std::vector<std::string> getOfferIds() const;
    void setOfferIds(std::vector<std::string> const& value);
    bool offerIdsIsSet() const;
    void unsetOfferIds();

    friend  void to_json(nlohmann::json& j, const DeletePromoOffersRequest& o);
    friend  void from_json(const nlohmann::json& j, DeletePromoOffersRequest& o);
protected:
    std::string m_PromoId;

    bool m_DeleteAllOffers;
    bool m_DeleteAllOffersIsSet;
    std::vector<std::string> m_OfferIds;
    bool m_OfferIdsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* DeletePromoOffersRequest_H_ */
