/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UpdateOrderItemRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UpdateOrderItemRequest::UpdateOrderItemRequest()
{
    m_ReasonIsSet = false;
    
}

void UpdateOrderItemRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UpdateOrderItemRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UpdateOrderItemRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UpdateOrderItemRequest" : pathPrefix;

         
    
    /* Items */ {
        const std::vector<org::openapitools::server::model::OrderItemModificationDTO>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderItemModificationDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".items") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool UpdateOrderItemRequest::operator==(const UpdateOrderItemRequest& rhs) const
{
    return
    
    
    (getItems() == rhs.getItems())
     &&
    
    
    ((!reasonIsSet() && !rhs.reasonIsSet()) || (reasonIsSet() && rhs.reasonIsSet() && getReason() == rhs.getReason()))
    
    ;
}

bool UpdateOrderItemRequest::operator!=(const UpdateOrderItemRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UpdateOrderItemRequest& o)
{
    j = nlohmann::json::object();
    j["items"] = o.m_Items;
    if(o.reasonIsSet())
        j["reason"] = o.m_Reason;
    
}

void from_json(const nlohmann::json& j, UpdateOrderItemRequest& o)
{
    j.at("items").get_to(o.m_Items);
    if(j.find("reason") != j.end())
    {
        j.at("reason").get_to(o.m_Reason);
        o.m_ReasonIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::OrderItemModificationDTO> UpdateOrderItemRequest::getItems() const
{
    return m_Items;
}
void UpdateOrderItemRequest::setItems(std::vector<org::openapitools::server::model::OrderItemModificationDTO> const& value)
{
    m_Items = value;
}
org::openapitools::server::model::OrderItemsModificationRequestReasonType UpdateOrderItemRequest::getReason() const
{
    return m_Reason;
}
void UpdateOrderItemRequest::setReason(org::openapitools::server::model::OrderItemsModificationRequestReasonType const& value)
{
    m_Reason = value;
    m_ReasonIsSet = true;
}
bool UpdateOrderItemRequest::reasonIsSet() const
{
    return m_ReasonIsSet;
}
void UpdateOrderItemRequest::unsetReason()
{
    m_ReasonIsSet = false;
}


} // namespace org::openapitools::server::model

