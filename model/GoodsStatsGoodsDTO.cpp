/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GoodsStatsGoodsDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

GoodsStatsGoodsDTO::GoodsStatsGoodsDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string GoodsStatsGoodsDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void GoodsStatsGoodsDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree GoodsStatsGoodsDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("shopSku", m_ShopSku);
	pt.put("marketSku", m_MarketSku);
	pt.put("name", m_Name);
	pt.put("price", m_Price);
	pt.put("categoryId", m_CategoryId);
	pt.put("categoryName", m_CategoryName);
	pt.add_child("weightDimensions", m_WeightDimensions.toPropertyTree());
	// generate tree for Warehouses
    tmp_node.clear();
	if (!m_Warehouses.empty()) {
        tmp_node = toPt(m_Warehouses);
		pt.add_child("warehouses", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Tariffs
    tmp_node.clear();
	if (!m_Tariffs.empty()) {
        tmp_node = toPt(m_Tariffs);
		pt.add_child("tariffs", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Pictures
    tmp_node.clear();
	if (!m_Pictures.empty()) {
        tmp_node = toPt(m_Pictures);
		pt.add_child("pictures", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void GoodsStatsGoodsDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_ShopSku = pt.get("shopSku", "");
	m_MarketSku = pt.get("marketSku", 0L);
	m_Name = pt.get("name", "");
	m_Price = pt.get("price", 0.0);
	m_CategoryId = pt.get("categoryId", 0L);
	m_CategoryName = pt.get("categoryName", "");
	if (pt.get_child_optional("weightDimensions")) {
        m_WeightDimensions = fromPt<GoodsStatsWeightDimensionsDTO>(pt.get_child("weightDimensions"));
	}
	// push all items of Warehouses into member
	if (pt.get_child_optional("warehouses")) {
        m_Warehouses = fromPt<std::vector<GoodsStatsWarehouseDTO>>(pt.get_child("warehouses"));
	}
	// push all items of Tariffs into member
	if (pt.get_child_optional("tariffs")) {
        m_Tariffs = fromPt<std::vector<TariffDTO>>(pt.get_child("tariffs"));
	}
	// push all items of Pictures into member
	if (pt.get_child_optional("pictures")) {
        m_Pictures = fromPt<std::vector<std::string>>(pt.get_child("pictures"));
	}
}

std::string GoodsStatsGoodsDTO::getShopSku() const
{
    return m_ShopSku;
}

void GoodsStatsGoodsDTO::setShopSku(std::string value)
{
    m_ShopSku = value;
}


int64_t GoodsStatsGoodsDTO::getMarketSku() const
{
    return m_MarketSku;
}

void GoodsStatsGoodsDTO::setMarketSku(int64_t value)
{
    m_MarketSku = value;
}


std::string GoodsStatsGoodsDTO::getName() const
{
    return m_Name;
}

void GoodsStatsGoodsDTO::setName(std::string value)
{
    m_Name = value;
}


double GoodsStatsGoodsDTO::getPrice() const
{
    return m_Price;
}

void GoodsStatsGoodsDTO::setPrice(double value)
{
    m_Price = value;
}


int64_t GoodsStatsGoodsDTO::getCategoryId() const
{
    return m_CategoryId;
}

void GoodsStatsGoodsDTO::setCategoryId(int64_t value)
{
    m_CategoryId = value;
}


std::string GoodsStatsGoodsDTO::getCategoryName() const
{
    return m_CategoryName;
}

void GoodsStatsGoodsDTO::setCategoryName(std::string value)
{
    m_CategoryName = value;
}


GoodsStatsWeightDimensionsDTO GoodsStatsGoodsDTO::getWeightDimensions() const
{
    return m_WeightDimensions;
}

void GoodsStatsGoodsDTO::setWeightDimensions(GoodsStatsWeightDimensionsDTO value)
{
    m_WeightDimensions = value;
}


std::vector<GoodsStatsWarehouseDTO> GoodsStatsGoodsDTO::getWarehouses() const
{
    return m_Warehouses;
}

void GoodsStatsGoodsDTO::setWarehouses(std::vector<GoodsStatsWarehouseDTO> value)
{
    m_Warehouses = value;
}


std::vector<TariffDTO> GoodsStatsGoodsDTO::getTariffs() const
{
    return m_Tariffs;
}

void GoodsStatsGoodsDTO::setTariffs(std::vector<TariffDTO> value)
{
    m_Tariffs = value;
}


std::vector<std::string> GoodsStatsGoodsDTO::getPictures() const
{
    return m_Pictures;
}

void GoodsStatsGoodsDTO::setPictures(std::vector<std::string> value)
{
    m_Pictures = value;
}



std::vector<GoodsStatsGoodsDTO> createGoodsStatsGoodsDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<GoodsStatsGoodsDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(GoodsStatsGoodsDTO(child.second));
    }

    return vec;
}

}
}
}
}

