/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OfferForRecommendationDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OfferForRecommendationDTO::OfferForRecommendationDTO()
{
    m_OfferId = "";
    m_OfferIdIsSet = false;
    m_PriceIsSet = false;
    m_CofinancePriceIsSet = false;
    m_CompetitivenessIsSet = false;
    m_Shows = 0L;
    m_ShowsIsSet = false;
    
}

void OfferForRecommendationDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OfferForRecommendationDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OfferForRecommendationDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OfferForRecommendationDTO" : pathPrefix;

         
    if (offerIdIsSet())
    {
        const std::string& value = m_OfferId;
        const std::string currentValuePath = _pathPrefix + ".offerId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
                    
    return success;
}

bool OfferForRecommendationDTO::operator==(const OfferForRecommendationDTO& rhs) const
{
    return
    
    
    
    ((!offerIdIsSet() && !rhs.offerIdIsSet()) || (offerIdIsSet() && rhs.offerIdIsSet() && getOfferId() == rhs.getOfferId())) &&
    
    
    ((!priceIsSet() && !rhs.priceIsSet()) || (priceIsSet() && rhs.priceIsSet() && getPrice() == rhs.getPrice())) &&
    
    
    ((!cofinancePriceIsSet() && !rhs.cofinancePriceIsSet()) || (cofinancePriceIsSet() && rhs.cofinancePriceIsSet() && getCofinancePrice() == rhs.getCofinancePrice())) &&
    
    
    ((!competitivenessIsSet() && !rhs.competitivenessIsSet()) || (competitivenessIsSet() && rhs.competitivenessIsSet() && getCompetitiveness() == rhs.getCompetitiveness())) &&
    
    
    ((!showsIsSet() && !rhs.showsIsSet()) || (showsIsSet() && rhs.showsIsSet() && getShows() == rhs.getShows()))
    
    ;
}

bool OfferForRecommendationDTO::operator!=(const OfferForRecommendationDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OfferForRecommendationDTO& o)
{
    j = nlohmann::json::object();
    if(o.offerIdIsSet())
        j["offerId"] = o.m_OfferId;
    if(o.priceIsSet())
        j["price"] = o.m_Price;
    if(o.cofinancePriceIsSet())
        j["cofinancePrice"] = o.m_CofinancePrice;
    if(o.competitivenessIsSet())
        j["competitiveness"] = o.m_Competitiveness;
    if(o.showsIsSet())
        j["shows"] = o.m_Shows;
    
}

void from_json(const nlohmann::json& j, OfferForRecommendationDTO& o)
{
    if(j.find("offerId") != j.end())
    {
        j.at("offerId").get_to(o.m_OfferId);
        o.m_OfferIdIsSet = true;
    } 
    if(j.find("price") != j.end())
    {
        j.at("price").get_to(o.m_Price);
        o.m_PriceIsSet = true;
    } 
    if(j.find("cofinancePrice") != j.end())
    {
        j.at("cofinancePrice").get_to(o.m_CofinancePrice);
        o.m_CofinancePriceIsSet = true;
    } 
    if(j.find("competitiveness") != j.end())
    {
        j.at("competitiveness").get_to(o.m_Competitiveness);
        o.m_CompetitivenessIsSet = true;
    } 
    if(j.find("shows") != j.end())
    {
        j.at("shows").get_to(o.m_Shows);
        o.m_ShowsIsSet = true;
    } 
    
}

std::string OfferForRecommendationDTO::getOfferId() const
{
    return m_OfferId;
}
void OfferForRecommendationDTO::setOfferId(std::string const& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}
bool OfferForRecommendationDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}
void OfferForRecommendationDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
org::openapitools::server::model::BasePriceDTO OfferForRecommendationDTO::getPrice() const
{
    return m_Price;
}
void OfferForRecommendationDTO::setPrice(org::openapitools::server::model::BasePriceDTO const& value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool OfferForRecommendationDTO::priceIsSet() const
{
    return m_PriceIsSet;
}
void OfferForRecommendationDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
org::openapitools::server::model::GetPriceDTO OfferForRecommendationDTO::getCofinancePrice() const
{
    return m_CofinancePrice;
}
void OfferForRecommendationDTO::setCofinancePrice(org::openapitools::server::model::GetPriceDTO const& value)
{
    m_CofinancePrice = value;
    m_CofinancePriceIsSet = true;
}
bool OfferForRecommendationDTO::cofinancePriceIsSet() const
{
    return m_CofinancePriceIsSet;
}
void OfferForRecommendationDTO::unsetCofinancePrice()
{
    m_CofinancePriceIsSet = false;
}
org::openapitools::server::model::PriceCompetitivenessType OfferForRecommendationDTO::getCompetitiveness() const
{
    return m_Competitiveness;
}
void OfferForRecommendationDTO::setCompetitiveness(org::openapitools::server::model::PriceCompetitivenessType const& value)
{
    m_Competitiveness = value;
    m_CompetitivenessIsSet = true;
}
bool OfferForRecommendationDTO::competitivenessIsSet() const
{
    return m_CompetitivenessIsSet;
}
void OfferForRecommendationDTO::unsetCompetitiveness()
{
    m_CompetitivenessIsSet = false;
}
int64_t OfferForRecommendationDTO::getShows() const
{
    return m_Shows;
}
void OfferForRecommendationDTO::setShows(int64_t const value)
{
    m_Shows = value;
    m_ShowsIsSet = true;
}
bool OfferForRecommendationDTO::showsIsSet() const
{
    return m_ShowsIsSet;
}
void OfferForRecommendationDTO::unsetShows()
{
    m_ShowsIsSet = false;
}


} // namespace org::openapitools::server::model

