/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FullOutletDTO.h
 *
 * Информация о точке продаж.
 */

#ifndef FullOutletDTO_H_
#define FullOutletDTO_H_


#include "OutletType.h"
#include "OutletVisibilityType.h"
#include "OutletWorkingScheduleDTO.h"
#include "OutletDeliveryRuleDTO.h"
#include <string>
#include "RegionDTO.h"
#include <vector>
#include "OutletAddressDTO.h"
#include "OutletStatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о точке продаж.
/// </summary>
class  FullOutletDTO
{
public:
    FullOutletDTO();
    virtual ~FullOutletDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FullOutletDTO& rhs) const;
    bool operator!=(const FullOutletDTO& rhs) const;

    /////////////////////////////////////////////
    /// FullOutletDTO members

    /// <summary>
    /// Название точки продаж. 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OutletType getType() const;
    void setType(org::openapitools::server::model::OutletType const& value);
    /// <summary>
    /// Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, &#x60;20.4522144, 54.7104264&#x60;.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в &#x60;address&#x60;. 
    /// </summary>
    std::string getCoords() const;
    void setCoords(std::string const& value);
    bool coordsIsSet() const;
    void unsetCoords();
    /// <summary>
    /// Признак основной точки продаж.  Возможные значения:  * &#x60;false&#x60; — неосновная точка продаж. * &#x60;true&#x60; — основная точка продаж. 
    /// </summary>
    bool isIsMain() const;
    void setIsMain(bool const value);
    bool isMainIsSet() const;
    void unsetIsMain();
    /// <summary>
    /// Идентификатор точки продаж, присвоенный магазином.
    /// </summary>
    std::string getShopOutletCode() const;
    void setShopOutletCode(std::string const& value);
    bool shopOutletCodeIsSet() const;
    void unsetShopOutletCode();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OutletVisibilityType getVisibility() const;
    void setVisibility(org::openapitools::server::model::OutletVisibilityType const& value);
    bool visibilityIsSet() const;
    void unsetVisibility();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OutletAddressDTO getAddress() const;
    void setAddress(org::openapitools::server::model::OutletAddressDTO const& value);
    /// <summary>
    /// Номера телефонов точки продаж. Передавайте в формате: &#x60;+7 (999) 999-99-99&#x60;. 
    /// </summary>
    std::vector<std::string> getPhones() const;
    void setPhones(std::vector<std::string> const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OutletWorkingScheduleDTO getWorkingSchedule() const;
    void setWorkingSchedule(org::openapitools::server::model::OutletWorkingScheduleDTO const& value);
    /// <summary>
    /// Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр &#x60;type&#x3D;DEPOT&#x60; или &#x60;type&#x3D;MIXED&#x60;. 
    /// </summary>
    std::vector<org::openapitools::server::model::OutletDeliveryRuleDTO> getDeliveryRules() const;
    void setDeliveryRules(std::vector<org::openapitools::server::model::OutletDeliveryRuleDTO> const& value);
    bool deliveryRulesIsSet() const;
    void unsetDeliveryRules();
    /// <summary>
    /// Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
    /// </summary>
    int64_t getStoragePeriod() const;
    void setStoragePeriod(int64_t const value);
    bool storagePeriodIsSet() const;
    void unsetStoragePeriod();
    /// <summary>
    /// Идентификатор точки продаж, присвоенный Маркетом.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OutletStatusType getStatus() const;
    void setStatus(org::openapitools::server::model::OutletStatusType const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::RegionDTO getRegion() const;
    void setRegion(org::openapitools::server::model::RegionDTO const& value);
    bool regionIsSet() const;
    void unsetRegion();
    /// <summary>
    /// Идентификатор точки продаж, заданный магазином.
    /// </summary>
    std::string getShopOutletId() const;
    void setShopOutletId(std::string const& value);
    bool shopOutletIdIsSet() const;
    void unsetShopOutletId();
    /// <summary>
    /// Рабочее время.
    /// </summary>
    std::string getWorkingTime() const;
    void setWorkingTime(std::string const& value);
    bool workingTimeIsSet() const;
    void unsetWorkingTime();
    /// <summary>
    /// Статус модерации.
    /// </summary>
    std::string getModerationReason() const;
    void setModerationReason(std::string const& value);
    bool moderationReasonIsSet() const;
    void unsetModerationReason();

    friend  void to_json(nlohmann::json& j, const FullOutletDTO& o);
    friend  void from_json(const nlohmann::json& j, FullOutletDTO& o);
protected:
    std::string m_Name;

    org::openapitools::server::model::OutletType m_Type;

    std::string m_Coords;
    bool m_CoordsIsSet;
    bool m_IsMain;
    bool m_IsMainIsSet;
    std::string m_ShopOutletCode;
    bool m_ShopOutletCodeIsSet;
    org::openapitools::server::model::OutletVisibilityType m_Visibility;
    bool m_VisibilityIsSet;
    org::openapitools::server::model::OutletAddressDTO m_Address;

    std::vector<std::string> m_Phones;

    org::openapitools::server::model::OutletWorkingScheduleDTO m_WorkingSchedule;

    std::vector<org::openapitools::server::model::OutletDeliveryRuleDTO> m_DeliveryRules;
    bool m_DeliveryRulesIsSet;
    int64_t m_StoragePeriod;
    bool m_StoragePeriodIsSet;
    int64_t m_Id;
    bool m_IdIsSet;
    org::openapitools::server::model::OutletStatusType m_Status;
    bool m_StatusIsSet;
    org::openapitools::server::model::RegionDTO m_Region;
    bool m_RegionIsSet;
    std::string m_ShopOutletId;
    bool m_ShopOutletIdIsSet;
    std::string m_WorkingTime;
    bool m_WorkingTimeIsSet;
    std::string m_ModerationReason;
    bool m_ModerationReasonIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* FullOutletDTO_H_ */
