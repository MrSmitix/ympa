/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FullOutletDTO.h
 *
 * Информация о точке продаж.
 */

#ifndef FullOutletDTO_H_
#define FullOutletDTO_H_



#include "OutletType.h"
#include "OutletVisibilityType.h"
#include "OutletWorkingScheduleDTO.h"
#include "OutletDeliveryRuleDTO.h"
#include <string>
#include "RegionDTO.h"
#include <vector>
#include "OutletAddressDTO.h"
#include "OutletStatusType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "OutletDTO.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о точке продаж.
/// </summary>
class  FullOutletDTO : public OutletDTO
{
public:
    FullOutletDTO() = default;
    explicit FullOutletDTO(boost::property_tree::ptree const& pt);
    virtual ~FullOutletDTO() = default;

    FullOutletDTO(const FullOutletDTO& other) = default; // copy constructor
    FullOutletDTO(FullOutletDTO&& other) noexcept = default; // move constructor

    FullOutletDTO& operator=(const FullOutletDTO& other) = default; // copy assignment
    FullOutletDTO& operator=(FullOutletDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FullOutletDTO members

    /// <summary>
    /// Название точки продаж. 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    OutletType getType() const;
    void setType(OutletType value);

    /// <summary>
    /// Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, &#x60;20.4522144, 54.7104264&#x60;.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в &#x60;address&#x60;. 
    /// </summary>
    std::string getCoords() const;
    void setCoords(std::string value);

    /// <summary>
    /// Признак основной точки продаж.  Возможные значения:  * &#x60;false&#x60; — неосновная точка продаж. * &#x60;true&#x60; — основная точка продаж. 
    /// </summary>
    bool isIsMain() const;
    void setIsMain(bool value);

    /// <summary>
    /// Идентификатор точки продаж, присвоенный магазином.
    /// </summary>
    std::string getShopOutletCode() const;
    void setShopOutletCode(std::string value);

    /// <summary>
    /// 
    /// </summary>
    OutletVisibilityType getVisibility() const;
    void setVisibility(OutletVisibilityType value);

    /// <summary>
    /// 
    /// </summary>
    OutletAddressDTO getAddress() const;
    void setAddress(OutletAddressDTO value);

    /// <summary>
    /// Номера телефонов точки продаж. Передавайте в формате: &#x60;+7 (999) 999-99-99&#x60;. 
    /// </summary>
    std::vector<std::string> getPhones() const;
    void setPhones(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    OutletWorkingScheduleDTO getWorkingSchedule() const;
    void setWorkingSchedule(OutletWorkingScheduleDTO value);

    /// <summary>
    /// Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр &#x60;type&#x3D;DEPOT&#x60; или &#x60;type&#x3D;MIXED&#x60;. 
    /// </summary>
    std::vector<OutletDeliveryRuleDTO> getDeliveryRules() const;
    void setDeliveryRules(std::vector<OutletDeliveryRuleDTO> value);

    /// <summary>
    /// Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
    /// </summary>
    int64_t getStoragePeriod() const;
    void setStoragePeriod(int64_t value);

    /// <summary>
    /// Идентификатор точки продаж, присвоенный Маркетом.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    OutletStatusType getStatus() const;
    void setStatus(OutletStatusType value);

    /// <summary>
    /// 
    /// </summary>
    RegionDTO getRegion() const;
    void setRegion(RegionDTO value);

    /// <summary>
    /// Идентификатор точки продаж, заданный магазином.
    /// </summary>
    std::string getShopOutletId() const;
    void setShopOutletId(std::string value);

    /// <summary>
    /// Рабочее время.
    /// </summary>
    std::string getWorkingTime() const;
    void setWorkingTime(std::string value);

    /// <summary>
    /// Статус модерации.
    /// </summary>
    std::string getModerationReason() const;
    void setModerationReason(std::string value);

protected:
    std::string m_Name = "";
    OutletType m_Type = OutletType{};
    std::string m_Coords = "";
    bool m_IsMain = false;
    std::string m_ShopOutletCode = "";
    OutletVisibilityType m_Visibility = OutletVisibilityType{};
    OutletAddressDTO m_Address;
    std::vector<std::string> m_Phones;
    OutletWorkingScheduleDTO m_WorkingSchedule;
    std::vector<OutletDeliveryRuleDTO> m_DeliveryRules;
    int64_t m_StoragePeriod = 0L;
    int64_t m_Id = 0L;
    OutletStatusType m_Status = OutletStatusType{};
    RegionDTO m_Region;
    std::string m_ShopOutletId = "";
    std::string m_WorkingTime = "";
    std::string m_ModerationReason = "";
};

std::vector<FullOutletDTO> createFullOutletDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FullOutletDTO>(const FullOutletDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FullOutletDTO fromPt<FullOutletDTO>(const boost::property_tree::ptree& pt) {
    FullOutletDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FullOutletDTO_H_ */
