/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ShelfsStatisticsAttributionType.h
 *
 * Тип атрибуции:   * &#x60;CLICKS&#x60; — по кликам.   * &#x60;SHOWS&#x60; — по показам. &lt;br&gt;&lt;br&gt;  О том, какие данные в отчете зависят и не зависят от типа атрибуции, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf#stats). 
 */

#ifndef ShelfsStatisticsAttributionType_H_
#define ShelfsStatisticsAttributionType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Тип атрибуции:   * &#x60;CLICKS&#x60; — по кликам.   * &#x60;SHOWS&#x60; — по показам. &lt;br&gt;&lt;br&gt;  О том, какие данные в отчете зависят и не зависят от типа атрибуции, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf#stats). 
/// </summary>
class  ShelfsStatisticsAttributionType 
{
public:
    ShelfsStatisticsAttributionType() = default;
    explicit ShelfsStatisticsAttributionType(boost::property_tree::ptree const& pt);
    virtual ~ShelfsStatisticsAttributionType() = default;

    ShelfsStatisticsAttributionType(const ShelfsStatisticsAttributionType& other) = default; // copy constructor
    ShelfsStatisticsAttributionType(ShelfsStatisticsAttributionType&& other) noexcept = default; // move constructor

    ShelfsStatisticsAttributionType& operator=(const ShelfsStatisticsAttributionType& other) = default; // copy assignment
    ShelfsStatisticsAttributionType& operator=(ShelfsStatisticsAttributionType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// ShelfsStatisticsAttributionType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_ShelfsStatisticsAttributionTypeEnumValue;
};

std::vector<ShelfsStatisticsAttributionType> createShelfsStatisticsAttributionTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ShelfsStatisticsAttributionType>(const ShelfsStatisticsAttributionType& val) {
    return val.toPropertyTree();
}

template<>
inline ShelfsStatisticsAttributionType fromPt<ShelfsStatisticsAttributionType>(const boost::property_tree::ptree& pt) {
    ShelfsStatisticsAttributionType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ShelfsStatisticsAttributionType_H_ */
