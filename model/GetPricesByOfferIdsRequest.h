/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetPricesByOfferIdsRequest.h
 *
 * Запрос списка цен.
 */

#ifndef GetPricesByOfferIdsRequest_H_
#define GetPricesByOfferIdsRequest_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Запрос списка цен.
/// </summary>
class  GetPricesByOfferIdsRequest 
{
public:
    GetPricesByOfferIdsRequest() = default;
    explicit GetPricesByOfferIdsRequest(boost::property_tree::ptree const& pt);
    virtual ~GetPricesByOfferIdsRequest() = default;

    GetPricesByOfferIdsRequest(const GetPricesByOfferIdsRequest& other) = default; // copy constructor
    GetPricesByOfferIdsRequest(GetPricesByOfferIdsRequest&& other) noexcept = default; // move constructor

    GetPricesByOfferIdsRequest& operator=(const GetPricesByOfferIdsRequest& other) = default; // copy assignment
    GetPricesByOfferIdsRequest& operator=(GetPricesByOfferIdsRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GetPricesByOfferIdsRequest members

    /// <summary>
    /// Список SKU.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60;  {% endnote %}    
    /// </summary>
    std::vector<std::string> getOfferIds() const;
    void setOfferIds(std::vector<std::string> value);

protected:
    std::vector<std::string> m_OfferIds;
};

std::vector<GetPricesByOfferIdsRequest> createGetPricesByOfferIdsRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GetPricesByOfferIdsRequest>(const GetPricesByOfferIdsRequest& val) {
    return val.toPropertyTree();
}

template<>
inline GetPricesByOfferIdsRequest fromPt<GetPricesByOfferIdsRequest>(const boost::property_tree::ptree& pt) {
    GetPricesByOfferIdsRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GetPricesByOfferIdsRequest_H_ */
