/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrdersStatsCommissionDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrdersStatsCommissionDTO::OrdersStatsCommissionDTO()
{
    m_TypeIsSet = false;
    m_Actual = 0.0;
    m_ActualIsSet = false;
    
}

void OrdersStatsCommissionDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrdersStatsCommissionDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrdersStatsCommissionDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrdersStatsCommissionDTO" : pathPrefix;

            
    return success;
}

bool OrdersStatsCommissionDTO::operator==(const OrdersStatsCommissionDTO& rhs) const
{
    return
    
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!actualIsSet() && !rhs.actualIsSet()) || (actualIsSet() && rhs.actualIsSet() && getActual() == rhs.getActual()))
    
    ;
}

bool OrdersStatsCommissionDTO::operator!=(const OrdersStatsCommissionDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrdersStatsCommissionDTO& o)
{
    j = nlohmann::json::object();
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.actualIsSet())
        j["actual"] = o.m_Actual;
    
}

void from_json(const nlohmann::json& j, OrdersStatsCommissionDTO& o)
{
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("actual") != j.end())
    {
        j.at("actual").get_to(o.m_Actual);
        o.m_ActualIsSet = true;
    } 
    
}

org::openapitools::server::model::OrdersStatsCommissionType OrdersStatsCommissionDTO::getType() const
{
    return m_Type;
}
void OrdersStatsCommissionDTO::setType(org::openapitools::server::model::OrdersStatsCommissionType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool OrdersStatsCommissionDTO::typeIsSet() const
{
    return m_TypeIsSet;
}
void OrdersStatsCommissionDTO::unsetType()
{
    m_TypeIsSet = false;
}
double OrdersStatsCommissionDTO::getActual() const
{
    return m_Actual;
}
void OrdersStatsCommissionDTO::setActual(double const value)
{
    m_Actual = value;
    m_ActualIsSet = true;
}
bool OrdersStatsCommissionDTO::actualIsSet() const
{
    return m_ActualIsSet;
}
void OrdersStatsCommissionDTO::unsetActual()
{
    m_ActualIsSet = false;
}


} // namespace org::openapitools::server::model

