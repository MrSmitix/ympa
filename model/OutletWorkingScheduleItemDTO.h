/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OutletWorkingScheduleItemDTO.h
 *
 * Расписание работы точки продаж.
 */

#ifndef OutletWorkingScheduleItemDTO_H_
#define OutletWorkingScheduleItemDTO_H_



#include "DayOfWeekType.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Расписание работы точки продаж.
/// </summary>
class  OutletWorkingScheduleItemDTO 
{
public:
    OutletWorkingScheduleItemDTO() = default;
    explicit OutletWorkingScheduleItemDTO(boost::property_tree::ptree const& pt);
    virtual ~OutletWorkingScheduleItemDTO() = default;

    OutletWorkingScheduleItemDTO(const OutletWorkingScheduleItemDTO& other) = default; // copy constructor
    OutletWorkingScheduleItemDTO(OutletWorkingScheduleItemDTO&& other) noexcept = default; // move constructor

    OutletWorkingScheduleItemDTO& operator=(const OutletWorkingScheduleItemDTO& other) = default; // copy assignment
    OutletWorkingScheduleItemDTO& operator=(OutletWorkingScheduleItemDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OutletWorkingScheduleItemDTO members

    /// <summary>
    /// 
    /// </summary>
    DayOfWeekType getStartDay() const;
    void setStartDay(DayOfWeekType value);

    /// <summary>
    /// 
    /// </summary>
    DayOfWeekType getEndDay() const;
    void setEndDay(DayOfWeekType value);

    /// <summary>
    /// Точка продаж работает c указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. 
    /// </summary>
    std::string getStartTime() const;
    void setStartTime(std::string value);

    /// <summary>
    /// Точка продаж работает до указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. 
    /// </summary>
    std::string getEndTime() const;
    void setEndTime(std::string value);

protected:
    DayOfWeekType m_StartDay = DayOfWeekType{};
    DayOfWeekType m_EndDay = DayOfWeekType{};
    std::string m_StartTime = "";
    std::string m_EndTime = "";
};

std::vector<OutletWorkingScheduleItemDTO> createOutletWorkingScheduleItemDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OutletWorkingScheduleItemDTO>(const OutletWorkingScheduleItemDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OutletWorkingScheduleItemDTO fromPt<OutletWorkingScheduleItemDTO>(const boost::property_tree::ptree& pt) {
    OutletWorkingScheduleItemDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OutletWorkingScheduleItemDTO_H_ */
