/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OutletWorkingScheduleItemDTO.h
 *
 * Расписание работы точки продаж.
 */

#ifndef OutletWorkingScheduleItemDTO_H_
#define OutletWorkingScheduleItemDTO_H_


#include "DayOfWeekType.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Расписание работы точки продаж.
/// </summary>
class  OutletWorkingScheduleItemDTO
{
public:
    OutletWorkingScheduleItemDTO();
    virtual ~OutletWorkingScheduleItemDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OutletWorkingScheduleItemDTO& rhs) const;
    bool operator!=(const OutletWorkingScheduleItemDTO& rhs) const;

    /////////////////////////////////////////////
    /// OutletWorkingScheduleItemDTO members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::DayOfWeekType getStartDay() const;
    void setStartDay(org::openapitools::server::model::DayOfWeekType const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::DayOfWeekType getEndDay() const;
    void setEndDay(org::openapitools::server::model::DayOfWeekType const& value);
    /// <summary>
    /// Точка продаж работает c указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. 
    /// </summary>
    std::string getStartTime() const;
    void setStartTime(std::string const& value);
    /// <summary>
    /// Точка продаж работает до указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. 
    /// </summary>
    std::string getEndTime() const;
    void setEndTime(std::string const& value);

    friend  void to_json(nlohmann::json& j, const OutletWorkingScheduleItemDTO& o);
    friend  void from_json(const nlohmann::json& j, OutletWorkingScheduleItemDTO& o);
protected:
    org::openapitools::server::model::DayOfWeekType m_StartDay;

    org::openapitools::server::model::DayOfWeekType m_EndDay;

    std::string m_StartTime;

    std::string m_EndTime;

    
};

} // namespace org::openapitools::server::model

#endif /* OutletWorkingScheduleItemDTO_H_ */
