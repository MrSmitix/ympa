/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BidRecommendationItemDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BidRecommendationItemDTO::BidRecommendationItemDTO()
{
    m_Bid = 0;
    m_ShowPercent = 0L;
    
}

void BidRecommendationItemDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BidRecommendationItemDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BidRecommendationItemDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BidRecommendationItemDTO" : pathPrefix;

         
    
    /* Bid */ {
        const int32_t& value = m_Bid;
        const std::string currentValuePath = _pathPrefix + ".bid";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 9999)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 9999;";
        }

    }
         
    
    /* ShowPercent */ {
        const int64_t& value = m_ShowPercent;
        const std::string currentValuePath = _pathPrefix + ".showPercent";
                
        
        if (value < 0ll)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 100ll)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 100;";
        }

    }
    
    return success;
}

bool BidRecommendationItemDTO::operator==(const BidRecommendationItemDTO& rhs) const
{
    return
    
    
    (getBid() == rhs.getBid())
     &&
    
    (getShowPercent() == rhs.getShowPercent())
    
    
    ;
}

bool BidRecommendationItemDTO::operator!=(const BidRecommendationItemDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BidRecommendationItemDTO& o)
{
    j = nlohmann::json::object();
    j["bid"] = o.m_Bid;
    j["showPercent"] = o.m_ShowPercent;
    
}

void from_json(const nlohmann::json& j, BidRecommendationItemDTO& o)
{
    j.at("bid").get_to(o.m_Bid);
    j.at("showPercent").get_to(o.m_ShowPercent);
    
}

int32_t BidRecommendationItemDTO::getBid() const
{
    return m_Bid;
}
void BidRecommendationItemDTO::setBid(int32_t const value)
{
    m_Bid = value;
}
int64_t BidRecommendationItemDTO::getShowPercent() const
{
    return m_ShowPercent;
}
void BidRecommendationItemDTO::setShowPercent(int64_t const value)
{
    m_ShowPercent = value;
}


} // namespace org::openapitools::server::model

