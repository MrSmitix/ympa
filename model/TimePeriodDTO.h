/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TimePeriodDTO.h
 *
 * Временной отрезок с комментарием. Требования к содержанию комментария зависят от контекста использования параметра и указаны в описании поля, которое его содержит.
 */

#ifndef TimePeriodDTO_H_
#define TimePeriodDTO_H_



#include <string>
#include "TimeUnitType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Временной отрезок с комментарием. Требования к содержанию комментария зависят от контекста использования параметра и указаны в описании поля, которое его содержит.
/// </summary>
class  TimePeriodDTO 
{
public:
    TimePeriodDTO() = default;
    explicit TimePeriodDTO(boost::property_tree::ptree const& pt);
    virtual ~TimePeriodDTO() = default;

    TimePeriodDTO(const TimePeriodDTO& other) = default; // copy constructor
    TimePeriodDTO(TimePeriodDTO&& other) noexcept = default; // move constructor

    TimePeriodDTO& operator=(const TimePeriodDTO& other) = default; // copy assignment
    TimePeriodDTO& operator=(TimePeriodDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TimePeriodDTO members

    /// <summary>
    /// Продолжительность в указанных единицах.
    /// </summary>
    int32_t getTimePeriod() const;
    void setTimePeriod(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    TimeUnitType getTimeUnit() const;
    void setTimeUnit(TimeUnitType value);

    /// <summary>
    /// Комментарий.
    /// </summary>
    std::string getComment() const;
    void setComment(std::string value);

protected:
    int32_t m_TimePeriod = 0;
    TimeUnitType m_TimeUnit = TimeUnitType{};
    std::string m_Comment = "";
};

std::vector<TimePeriodDTO> createTimePeriodDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TimePeriodDTO>(const TimePeriodDTO& val) {
    return val.toPropertyTree();
}

template<>
inline TimePeriodDTO fromPt<TimePeriodDTO>(const boost::property_tree::ptree& pt) {
    TimePeriodDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TimePeriodDTO_H_ */
