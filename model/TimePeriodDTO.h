/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TimePeriodDTO.h
 *
 * Временной отрезок с комментарием. Требования к содержанию комментария зависят от контекста использования параметра и указаны в описании поля, которое его содержит.
 */

#ifndef TimePeriodDTO_H_
#define TimePeriodDTO_H_



#include <string>
#include <vector>
#include "TimeUnitType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Временной отрезок с комментарием. Требования к содержанию комментария зависят от контекста использования параметра и указаны в описании поля, которое его содержит.
/// </summary>
class  TimePeriodDTO 
{
public:
    TimePeriodDTO() = default;
    explicit TimePeriodDTO(boost::property_tree::ptree const& pt);
    virtual ~TimePeriodDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// TimePeriodDTO members

    /// <summary>
    /// Продолжительность в указанных единицах.
    /// </summary>
    int32_t getTimePeriod() const;
    void setTimePeriod(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TimeUnitType> getTimeUnit() const;
    void setTimeUnit(std::shared_ptr<TimeUnitType> value);

    /// <summary>
    /// Комментарий.
    /// </summary>
    std::string getComment() const;
    void setComment(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int32_t m_TimePeriod = 0;
    std::shared_ptr<TimeUnitType> m_TimeUnit = std::make_shared<TimeUnitType>();
    std::string m_Comment = "";
};

std::vector<TimePeriodDTO> createTimePeriodDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* TimePeriodDTO_H_ */
