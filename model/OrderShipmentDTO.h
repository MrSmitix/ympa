/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderShipmentDTO.h
 *
 * Список посылок.  В параметре может указываться несколько посылок. 
 */

#ifndef OrderShipmentDTO_H_
#define OrderShipmentDTO_H_



#include "OrderParcelBoxDTO.h"
#include <string>
#include "OrderTrackDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Список посылок.  В параметре может указываться несколько посылок. 
/// </summary>
class  OrderShipmentDTO 
{
public:
    OrderShipmentDTO() = default;
    explicit OrderShipmentDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderShipmentDTO() = default;

    OrderShipmentDTO(const OrderShipmentDTO& other) = default; // copy constructor
    OrderShipmentDTO(OrderShipmentDTO&& other) noexcept = default; // move constructor

    OrderShipmentDTO& operator=(const OrderShipmentDTO& other) = default; // copy assignment
    OrderShipmentDTO& operator=(OrderShipmentDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrderShipmentDTO members

    /// <summary>
    /// Идентификатор посылки, присвоенный Маркетом.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getShipmentDate() const;
    void setShipmentDate(std::string value);

    /// <summary>
    /// **Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус &#x60;READY_TO_SHIP&#x60;. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. 
    /// </summary>
    std::string getShipmentTime() const;
    void setShipmentTime(std::string value);

    /// <summary>
    /// **Только для модели DBS**  Информация для отслеживания перемещений посылки. 
    /// </summary>
    std::vector<OrderTrackDTO> getTracks() const;
    void setTracks(std::vector<OrderTrackDTO> value);

    /// <summary>
    /// Список грузовых мест.
    /// </summary>
    std::vector<OrderParcelBoxDTO> getBoxes() const;
    void setBoxes(std::vector<OrderParcelBoxDTO> value);

protected:
    int64_t m_Id = 0L;
    std::string m_ShipmentDate = "";
    std::string m_ShipmentTime = "";
    std::vector<OrderTrackDTO> m_Tracks;
    std::vector<OrderParcelBoxDTO> m_Boxes;
};

std::vector<OrderShipmentDTO> createOrderShipmentDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderShipmentDTO>(const OrderShipmentDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrderShipmentDTO fromPt<OrderShipmentDTO>(const boost::property_tree::ptree& pt) {
    OrderShipmentDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderShipmentDTO_H_ */
