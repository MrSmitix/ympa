/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferParamDTO.h
 *
 * Параметры товара.  Если у товара несколько значений одного параметра, передайте их с одним и тем же &#x60;name&#x60;, но разными &#x60;value&#x60;.  {% cut \&quot;Пример\&quot; %}  &#x60;&#x60;&#x60;json \&quot;params\&quot;: [   {     \&quot;name\&quot;: \&quot;Цвет\&quot;,     \&quot;value\&quot;: \&quot;Зеленый\&quot;   },   {     \&quot;name\&quot;: \&quot;Цвет\&quot;,     \&quot;value\&quot;: \&quot;Желтый\&quot;   } ] &#x60;&#x60;&#x60;  {% endcut %} 
 */

#ifndef OfferParamDTO_H_
#define OfferParamDTO_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Параметры товара.  Если у товара несколько значений одного параметра, передайте их с одним и тем же &#x60;name&#x60;, но разными &#x60;value&#x60;.  {% cut \&quot;Пример\&quot; %}  &#x60;&#x60;&#x60;json \&quot;params\&quot;: [   {     \&quot;name\&quot;: \&quot;Цвет\&quot;,     \&quot;value\&quot;: \&quot;Зеленый\&quot;   },   {     \&quot;name\&quot;: \&quot;Цвет\&quot;,     \&quot;value\&quot;: \&quot;Желтый\&quot;   } ] &#x60;&#x60;&#x60;  {% endcut %} 
/// </summary>
class  OfferParamDTO 
{
public:
    OfferParamDTO() = default;
    explicit OfferParamDTO(boost::property_tree::ptree const& pt);
    virtual ~OfferParamDTO() = default;

    OfferParamDTO(const OfferParamDTO& other) = default; // copy constructor
    OfferParamDTO(OfferParamDTO&& other) noexcept = default; // move constructor

    OfferParamDTO& operator=(const OfferParamDTO& other) = default; // copy assignment
    OfferParamDTO& operator=(OfferParamDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OfferParamDTO members

    /// <summary>
    /// Название.  Должно совпадать с названием характеристики на Маркете. Узнать его можно из Excel-шаблона категории или через запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md). 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Значение. 
    /// </summary>
    std::string getValue() const;
    void setValue(std::string value);

protected:
    std::string m_Name = "";
    std::string m_Value = "";
};

std::vector<OfferParamDTO> createOfferParamDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OfferParamDTO>(const OfferParamDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OfferParamDTO fromPt<OfferParamDTO>(const boost::property_tree::ptree& pt) {
    OfferParamDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OfferParamDTO_H_ */
