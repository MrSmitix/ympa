/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetGoodsFeedbackRequest.h
 *
 * Фильтр запроса отзывов в кабинете. 
 */

#ifndef GetGoodsFeedbackRequest_H_
#define GetGoodsFeedbackRequest_H_



#include "Set.h"
#include <string>
#include "FeedbackReactionStatusType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Фильтр запроса отзывов в кабинете. 
/// </summary>
class  GetGoodsFeedbackRequest 
{
public:
    GetGoodsFeedbackRequest() = default;
    explicit GetGoodsFeedbackRequest(boost::property_tree::ptree const& pt);
    virtual ~GetGoodsFeedbackRequest() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// GetGoodsFeedbackRequest members

    /// <summary>
    /// Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в &#x60;dateTimeTo&#x60; даты. 
    /// </summary>
    std::string getDateTimeFrom() const;
    void setDateTimeFrom(std::string value);

    /// <summary>
    /// Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 
    /// </summary>
    std::string getDateTimeTo() const;
    void setDateTimeTo(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedbackReactionStatusType> getReactionStatus() const;
    void setReactionStatus(std::shared_ptr<FeedbackReactionStatusType> value);

    /// <summary>
    /// Оценка товара.
    /// </summary>
    Set<int32_t> getRatingValues() const;
    void setRatingValues(Set<int32_t> value);

    /// <summary>
    /// Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 
    /// </summary>
    Set<int64_t> getModelIds() const;
    void setModelIds(Set<int64_t> value);

    /// <summary>
    /// Фильтр отзывов за баллы Плюса.
    /// </summary>
    bool isPaid() const;
    void setPaid(bool value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_DateTimeFrom = "";
    std::string m_DateTimeTo = "";
    std::shared_ptr<FeedbackReactionStatusType> m_ReactionStatus = std::make_shared<FeedbackReactionStatusType>();
    Set<int32_t> m_RatingValues;
    Set<int64_t> m_ModelIds;
    bool m_Paid = false;
};

std::vector<GetGoodsFeedbackRequest> createGetGoodsFeedbackRequestVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* GetGoodsFeedbackRequest_H_ */
