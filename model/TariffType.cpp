/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TariffType.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

TariffType::TariffType()
{
    
}

void TariffType::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TariffType::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TariffType::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TariffType" : pathPrefix;

    
    if (m_value == TariffType::eTariffType::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool TariffType::operator==(const TariffType& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool TariffType::operator!=(const TariffType& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TariffType& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case TariffType::eTariffType::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case TariffType::eTariffType::AGENCY_COMMISSION:
            j = "AGENCY_COMMISSION";
            break;
        case TariffType::eTariffType::PAYMENT_TRANSFER:
            j = "PAYMENT_TRANSFER";
            break;
        case TariffType::eTariffType::STORAGE:
            j = "STORAGE";
            break;
        case TariffType::eTariffType::WITHDRAW:
            j = "WITHDRAW";
            break;
        case TariffType::eTariffType::SURPLUS:
            j = "SURPLUS";
            break;
        case TariffType::eTariffType::FEE:
            j = "FEE";
            break;
        case TariffType::eTariffType::DELIVERY_TO_CUSTOMER:
            j = "DELIVERY_TO_CUSTOMER";
            break;
        case TariffType::eTariffType::CROSSREGIONAL_DELIVERY:
            j = "CROSSREGIONAL_DELIVERY";
            break;
        case TariffType::eTariffType::CROSSREGIONAL_DELIVERY_RETURN:
            j = "CROSSREGIONAL_DELIVERY_RETURN";
            break;
        case TariffType::eTariffType::DISPOSAL:
            j = "DISPOSAL";
            break;
        case TariffType::eTariffType::SORTING_CENTER_STORAGE:
            j = "SORTING_CENTER_STORAGE";
            break;
        case TariffType::eTariffType::EXPRESS_DELIVERY:
            j = "EXPRESS_DELIVERY";
            break;
        case TariffType::eTariffType::FF_XDOC_SUPPLY_BOX:
            j = "FF_XDOC_SUPPLY_BOX";
            break;
        case TariffType::eTariffType::FF_XDOC_SUPPLY_PALLET:
            j = "FF_XDOC_SUPPLY_PALLET";
            break;
        case TariffType::eTariffType::SORTING:
            j = "SORTING";
            break;
        case TariffType::eTariffType::MIDDLE_MILE:
            j = "MIDDLE_MILE";
            break;
        case TariffType::eTariffType::RETURN_PROCESSING:
            j = "RETURN_PROCESSING";
            break;
        case TariffType::eTariffType::EXPRESS_CANCELLED_BY_PARTNER:
            j = "EXPRESS_CANCELLED_BY_PARTNER";
            break;
        case TariffType::eTariffType::DELIVERY_TO_CUSTOMER_RETURN:
            j = "DELIVERY_TO_CUSTOMER_RETURN";
            break;
        case TariffType::eTariffType::CROSSBORDER_DELIVERY:
            j = "CROSSBORDER_DELIVERY";
            break;
        case TariffType::eTariffType::INTAKE_SORTING_BULKY_CARGO:
            j = "INTAKE_SORTING_BULKY_CARGO";
            break;
        case TariffType::eTariffType::INTAKE_SORTING_SMALL_GOODS:
            j = "INTAKE_SORTING_SMALL_GOODS";
            break;
        case TariffType::eTariffType::INTAKE_SORTING_DAILY:
            j = "INTAKE_SORTING_DAILY";
            break;
        case TariffType::eTariffType::FF_STORAGE_BILLING:
            j = "FF_STORAGE_BILLING";
            break;
        case TariffType::eTariffType::CANCELLED_ORDER_FEE_QI:
            j = "CANCELLED_ORDER_FEE_QI";
            break;
        case TariffType::eTariffType::LATE_ORDER_EXECUTION_FEE_QI:
            j = "LATE_ORDER_EXECUTION_FEE_QI";
            break;
    }
}

void from_json(const nlohmann::json& j, TariffType& o)
{
    
    auto s = j.get<std::string>();
    if (s == "AGENCY_COMMISSION") {
     o.setValue(TariffType::eTariffType::AGENCY_COMMISSION);
    } 
    else if (s == "PAYMENT_TRANSFER") {
     o.setValue(TariffType::eTariffType::PAYMENT_TRANSFER);
    } 
    else if (s == "STORAGE") {
     o.setValue(TariffType::eTariffType::STORAGE);
    } 
    else if (s == "WITHDRAW") {
     o.setValue(TariffType::eTariffType::WITHDRAW);
    } 
    else if (s == "SURPLUS") {
     o.setValue(TariffType::eTariffType::SURPLUS);
    } 
    else if (s == "FEE") {
     o.setValue(TariffType::eTariffType::FEE);
    } 
    else if (s == "DELIVERY_TO_CUSTOMER") {
     o.setValue(TariffType::eTariffType::DELIVERY_TO_CUSTOMER);
    } 
    else if (s == "CROSSREGIONAL_DELIVERY") {
     o.setValue(TariffType::eTariffType::CROSSREGIONAL_DELIVERY);
    } 
    else if (s == "CROSSREGIONAL_DELIVERY_RETURN") {
     o.setValue(TariffType::eTariffType::CROSSREGIONAL_DELIVERY_RETURN);
    } 
    else if (s == "DISPOSAL") {
     o.setValue(TariffType::eTariffType::DISPOSAL);
    } 
    else if (s == "SORTING_CENTER_STORAGE") {
     o.setValue(TariffType::eTariffType::SORTING_CENTER_STORAGE);
    } 
    else if (s == "EXPRESS_DELIVERY") {
     o.setValue(TariffType::eTariffType::EXPRESS_DELIVERY);
    } 
    else if (s == "FF_XDOC_SUPPLY_BOX") {
     o.setValue(TariffType::eTariffType::FF_XDOC_SUPPLY_BOX);
    } 
    else if (s == "FF_XDOC_SUPPLY_PALLET") {
     o.setValue(TariffType::eTariffType::FF_XDOC_SUPPLY_PALLET);
    } 
    else if (s == "SORTING") {
     o.setValue(TariffType::eTariffType::SORTING);
    } 
    else if (s == "MIDDLE_MILE") {
     o.setValue(TariffType::eTariffType::MIDDLE_MILE);
    } 
    else if (s == "RETURN_PROCESSING") {
     o.setValue(TariffType::eTariffType::RETURN_PROCESSING);
    } 
    else if (s == "EXPRESS_CANCELLED_BY_PARTNER") {
     o.setValue(TariffType::eTariffType::EXPRESS_CANCELLED_BY_PARTNER);
    } 
    else if (s == "DELIVERY_TO_CUSTOMER_RETURN") {
     o.setValue(TariffType::eTariffType::DELIVERY_TO_CUSTOMER_RETURN);
    } 
    else if (s == "CROSSBORDER_DELIVERY") {
     o.setValue(TariffType::eTariffType::CROSSBORDER_DELIVERY);
    } 
    else if (s == "INTAKE_SORTING_BULKY_CARGO") {
     o.setValue(TariffType::eTariffType::INTAKE_SORTING_BULKY_CARGO);
    } 
    else if (s == "INTAKE_SORTING_SMALL_GOODS") {
     o.setValue(TariffType::eTariffType::INTAKE_SORTING_SMALL_GOODS);
    } 
    else if (s == "INTAKE_SORTING_DAILY") {
     o.setValue(TariffType::eTariffType::INTAKE_SORTING_DAILY);
    } 
    else if (s == "FF_STORAGE_BILLING") {
     o.setValue(TariffType::eTariffType::FF_STORAGE_BILLING);
    } 
    else if (s == "CANCELLED_ORDER_FEE_QI") {
     o.setValue(TariffType::eTariffType::CANCELLED_ORDER_FEE_QI);
    } 
    else if (s == "LATE_ORDER_EXECUTION_FEE_QI") {
     o.setValue(TariffType::eTariffType::LATE_ORDER_EXECUTION_FEE_QI);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " TariffType::eTariffType";
     throw std::invalid_argument(ss.str());
    } 

}

TariffType::eTariffType TariffType::getValue() const
{
    return m_value;
}
void TariffType::setValue(TariffType::eTariffType value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

