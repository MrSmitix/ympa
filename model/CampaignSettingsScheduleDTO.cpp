/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CampaignSettingsScheduleDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CampaignSettingsScheduleDTO::CampaignSettingsScheduleDTO()
{
    m_AvailableOnHolidays = false;
    m_AvailableOnHolidaysIsSet = false;
    m_PeriodIsSet = false;
    
}

void CampaignSettingsScheduleDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CampaignSettingsScheduleDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CampaignSettingsScheduleDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CampaignSettingsScheduleDTO" : pathPrefix;

             
    
    /* CustomHolidays */ {
        const std::vector<std::string>& value = m_CustomHolidays;
        const std::string currentValuePath = _pathPrefix + ".customHolidays";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    
    /* CustomWorkingDays */ {
        const std::vector<std::string>& value = m_CustomWorkingDays;
        const std::string currentValuePath = _pathPrefix + ".customWorkingDays";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
             
    
    /* TotalHolidays */ {
        const std::vector<std::string>& value = m_TotalHolidays;
        const std::string currentValuePath = _pathPrefix + ".totalHolidays";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    
    /* WeeklyHolidays */ {
        const std::vector<int32_t>& value = m_WeeklyHolidays;
        const std::string currentValuePath = _pathPrefix + ".weeklyHolidays";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int32_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (value < 1)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }
        if (value > 7)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 7;";
        }
 
                i++;
            }
        }

    }
    
    return success;
}

bool CampaignSettingsScheduleDTO::operator==(const CampaignSettingsScheduleDTO& rhs) const
{
    return
    
    
    
    ((!availableOnHolidaysIsSet() && !rhs.availableOnHolidaysIsSet()) || (availableOnHolidaysIsSet() && rhs.availableOnHolidaysIsSet() && isAvailableOnHolidays() == rhs.isAvailableOnHolidays())) &&
    
    (getCustomHolidays() == rhs.getCustomHolidays())
     &&
    
    (getCustomWorkingDays() == rhs.getCustomWorkingDays())
     &&
    
    
    ((!periodIsSet() && !rhs.periodIsSet()) || (periodIsSet() && rhs.periodIsSet() && getPeriod() == rhs.getPeriod())) &&
    
    (getTotalHolidays() == rhs.getTotalHolidays())
     &&
    
    (getWeeklyHolidays() == rhs.getWeeklyHolidays())
    
    
    ;
}

bool CampaignSettingsScheduleDTO::operator!=(const CampaignSettingsScheduleDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CampaignSettingsScheduleDTO& o)
{
    j = nlohmann::json::object();
    if(o.availableOnHolidaysIsSet())
        j["availableOnHolidays"] = o.m_AvailableOnHolidays;
    j["customHolidays"] = o.m_CustomHolidays;
    j["customWorkingDays"] = o.m_CustomWorkingDays;
    if(o.periodIsSet())
        j["period"] = o.m_Period;
    j["totalHolidays"] = o.m_TotalHolidays;
    j["weeklyHolidays"] = o.m_WeeklyHolidays;
    
}

void from_json(const nlohmann::json& j, CampaignSettingsScheduleDTO& o)
{
    if(j.find("availableOnHolidays") != j.end())
    {
        j.at("availableOnHolidays").get_to(o.m_AvailableOnHolidays);
        o.m_AvailableOnHolidaysIsSet = true;
    } 
    j.at("customHolidays").get_to(o.m_CustomHolidays);
    j.at("customWorkingDays").get_to(o.m_CustomWorkingDays);
    if(j.find("period") != j.end())
    {
        j.at("period").get_to(o.m_Period);
        o.m_PeriodIsSet = true;
    } 
    j.at("totalHolidays").get_to(o.m_TotalHolidays);
    j.at("weeklyHolidays").get_to(o.m_WeeklyHolidays);
    
}

bool CampaignSettingsScheduleDTO::isAvailableOnHolidays() const
{
    return m_AvailableOnHolidays;
}
void CampaignSettingsScheduleDTO::setAvailableOnHolidays(bool const value)
{
    m_AvailableOnHolidays = value;
    m_AvailableOnHolidaysIsSet = true;
}
bool CampaignSettingsScheduleDTO::availableOnHolidaysIsSet() const
{
    return m_AvailableOnHolidaysIsSet;
}
void CampaignSettingsScheduleDTO::unsetAvailableOnHolidays()
{
    m_AvailableOnHolidaysIsSet = false;
}
std::vector<std::string> CampaignSettingsScheduleDTO::getCustomHolidays() const
{
    return m_CustomHolidays;
}
void CampaignSettingsScheduleDTO::setCustomHolidays(std::vector<std::string> const& value)
{
    m_CustomHolidays = value;
}
std::vector<std::string> CampaignSettingsScheduleDTO::getCustomWorkingDays() const
{
    return m_CustomWorkingDays;
}
void CampaignSettingsScheduleDTO::setCustomWorkingDays(std::vector<std::string> const& value)
{
    m_CustomWorkingDays = value;
}
org::openapitools::server::model::CampaignSettingsTimePeriodDTO CampaignSettingsScheduleDTO::getPeriod() const
{
    return m_Period;
}
void CampaignSettingsScheduleDTO::setPeriod(org::openapitools::server::model::CampaignSettingsTimePeriodDTO const& value)
{
    m_Period = value;
    m_PeriodIsSet = true;
}
bool CampaignSettingsScheduleDTO::periodIsSet() const
{
    return m_PeriodIsSet;
}
void CampaignSettingsScheduleDTO::unsetPeriod()
{
    m_PeriodIsSet = false;
}
std::vector<std::string> CampaignSettingsScheduleDTO::getTotalHolidays() const
{
    return m_TotalHolidays;
}
void CampaignSettingsScheduleDTO::setTotalHolidays(std::vector<std::string> const& value)
{
    m_TotalHolidays = value;
}
std::vector<int32_t> CampaignSettingsScheduleDTO::getWeeklyHolidays() const
{
    return m_WeeklyHolidays;
}
void CampaignSettingsScheduleDTO::setWeeklyHolidays(std::vector<int32_t> const value)
{
    m_WeeklyHolidays = value;
}


} // namespace org::openapitools::server::model

