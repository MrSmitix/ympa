/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CampaignSettingsScheduleDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CampaignSettingsScheduleDTO::CampaignSettingsScheduleDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string CampaignSettingsScheduleDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void CampaignSettingsScheduleDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree CampaignSettingsScheduleDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void CampaignSettingsScheduleDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string CampaignSettingsScheduleDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void CampaignSettingsScheduleDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CampaignSettingsScheduleDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("availableOnHolidays", m_AvailableOnHolidays);
	// generate tree for CustomHolidays
	if (!m_CustomHolidays.empty()) {
		for (const auto &childEntry : m_CustomHolidays) {
            ptree CustomHolidays_node;
            CustomHolidays_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", CustomHolidays_node));
		}
		pt.add_child("customHolidays", tmp_node);
		tmp_node.clear();
	}
	// generate tree for CustomWorkingDays
	if (!m_CustomWorkingDays.empty()) {
		for (const auto &childEntry : m_CustomWorkingDays) {
            ptree CustomWorkingDays_node;
            CustomWorkingDays_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", CustomWorkingDays_node));
		}
		pt.add_child("customWorkingDays", tmp_node);
		tmp_node.clear();
	}
	if (m_Period != nullptr) {
		pt.add_child("period", m_Period->toPropertyTree());
	}
	// generate tree for TotalHolidays
	if (!m_TotalHolidays.empty()) {
		for (const auto &childEntry : m_TotalHolidays) {
            ptree TotalHolidays_node;
            TotalHolidays_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", TotalHolidays_node));
		}
		pt.add_child("totalHolidays", tmp_node);
		tmp_node.clear();
	}
	// generate tree for WeeklyHolidays
	if (!m_WeeklyHolidays.empty()) {
		for (const auto &childEntry : m_WeeklyHolidays) {
            ptree WeeklyHolidays_node;
            WeeklyHolidays_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", WeeklyHolidays_node));
		}
		pt.add_child("weeklyHolidays", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void CampaignSettingsScheduleDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_AvailableOnHolidays = pt.get("availableOnHolidays", false);
	// push all items of CustomHolidays into member vector
	if (pt.get_child_optional("customHolidays")) {
		for (const auto &childTree : pt.get_child("customHolidays")) {
            std::string val =
                childTree.second.data();
            m_CustomHolidays.emplace_back(std::move(val));
		}
	}
	// push all items of CustomWorkingDays into member vector
	if (pt.get_child_optional("customWorkingDays")) {
		for (const auto &childTree : pt.get_child("customWorkingDays")) {
            std::string val =
                childTree.second.data();
            m_CustomWorkingDays.emplace_back(std::move(val));
		}
	}
	if (pt.get_child_optional("period")) {
		m_Period = std::make_shared<CampaignSettingsTimePeriodDTO>();
		m_Period->fromPropertyTree(pt.get_child("period"));
	}
	// push all items of TotalHolidays into member vector
	if (pt.get_child_optional("totalHolidays")) {
		for (const auto &childTree : pt.get_child("totalHolidays")) {
            std::string val =
                childTree.second.data();
            m_TotalHolidays.emplace_back(std::move(val));
		}
	}
	// push all items of WeeklyHolidays into member vector
	if (pt.get_child_optional("weeklyHolidays")) {
		for (const auto &childTree : pt.get_child("weeklyHolidays")) {
            int32_t val =
                std::stoi(childTree.second.data());
            m_WeeklyHolidays.emplace_back(std::move(val));
		}
	}
}

bool CampaignSettingsScheduleDTO::isAvailableOnHolidays() const
{
    return m_AvailableOnHolidays;
}

void CampaignSettingsScheduleDTO::setAvailableOnHolidays(bool value)
{
	m_AvailableOnHolidays = value;
}
std::vector<std::shared_ptr<std::string>> CampaignSettingsScheduleDTO::getCustomHolidays() const
{
    return m_CustomHolidays;
}

void CampaignSettingsScheduleDTO::setCustomHolidays(std::vector<std::shared_ptr<std::string>> value)
{
	m_CustomHolidays = value;
}
std::vector<std::shared_ptr<std::string>> CampaignSettingsScheduleDTO::getCustomWorkingDays() const
{
    return m_CustomWorkingDays;
}

void CampaignSettingsScheduleDTO::setCustomWorkingDays(std::vector<std::shared_ptr<std::string>> value)
{
	m_CustomWorkingDays = value;
}
std::shared_ptr<CampaignSettingsTimePeriodDTO> CampaignSettingsScheduleDTO::getPeriod() const
{
    return m_Period;
}

void CampaignSettingsScheduleDTO::setPeriod(std::shared_ptr<CampaignSettingsTimePeriodDTO> value)
{
	m_Period = value;
}
std::vector<std::shared_ptr<std::string>> CampaignSettingsScheduleDTO::getTotalHolidays() const
{
    return m_TotalHolidays;
}

void CampaignSettingsScheduleDTO::setTotalHolidays(std::vector<std::shared_ptr<std::string>> value)
{
	m_TotalHolidays = value;
}
std::vector<int32_t> CampaignSettingsScheduleDTO::getWeeklyHolidays() const
{
    return m_WeeklyHolidays;
}

void CampaignSettingsScheduleDTO::setWeeklyHolidays(std::vector<int32_t> value)
{
	m_WeeklyHolidays = value;
}

std::vector<CampaignSettingsScheduleDTO> createCampaignSettingsScheduleDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CampaignSettingsScheduleDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(CampaignSettingsScheduleDTO(child.second));
    }

    return vec;
}

}
}
}
}

