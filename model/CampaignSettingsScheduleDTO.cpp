/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CampaignSettingsScheduleDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CampaignSettingsScheduleDTO::CampaignSettingsScheduleDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CampaignSettingsScheduleDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CampaignSettingsScheduleDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CampaignSettingsScheduleDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("availableOnHolidays", m_AvailableOnHolidays);
	// generate tree for CustomHolidays
    tmp_node.clear();
	if (!m_CustomHolidays.empty()) {
        tmp_node = toPt(m_CustomHolidays);
		pt.add_child("customHolidays", tmp_node);
		tmp_node.clear();
	}
	// generate tree for CustomWorkingDays
    tmp_node.clear();
	if (!m_CustomWorkingDays.empty()) {
        tmp_node = toPt(m_CustomWorkingDays);
		pt.add_child("customWorkingDays", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("period", m_Period.toPropertyTree());
	// generate tree for TotalHolidays
    tmp_node.clear();
	if (!m_TotalHolidays.empty()) {
        tmp_node = toPt(m_TotalHolidays);
		pt.add_child("totalHolidays", tmp_node);
		tmp_node.clear();
	}
	// generate tree for WeeklyHolidays
    tmp_node.clear();
	if (!m_WeeklyHolidays.empty()) {
        tmp_node = toPt(m_WeeklyHolidays);
		pt.add_child("weeklyHolidays", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void CampaignSettingsScheduleDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_AvailableOnHolidays = pt.get("availableOnHolidays", false);
	// push all items of CustomHolidays into member
	if (pt.get_child_optional("customHolidays")) {
        m_CustomHolidays = fromPt<std::vector<std::string>>(pt.get_child("customHolidays"));
	}
	// push all items of CustomWorkingDays into member
	if (pt.get_child_optional("customWorkingDays")) {
        m_CustomWorkingDays = fromPt<std::vector<std::string>>(pt.get_child("customWorkingDays"));
	}
	if (pt.get_child_optional("period")) {
        m_Period = fromPt<CampaignSettingsTimePeriodDTO>(pt.get_child("period"));
	}
	// push all items of TotalHolidays into member
	if (pt.get_child_optional("totalHolidays")) {
        m_TotalHolidays = fromPt<std::vector<std::string>>(pt.get_child("totalHolidays"));
	}
	// push all items of WeeklyHolidays into member
	if (pt.get_child_optional("weeklyHolidays")) {
        m_WeeklyHolidays = fromPt<std::vector<int32_t>>(pt.get_child("weeklyHolidays"));
	}
}

bool CampaignSettingsScheduleDTO::isAvailableOnHolidays() const
{
    return m_AvailableOnHolidays;
}

void CampaignSettingsScheduleDTO::setAvailableOnHolidays(bool value)
{
    m_AvailableOnHolidays = value;
}


std::vector<std::string> CampaignSettingsScheduleDTO::getCustomHolidays() const
{
    return m_CustomHolidays;
}

void CampaignSettingsScheduleDTO::setCustomHolidays(std::vector<std::string> value)
{
    m_CustomHolidays = value;
}


std::vector<std::string> CampaignSettingsScheduleDTO::getCustomWorkingDays() const
{
    return m_CustomWorkingDays;
}

void CampaignSettingsScheduleDTO::setCustomWorkingDays(std::vector<std::string> value)
{
    m_CustomWorkingDays = value;
}


CampaignSettingsTimePeriodDTO CampaignSettingsScheduleDTO::getPeriod() const
{
    return m_Period;
}

void CampaignSettingsScheduleDTO::setPeriod(CampaignSettingsTimePeriodDTO value)
{
    m_Period = value;
}


std::vector<std::string> CampaignSettingsScheduleDTO::getTotalHolidays() const
{
    return m_TotalHolidays;
}

void CampaignSettingsScheduleDTO::setTotalHolidays(std::vector<std::string> value)
{
    m_TotalHolidays = value;
}


std::vector<int32_t> CampaignSettingsScheduleDTO::getWeeklyHolidays() const
{
    return m_WeeklyHolidays;
}

void CampaignSettingsScheduleDTO::setWeeklyHolidays(std::vector<int32_t> value)
{
    m_WeeklyHolidays = value;
}



std::vector<CampaignSettingsScheduleDTO> createCampaignSettingsScheduleDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CampaignSettingsScheduleDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(CampaignSettingsScheduleDTO(child.second));
    }

    return vec;
}

}
}
}
}

