/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OutletWorkingScheduleDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OutletWorkingScheduleDTO::OutletWorkingScheduleDTO()
{
    m_WorkInHoliday = false;
    m_WorkInHolidayIsSet = false;
    
}

void OutletWorkingScheduleDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OutletWorkingScheduleDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OutletWorkingScheduleDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OutletWorkingScheduleDTO" : pathPrefix;

             
    
    /* ScheduleItems */ {
        const std::vector<org::openapitools::server::model::OutletWorkingScheduleItemDTO>& value = m_ScheduleItems;
        const std::string currentValuePath = _pathPrefix + ".scheduleItems";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OutletWorkingScheduleItemDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".scheduleItems") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool OutletWorkingScheduleDTO::operator==(const OutletWorkingScheduleDTO& rhs) const
{
    return
    
    
    
    ((!workInHolidayIsSet() && !rhs.workInHolidayIsSet()) || (workInHolidayIsSet() && rhs.workInHolidayIsSet() && isWorkInHoliday() == rhs.isWorkInHoliday())) &&
    
    (getScheduleItems() == rhs.getScheduleItems())
    
    
    ;
}

bool OutletWorkingScheduleDTO::operator!=(const OutletWorkingScheduleDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OutletWorkingScheduleDTO& o)
{
    j = nlohmann::json::object();
    if(o.workInHolidayIsSet())
        j["workInHoliday"] = o.m_WorkInHoliday;
    j["scheduleItems"] = o.m_ScheduleItems;
    
}

void from_json(const nlohmann::json& j, OutletWorkingScheduleDTO& o)
{
    if(j.find("workInHoliday") != j.end())
    {
        j.at("workInHoliday").get_to(o.m_WorkInHoliday);
        o.m_WorkInHolidayIsSet = true;
    } 
    j.at("scheduleItems").get_to(o.m_ScheduleItems);
    
}

bool OutletWorkingScheduleDTO::isWorkInHoliday() const
{
    return m_WorkInHoliday;
}
void OutletWorkingScheduleDTO::setWorkInHoliday(bool const value)
{
    m_WorkInHoliday = value;
    m_WorkInHolidayIsSet = true;
}
bool OutletWorkingScheduleDTO::workInHolidayIsSet() const
{
    return m_WorkInHolidayIsSet;
}
void OutletWorkingScheduleDTO::unsetWorkInHoliday()
{
    m_WorkInHolidayIsSet = false;
}
std::vector<org::openapitools::server::model::OutletWorkingScheduleItemDTO> OutletWorkingScheduleDTO::getScheduleItems() const
{
    return m_ScheduleItems;
}
void OutletWorkingScheduleDTO::setScheduleItems(std::vector<org::openapitools::server::model::OutletWorkingScheduleItemDTO> const& value)
{
    m_ScheduleItems = value;
}


} // namespace org::openapitools::server::model

