/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetQuarantineOffersRequest.h
 *
 * Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке. 
 */

#ifndef GetQuarantineOffersRequest_H_
#define GetQuarantineOffersRequest_H_



#include <string>
#include <vector>
#include "OfferCardStatusType.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке. 
/// </summary>
class  GetQuarantineOffersRequest 
{
public:
    GetQuarantineOffersRequest() = default;
    explicit GetQuarantineOffersRequest(boost::property_tree::ptree const& pt);
    virtual ~GetQuarantineOffersRequest() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// GetQuarantineOffersRequest members

    /// <summary>
    /// Идентификаторы товаров, информация о которых нужна. &lt;br&gt;&lt;br&gt; ⚠️ Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым. 
    /// </summary>
    std::vector<std::shared_ptr<std::string>> getOfferIds() const;
    void setOfferIds(std::vector<std::shared_ptr<std::string>> value);

    /// <summary>
    /// Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html) 
    /// </summary>
    std::vector<std::shared_ptr<OfferCardStatusType>> getCardStatuses() const;
    void setCardStatuses(std::vector<std::shared_ptr<OfferCardStatusType>> value);

    /// <summary>
    /// Фильтр по категориям на Маркете.
    /// </summary>
    std::vector<int32_t> getCategoryIds() const;
    void setCategoryIds(std::vector<int32_t> value);

    /// <summary>
    /// Фильтр по брендам.
    /// </summary>
    std::vector<std::string> getVendorNames() const;
    void setVendorNames(std::vector<std::string> value);

    /// <summary>
    /// Фильтр по тегам.
    /// </summary>
    std::vector<std::string> getTags() const;
    void setTags(std::vector<std::string> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::vector<std::shared_ptr<std::string>> m_OfferIds;
    std::vector<std::shared_ptr<OfferCardStatusType>> m_CardStatuses;
    std::vector<int32_t> m_CategoryIds;
    std::vector<std::string> m_VendorNames;
    std::vector<std::string> m_Tags;
};

std::vector<GetQuarantineOffersRequest> createGetQuarantineOffersRequestVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* GetQuarantineOffersRequest_H_ */
