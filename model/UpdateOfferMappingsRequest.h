/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateOfferMappingsRequest.h
 *
 * 
 */

#ifndef UpdateOfferMappingsRequest_H_
#define UpdateOfferMappingsRequest_H_



#include "UpdateOfferMappingDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  UpdateOfferMappingsRequest 
{
public:
    UpdateOfferMappingsRequest() = default;
    explicit UpdateOfferMappingsRequest(boost::property_tree::ptree const& pt);
    virtual ~UpdateOfferMappingsRequest() = default;

    UpdateOfferMappingsRequest(const UpdateOfferMappingsRequest& other) = default; // copy constructor
    UpdateOfferMappingsRequest(UpdateOfferMappingsRequest&& other) noexcept = default; // move constructor

    UpdateOfferMappingsRequest& operator=(const UpdateOfferMappingsRequest& other) = default; // copy assignment
    UpdateOfferMappingsRequest& operator=(UpdateOfferMappingsRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UpdateOfferMappingsRequest members

    /// <summary>
    /// Перечень товаров, которые нужно добавить или обновить.
    /// </summary>
    std::vector<UpdateOfferMappingDTO> getOfferMappings() const;
    void setOfferMappings(std::vector<UpdateOfferMappingDTO> value);

    /// <summary>
    /// Будут использоваться только переданные вами изображения товаров.  Значение по умолчанию — &#x60;false&#x60;. Если вы хотите заменить изображения, которые добавил Маркет, передайте значение &#x60;true&#x60;. 
    /// </summary>
    bool isOnlyPartnerMediaContent() const;
    void setOnlyPartnerMediaContent(bool value);

protected:
    std::vector<UpdateOfferMappingDTO> m_OfferMappings;
    bool m_OnlyPartnerMediaContent = false;
};

std::vector<UpdateOfferMappingsRequest> createUpdateOfferMappingsRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UpdateOfferMappingsRequest>(const UpdateOfferMappingsRequest& val) {
    return val.toPropertyTree();
}

template<>
inline UpdateOfferMappingsRequest fromPt<UpdateOfferMappingsRequest>(const boost::property_tree::ptree& pt) {
    UpdateOfferMappingsRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UpdateOfferMappingsRequest_H_ */
