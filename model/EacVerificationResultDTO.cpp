/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "EacVerificationResultDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

EacVerificationResultDTO::EacVerificationResultDTO()
{
    m_VerificationResultIsSet = false;
    m_AttemptsLeft = 0;
    m_AttemptsLeftIsSet = false;
    
}

void EacVerificationResultDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool EacVerificationResultDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool EacVerificationResultDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "EacVerificationResultDTO" : pathPrefix;

            
    return success;
}

bool EacVerificationResultDTO::operator==(const EacVerificationResultDTO& rhs) const
{
    return
    
    
    
    ((!verificationResultIsSet() && !rhs.verificationResultIsSet()) || (verificationResultIsSet() && rhs.verificationResultIsSet() && getVerificationResult() == rhs.getVerificationResult())) &&
    
    
    ((!attemptsLeftIsSet() && !rhs.attemptsLeftIsSet()) || (attemptsLeftIsSet() && rhs.attemptsLeftIsSet() && getAttemptsLeft() == rhs.getAttemptsLeft()))
    
    ;
}

bool EacVerificationResultDTO::operator!=(const EacVerificationResultDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const EacVerificationResultDTO& o)
{
    j = nlohmann::json::object();
    if(o.verificationResultIsSet())
        j["verificationResult"] = o.m_VerificationResult;
    if(o.attemptsLeftIsSet())
        j["attemptsLeft"] = o.m_AttemptsLeft;
    
}

void from_json(const nlohmann::json& j, EacVerificationResultDTO& o)
{
    if(j.find("verificationResult") != j.end())
    {
        j.at("verificationResult").get_to(o.m_VerificationResult);
        o.m_VerificationResultIsSet = true;
    } 
    if(j.find("attemptsLeft") != j.end())
    {
        j.at("attemptsLeft").get_to(o.m_AttemptsLeft);
        o.m_AttemptsLeftIsSet = true;
    } 
    
}

org::openapitools::server::model::EacVerificationStatusType EacVerificationResultDTO::getVerificationResult() const
{
    return m_VerificationResult;
}
void EacVerificationResultDTO::setVerificationResult(org::openapitools::server::model::EacVerificationStatusType const& value)
{
    m_VerificationResult = value;
    m_VerificationResultIsSet = true;
}
bool EacVerificationResultDTO::verificationResultIsSet() const
{
    return m_VerificationResultIsSet;
}
void EacVerificationResultDTO::unsetVerificationResult()
{
    m_VerificationResultIsSet = false;
}
int32_t EacVerificationResultDTO::getAttemptsLeft() const
{
    return m_AttemptsLeft;
}
void EacVerificationResultDTO::setAttemptsLeft(int32_t const value)
{
    m_AttemptsLeft = value;
    m_AttemptsLeftIsSet = true;
}
bool EacVerificationResultDTO::attemptsLeftIsSet() const
{
    return m_AttemptsLeftIsSet;
}
void EacVerificationResultDTO::unsetAttemptsLeft()
{
    m_AttemptsLeftIsSet = false;
}


} // namespace org::openapitools::server::model

