/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WarningPromoOfferUpdateDTO.h
 *
 * Описание предупреждения, которое появилось при добавлении товара.
 */

#ifndef WarningPromoOfferUpdateDTO_H_
#define WarningPromoOfferUpdateDTO_H_



#include "PromoOfferUpdateWarningDTO.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Описание предупреждения, которое появилось при добавлении товара.
/// </summary>
class  WarningPromoOfferUpdateDTO 
{
public:
    WarningPromoOfferUpdateDTO() = default;
    explicit WarningPromoOfferUpdateDTO(boost::property_tree::ptree const& pt);
    virtual ~WarningPromoOfferUpdateDTO() = default;

    WarningPromoOfferUpdateDTO(const WarningPromoOfferUpdateDTO& other) = default; // copy constructor
    WarningPromoOfferUpdateDTO(WarningPromoOfferUpdateDTO&& other) noexcept = default; // move constructor

    WarningPromoOfferUpdateDTO& operator=(const WarningPromoOfferUpdateDTO& other) = default; // copy assignment
    WarningPromoOfferUpdateDTO& operator=(WarningPromoOfferUpdateDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// WarningPromoOfferUpdateDTO members

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getOfferId() const;
    void setOfferId(std::string value);

    /// <summary>
    /// Предупреждения, которые появились при добавлении товара в акцию или изменении его цен.
    /// </summary>
    std::vector<PromoOfferUpdateWarningDTO> getWarnings() const;
    void setWarnings(std::vector<PromoOfferUpdateWarningDTO> value);

protected:
    std::string m_OfferId = "";
    std::vector<PromoOfferUpdateWarningDTO> m_Warnings;
};

std::vector<WarningPromoOfferUpdateDTO> createWarningPromoOfferUpdateDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<WarningPromoOfferUpdateDTO>(const WarningPromoOfferUpdateDTO& val) {
    return val.toPropertyTree();
}

template<>
inline WarningPromoOfferUpdateDTO fromPt<WarningPromoOfferUpdateDTO>(const boost::property_tree::ptree& pt) {
    WarningPromoOfferUpdateDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* WarningPromoOfferUpdateDTO_H_ */
