/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MappingsOfferInfoDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

MappingsOfferInfoDTO::MappingsOfferInfoDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string MappingsOfferInfoDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void MappingsOfferInfoDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree MappingsOfferInfoDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void MappingsOfferInfoDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string MappingsOfferInfoDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void MappingsOfferInfoDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree MappingsOfferInfoDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	pt.put("shopSku", m_ShopSku);
	pt.put("category", m_Category);
	pt.put("vendor", m_Vendor);
	pt.put("vendorCode", m_VendorCode);
	pt.put("description", m_Description);
	pt.put("id", m_Id);
	pt.put("feedId", m_FeedId);
	// generate tree for Barcodes
	if (!m_Barcodes.empty()) {
		for (const auto &childEntry : m_Barcodes) {
            ptree Barcodes_node;
            Barcodes_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Barcodes_node));
		}
		pt.add_child("barcodes", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Urls
	if (!m_Urls.empty()) {
		for (const auto &childEntry : m_Urls) {
            ptree Urls_node;
            Urls_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Urls_node));
		}
		pt.add_child("urls", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Pictures
	if (!m_Pictures.empty()) {
		for (const auto &childEntry : m_Pictures) {
            ptree Pictures_node;
            Pictures_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Pictures_node));
		}
		pt.add_child("pictures", tmp_node);
		tmp_node.clear();
	}
	pt.put("manufacturer", m_Manufacturer);
	// generate tree for ManufacturerCountries
	if (!m_ManufacturerCountries.empty()) {
		for (const auto &childEntry : m_ManufacturerCountries) {
            ptree ManufacturerCountries_node;
            ManufacturerCountries_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", ManufacturerCountries_node));
		}
		pt.add_child("manufacturerCountries", tmp_node);
		tmp_node.clear();
	}
	pt.put("minShipment", m_MinShipment);
	pt.put("transportUnitSize", m_TransportUnitSize);
	pt.put("quantumOfSupply", m_QuantumOfSupply);
	pt.put("deliveryDurationDays", m_DeliveryDurationDays);
	pt.put("boxCount", m_BoxCount);
	// generate tree for CustomsCommodityCodes
	if (!m_CustomsCommodityCodes.empty()) {
		for (const auto &childEntry : m_CustomsCommodityCodes) {
            ptree CustomsCommodityCodes_node;
            CustomsCommodityCodes_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", CustomsCommodityCodes_node));
		}
		pt.add_child("customsCommodityCodes", tmp_node);
		tmp_node.clear();
	}
	if (m_WeightDimensions != nullptr) {
		pt.add_child("weightDimensions", m_WeightDimensions->toPropertyTree());
	}
	// generate tree for SupplyScheduleDays
	if (!m_SupplyScheduleDays.empty()) {
		for (const auto &childEntry : m_SupplyScheduleDays) {
            ptree SupplyScheduleDays_node;
            SupplyScheduleDays_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", SupplyScheduleDays_node));
		}
		pt.add_child("supplyScheduleDays", tmp_node);
		tmp_node.clear();
	}
	pt.put("shelfLifeDays", m_ShelfLifeDays);
	pt.put("lifeTimeDays", m_LifeTimeDays);
	pt.put("guaranteePeriodDays", m_GuaranteePeriodDays);
	if (m_ProcessingState != nullptr) {
		pt.add_child("processingState", m_ProcessingState->toPropertyTree());
	}
	if (m_ShelfLife != nullptr) {
		pt.add_child("shelfLife", m_ShelfLife->toPropertyTree());
	}
	if (m_LifeTime != nullptr) {
		pt.add_child("lifeTime", m_LifeTime->toPropertyTree());
	}
	if (m_GuaranteePeriod != nullptr) {
		pt.add_child("guaranteePeriod", m_GuaranteePeriod->toPropertyTree());
	}
	pt.put("certificate", m_Certificate);
	return pt;
}

void MappingsOfferInfoDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	m_ShopSku = pt.get("shopSku", "");
	m_Category = pt.get("category", "");
	m_Vendor = pt.get("vendor", "");
	m_VendorCode = pt.get("vendorCode", "");
	m_Description = pt.get("description", "");
	m_Id = pt.get("id", "");
	m_FeedId = pt.get("feedId", 0L);
	// push all items of Barcodes into member vector
	if (pt.get_child_optional("barcodes")) {
		for (const auto &childTree : pt.get_child("barcodes")) {
            std::string val =
                childTree.second.data();
            m_Barcodes.emplace_back(std::move(val));
		}
	}
	// push all items of Urls into member vector
	if (pt.get_child_optional("urls")) {
		for (const auto &childTree : pt.get_child("urls")) {
            std::string val =
                childTree.second.data();
            m_Urls.emplace_back(std::move(val));
		}
	}
	// push all items of Pictures into member vector
	if (pt.get_child_optional("pictures")) {
		for (const auto &childTree : pt.get_child("pictures")) {
            std::string val =
                childTree.second.data();
            m_Pictures.emplace_back(std::move(val));
		}
	}
	m_Manufacturer = pt.get("manufacturer", "");
	// push all items of ManufacturerCountries into member vector
	if (pt.get_child_optional("manufacturerCountries")) {
		for (const auto &childTree : pt.get_child("manufacturerCountries")) {
            std::string val =
                childTree.second.data();
            m_ManufacturerCountries.emplace_back(std::move(val));
		}
	}
	m_MinShipment = pt.get("minShipment", 0);
	m_TransportUnitSize = pt.get("transportUnitSize", 0);
	m_QuantumOfSupply = pt.get("quantumOfSupply", 0);
	m_DeliveryDurationDays = pt.get("deliveryDurationDays", 0);
	m_BoxCount = pt.get("boxCount", 0);
	// push all items of CustomsCommodityCodes into member vector
	if (pt.get_child_optional("customsCommodityCodes")) {
		for (const auto &childTree : pt.get_child("customsCommodityCodes")) {
            std::string val =
                childTree.second.data();
            m_CustomsCommodityCodes.emplace_back(std::move(val));
		}
	}
	if (pt.get_child_optional("weightDimensions")) {
		m_WeightDimensions = std::make_shared<OfferWeightDimensionsDTO>();
		m_WeightDimensions->fromPropertyTree(pt.get_child("weightDimensions"));
	}
	// push all items of SupplyScheduleDays into member vector
	if (pt.get_child_optional("supplyScheduleDays")) {
		for (const auto &childTree : pt.get_child("supplyScheduleDays")) {
            std::shared_ptr<DayOfWeekType> val =
            m_SupplyScheduleDays.emplace_back(std::move(val));
		}
	}
	m_ShelfLifeDays = pt.get("shelfLifeDays", 0);
	m_LifeTimeDays = pt.get("lifeTimeDays", 0);
	m_GuaranteePeriodDays = pt.get("guaranteePeriodDays", 0);
	if (pt.get_child_optional("processingState")) {
		m_ProcessingState = std::make_shared<OfferProcessingStateDTO>();
		m_ProcessingState->fromPropertyTree(pt.get_child("processingState"));
	}
	if (pt.get_child_optional("shelfLife")) {
		m_ShelfLife = std::make_shared<TimePeriodDTO>();
		m_ShelfLife->fromPropertyTree(pt.get_child("shelfLife"));
	}
	if (pt.get_child_optional("lifeTime")) {
		m_LifeTime = std::make_shared<TimePeriodDTO>();
		m_LifeTime->fromPropertyTree(pt.get_child("lifeTime"));
	}
	if (pt.get_child_optional("guaranteePeriod")) {
		m_GuaranteePeriod = std::make_shared<TimePeriodDTO>();
		m_GuaranteePeriod->fromPropertyTree(pt.get_child("guaranteePeriod"));
	}
	m_Certificate = pt.get("certificate", "");
}

std::string MappingsOfferInfoDTO::getName() const
{
    return m_Name;
}

void MappingsOfferInfoDTO::setName(std::string value)
{
	m_Name = value;
}
std::string MappingsOfferInfoDTO::getShopSku() const
{
    return m_ShopSku;
}

void MappingsOfferInfoDTO::setShopSku(std::string value)
{
	m_ShopSku = value;
}
std::string MappingsOfferInfoDTO::getCategory() const
{
    return m_Category;
}

void MappingsOfferInfoDTO::setCategory(std::string value)
{
	m_Category = value;
}
std::string MappingsOfferInfoDTO::getVendor() const
{
    return m_Vendor;
}

void MappingsOfferInfoDTO::setVendor(std::string value)
{
	m_Vendor = value;
}
std::string MappingsOfferInfoDTO::getVendorCode() const
{
    return m_VendorCode;
}

void MappingsOfferInfoDTO::setVendorCode(std::string value)
{
	m_VendorCode = value;
}
std::string MappingsOfferInfoDTO::getDescription() const
{
    return m_Description;
}

void MappingsOfferInfoDTO::setDescription(std::string value)
{
	m_Description = value;
}
std::string MappingsOfferInfoDTO::getId() const
{
    return m_Id;
}

void MappingsOfferInfoDTO::setId(std::string value)
{
	m_Id = value;
}
int64_t MappingsOfferInfoDTO::getFeedId() const
{
    return m_FeedId;
}

void MappingsOfferInfoDTO::setFeedId(int64_t value)
{
	m_FeedId = value;
}
std::vector<std::string> MappingsOfferInfoDTO::getBarcodes() const
{
    return m_Barcodes;
}

void MappingsOfferInfoDTO::setBarcodes(std::vector<std::string> value)
{
	m_Barcodes = value;
}
std::vector<std::string> MappingsOfferInfoDTO::getUrls() const
{
    return m_Urls;
}

void MappingsOfferInfoDTO::setUrls(std::vector<std::string> value)
{
	m_Urls = value;
}
std::vector<std::string> MappingsOfferInfoDTO::getPictures() const
{
    return m_Pictures;
}

void MappingsOfferInfoDTO::setPictures(std::vector<std::string> value)
{
	m_Pictures = value;
}
std::string MappingsOfferInfoDTO::getManufacturer() const
{
    return m_Manufacturer;
}

void MappingsOfferInfoDTO::setManufacturer(std::string value)
{
	m_Manufacturer = value;
}
std::vector<std::string> MappingsOfferInfoDTO::getManufacturerCountries() const
{
    return m_ManufacturerCountries;
}

void MappingsOfferInfoDTO::setManufacturerCountries(std::vector<std::string> value)
{
	m_ManufacturerCountries = value;
}
int32_t MappingsOfferInfoDTO::getMinShipment() const
{
    return m_MinShipment;
}

void MappingsOfferInfoDTO::setMinShipment(int32_t value)
{
	m_MinShipment = value;
}
int32_t MappingsOfferInfoDTO::getTransportUnitSize() const
{
    return m_TransportUnitSize;
}

void MappingsOfferInfoDTO::setTransportUnitSize(int32_t value)
{
	m_TransportUnitSize = value;
}
int32_t MappingsOfferInfoDTO::getQuantumOfSupply() const
{
    return m_QuantumOfSupply;
}

void MappingsOfferInfoDTO::setQuantumOfSupply(int32_t value)
{
	m_QuantumOfSupply = value;
}
int32_t MappingsOfferInfoDTO::getDeliveryDurationDays() const
{
    return m_DeliveryDurationDays;
}

void MappingsOfferInfoDTO::setDeliveryDurationDays(int32_t value)
{
	m_DeliveryDurationDays = value;
}
int32_t MappingsOfferInfoDTO::getBoxCount() const
{
    return m_BoxCount;
}

void MappingsOfferInfoDTO::setBoxCount(int32_t value)
{
	m_BoxCount = value;
}
std::vector<std::string> MappingsOfferInfoDTO::getCustomsCommodityCodes() const
{
    return m_CustomsCommodityCodes;
}

void MappingsOfferInfoDTO::setCustomsCommodityCodes(std::vector<std::string> value)
{
	m_CustomsCommodityCodes = value;
}
std::shared_ptr<OfferWeightDimensionsDTO> MappingsOfferInfoDTO::getWeightDimensions() const
{
    return m_WeightDimensions;
}

void MappingsOfferInfoDTO::setWeightDimensions(std::shared_ptr<OfferWeightDimensionsDTO> value)
{
	m_WeightDimensions = value;
}
std::vector<std::shared_ptr<DayOfWeekType>> MappingsOfferInfoDTO::getSupplyScheduleDays() const
{
    return m_SupplyScheduleDays;
}

void MappingsOfferInfoDTO::setSupplyScheduleDays(std::vector<std::shared_ptr<DayOfWeekType>> value)
{
	m_SupplyScheduleDays = value;
}
int32_t MappingsOfferInfoDTO::getShelfLifeDays() const
{
    return m_ShelfLifeDays;
}

void MappingsOfferInfoDTO::setShelfLifeDays(int32_t value)
{
	m_ShelfLifeDays = value;
}
int32_t MappingsOfferInfoDTO::getLifeTimeDays() const
{
    return m_LifeTimeDays;
}

void MappingsOfferInfoDTO::setLifeTimeDays(int32_t value)
{
	m_LifeTimeDays = value;
}
int32_t MappingsOfferInfoDTO::getGuaranteePeriodDays() const
{
    return m_GuaranteePeriodDays;
}

void MappingsOfferInfoDTO::setGuaranteePeriodDays(int32_t value)
{
	m_GuaranteePeriodDays = value;
}
std::shared_ptr<OfferProcessingStateDTO> MappingsOfferInfoDTO::getProcessingState() const
{
    return m_ProcessingState;
}

void MappingsOfferInfoDTO::setProcessingState(std::shared_ptr<OfferProcessingStateDTO> value)
{
	m_ProcessingState = value;
}
std::shared_ptr<OfferAvailabilityStatusType> MappingsOfferInfoDTO::getAvailability() const
{
    return m_Availability;
}

void MappingsOfferInfoDTO::setAvailability(std::shared_ptr<OfferAvailabilityStatusType> value)
{
	m_Availability = value;
}
std::shared_ptr<TimePeriodDTO> MappingsOfferInfoDTO::getShelfLife() const
{
    return m_ShelfLife;
}

void MappingsOfferInfoDTO::setShelfLife(std::shared_ptr<TimePeriodDTO> value)
{
	m_ShelfLife = value;
}
std::shared_ptr<TimePeriodDTO> MappingsOfferInfoDTO::getLifeTime() const
{
    return m_LifeTime;
}

void MappingsOfferInfoDTO::setLifeTime(std::shared_ptr<TimePeriodDTO> value)
{
	m_LifeTime = value;
}
std::shared_ptr<TimePeriodDTO> MappingsOfferInfoDTO::getGuaranteePeriod() const
{
    return m_GuaranteePeriod;
}

void MappingsOfferInfoDTO::setGuaranteePeriod(std::shared_ptr<TimePeriodDTO> value)
{
	m_GuaranteePeriod = value;
}
std::string MappingsOfferInfoDTO::getCertificate() const
{
    return m_Certificate;
}

void MappingsOfferInfoDTO::setCertificate(std::string value)
{
	m_Certificate = value;
}

std::vector<MappingsOfferInfoDTO> createMappingsOfferInfoDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<MappingsOfferInfoDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(MappingsOfferInfoDTO(child.second));
    }

    return vec;
}

}
}
}
}

