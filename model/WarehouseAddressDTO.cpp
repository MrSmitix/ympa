/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "WarehouseAddressDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

WarehouseAddressDTO::WarehouseAddressDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string WarehouseAddressDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void WarehouseAddressDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree WarehouseAddressDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void WarehouseAddressDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string WarehouseAddressDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void WarehouseAddressDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree WarehouseAddressDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("city", m_City);
	pt.put("street", m_Street);
	pt.put("number", m_number);
	pt.put("building", m_Building);
	pt.put("block", m_Block);
	if (m_Gps != nullptr) {
		pt.add_child("gps", m_Gps->toPropertyTree());
	}
	return pt;
}

void WarehouseAddressDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_City = pt.get("city", "");
	m_Street = pt.get("street", "");
	m_number = pt.get("number", "");
	m_Building = pt.get("building", "");
	m_Block = pt.get("block", "");
	if (pt.get_child_optional("gps")) {
		m_Gps = std::make_shared<GpsDTO>();
		m_Gps->fromPropertyTree(pt.get_child("gps"));
	}
}

std::string WarehouseAddressDTO::getCity() const
{
    return m_City;
}

void WarehouseAddressDTO::setCity(std::string value)
{
	m_City = value;
}
std::string WarehouseAddressDTO::getStreet() const
{
    return m_Street;
}

void WarehouseAddressDTO::setStreet(std::string value)
{
	m_Street = value;
}
std::string WarehouseAddressDTO::getNumber() const
{
    return m_number;
}

void WarehouseAddressDTO::setNumber(std::string value)
{
	m_number = value;
}
std::string WarehouseAddressDTO::getBuilding() const
{
    return m_Building;
}

void WarehouseAddressDTO::setBuilding(std::string value)
{
	m_Building = value;
}
std::string WarehouseAddressDTO::getBlock() const
{
    return m_Block;
}

void WarehouseAddressDTO::setBlock(std::string value)
{
	m_Block = value;
}
std::shared_ptr<GpsDTO> WarehouseAddressDTO::getGps() const
{
    return m_Gps;
}

void WarehouseAddressDTO::setGps(std::shared_ptr<GpsDTO> value)
{
	m_Gps = value;
}

std::vector<WarehouseAddressDTO> createWarehouseAddressDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<WarehouseAddressDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(WarehouseAddressDTO(child.second));
    }

    return vec;
}

}
}
}
}

