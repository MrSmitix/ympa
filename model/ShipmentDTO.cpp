/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ShipmentDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ShipmentDTO::ShipmentDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string ShipmentDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void ShipmentDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree ShipmentDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void ShipmentDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string ShipmentDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void ShipmentDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ShipmentDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("planIntervalFrom", m_PlanIntervalFrom);
	pt.put("planIntervalTo", m_PlanIntervalTo);
	if (m_Warehouse != nullptr) {
		pt.add_child("warehouse", m_Warehouse->toPropertyTree());
	}
	if (m_WarehouseTo != nullptr) {
		pt.add_child("warehouseTo", m_WarehouseTo->toPropertyTree());
	}
	pt.put("externalId", m_ExternalId);
	if (m_DeliveryService != nullptr) {
		pt.add_child("deliveryService", m_DeliveryService->toPropertyTree());
	}
	if (m_PalletsCount != nullptr) {
		pt.add_child("palletsCount", m_PalletsCount->toPropertyTree());
	}
	// generate tree for OrderIds
	if (!m_OrderIds.empty()) {
		for (const auto &childEntry : m_OrderIds) {
            ptree OrderIds_node;
            OrderIds_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", OrderIds_node));
		}
		pt.add_child("orderIds", tmp_node);
		tmp_node.clear();
	}
	pt.put("draftCount", m_DraftCount);
	pt.put("plannedCount", m_PlannedCount);
	pt.put("factCount", m_FactCount);
	if (m_CurrentStatus != nullptr) {
		pt.add_child("currentStatus", m_CurrentStatus->toPropertyTree());
	}
	// generate tree for AvailableActions
	if (!m_AvailableActions.empty()) {
		for (const auto &childEntry : m_AvailableActions) {
            ptree AvailableActions_node;
            AvailableActions_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", AvailableActions_node));
		}
		pt.add_child("availableActions", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void ShipmentDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", 0L);
	m_PlanIntervalFrom = pt.get("planIntervalFrom", "");
	m_PlanIntervalTo = pt.get("planIntervalTo", "");
	if (pt.get_child_optional("warehouse")) {
		m_Warehouse = std::make_shared<PartnerShipmentWarehouseDTO>();
		m_Warehouse->fromPropertyTree(pt.get_child("warehouse"));
	}
	if (pt.get_child_optional("warehouseTo")) {
		m_WarehouseTo = std::make_shared<PartnerShipmentWarehouseDTO>();
		m_WarehouseTo->fromPropertyTree(pt.get_child("warehouseTo"));
	}
	m_ExternalId = pt.get("externalId", "");
	if (pt.get_child_optional("deliveryService")) {
		m_DeliveryService = std::make_shared<DeliveryServiceDTO>();
		m_DeliveryService->fromPropertyTree(pt.get_child("deliveryService"));
	}
	if (pt.get_child_optional("palletsCount")) {
		m_PalletsCount = std::make_shared<PalletsCountDTO>();
		m_PalletsCount->fromPropertyTree(pt.get_child("palletsCount"));
	}
	// push all items of OrderIds into member vector
	if (pt.get_child_optional("orderIds")) {
		for (const auto &childTree : pt.get_child("orderIds")) {
            int64_t val =
                std::stol(childTree.second.data());
            m_OrderIds.emplace_back(std::move(val));
		}
	}
	m_DraftCount = pt.get("draftCount", 0);
	m_PlannedCount = pt.get("plannedCount", 0);
	m_FactCount = pt.get("factCount", 0);
	if (pt.get_child_optional("currentStatus")) {
		m_CurrentStatus = std::make_shared<ShipmentStatusChangeDTO>();
		m_CurrentStatus->fromPropertyTree(pt.get_child("currentStatus"));
	}
	// push all items of AvailableActions into member vector
	if (pt.get_child_optional("availableActions")) {
		for (const auto &childTree : pt.get_child("availableActions")) {
            std::shared_ptr<ShipmentActionType> val =
            m_AvailableActions.emplace_back(std::move(val));
		}
	}
}

int64_t ShipmentDTO::getId() const
{
    return m_Id;
}

void ShipmentDTO::setId(int64_t value)
{
	m_Id = value;
}
std::string ShipmentDTO::getPlanIntervalFrom() const
{
    return m_PlanIntervalFrom;
}

void ShipmentDTO::setPlanIntervalFrom(std::string value)
{
	m_PlanIntervalFrom = value;
}
std::string ShipmentDTO::getPlanIntervalTo() const
{
    return m_PlanIntervalTo;
}

void ShipmentDTO::setPlanIntervalTo(std::string value)
{
	m_PlanIntervalTo = value;
}
std::shared_ptr<ShipmentType> ShipmentDTO::getShipmentType() const
{
    return m_ShipmentType;
}

void ShipmentDTO::setShipmentType(std::shared_ptr<ShipmentType> value)
{
	m_ShipmentType = value;
}
std::shared_ptr<PartnerShipmentWarehouseDTO> ShipmentDTO::getWarehouse() const
{
    return m_Warehouse;
}

void ShipmentDTO::setWarehouse(std::shared_ptr<PartnerShipmentWarehouseDTO> value)
{
	m_Warehouse = value;
}
std::shared_ptr<PartnerShipmentWarehouseDTO> ShipmentDTO::getWarehouseTo() const
{
    return m_WarehouseTo;
}

void ShipmentDTO::setWarehouseTo(std::shared_ptr<PartnerShipmentWarehouseDTO> value)
{
	m_WarehouseTo = value;
}
std::string ShipmentDTO::getExternalId() const
{
    return m_ExternalId;
}

void ShipmentDTO::setExternalId(std::string value)
{
	m_ExternalId = value;
}
std::shared_ptr<DeliveryServiceDTO> ShipmentDTO::getDeliveryService() const
{
    return m_DeliveryService;
}

void ShipmentDTO::setDeliveryService(std::shared_ptr<DeliveryServiceDTO> value)
{
	m_DeliveryService = value;
}
std::shared_ptr<PalletsCountDTO> ShipmentDTO::getPalletsCount() const
{
    return m_PalletsCount;
}

void ShipmentDTO::setPalletsCount(std::shared_ptr<PalletsCountDTO> value)
{
	m_PalletsCount = value;
}
Set<int64_t> ShipmentDTO::getOrderIds() const
{
    return m_OrderIds;
}

void ShipmentDTO::setOrderIds(Set<int64_t> value)
{
	m_OrderIds = value;
}
int32_t ShipmentDTO::getDraftCount() const
{
    return m_DraftCount;
}

void ShipmentDTO::setDraftCount(int32_t value)
{
	m_DraftCount = value;
}
int32_t ShipmentDTO::getPlannedCount() const
{
    return m_PlannedCount;
}

void ShipmentDTO::setPlannedCount(int32_t value)
{
	m_PlannedCount = value;
}
int32_t ShipmentDTO::getFactCount() const
{
    return m_FactCount;
}

void ShipmentDTO::setFactCount(int32_t value)
{
	m_FactCount = value;
}
std::shared_ptr<ShipmentStatusChangeDTO> ShipmentDTO::getCurrentStatus() const
{
    return m_CurrentStatus;
}

void ShipmentDTO::setCurrentStatus(std::shared_ptr<ShipmentStatusChangeDTO> value)
{
	m_CurrentStatus = value;
}
Set<std::shared_ptr<ShipmentActionType>> ShipmentDTO::getAvailableActions() const
{
    return m_AvailableActions;
}

void ShipmentDTO::setAvailableActions(Set<std::shared_ptr<ShipmentActionType>> value)
{
	m_AvailableActions = value;
}

std::vector<ShipmentDTO> createShipmentDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ShipmentDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(ShipmentDTO(child.second));
    }

    return vec;
}

}
}
}
}

