/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ParameterValueDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ParameterValueDTO::ParameterValueDTO()
{
    m_ParameterId = 0L;
    m_UnitId = 0L;
    m_UnitIdIsSet = false;
    m_ValueId = 0L;
    m_ValueIdIsSet = false;
    m_Value = "";
    m_ValueIsSet = false;
    
}

void ParameterValueDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ParameterValueDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ParameterValueDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ParameterValueDTO" : pathPrefix;

                    
    return success;
}

bool ParameterValueDTO::operator==(const ParameterValueDTO& rhs) const
{
    return
    
    
    (getParameterId() == rhs.getParameterId())
     &&
    
    
    ((!unitIdIsSet() && !rhs.unitIdIsSet()) || (unitIdIsSet() && rhs.unitIdIsSet() && getUnitId() == rhs.getUnitId())) &&
    
    
    ((!valueIdIsSet() && !rhs.valueIdIsSet()) || (valueIdIsSet() && rhs.valueIdIsSet() && getValueId() == rhs.getValueId())) &&
    
    
    ((!valueIsSet() && !rhs.valueIsSet()) || (valueIsSet() && rhs.valueIsSet() && getValue() == rhs.getValue()))
    
    ;
}

bool ParameterValueDTO::operator!=(const ParameterValueDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ParameterValueDTO& o)
{
    j = nlohmann::json::object();
    j["parameterId"] = o.m_ParameterId;
    if(o.unitIdIsSet())
        j["unitId"] = o.m_UnitId;
    if(o.valueIdIsSet())
        j["valueId"] = o.m_ValueId;
    if(o.valueIsSet())
        j["value"] = o.m_Value;
    
}

void from_json(const nlohmann::json& j, ParameterValueDTO& o)
{
    j.at("parameterId").get_to(o.m_ParameterId);
    if(j.find("unitId") != j.end())
    {
        j.at("unitId").get_to(o.m_UnitId);
        o.m_UnitIdIsSet = true;
    } 
    if(j.find("valueId") != j.end())
    {
        j.at("valueId").get_to(o.m_ValueId);
        o.m_ValueIdIsSet = true;
    } 
    if(j.find("value") != j.end())
    {
        j.at("value").get_to(o.m_Value);
        o.m_ValueIsSet = true;
    } 
    
}

int64_t ParameterValueDTO::getParameterId() const
{
    return m_ParameterId;
}
void ParameterValueDTO::setParameterId(int64_t const value)
{
    m_ParameterId = value;
}
int64_t ParameterValueDTO::getUnitId() const
{
    return m_UnitId;
}
void ParameterValueDTO::setUnitId(int64_t const value)
{
    m_UnitId = value;
    m_UnitIdIsSet = true;
}
bool ParameterValueDTO::unitIdIsSet() const
{
    return m_UnitIdIsSet;
}
void ParameterValueDTO::unsetUnitId()
{
    m_UnitIdIsSet = false;
}
int64_t ParameterValueDTO::getValueId() const
{
    return m_ValueId;
}
void ParameterValueDTO::setValueId(int64_t const value)
{
    m_ValueId = value;
    m_ValueIdIsSet = true;
}
bool ParameterValueDTO::valueIdIsSet() const
{
    return m_ValueIdIsSet;
}
void ParameterValueDTO::unsetValueId()
{
    m_ValueIdIsSet = false;
}
std::string ParameterValueDTO::getValue() const
{
    return m_Value;
}
void ParameterValueDTO::setValue(std::string const& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool ParameterValueDTO::valueIsSet() const
{
    return m_ValueIsSet;
}
void ParameterValueDTO::unsetValue()
{
    m_ValueIsSet = false;
}


} // namespace org::openapitools::server::model

