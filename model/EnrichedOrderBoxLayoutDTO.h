/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EnrichedOrderBoxLayoutDTO.h
 *
 * Информация о коробке.
 */

#ifndef EnrichedOrderBoxLayoutDTO_H_
#define EnrichedOrderBoxLayoutDTO_H_



#include <vector>
#include "OrderBoxLayoutItemDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "OrderBoxLayoutDTO.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о коробке.
/// </summary>
class  EnrichedOrderBoxLayoutDTO : public OrderBoxLayoutDTO
{
public:
    EnrichedOrderBoxLayoutDTO() = default;
    explicit EnrichedOrderBoxLayoutDTO(boost::property_tree::ptree const& pt);
    virtual ~EnrichedOrderBoxLayoutDTO() = default;

    EnrichedOrderBoxLayoutDTO(const EnrichedOrderBoxLayoutDTO& other) = default; // copy constructor
    EnrichedOrderBoxLayoutDTO(EnrichedOrderBoxLayoutDTO&& other) noexcept = default; // move constructor

    EnrichedOrderBoxLayoutDTO& operator=(const EnrichedOrderBoxLayoutDTO& other) = default; // copy assignment
    EnrichedOrderBoxLayoutDTO& operator=(EnrichedOrderBoxLayoutDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// EnrichedOrderBoxLayoutDTO members

    /// <summary>
    /// Список товаров в коробке.  Если в коробке едет часть большого товара, в списке может быть только один пункт. 
    /// </summary>
    std::vector<OrderBoxLayoutItemDTO> getItems() const;
    void setItems(std::vector<OrderBoxLayoutItemDTO> value);

    /// <summary>
    /// Идентификатор коробки.
    /// </summary>
    int64_t getBoxId() const;
    void setBoxId(int64_t value);

protected:
    std::vector<OrderBoxLayoutItemDTO> m_Items;
    int64_t m_BoxId = 0L;
};

std::vector<EnrichedOrderBoxLayoutDTO> createEnrichedOrderBoxLayoutDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<EnrichedOrderBoxLayoutDTO>(const EnrichedOrderBoxLayoutDTO& val) {
    return val.toPropertyTree();
}

template<>
inline EnrichedOrderBoxLayoutDTO fromPt<EnrichedOrderBoxLayoutDTO>(const boost::property_tree::ptree& pt) {
    EnrichedOrderBoxLayoutDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* EnrichedOrderBoxLayoutDTO_H_ */
