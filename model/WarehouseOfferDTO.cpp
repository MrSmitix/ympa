/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "WarehouseOfferDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

WarehouseOfferDTO::WarehouseOfferDTO()
{
    m_OfferId = "";
    m_TurnoverSummaryIsSet = false;
    m_UpdatedAt = "";
    m_UpdatedAtIsSet = false;
    
}

void WarehouseOfferDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool WarehouseOfferDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool WarehouseOfferDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "WarehouseOfferDTO" : pathPrefix;

         
    
    /* OfferId */ {
        const std::string& value = m_OfferId;
        const std::string currentValuePath = _pathPrefix + ".offerId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
             
    
    /* Stocks */ {
        const std::vector<org::openapitools::server::model::WarehouseStockDTO>& value = m_Stocks;
        const std::string currentValuePath = _pathPrefix + ".stocks";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::WarehouseStockDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".stocks") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool WarehouseOfferDTO::operator==(const WarehouseOfferDTO& rhs) const
{
    return
    
    
    (getOfferId() == rhs.getOfferId())
     &&
    
    
    ((!turnoverSummaryIsSet() && !rhs.turnoverSummaryIsSet()) || (turnoverSummaryIsSet() && rhs.turnoverSummaryIsSet() && getTurnoverSummary() == rhs.getTurnoverSummary())) &&
    
    (getStocks() == rhs.getStocks())
     &&
    
    
    ((!updatedAtIsSet() && !rhs.updatedAtIsSet()) || (updatedAtIsSet() && rhs.updatedAtIsSet() && getUpdatedAt() == rhs.getUpdatedAt()))
    
    ;
}

bool WarehouseOfferDTO::operator!=(const WarehouseOfferDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const WarehouseOfferDTO& o)
{
    j = nlohmann::json::object();
    j["offerId"] = o.m_OfferId;
    if(o.turnoverSummaryIsSet())
        j["turnoverSummary"] = o.m_TurnoverSummary;
    j["stocks"] = o.m_Stocks;
    if(o.updatedAtIsSet())
        j["updatedAt"] = o.m_UpdatedAt;
    
}

void from_json(const nlohmann::json& j, WarehouseOfferDTO& o)
{
    j.at("offerId").get_to(o.m_OfferId);
    if(j.find("turnoverSummary") != j.end())
    {
        j.at("turnoverSummary").get_to(o.m_TurnoverSummary);
        o.m_TurnoverSummaryIsSet = true;
    } 
    j.at("stocks").get_to(o.m_Stocks);
    if(j.find("updatedAt") != j.end())
    {
        j.at("updatedAt").get_to(o.m_UpdatedAt);
        o.m_UpdatedAtIsSet = true;
    } 
    
}

std::string WarehouseOfferDTO::getOfferId() const
{
    return m_OfferId;
}
void WarehouseOfferDTO::setOfferId(std::string const& value)
{
    m_OfferId = value;
}
org::openapitools::server::model::TurnoverDTO WarehouseOfferDTO::getTurnoverSummary() const
{
    return m_TurnoverSummary;
}
void WarehouseOfferDTO::setTurnoverSummary(org::openapitools::server::model::TurnoverDTO const& value)
{
    m_TurnoverSummary = value;
    m_TurnoverSummaryIsSet = true;
}
bool WarehouseOfferDTO::turnoverSummaryIsSet() const
{
    return m_TurnoverSummaryIsSet;
}
void WarehouseOfferDTO::unsetTurnoverSummary()
{
    m_TurnoverSummaryIsSet = false;
}
std::vector<org::openapitools::server::model::WarehouseStockDTO> WarehouseOfferDTO::getStocks() const
{
    return m_Stocks;
}
void WarehouseOfferDTO::setStocks(std::vector<org::openapitools::server::model::WarehouseStockDTO> const& value)
{
    m_Stocks = value;
}
std::string WarehouseOfferDTO::getUpdatedAt() const
{
    return m_UpdatedAt;
}
void WarehouseOfferDTO::setUpdatedAt(std::string const& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}
bool WarehouseOfferDTO::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}
void WarehouseOfferDTO::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}


} // namespace org::openapitools::server::model

