/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OfferDTO.h
 *
 * Предложение.
 */

#ifndef OfferDTO_H_
#define OfferDTO_H_


#include "CurrencyType.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Предложение.
/// </summary>
class  OfferDTO
{
public:
    OfferDTO();
    virtual ~OfferDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OfferDTO& rhs) const;
    bool operator!=(const OfferDTO& rhs) const;

    /////////////////////////////////////////////
    /// OfferDTO members

    /// <summary>
    /// Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. 
    /// </summary>
    double getPrice() const;
    void setPrice(double const value);
    bool priceIsSet() const;
    void unsetPrice();
    /// <summary>
    /// Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    int64_t getFeedId() const;
    void setFeedId(int64_t const value);
    bool feedIdIsSet() const;
    void unsetFeedId();
    /// <summary>
    /// Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    std::string getShopCategoryId() const;
    void setShopCategoryId(std::string const& value);
    bool shopCategoryIdIsSet() const;
    void unsetShopCategoryId();
    /// <summary>
    /// Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    int32_t getMarketCategoryId() const;
    void setMarketCategoryId(int32_t const value);
    bool marketCategoryIdIsSet() const;
    void unsetMarketCategoryId();
    /// <summary>
    /// Цена предложения без скидки.
    /// </summary>
    double getPreDiscountPrice() const;
    void setPreDiscountPrice(double const value);
    bool preDiscountPriceIsSet() const;
    void unsetPreDiscountPrice();
    /// <summary>
    /// Скидка на предложение в процентах.
    /// </summary>
    int32_t getDiscount() const;
    void setDiscount(int32_t const value);
    bool discountIsSet() const;
    void unsetDiscount();
    /// <summary>
    /// Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API. 
    /// </summary>
    bool isCutPrice() const;
    void setCutPrice(bool const value);
    bool cutPriceIsSet() const;
    void unsetCutPrice();
    /// <summary>
    /// URL-адрес предложения на сайте магазина.
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string const& value);
    bool urlIsSet() const;
    void unsetUrl();
    /// <summary>
    /// Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %} 
    /// </summary>
    int64_t getModelId() const;
    void setModelId(int64_t const value);
    /// <summary>
    /// Наименование предложения.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CurrencyType getCurrency() const;
    void setCurrency(org::openapitools::server::model::CurrencyType const& value);
    bool currencyIsSet() const;
    void unsetCurrency();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
    /// </summary>
    double getBid() const;
    void setBid(double const value);
    bool bidIsSet() const;
    void unsetBid();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
    /// </summary>
    double getCbid() const;
    void setCbid(double const value);
    bool cbidIsSet() const;
    void unsetCbid();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. 
    /// </summary>
    double getFee() const;
    void setFee(double const value);
    bool feeIsSet() const;
    void unsetFee();
    /// <summary>
    /// Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. 
    /// </summary>
    bool isBlocked() const;
    void setBlocked(bool const value);
    bool blockedIsSet() const;
    void unsetBlocked();

    friend  void to_json(nlohmann::json& j, const OfferDTO& o);
    friend  void from_json(const nlohmann::json& j, OfferDTO& o);
protected:
    double m_Price;
    bool m_PriceIsSet;
    int64_t m_FeedId;
    bool m_FeedIdIsSet;
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_ShopCategoryId;
    bool m_ShopCategoryIdIsSet;
    int32_t m_MarketCategoryId;
    bool m_MarketCategoryIdIsSet;
    double m_PreDiscountPrice;
    bool m_PreDiscountPriceIsSet;
    int32_t m_Discount;
    bool m_DiscountIsSet;
    bool m_CutPrice;
    bool m_CutPriceIsSet;
    std::string m_Url;
    bool m_UrlIsSet;
    int64_t m_ModelId;

    std::string m_Name;
    bool m_NameIsSet;
    org::openapitools::server::model::CurrencyType m_Currency;
    bool m_CurrencyIsSet;
    double m_Bid;
    bool m_BidIsSet;
    double m_Cbid;
    bool m_CbidIsSet;
    double m_Fee;
    bool m_FeeIsSet;
    bool m_Blocked;
    bool m_BlockedIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OfferDTO_H_ */
