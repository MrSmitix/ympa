/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferDTO.h
 *
 * Предложение.
 */

#ifndef OfferDTO_H_
#define OfferDTO_H_



#include "CurrencyType.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Предложение.
/// </summary>
class  OfferDTO 
{
public:
    OfferDTO() = default;
    explicit OfferDTO(boost::property_tree::ptree const& pt);
    virtual ~OfferDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// OfferDTO members

    /// <summary>
    /// Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. 
    /// </summary>
    double getPrice() const;
    void setPrice(double value);

    /// <summary>
    /// Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    int64_t getFeedId() const;
    void setFeedId(int64_t value);

    /// <summary>
    /// Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    std::string getShopCategoryId() const;
    void setShopCategoryId(std::string value);

    /// <summary>
    /// Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    int32_t getMarketCategoryId() const;
    void setMarketCategoryId(int32_t value);

    /// <summary>
    /// Цена предложения без скидки.
    /// </summary>
    double getPreDiscountPrice() const;
    void setPreDiscountPrice(double value);

    /// <summary>
    /// Скидка на предложение в процентах.
    /// </summary>
    int32_t getDiscount() const;
    void setDiscount(int32_t value);

    /// <summary>
    /// Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API. 
    /// </summary>
    bool isCutPrice() const;
    void setCutPrice(bool value);

    /// <summary>
    /// URL-адрес предложения на сайте магазина.
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

    /// <summary>
    /// Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %} 
    /// </summary>
    int64_t getModelId() const;
    void setModelId(int64_t value);

    /// <summary>
    /// Наименование предложения.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CurrencyType> getCurrency() const;
    void setCurrency(std::shared_ptr<CurrencyType> value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
    /// </summary>
    double getBid() const;
    void setBid(double value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
    /// </summary>
    double getCbid() const;
    void setCbid(double value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. 
    /// </summary>
    double getFee() const;
    void setFee(double value);

    /// <summary>
    /// Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. 
    /// </summary>
    bool isBlocked() const;
    void setBlocked(bool value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    double m_Price = 0.0;
    int64_t m_FeedId = 0L;
    std::string m_Id = "";
    std::string m_ShopCategoryId = "";
    int32_t m_MarketCategoryId = 0;
    double m_PreDiscountPrice = 0.0;
    int32_t m_Discount = 0;
    bool m_CutPrice = false;
    std::string m_Url = "";
    int64_t m_ModelId = 0L;
    std::string m_Name = "";
    std::shared_ptr<CurrencyType> m_Currency = std::make_shared<CurrencyType>();
    double m_Bid = 0.0;
    double m_Cbid = 0.0;
    double m_Fee = 0.0;
    bool m_Blocked = false;
};

std::vector<OfferDTO> createOfferDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* OfferDTO_H_ */
