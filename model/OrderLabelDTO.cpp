/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderLabelDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderLabelDTO::OrderLabelDTO()
{
    m_OrderId = 0L;
    m_PlacesNumber = 0;
    m_Url = "";
    
}

void OrderLabelDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderLabelDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderLabelDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderLabelDTO" : pathPrefix;

                     
    
    /* ParcelBoxLabels */ {
        const std::vector<org::openapitools::server::model::ParcelBoxLabelDTO>& value = m_ParcelBoxLabels;
        const std::string currentValuePath = _pathPrefix + ".parcelBoxLabels";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ParcelBoxLabelDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".parcelBoxLabels") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool OrderLabelDTO::operator==(const OrderLabelDTO& rhs) const
{
    return
    
    
    (getOrderId() == rhs.getOrderId())
     &&
    
    (getPlacesNumber() == rhs.getPlacesNumber())
     &&
    
    (getUrl() == rhs.getUrl())
     &&
    
    (getParcelBoxLabels() == rhs.getParcelBoxLabels())
    
    
    ;
}

bool OrderLabelDTO::operator!=(const OrderLabelDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderLabelDTO& o)
{
    j = nlohmann::json::object();
    j["orderId"] = o.m_OrderId;
    j["placesNumber"] = o.m_PlacesNumber;
    j["url"] = o.m_Url;
    j["parcelBoxLabels"] = o.m_ParcelBoxLabels;
    
}

void from_json(const nlohmann::json& j, OrderLabelDTO& o)
{
    j.at("orderId").get_to(o.m_OrderId);
    j.at("placesNumber").get_to(o.m_PlacesNumber);
    j.at("url").get_to(o.m_Url);
    j.at("parcelBoxLabels").get_to(o.m_ParcelBoxLabels);
    
}

int64_t OrderLabelDTO::getOrderId() const
{
    return m_OrderId;
}
void OrderLabelDTO::setOrderId(int64_t const value)
{
    m_OrderId = value;
}
int32_t OrderLabelDTO::getPlacesNumber() const
{
    return m_PlacesNumber;
}
void OrderLabelDTO::setPlacesNumber(int32_t const value)
{
    m_PlacesNumber = value;
}
std::string OrderLabelDTO::getUrl() const
{
    return m_Url;
}
void OrderLabelDTO::setUrl(std::string const& value)
{
    m_Url = value;
}
std::vector<org::openapitools::server::model::ParcelBoxLabelDTO> OrderLabelDTO::getParcelBoxLabels() const
{
    return m_ParcelBoxLabels;
}
void OrderLabelDTO::setParcelBoxLabels(std::vector<org::openapitools::server::model::ParcelBoxLabelDTO> const& value)
{
    m_ParcelBoxLabels = value;
}


} // namespace org::openapitools::server::model

