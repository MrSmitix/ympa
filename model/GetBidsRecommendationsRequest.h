/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetBidsRecommendationsRequest.h
 *
 * description.
 */

#ifndef GetBidsRecommendationsRequest_H_
#define GetBidsRecommendationsRequest_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// description.
/// </summary>
class  GetBidsRecommendationsRequest 
{
public:
    GetBidsRecommendationsRequest() = default;
    explicit GetBidsRecommendationsRequest(boost::property_tree::ptree const& pt);
    virtual ~GetBidsRecommendationsRequest() = default;

    GetBidsRecommendationsRequest(const GetBidsRecommendationsRequest& other) = default; // copy constructor
    GetBidsRecommendationsRequest(GetBidsRecommendationsRequest&& other) noexcept = default; // move constructor

    GetBidsRecommendationsRequest& operator=(const GetBidsRecommendationsRequest& other) = default; // copy assignment
    GetBidsRecommendationsRequest& operator=(GetBidsRecommendationsRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GetBidsRecommendationsRequest members

    /// <summary>
    /// Список товаров, для которых нужно получить рекомендации по ставкам. 
    /// </summary>
    std::vector<std::string> getSkus() const;
    void setSkus(std::vector<std::string> value);

protected:
    std::vector<std::string> m_Skus;
};

std::vector<GetBidsRecommendationsRequest> createGetBidsRecommendationsRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GetBidsRecommendationsRequest>(const GetBidsRecommendationsRequest& val) {
    return val.toPropertyTree();
}

template<>
inline GetBidsRecommendationsRequest fromPt<GetBidsRecommendationsRequest>(const boost::property_tree::ptree& pt) {
    GetBidsRecommendationsRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GetBidsRecommendationsRequest_H_ */
