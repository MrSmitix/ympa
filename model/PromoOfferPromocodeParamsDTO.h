/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PromoOfferPromocodeParamsDTO.h
 *
 * Параметры товара в акции с типом &#x60;MARKET_PROMOCODE&#x60;.
 */

#ifndef PromoOfferPromocodeParamsDTO_H_
#define PromoOfferPromocodeParamsDTO_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Параметры товара в акции с типом &#x60;MARKET_PROMOCODE&#x60;.
/// </summary>
class  PromoOfferPromocodeParamsDTO 
{
public:
    PromoOfferPromocodeParamsDTO() = default;
    explicit PromoOfferPromocodeParamsDTO(boost::property_tree::ptree const& pt);
    virtual ~PromoOfferPromocodeParamsDTO() = default;

    PromoOfferPromocodeParamsDTO(const PromoOfferPromocodeParamsDTO& other) = default; // copy constructor
    PromoOfferPromocodeParamsDTO(PromoOfferPromocodeParamsDTO&& other) noexcept = default; // move constructor

    PromoOfferPromocodeParamsDTO& operator=(const PromoOfferPromocodeParamsDTO& other) = default; // copy assignment
    PromoOfferPromocodeParamsDTO& operator=(PromoOfferPromocodeParamsDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PromoOfferPromocodeParamsDTO members

    /// <summary>
    /// Максимально возможная цена для участия в акции до применения промокода.  Указывается в рублях.  Возвращается для всех товаров. 
    /// </summary>
    int64_t getMaxPrice() const;
    void setMaxPrice(int64_t value);

protected:
    int64_t m_MaxPrice = 0L;
};

std::vector<PromoOfferPromocodeParamsDTO> createPromoOfferPromocodeParamsDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PromoOfferPromocodeParamsDTO>(const PromoOfferPromocodeParamsDTO& val) {
    return val.toPropertyTree();
}

template<>
inline PromoOfferPromocodeParamsDTO fromPt<PromoOfferPromocodeParamsDTO>(const boost::property_tree::ptree& pt) {
    PromoOfferPromocodeParamsDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PromoOfferPromocodeParamsDTO_H_ */
