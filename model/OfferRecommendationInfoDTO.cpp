/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OfferRecommendationInfoDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OfferRecommendationInfoDTO::OfferRecommendationInfoDTO()
{
    m_OfferId = "";
    m_OfferIdIsSet = false;
    m_RecommendedCofinancePriceIsSet = false;
    m_CompetitivenessThresholdsIsSet = false;
    
}

void OfferRecommendationInfoDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OfferRecommendationInfoDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OfferRecommendationInfoDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OfferRecommendationInfoDTO" : pathPrefix;

         
    if (offerIdIsSet())
    {
        const std::string& value = m_OfferId;
        const std::string currentValuePath = _pathPrefix + ".offerId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
            
    return success;
}

bool OfferRecommendationInfoDTO::operator==(const OfferRecommendationInfoDTO& rhs) const
{
    return
    
    
    
    ((!offerIdIsSet() && !rhs.offerIdIsSet()) || (offerIdIsSet() && rhs.offerIdIsSet() && getOfferId() == rhs.getOfferId())) &&
    
    
    ((!recommendedCofinancePriceIsSet() && !rhs.recommendedCofinancePriceIsSet()) || (recommendedCofinancePriceIsSet() && rhs.recommendedCofinancePriceIsSet() && getRecommendedCofinancePrice() == rhs.getRecommendedCofinancePrice())) &&
    
    
    ((!competitivenessThresholdsIsSet() && !rhs.competitivenessThresholdsIsSet()) || (competitivenessThresholdsIsSet() && rhs.competitivenessThresholdsIsSet() && getCompetitivenessThresholds() == rhs.getCompetitivenessThresholds()))
    
    ;
}

bool OfferRecommendationInfoDTO::operator!=(const OfferRecommendationInfoDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OfferRecommendationInfoDTO& o)
{
    j = nlohmann::json::object();
    if(o.offerIdIsSet())
        j["offerId"] = o.m_OfferId;
    if(o.recommendedCofinancePriceIsSet())
        j["recommendedCofinancePrice"] = o.m_RecommendedCofinancePrice;
    if(o.competitivenessThresholdsIsSet())
        j["competitivenessThresholds"] = o.m_CompetitivenessThresholds;
    
}

void from_json(const nlohmann::json& j, OfferRecommendationInfoDTO& o)
{
    if(j.find("offerId") != j.end())
    {
        j.at("offerId").get_to(o.m_OfferId);
        o.m_OfferIdIsSet = true;
    } 
    if(j.find("recommendedCofinancePrice") != j.end())
    {
        j.at("recommendedCofinancePrice").get_to(o.m_RecommendedCofinancePrice);
        o.m_RecommendedCofinancePriceIsSet = true;
    } 
    if(j.find("competitivenessThresholds") != j.end())
    {
        j.at("competitivenessThresholds").get_to(o.m_CompetitivenessThresholds);
        o.m_CompetitivenessThresholdsIsSet = true;
    } 
    
}

std::string OfferRecommendationInfoDTO::getOfferId() const
{
    return m_OfferId;
}
void OfferRecommendationInfoDTO::setOfferId(std::string const& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}
bool OfferRecommendationInfoDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}
void OfferRecommendationInfoDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
org::openapitools::server::model::BasePriceDTO OfferRecommendationInfoDTO::getRecommendedCofinancePrice() const
{
    return m_RecommendedCofinancePrice;
}
void OfferRecommendationInfoDTO::setRecommendedCofinancePrice(org::openapitools::server::model::BasePriceDTO const& value)
{
    m_RecommendedCofinancePrice = value;
    m_RecommendedCofinancePriceIsSet = true;
}
bool OfferRecommendationInfoDTO::recommendedCofinancePriceIsSet() const
{
    return m_RecommendedCofinancePriceIsSet;
}
void OfferRecommendationInfoDTO::unsetRecommendedCofinancePrice()
{
    m_RecommendedCofinancePriceIsSet = false;
}
org::openapitools::server::model::PriceCompetitivenessThresholdsDTO OfferRecommendationInfoDTO::getCompetitivenessThresholds() const
{
    return m_CompetitivenessThresholds;
}
void OfferRecommendationInfoDTO::setCompetitivenessThresholds(org::openapitools::server::model::PriceCompetitivenessThresholdsDTO const& value)
{
    m_CompetitivenessThresholds = value;
    m_CompetitivenessThresholdsIsSet = true;
}
bool OfferRecommendationInfoDTO::competitivenessThresholdsIsSet() const
{
    return m_CompetitivenessThresholdsIsSet;
}
void OfferRecommendationInfoDTO::unsetCompetitivenessThresholds()
{
    m_CompetitivenessThresholdsIsSet = false;
}


} // namespace org::openapitools::server::model

