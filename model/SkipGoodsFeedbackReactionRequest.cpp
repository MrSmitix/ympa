/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SkipGoodsFeedbackReactionRequest.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

SkipGoodsFeedbackReactionRequest::SkipGoodsFeedbackReactionRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string SkipGoodsFeedbackReactionRequest::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void SkipGoodsFeedbackReactionRequest::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree SkipGoodsFeedbackReactionRequest::toPropertyTree()
{
    return toPropertyTree_internal();
}

void SkipGoodsFeedbackReactionRequest::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string SkipGoodsFeedbackReactionRequest::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void SkipGoodsFeedbackReactionRequest::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree SkipGoodsFeedbackReactionRequest::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	// generate tree for FeedbackIds
	if (!m_FeedbackIds.empty()) {
		for (const auto &childEntry : m_FeedbackIds) {
            ptree FeedbackIds_node;
            FeedbackIds_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", FeedbackIds_node));
		}
		pt.add_child("feedbackIds", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void SkipGoodsFeedbackReactionRequest::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	// push all items of FeedbackIds into member vector
	if (pt.get_child_optional("feedbackIds")) {
		for (const auto &childTree : pt.get_child("feedbackIds")) {
            int64_t val =
                std::stol(childTree.second.data());
            m_FeedbackIds.emplace_back(std::move(val));
		}
	}
}

Set<int64_t> SkipGoodsFeedbackReactionRequest::getFeedbackIds() const
{
    return m_FeedbackIds;
}

void SkipGoodsFeedbackReactionRequest::setFeedbackIds(Set<int64_t> value)
{
	m_FeedbackIds = value;
}

std::vector<SkipGoodsFeedbackReactionRequest> createSkipGoodsFeedbackReactionRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<SkipGoodsFeedbackReactionRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(SkipGoodsFeedbackReactionRequest(child.second));
    }

    return vec;
}

}
}
}
}

