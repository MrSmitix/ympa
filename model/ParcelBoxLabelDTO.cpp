/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ParcelBoxLabelDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ParcelBoxLabelDTO::ParcelBoxLabelDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ParcelBoxLabelDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ParcelBoxLabelDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ParcelBoxLabelDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("url", m_Url);
	pt.put("supplierName", m_SupplierName);
	pt.put("deliveryServiceName", m_DeliveryServiceName);
	pt.put("orderId", m_OrderId);
	pt.put("orderNum", m_OrderNum);
	pt.put("recipientName", m_RecipientName);
	pt.put("boxId", m_BoxId);
	pt.put("fulfilmentId", m_FulfilmentId);
	pt.put("place", m_Place);
	pt.put("weight", m_Weight);
	pt.put("deliveryServiceId", m_DeliveryServiceId);
	pt.put("deliveryAddress", m_DeliveryAddress);
	pt.put("shipmentDate", m_ShipmentDate);
	return pt;
}

void ParcelBoxLabelDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Url = pt.get("url", "");
	m_SupplierName = pt.get("supplierName", "");
	m_DeliveryServiceName = pt.get("deliveryServiceName", "");
	m_OrderId = pt.get("orderId", 0L);
	m_OrderNum = pt.get("orderNum", "");
	m_RecipientName = pt.get("recipientName", "");
	m_BoxId = pt.get("boxId", 0L);
	m_FulfilmentId = pt.get("fulfilmentId", "");
	m_Place = pt.get("place", "");
	m_Weight = pt.get("weight", "");
	m_DeliveryServiceId = pt.get("deliveryServiceId", "");
	m_DeliveryAddress = pt.get("deliveryAddress", "");
	m_ShipmentDate = pt.get("shipmentDate", "");
}

std::string ParcelBoxLabelDTO::getUrl() const
{
    return m_Url;
}

void ParcelBoxLabelDTO::setUrl(std::string value)
{
    m_Url = value;
}


std::string ParcelBoxLabelDTO::getSupplierName() const
{
    return m_SupplierName;
}

void ParcelBoxLabelDTO::setSupplierName(std::string value)
{
    m_SupplierName = value;
}


std::string ParcelBoxLabelDTO::getDeliveryServiceName() const
{
    return m_DeliveryServiceName;
}

void ParcelBoxLabelDTO::setDeliveryServiceName(std::string value)
{
    m_DeliveryServiceName = value;
}


int64_t ParcelBoxLabelDTO::getOrderId() const
{
    return m_OrderId;
}

void ParcelBoxLabelDTO::setOrderId(int64_t value)
{
    m_OrderId = value;
}


std::string ParcelBoxLabelDTO::getOrderNum() const
{
    return m_OrderNum;
}

void ParcelBoxLabelDTO::setOrderNum(std::string value)
{
    m_OrderNum = value;
}


std::string ParcelBoxLabelDTO::getRecipientName() const
{
    return m_RecipientName;
}

void ParcelBoxLabelDTO::setRecipientName(std::string value)
{
    m_RecipientName = value;
}


int64_t ParcelBoxLabelDTO::getBoxId() const
{
    return m_BoxId;
}

void ParcelBoxLabelDTO::setBoxId(int64_t value)
{
    m_BoxId = value;
}


std::string ParcelBoxLabelDTO::getFulfilmentId() const
{
    return m_FulfilmentId;
}

void ParcelBoxLabelDTO::setFulfilmentId(std::string value)
{
    m_FulfilmentId = value;
}


std::string ParcelBoxLabelDTO::getPlace() const
{
    return m_Place;
}

void ParcelBoxLabelDTO::setPlace(std::string value)
{
    m_Place = value;
}


std::string ParcelBoxLabelDTO::getWeight() const
{
    return m_Weight;
}

void ParcelBoxLabelDTO::setWeight(std::string value)
{
    m_Weight = value;
}


std::string ParcelBoxLabelDTO::getDeliveryServiceId() const
{
    return m_DeliveryServiceId;
}

void ParcelBoxLabelDTO::setDeliveryServiceId(std::string value)
{
    m_DeliveryServiceId = value;
}


std::string ParcelBoxLabelDTO::getDeliveryAddress() const
{
    return m_DeliveryAddress;
}

void ParcelBoxLabelDTO::setDeliveryAddress(std::string value)
{
    m_DeliveryAddress = value;
}


std::string ParcelBoxLabelDTO::getShipmentDate() const
{
    return m_ShipmentDate;
}

void ParcelBoxLabelDTO::setShipmentDate(std::string value)
{
    m_ShipmentDate = value;
}



std::vector<ParcelBoxLabelDTO> createParcelBoxLabelDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ParcelBoxLabelDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(ParcelBoxLabelDTO(child.second));
    }

    return vec;
}

}
}
}
}

