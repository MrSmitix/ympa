/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FeedIndexLogsRecordDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FeedIndexLogsRecordDTO::FeedIndexLogsRecordDTO()
{
    m_DownloadTime = "";
    m_DownloadTimeIsSet = false;
    m_FileTime = "";
    m_FileTimeIsSet = false;
    m_GenerationId = 0L;
    m_GenerationIdIsSet = false;
    m_IndexTypeIsSet = false;
    m_PublishedTime = "";
    m_PublishedTimeIsSet = false;
    m_StatusIsSet = false;
    m_ErrorIsSet = false;
    m_OffersIsSet = false;
    
}

void FeedIndexLogsRecordDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FeedIndexLogsRecordDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FeedIndexLogsRecordDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FeedIndexLogsRecordDTO" : pathPrefix;

                                    
    return success;
}

bool FeedIndexLogsRecordDTO::operator==(const FeedIndexLogsRecordDTO& rhs) const
{
    return
    
    
    
    ((!downloadTimeIsSet() && !rhs.downloadTimeIsSet()) || (downloadTimeIsSet() && rhs.downloadTimeIsSet() && getDownloadTime() == rhs.getDownloadTime())) &&
    
    
    ((!fileTimeIsSet() && !rhs.fileTimeIsSet()) || (fileTimeIsSet() && rhs.fileTimeIsSet() && getFileTime() == rhs.getFileTime())) &&
    
    
    ((!generationIdIsSet() && !rhs.generationIdIsSet()) || (generationIdIsSet() && rhs.generationIdIsSet() && getGenerationId() == rhs.getGenerationId())) &&
    
    
    ((!indexTypeIsSet() && !rhs.indexTypeIsSet()) || (indexTypeIsSet() && rhs.indexTypeIsSet() && getIndexType() == rhs.getIndexType())) &&
    
    
    ((!publishedTimeIsSet() && !rhs.publishedTimeIsSet()) || (publishedTimeIsSet() && rhs.publishedTimeIsSet() && getPublishedTime() == rhs.getPublishedTime())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!errorIsSet() && !rhs.errorIsSet()) || (errorIsSet() && rhs.errorIsSet() && getError() == rhs.getError())) &&
    
    
    ((!offersIsSet() && !rhs.offersIsSet()) || (offersIsSet() && rhs.offersIsSet() && getOffers() == rhs.getOffers()))
    
    ;
}

bool FeedIndexLogsRecordDTO::operator!=(const FeedIndexLogsRecordDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FeedIndexLogsRecordDTO& o)
{
    j = nlohmann::json::object();
    if(o.downloadTimeIsSet())
        j["downloadTime"] = o.m_DownloadTime;
    if(o.fileTimeIsSet())
        j["fileTime"] = o.m_FileTime;
    if(o.generationIdIsSet())
        j["generationId"] = o.m_GenerationId;
    if(o.indexTypeIsSet())
        j["indexType"] = o.m_IndexType;
    if(o.publishedTimeIsSet())
        j["publishedTime"] = o.m_PublishedTime;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.errorIsSet())
        j["error"] = o.m_Error;
    if(o.offersIsSet())
        j["offers"] = o.m_Offers;
    
}

void from_json(const nlohmann::json& j, FeedIndexLogsRecordDTO& o)
{
    if(j.find("downloadTime") != j.end())
    {
        j.at("downloadTime").get_to(o.m_DownloadTime);
        o.m_DownloadTimeIsSet = true;
    } 
    if(j.find("fileTime") != j.end())
    {
        j.at("fileTime").get_to(o.m_FileTime);
        o.m_FileTimeIsSet = true;
    } 
    if(j.find("generationId") != j.end())
    {
        j.at("generationId").get_to(o.m_GenerationId);
        o.m_GenerationIdIsSet = true;
    } 
    if(j.find("indexType") != j.end())
    {
        j.at("indexType").get_to(o.m_IndexType);
        o.m_IndexTypeIsSet = true;
    } 
    if(j.find("publishedTime") != j.end())
    {
        j.at("publishedTime").get_to(o.m_PublishedTime);
        o.m_PublishedTimeIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("error") != j.end())
    {
        j.at("error").get_to(o.m_Error);
        o.m_ErrorIsSet = true;
    } 
    if(j.find("offers") != j.end())
    {
        j.at("offers").get_to(o.m_Offers);
        o.m_OffersIsSet = true;
    } 
    
}

std::string FeedIndexLogsRecordDTO::getDownloadTime() const
{
    return m_DownloadTime;
}
void FeedIndexLogsRecordDTO::setDownloadTime(std::string const& value)
{
    m_DownloadTime = value;
    m_DownloadTimeIsSet = true;
}
bool FeedIndexLogsRecordDTO::downloadTimeIsSet() const
{
    return m_DownloadTimeIsSet;
}
void FeedIndexLogsRecordDTO::unsetDownloadTime()
{
    m_DownloadTimeIsSet = false;
}
std::string FeedIndexLogsRecordDTO::getFileTime() const
{
    return m_FileTime;
}
void FeedIndexLogsRecordDTO::setFileTime(std::string const& value)
{
    m_FileTime = value;
    m_FileTimeIsSet = true;
}
bool FeedIndexLogsRecordDTO::fileTimeIsSet() const
{
    return m_FileTimeIsSet;
}
void FeedIndexLogsRecordDTO::unsetFileTime()
{
    m_FileTimeIsSet = false;
}
int64_t FeedIndexLogsRecordDTO::getGenerationId() const
{
    return m_GenerationId;
}
void FeedIndexLogsRecordDTO::setGenerationId(int64_t const value)
{
    m_GenerationId = value;
    m_GenerationIdIsSet = true;
}
bool FeedIndexLogsRecordDTO::generationIdIsSet() const
{
    return m_GenerationIdIsSet;
}
void FeedIndexLogsRecordDTO::unsetGenerationId()
{
    m_GenerationIdIsSet = false;
}
org::openapitools::server::model::FeedIndexLogsIndexType FeedIndexLogsRecordDTO::getIndexType() const
{
    return m_IndexType;
}
void FeedIndexLogsRecordDTO::setIndexType(org::openapitools::server::model::FeedIndexLogsIndexType const& value)
{
    m_IndexType = value;
    m_IndexTypeIsSet = true;
}
bool FeedIndexLogsRecordDTO::indexTypeIsSet() const
{
    return m_IndexTypeIsSet;
}
void FeedIndexLogsRecordDTO::unsetIndexType()
{
    m_IndexTypeIsSet = false;
}
std::string FeedIndexLogsRecordDTO::getPublishedTime() const
{
    return m_PublishedTime;
}
void FeedIndexLogsRecordDTO::setPublishedTime(std::string const& value)
{
    m_PublishedTime = value;
    m_PublishedTimeIsSet = true;
}
bool FeedIndexLogsRecordDTO::publishedTimeIsSet() const
{
    return m_PublishedTimeIsSet;
}
void FeedIndexLogsRecordDTO::unsetPublishedTime()
{
    m_PublishedTimeIsSet = false;
}
org::openapitools::server::model::FeedIndexLogsStatusType FeedIndexLogsRecordDTO::getStatus() const
{
    return m_Status;
}
void FeedIndexLogsRecordDTO::setStatus(org::openapitools::server::model::FeedIndexLogsStatusType const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool FeedIndexLogsRecordDTO::statusIsSet() const
{
    return m_StatusIsSet;
}
void FeedIndexLogsRecordDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
org::openapitools::server::model::FeedIndexLogsErrorDTO FeedIndexLogsRecordDTO::getError() const
{
    return m_Error;
}
void FeedIndexLogsRecordDTO::setError(org::openapitools::server::model::FeedIndexLogsErrorDTO const& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}
bool FeedIndexLogsRecordDTO::errorIsSet() const
{
    return m_ErrorIsSet;
}
void FeedIndexLogsRecordDTO::unsetError()
{
    m_ErrorIsSet = false;
}
org::openapitools::server::model::FeedIndexLogsOffersDTO FeedIndexLogsRecordDTO::getOffers() const
{
    return m_Offers;
}
void FeedIndexLogsRecordDTO::setOffers(org::openapitools::server::model::FeedIndexLogsOffersDTO const& value)
{
    m_Offers = value;
    m_OffersIsSet = true;
}
bool FeedIndexLogsRecordDTO::offersIsSet() const
{
    return m_OffersIsSet;
}
void FeedIndexLogsRecordDTO::unsetOffers()
{
    m_OffersIsSet = false;
}


} // namespace org::openapitools::server::model

