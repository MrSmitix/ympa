/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FeedIndexLogsRecordDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

FeedIndexLogsRecordDTO::FeedIndexLogsRecordDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string FeedIndexLogsRecordDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void FeedIndexLogsRecordDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree FeedIndexLogsRecordDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void FeedIndexLogsRecordDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string FeedIndexLogsRecordDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void FeedIndexLogsRecordDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree FeedIndexLogsRecordDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("downloadTime", m_DownloadTime);
	pt.put("fileTime", m_FileTime);
	pt.put("generationId", m_GenerationId);
	pt.put("publishedTime", m_PublishedTime);
	if (m_Error != nullptr) {
		pt.add_child("error", m_Error->toPropertyTree());
	}
	if (m_Offers != nullptr) {
		pt.add_child("offers", m_Offers->toPropertyTree());
	}
	return pt;
}

void FeedIndexLogsRecordDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_DownloadTime = pt.get("downloadTime", "");
	m_FileTime = pt.get("fileTime", "");
	m_GenerationId = pt.get("generationId", 0L);
	m_PublishedTime = pt.get("publishedTime", "");
	if (pt.get_child_optional("error")) {
		m_Error = std::make_shared<FeedIndexLogsErrorDTO>();
		m_Error->fromPropertyTree(pt.get_child("error"));
	}
	if (pt.get_child_optional("offers")) {
		m_Offers = std::make_shared<FeedIndexLogsOffersDTO>();
		m_Offers->fromPropertyTree(pt.get_child("offers"));
	}
}

std::string FeedIndexLogsRecordDTO::getDownloadTime() const
{
    return m_DownloadTime;
}

void FeedIndexLogsRecordDTO::setDownloadTime(std::string value)
{
	m_DownloadTime = value;
}
std::string FeedIndexLogsRecordDTO::getFileTime() const
{
    return m_FileTime;
}

void FeedIndexLogsRecordDTO::setFileTime(std::string value)
{
	m_FileTime = value;
}
int64_t FeedIndexLogsRecordDTO::getGenerationId() const
{
    return m_GenerationId;
}

void FeedIndexLogsRecordDTO::setGenerationId(int64_t value)
{
	m_GenerationId = value;
}
std::shared_ptr<FeedIndexLogsIndexType> FeedIndexLogsRecordDTO::getIndexType() const
{
    return m_IndexType;
}

void FeedIndexLogsRecordDTO::setIndexType(std::shared_ptr<FeedIndexLogsIndexType> value)
{
	m_IndexType = value;
}
std::string FeedIndexLogsRecordDTO::getPublishedTime() const
{
    return m_PublishedTime;
}

void FeedIndexLogsRecordDTO::setPublishedTime(std::string value)
{
	m_PublishedTime = value;
}
std::shared_ptr<FeedIndexLogsStatusType> FeedIndexLogsRecordDTO::getStatus() const
{
    return m_Status;
}

void FeedIndexLogsRecordDTO::setStatus(std::shared_ptr<FeedIndexLogsStatusType> value)
{
	m_Status = value;
}
std::shared_ptr<FeedIndexLogsErrorDTO> FeedIndexLogsRecordDTO::getError() const
{
    return m_Error;
}

void FeedIndexLogsRecordDTO::setError(std::shared_ptr<FeedIndexLogsErrorDTO> value)
{
	m_Error = value;
}
std::shared_ptr<FeedIndexLogsOffersDTO> FeedIndexLogsRecordDTO::getOffers() const
{
    return m_Offers;
}

void FeedIndexLogsRecordDTO::setOffers(std::shared_ptr<FeedIndexLogsOffersDTO> value)
{
	m_Offers = value;
}

std::vector<FeedIndexLogsRecordDTO> createFeedIndexLogsRecordDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<FeedIndexLogsRecordDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(FeedIndexLogsRecordDTO(child.second));
    }

    return vec;
}

}
}
}
}

