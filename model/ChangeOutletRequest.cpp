/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ChangeOutletRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ChangeOutletRequest::ChangeOutletRequest()
{
    m_Name = "";
    m_Coords = "";
    m_CoordsIsSet = false;
    m_IsMain = false;
    m_IsMainIsSet = false;
    m_ShopOutletCode = "";
    m_ShopOutletCodeIsSet = false;
    m_VisibilityIsSet = false;
    m_DeliveryRulesIsSet = false;
    m_StoragePeriod = 0L;
    m_StoragePeriodIsSet = false;
    
}

void ChangeOutletRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ChangeOutletRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ChangeOutletRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ChangeOutletRequest" : pathPrefix;

                                
    if (!m_Address.validate(msg, _pathPrefix + ".address")) {
        msg << _pathPrefix << ": Address is invalid;";
        success = false;
    }     
    
    /* Phones */ {
        const std::vector<std::string>& value = m_Phones;
        const std::string currentValuePath = _pathPrefix + ".phones";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
 
                i++;
            }
        }

    }
        
    if (!m_WorkingSchedule.validate(msg, _pathPrefix + ".workingSchedule")) {
        msg << _pathPrefix << ": WorkingSchedule is invalid;";
        success = false;
    }     
    if (deliveryRulesIsSet())
    {
        const std::vector<org::openapitools::server::model::OutletDeliveryRuleDTO>& value = m_DeliveryRules;
        const std::string currentValuePath = _pathPrefix + ".deliveryRules";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OutletDeliveryRuleDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".deliveryRules") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool ChangeOutletRequest::operator==(const ChangeOutletRequest& rhs) const
{
    return
    
    
    (getName() == rhs.getName())
     &&
    
    (getType() == rhs.getType())
     &&
    
    
    ((!coordsIsSet() && !rhs.coordsIsSet()) || (coordsIsSet() && rhs.coordsIsSet() && getCoords() == rhs.getCoords())) &&
    
    
    ((!isMainIsSet() && !rhs.isMainIsSet()) || (isMainIsSet() && rhs.isMainIsSet() && isIsMain() == rhs.isIsMain())) &&
    
    
    ((!shopOutletCodeIsSet() && !rhs.shopOutletCodeIsSet()) || (shopOutletCodeIsSet() && rhs.shopOutletCodeIsSet() && getShopOutletCode() == rhs.getShopOutletCode())) &&
    
    
    ((!visibilityIsSet() && !rhs.visibilityIsSet()) || (visibilityIsSet() && rhs.visibilityIsSet() && getVisibility() == rhs.getVisibility())) &&
    
    (getAddress() == rhs.getAddress())
     &&
    
    (getPhones() == rhs.getPhones())
     &&
    
    (getWorkingSchedule() == rhs.getWorkingSchedule())
     &&
    
    
    ((!deliveryRulesIsSet() && !rhs.deliveryRulesIsSet()) || (deliveryRulesIsSet() && rhs.deliveryRulesIsSet() && getDeliveryRules() == rhs.getDeliveryRules())) &&
    
    
    ((!storagePeriodIsSet() && !rhs.storagePeriodIsSet()) || (storagePeriodIsSet() && rhs.storagePeriodIsSet() && getStoragePeriod() == rhs.getStoragePeriod()))
    
    ;
}

bool ChangeOutletRequest::operator!=(const ChangeOutletRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ChangeOutletRequest& o)
{
    j = nlohmann::json::object();
    j["name"] = o.m_Name;
    j["type"] = o.m_Type;
    if(o.coordsIsSet())
        j["coords"] = o.m_Coords;
    if(o.isMainIsSet())
        j["isMain"] = o.m_IsMain;
    if(o.shopOutletCodeIsSet())
        j["shopOutletCode"] = o.m_ShopOutletCode;
    if(o.visibilityIsSet())
        j["visibility"] = o.m_Visibility;
    j["address"] = o.m_Address;
    j["phones"] = o.m_Phones;
    j["workingSchedule"] = o.m_WorkingSchedule;
    if(o.deliveryRulesIsSet() || !o.m_DeliveryRules.empty())
        j["deliveryRules"] = o.m_DeliveryRules;
    if(o.storagePeriodIsSet())
        j["storagePeriod"] = o.m_StoragePeriod;
    
}

void from_json(const nlohmann::json& j, ChangeOutletRequest& o)
{
    j.at("name").get_to(o.m_Name);
    j.at("type").get_to(o.m_Type);
    if(j.find("coords") != j.end())
    {
        j.at("coords").get_to(o.m_Coords);
        o.m_CoordsIsSet = true;
    } 
    if(j.find("isMain") != j.end())
    {
        j.at("isMain").get_to(o.m_IsMain);
        o.m_IsMainIsSet = true;
    } 
    if(j.find("shopOutletCode") != j.end())
    {
        j.at("shopOutletCode").get_to(o.m_ShopOutletCode);
        o.m_ShopOutletCodeIsSet = true;
    } 
    if(j.find("visibility") != j.end())
    {
        j.at("visibility").get_to(o.m_Visibility);
        o.m_VisibilityIsSet = true;
    } 
    j.at("address").get_to(o.m_Address);
    j.at("phones").get_to(o.m_Phones);
    j.at("workingSchedule").get_to(o.m_WorkingSchedule);
    if(j.find("deliveryRules") != j.end())
    {
        j.at("deliveryRules").get_to(o.m_DeliveryRules);
        o.m_DeliveryRulesIsSet = true;
    } 
    if(j.find("storagePeriod") != j.end())
    {
        j.at("storagePeriod").get_to(o.m_StoragePeriod);
        o.m_StoragePeriodIsSet = true;
    } 
    
}

std::string ChangeOutletRequest::getName() const
{
    return m_Name;
}
void ChangeOutletRequest::setName(std::string const& value)
{
    m_Name = value;
}
org::openapitools::server::model::OutletType ChangeOutletRequest::getType() const
{
    return m_Type;
}
void ChangeOutletRequest::setType(org::openapitools::server::model::OutletType const& value)
{
    m_Type = value;
}
std::string ChangeOutletRequest::getCoords() const
{
    return m_Coords;
}
void ChangeOutletRequest::setCoords(std::string const& value)
{
    m_Coords = value;
    m_CoordsIsSet = true;
}
bool ChangeOutletRequest::coordsIsSet() const
{
    return m_CoordsIsSet;
}
void ChangeOutletRequest::unsetCoords()
{
    m_CoordsIsSet = false;
}
bool ChangeOutletRequest::isIsMain() const
{
    return m_IsMain;
}
void ChangeOutletRequest::setIsMain(bool const value)
{
    m_IsMain = value;
    m_IsMainIsSet = true;
}
bool ChangeOutletRequest::isMainIsSet() const
{
    return m_IsMainIsSet;
}
void ChangeOutletRequest::unsetIsMain()
{
    m_IsMainIsSet = false;
}
std::string ChangeOutletRequest::getShopOutletCode() const
{
    return m_ShopOutletCode;
}
void ChangeOutletRequest::setShopOutletCode(std::string const& value)
{
    m_ShopOutletCode = value;
    m_ShopOutletCodeIsSet = true;
}
bool ChangeOutletRequest::shopOutletCodeIsSet() const
{
    return m_ShopOutletCodeIsSet;
}
void ChangeOutletRequest::unsetShopOutletCode()
{
    m_ShopOutletCodeIsSet = false;
}
org::openapitools::server::model::OutletVisibilityType ChangeOutletRequest::getVisibility() const
{
    return m_Visibility;
}
void ChangeOutletRequest::setVisibility(org::openapitools::server::model::OutletVisibilityType const& value)
{
    m_Visibility = value;
    m_VisibilityIsSet = true;
}
bool ChangeOutletRequest::visibilityIsSet() const
{
    return m_VisibilityIsSet;
}
void ChangeOutletRequest::unsetVisibility()
{
    m_VisibilityIsSet = false;
}
org::openapitools::server::model::OutletAddressDTO ChangeOutletRequest::getAddress() const
{
    return m_Address;
}
void ChangeOutletRequest::setAddress(org::openapitools::server::model::OutletAddressDTO const& value)
{
    m_Address = value;
}
std::vector<std::string> ChangeOutletRequest::getPhones() const
{
    return m_Phones;
}
void ChangeOutletRequest::setPhones(std::vector<std::string> const& value)
{
    m_Phones = value;
}
org::openapitools::server::model::OutletWorkingScheduleDTO ChangeOutletRequest::getWorkingSchedule() const
{
    return m_WorkingSchedule;
}
void ChangeOutletRequest::setWorkingSchedule(org::openapitools::server::model::OutletWorkingScheduleDTO const& value)
{
    m_WorkingSchedule = value;
}
std::vector<org::openapitools::server::model::OutletDeliveryRuleDTO> ChangeOutletRequest::getDeliveryRules() const
{
    return m_DeliveryRules;
}
void ChangeOutletRequest::setDeliveryRules(std::vector<org::openapitools::server::model::OutletDeliveryRuleDTO> const& value)
{
    m_DeliveryRules = value;
    m_DeliveryRulesIsSet = true;
}
bool ChangeOutletRequest::deliveryRulesIsSet() const
{
    return m_DeliveryRulesIsSet;
}
void ChangeOutletRequest::unsetDeliveryRules()
{
    m_DeliveryRulesIsSet = false;
}
int64_t ChangeOutletRequest::getStoragePeriod() const
{
    return m_StoragePeriod;
}
void ChangeOutletRequest::setStoragePeriod(int64_t const value)
{
    m_StoragePeriod = value;
    m_StoragePeriodIsSet = true;
}
bool ChangeOutletRequest::storagePeriodIsSet() const
{
    return m_StoragePeriodIsSet;
}
void ChangeOutletRequest::unsetStoragePeriod()
{
    m_StoragePeriodIsSet = false;
}


} // namespace org::openapitools::server::model

