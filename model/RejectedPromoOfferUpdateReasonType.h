/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RejectedPromoOfferUpdateReasonType.h
 *
 * Причина отклонения изменения:  * &#x60;OFFER_DOES_NOT_EXIST&#x60; — в кабинете нет товара с таким SKU.  * &#x60;OFFER_DUPLICATION&#x60; — один и тот же товар передан несколько раз.  * &#x60;OFFER_NOT_ELIGIBLE_FOR_PROMO&#x60; — товар не подходит под условия акции.  * &#x60;OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED&#x60; — товар не добавлен в акцию по техническим причинам.  * &#x60;DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED&#x60; — истек срок добавления товаров в акцию.  * &#x60;EMPTY_OLD_PRICE&#x60; — не указана зачеркнутая цена.  * &#x60;EMPTY_PROMO_PRICE&#x60; — не указана цена по акции.  * &#x60;MAX_PROMO_PRICE_EXCEEDED&#x60; — цена по акции превышает максимально возможную цену для участия в акции.  * &#x60;PROMO_PRICE_BIGGER_THAN_MAX&#x60; — цена по акции больше 95% от зачеркнутой цены.  * &#x60;PROMO_PRICE_SMALLER_THAN_MIN&#x60; — цена по акции меньше 1% от зачеркнутой цены. 
 */

#ifndef RejectedPromoOfferUpdateReasonType_H_
#define RejectedPromoOfferUpdateReasonType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Причина отклонения изменения:  * &#x60;OFFER_DOES_NOT_EXIST&#x60; — в кабинете нет товара с таким SKU.  * &#x60;OFFER_DUPLICATION&#x60; — один и тот же товар передан несколько раз.  * &#x60;OFFER_NOT_ELIGIBLE_FOR_PROMO&#x60; — товар не подходит под условия акции.  * &#x60;OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED&#x60; — товар не добавлен в акцию по техническим причинам.  * &#x60;DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED&#x60; — истек срок добавления товаров в акцию.  * &#x60;EMPTY_OLD_PRICE&#x60; — не указана зачеркнутая цена.  * &#x60;EMPTY_PROMO_PRICE&#x60; — не указана цена по акции.  * &#x60;MAX_PROMO_PRICE_EXCEEDED&#x60; — цена по акции превышает максимально возможную цену для участия в акции.  * &#x60;PROMO_PRICE_BIGGER_THAN_MAX&#x60; — цена по акции больше 95% от зачеркнутой цены.  * &#x60;PROMO_PRICE_SMALLER_THAN_MIN&#x60; — цена по акции меньше 1% от зачеркнутой цены. 
/// </summary>
class  RejectedPromoOfferUpdateReasonType 
{
public:
    RejectedPromoOfferUpdateReasonType() = default;
    explicit RejectedPromoOfferUpdateReasonType(boost::property_tree::ptree const& pt);
    virtual ~RejectedPromoOfferUpdateReasonType() = default;

    RejectedPromoOfferUpdateReasonType(const RejectedPromoOfferUpdateReasonType& other) = default; // copy constructor
    RejectedPromoOfferUpdateReasonType(RejectedPromoOfferUpdateReasonType&& other) noexcept = default; // move constructor

    RejectedPromoOfferUpdateReasonType& operator=(const RejectedPromoOfferUpdateReasonType& other) = default; // copy assignment
    RejectedPromoOfferUpdateReasonType& operator=(RejectedPromoOfferUpdateReasonType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// RejectedPromoOfferUpdateReasonType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_RejectedPromoOfferUpdateReasonTypeEnumValue;
};

std::vector<RejectedPromoOfferUpdateReasonType> createRejectedPromoOfferUpdateReasonTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<RejectedPromoOfferUpdateReasonType>(const RejectedPromoOfferUpdateReasonType& val) {
    return val.toPropertyTree();
}

template<>
inline RejectedPromoOfferUpdateReasonType fromPt<RejectedPromoOfferUpdateReasonType>(const boost::property_tree::ptree& pt) {
    RejectedPromoOfferUpdateReasonType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* RejectedPromoOfferUpdateReasonType_H_ */
