/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RejectedPromoOfferUpdateReasonType.h
 *
 * Причина отклонения изменения:  * &#x60;OFFER_DOES_NOT_EXIST&#x60; — в кабинете нет товара с таким SKU.  * &#x60;OFFER_DUPLICATION&#x60; — один и тот же товар передан несколько раз.  * &#x60;OFFER_NOT_ELIGIBLE_FOR_PROMO&#x60; — товар не подходит под условия акции.  * &#x60;OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED&#x60; — товар не добавлен в акцию по техническим причинам.  * &#x60;DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED&#x60; — истек срок добавления товаров в акцию.  * &#x60;EMPTY_OLD_PRICE&#x60; — не указана зачеркнутая цена.  * &#x60;EMPTY_PROMO_PRICE&#x60; — не указана цена по акции.  * &#x60;MAX_PROMO_PRICE_EXCEEDED&#x60; — цена по акции превышает максимально возможную цену для участия в акции.  * &#x60;PROMO_PRICE_BIGGER_THAN_MAX&#x60; — цена по акции больше 95% от зачеркнутой цены.  * &#x60;PROMO_PRICE_SMALLER_THAN_MIN&#x60; — цена по акции меньше 1% от зачеркнутой цены. 
 */

#ifndef RejectedPromoOfferUpdateReasonType_H_
#define RejectedPromoOfferUpdateReasonType_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Причина отклонения изменения:  * &#x60;OFFER_DOES_NOT_EXIST&#x60; — в кабинете нет товара с таким SKU.  * &#x60;OFFER_DUPLICATION&#x60; — один и тот же товар передан несколько раз.  * &#x60;OFFER_NOT_ELIGIBLE_FOR_PROMO&#x60; — товар не подходит под условия акции.  * &#x60;OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED&#x60; — товар не добавлен в акцию по техническим причинам.  * &#x60;DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED&#x60; — истек срок добавления товаров в акцию.  * &#x60;EMPTY_OLD_PRICE&#x60; — не указана зачеркнутая цена.  * &#x60;EMPTY_PROMO_PRICE&#x60; — не указана цена по акции.  * &#x60;MAX_PROMO_PRICE_EXCEEDED&#x60; — цена по акции превышает максимально возможную цену для участия в акции.  * &#x60;PROMO_PRICE_BIGGER_THAN_MAX&#x60; — цена по акции больше 95% от зачеркнутой цены.  * &#x60;PROMO_PRICE_SMALLER_THAN_MIN&#x60; — цена по акции меньше 1% от зачеркнутой цены. 
/// </summary>
class  RejectedPromoOfferUpdateReasonType
{
public:
    RejectedPromoOfferUpdateReasonType();
    virtual ~RejectedPromoOfferUpdateReasonType() = default;

    enum class eRejectedPromoOfferUpdateReasonType {
    // To have a valid default value.
    // Avoiding name clashes with user defined
    // enum values
    INVALID_VALUE_OPENAPI_GENERATED = 0,
    OFFER_DOES_NOT_EXIST, 
    OFFER_DUPLICATION, 
    OFFER_NOT_ELIGIBLE_FOR_PROMO, 
    OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED, 
    DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED, 
    EMPTY_OLD_PRICE, 
    EMPTY_PROMO_PRICE, 
    MAX_PROMO_PRICE_EXCEEDED, 
    PROMO_PRICE_BIGGER_THAN_MAX, 
    PROMO_PRICE_SMALLER_THAN_MIN
    };

    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const RejectedPromoOfferUpdateReasonType& rhs) const;
    bool operator!=(const RejectedPromoOfferUpdateReasonType& rhs) const;

    /////////////////////////////////////////////
    /// RejectedPromoOfferUpdateReasonType members

    RejectedPromoOfferUpdateReasonType::eRejectedPromoOfferUpdateReasonType getValue() const;
    void setValue(RejectedPromoOfferUpdateReasonType::eRejectedPromoOfferUpdateReasonType value);
    
    friend  void to_json(nlohmann::json& j, const RejectedPromoOfferUpdateReasonType& o);
    friend  void from_json(const nlohmann::json& j, RejectedPromoOfferUpdateReasonType& o);
protected:
    RejectedPromoOfferUpdateReasonType::eRejectedPromoOfferUpdateReasonType m_value = RejectedPromoOfferUpdateReasonType::eRejectedPromoOfferUpdateReasonType::INVALID_VALUE_OPENAPI_GENERATED;
};

} // namespace org::openapitools::server::model

#endif /* RejectedPromoOfferUpdateReasonType_H_ */
