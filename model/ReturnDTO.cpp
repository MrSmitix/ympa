/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ReturnDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ReturnDTO::ReturnDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_OrderId = 0L;
    m_OrderIdIsSet = false;
    m_CreationDate = "";
    m_CreationDateIsSet = false;
    m_UpdateDate = "";
    m_UpdateDateIsSet = false;
    m_RefundStatusIsSet = false;
    m_LogisticPickupPointIsSet = false;
    m_ShipmentRecipientTypeIsSet = false;
    m_ShipmentStatusIsSet = false;
    m_RefundAmount = 0L;
    m_RefundAmountIsSet = false;
    m_ReturnTypeIsSet = false;
    m_FastReturn = false;
    m_FastReturnIsSet = false;
    
}

void ReturnDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ReturnDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ReturnDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ReturnDTO" : pathPrefix;

                                             
    
    /* Items */ {
        const std::vector<org::openapitools::server::model::ReturnItemDTO>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ReturnItemDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".items") && success;
 
                i++;
            }
        }

    }
            
    return success;
}

bool ReturnDTO::operator==(const ReturnDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!orderIdIsSet() && !rhs.orderIdIsSet()) || (orderIdIsSet() && rhs.orderIdIsSet() && getOrderId() == rhs.getOrderId())) &&
    
    
    ((!creationDateIsSet() && !rhs.creationDateIsSet()) || (creationDateIsSet() && rhs.creationDateIsSet() && getCreationDate() == rhs.getCreationDate())) &&
    
    
    ((!updateDateIsSet() && !rhs.updateDateIsSet()) || (updateDateIsSet() && rhs.updateDateIsSet() && getUpdateDate() == rhs.getUpdateDate())) &&
    
    
    ((!refundStatusIsSet() && !rhs.refundStatusIsSet()) || (refundStatusIsSet() && rhs.refundStatusIsSet() && getRefundStatus() == rhs.getRefundStatus())) &&
    
    
    ((!logisticPickupPointIsSet() && !rhs.logisticPickupPointIsSet()) || (logisticPickupPointIsSet() && rhs.logisticPickupPointIsSet() && getLogisticPickupPoint() == rhs.getLogisticPickupPoint())) &&
    
    
    ((!shipmentRecipientTypeIsSet() && !rhs.shipmentRecipientTypeIsSet()) || (shipmentRecipientTypeIsSet() && rhs.shipmentRecipientTypeIsSet() && getShipmentRecipientType() == rhs.getShipmentRecipientType())) &&
    
    
    ((!shipmentStatusIsSet() && !rhs.shipmentStatusIsSet()) || (shipmentStatusIsSet() && rhs.shipmentStatusIsSet() && getShipmentStatus() == rhs.getShipmentStatus())) &&
    
    
    ((!refundAmountIsSet() && !rhs.refundAmountIsSet()) || (refundAmountIsSet() && rhs.refundAmountIsSet() && getRefundAmount() == rhs.getRefundAmount())) &&
    
    (getItems() == rhs.getItems())
     &&
    
    
    ((!returnTypeIsSet() && !rhs.returnTypeIsSet()) || (returnTypeIsSet() && rhs.returnTypeIsSet() && getReturnType() == rhs.getReturnType())) &&
    
    
    ((!fastReturnIsSet() && !rhs.fastReturnIsSet()) || (fastReturnIsSet() && rhs.fastReturnIsSet() && isFastReturn() == rhs.isFastReturn()))
    
    ;
}

bool ReturnDTO::operator!=(const ReturnDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ReturnDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.orderIdIsSet())
        j["orderId"] = o.m_OrderId;
    if(o.creationDateIsSet())
        j["creationDate"] = o.m_CreationDate;
    if(o.updateDateIsSet())
        j["updateDate"] = o.m_UpdateDate;
    if(o.refundStatusIsSet())
        j["refundStatus"] = o.m_RefundStatus;
    if(o.logisticPickupPointIsSet())
        j["logisticPickupPoint"] = o.m_LogisticPickupPoint;
    if(o.shipmentRecipientTypeIsSet())
        j["shipmentRecipientType"] = o.m_ShipmentRecipientType;
    if(o.shipmentStatusIsSet())
        j["shipmentStatus"] = o.m_ShipmentStatus;
    if(o.refundAmountIsSet())
        j["refundAmount"] = o.m_RefundAmount;
    j["items"] = o.m_Items;
    if(o.returnTypeIsSet())
        j["returnType"] = o.m_ReturnType;
    if(o.fastReturnIsSet())
        j["fastReturn"] = o.m_FastReturn;
    
}

void from_json(const nlohmann::json& j, ReturnDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("orderId") != j.end())
    {
        j.at("orderId").get_to(o.m_OrderId);
        o.m_OrderIdIsSet = true;
    } 
    if(j.find("creationDate") != j.end())
    {
        j.at("creationDate").get_to(o.m_CreationDate);
        o.m_CreationDateIsSet = true;
    } 
    if(j.find("updateDate") != j.end())
    {
        j.at("updateDate").get_to(o.m_UpdateDate);
        o.m_UpdateDateIsSet = true;
    } 
    if(j.find("refundStatus") != j.end())
    {
        j.at("refundStatus").get_to(o.m_RefundStatus);
        o.m_RefundStatusIsSet = true;
    } 
    if(j.find("logisticPickupPoint") != j.end())
    {
        j.at("logisticPickupPoint").get_to(o.m_LogisticPickupPoint);
        o.m_LogisticPickupPointIsSet = true;
    } 
    if(j.find("shipmentRecipientType") != j.end())
    {
        j.at("shipmentRecipientType").get_to(o.m_ShipmentRecipientType);
        o.m_ShipmentRecipientTypeIsSet = true;
    } 
    if(j.find("shipmentStatus") != j.end())
    {
        j.at("shipmentStatus").get_to(o.m_ShipmentStatus);
        o.m_ShipmentStatusIsSet = true;
    } 
    if(j.find("refundAmount") != j.end())
    {
        j.at("refundAmount").get_to(o.m_RefundAmount);
        o.m_RefundAmountIsSet = true;
    } 
    j.at("items").get_to(o.m_Items);
    if(j.find("returnType") != j.end())
    {
        j.at("returnType").get_to(o.m_ReturnType);
        o.m_ReturnTypeIsSet = true;
    } 
    if(j.find("fastReturn") != j.end())
    {
        j.at("fastReturn").get_to(o.m_FastReturn);
        o.m_FastReturnIsSet = true;
    } 
    
}

int64_t ReturnDTO::getId() const
{
    return m_Id;
}
void ReturnDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ReturnDTO::idIsSet() const
{
    return m_IdIsSet;
}
void ReturnDTO::unsetId()
{
    m_IdIsSet = false;
}
int64_t ReturnDTO::getOrderId() const
{
    return m_OrderId;
}
void ReturnDTO::setOrderId(int64_t const value)
{
    m_OrderId = value;
    m_OrderIdIsSet = true;
}
bool ReturnDTO::orderIdIsSet() const
{
    return m_OrderIdIsSet;
}
void ReturnDTO::unsetOrderId()
{
    m_OrderIdIsSet = false;
}
std::string ReturnDTO::getCreationDate() const
{
    return m_CreationDate;
}
void ReturnDTO::setCreationDate(std::string const& value)
{
    m_CreationDate = value;
    m_CreationDateIsSet = true;
}
bool ReturnDTO::creationDateIsSet() const
{
    return m_CreationDateIsSet;
}
void ReturnDTO::unsetCreationDate()
{
    m_CreationDateIsSet = false;
}
std::string ReturnDTO::getUpdateDate() const
{
    return m_UpdateDate;
}
void ReturnDTO::setUpdateDate(std::string const& value)
{
    m_UpdateDate = value;
    m_UpdateDateIsSet = true;
}
bool ReturnDTO::updateDateIsSet() const
{
    return m_UpdateDateIsSet;
}
void ReturnDTO::unsetUpdateDate()
{
    m_UpdateDateIsSet = false;
}
org::openapitools::server::model::RefundStatusType ReturnDTO::getRefundStatus() const
{
    return m_RefundStatus;
}
void ReturnDTO::setRefundStatus(org::openapitools::server::model::RefundStatusType const& value)
{
    m_RefundStatus = value;
    m_RefundStatusIsSet = true;
}
bool ReturnDTO::refundStatusIsSet() const
{
    return m_RefundStatusIsSet;
}
void ReturnDTO::unsetRefundStatus()
{
    m_RefundStatusIsSet = false;
}
org::openapitools::server::model::LogisticPickupPointDTO ReturnDTO::getLogisticPickupPoint() const
{
    return m_LogisticPickupPoint;
}
void ReturnDTO::setLogisticPickupPoint(org::openapitools::server::model::LogisticPickupPointDTO const& value)
{
    m_LogisticPickupPoint = value;
    m_LogisticPickupPointIsSet = true;
}
bool ReturnDTO::logisticPickupPointIsSet() const
{
    return m_LogisticPickupPointIsSet;
}
void ReturnDTO::unsetLogisticPickupPoint()
{
    m_LogisticPickupPointIsSet = false;
}
org::openapitools::server::model::RecipientType ReturnDTO::getShipmentRecipientType() const
{
    return m_ShipmentRecipientType;
}
void ReturnDTO::setShipmentRecipientType(org::openapitools::server::model::RecipientType const& value)
{
    m_ShipmentRecipientType = value;
    m_ShipmentRecipientTypeIsSet = true;
}
bool ReturnDTO::shipmentRecipientTypeIsSet() const
{
    return m_ShipmentRecipientTypeIsSet;
}
void ReturnDTO::unsetShipmentRecipientType()
{
    m_ShipmentRecipientTypeIsSet = false;
}
org::openapitools::server::model::ReturnShipmentStatusType ReturnDTO::getShipmentStatus() const
{
    return m_ShipmentStatus;
}
void ReturnDTO::setShipmentStatus(org::openapitools::server::model::ReturnShipmentStatusType const& value)
{
    m_ShipmentStatus = value;
    m_ShipmentStatusIsSet = true;
}
bool ReturnDTO::shipmentStatusIsSet() const
{
    return m_ShipmentStatusIsSet;
}
void ReturnDTO::unsetShipmentStatus()
{
    m_ShipmentStatusIsSet = false;
}
int64_t ReturnDTO::getRefundAmount() const
{
    return m_RefundAmount;
}
void ReturnDTO::setRefundAmount(int64_t const value)
{
    m_RefundAmount = value;
    m_RefundAmountIsSet = true;
}
bool ReturnDTO::refundAmountIsSet() const
{
    return m_RefundAmountIsSet;
}
void ReturnDTO::unsetRefundAmount()
{
    m_RefundAmountIsSet = false;
}
std::vector<org::openapitools::server::model::ReturnItemDTO> ReturnDTO::getItems() const
{
    return m_Items;
}
void ReturnDTO::setItems(std::vector<org::openapitools::server::model::ReturnItemDTO> const& value)
{
    m_Items = value;
}
org::openapitools::server::model::ReturnType ReturnDTO::getReturnType() const
{
    return m_ReturnType;
}
void ReturnDTO::setReturnType(org::openapitools::server::model::ReturnType const& value)
{
    m_ReturnType = value;
    m_ReturnTypeIsSet = true;
}
bool ReturnDTO::returnTypeIsSet() const
{
    return m_ReturnTypeIsSet;
}
void ReturnDTO::unsetReturnType()
{
    m_ReturnTypeIsSet = false;
}
bool ReturnDTO::isFastReturn() const
{
    return m_FastReturn;
}
void ReturnDTO::setFastReturn(bool const value)
{
    m_FastReturn = value;
    m_FastReturnIsSet = true;
}
bool ReturnDTO::fastReturnIsSet() const
{
    return m_FastReturnIsSet;
}
void ReturnDTO::unsetFastReturn()
{
    m_FastReturnIsSet = false;
}


} // namespace org::openapitools::server::model

