/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ReturnDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ReturnDTO::ReturnDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string ReturnDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void ReturnDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree ReturnDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void ReturnDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string ReturnDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void ReturnDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ReturnDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("orderId", m_OrderId);
	pt.put("creationDate", m_CreationDate);
	pt.put("updateDate", m_UpdateDate);
	if (m_LogisticPickupPoint != nullptr) {
		pt.add_child("logisticPickupPoint", m_LogisticPickupPoint->toPropertyTree());
	}
	pt.put("refundAmount", m_RefundAmount);
	// generate tree for Items
	if (!m_Items.empty()) {
		for (const auto &childEntry : m_Items) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("items", tmp_node);
		tmp_node.clear();
	}
	pt.put("fastReturn", m_FastReturn);
	return pt;
}

void ReturnDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", 0L);
	m_OrderId = pt.get("orderId", 0L);
	m_CreationDate = pt.get("creationDate", "");
	m_UpdateDate = pt.get("updateDate", "");
	if (pt.get_child_optional("logisticPickupPoint")) {
		m_LogisticPickupPoint = std::make_shared<LogisticPickupPointDTO>();
		m_LogisticPickupPoint->fromPropertyTree(pt.get_child("logisticPickupPoint"));
	}
	m_RefundAmount = pt.get("refundAmount", 0L);
	// push all items of Items into member vector
	if (pt.get_child_optional("items")) {
		for (const auto &childTree : pt.get_child("items")) {
            std::shared_ptr<ReturnItemDTO> val =
                std::make_shared<ReturnItemDTO>(childTree.second);
            m_Items.emplace_back(std::move(val));
		}
	}
	m_FastReturn = pt.get("fastReturn", false);
}

int64_t ReturnDTO::getId() const
{
    return m_Id;
}

void ReturnDTO::setId(int64_t value)
{
	m_Id = value;
}
int64_t ReturnDTO::getOrderId() const
{
    return m_OrderId;
}

void ReturnDTO::setOrderId(int64_t value)
{
	m_OrderId = value;
}
std::string ReturnDTO::getCreationDate() const
{
    return m_CreationDate;
}

void ReturnDTO::setCreationDate(std::string value)
{
	m_CreationDate = value;
}
std::string ReturnDTO::getUpdateDate() const
{
    return m_UpdateDate;
}

void ReturnDTO::setUpdateDate(std::string value)
{
	m_UpdateDate = value;
}
std::shared_ptr<RefundStatusType> ReturnDTO::getRefundStatus() const
{
    return m_RefundStatus;
}

void ReturnDTO::setRefundStatus(std::shared_ptr<RefundStatusType> value)
{
	m_RefundStatus = value;
}
std::shared_ptr<LogisticPickupPointDTO> ReturnDTO::getLogisticPickupPoint() const
{
    return m_LogisticPickupPoint;
}

void ReturnDTO::setLogisticPickupPoint(std::shared_ptr<LogisticPickupPointDTO> value)
{
	m_LogisticPickupPoint = value;
}
std::shared_ptr<RecipientType> ReturnDTO::getShipmentRecipientType() const
{
    return m_ShipmentRecipientType;
}

void ReturnDTO::setShipmentRecipientType(std::shared_ptr<RecipientType> value)
{
	m_ShipmentRecipientType = value;
}
std::shared_ptr<ReturnShipmentStatusType> ReturnDTO::getShipmentStatus() const
{
    return m_ShipmentStatus;
}

void ReturnDTO::setShipmentStatus(std::shared_ptr<ReturnShipmentStatusType> value)
{
	m_ShipmentStatus = value;
}
int64_t ReturnDTO::getRefundAmount() const
{
    return m_RefundAmount;
}

void ReturnDTO::setRefundAmount(int64_t value)
{
	m_RefundAmount = value;
}
std::vector<std::shared_ptr<ReturnItemDTO>> ReturnDTO::getItems() const
{
    return m_Items;
}

void ReturnDTO::setItems(std::vector<std::shared_ptr<ReturnItemDTO>> value)
{
	m_Items = value;
}
std::shared_ptr<ReturnType> ReturnDTO::getReturnType() const
{
    return m_ReturnType;
}

void ReturnDTO::setReturnType(std::shared_ptr<ReturnType> value)
{
	m_ReturnType = value;
}
bool ReturnDTO::isFastReturn() const
{
    return m_FastReturn;
}

void ReturnDTO::setFastReturn(bool value)
{
	m_FastReturn = value;
}

std::vector<ReturnDTO> createReturnDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ReturnDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(ReturnDTO(child.second));
    }

    return vec;
}

}
}
}
}

