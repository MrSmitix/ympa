/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ReturnDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ReturnDTO::ReturnDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ReturnDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ReturnDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ReturnDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("orderId", m_OrderId);
	pt.put("creationDate", m_CreationDate);
	pt.put("updateDate", m_UpdateDate);
	pt.add_child("logisticPickupPoint", m_LogisticPickupPoint.toPropertyTree());
	pt.put("refundAmount", m_RefundAmount);
	// generate tree for Items
    tmp_node.clear();
	if (!m_Items.empty()) {
        tmp_node = toPt(m_Items);
		pt.add_child("items", tmp_node);
		tmp_node.clear();
	}
	pt.put("fastReturn", m_FastReturn);
	return pt;
}

void ReturnDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", 0L);
	m_OrderId = pt.get("orderId", 0L);
	m_CreationDate = pt.get("creationDate", "");
	m_UpdateDate = pt.get("updateDate", "");
	if (pt.get_child_optional("logisticPickupPoint")) {
        m_LogisticPickupPoint = fromPt<LogisticPickupPointDTO>(pt.get_child("logisticPickupPoint"));
	}
	m_RefundAmount = pt.get("refundAmount", 0L);
	// push all items of Items into member
	if (pt.get_child_optional("items")) {
        m_Items = fromPt<std::vector<ReturnItemDTO>>(pt.get_child("items"));
	}
	m_FastReturn = pt.get("fastReturn", false);
}

int64_t ReturnDTO::getId() const
{
    return m_Id;
}

void ReturnDTO::setId(int64_t value)
{
    m_Id = value;
}


int64_t ReturnDTO::getOrderId() const
{
    return m_OrderId;
}

void ReturnDTO::setOrderId(int64_t value)
{
    m_OrderId = value;
}


std::string ReturnDTO::getCreationDate() const
{
    return m_CreationDate;
}

void ReturnDTO::setCreationDate(std::string value)
{
    m_CreationDate = value;
}


std::string ReturnDTO::getUpdateDate() const
{
    return m_UpdateDate;
}

void ReturnDTO::setUpdateDate(std::string value)
{
    m_UpdateDate = value;
}


RefundStatusType ReturnDTO::getRefundStatus() const
{
    return m_RefundStatus;
}

void ReturnDTO::setRefundStatus(RefundStatusType value)
{
    m_RefundStatus = value;
}


LogisticPickupPointDTO ReturnDTO::getLogisticPickupPoint() const
{
    return m_LogisticPickupPoint;
}

void ReturnDTO::setLogisticPickupPoint(LogisticPickupPointDTO value)
{
    m_LogisticPickupPoint = value;
}


RecipientType ReturnDTO::getShipmentRecipientType() const
{
    return m_ShipmentRecipientType;
}

void ReturnDTO::setShipmentRecipientType(RecipientType value)
{
    m_ShipmentRecipientType = value;
}


ReturnShipmentStatusType ReturnDTO::getShipmentStatus() const
{
    return m_ShipmentStatus;
}

void ReturnDTO::setShipmentStatus(ReturnShipmentStatusType value)
{
    m_ShipmentStatus = value;
}


int64_t ReturnDTO::getRefundAmount() const
{
    return m_RefundAmount;
}

void ReturnDTO::setRefundAmount(int64_t value)
{
    m_RefundAmount = value;
}


std::vector<ReturnItemDTO> ReturnDTO::getItems() const
{
    return m_Items;
}

void ReturnDTO::setItems(std::vector<ReturnItemDTO> value)
{
    m_Items = value;
}


ReturnType ReturnDTO::getReturnType() const
{
    return m_ReturnType;
}

void ReturnDTO::setReturnType(ReturnType value)
{
    m_ReturnType = value;
}


bool ReturnDTO::isFastReturn() const
{
    return m_FastReturn;
}

void ReturnDTO::setFastReturn(bool value)
{
    m_FastReturn = value;
}



std::vector<ReturnDTO> createReturnDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ReturnDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(ReturnDTO(child.second));
    }

    return vec;
}

}
}
}
}

