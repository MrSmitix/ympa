/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OfferRecommendationDTO.h
 *
 * Информация о состоянии цен и рекомендации. 
 */

#ifndef OfferRecommendationDTO_H_
#define OfferRecommendationDTO_H_


#include "OfferForRecommendationDTO.h"
#include "OfferRecommendationInfoDTO.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о состоянии цен и рекомендации. 
/// </summary>
class  OfferRecommendationDTO
{
public:
    OfferRecommendationDTO();
    virtual ~OfferRecommendationDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OfferRecommendationDTO& rhs) const;
    bool operator!=(const OfferRecommendationDTO& rhs) const;

    /////////////////////////////////////////////
    /// OfferRecommendationDTO members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OfferForRecommendationDTO getOffer() const;
    void setOffer(org::openapitools::server::model::OfferForRecommendationDTO const& value);
    bool offerIsSet() const;
    void unsetOffer();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OfferRecommendationInfoDTO getRecommendation() const;
    void setRecommendation(org::openapitools::server::model::OfferRecommendationInfoDTO const& value);
    bool recommendationIsSet() const;
    void unsetRecommendation();

    friend  void to_json(nlohmann::json& j, const OfferRecommendationDTO& o);
    friend  void from_json(const nlohmann::json& j, OfferRecommendationDTO& o);
protected:
    org::openapitools::server::model::OfferForRecommendationDTO m_Offer;
    bool m_OfferIsSet;
    org::openapitools::server::model::OfferRecommendationInfoDTO m_Recommendation;
    bool m_RecommendationIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OfferRecommendationDTO_H_ */
