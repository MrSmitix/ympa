/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedPublicationDTO.h
 *
 * Информация о последней публикации предложений из прайс-листа на Маркете.
 */

#ifndef FeedPublicationDTO_H_
#define FeedPublicationDTO_H_



#include "FeedStatusType.h"
#include "FeedPublicationFullDTO.h"
#include "FeedPublicationPriceAndStockUpdateDTO.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о последней публикации предложений из прайс-листа на Маркете.
/// </summary>
class  FeedPublicationDTO 
{
public:
    FeedPublicationDTO() = default;
    explicit FeedPublicationDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedPublicationDTO() = default;

    FeedPublicationDTO(const FeedPublicationDTO& other) = default; // copy constructor
    FeedPublicationDTO(FeedPublicationDTO&& other) noexcept = default; // move constructor

    FeedPublicationDTO& operator=(const FeedPublicationDTO& other) = default; // copy assignment
    FeedPublicationDTO& operator=(FeedPublicationDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FeedPublicationDTO members

    /// <summary>
    /// 
    /// </summary>
    FeedStatusType getStatus() const;
    void setStatus(FeedStatusType value);

    /// <summary>
    /// 
    /// </summary>
    FeedPublicationFullDTO getFull() const;
    void setFull(FeedPublicationFullDTO value);

    /// <summary>
    /// 
    /// </summary>
    FeedPublicationPriceAndStockUpdateDTO getPriceAndStockUpdate() const;
    void setPriceAndStockUpdate(FeedPublicationPriceAndStockUpdateDTO value);

protected:
    FeedStatusType m_Status = FeedStatusType{};
    FeedPublicationFullDTO m_Full;
    FeedPublicationPriceAndStockUpdateDTO m_PriceAndStockUpdate;
};

std::vector<FeedPublicationDTO> createFeedPublicationDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FeedPublicationDTO>(const FeedPublicationDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FeedPublicationDTO fromPt<FeedPublicationDTO>(const boost::property_tree::ptree& pt) {
    FeedPublicationDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FeedPublicationDTO_H_ */
