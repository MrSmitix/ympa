/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CalculateTariffsRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CalculateTariffsRequest::CalculateTariffsRequest()
{
    
}

void CalculateTariffsRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CalculateTariffsRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CalculateTariffsRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CalculateTariffsRequest" : pathPrefix;

        
    if (!m_Parameters.validate(msg, _pathPrefix + ".parameters")) {
        msg << _pathPrefix << ": Parameters is invalid;";
        success = false;
    }     
    
    /* Offers */ {
        const std::vector<org::openapitools::server::model::CalculateTariffsOfferDTO>& value = m_Offers;
        const std::string currentValuePath = _pathPrefix + ".offers";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 200)
        {
            success = false;
            msg << currentValuePath << ": must have at most 200 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::CalculateTariffsOfferDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".offers") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool CalculateTariffsRequest::operator==(const CalculateTariffsRequest& rhs) const
{
    return
    
    
    (getParameters() == rhs.getParameters())
     &&
    
    (getOffers() == rhs.getOffers())
    
    
    ;
}

bool CalculateTariffsRequest::operator!=(const CalculateTariffsRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CalculateTariffsRequest& o)
{
    j = nlohmann::json::object();
    j["parameters"] = o.m_Parameters;
    j["offers"] = o.m_Offers;
    
}

void from_json(const nlohmann::json& j, CalculateTariffsRequest& o)
{
    j.at("parameters").get_to(o.m_Parameters);
    j.at("offers").get_to(o.m_Offers);
    
}

org::openapitools::server::model::CalculateTariffsParametersDTO CalculateTariffsRequest::getParameters() const
{
    return m_Parameters;
}
void CalculateTariffsRequest::setParameters(org::openapitools::server::model::CalculateTariffsParametersDTO const& value)
{
    m_Parameters = value;
}
std::vector<org::openapitools::server::model::CalculateTariffsOfferDTO> CalculateTariffsRequest::getOffers() const
{
    return m_Offers;
}
void CalculateTariffsRequest::setOffers(std::vector<org::openapitools::server::model::CalculateTariffsOfferDTO> const& value)
{
    m_Offers = value;
}


} // namespace org::openapitools::server::model

