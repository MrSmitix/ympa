/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TariffDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TariffDTO::TariffDTO()
{
    m_Percent = 0.0;
    m_PercentIsSet = false;
    m_Amount = 0.0;
    
}

void TariffDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TariffDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TariffDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TariffDTO" : pathPrefix;

                     
    
    /* Parameters */ {
        const std::vector<org::openapitools::server::model::TariffParameterDTO>& value = m_Parameters;
        const std::string currentValuePath = _pathPrefix + ".parameters";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::TariffParameterDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".parameters") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool TariffDTO::operator==(const TariffDTO& rhs) const
{
    return
    
    
    (getType() == rhs.getType())
     &&
    
    
    ((!percentIsSet() && !rhs.percentIsSet()) || (percentIsSet() && rhs.percentIsSet() && getPercent() == rhs.getPercent())) &&
    
    (getAmount() == rhs.getAmount())
     &&
    
    (getParameters() == rhs.getParameters())
    
    
    ;
}

bool TariffDTO::operator!=(const TariffDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TariffDTO& o)
{
    j = nlohmann::json::object();
    j["type"] = o.m_Type;
    if(o.percentIsSet())
        j["percent"] = o.m_Percent;
    j["amount"] = o.m_Amount;
    j["parameters"] = o.m_Parameters;
    
}

void from_json(const nlohmann::json& j, TariffDTO& o)
{
    j.at("type").get_to(o.m_Type);
    if(j.find("percent") != j.end())
    {
        j.at("percent").get_to(o.m_Percent);
        o.m_PercentIsSet = true;
    } 
    j.at("amount").get_to(o.m_Amount);
    j.at("parameters").get_to(o.m_Parameters);
    
}

org::openapitools::server::model::TariffType TariffDTO::getType() const
{
    return m_Type;
}
void TariffDTO::setType(org::openapitools::server::model::TariffType const& value)
{
    m_Type = value;
}
double TariffDTO::getPercent() const
{
    return m_Percent;
}
void TariffDTO::setPercent(double const value)
{
    m_Percent = value;
    m_PercentIsSet = true;
}
bool TariffDTO::percentIsSet() const
{
    return m_PercentIsSet;
}
void TariffDTO::unsetPercent()
{
    m_PercentIsSet = false;
}
double TariffDTO::getAmount() const
{
    return m_Amount;
}
void TariffDTO::setAmount(double const value)
{
    m_Amount = value;
}
std::vector<org::openapitools::server::model::TariffParameterDTO> TariffDTO::getParameters() const
{
    return m_Parameters;
}
void TariffDTO::setParameters(std::vector<org::openapitools::server::model::TariffParameterDTO> const& value)
{
    m_Parameters = value;
}


} // namespace org::openapitools::server::model

