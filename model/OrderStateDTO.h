/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderStateDTO.h
 *
 * Информация по заказу.
 */

#ifndef OrderStateDTO_H_
#define OrderStateDTO_H_



#include "OrderStatusType.h"
#include "OrderSubstatusType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация по заказу.
/// </summary>
class  OrderStateDTO 
{
public:
    OrderStateDTO() = default;
    explicit OrderStateDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderStateDTO() = default;

    OrderStateDTO(const OrderStateDTO& other) = default; // copy constructor
    OrderStateDTO(OrderStateDTO&& other) noexcept = default; // move constructor

    OrderStateDTO& operator=(const OrderStateDTO& other) = default; // copy assignment
    OrderStateDTO& operator=(OrderStateDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrderStateDTO members

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    OrderStatusType getStatus() const;
    void setStatus(OrderStatusType value);

    /// <summary>
    /// 
    /// </summary>
    OrderSubstatusType getSubstatus() const;
    void setSubstatus(OrderSubstatusType value);

protected:
    int64_t m_Id = 0L;
    OrderStatusType m_Status = OrderStatusType{};
    OrderSubstatusType m_Substatus = OrderSubstatusType{};
};

std::vector<OrderStateDTO> createOrderStateDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderStateDTO>(const OrderStateDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrderStateDTO fromPt<OrderStateDTO>(const boost::property_tree::ptree& pt) {
    OrderStateDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderStateDTO_H_ */
