/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FeedIndexLogsResultDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FeedIndexLogsResultDTO::FeedIndexLogsResultDTO()
{
    m_FeedIsSet = false;
    m_Total = 0L;
    m_TotalIsSet = false;
    
}

void FeedIndexLogsResultDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FeedIndexLogsResultDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FeedIndexLogsResultDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FeedIndexLogsResultDTO" : pathPrefix;

             
    
    /* IndexLogRecords */ {
        const std::vector<org::openapitools::server::model::FeedIndexLogsRecordDTO>& value = m_IndexLogRecords;
        const std::string currentValuePath = _pathPrefix + ".indexLogRecords";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::FeedIndexLogsRecordDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".indexLogRecords") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool FeedIndexLogsResultDTO::operator==(const FeedIndexLogsResultDTO& rhs) const
{
    return
    
    
    
    ((!feedIsSet() && !rhs.feedIsSet()) || (feedIsSet() && rhs.feedIsSet() && getFeed() == rhs.getFeed())) &&
    
    (getIndexLogRecords() == rhs.getIndexLogRecords())
     &&
    
    
    ((!totalIsSet() && !rhs.totalIsSet()) || (totalIsSet() && rhs.totalIsSet() && getTotal() == rhs.getTotal()))
    
    ;
}

bool FeedIndexLogsResultDTO::operator!=(const FeedIndexLogsResultDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FeedIndexLogsResultDTO& o)
{
    j = nlohmann::json::object();
    if(o.feedIsSet())
        j["feed"] = o.m_Feed;
    j["indexLogRecords"] = o.m_IndexLogRecords;
    if(o.totalIsSet())
        j["total"] = o.m_Total;
    
}

void from_json(const nlohmann::json& j, FeedIndexLogsResultDTO& o)
{
    if(j.find("feed") != j.end())
    {
        j.at("feed").get_to(o.m_Feed);
        o.m_FeedIsSet = true;
    } 
    j.at("indexLogRecords").get_to(o.m_IndexLogRecords);
    if(j.find("total") != j.end())
    {
        j.at("total").get_to(o.m_Total);
        o.m_TotalIsSet = true;
    } 
    
}

org::openapitools::server::model::FeedIndexLogsFeedDTO FeedIndexLogsResultDTO::getFeed() const
{
    return m_Feed;
}
void FeedIndexLogsResultDTO::setFeed(org::openapitools::server::model::FeedIndexLogsFeedDTO const& value)
{
    m_Feed = value;
    m_FeedIsSet = true;
}
bool FeedIndexLogsResultDTO::feedIsSet() const
{
    return m_FeedIsSet;
}
void FeedIndexLogsResultDTO::unsetFeed()
{
    m_FeedIsSet = false;
}
std::vector<org::openapitools::server::model::FeedIndexLogsRecordDTO> FeedIndexLogsResultDTO::getIndexLogRecords() const
{
    return m_IndexLogRecords;
}
void FeedIndexLogsResultDTO::setIndexLogRecords(std::vector<org::openapitools::server::model::FeedIndexLogsRecordDTO> const& value)
{
    m_IndexLogRecords = value;
}
int64_t FeedIndexLogsResultDTO::getTotal() const
{
    return m_Total;
}
void FeedIndexLogsResultDTO::setTotal(int64_t const value)
{
    m_Total = value;
    m_TotalIsSet = true;
}
bool FeedIndexLogsResultDTO::totalIsSet() const
{
    return m_TotalIsSet;
}
void FeedIndexLogsResultDTO::unsetTotal()
{
    m_TotalIsSet = false;
}


} // namespace org::openapitools::server::model

