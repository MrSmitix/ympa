/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetPromoDTO.h
 *
 * Информация об акции.
 */

#ifndef GetPromoDTO_H_
#define GetPromoDTO_H_



#include "PromoPeriodDTO.h"
#include "GetPromoAssortmentInfoDTO.h"
#include "GetPromoMechanicsInfoDTO.h"
#include "GetPromoBestsellerInfoDTO.h"
#include <string>
#include "GetPromoConstraintsDTO.h"
#include "ChannelType.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация об акции.
/// </summary>
class  GetPromoDTO 
{
public:
    GetPromoDTO() = default;
    explicit GetPromoDTO(boost::property_tree::ptree const& pt);
    virtual ~GetPromoDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// GetPromoDTO members

    /// <summary>
    /// Идентификатор акции.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Название акции.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PromoPeriodDTO> getPeriod() const;
    void setPeriod(std::shared_ptr<PromoPeriodDTO> value);

    /// <summary>
    /// Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением &#x60;true&#x60;, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением &#x60;false&#x60;.  Для прошедших акций всегда возвращается со значением &#x60;true&#x60;.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
    /// </summary>
    bool isParticipating() const;
    void setParticipating(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetPromoAssortmentInfoDTO> getAssortmentInfo() const;
    void setAssortmentInfo(std::shared_ptr<GetPromoAssortmentInfoDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetPromoMechanicsInfoDTO> getMechanicsInfo() const;
    void setMechanicsInfo(std::shared_ptr<GetPromoMechanicsInfoDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetPromoBestsellerInfoDTO> getBestsellerInfo() const;
    void setBestsellerInfo(std::shared_ptr<GetPromoBestsellerInfoDTO> value);

    /// <summary>
    /// Список каналов продвижения товаров.
    /// </summary>
    std::vector<std::shared_ptr<ChannelType>> getChannels() const;
    void setChannels(std::vector<std::shared_ptr<ChannelType>> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetPromoConstraintsDTO> getConstraints() const;
    void setConstraints(std::shared_ptr<GetPromoConstraintsDTO> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Id = "";
    std::string m_Name = "";
    std::shared_ptr<PromoPeriodDTO> m_Period;
    bool m_Participating = false;
    std::shared_ptr<GetPromoAssortmentInfoDTO> m_AssortmentInfo;
    std::shared_ptr<GetPromoMechanicsInfoDTO> m_MechanicsInfo;
    std::shared_ptr<GetPromoBestsellerInfoDTO> m_BestsellerInfo;
    std::vector<std::shared_ptr<ChannelType>> m_Channels;
    std::shared_ptr<GetPromoConstraintsDTO> m_Constraints;
};

std::vector<GetPromoDTO> createGetPromoDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* GetPromoDTO_H_ */
