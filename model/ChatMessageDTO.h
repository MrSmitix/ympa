/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatMessageDTO.h
 *
 * Информация о сообщениях.
 */

#ifndef ChatMessageDTO_H_
#define ChatMessageDTO_H_



#include "ChatMessagePayloadDTO.h"
#include "ChatMessageSenderType.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о сообщениях.
/// </summary>
class  ChatMessageDTO 
{
public:
    ChatMessageDTO() = default;
    explicit ChatMessageDTO(boost::property_tree::ptree const& pt);
    virtual ~ChatMessageDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// ChatMessageDTO members

    /// <summary>
    /// Идентификатор сообщения.
    /// </summary>
    int64_t getMessageId() const;
    void setMessageId(int64_t value);

    /// <summary>
    /// Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ChatMessageSenderType> getSender() const;
    void setSender(std::shared_ptr<ChatMessageSenderType> value);

    /// <summary>
    /// Текст сообщения.  Необязательный параметр, если возвращается параметр &#x60;payload&#x60;. 
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string value);

    /// <summary>
    /// Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр &#x60;message&#x60;. 
    /// </summary>
    std::vector<std::shared_ptr<ChatMessagePayloadDTO>> getPayload() const;
    void setPayload(std::vector<std::shared_ptr<ChatMessagePayloadDTO>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_MessageId = 0L;
    std::string m_CreatedAt = "";
    std::shared_ptr<ChatMessageSenderType> m_Sender = std::make_shared<ChatMessageSenderType>();
    std::string m_Message = "";
    std::vector<std::shared_ptr<ChatMessagePayloadDTO>> m_Payload;
};

std::vector<ChatMessageDTO> createChatMessageDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* ChatMessageDTO_H_ */
