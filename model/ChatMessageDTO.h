/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ChatMessageDTO.h
 *
 * Информация о сообщениях.
 */

#ifndef ChatMessageDTO_H_
#define ChatMessageDTO_H_


#include "ChatMessagePayloadDTO.h"
#include "ChatMessageSenderType.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о сообщениях.
/// </summary>
class  ChatMessageDTO
{
public:
    ChatMessageDTO();
    virtual ~ChatMessageDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ChatMessageDTO& rhs) const;
    bool operator!=(const ChatMessageDTO& rhs) const;

    /////////////////////////////////////////////
    /// ChatMessageDTO members

    /// <summary>
    /// Идентификатор сообщения.
    /// </summary>
    int64_t getMessageId() const;
    void setMessageId(int64_t const value);
    /// <summary>
    /// Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ChatMessageSenderType getSender() const;
    void setSender(org::openapitools::server::model::ChatMessageSenderType const& value);
    /// <summary>
    /// Текст сообщения.  Необязательный параметр, если возвращается параметр &#x60;payload&#x60;. 
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string const& value);
    bool messageIsSet() const;
    void unsetMessage();
    /// <summary>
    /// Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр &#x60;message&#x60;. 
    /// </summary>
    std::vector<org::openapitools::server::model::ChatMessagePayloadDTO> getPayload() const;
    void setPayload(std::vector<org::openapitools::server::model::ChatMessagePayloadDTO> const& value);
    bool payloadIsSet() const;
    void unsetPayload();

    friend  void to_json(nlohmann::json& j, const ChatMessageDTO& o);
    friend  void from_json(const nlohmann::json& j, ChatMessageDTO& o);
protected:
    int64_t m_MessageId;

    std::string m_CreatedAt;

    org::openapitools::server::model::ChatMessageSenderType m_Sender;

    std::string m_Message;
    bool m_MessageIsSet;
    std::vector<org::openapitools::server::model::ChatMessagePayloadDTO> m_Payload;
    bool m_PayloadIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ChatMessageDTO_H_ */
