/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatMessageDTO.h
 *
 * Информация о сообщениях.
 */

#ifndef ChatMessageDTO_H_
#define ChatMessageDTO_H_



#include "ChatMessagePayloadDTO.h"
#include "ChatMessageSenderType.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о сообщениях.
/// </summary>
class  ChatMessageDTO 
{
public:
    ChatMessageDTO() = default;
    explicit ChatMessageDTO(boost::property_tree::ptree const& pt);
    virtual ~ChatMessageDTO() = default;

    ChatMessageDTO(const ChatMessageDTO& other) = default; // copy constructor
    ChatMessageDTO(ChatMessageDTO&& other) noexcept = default; // move constructor

    ChatMessageDTO& operator=(const ChatMessageDTO& other) = default; // copy assignment
    ChatMessageDTO& operator=(ChatMessageDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ChatMessageDTO members

    /// <summary>
    /// Идентификатор сообщения.
    /// </summary>
    int64_t getMessageId() const;
    void setMessageId(int64_t value);

    /// <summary>
    /// Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ChatMessageSenderType getSender() const;
    void setSender(ChatMessageSenderType value);

    /// <summary>
    /// Текст сообщения.  Необязательный параметр, если возвращается параметр &#x60;payload&#x60;. 
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string value);

    /// <summary>
    /// Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр &#x60;message&#x60;. 
    /// </summary>
    std::vector<ChatMessagePayloadDTO> getPayload() const;
    void setPayload(std::vector<ChatMessagePayloadDTO> value);

protected:
    int64_t m_MessageId = 0L;
    std::string m_CreatedAt = "";
    ChatMessageSenderType m_Sender = ChatMessageSenderType{};
    std::string m_Message = "";
    std::vector<ChatMessagePayloadDTO> m_Payload;
};

std::vector<ChatMessageDTO> createChatMessageDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ChatMessageDTO>(const ChatMessageDTO& val) {
    return val.toPropertyTree();
}

template<>
inline ChatMessageDTO fromPt<ChatMessageDTO>(const boost::property_tree::ptree& pt) {
    ChatMessageDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ChatMessageDTO_H_ */
