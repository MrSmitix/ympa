/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GetChatInfoDTO.h
 *
 * Информация о чатах.
 */

#ifndef GetChatInfoDTO_H_
#define GetChatInfoDTO_H_


#include <string>
#include "ChatType.h"
#include "ChatStatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о чатах.
/// </summary>
class  GetChatInfoDTO
{
public:
    GetChatInfoDTO();
    virtual ~GetChatInfoDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GetChatInfoDTO& rhs) const;
    bool operator!=(const GetChatInfoDTO& rhs) const;

    /////////////////////////////////////////////
    /// GetChatInfoDTO members

    /// <summary>
    /// Идентификатор чата.
    /// </summary>
    int64_t getChatId() const;
    void setChatId(int64_t const value);
    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getOrderId() const;
    void setOrderId(int64_t const value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ChatType getType() const;
    void setType(org::openapitools::server::model::ChatType const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ChatStatusType getStatus() const;
    void setStatus(org::openapitools::server::model::ChatStatusType const& value);
    /// <summary>
    /// Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string const& value);
    /// <summary>
    /// Дата и время последнего сообщения в чате.
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string const& value);

    friend  void to_json(nlohmann::json& j, const GetChatInfoDTO& o);
    friend  void from_json(const nlohmann::json& j, GetChatInfoDTO& o);
protected:
    int64_t m_ChatId;

    int64_t m_OrderId;

    org::openapitools::server::model::ChatType m_Type;

    org::openapitools::server::model::ChatStatusType m_Status;

    std::string m_CreatedAt;

    std::string m_UpdatedAt;

    
};

} // namespace org::openapitools::server::model

#endif /* GetChatInfoDTO_H_ */
