/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CampaignSettingsLocalRegionDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CampaignSettingsLocalRegionDTO::CampaignSettingsLocalRegionDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_TypeIsSet = false;
    m_DeliveryOptionsSourceIsSet = false;
    m_DeliveryIsSet = false;
    
}

void CampaignSettingsLocalRegionDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CampaignSettingsLocalRegionDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CampaignSettingsLocalRegionDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CampaignSettingsLocalRegionDTO" : pathPrefix;

                        
    return success;
}

bool CampaignSettingsLocalRegionDTO::operator==(const CampaignSettingsLocalRegionDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!deliveryOptionsSourceIsSet() && !rhs.deliveryOptionsSourceIsSet()) || (deliveryOptionsSourceIsSet() && rhs.deliveryOptionsSourceIsSet() && getDeliveryOptionsSource() == rhs.getDeliveryOptionsSource())) &&
    
    
    ((!deliveryIsSet() && !rhs.deliveryIsSet()) || (deliveryIsSet() && rhs.deliveryIsSet() && getDelivery() == rhs.getDelivery()))
    
    ;
}

bool CampaignSettingsLocalRegionDTO::operator!=(const CampaignSettingsLocalRegionDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CampaignSettingsLocalRegionDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.deliveryOptionsSourceIsSet())
        j["deliveryOptionsSource"] = o.m_DeliveryOptionsSource;
    if(o.deliveryIsSet())
        j["delivery"] = o.m_Delivery;
    
}

void from_json(const nlohmann::json& j, CampaignSettingsLocalRegionDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("deliveryOptionsSource") != j.end())
    {
        j.at("deliveryOptionsSource").get_to(o.m_DeliveryOptionsSource);
        o.m_DeliveryOptionsSourceIsSet = true;
    } 
    if(j.find("delivery") != j.end())
    {
        j.at("delivery").get_to(o.m_Delivery);
        o.m_DeliveryIsSet = true;
    } 
    
}

int64_t CampaignSettingsLocalRegionDTO::getId() const
{
    return m_Id;
}
void CampaignSettingsLocalRegionDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool CampaignSettingsLocalRegionDTO::idIsSet() const
{
    return m_IdIsSet;
}
void CampaignSettingsLocalRegionDTO::unsetId()
{
    m_IdIsSet = false;
}
std::string CampaignSettingsLocalRegionDTO::getName() const
{
    return m_Name;
}
void CampaignSettingsLocalRegionDTO::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool CampaignSettingsLocalRegionDTO::nameIsSet() const
{
    return m_NameIsSet;
}
void CampaignSettingsLocalRegionDTO::unsetName()
{
    m_NameIsSet = false;
}
org::openapitools::server::model::RegionType CampaignSettingsLocalRegionDTO::getType() const
{
    return m_Type;
}
void CampaignSettingsLocalRegionDTO::setType(org::openapitools::server::model::RegionType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool CampaignSettingsLocalRegionDTO::typeIsSet() const
{
    return m_TypeIsSet;
}
void CampaignSettingsLocalRegionDTO::unsetType()
{
    m_TypeIsSet = false;
}
org::openapitools::server::model::CampaignSettingsScheduleSourceType CampaignSettingsLocalRegionDTO::getDeliveryOptionsSource() const
{
    return m_DeliveryOptionsSource;
}
void CampaignSettingsLocalRegionDTO::setDeliveryOptionsSource(org::openapitools::server::model::CampaignSettingsScheduleSourceType const& value)
{
    m_DeliveryOptionsSource = value;
    m_DeliveryOptionsSourceIsSet = true;
}
bool CampaignSettingsLocalRegionDTO::deliveryOptionsSourceIsSet() const
{
    return m_DeliveryOptionsSourceIsSet;
}
void CampaignSettingsLocalRegionDTO::unsetDeliveryOptionsSource()
{
    m_DeliveryOptionsSourceIsSet = false;
}
org::openapitools::server::model::CampaignSettingsDeliveryDTO CampaignSettingsLocalRegionDTO::getDelivery() const
{
    return m_Delivery;
}
void CampaignSettingsLocalRegionDTO::setDelivery(org::openapitools::server::model::CampaignSettingsDeliveryDTO const& value)
{
    m_Delivery = value;
    m_DeliveryIsSet = true;
}
bool CampaignSettingsLocalRegionDTO::deliveryIsSet() const
{
    return m_DeliveryIsSet;
}
void CampaignSettingsLocalRegionDTO::unsetDelivery()
{
    m_DeliveryIsSet = false;
}


} // namespace org::openapitools::server::model

