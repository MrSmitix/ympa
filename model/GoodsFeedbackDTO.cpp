/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GoodsFeedbackDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

GoodsFeedbackDTO::GoodsFeedbackDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string GoodsFeedbackDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void GoodsFeedbackDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree GoodsFeedbackDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("feedbackId", m_FeedbackId);
	pt.put("createdAt", m_CreatedAt);
	pt.put("needReaction", m_NeedReaction);
	pt.add_child("identifiers", m_Identifiers.toPropertyTree());
	pt.put("author", m_Author);
	pt.add_child("description", m_Description.toPropertyTree());
	pt.add_child("media", m_Media.toPropertyTree());
	pt.add_child("statistics", m_Statistics.toPropertyTree());
	return pt;
}

void GoodsFeedbackDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_FeedbackId = pt.get("feedbackId", 0L);
	m_CreatedAt = pt.get("createdAt", "");
	m_NeedReaction = pt.get("needReaction", false);
	if (pt.get_child_optional("identifiers")) {
        m_Identifiers = fromPt<GoodsFeedbackIdentifiersDTO>(pt.get_child("identifiers"));
	}
	m_Author = pt.get("author", "");
	if (pt.get_child_optional("description")) {
        m_Description = fromPt<GoodsFeedbackDescriptionDTO>(pt.get_child("description"));
	}
	if (pt.get_child_optional("media")) {
        m_Media = fromPt<GoodsFeedbackMediaDTO>(pt.get_child("media"));
	}
	if (pt.get_child_optional("statistics")) {
        m_Statistics = fromPt<GoodsFeedbackStatisticsDTO>(pt.get_child("statistics"));
	}
}

int64_t GoodsFeedbackDTO::getFeedbackId() const
{
    return m_FeedbackId;
}

void GoodsFeedbackDTO::setFeedbackId(int64_t value)
{
    m_FeedbackId = value;
}


std::string GoodsFeedbackDTO::getCreatedAt() const
{
    return m_CreatedAt;
}

void GoodsFeedbackDTO::setCreatedAt(std::string value)
{
    m_CreatedAt = value;
}


bool GoodsFeedbackDTO::isNeedReaction() const
{
    return m_NeedReaction;
}

void GoodsFeedbackDTO::setNeedReaction(bool value)
{
    m_NeedReaction = value;
}


GoodsFeedbackIdentifiersDTO GoodsFeedbackDTO::getIdentifiers() const
{
    return m_Identifiers;
}

void GoodsFeedbackDTO::setIdentifiers(GoodsFeedbackIdentifiersDTO value)
{
    m_Identifiers = value;
}


std::string GoodsFeedbackDTO::getAuthor() const
{
    return m_Author;
}

void GoodsFeedbackDTO::setAuthor(std::string value)
{
    m_Author = value;
}


GoodsFeedbackDescriptionDTO GoodsFeedbackDTO::getDescription() const
{
    return m_Description;
}

void GoodsFeedbackDTO::setDescription(GoodsFeedbackDescriptionDTO value)
{
    m_Description = value;
}


GoodsFeedbackMediaDTO GoodsFeedbackDTO::getMedia() const
{
    return m_Media;
}

void GoodsFeedbackDTO::setMedia(GoodsFeedbackMediaDTO value)
{
    m_Media = value;
}


GoodsFeedbackStatisticsDTO GoodsFeedbackDTO::getStatistics() const
{
    return m_Statistics;
}

void GoodsFeedbackDTO::setStatistics(GoodsFeedbackStatisticsDTO value)
{
    m_Statistics = value;
}



std::vector<GoodsFeedbackDTO> createGoodsFeedbackDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<GoodsFeedbackDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(GoodsFeedbackDTO(child.second));
    }

    return vec;
}

}
}
}
}

