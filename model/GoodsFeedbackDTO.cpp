/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GoodsFeedbackDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GoodsFeedbackDTO::GoodsFeedbackDTO()
{
    m_FeedbackId = 0L;
    m_CreatedAt = "";
    m_NeedReaction = false;
    m_Author = "";
    m_AuthorIsSet = false;
    m_DescriptionIsSet = false;
    m_MediaIsSet = false;
    
}

void GoodsFeedbackDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GoodsFeedbackDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GoodsFeedbackDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GoodsFeedbackDTO" : pathPrefix;

                    
    if (!m_Identifiers.validate(msg, _pathPrefix + ".identifiers")) {
        msg << _pathPrefix << ": Identifiers is invalid;";
        success = false;
    }                
    if (!m_Statistics.validate(msg, _pathPrefix + ".statistics")) {
        msg << _pathPrefix << ": Statistics is invalid;";
        success = false;
    }
    return success;
}

bool GoodsFeedbackDTO::operator==(const GoodsFeedbackDTO& rhs) const
{
    return
    
    
    (getFeedbackId() == rhs.getFeedbackId())
     &&
    
    (getCreatedAt() == rhs.getCreatedAt())
     &&
    
    (isNeedReaction() == rhs.isNeedReaction())
     &&
    
    (getIdentifiers() == rhs.getIdentifiers())
     &&
    
    
    ((!authorIsSet() && !rhs.authorIsSet()) || (authorIsSet() && rhs.authorIsSet() && getAuthor() == rhs.getAuthor())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!mediaIsSet() && !rhs.mediaIsSet()) || (mediaIsSet() && rhs.mediaIsSet() && getMedia() == rhs.getMedia())) &&
    
    (getStatistics() == rhs.getStatistics())
    
    
    ;
}

bool GoodsFeedbackDTO::operator!=(const GoodsFeedbackDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GoodsFeedbackDTO& o)
{
    j = nlohmann::json::object();
    j["feedbackId"] = o.m_FeedbackId;
    j["createdAt"] = o.m_CreatedAt;
    j["needReaction"] = o.m_NeedReaction;
    j["identifiers"] = o.m_Identifiers;
    if(o.authorIsSet())
        j["author"] = o.m_Author;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.mediaIsSet())
        j["media"] = o.m_Media;
    j["statistics"] = o.m_Statistics;
    
}

void from_json(const nlohmann::json& j, GoodsFeedbackDTO& o)
{
    j.at("feedbackId").get_to(o.m_FeedbackId);
    j.at("createdAt").get_to(o.m_CreatedAt);
    j.at("needReaction").get_to(o.m_NeedReaction);
    j.at("identifiers").get_to(o.m_Identifiers);
    if(j.find("author") != j.end())
    {
        j.at("author").get_to(o.m_Author);
        o.m_AuthorIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("media") != j.end())
    {
        j.at("media").get_to(o.m_Media);
        o.m_MediaIsSet = true;
    } 
    j.at("statistics").get_to(o.m_Statistics);
    
}

int64_t GoodsFeedbackDTO::getFeedbackId() const
{
    return m_FeedbackId;
}
void GoodsFeedbackDTO::setFeedbackId(int64_t const value)
{
    m_FeedbackId = value;
}
std::string GoodsFeedbackDTO::getCreatedAt() const
{
    return m_CreatedAt;
}
void GoodsFeedbackDTO::setCreatedAt(std::string const& value)
{
    m_CreatedAt = value;
}
bool GoodsFeedbackDTO::isNeedReaction() const
{
    return m_NeedReaction;
}
void GoodsFeedbackDTO::setNeedReaction(bool const value)
{
    m_NeedReaction = value;
}
org::openapitools::server::model::GoodsFeedbackIdentifiersDTO GoodsFeedbackDTO::getIdentifiers() const
{
    return m_Identifiers;
}
void GoodsFeedbackDTO::setIdentifiers(org::openapitools::server::model::GoodsFeedbackIdentifiersDTO const& value)
{
    m_Identifiers = value;
}
std::string GoodsFeedbackDTO::getAuthor() const
{
    return m_Author;
}
void GoodsFeedbackDTO::setAuthor(std::string const& value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}
bool GoodsFeedbackDTO::authorIsSet() const
{
    return m_AuthorIsSet;
}
void GoodsFeedbackDTO::unsetAuthor()
{
    m_AuthorIsSet = false;
}
org::openapitools::server::model::GoodsFeedbackDescriptionDTO GoodsFeedbackDTO::getDescription() const
{
    return m_Description;
}
void GoodsFeedbackDTO::setDescription(org::openapitools::server::model::GoodsFeedbackDescriptionDTO const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool GoodsFeedbackDTO::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void GoodsFeedbackDTO::unsetDescription()
{
    m_DescriptionIsSet = false;
}
org::openapitools::server::model::GoodsFeedbackMediaDTO GoodsFeedbackDTO::getMedia() const
{
    return m_Media;
}
void GoodsFeedbackDTO::setMedia(org::openapitools::server::model::GoodsFeedbackMediaDTO const& value)
{
    m_Media = value;
    m_MediaIsSet = true;
}
bool GoodsFeedbackDTO::mediaIsSet() const
{
    return m_MediaIsSet;
}
void GoodsFeedbackDTO::unsetMedia()
{
    m_MediaIsSet = false;
}
org::openapitools::server::model::GoodsFeedbackStatisticsDTO GoodsFeedbackDTO::getStatistics() const
{
    return m_Statistics;
}
void GoodsFeedbackDTO::setStatistics(org::openapitools::server::model::GoodsFeedbackStatisticsDTO const& value)
{
    m_Statistics = value;
}


} // namespace org::openapitools::server::model

