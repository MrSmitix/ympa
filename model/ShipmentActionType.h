/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ShipmentActionType.h
 *
 * Действия с отгрузкой:  * &#x60;CONFIRM&#x60; — подтвердить отгрузку. * &#x60;DOWNLOAD_ACT&#x60; — скачать акт приема-передачи отгрузки. * &#x60;DOWNLOAD_INBOUND_ACT&#x60; — скачать список принятых заказов. * &#x60;DOWNLOAD_DISCREPANCY_ACT&#x60; — скачать акт расхождений. * &#x60;CHANGE_PALLETS_COUNT&#x60; — указать количество палет. 
 */

#ifndef ShipmentActionType_H_
#define ShipmentActionType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Действия с отгрузкой:  * &#x60;CONFIRM&#x60; — подтвердить отгрузку. * &#x60;DOWNLOAD_ACT&#x60; — скачать акт приема-передачи отгрузки. * &#x60;DOWNLOAD_INBOUND_ACT&#x60; — скачать список принятых заказов. * &#x60;DOWNLOAD_DISCREPANCY_ACT&#x60; — скачать акт расхождений. * &#x60;CHANGE_PALLETS_COUNT&#x60; — указать количество палет. 
/// </summary>
class  ShipmentActionType 
{
public:
    ShipmentActionType() = default;
    explicit ShipmentActionType(boost::property_tree::ptree const& pt);
    virtual ~ShipmentActionType() = default;

    ShipmentActionType(const ShipmentActionType& other) = default; // copy constructor
    ShipmentActionType(ShipmentActionType&& other) noexcept = default; // move constructor

    ShipmentActionType& operator=(const ShipmentActionType& other) = default; // copy assignment
    ShipmentActionType& operator=(ShipmentActionType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// ShipmentActionType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_ShipmentActionTypeEnumValue;
};

std::vector<ShipmentActionType> createShipmentActionTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ShipmentActionType>(const ShipmentActionType& val) {
    return val.toPropertyTree();
}

template<>
inline ShipmentActionType fromPt<ShipmentActionType>(const boost::property_tree::ptree& pt) {
    ShipmentActionType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ShipmentActionType_H_ */
