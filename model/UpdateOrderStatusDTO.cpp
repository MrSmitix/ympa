/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UpdateOrderStatusDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UpdateOrderStatusDTO::UpdateOrderStatusDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_StatusIsSet = false;
    m_SubstatusIsSet = false;
    m_UpdateStatusIsSet = false;
    m_ErrorDetails = "";
    m_ErrorDetailsIsSet = false;
    
}

void UpdateOrderStatusDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UpdateOrderStatusDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UpdateOrderStatusDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UpdateOrderStatusDTO" : pathPrefix;

                        
    return success;
}

bool UpdateOrderStatusDTO::operator==(const UpdateOrderStatusDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!substatusIsSet() && !rhs.substatusIsSet()) || (substatusIsSet() && rhs.substatusIsSet() && getSubstatus() == rhs.getSubstatus())) &&
    
    
    ((!updateStatusIsSet() && !rhs.updateStatusIsSet()) || (updateStatusIsSet() && rhs.updateStatusIsSet() && getUpdateStatus() == rhs.getUpdateStatus())) &&
    
    
    ((!errorDetailsIsSet() && !rhs.errorDetailsIsSet()) || (errorDetailsIsSet() && rhs.errorDetailsIsSet() && getErrorDetails() == rhs.getErrorDetails()))
    
    ;
}

bool UpdateOrderStatusDTO::operator!=(const UpdateOrderStatusDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UpdateOrderStatusDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.substatusIsSet())
        j["substatus"] = o.m_Substatus;
    if(o.updateStatusIsSet())
        j["updateStatus"] = o.m_UpdateStatus;
    if(o.errorDetailsIsSet())
        j["errorDetails"] = o.m_ErrorDetails;
    
}

void from_json(const nlohmann::json& j, UpdateOrderStatusDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("substatus") != j.end())
    {
        j.at("substatus").get_to(o.m_Substatus);
        o.m_SubstatusIsSet = true;
    } 
    if(j.find("updateStatus") != j.end())
    {
        j.at("updateStatus").get_to(o.m_UpdateStatus);
        o.m_UpdateStatusIsSet = true;
    } 
    if(j.find("errorDetails") != j.end())
    {
        j.at("errorDetails").get_to(o.m_ErrorDetails);
        o.m_ErrorDetailsIsSet = true;
    } 
    
}

int64_t UpdateOrderStatusDTO::getId() const
{
    return m_Id;
}
void UpdateOrderStatusDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool UpdateOrderStatusDTO::idIsSet() const
{
    return m_IdIsSet;
}
void UpdateOrderStatusDTO::unsetId()
{
    m_IdIsSet = false;
}
org::openapitools::server::model::OrderStatusType UpdateOrderStatusDTO::getStatus() const
{
    return m_Status;
}
void UpdateOrderStatusDTO::setStatus(org::openapitools::server::model::OrderStatusType const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool UpdateOrderStatusDTO::statusIsSet() const
{
    return m_StatusIsSet;
}
void UpdateOrderStatusDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
org::openapitools::server::model::OrderSubstatusType UpdateOrderStatusDTO::getSubstatus() const
{
    return m_Substatus;
}
void UpdateOrderStatusDTO::setSubstatus(org::openapitools::server::model::OrderSubstatusType const& value)
{
    m_Substatus = value;
    m_SubstatusIsSet = true;
}
bool UpdateOrderStatusDTO::substatusIsSet() const
{
    return m_SubstatusIsSet;
}
void UpdateOrderStatusDTO::unsetSubstatus()
{
    m_SubstatusIsSet = false;
}
org::openapitools::server::model::OrderUpdateStatusType UpdateOrderStatusDTO::getUpdateStatus() const
{
    return m_UpdateStatus;
}
void UpdateOrderStatusDTO::setUpdateStatus(org::openapitools::server::model::OrderUpdateStatusType const& value)
{
    m_UpdateStatus = value;
    m_UpdateStatusIsSet = true;
}
bool UpdateOrderStatusDTO::updateStatusIsSet() const
{
    return m_UpdateStatusIsSet;
}
void UpdateOrderStatusDTO::unsetUpdateStatus()
{
    m_UpdateStatusIsSet = false;
}
std::string UpdateOrderStatusDTO::getErrorDetails() const
{
    return m_ErrorDetails;
}
void UpdateOrderStatusDTO::setErrorDetails(std::string const& value)
{
    m_ErrorDetails = value;
    m_ErrorDetailsIsSet = true;
}
bool UpdateOrderStatusDTO::errorDetailsIsSet() const
{
    return m_ErrorDetailsIsSet;
}
void UpdateOrderStatusDTO::unsetErrorDetails()
{
    m_ErrorDetailsIsSet = false;
}


} // namespace org::openapitools::server::model

