/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FeedPublicationPriceAndStockUpdateDTO.h
 *
 * Последнее обновление цен и наличия товаров на Маркете. Если последнее по времени обновление было полным, в параметре выводятся те же данные, что и в параметре &#x60;full&#x60;. Выводится, если параметр &#x60;publication status&#x3D;OK&#x60;. 
 */

#ifndef FeedPublicationPriceAndStockUpdateDTO_H_
#define FeedPublicationPriceAndStockUpdateDTO_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Последнее обновление цен и наличия товаров на Маркете. Если последнее по времени обновление было полным, в параметре выводятся те же данные, что и в параметре &#x60;full&#x60;. Выводится, если параметр &#x60;publication status&#x3D;OK&#x60;. 
/// </summary>
class  FeedPublicationPriceAndStockUpdateDTO
{
public:
    FeedPublicationPriceAndStockUpdateDTO();
    virtual ~FeedPublicationPriceAndStockUpdateDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FeedPublicationPriceAndStockUpdateDTO& rhs) const;
    bool operator!=(const FeedPublicationPriceAndStockUpdateDTO& rhs) const;

    /////////////////////////////////////////////
    /// FeedPublicationPriceAndStockUpdateDTO members

    /// <summary>
    /// Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    std::string getFileTime() const;
    void setFileTime(std::string const& value);
    bool fileTimeIsSet() const;
    void unsetFileTime();
    /// <summary>
    /// Дата и время публикации предложений из прайс-листа на Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    std::string getPublishedTime() const;
    void setPublishedTime(std::string const& value);
    bool publishedTimeIsSet() const;
    void unsetPublishedTime();

    friend  void to_json(nlohmann::json& j, const FeedPublicationPriceAndStockUpdateDTO& o);
    friend  void from_json(const nlohmann::json& j, FeedPublicationPriceAndStockUpdateDTO& o);
protected:
    std::string m_FileTime;
    bool m_FileTimeIsSet;
    std::string m_PublishedTime;
    bool m_PublishedTimeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* FeedPublicationPriceAndStockUpdateDTO_H_ */
