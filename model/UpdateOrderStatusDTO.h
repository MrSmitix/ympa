/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * UpdateOrderStatusDTO.h
 *
 * Список заказов.
 */

#ifndef UpdateOrderStatusDTO_H_
#define UpdateOrderStatusDTO_H_


#include "OrderStatusType.h"
#include <string>
#include "OrderUpdateStatusType.h"
#include "OrderSubstatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Список заказов.
/// </summary>
class  UpdateOrderStatusDTO
{
public:
    UpdateOrderStatusDTO();
    virtual ~UpdateOrderStatusDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const UpdateOrderStatusDTO& rhs) const;
    bool operator!=(const UpdateOrderStatusDTO& rhs) const;

    /////////////////////////////////////////////
    /// UpdateOrderStatusDTO members

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderStatusType getStatus() const;
    void setStatus(org::openapitools::server::model::OrderStatusType const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderSubstatusType getSubstatus() const;
    void setSubstatus(org::openapitools::server::model::OrderSubstatusType const& value);
    bool substatusIsSet() const;
    void unsetSubstatus();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderUpdateStatusType getUpdateStatus() const;
    void setUpdateStatus(org::openapitools::server::model::OrderUpdateStatusType const& value);
    bool updateStatusIsSet() const;
    void unsetUpdateStatus();
    /// <summary>
    /// Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр &#x60;updateStatus&#x60; принимает значение &#x60;ERROR&#x60;. 
    /// </summary>
    std::string getErrorDetails() const;
    void setErrorDetails(std::string const& value);
    bool errorDetailsIsSet() const;
    void unsetErrorDetails();

    friend  void to_json(nlohmann::json& j, const UpdateOrderStatusDTO& o);
    friend  void from_json(const nlohmann::json& j, UpdateOrderStatusDTO& o);
protected:
    int64_t m_Id;
    bool m_IdIsSet;
    org::openapitools::server::model::OrderStatusType m_Status;
    bool m_StatusIsSet;
    org::openapitools::server::model::OrderSubstatusType m_Substatus;
    bool m_SubstatusIsSet;
    org::openapitools::server::model::OrderUpdateStatusType m_UpdateStatus;
    bool m_UpdateStatusIsSet;
    std::string m_ErrorDetails;
    bool m_ErrorDetailsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* UpdateOrderStatusDTO_H_ */
