/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateOrderStatusDTO.h
 *
 * Список заказов.
 */

#ifndef UpdateOrderStatusDTO_H_
#define UpdateOrderStatusDTO_H_



#include "OrderStatusType.h"
#include <string>
#include "OrderUpdateStatusType.h"
#include "OrderSubstatusType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Список заказов.
/// </summary>
class  UpdateOrderStatusDTO 
{
public:
    UpdateOrderStatusDTO() = default;
    explicit UpdateOrderStatusDTO(boost::property_tree::ptree const& pt);
    virtual ~UpdateOrderStatusDTO() = default;

    UpdateOrderStatusDTO(const UpdateOrderStatusDTO& other) = default; // copy constructor
    UpdateOrderStatusDTO(UpdateOrderStatusDTO&& other) noexcept = default; // move constructor

    UpdateOrderStatusDTO& operator=(const UpdateOrderStatusDTO& other) = default; // copy assignment
    UpdateOrderStatusDTO& operator=(UpdateOrderStatusDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UpdateOrderStatusDTO members

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    OrderStatusType getStatus() const;
    void setStatus(OrderStatusType value);

    /// <summary>
    /// 
    /// </summary>
    OrderSubstatusType getSubstatus() const;
    void setSubstatus(OrderSubstatusType value);

    /// <summary>
    /// 
    /// </summary>
    OrderUpdateStatusType getUpdateStatus() const;
    void setUpdateStatus(OrderUpdateStatusType value);

    /// <summary>
    /// Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр &#x60;updateStatus&#x60; принимает значение &#x60;ERROR&#x60;. 
    /// </summary>
    std::string getErrorDetails() const;
    void setErrorDetails(std::string value);

protected:
    int64_t m_Id = 0L;
    OrderStatusType m_Status = OrderStatusType{};
    OrderSubstatusType m_Substatus = OrderSubstatusType{};
    OrderUpdateStatusType m_UpdateStatus = OrderUpdateStatusType{};
    std::string m_ErrorDetails = "";
};

std::vector<UpdateOrderStatusDTO> createUpdateOrderStatusDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UpdateOrderStatusDTO>(const UpdateOrderStatusDTO& val) {
    return val.toPropertyTree();
}

template<>
inline UpdateOrderStatusDTO fromPt<UpdateOrderStatusDTO>(const boost::property_tree::ptree& pt) {
    UpdateOrderStatusDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UpdateOrderStatusDTO_H_ */
