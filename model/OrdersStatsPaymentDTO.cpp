/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrdersStatsPaymentDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrdersStatsPaymentDTO::OrdersStatsPaymentDTO()
{
    m_Id = "";
    m_IdIsSet = false;
    m_dateIsSet = false;
    m_TypeIsSet = false;
    m_SourceIsSet = false;
    m_Total = 0.0;
    m_TotalIsSet = false;
    m_PaymentOrderIsSet = false;
    
}

void OrdersStatsPaymentDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrdersStatsPaymentDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrdersStatsPaymentDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrdersStatsPaymentDTO" : pathPrefix;

                            
    return success;
}

bool OrdersStatsPaymentDTO::operator==(const OrdersStatsPaymentDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!dateIsSet() && !rhs.dateIsSet()) || (dateIsSet() && rhs.dateIsSet() && getDate() == rhs.getDate())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!sourceIsSet() && !rhs.sourceIsSet()) || (sourceIsSet() && rhs.sourceIsSet() && getSource() == rhs.getSource())) &&
    
    
    ((!totalIsSet() && !rhs.totalIsSet()) || (totalIsSet() && rhs.totalIsSet() && getTotal() == rhs.getTotal())) &&
    
    
    ((!paymentOrderIsSet() && !rhs.paymentOrderIsSet()) || (paymentOrderIsSet() && rhs.paymentOrderIsSet() && getPaymentOrder() == rhs.getPaymentOrder()))
    
    ;
}

bool OrdersStatsPaymentDTO::operator!=(const OrdersStatsPaymentDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrdersStatsPaymentDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.dateIsSet())
        j["date"] = o.m_date;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.sourceIsSet())
        j["source"] = o.m_Source;
    if(o.totalIsSet())
        j["total"] = o.m_Total;
    if(o.paymentOrderIsSet())
        j["paymentOrder"] = o.m_PaymentOrder;
    
}

void from_json(const nlohmann::json& j, OrdersStatsPaymentDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("date") != j.end())
    {
        j.at("date").get_to(o.m_date);
        o.m_dateIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("source") != j.end())
    {
        j.at("source").get_to(o.m_Source);
        o.m_SourceIsSet = true;
    } 
    if(j.find("total") != j.end())
    {
        j.at("total").get_to(o.m_Total);
        o.m_TotalIsSet = true;
    } 
    if(j.find("paymentOrder") != j.end())
    {
        j.at("paymentOrder").get_to(o.m_PaymentOrder);
        o.m_PaymentOrderIsSet = true;
    } 
    
}

std::string OrdersStatsPaymentDTO::getId() const
{
    return m_Id;
}
void OrdersStatsPaymentDTO::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool OrdersStatsPaymentDTO::idIsSet() const
{
    return m_IdIsSet;
}
void OrdersStatsPaymentDTO::unsetId()
{
    m_IdIsSet = false;
}
std::string OrdersStatsPaymentDTO::getDate() const
{
    return m_date;
}
void OrdersStatsPaymentDTO::setDate(std::string const& value)
{
    m_date = value;
    m_dateIsSet = true;
}
bool OrdersStatsPaymentDTO::dateIsSet() const
{
    return m_dateIsSet;
}
void OrdersStatsPaymentDTO::unsetdate()
{
    m_dateIsSet = false;
}
org::openapitools::server::model::OrdersStatsPaymentType OrdersStatsPaymentDTO::getType() const
{
    return m_Type;
}
void OrdersStatsPaymentDTO::setType(org::openapitools::server::model::OrdersStatsPaymentType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool OrdersStatsPaymentDTO::typeIsSet() const
{
    return m_TypeIsSet;
}
void OrdersStatsPaymentDTO::unsetType()
{
    m_TypeIsSet = false;
}
org::openapitools::server::model::OrdersStatsPaymentSourceType OrdersStatsPaymentDTO::getSource() const
{
    return m_Source;
}
void OrdersStatsPaymentDTO::setSource(org::openapitools::server::model::OrdersStatsPaymentSourceType const& value)
{
    m_Source = value;
    m_SourceIsSet = true;
}
bool OrdersStatsPaymentDTO::sourceIsSet() const
{
    return m_SourceIsSet;
}
void OrdersStatsPaymentDTO::unsetSource()
{
    m_SourceIsSet = false;
}
double OrdersStatsPaymentDTO::getTotal() const
{
    return m_Total;
}
void OrdersStatsPaymentDTO::setTotal(double const value)
{
    m_Total = value;
    m_TotalIsSet = true;
}
bool OrdersStatsPaymentDTO::totalIsSet() const
{
    return m_TotalIsSet;
}
void OrdersStatsPaymentDTO::unsetTotal()
{
    m_TotalIsSet = false;
}
org::openapitools::server::model::OrdersStatsPaymentOrderDTO OrdersStatsPaymentDTO::getPaymentOrder() const
{
    return m_PaymentOrder;
}
void OrdersStatsPaymentDTO::setPaymentOrder(org::openapitools::server::model::OrdersStatsPaymentOrderDTO const& value)
{
    m_PaymentOrder = value;
    m_PaymentOrderIsSet = true;
}
bool OrdersStatsPaymentDTO::paymentOrderIsSet() const
{
    return m_PaymentOrderIsSet;
}
void OrdersStatsPaymentDTO::unsetPaymentOrder()
{
    m_PaymentOrderIsSet = false;
}


} // namespace org::openapitools::server::model

