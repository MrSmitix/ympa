/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrderDeliveryAddressDTO.h
 *
 * Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи). 
 */

#ifndef OrderDeliveryAddressDTO_H_
#define OrderDeliveryAddressDTO_H_


#include "GpsDTO.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи). 
/// </summary>
class  OrderDeliveryAddressDTO
{
public:
    OrderDeliveryAddressDTO();
    virtual ~OrderDeliveryAddressDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OrderDeliveryAddressDTO& rhs) const;
    bool operator!=(const OrderDeliveryAddressDTO& rhs) const;

    /////////////////////////////////////////////
    /// OrderDeliveryAddressDTO members

    /// <summary>
    /// Страна.  Обязательный параметр. 
    /// </summary>
    std::string getCountry() const;
    void setCountry(std::string const& value);
    bool countryIsSet() const;
    void unsetCountry();
    /// <summary>
    /// Почтовый индекс.  Указывается, если выбрана доставка почтой (&#x60;delivery type&#x3D;POST&#x60;). 
    /// </summary>
    std::string getPostcode() const;
    void setPostcode(std::string const& value);
    bool postcodeIsSet() const;
    void unsetPostcode();
    /// <summary>
    /// Город или населенный пункт.  Обязательный параметр. 
    /// </summary>
    std::string getCity() const;
    void setCity(std::string const& value);
    bool cityIsSet() const;
    void unsetCity();
    /// <summary>
    /// Район.
    /// </summary>
    std::string getDistrict() const;
    void setDistrict(std::string const& value);
    bool districtIsSet() const;
    void unsetDistrict();
    /// <summary>
    /// Станция метро.
    /// </summary>
    std::string getSubway() const;
    void setSubway(std::string const& value);
    bool subwayIsSet() const;
    void unsetSubway();
    /// <summary>
    /// Улица.  Обязательный параметр. 
    /// </summary>
    std::string getStreet() const;
    void setStreet(std::string const& value);
    bool streetIsSet() const;
    void unsetStreet();
    /// <summary>
    /// Дом или владение.  Обязательный параметр. 
    /// </summary>
    std::string getHouse() const;
    void setHouse(std::string const& value);
    bool houseIsSet() const;
    void unsetHouse();
    /// <summary>
    /// Корпус или строение.
    /// </summary>
    std::string getBlock() const;
    void setBlock(std::string const& value);
    bool blockIsSet() const;
    void unsetBlock();
    /// <summary>
    /// Подъезд.
    /// </summary>
    std::string getEntrance() const;
    void setEntrance(std::string const& value);
    bool entranceIsSet() const;
    void unsetEntrance();
    /// <summary>
    /// Код домофона.
    /// </summary>
    std::string getEntryphone() const;
    void setEntryphone(std::string const& value);
    bool entryphoneIsSet() const;
    void unsetEntryphone();
    /// <summary>
    /// Этаж.
    /// </summary>
    std::string getFloor() const;
    void setFloor(std::string const& value);
    bool floorIsSet() const;
    void unsetFloor();
    /// <summary>
    /// Квартира или офис.
    /// </summary>
    std::string getApartment() const;
    void setApartment(std::string const& value);
    bool apartmentIsSet() const;
    void unsetApartment();
    /// <summary>
    /// Телефон получателя заказа.  Обязательный параметр. 
    /// </summary>
    std::string getPhone() const;
    void setPhone(std::string const& value);
    bool phoneIsSet() const;
    void unsetPhone();
    /// <summary>
    /// Фамилия, имя и отчество получателя заказа.  Обязательный параметр. 
    /// </summary>
    std::string getRecipient() const;
    void setRecipient(std::string const& value);
    bool recipientIsSet() const;
    void unsetRecipient();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::GpsDTO getGps() const;
    void setGps(org::openapitools::server::model::GpsDTO const& value);
    bool gpsIsSet() const;
    void unsetGps();

    friend  void to_json(nlohmann::json& j, const OrderDeliveryAddressDTO& o);
    friend  void from_json(const nlohmann::json& j, OrderDeliveryAddressDTO& o);
protected:
    std::string m_Country;
    bool m_CountryIsSet;
    std::string m_Postcode;
    bool m_PostcodeIsSet;
    std::string m_City;
    bool m_CityIsSet;
    std::string m_District;
    bool m_DistrictIsSet;
    std::string m_Subway;
    bool m_SubwayIsSet;
    std::string m_Street;
    bool m_StreetIsSet;
    std::string m_House;
    bool m_HouseIsSet;
    std::string m_Block;
    bool m_BlockIsSet;
    std::string m_Entrance;
    bool m_EntranceIsSet;
    std::string m_Entryphone;
    bool m_EntryphoneIsSet;
    std::string m_Floor;
    bool m_FloorIsSet;
    std::string m_Apartment;
    bool m_ApartmentIsSet;
    std::string m_Phone;
    bool m_PhoneIsSet;
    std::string m_Recipient;
    bool m_RecipientIsSet;
    org::openapitools::server::model::GpsDTO m_Gps;
    bool m_GpsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OrderDeliveryAddressDTO_H_ */
