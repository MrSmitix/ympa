/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FeedbackDTO.h
 *
 * Отзыв пользователя Яндекс Маркета об указанном магазине.
 */

#ifndef FeedbackDTO_H_
#define FeedbackDTO_H_


#include "FeedbackAuthorDTO.h"
#include "FeedbackGradesDTO.h"
#include "FeedbackStateType.h"
#include "FeedbackCommentDTO.h"
#include <string>
#include "FeedbackShopDTO.h"
#include <vector>
#include "FeedbackOrderDTO.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Отзыв пользователя Яндекс Маркета об указанном магазине.
/// </summary>
class  FeedbackDTO
{
public:
    FeedbackDTO();
    virtual ~FeedbackDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FeedbackDTO& rhs) const;
    bool operator!=(const FeedbackDTO& rhs) const;

    /////////////////////////////////////////////
    /// FeedbackDTO members

    /// <summary>
    /// Идентификатор отзыва.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string const& value);
    bool createdAtIsSet() const;
    void unsetCreatedAt();
    /// <summary>
    /// Комментарий автора отзыва.
    /// </summary>
    std::string getText() const;
    void setText(std::string const& value);
    bool textIsSet() const;
    void unsetText();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedbackStateType getState() const;
    void setState(org::openapitools::server::model::FeedbackStateType const& value);
    bool stateIsSet() const;
    void unsetState();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedbackAuthorDTO getAuthor() const;
    void setAuthor(org::openapitools::server::model::FeedbackAuthorDTO const& value);
    bool authorIsSet() const;
    void unsetAuthor();
    /// <summary>
    /// Достоинства магазина, описанные в отзыве.
    /// </summary>
    std::string getPro() const;
    void setPro(std::string const& value);
    bool proIsSet() const;
    void unsetPro();
    /// <summary>
    /// Недостатки магазина, описанные в отзыве.
    /// </summary>
    std::string getContra() const;
    void setContra(std::string const& value);
    bool contraIsSet() const;
    void unsetContra();
    /// <summary>
    /// Переписка автора отзыва с магазином.
    /// </summary>
    std::vector<org::openapitools::server::model::FeedbackCommentDTO> getComments() const;
    void setComments(std::vector<org::openapitools::server::model::FeedbackCommentDTO> const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedbackShopDTO getShop() const;
    void setShop(org::openapitools::server::model::FeedbackShopDTO const& value);
    bool shopIsSet() const;
    void unsetShop();
    /// <summary>
    /// Решена ли проблема автора отзыва:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. 
    /// </summary>
    bool isResolved() const;
    void setResolved(bool const value);
    bool resolvedIsSet() const;
    void unsetResolved();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. 
    /// </summary>
    bool isVerified() const;
    void setVerified(bool const value);
    bool verifiedIsSet() const;
    void unsetVerified();
    /// <summary>
    /// Купил бы автор отзыва в магазине снова:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. 
    /// </summary>
    bool isRecommend() const;
    void setRecommend(bool const value);
    bool recommendIsSet() const;
    void unsetRecommend();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedbackGradesDTO getGrades() const;
    void setGrades(org::openapitools::server::model::FeedbackGradesDTO const& value);
    bool gradesIsSet() const;
    void unsetGrades();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedbackOrderDTO getOrder() const;
    void setOrder(org::openapitools::server::model::FeedbackOrderDTO const& value);
    bool orderIsSet() const;
    void unsetOrder();

    friend  void to_json(nlohmann::json& j, const FeedbackDTO& o);
    friend  void from_json(const nlohmann::json& j, FeedbackDTO& o);
protected:
    int64_t m_Id;
    bool m_IdIsSet;
    std::string m_CreatedAt;
    bool m_CreatedAtIsSet;
    std::string m_Text;
    bool m_TextIsSet;
    org::openapitools::server::model::FeedbackStateType m_State;
    bool m_StateIsSet;
    org::openapitools::server::model::FeedbackAuthorDTO m_Author;
    bool m_AuthorIsSet;
    std::string m_Pro;
    bool m_ProIsSet;
    std::string m_Contra;
    bool m_ContraIsSet;
    std::vector<org::openapitools::server::model::FeedbackCommentDTO> m_Comments;

    org::openapitools::server::model::FeedbackShopDTO m_Shop;
    bool m_ShopIsSet;
    bool m_Resolved;
    bool m_ResolvedIsSet;
    bool m_Verified;
    bool m_VerifiedIsSet;
    bool m_Recommend;
    bool m_RecommendIsSet;
    org::openapitools::server::model::FeedbackGradesDTO m_Grades;
    bool m_GradesIsSet;
    org::openapitools::server::model::FeedbackOrderDTO m_Order;
    bool m_OrderIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* FeedbackDTO_H_ */
