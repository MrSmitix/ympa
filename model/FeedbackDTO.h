/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedbackDTO.h
 *
 * Отзыв пользователя Яндекс Маркета об указанном магазине.
 */

#ifndef FeedbackDTO_H_
#define FeedbackDTO_H_



#include "FeedbackAuthorDTO.h"
#include "FeedbackGradesDTO.h"
#include "FeedbackStateType.h"
#include "FeedbackCommentDTO.h"
#include <string>
#include "FeedbackShopDTO.h"
#include <vector>
#include "FeedbackOrderDTO.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Отзыв пользователя Яндекс Маркета об указанном магазине.
/// </summary>
class  FeedbackDTO 
{
public:
    FeedbackDTO() = default;
    explicit FeedbackDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedbackDTO() = default;

    FeedbackDTO(const FeedbackDTO& other) = default; // copy constructor
    FeedbackDTO(FeedbackDTO&& other) noexcept = default; // move constructor

    FeedbackDTO& operator=(const FeedbackDTO& other) = default; // copy assignment
    FeedbackDTO& operator=(FeedbackDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FeedbackDTO members

    /// <summary>
    /// Идентификатор отзыва.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// Комментарий автора отзыва.
    /// </summary>
    std::string getText() const;
    void setText(std::string value);

    /// <summary>
    /// 
    /// </summary>
    FeedbackStateType getState() const;
    void setState(FeedbackStateType value);

    /// <summary>
    /// 
    /// </summary>
    FeedbackAuthorDTO getAuthor() const;
    void setAuthor(FeedbackAuthorDTO value);

    /// <summary>
    /// Достоинства магазина, описанные в отзыве.
    /// </summary>
    std::string getPro() const;
    void setPro(std::string value);

    /// <summary>
    /// Недостатки магазина, описанные в отзыве.
    /// </summary>
    std::string getContra() const;
    void setContra(std::string value);

    /// <summary>
    /// Переписка автора отзыва с магазином.
    /// </summary>
    std::vector<FeedbackCommentDTO> getComments() const;
    void setComments(std::vector<FeedbackCommentDTO> value);

    /// <summary>
    /// 
    /// </summary>
    FeedbackShopDTO getShop() const;
    void setShop(FeedbackShopDTO value);

    /// <summary>
    /// Решена ли проблема автора отзыва:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. 
    /// </summary>
    bool isResolved() const;
    void setResolved(bool value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. 
    /// </summary>
    bool isVerified() const;
    void setVerified(bool value);

    /// <summary>
    /// Купил бы автор отзыва в магазине снова:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. 
    /// </summary>
    bool isRecommend() const;
    void setRecommend(bool value);

    /// <summary>
    /// 
    /// </summary>
    FeedbackGradesDTO getGrades() const;
    void setGrades(FeedbackGradesDTO value);

    /// <summary>
    /// 
    /// </summary>
    FeedbackOrderDTO getOrder() const;
    void setOrder(FeedbackOrderDTO value);

protected:
    int64_t m_Id = 0L;
    std::string m_CreatedAt = "";
    std::string m_Text = "";
    FeedbackStateType m_State = FeedbackStateType{};
    FeedbackAuthorDTO m_Author;
    std::string m_Pro = "";
    std::string m_Contra = "";
    std::vector<FeedbackCommentDTO> m_Comments;
    FeedbackShopDTO m_Shop;
    bool m_Resolved = false;
    bool m_Verified = false;
    bool m_Recommend = false;
    FeedbackGradesDTO m_Grades;
    FeedbackOrderDTO m_Order;
};

std::vector<FeedbackDTO> createFeedbackDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FeedbackDTO>(const FeedbackDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FeedbackDTO fromPt<FeedbackDTO>(const boost::property_tree::ptree& pt) {
    FeedbackDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FeedbackDTO_H_ */
