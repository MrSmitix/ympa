/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GenerateShowsSalesReportRequest.h
 *
 * Данные, необходимые для генерации отчета.
 */

#ifndef GenerateShowsSalesReportRequest_H_
#define GenerateShowsSalesReportRequest_H_


#include <string>
#include "ShowsSalesGroupingType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Данные, необходимые для генерации отчета.
/// </summary>
class  GenerateShowsSalesReportRequest
{
public:
    GenerateShowsSalesReportRequest();
    virtual ~GenerateShowsSalesReportRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GenerateShowsSalesReportRequest& rhs) const;
    bool operator!=(const GenerateShowsSalesReportRequest& rhs) const;

    /////////////////////////////////////////////
    /// GenerateShowsSalesReportRequest members

    /// <summary>
    /// Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо &#x60;businessID&#x60;, либо &#x60;campaignId&#x60;, но не оба сразу. 
    /// </summary>
    int64_t getBusinessId() const;
    void setBusinessId(int64_t const value);
    bool businessIdIsSet() const;
    void unsetBusinessId();
    /// <summary>
    /// Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо &#x60;businessID&#x60;, либо &#x60;campaignId&#x60;, но не оба сразу. 
    /// </summary>
    int64_t getCampaignId() const;
    void setCampaignId(int64_t const value);
    bool campaignIdIsSet() const;
    void unsetCampaignId();
    /// <summary>
    /// Начало периода, включительно.
    /// </summary>
    std::string getDateFrom() const;
    void setDateFrom(std::string const& value);
    /// <summary>
    /// Конец периода, включительно.
    /// </summary>
    std::string getDateTo() const;
    void setDateTo(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ShowsSalesGroupingType getGrouping() const;
    void setGrouping(org::openapitools::server::model::ShowsSalesGroupingType const& value);

    friend  void to_json(nlohmann::json& j, const GenerateShowsSalesReportRequest& o);
    friend  void from_json(const nlohmann::json& j, GenerateShowsSalesReportRequest& o);
protected:
    int64_t m_BusinessId;
    bool m_BusinessIdIsSet;
    int64_t m_CampaignId;
    bool m_CampaignIdIsSet;
    std::string m_DateFrom;

    std::string m_DateTo;

    org::openapitools::server::model::ShowsSalesGroupingType m_Grouping;

    
};

} // namespace org::openapitools::server::model

#endif /* GenerateShowsSalesReportRequest_H_ */
