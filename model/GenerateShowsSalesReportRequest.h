/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateShowsSalesReportRequest.h
 *
 * Данные, необходимые для генерации отчета.
 */

#ifndef GenerateShowsSalesReportRequest_H_
#define GenerateShowsSalesReportRequest_H_



#include <string>
#include "ShowsSalesGroupingType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Данные, необходимые для генерации отчета.
/// </summary>
class  GenerateShowsSalesReportRequest 
{
public:
    GenerateShowsSalesReportRequest() = default;
    explicit GenerateShowsSalesReportRequest(boost::property_tree::ptree const& pt);
    virtual ~GenerateShowsSalesReportRequest() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// GenerateShowsSalesReportRequest members

    /// <summary>
    /// Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо &#x60;businessID&#x60;, либо &#x60;campaignId&#x60;, но не оба сразу. 
    /// </summary>
    int64_t getBusinessId() const;
    void setBusinessId(int64_t value);

    /// <summary>
    /// Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо &#x60;businessID&#x60;, либо &#x60;campaignId&#x60;, но не оба сразу. 
    /// </summary>
    int64_t getCampaignId() const;
    void setCampaignId(int64_t value);

    /// <summary>
    /// Начало периода, включительно.
    /// </summary>
    std::string getDateFrom() const;
    void setDateFrom(std::string value);

    /// <summary>
    /// Конец периода, включительно.
    /// </summary>
    std::string getDateTo() const;
    void setDateTo(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ShowsSalesGroupingType> getGrouping() const;
    void setGrouping(std::shared_ptr<ShowsSalesGroupingType> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_BusinessId = 0L;
    int64_t m_CampaignId = 0L;
    std::string m_DateFrom = "";
    std::string m_DateTo = "";
    std::shared_ptr<ShowsSalesGroupingType> m_Grouping = std::make_shared<ShowsSalesGroupingType>();
};

std::vector<GenerateShowsSalesReportRequest> createGenerateShowsSalesReportRequestVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* GenerateShowsSalesReportRequest_H_ */
