/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ReturnInstanceStockType.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

ReturnInstanceStockType::ReturnInstanceStockType()
{
    
}

void ReturnInstanceStockType::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ReturnInstanceStockType::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ReturnInstanceStockType::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ReturnInstanceStockType" : pathPrefix;

    
    if (m_value == ReturnInstanceStockType::eReturnInstanceStockType::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool ReturnInstanceStockType::operator==(const ReturnInstanceStockType& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool ReturnInstanceStockType::operator!=(const ReturnInstanceStockType& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ReturnInstanceStockType& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case ReturnInstanceStockType::eReturnInstanceStockType::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::FIT:
            j = "FIT";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::DEFECT:
            j = "DEFECT";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::ANOMALY:
            j = "ANOMALY";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::SURPLUS:
            j = "SURPLUS";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::EXPIRED:
            j = "EXPIRED";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::MISGRADING:
            j = "MISGRADING";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::UNDEFINED:
            j = "UNDEFINED";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::INCORRECT_IMEI:
            j = "INCORRECT_IMEI";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::INCORRECT_SERIAL_NUMBER:
            j = "INCORRECT_SERIAL_NUMBER";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::INCORRECT_CIS:
            j = "INCORRECT_CIS";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::PART_MISSING:
            j = "PART_MISSING";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::NON_COMPLIENT:
            j = "NON_COMPLIENT";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::NOT_ACCEPTABLE:
            j = "NOT_ACCEPTABLE";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::SERVICE:
            j = "SERVICE";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::MARKDOWN:
            j = "MARKDOWN";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::DEMO:
            j = "DEMO";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::REPAIR:
            j = "REPAIR";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::FIRMWARE:
            j = "FIRMWARE";
            break;
        case ReturnInstanceStockType::eReturnInstanceStockType::UNKNOWN:
            j = "UNKNOWN";
            break;
    }
}

void from_json(const nlohmann::json& j, ReturnInstanceStockType& o)
{
    
    auto s = j.get<std::string>();
    if (s == "FIT") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::FIT);
    } 
    else if (s == "DEFECT") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::DEFECT);
    } 
    else if (s == "ANOMALY") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::ANOMALY);
    } 
    else if (s == "SURPLUS") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::SURPLUS);
    } 
    else if (s == "EXPIRED") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::EXPIRED);
    } 
    else if (s == "MISGRADING") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::MISGRADING);
    } 
    else if (s == "UNDEFINED") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::UNDEFINED);
    } 
    else if (s == "INCORRECT_IMEI") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::INCORRECT_IMEI);
    } 
    else if (s == "INCORRECT_SERIAL_NUMBER") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::INCORRECT_SERIAL_NUMBER);
    } 
    else if (s == "INCORRECT_CIS") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::INCORRECT_CIS);
    } 
    else if (s == "PART_MISSING") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::PART_MISSING);
    } 
    else if (s == "NON_COMPLIENT") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::NON_COMPLIENT);
    } 
    else if (s == "NOT_ACCEPTABLE") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::NOT_ACCEPTABLE);
    } 
    else if (s == "SERVICE") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::SERVICE);
    } 
    else if (s == "MARKDOWN") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::MARKDOWN);
    } 
    else if (s == "DEMO") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::DEMO);
    } 
    else if (s == "REPAIR") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::REPAIR);
    } 
    else if (s == "FIRMWARE") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::FIRMWARE);
    } 
    else if (s == "UNKNOWN") {
     o.setValue(ReturnInstanceStockType::eReturnInstanceStockType::UNKNOWN);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " ReturnInstanceStockType::eReturnInstanceStockType";
     throw std::invalid_argument(ss.str());
    } 

}

ReturnInstanceStockType::eReturnInstanceStockType ReturnInstanceStockType::getValue() const
{
    return m_value;
}
void ReturnInstanceStockType::setValue(ReturnInstanceStockType::eReturnInstanceStockType value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

