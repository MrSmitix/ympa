/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersStatsPriceDTO.h
 *
 * Цена или скидки на товар.
 */

#ifndef OrdersStatsPriceDTO_H_
#define OrdersStatsPriceDTO_H_



#include "OrdersStatsPriceType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Цена или скидки на товар.
/// </summary>
class  OrdersStatsPriceDTO 
{
public:
    OrdersStatsPriceDTO() = default;
    explicit OrdersStatsPriceDTO(boost::property_tree::ptree const& pt);
    virtual ~OrdersStatsPriceDTO() = default;

    OrdersStatsPriceDTO(const OrdersStatsPriceDTO& other) = default; // copy constructor
    OrdersStatsPriceDTO(OrdersStatsPriceDTO&& other) noexcept = default; // move constructor

    OrdersStatsPriceDTO& operator=(const OrdersStatsPriceDTO& other) = default; // copy assignment
    OrdersStatsPriceDTO& operator=(OrdersStatsPriceDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrdersStatsPriceDTO members

    /// <summary>
    /// 
    /// </summary>
    OrdersStatsPriceType getType() const;
    void setType(OrdersStatsPriceType value);

    /// <summary>
    /// Цена или скидка на единицу товара в заказе. Указана в рублях. Точность — два знака после запятой. 
    /// </summary>
    double getCostPerItem() const;
    void setCostPerItem(double value);

    /// <summary>
    /// Суммарная цена или скидка на все единицы товара в заказе. Указана в рублях. Точность — два знака после запятой. 
    /// </summary>
    double getTotal() const;
    void setTotal(double value);

protected:
    OrdersStatsPriceType m_Type = OrdersStatsPriceType{};
    double m_CostPerItem = 0.0;
    double m_Total = 0.0;
};

std::vector<OrdersStatsPriceDTO> createOrdersStatsPriceDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrdersStatsPriceDTO>(const OrdersStatsPriceDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrdersStatsPriceDTO fromPt<OrdersStatsPriceDTO>(const boost::property_tree::ptree& pt) {
    OrdersStatsPriceDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrdersStatsPriceDTO_H_ */
