/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderDTO::OrderDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_StatusIsSet = false;
    m_SubstatusIsSet = false;
    m_CreationDate = "";
    m_CreationDateIsSet = false;
    m_UpdatedAt = "";
    m_UpdatedAtIsSet = false;
    m_CurrencyIsSet = false;
    m_ItemsTotal = 0.0;
    m_ItemsTotalIsSet = false;
    m_DeliveryTotal = 0.0;
    m_DeliveryTotalIsSet = false;
    m_BuyerItemsTotal = 0.0;
    m_BuyerItemsTotalIsSet = false;
    m_BuyerTotal = 0.0;
    m_BuyerTotalIsSet = false;
    m_BuyerItemsTotalBeforeDiscount = 0.0;
    m_BuyerItemsTotalBeforeDiscountIsSet = false;
    m_BuyerTotalBeforeDiscount = 0.0;
    m_BuyerTotalBeforeDiscountIsSet = false;
    m_PaymentTypeIsSet = false;
    m_PaymentMethodIsSet = false;
    m_Fake = false;
    m_FakeIsSet = false;
    m_SubsidiesIsSet = false;
    m_DeliveryIsSet = false;
    m_BuyerIsSet = false;
    m_Notes = "";
    m_NotesIsSet = false;
    m_TaxSystemIsSet = false;
    m_CancelRequested = false;
    m_CancelRequestedIsSet = false;
    m_ExpiryDate = "";
    m_ExpiryDateIsSet = false;
    
}

void OrderDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderDTO" : pathPrefix;

                                                                     
    
    /* Items */ {
        const std::vector<org::openapitools::server::model::OrderItemDTO>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderItemDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".items") && success;
 
                i++;
            }
        }

    }
         
    if (subsidiesIsSet())
    {
        const std::vector<org::openapitools::server::model::OrderSubsidyDTO>& value = m_Subsidies;
        const std::string currentValuePath = _pathPrefix + ".subsidies";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderSubsidyDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".subsidies") && success;
 
                i++;
            }
        }

    }
                            
    return success;
}

bool OrderDTO::operator==(const OrderDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!substatusIsSet() && !rhs.substatusIsSet()) || (substatusIsSet() && rhs.substatusIsSet() && getSubstatus() == rhs.getSubstatus())) &&
    
    
    ((!creationDateIsSet() && !rhs.creationDateIsSet()) || (creationDateIsSet() && rhs.creationDateIsSet() && getCreationDate() == rhs.getCreationDate())) &&
    
    
    ((!updatedAtIsSet() && !rhs.updatedAtIsSet()) || (updatedAtIsSet() && rhs.updatedAtIsSet() && getUpdatedAt() == rhs.getUpdatedAt())) &&
    
    
    ((!currencyIsSet() && !rhs.currencyIsSet()) || (currencyIsSet() && rhs.currencyIsSet() && getCurrency() == rhs.getCurrency())) &&
    
    
    ((!itemsTotalIsSet() && !rhs.itemsTotalIsSet()) || (itemsTotalIsSet() && rhs.itemsTotalIsSet() && getItemsTotal() == rhs.getItemsTotal())) &&
    
    
    ((!deliveryTotalIsSet() && !rhs.deliveryTotalIsSet()) || (deliveryTotalIsSet() && rhs.deliveryTotalIsSet() && getDeliveryTotal() == rhs.getDeliveryTotal())) &&
    
    
    ((!buyerItemsTotalIsSet() && !rhs.buyerItemsTotalIsSet()) || (buyerItemsTotalIsSet() && rhs.buyerItemsTotalIsSet() && getBuyerItemsTotal() == rhs.getBuyerItemsTotal())) &&
    
    
    ((!buyerTotalIsSet() && !rhs.buyerTotalIsSet()) || (buyerTotalIsSet() && rhs.buyerTotalIsSet() && getBuyerTotal() == rhs.getBuyerTotal())) &&
    
    
    ((!buyerItemsTotalBeforeDiscountIsSet() && !rhs.buyerItemsTotalBeforeDiscountIsSet()) || (buyerItemsTotalBeforeDiscountIsSet() && rhs.buyerItemsTotalBeforeDiscountIsSet() && getBuyerItemsTotalBeforeDiscount() == rhs.getBuyerItemsTotalBeforeDiscount())) &&
    
    
    ((!buyerTotalBeforeDiscountIsSet() && !rhs.buyerTotalBeforeDiscountIsSet()) || (buyerTotalBeforeDiscountIsSet() && rhs.buyerTotalBeforeDiscountIsSet() && getBuyerTotalBeforeDiscount() == rhs.getBuyerTotalBeforeDiscount())) &&
    
    
    ((!paymentTypeIsSet() && !rhs.paymentTypeIsSet()) || (paymentTypeIsSet() && rhs.paymentTypeIsSet() && getPaymentType() == rhs.getPaymentType())) &&
    
    
    ((!paymentMethodIsSet() && !rhs.paymentMethodIsSet()) || (paymentMethodIsSet() && rhs.paymentMethodIsSet() && getPaymentMethod() == rhs.getPaymentMethod())) &&
    
    
    ((!fakeIsSet() && !rhs.fakeIsSet()) || (fakeIsSet() && rhs.fakeIsSet() && isFake() == rhs.isFake())) &&
    
    (getItems() == rhs.getItems())
     &&
    
    
    ((!subsidiesIsSet() && !rhs.subsidiesIsSet()) || (subsidiesIsSet() && rhs.subsidiesIsSet() && getSubsidies() == rhs.getSubsidies())) &&
    
    
    ((!deliveryIsSet() && !rhs.deliveryIsSet()) || (deliveryIsSet() && rhs.deliveryIsSet() && getDelivery() == rhs.getDelivery())) &&
    
    
    ((!buyerIsSet() && !rhs.buyerIsSet()) || (buyerIsSet() && rhs.buyerIsSet() && getBuyer() == rhs.getBuyer())) &&
    
    
    ((!notesIsSet() && !rhs.notesIsSet()) || (notesIsSet() && rhs.notesIsSet() && getNotes() == rhs.getNotes())) &&
    
    
    ((!taxSystemIsSet() && !rhs.taxSystemIsSet()) || (taxSystemIsSet() && rhs.taxSystemIsSet() && getTaxSystem() == rhs.getTaxSystem())) &&
    
    
    ((!cancelRequestedIsSet() && !rhs.cancelRequestedIsSet()) || (cancelRequestedIsSet() && rhs.cancelRequestedIsSet() && isCancelRequested() == rhs.isCancelRequested())) &&
    
    
    ((!expiryDateIsSet() && !rhs.expiryDateIsSet()) || (expiryDateIsSet() && rhs.expiryDateIsSet() && getExpiryDate() == rhs.getExpiryDate()))
    
    ;
}

bool OrderDTO::operator!=(const OrderDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.substatusIsSet())
        j["substatus"] = o.m_Substatus;
    if(o.creationDateIsSet())
        j["creationDate"] = o.m_CreationDate;
    if(o.updatedAtIsSet())
        j["updatedAt"] = o.m_UpdatedAt;
    if(o.currencyIsSet())
        j["currency"] = o.m_Currency;
    if(o.itemsTotalIsSet())
        j["itemsTotal"] = o.m_ItemsTotal;
    if(o.deliveryTotalIsSet())
        j["deliveryTotal"] = o.m_DeliveryTotal;
    if(o.buyerItemsTotalIsSet())
        j["buyerItemsTotal"] = o.m_BuyerItemsTotal;
    if(o.buyerTotalIsSet())
        j["buyerTotal"] = o.m_BuyerTotal;
    if(o.buyerItemsTotalBeforeDiscountIsSet())
        j["buyerItemsTotalBeforeDiscount"] = o.m_BuyerItemsTotalBeforeDiscount;
    if(o.buyerTotalBeforeDiscountIsSet())
        j["buyerTotalBeforeDiscount"] = o.m_BuyerTotalBeforeDiscount;
    if(o.paymentTypeIsSet())
        j["paymentType"] = o.m_PaymentType;
    if(o.paymentMethodIsSet())
        j["paymentMethod"] = o.m_PaymentMethod;
    if(o.fakeIsSet())
        j["fake"] = o.m_Fake;
    j["items"] = o.m_Items;
    if(o.subsidiesIsSet() || !o.m_Subsidies.empty())
        j["subsidies"] = o.m_Subsidies;
    if(o.deliveryIsSet())
        j["delivery"] = o.m_Delivery;
    if(o.buyerIsSet())
        j["buyer"] = o.m_Buyer;
    if(o.notesIsSet())
        j["notes"] = o.m_Notes;
    if(o.taxSystemIsSet())
        j["taxSystem"] = o.m_TaxSystem;
    if(o.cancelRequestedIsSet())
        j["cancelRequested"] = o.m_CancelRequested;
    if(o.expiryDateIsSet())
        j["expiryDate"] = o.m_ExpiryDate;
    
}

void from_json(const nlohmann::json& j, OrderDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("substatus") != j.end())
    {
        j.at("substatus").get_to(o.m_Substatus);
        o.m_SubstatusIsSet = true;
    } 
    if(j.find("creationDate") != j.end())
    {
        j.at("creationDate").get_to(o.m_CreationDate);
        o.m_CreationDateIsSet = true;
    } 
    if(j.find("updatedAt") != j.end())
    {
        j.at("updatedAt").get_to(o.m_UpdatedAt);
        o.m_UpdatedAtIsSet = true;
    } 
    if(j.find("currency") != j.end())
    {
        j.at("currency").get_to(o.m_Currency);
        o.m_CurrencyIsSet = true;
    } 
    if(j.find("itemsTotal") != j.end())
    {
        j.at("itemsTotal").get_to(o.m_ItemsTotal);
        o.m_ItemsTotalIsSet = true;
    } 
    if(j.find("deliveryTotal") != j.end())
    {
        j.at("deliveryTotal").get_to(o.m_DeliveryTotal);
        o.m_DeliveryTotalIsSet = true;
    } 
    if(j.find("buyerItemsTotal") != j.end())
    {
        j.at("buyerItemsTotal").get_to(o.m_BuyerItemsTotal);
        o.m_BuyerItemsTotalIsSet = true;
    } 
    if(j.find("buyerTotal") != j.end())
    {
        j.at("buyerTotal").get_to(o.m_BuyerTotal);
        o.m_BuyerTotalIsSet = true;
    } 
    if(j.find("buyerItemsTotalBeforeDiscount") != j.end())
    {
        j.at("buyerItemsTotalBeforeDiscount").get_to(o.m_BuyerItemsTotalBeforeDiscount);
        o.m_BuyerItemsTotalBeforeDiscountIsSet = true;
    } 
    if(j.find("buyerTotalBeforeDiscount") != j.end())
    {
        j.at("buyerTotalBeforeDiscount").get_to(o.m_BuyerTotalBeforeDiscount);
        o.m_BuyerTotalBeforeDiscountIsSet = true;
    } 
    if(j.find("paymentType") != j.end())
    {
        j.at("paymentType").get_to(o.m_PaymentType);
        o.m_PaymentTypeIsSet = true;
    } 
    if(j.find("paymentMethod") != j.end())
    {
        j.at("paymentMethod").get_to(o.m_PaymentMethod);
        o.m_PaymentMethodIsSet = true;
    } 
    if(j.find("fake") != j.end())
    {
        j.at("fake").get_to(o.m_Fake);
        o.m_FakeIsSet = true;
    } 
    j.at("items").get_to(o.m_Items);
    if(j.find("subsidies") != j.end())
    {
        j.at("subsidies").get_to(o.m_Subsidies);
        o.m_SubsidiesIsSet = true;
    } 
    if(j.find("delivery") != j.end())
    {
        j.at("delivery").get_to(o.m_Delivery);
        o.m_DeliveryIsSet = true;
    } 
    if(j.find("buyer") != j.end())
    {
        j.at("buyer").get_to(o.m_Buyer);
        o.m_BuyerIsSet = true;
    } 
    if(j.find("notes") != j.end())
    {
        j.at("notes").get_to(o.m_Notes);
        o.m_NotesIsSet = true;
    } 
    if(j.find("taxSystem") != j.end())
    {
        j.at("taxSystem").get_to(o.m_TaxSystem);
        o.m_TaxSystemIsSet = true;
    } 
    if(j.find("cancelRequested") != j.end())
    {
        j.at("cancelRequested").get_to(o.m_CancelRequested);
        o.m_CancelRequestedIsSet = true;
    } 
    if(j.find("expiryDate") != j.end())
    {
        j.at("expiryDate").get_to(o.m_ExpiryDate);
        o.m_ExpiryDateIsSet = true;
    } 
    
}

int64_t OrderDTO::getId() const
{
    return m_Id;
}
void OrderDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool OrderDTO::idIsSet() const
{
    return m_IdIsSet;
}
void OrderDTO::unsetId()
{
    m_IdIsSet = false;
}
org::openapitools::server::model::OrderStatusType OrderDTO::getStatus() const
{
    return m_Status;
}
void OrderDTO::setStatus(org::openapitools::server::model::OrderStatusType const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool OrderDTO::statusIsSet() const
{
    return m_StatusIsSet;
}
void OrderDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
org::openapitools::server::model::OrderSubstatusType OrderDTO::getSubstatus() const
{
    return m_Substatus;
}
void OrderDTO::setSubstatus(org::openapitools::server::model::OrderSubstatusType const& value)
{
    m_Substatus = value;
    m_SubstatusIsSet = true;
}
bool OrderDTO::substatusIsSet() const
{
    return m_SubstatusIsSet;
}
void OrderDTO::unsetSubstatus()
{
    m_SubstatusIsSet = false;
}
std::string OrderDTO::getCreationDate() const
{
    return m_CreationDate;
}
void OrderDTO::setCreationDate(std::string const& value)
{
    m_CreationDate = value;
    m_CreationDateIsSet = true;
}
bool OrderDTO::creationDateIsSet() const
{
    return m_CreationDateIsSet;
}
void OrderDTO::unsetCreationDate()
{
    m_CreationDateIsSet = false;
}
std::string OrderDTO::getUpdatedAt() const
{
    return m_UpdatedAt;
}
void OrderDTO::setUpdatedAt(std::string const& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}
bool OrderDTO::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}
void OrderDTO::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
org::openapitools::server::model::CurrencyType OrderDTO::getCurrency() const
{
    return m_Currency;
}
void OrderDTO::setCurrency(org::openapitools::server::model::CurrencyType const& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool OrderDTO::currencyIsSet() const
{
    return m_CurrencyIsSet;
}
void OrderDTO::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
double OrderDTO::getItemsTotal() const
{
    return m_ItemsTotal;
}
void OrderDTO::setItemsTotal(double const value)
{
    m_ItemsTotal = value;
    m_ItemsTotalIsSet = true;
}
bool OrderDTO::itemsTotalIsSet() const
{
    return m_ItemsTotalIsSet;
}
void OrderDTO::unsetItemsTotal()
{
    m_ItemsTotalIsSet = false;
}
double OrderDTO::getDeliveryTotal() const
{
    return m_DeliveryTotal;
}
void OrderDTO::setDeliveryTotal(double const value)
{
    m_DeliveryTotal = value;
    m_DeliveryTotalIsSet = true;
}
bool OrderDTO::deliveryTotalIsSet() const
{
    return m_DeliveryTotalIsSet;
}
void OrderDTO::unsetDeliveryTotal()
{
    m_DeliveryTotalIsSet = false;
}
double OrderDTO::getBuyerItemsTotal() const
{
    return m_BuyerItemsTotal;
}
void OrderDTO::setBuyerItemsTotal(double const value)
{
    m_BuyerItemsTotal = value;
    m_BuyerItemsTotalIsSet = true;
}
bool OrderDTO::buyerItemsTotalIsSet() const
{
    return m_BuyerItemsTotalIsSet;
}
void OrderDTO::unsetBuyerItemsTotal()
{
    m_BuyerItemsTotalIsSet = false;
}
double OrderDTO::getBuyerTotal() const
{
    return m_BuyerTotal;
}
void OrderDTO::setBuyerTotal(double const value)
{
    m_BuyerTotal = value;
    m_BuyerTotalIsSet = true;
}
bool OrderDTO::buyerTotalIsSet() const
{
    return m_BuyerTotalIsSet;
}
void OrderDTO::unsetBuyerTotal()
{
    m_BuyerTotalIsSet = false;
}
double OrderDTO::getBuyerItemsTotalBeforeDiscount() const
{
    return m_BuyerItemsTotalBeforeDiscount;
}
void OrderDTO::setBuyerItemsTotalBeforeDiscount(double const value)
{
    m_BuyerItemsTotalBeforeDiscount = value;
    m_BuyerItemsTotalBeforeDiscountIsSet = true;
}
bool OrderDTO::buyerItemsTotalBeforeDiscountIsSet() const
{
    return m_BuyerItemsTotalBeforeDiscountIsSet;
}
void OrderDTO::unsetBuyerItemsTotalBeforeDiscount()
{
    m_BuyerItemsTotalBeforeDiscountIsSet = false;
}
double OrderDTO::getBuyerTotalBeforeDiscount() const
{
    return m_BuyerTotalBeforeDiscount;
}
void OrderDTO::setBuyerTotalBeforeDiscount(double const value)
{
    m_BuyerTotalBeforeDiscount = value;
    m_BuyerTotalBeforeDiscountIsSet = true;
}
bool OrderDTO::buyerTotalBeforeDiscountIsSet() const
{
    return m_BuyerTotalBeforeDiscountIsSet;
}
void OrderDTO::unsetBuyerTotalBeforeDiscount()
{
    m_BuyerTotalBeforeDiscountIsSet = false;
}
org::openapitools::server::model::OrderPaymentType OrderDTO::getPaymentType() const
{
    return m_PaymentType;
}
void OrderDTO::setPaymentType(org::openapitools::server::model::OrderPaymentType const& value)
{
    m_PaymentType = value;
    m_PaymentTypeIsSet = true;
}
bool OrderDTO::paymentTypeIsSet() const
{
    return m_PaymentTypeIsSet;
}
void OrderDTO::unsetPaymentType()
{
    m_PaymentTypeIsSet = false;
}
org::openapitools::server::model::OrderPaymentMethodType OrderDTO::getPaymentMethod() const
{
    return m_PaymentMethod;
}
void OrderDTO::setPaymentMethod(org::openapitools::server::model::OrderPaymentMethodType const& value)
{
    m_PaymentMethod = value;
    m_PaymentMethodIsSet = true;
}
bool OrderDTO::paymentMethodIsSet() const
{
    return m_PaymentMethodIsSet;
}
void OrderDTO::unsetPaymentMethod()
{
    m_PaymentMethodIsSet = false;
}
bool OrderDTO::isFake() const
{
    return m_Fake;
}
void OrderDTO::setFake(bool const value)
{
    m_Fake = value;
    m_FakeIsSet = true;
}
bool OrderDTO::fakeIsSet() const
{
    return m_FakeIsSet;
}
void OrderDTO::unsetFake()
{
    m_FakeIsSet = false;
}
std::vector<org::openapitools::server::model::OrderItemDTO> OrderDTO::getItems() const
{
    return m_Items;
}
void OrderDTO::setItems(std::vector<org::openapitools::server::model::OrderItemDTO> const& value)
{
    m_Items = value;
}
std::vector<org::openapitools::server::model::OrderSubsidyDTO> OrderDTO::getSubsidies() const
{
    return m_Subsidies;
}
void OrderDTO::setSubsidies(std::vector<org::openapitools::server::model::OrderSubsidyDTO> const& value)
{
    m_Subsidies = value;
    m_SubsidiesIsSet = true;
}
bool OrderDTO::subsidiesIsSet() const
{
    return m_SubsidiesIsSet;
}
void OrderDTO::unsetSubsidies()
{
    m_SubsidiesIsSet = false;
}
org::openapitools::server::model::OrderDeliveryDTO OrderDTO::getDelivery() const
{
    return m_Delivery;
}
void OrderDTO::setDelivery(org::openapitools::server::model::OrderDeliveryDTO const& value)
{
    m_Delivery = value;
    m_DeliveryIsSet = true;
}
bool OrderDTO::deliveryIsSet() const
{
    return m_DeliveryIsSet;
}
void OrderDTO::unsetDelivery()
{
    m_DeliveryIsSet = false;
}
org::openapitools::server::model::OrderBuyerDTO OrderDTO::getBuyer() const
{
    return m_Buyer;
}
void OrderDTO::setBuyer(org::openapitools::server::model::OrderBuyerDTO const& value)
{
    m_Buyer = value;
    m_BuyerIsSet = true;
}
bool OrderDTO::buyerIsSet() const
{
    return m_BuyerIsSet;
}
void OrderDTO::unsetBuyer()
{
    m_BuyerIsSet = false;
}
std::string OrderDTO::getNotes() const
{
    return m_Notes;
}
void OrderDTO::setNotes(std::string const& value)
{
    m_Notes = value;
    m_NotesIsSet = true;
}
bool OrderDTO::notesIsSet() const
{
    return m_NotesIsSet;
}
void OrderDTO::unsetNotes()
{
    m_NotesIsSet = false;
}
org::openapitools::server::model::OrderTaxSystemType OrderDTO::getTaxSystem() const
{
    return m_TaxSystem;
}
void OrderDTO::setTaxSystem(org::openapitools::server::model::OrderTaxSystemType const& value)
{
    m_TaxSystem = value;
    m_TaxSystemIsSet = true;
}
bool OrderDTO::taxSystemIsSet() const
{
    return m_TaxSystemIsSet;
}
void OrderDTO::unsetTaxSystem()
{
    m_TaxSystemIsSet = false;
}
bool OrderDTO::isCancelRequested() const
{
    return m_CancelRequested;
}
void OrderDTO::setCancelRequested(bool const value)
{
    m_CancelRequested = value;
    m_CancelRequestedIsSet = true;
}
bool OrderDTO::cancelRequestedIsSet() const
{
    return m_CancelRequestedIsSet;
}
void OrderDTO::unsetCancelRequested()
{
    m_CancelRequestedIsSet = false;
}
std::string OrderDTO::getExpiryDate() const
{
    return m_ExpiryDate;
}
void OrderDTO::setExpiryDate(std::string const& value)
{
    m_ExpiryDate = value;
    m_ExpiryDateIsSet = true;
}
bool OrderDTO::expiryDateIsSet() const
{
    return m_ExpiryDateIsSet;
}
void OrderDTO::unsetExpiryDate()
{
    m_ExpiryDateIsSet = false;
}


} // namespace org::openapitools::server::model

