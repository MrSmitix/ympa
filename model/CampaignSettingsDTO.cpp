/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CampaignSettingsDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CampaignSettingsDTO::CampaignSettingsDTO()
{
    m_CountryRegion = 0L;
    m_CountryRegionIsSet = false;
    m_ShopName = "";
    m_ShopNameIsSet = false;
    m_ShowInContext = false;
    m_ShowInContextIsSet = false;
    m_ShowInPremium = false;
    m_ShowInPremiumIsSet = false;
    m_UseOpenStat = false;
    m_UseOpenStatIsSet = false;
    m_LocalRegionIsSet = false;
    
}

void CampaignSettingsDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CampaignSettingsDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CampaignSettingsDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CampaignSettingsDTO" : pathPrefix;

                            
    return success;
}

bool CampaignSettingsDTO::operator==(const CampaignSettingsDTO& rhs) const
{
    return
    
    
    
    ((!countryRegionIsSet() && !rhs.countryRegionIsSet()) || (countryRegionIsSet() && rhs.countryRegionIsSet() && getCountryRegion() == rhs.getCountryRegion())) &&
    
    
    ((!shopNameIsSet() && !rhs.shopNameIsSet()) || (shopNameIsSet() && rhs.shopNameIsSet() && getShopName() == rhs.getShopName())) &&
    
    
    ((!showInContextIsSet() && !rhs.showInContextIsSet()) || (showInContextIsSet() && rhs.showInContextIsSet() && isShowInContext() == rhs.isShowInContext())) &&
    
    
    ((!showInPremiumIsSet() && !rhs.showInPremiumIsSet()) || (showInPremiumIsSet() && rhs.showInPremiumIsSet() && isShowInPremium() == rhs.isShowInPremium())) &&
    
    
    ((!useOpenStatIsSet() && !rhs.useOpenStatIsSet()) || (useOpenStatIsSet() && rhs.useOpenStatIsSet() && isUseOpenStat() == rhs.isUseOpenStat())) &&
    
    
    ((!localRegionIsSet() && !rhs.localRegionIsSet()) || (localRegionIsSet() && rhs.localRegionIsSet() && getLocalRegion() == rhs.getLocalRegion()))
    
    ;
}

bool CampaignSettingsDTO::operator!=(const CampaignSettingsDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CampaignSettingsDTO& o)
{
    j = nlohmann::json::object();
    if(o.countryRegionIsSet())
        j["countryRegion"] = o.m_CountryRegion;
    if(o.shopNameIsSet())
        j["shopName"] = o.m_ShopName;
    if(o.showInContextIsSet())
        j["showInContext"] = o.m_ShowInContext;
    if(o.showInPremiumIsSet())
        j["showInPremium"] = o.m_ShowInPremium;
    if(o.useOpenStatIsSet())
        j["useOpenStat"] = o.m_UseOpenStat;
    if(o.localRegionIsSet())
        j["localRegion"] = o.m_LocalRegion;
    
}

void from_json(const nlohmann::json& j, CampaignSettingsDTO& o)
{
    if(j.find("countryRegion") != j.end())
    {
        j.at("countryRegion").get_to(o.m_CountryRegion);
        o.m_CountryRegionIsSet = true;
    } 
    if(j.find("shopName") != j.end())
    {
        j.at("shopName").get_to(o.m_ShopName);
        o.m_ShopNameIsSet = true;
    } 
    if(j.find("showInContext") != j.end())
    {
        j.at("showInContext").get_to(o.m_ShowInContext);
        o.m_ShowInContextIsSet = true;
    } 
    if(j.find("showInPremium") != j.end())
    {
        j.at("showInPremium").get_to(o.m_ShowInPremium);
        o.m_ShowInPremiumIsSet = true;
    } 
    if(j.find("useOpenStat") != j.end())
    {
        j.at("useOpenStat").get_to(o.m_UseOpenStat);
        o.m_UseOpenStatIsSet = true;
    } 
    if(j.find("localRegion") != j.end())
    {
        j.at("localRegion").get_to(o.m_LocalRegion);
        o.m_LocalRegionIsSet = true;
    } 
    
}

int64_t CampaignSettingsDTO::getCountryRegion() const
{
    return m_CountryRegion;
}
void CampaignSettingsDTO::setCountryRegion(int64_t const value)
{
    m_CountryRegion = value;
    m_CountryRegionIsSet = true;
}
bool CampaignSettingsDTO::countryRegionIsSet() const
{
    return m_CountryRegionIsSet;
}
void CampaignSettingsDTO::unsetCountryRegion()
{
    m_CountryRegionIsSet = false;
}
std::string CampaignSettingsDTO::getShopName() const
{
    return m_ShopName;
}
void CampaignSettingsDTO::setShopName(std::string const& value)
{
    m_ShopName = value;
    m_ShopNameIsSet = true;
}
bool CampaignSettingsDTO::shopNameIsSet() const
{
    return m_ShopNameIsSet;
}
void CampaignSettingsDTO::unsetShopName()
{
    m_ShopNameIsSet = false;
}
bool CampaignSettingsDTO::isShowInContext() const
{
    return m_ShowInContext;
}
void CampaignSettingsDTO::setShowInContext(bool const value)
{
    m_ShowInContext = value;
    m_ShowInContextIsSet = true;
}
bool CampaignSettingsDTO::showInContextIsSet() const
{
    return m_ShowInContextIsSet;
}
void CampaignSettingsDTO::unsetShowInContext()
{
    m_ShowInContextIsSet = false;
}
bool CampaignSettingsDTO::isShowInPremium() const
{
    return m_ShowInPremium;
}
void CampaignSettingsDTO::setShowInPremium(bool const value)
{
    m_ShowInPremium = value;
    m_ShowInPremiumIsSet = true;
}
bool CampaignSettingsDTO::showInPremiumIsSet() const
{
    return m_ShowInPremiumIsSet;
}
void CampaignSettingsDTO::unsetShowInPremium()
{
    m_ShowInPremiumIsSet = false;
}
bool CampaignSettingsDTO::isUseOpenStat() const
{
    return m_UseOpenStat;
}
void CampaignSettingsDTO::setUseOpenStat(bool const value)
{
    m_UseOpenStat = value;
    m_UseOpenStatIsSet = true;
}
bool CampaignSettingsDTO::useOpenStatIsSet() const
{
    return m_UseOpenStatIsSet;
}
void CampaignSettingsDTO::unsetUseOpenStat()
{
    m_UseOpenStatIsSet = false;
}
org::openapitools::server::model::CampaignSettingsLocalRegionDTO CampaignSettingsDTO::getLocalRegion() const
{
    return m_LocalRegion;
}
void CampaignSettingsDTO::setLocalRegion(org::openapitools::server::model::CampaignSettingsLocalRegionDTO const& value)
{
    m_LocalRegion = value;
    m_LocalRegionIsSet = true;
}
bool CampaignSettingsDTO::localRegionIsSet() const
{
    return m_LocalRegionIsSet;
}
void CampaignSettingsDTO::unsetLocalRegion()
{
    m_LocalRegionIsSet = false;
}


} // namespace org::openapitools::server::model

