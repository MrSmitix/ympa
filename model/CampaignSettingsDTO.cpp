/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CampaignSettingsDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CampaignSettingsDTO::CampaignSettingsDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CampaignSettingsDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CampaignSettingsDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CampaignSettingsDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("countryRegion", m_CountryRegion);
	pt.put("shopName", m_ShopName);
	pt.put("showInContext", m_ShowInContext);
	pt.put("showInPremium", m_ShowInPremium);
	pt.put("useOpenStat", m_UseOpenStat);
	pt.add_child("localRegion", m_LocalRegion.toPropertyTree());
	return pt;
}

void CampaignSettingsDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_CountryRegion = pt.get("countryRegion", 0L);
	m_ShopName = pt.get("shopName", "");
	m_ShowInContext = pt.get("showInContext", false);
	m_ShowInPremium = pt.get("showInPremium", false);
	m_UseOpenStat = pt.get("useOpenStat", false);
	if (pt.get_child_optional("localRegion")) {
        m_LocalRegion = fromPt<CampaignSettingsLocalRegionDTO>(pt.get_child("localRegion"));
	}
}

int64_t CampaignSettingsDTO::getCountryRegion() const
{
    return m_CountryRegion;
}

void CampaignSettingsDTO::setCountryRegion(int64_t value)
{
    m_CountryRegion = value;
}


std::string CampaignSettingsDTO::getShopName() const
{
    return m_ShopName;
}

void CampaignSettingsDTO::setShopName(std::string value)
{
    m_ShopName = value;
}


bool CampaignSettingsDTO::isShowInContext() const
{
    return m_ShowInContext;
}

void CampaignSettingsDTO::setShowInContext(bool value)
{
    m_ShowInContext = value;
}


bool CampaignSettingsDTO::isShowInPremium() const
{
    return m_ShowInPremium;
}

void CampaignSettingsDTO::setShowInPremium(bool value)
{
    m_ShowInPremium = value;
}


bool CampaignSettingsDTO::isUseOpenStat() const
{
    return m_UseOpenStat;
}

void CampaignSettingsDTO::setUseOpenStat(bool value)
{
    m_UseOpenStat = value;
}


CampaignSettingsLocalRegionDTO CampaignSettingsDTO::getLocalRegion() const
{
    return m_LocalRegion;
}

void CampaignSettingsDTO::setLocalRegion(CampaignSettingsLocalRegionDTO value)
{
    m_LocalRegion = value;
}



std::vector<CampaignSettingsDTO> createCampaignSettingsDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CampaignSettingsDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(CampaignSettingsDTO(child.second));
    }

    return vec;
}

}
}
}
}

