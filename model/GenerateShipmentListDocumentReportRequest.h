/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateShipmentListDocumentReportRequest.h
 *
 * Данные, необходимые для генерации документа. 
 */

#ifndef GenerateShipmentListDocumentReportRequest_H_
#define GenerateShipmentListDocumentReportRequest_H_



#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Данные, необходимые для генерации документа. 
/// </summary>
class  GenerateShipmentListDocumentReportRequest 
{
public:
    GenerateShipmentListDocumentReportRequest() = default;
    explicit GenerateShipmentListDocumentReportRequest(boost::property_tree::ptree const& pt);
    virtual ~GenerateShipmentListDocumentReportRequest() = default;

    GenerateShipmentListDocumentReportRequest(const GenerateShipmentListDocumentReportRequest& other) = default; // copy constructor
    GenerateShipmentListDocumentReportRequest(GenerateShipmentListDocumentReportRequest&& other) noexcept = default; // move constructor

    GenerateShipmentListDocumentReportRequest& operator=(const GenerateShipmentListDocumentReportRequest& other) = default; // copy assignment
    GenerateShipmentListDocumentReportRequest& operator=(GenerateShipmentListDocumentReportRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GenerateShipmentListDocumentReportRequest members

    /// <summary>
    /// Идентификатор кампании.
    /// </summary>
    int64_t getCampaignId() const;
    void setCampaignId(int64_t value);

    /// <summary>
    /// Идентификатор отгрузки.
    /// </summary>
    int64_t getShipmentId() const;
    void setShipmentId(int64_t value);

    /// <summary>
    /// Фильтр по идентификаторам заказа в отгрузке.
    /// </summary>
    std::vector<int64_t> getOrderIds() const;
    void setOrderIds(std::vector<int64_t> value);

protected:
    int64_t m_CampaignId = 0L;
    int64_t m_ShipmentId = 0L;
    std::vector<int64_t> m_OrderIds;
};

std::vector<GenerateShipmentListDocumentReportRequest> createGenerateShipmentListDocumentReportRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GenerateShipmentListDocumentReportRequest>(const GenerateShipmentListDocumentReportRequest& val) {
    return val.toPropertyTree();
}

template<>
inline GenerateShipmentListDocumentReportRequest fromPt<GenerateShipmentListDocumentReportRequest>(const boost::property_tree::ptree& pt) {
    GenerateShipmentListDocumentReportRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GenerateShipmentListDocumentReportRequest_H_ */
