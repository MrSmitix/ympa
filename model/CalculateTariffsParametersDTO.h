/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CalculateTariffsParametersDTO.h
 *
 * Параметры для расчета стоимости услуг.
 */

#ifndef CalculateTariffsParametersDTO_H_
#define CalculateTariffsParametersDTO_H_



#include "PaymentFrequencyType.h"
#include "SellingProgramType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Параметры для расчета стоимости услуг.
/// </summary>
class  CalculateTariffsParametersDTO 
{
public:
    CalculateTariffsParametersDTO() = default;
    explicit CalculateTariffsParametersDTO(boost::property_tree::ptree const& pt);
    virtual ~CalculateTariffsParametersDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// CalculateTariffsParametersDTO members

    /// <summary>
    /// Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр &#x60;campaignId&#x60;, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке. 
    /// </summary>
    int64_t getCampaignId() const;
    void setCampaignId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SellingProgramType> getSellingProgram() const;
    void setSellingProgram(std::shared_ptr<SellingProgramType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PaymentFrequencyType> getFrequency() const;
    void setFrequency(std::shared_ptr<PaymentFrequencyType> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_CampaignId = 0L;
    std::shared_ptr<SellingProgramType> m_SellingProgram = std::make_shared<SellingProgramType>();
    std::shared_ptr<PaymentFrequencyType> m_Frequency = std::make_shared<PaymentFrequencyType>();
};

std::vector<CalculateTariffsParametersDTO> createCalculateTariffsParametersDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* CalculateTariffsParametersDTO_H_ */
