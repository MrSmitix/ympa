/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CalculateTariffsParametersDTO.h
 *
 * Параметры для расчета стоимости услуг.
 */

#ifndef CalculateTariffsParametersDTO_H_
#define CalculateTariffsParametersDTO_H_



#include "PaymentFrequencyType.h"
#include "SellingProgramType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Параметры для расчета стоимости услуг.
/// </summary>
class  CalculateTariffsParametersDTO 
{
public:
    CalculateTariffsParametersDTO() = default;
    explicit CalculateTariffsParametersDTO(boost::property_tree::ptree const& pt);
    virtual ~CalculateTariffsParametersDTO() = default;

    CalculateTariffsParametersDTO(const CalculateTariffsParametersDTO& other) = default; // copy constructor
    CalculateTariffsParametersDTO(CalculateTariffsParametersDTO&& other) noexcept = default; // move constructor

    CalculateTariffsParametersDTO& operator=(const CalculateTariffsParametersDTO& other) = default; // copy assignment
    CalculateTariffsParametersDTO& operator=(CalculateTariffsParametersDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CalculateTariffsParametersDTO members

    /// <summary>
    /// Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр &#x60;campaignId&#x60;, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке. 
    /// </summary>
    int64_t getCampaignId() const;
    void setCampaignId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    SellingProgramType getSellingProgram() const;
    void setSellingProgram(SellingProgramType value);

    /// <summary>
    /// 
    /// </summary>
    PaymentFrequencyType getFrequency() const;
    void setFrequency(PaymentFrequencyType value);

protected:
    int64_t m_CampaignId = 0L;
    SellingProgramType m_SellingProgram = SellingProgramType{};
    PaymentFrequencyType m_Frequency = PaymentFrequencyType{};
};

std::vector<CalculateTariffsParametersDTO> createCalculateTariffsParametersDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CalculateTariffsParametersDTO>(const CalculateTariffsParametersDTO& val) {
    return val.toPropertyTree();
}

template<>
inline CalculateTariffsParametersDTO fromPt<CalculateTariffsParametersDTO>(const boost::property_tree::ptree& pt) {
    CalculateTariffsParametersDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CalculateTariffsParametersDTO_H_ */
