/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SearchShipmentsRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SearchShipmentsRequest::SearchShipmentsRequest()
{
    m_StatusesIsSet = false;
    m_OrderIdsIsSet = false;
    m_CancelledOrders = true;
    m_CancelledOrdersIsSet = false;
    
}

void SearchShipmentsRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SearchShipmentsRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SearchShipmentsRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SearchShipmentsRequest" : pathPrefix;

                 
    if (statusesIsSet())
    {
        const std::set<org::openapitools::server::model::ShipmentStatusType>& value = m_Statuses;
        const std::string currentValuePath = _pathPrefix + ".statuses";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (!org::openapitools::server::helpers::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ShipmentStatusType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
         
    if (orderIdsIsSet())
    {
        const std::set<int64_t>& value = m_OrderIds;
        const std::string currentValuePath = _pathPrefix + ".orderIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (!org::openapitools::server::helpers::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool SearchShipmentsRequest::operator==(const SearchShipmentsRequest& rhs) const
{
    return
    
    
    (getDateFrom() == rhs.getDateFrom())
     &&
    
    (getDateTo() == rhs.getDateTo())
     &&
    
    
    ((!statusesIsSet() && !rhs.statusesIsSet()) || (statusesIsSet() && rhs.statusesIsSet() && getStatuses() == rhs.getStatuses())) &&
    
    
    ((!orderIdsIsSet() && !rhs.orderIdsIsSet()) || (orderIdsIsSet() && rhs.orderIdsIsSet() && getOrderIds() == rhs.getOrderIds())) &&
    
    
    ((!cancelledOrdersIsSet() && !rhs.cancelledOrdersIsSet()) || (cancelledOrdersIsSet() && rhs.cancelledOrdersIsSet() && isCancelledOrders() == rhs.isCancelledOrders()))
    
    ;
}

bool SearchShipmentsRequest::operator!=(const SearchShipmentsRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SearchShipmentsRequest& o)
{
    j = nlohmann::json::object();
    j["dateFrom"] = o.m_DateFrom;
    j["dateTo"] = o.m_DateTo;
    if(o.statusesIsSet() || !o.m_Statuses.empty())
        j["statuses"] = o.m_Statuses;
    if(o.orderIdsIsSet() || !o.m_OrderIds.empty())
        j["orderIds"] = o.m_OrderIds;
    if(o.cancelledOrdersIsSet())
        j["cancelledOrders"] = o.m_CancelledOrders;
    
}

void from_json(const nlohmann::json& j, SearchShipmentsRequest& o)
{
    j.at("dateFrom").get_to(o.m_DateFrom);
    j.at("dateTo").get_to(o.m_DateTo);
    if(j.find("statuses") != j.end())
    {
        j.at("statuses").get_to(o.m_Statuses);
        o.m_StatusesIsSet = true;
    } 
    if(j.find("orderIds") != j.end())
    {
        j.at("orderIds").get_to(o.m_OrderIds);
        o.m_OrderIdsIsSet = true;
    } 
    if(j.find("cancelledOrders") != j.end())
    {
        j.at("cancelledOrders").get_to(o.m_CancelledOrders);
        o.m_CancelledOrdersIsSet = true;
    } 
    
}

std::string SearchShipmentsRequest::getDateFrom() const
{
    return m_DateFrom;
}
void SearchShipmentsRequest::setDateFrom(std::string const& value)
{
    m_DateFrom = value;
}
std::string SearchShipmentsRequest::getDateTo() const
{
    return m_DateTo;
}
void SearchShipmentsRequest::setDateTo(std::string const& value)
{
    m_DateTo = value;
}
std::set<org::openapitools::server::model::ShipmentStatusType> SearchShipmentsRequest::getStatuses() const
{
    return m_Statuses;
}
void SearchShipmentsRequest::setStatuses(std::set<org::openapitools::server::model::ShipmentStatusType> const& value)
{
    m_Statuses = value;
    m_StatusesIsSet = true;
}
bool SearchShipmentsRequest::statusesIsSet() const
{
    return m_StatusesIsSet;
}
void SearchShipmentsRequest::unsetStatuses()
{
    m_StatusesIsSet = false;
}
std::set<int64_t> SearchShipmentsRequest::getOrderIds() const
{
    return m_OrderIds;
}
void SearchShipmentsRequest::setOrderIds(std::set<int64_t> const value)
{
    m_OrderIds = value;
    m_OrderIdsIsSet = true;
}
bool SearchShipmentsRequest::orderIdsIsSet() const
{
    return m_OrderIdsIsSet;
}
void SearchShipmentsRequest::unsetOrderIds()
{
    m_OrderIdsIsSet = false;
}
bool SearchShipmentsRequest::isCancelledOrders() const
{
    return m_CancelledOrders;
}
void SearchShipmentsRequest::setCancelledOrders(bool const value)
{
    m_CancelledOrders = value;
    m_CancelledOrdersIsSet = true;
}
bool SearchShipmentsRequest::cancelledOrdersIsSet() const
{
    return m_CancelledOrdersIsSet;
}
void SearchShipmentsRequest::unsetCancelledOrders()
{
    m_CancelledOrdersIsSet = false;
}


} // namespace org::openapitools::server::model

