/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GoodsFeedbackStatisticsDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GoodsFeedbackStatisticsDTO::GoodsFeedbackStatisticsDTO()
{
    m_Rating = 0;
    m_CommentsCount = 0L;
    m_Recommended = false;
    m_RecommendedIsSet = false;
    m_PaidAmount = 0L;
    m_PaidAmountIsSet = false;
    
}

void GoodsFeedbackStatisticsDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GoodsFeedbackStatisticsDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GoodsFeedbackStatisticsDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GoodsFeedbackStatisticsDTO" : pathPrefix;

         
    
    /* Rating */ {
        const int32_t& value = m_Rating;
        const std::string currentValuePath = _pathPrefix + ".rating";
                
        
        if (value < 1)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }
        if (value > 5)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 5;";
        }

    }
                
    return success;
}

bool GoodsFeedbackStatisticsDTO::operator==(const GoodsFeedbackStatisticsDTO& rhs) const
{
    return
    
    
    (getRating() == rhs.getRating())
     &&
    
    (getCommentsCount() == rhs.getCommentsCount())
     &&
    
    
    ((!recommendedIsSet() && !rhs.recommendedIsSet()) || (recommendedIsSet() && rhs.recommendedIsSet() && isRecommended() == rhs.isRecommended())) &&
    
    
    ((!paidAmountIsSet() && !rhs.paidAmountIsSet()) || (paidAmountIsSet() && rhs.paidAmountIsSet() && getPaidAmount() == rhs.getPaidAmount()))
    
    ;
}

bool GoodsFeedbackStatisticsDTO::operator!=(const GoodsFeedbackStatisticsDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GoodsFeedbackStatisticsDTO& o)
{
    j = nlohmann::json::object();
    j["rating"] = o.m_Rating;
    j["commentsCount"] = o.m_CommentsCount;
    if(o.recommendedIsSet())
        j["recommended"] = o.m_Recommended;
    if(o.paidAmountIsSet())
        j["paidAmount"] = o.m_PaidAmount;
    
}

void from_json(const nlohmann::json& j, GoodsFeedbackStatisticsDTO& o)
{
    j.at("rating").get_to(o.m_Rating);
    j.at("commentsCount").get_to(o.m_CommentsCount);
    if(j.find("recommended") != j.end())
    {
        j.at("recommended").get_to(o.m_Recommended);
        o.m_RecommendedIsSet = true;
    } 
    if(j.find("paidAmount") != j.end())
    {
        j.at("paidAmount").get_to(o.m_PaidAmount);
        o.m_PaidAmountIsSet = true;
    } 
    
}

int32_t GoodsFeedbackStatisticsDTO::getRating() const
{
    return m_Rating;
}
void GoodsFeedbackStatisticsDTO::setRating(int32_t const value)
{
    m_Rating = value;
}
int64_t GoodsFeedbackStatisticsDTO::getCommentsCount() const
{
    return m_CommentsCount;
}
void GoodsFeedbackStatisticsDTO::setCommentsCount(int64_t const value)
{
    m_CommentsCount = value;
}
bool GoodsFeedbackStatisticsDTO::isRecommended() const
{
    return m_Recommended;
}
void GoodsFeedbackStatisticsDTO::setRecommended(bool const value)
{
    m_Recommended = value;
    m_RecommendedIsSet = true;
}
bool GoodsFeedbackStatisticsDTO::recommendedIsSet() const
{
    return m_RecommendedIsSet;
}
void GoodsFeedbackStatisticsDTO::unsetRecommended()
{
    m_RecommendedIsSet = false;
}
int64_t GoodsFeedbackStatisticsDTO::getPaidAmount() const
{
    return m_PaidAmount;
}
void GoodsFeedbackStatisticsDTO::setPaidAmount(int64_t const value)
{
    m_PaidAmount = value;
    m_PaidAmountIsSet = true;
}
bool GoodsFeedbackStatisticsDTO::paidAmountIsSet() const
{
    return m_PaidAmountIsSet;
}
void GoodsFeedbackStatisticsDTO::unsetPaidAmount()
{
    m_PaidAmountIsSet = false;
}


} // namespace org::openapitools::server::model

