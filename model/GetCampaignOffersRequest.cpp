/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GetCampaignOffersRequest.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

GetCampaignOffersRequest::GetCampaignOffersRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string GetCampaignOffersRequest::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void GetCampaignOffersRequest::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree GetCampaignOffersRequest::toPropertyTree()
{
    return toPropertyTree_internal();
}

void GetCampaignOffersRequest::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string GetCampaignOffersRequest::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void GetCampaignOffersRequest::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree GetCampaignOffersRequest::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	// generate tree for OfferIds
	if (!m_OfferIds.empty()) {
		for (const auto &childEntry : m_OfferIds) {
            ptree OfferIds_node;
            OfferIds_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", OfferIds_node));
		}
		pt.add_child("offerIds", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Statuses
	if (!m_Statuses.empty()) {
		for (const auto &childEntry : m_Statuses) {
            ptree Statuses_node;
            Statuses_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Statuses_node));
		}
		pt.add_child("statuses", tmp_node);
		tmp_node.clear();
	}
	// generate tree for CategoryIds
	if (!m_CategoryIds.empty()) {
		for (const auto &childEntry : m_CategoryIds) {
            ptree CategoryIds_node;
            CategoryIds_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", CategoryIds_node));
		}
		pt.add_child("categoryIds", tmp_node);
		tmp_node.clear();
	}
	// generate tree for VendorNames
	if (!m_VendorNames.empty()) {
		for (const auto &childEntry : m_VendorNames) {
            ptree VendorNames_node;
            VendorNames_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", VendorNames_node));
		}
		pt.add_child("vendorNames", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Tags
	if (!m_Tags.empty()) {
		for (const auto &childEntry : m_Tags) {
            ptree Tags_node;
            Tags_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Tags_node));
		}
		pt.add_child("tags", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void GetCampaignOffersRequest::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	// push all items of OfferIds into member vector
	if (pt.get_child_optional("offerIds")) {
		for (const auto &childTree : pt.get_child("offerIds")) {
            std::string val =
                childTree.second.data();
            m_OfferIds.emplace_back(std::move(val));
		}
	}
	// push all items of Statuses into member vector
	if (pt.get_child_optional("statuses")) {
		for (const auto &childTree : pt.get_child("statuses")) {
            std::shared_ptr<OfferCampaignStatusType> val =
            m_Statuses.emplace_back(std::move(val));
		}
	}
	// push all items of CategoryIds into member vector
	if (pt.get_child_optional("categoryIds")) {
		for (const auto &childTree : pt.get_child("categoryIds")) {
            int32_t val =
                std::stoi(childTree.second.data());
            m_CategoryIds.emplace_back(std::move(val));
		}
	}
	// push all items of VendorNames into member vector
	if (pt.get_child_optional("vendorNames")) {
		for (const auto &childTree : pt.get_child("vendorNames")) {
            std::string val =
                childTree.second.data();
            m_VendorNames.emplace_back(std::move(val));
		}
	}
	// push all items of Tags into member vector
	if (pt.get_child_optional("tags")) {
		for (const auto &childTree : pt.get_child("tags")) {
            std::string val =
                childTree.second.data();
            m_Tags.emplace_back(std::move(val));
		}
	}
}

std::vector<std::shared_ptr<std::string>> GetCampaignOffersRequest::getOfferIds() const
{
    return m_OfferIds;
}

void GetCampaignOffersRequest::setOfferIds(std::vector<std::shared_ptr<std::string>> value)
{
	m_OfferIds = value;
}
std::vector<std::shared_ptr<OfferCampaignStatusType>> GetCampaignOffersRequest::getStatuses() const
{
    return m_Statuses;
}

void GetCampaignOffersRequest::setStatuses(std::vector<std::shared_ptr<OfferCampaignStatusType>> value)
{
	m_Statuses = value;
}
std::vector<int32_t> GetCampaignOffersRequest::getCategoryIds() const
{
    return m_CategoryIds;
}

void GetCampaignOffersRequest::setCategoryIds(std::vector<int32_t> value)
{
	m_CategoryIds = value;
}
std::vector<std::string> GetCampaignOffersRequest::getVendorNames() const
{
    return m_VendorNames;
}

void GetCampaignOffersRequest::setVendorNames(std::vector<std::string> value)
{
	m_VendorNames = value;
}
std::vector<std::string> GetCampaignOffersRequest::getTags() const
{
    return m_Tags;
}

void GetCampaignOffersRequest::setTags(std::vector<std::string> value)
{
	m_Tags = value;
}

std::vector<GetCampaignOffersRequest> createGetCampaignOffersRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<GetCampaignOffersRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(GetCampaignOffersRequest(child.second));
    }

    return vec;
}

}
}
}
}

