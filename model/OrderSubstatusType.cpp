/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderSubstatusType.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

OrderSubstatusType::OrderSubstatusType()
{
    
}

void OrderSubstatusType::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderSubstatusType::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderSubstatusType::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderSubstatusType" : pathPrefix;

    
    if (m_value == OrderSubstatusType::eOrderSubstatusType::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool OrderSubstatusType::operator==(const OrderSubstatusType& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool OrderSubstatusType::operator!=(const OrderSubstatusType& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderSubstatusType& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case OrderSubstatusType::eOrderSubstatusType::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::RESERVATION_EXPIRED:
            j = "RESERVATION_EXPIRED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_NOT_PAID:
            j = "USER_NOT_PAID";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_UNREACHABLE:
            j = "USER_UNREACHABLE";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_CHANGED_MIND:
            j = "USER_CHANGED_MIND";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_REFUSED_DELIVERY:
            j = "USER_REFUSED_DELIVERY";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_REFUSED_PRODUCT:
            j = "USER_REFUSED_PRODUCT";
            break;
        case OrderSubstatusType::eOrderSubstatusType::SHOP_FAILED:
            j = "SHOP_FAILED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_REFUSED_QUALITY:
            j = "USER_REFUSED_QUALITY";
            break;
        case OrderSubstatusType::eOrderSubstatusType::REPLACING_ORDER:
            j = "REPLACING_ORDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::PROCESSING_EXPIRED:
            j = "PROCESSING_EXPIRED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::PENDING_EXPIRED:
            j = "PENDING_EXPIRED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::SHOP_PENDING_CANCELLED:
            j = "SHOP_PENDING_CANCELLED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::PENDING_CANCELLED:
            j = "PENDING_CANCELLED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_FRAUD:
            j = "USER_FRAUD";
            break;
        case OrderSubstatusType::eOrderSubstatusType::RESERVATION_FAILED:
            j = "RESERVATION_FAILED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_PLACED_OTHER_ORDER:
            j = "USER_PLACED_OTHER_ORDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_BOUGHT_CHEAPER:
            j = "USER_BOUGHT_CHEAPER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::MISSING_ITEM:
            j = "MISSING_ITEM";
            break;
        case OrderSubstatusType::eOrderSubstatusType::BROKEN_ITEM:
            j = "BROKEN_ITEM";
            break;
        case OrderSubstatusType::eOrderSubstatusType::WRONG_ITEM:
            j = "WRONG_ITEM";
            break;
        case OrderSubstatusType::eOrderSubstatusType::PICKUP_EXPIRED:
            j = "PICKUP_EXPIRED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_PROBLEMS:
            j = "DELIVERY_PROBLEMS";
            break;
        case OrderSubstatusType::eOrderSubstatusType::LATE_CONTACT:
            j = "LATE_CONTACT";
            break;
        case OrderSubstatusType::eOrderSubstatusType::CUSTOM:
            j = "CUSTOM";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_FAILED:
            j = "DELIVERY_SERVICE_FAILED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::WAREHOUSE_FAILED_TO_SHIP:
            j = "WAREHOUSE_FAILED_TO_SHIP";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERIVCE_UNDELIVERED:
            j = "DELIVERY_SERIVCE_UNDELIVERED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_UNDELIVERED:
            j = "DELIVERY_SERVICE_UNDELIVERED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::PREORDER:
            j = "PREORDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::AWAIT_CONFIRMATION:
            j = "AWAIT_CONFIRMATION";
            break;
        case OrderSubstatusType::eOrderSubstatusType::STARTED:
            j = "STARTED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::PACKAGING:
            j = "PACKAGING";
            break;
        case OrderSubstatusType::eOrderSubstatusType::READY_TO_SHIP:
            j = "READY_TO_SHIP";
            break;
        case OrderSubstatusType::eOrderSubstatusType::SHIPPED:
            j = "SHIPPED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::ASYNC_PROCESSING:
            j = "ASYNC_PROCESSING";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_REFUSED_TO_PROVIDE_PERSONAL_DATA:
            j = "USER_REFUSED_TO_PROVIDE_PERSONAL_DATA";
            break;
        case OrderSubstatusType::eOrderSubstatusType::WAITING_USER_INPUT:
            j = "WAITING_USER_INPUT";
            break;
        case OrderSubstatusType::eOrderSubstatusType::WAITING_BANK_DECISION:
            j = "WAITING_BANK_DECISION";
            break;
        case OrderSubstatusType::eOrderSubstatusType::BANK_REJECT_CREDIT_OFFER:
            j = "BANK_REJECT_CREDIT_OFFER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::CUSTOMER_REJECT_CREDIT_OFFER:
            j = "CUSTOMER_REJECT_CREDIT_OFFER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::CREDIT_OFFER_FAILED:
            j = "CREDIT_OFFER_FAILED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::AWAIT_DELIVERY_DATES_CONFIRMATION:
            j = "AWAIT_DELIVERY_DATES_CONFIRMATION";
            break;
        case OrderSubstatusType::eOrderSubstatusType::SERVICE_FAULT:
            j = "SERVICE_FAULT";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_RECEIVED:
            j = "DELIVERY_SERVICE_RECEIVED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_RECEIVED:
            j = "USER_RECEIVED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::WAITING_FOR_STOCKS:
            j = "WAITING_FOR_STOCKS";
            break;
        case OrderSubstatusType::eOrderSubstatusType::AS_PART_OF_MULTI_ORDER:
            j = "AS_PART_OF_MULTI_ORDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::READY_FOR_LAST_MILE:
            j = "READY_FOR_LAST_MILE";
            break;
        case OrderSubstatusType::eOrderSubstatusType::LAST_MILE_STARTED:
            j = "LAST_MILE_STARTED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::ANTIFRAUD:
            j = "ANTIFRAUD";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_USER_NOT_RECEIVED:
            j = "DELIVERY_USER_NOT_RECEIVED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_DELIVERED:
            j = "DELIVERY_SERVICE_DELIVERED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERED_USER_NOT_RECEIVED:
            j = "DELIVERED_USER_NOT_RECEIVED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_WANTED_ANOTHER_PAYMENT_METHOD:
            j = "USER_WANTED_ANOTHER_PAYMENT_METHOD";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_RECEIVED_TECHNICAL_ERROR:
            j = "USER_RECEIVED_TECHNICAL_ERROR";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_FORGOT_TO_USE_BONUS:
            j = "USER_FORGOT_TO_USE_BONUS";
            break;
        case OrderSubstatusType::eOrderSubstatusType::RECEIVED_ON_DISTRIBUTION_CENTER:
            j = "RECEIVED_ON_DISTRIBUTION_CENTER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_NOT_RECEIVED:
            j = "DELIVERY_SERVICE_NOT_RECEIVED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_LOST:
            j = "DELIVERY_SERVICE_LOST";
            break;
        case OrderSubstatusType::eOrderSubstatusType::SHIPPED_TO_WRONG_DELIVERY_SERVICE:
            j = "SHIPPED_TO_WRONG_DELIVERY_SERVICE";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERED_USER_RECEIVED:
            j = "DELIVERED_USER_RECEIVED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::WAITING_TINKOFF_DECISION:
            j = "WAITING_TINKOFF_DECISION";
            break;
        case OrderSubstatusType::eOrderSubstatusType::COURIER_SEARCH:
            j = "COURIER_SEARCH";
            break;
        case OrderSubstatusType::eOrderSubstatusType::COURIER_FOUND:
            j = "COURIER_FOUND";
            break;
        case OrderSubstatusType::eOrderSubstatusType::COURIER_IN_TRANSIT_TO_SENDER:
            j = "COURIER_IN_TRANSIT_TO_SENDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::COURIER_ARRIVED_TO_SENDER:
            j = "COURIER_ARRIVED_TO_SENDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::COURIER_RECEIVED:
            j = "COURIER_RECEIVED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::COURIER_NOT_FOUND:
            j = "COURIER_NOT_FOUND";
            break;
        case OrderSubstatusType::eOrderSubstatusType::COURIER_NOT_DELIVER_ORDER:
            j = "COURIER_NOT_DELIVER_ORDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::COURIER_RETURNS_ORDER:
            j = "COURIER_RETURNS_ORDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::COURIER_RETURNED_ORDER:
            j = "COURIER_RETURNED_ORDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::WAITING_USER_DELIVERY_INPUT:
            j = "WAITING_USER_DELIVERY_INPUT";
            break;
        case OrderSubstatusType::eOrderSubstatusType::PICKUP_SERVICE_RECEIVED:
            j = "PICKUP_SERVICE_RECEIVED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::PICKUP_USER_RECEIVED:
            j = "PICKUP_USER_RECEIVED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::CANCELLED_COURIER_NOT_FOUND:
            j = "CANCELLED_COURIER_NOT_FOUND";
            break;
        case OrderSubstatusType::eOrderSubstatusType::COURIER_NOT_COME_FOR_ORDER:
            j = "COURIER_NOT_COME_FOR_ORDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_NOT_MANAGED_REGION:
            j = "DELIVERY_NOT_MANAGED_REGION";
            break;
        case OrderSubstatusType::eOrderSubstatusType::INCOMPLETE_CONTACT_INFORMATION:
            j = "INCOMPLETE_CONTACT_INFORMATION";
            break;
        case OrderSubstatusType::eOrderSubstatusType::INCOMPLETE_MULTI_ORDER:
            j = "INCOMPLETE_MULTI_ORDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::INAPPROPRIATE_WEIGHT_SIZE:
            j = "INAPPROPRIATE_WEIGHT_SIZE";
            break;
        case OrderSubstatusType::eOrderSubstatusType::TECHNICAL_ERROR:
            j = "TECHNICAL_ERROR";
            break;
        case OrderSubstatusType::eOrderSubstatusType::SORTING_CENTER_LOST:
            j = "SORTING_CENTER_LOST";
            break;
        case OrderSubstatusType::eOrderSubstatusType::COURIER_SEARCH_NOT_STARTED:
            j = "COURIER_SEARCH_NOT_STARTED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::LOST:
            j = "LOST";
            break;
        case OrderSubstatusType::eOrderSubstatusType::AWAIT_PAYMENT:
            j = "AWAIT_PAYMENT";
            break;
        case OrderSubstatusType::eOrderSubstatusType::AWAIT_LAVKA_RESERVATION:
            j = "AWAIT_LAVKA_RESERVATION";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_WANTS_TO_CHANGE_ADDRESS:
            j = "USER_WANTS_TO_CHANGE_ADDRESS";
            break;
        case OrderSubstatusType::eOrderSubstatusType::FULL_NOT_RANSOM:
            j = "FULL_NOT_RANSOM";
            break;
        case OrderSubstatusType::eOrderSubstatusType::PRESCRIPTION_MISMATCH:
            j = "PRESCRIPTION_MISMATCH";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DROPOFF_LOST:
            j = "DROPOFF_LOST";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DROPOFF_CLOSED:
            j = "DROPOFF_CLOSED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_TO_STORE_STARTED:
            j = "DELIVERY_TO_STORE_STARTED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_WANTS_TO_CHANGE_DELIVERY_DATE:
            j = "USER_WANTS_TO_CHANGE_DELIVERY_DATE";
            break;
        case OrderSubstatusType::eOrderSubstatusType::WRONG_ITEM_DELIVERED:
            j = "WRONG_ITEM_DELIVERED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DAMAGED_BOX:
            j = "DAMAGED_BOX";
            break;
        case OrderSubstatusType::eOrderSubstatusType::AWAIT_DELIVERY_DATES:
            j = "AWAIT_DELIVERY_DATES";
            break;
        case OrderSubstatusType::eOrderSubstatusType::LAST_MILE_COURIER_SEARCH:
            j = "LAST_MILE_COURIER_SEARCH";
            break;
        case OrderSubstatusType::eOrderSubstatusType::PICKUP_POINT_CLOSED:
            j = "PICKUP_POINT_CLOSED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::LEGAL_INFO_CHANGED:
            j = "LEGAL_INFO_CHANGED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::USER_HAS_NO_TIME_TO_PICKUP_ORDER:
            j = "USER_HAS_NO_TIME_TO_PICKUP_ORDER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_CUSTOMS_ARRIVED:
            j = "DELIVERY_CUSTOMS_ARRIVED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::DELIVERY_CUSTOMS_CLEARED:
            j = "DELIVERY_CUSTOMS_CLEARED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::FIRST_MILE_DELIVERY_SERVICE_RECEIVED:
            j = "FIRST_MILE_DELIVERY_SERVICE_RECEIVED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::AWAIT_AUTO_DELIVERY_DATES:
            j = "AWAIT_AUTO_DELIVERY_DATES";
            break;
        case OrderSubstatusType::eOrderSubstatusType::AWAIT_USER_PERSONAL_DATA:
            j = "AWAIT_USER_PERSONAL_DATA";
            break;
        case OrderSubstatusType::eOrderSubstatusType::NO_PERSONAL_DATA_EXPIRED:
            j = "NO_PERSONAL_DATA_EXPIRED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::CUSTOMS_PROBLEMS:
            j = "CUSTOMS_PROBLEMS";
            break;
        case OrderSubstatusType::eOrderSubstatusType::AWAIT_CASHIER:
            j = "AWAIT_CASHIER";
            break;
        case OrderSubstatusType::eOrderSubstatusType::WAITING_POSTPAID_BUDGET_RESERVATION:
            j = "WAITING_POSTPAID_BUDGET_RESERVATION";
            break;
        case OrderSubstatusType::eOrderSubstatusType::AWAIT_SERVICEABLE_CONFIRMATION:
            j = "AWAIT_SERVICEABLE_CONFIRMATION";
            break;
        case OrderSubstatusType::eOrderSubstatusType::POSTPAID_BUDGET_RESERVATION_FAILED:
            j = "POSTPAID_BUDGET_RESERVATION_FAILED";
            break;
        case OrderSubstatusType::eOrderSubstatusType::AWAIT_CUSTOM_PRICE_CONFIRMATION:
            j = "AWAIT_CUSTOM_PRICE_CONFIRMATION";
            break;
        case OrderSubstatusType::eOrderSubstatusType::READY_FOR_PICKUP:
            j = "READY_FOR_PICKUP";
            break;
        case OrderSubstatusType::eOrderSubstatusType::UNKNOWN:
            j = "UNKNOWN";
            break;
    }
}

void from_json(const nlohmann::json& j, OrderSubstatusType& o)
{
    
    auto s = j.get<std::string>();
    if (s == "RESERVATION_EXPIRED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::RESERVATION_EXPIRED);
    } 
    else if (s == "USER_NOT_PAID") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_NOT_PAID);
    } 
    else if (s == "USER_UNREACHABLE") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_UNREACHABLE);
    } 
    else if (s == "USER_CHANGED_MIND") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_CHANGED_MIND);
    } 
    else if (s == "USER_REFUSED_DELIVERY") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_REFUSED_DELIVERY);
    } 
    else if (s == "USER_REFUSED_PRODUCT") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_REFUSED_PRODUCT);
    } 
    else if (s == "SHOP_FAILED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::SHOP_FAILED);
    } 
    else if (s == "USER_REFUSED_QUALITY") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_REFUSED_QUALITY);
    } 
    else if (s == "REPLACING_ORDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::REPLACING_ORDER);
    } 
    else if (s == "PROCESSING_EXPIRED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::PROCESSING_EXPIRED);
    } 
    else if (s == "PENDING_EXPIRED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::PENDING_EXPIRED);
    } 
    else if (s == "SHOP_PENDING_CANCELLED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::SHOP_PENDING_CANCELLED);
    } 
    else if (s == "PENDING_CANCELLED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::PENDING_CANCELLED);
    } 
    else if (s == "USER_FRAUD") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_FRAUD);
    } 
    else if (s == "RESERVATION_FAILED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::RESERVATION_FAILED);
    } 
    else if (s == "USER_PLACED_OTHER_ORDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_PLACED_OTHER_ORDER);
    } 
    else if (s == "USER_BOUGHT_CHEAPER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_BOUGHT_CHEAPER);
    } 
    else if (s == "MISSING_ITEM") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::MISSING_ITEM);
    } 
    else if (s == "BROKEN_ITEM") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::BROKEN_ITEM);
    } 
    else if (s == "WRONG_ITEM") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::WRONG_ITEM);
    } 
    else if (s == "PICKUP_EXPIRED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::PICKUP_EXPIRED);
    } 
    else if (s == "DELIVERY_PROBLEMS") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_PROBLEMS);
    } 
    else if (s == "LATE_CONTACT") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::LATE_CONTACT);
    } 
    else if (s == "CUSTOM") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::CUSTOM);
    } 
    else if (s == "DELIVERY_SERVICE_FAILED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_FAILED);
    } 
    else if (s == "WAREHOUSE_FAILED_TO_SHIP") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::WAREHOUSE_FAILED_TO_SHIP);
    } 
    else if (s == "DELIVERY_SERIVCE_UNDELIVERED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERIVCE_UNDELIVERED);
    } 
    else if (s == "DELIVERY_SERVICE_UNDELIVERED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_UNDELIVERED);
    } 
    else if (s == "PREORDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::PREORDER);
    } 
    else if (s == "AWAIT_CONFIRMATION") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::AWAIT_CONFIRMATION);
    } 
    else if (s == "STARTED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::STARTED);
    } 
    else if (s == "PACKAGING") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::PACKAGING);
    } 
    else if (s == "READY_TO_SHIP") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::READY_TO_SHIP);
    } 
    else if (s == "SHIPPED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::SHIPPED);
    } 
    else if (s == "ASYNC_PROCESSING") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::ASYNC_PROCESSING);
    } 
    else if (s == "USER_REFUSED_TO_PROVIDE_PERSONAL_DATA") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_REFUSED_TO_PROVIDE_PERSONAL_DATA);
    } 
    else if (s == "WAITING_USER_INPUT") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::WAITING_USER_INPUT);
    } 
    else if (s == "WAITING_BANK_DECISION") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::WAITING_BANK_DECISION);
    } 
    else if (s == "BANK_REJECT_CREDIT_OFFER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::BANK_REJECT_CREDIT_OFFER);
    } 
    else if (s == "CUSTOMER_REJECT_CREDIT_OFFER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::CUSTOMER_REJECT_CREDIT_OFFER);
    } 
    else if (s == "CREDIT_OFFER_FAILED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::CREDIT_OFFER_FAILED);
    } 
    else if (s == "AWAIT_DELIVERY_DATES_CONFIRMATION") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::AWAIT_DELIVERY_DATES_CONFIRMATION);
    } 
    else if (s == "SERVICE_FAULT") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::SERVICE_FAULT);
    } 
    else if (s == "DELIVERY_SERVICE_RECEIVED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_RECEIVED);
    } 
    else if (s == "USER_RECEIVED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_RECEIVED);
    } 
    else if (s == "WAITING_FOR_STOCKS") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::WAITING_FOR_STOCKS);
    } 
    else if (s == "AS_PART_OF_MULTI_ORDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::AS_PART_OF_MULTI_ORDER);
    } 
    else if (s == "READY_FOR_LAST_MILE") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::READY_FOR_LAST_MILE);
    } 
    else if (s == "LAST_MILE_STARTED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::LAST_MILE_STARTED);
    } 
    else if (s == "ANTIFRAUD") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::ANTIFRAUD);
    } 
    else if (s == "DELIVERY_USER_NOT_RECEIVED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_USER_NOT_RECEIVED);
    } 
    else if (s == "DELIVERY_SERVICE_DELIVERED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_DELIVERED);
    } 
    else if (s == "DELIVERED_USER_NOT_RECEIVED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERED_USER_NOT_RECEIVED);
    } 
    else if (s == "USER_WANTED_ANOTHER_PAYMENT_METHOD") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_WANTED_ANOTHER_PAYMENT_METHOD);
    } 
    else if (s == "USER_RECEIVED_TECHNICAL_ERROR") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_RECEIVED_TECHNICAL_ERROR);
    } 
    else if (s == "USER_FORGOT_TO_USE_BONUS") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_FORGOT_TO_USE_BONUS);
    } 
    else if (s == "RECEIVED_ON_DISTRIBUTION_CENTER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::RECEIVED_ON_DISTRIBUTION_CENTER);
    } 
    else if (s == "DELIVERY_SERVICE_NOT_RECEIVED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_NOT_RECEIVED);
    } 
    else if (s == "DELIVERY_SERVICE_LOST") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_SERVICE_LOST);
    } 
    else if (s == "SHIPPED_TO_WRONG_DELIVERY_SERVICE") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::SHIPPED_TO_WRONG_DELIVERY_SERVICE);
    } 
    else if (s == "DELIVERED_USER_RECEIVED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERED_USER_RECEIVED);
    } 
    else if (s == "WAITING_TINKOFF_DECISION") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::WAITING_TINKOFF_DECISION);
    } 
    else if (s == "COURIER_SEARCH") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::COURIER_SEARCH);
    } 
    else if (s == "COURIER_FOUND") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::COURIER_FOUND);
    } 
    else if (s == "COURIER_IN_TRANSIT_TO_SENDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::COURIER_IN_TRANSIT_TO_SENDER);
    } 
    else if (s == "COURIER_ARRIVED_TO_SENDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::COURIER_ARRIVED_TO_SENDER);
    } 
    else if (s == "COURIER_RECEIVED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::COURIER_RECEIVED);
    } 
    else if (s == "COURIER_NOT_FOUND") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::COURIER_NOT_FOUND);
    } 
    else if (s == "COURIER_NOT_DELIVER_ORDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::COURIER_NOT_DELIVER_ORDER);
    } 
    else if (s == "COURIER_RETURNS_ORDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::COURIER_RETURNS_ORDER);
    } 
    else if (s == "COURIER_RETURNED_ORDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::COURIER_RETURNED_ORDER);
    } 
    else if (s == "WAITING_USER_DELIVERY_INPUT") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::WAITING_USER_DELIVERY_INPUT);
    } 
    else if (s == "PICKUP_SERVICE_RECEIVED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::PICKUP_SERVICE_RECEIVED);
    } 
    else if (s == "PICKUP_USER_RECEIVED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::PICKUP_USER_RECEIVED);
    } 
    else if (s == "CANCELLED_COURIER_NOT_FOUND") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::CANCELLED_COURIER_NOT_FOUND);
    } 
    else if (s == "COURIER_NOT_COME_FOR_ORDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::COURIER_NOT_COME_FOR_ORDER);
    } 
    else if (s == "DELIVERY_NOT_MANAGED_REGION") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_NOT_MANAGED_REGION);
    } 
    else if (s == "INCOMPLETE_CONTACT_INFORMATION") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::INCOMPLETE_CONTACT_INFORMATION);
    } 
    else if (s == "INCOMPLETE_MULTI_ORDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::INCOMPLETE_MULTI_ORDER);
    } 
    else if (s == "INAPPROPRIATE_WEIGHT_SIZE") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::INAPPROPRIATE_WEIGHT_SIZE);
    } 
    else if (s == "TECHNICAL_ERROR") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::TECHNICAL_ERROR);
    } 
    else if (s == "SORTING_CENTER_LOST") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::SORTING_CENTER_LOST);
    } 
    else if (s == "COURIER_SEARCH_NOT_STARTED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::COURIER_SEARCH_NOT_STARTED);
    } 
    else if (s == "LOST") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::LOST);
    } 
    else if (s == "AWAIT_PAYMENT") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::AWAIT_PAYMENT);
    } 
    else if (s == "AWAIT_LAVKA_RESERVATION") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::AWAIT_LAVKA_RESERVATION);
    } 
    else if (s == "USER_WANTS_TO_CHANGE_ADDRESS") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_WANTS_TO_CHANGE_ADDRESS);
    } 
    else if (s == "FULL_NOT_RANSOM") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::FULL_NOT_RANSOM);
    } 
    else if (s == "PRESCRIPTION_MISMATCH") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::PRESCRIPTION_MISMATCH);
    } 
    else if (s == "DROPOFF_LOST") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DROPOFF_LOST);
    } 
    else if (s == "DROPOFF_CLOSED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DROPOFF_CLOSED);
    } 
    else if (s == "DELIVERY_TO_STORE_STARTED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_TO_STORE_STARTED);
    } 
    else if (s == "USER_WANTS_TO_CHANGE_DELIVERY_DATE") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_WANTS_TO_CHANGE_DELIVERY_DATE);
    } 
    else if (s == "WRONG_ITEM_DELIVERED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::WRONG_ITEM_DELIVERED);
    } 
    else if (s == "DAMAGED_BOX") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DAMAGED_BOX);
    } 
    else if (s == "AWAIT_DELIVERY_DATES") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::AWAIT_DELIVERY_DATES);
    } 
    else if (s == "LAST_MILE_COURIER_SEARCH") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::LAST_MILE_COURIER_SEARCH);
    } 
    else if (s == "PICKUP_POINT_CLOSED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::PICKUP_POINT_CLOSED);
    } 
    else if (s == "LEGAL_INFO_CHANGED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::LEGAL_INFO_CHANGED);
    } 
    else if (s == "USER_HAS_NO_TIME_TO_PICKUP_ORDER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::USER_HAS_NO_TIME_TO_PICKUP_ORDER);
    } 
    else if (s == "DELIVERY_CUSTOMS_ARRIVED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_CUSTOMS_ARRIVED);
    } 
    else if (s == "DELIVERY_CUSTOMS_CLEARED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::DELIVERY_CUSTOMS_CLEARED);
    } 
    else if (s == "FIRST_MILE_DELIVERY_SERVICE_RECEIVED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::FIRST_MILE_DELIVERY_SERVICE_RECEIVED);
    } 
    else if (s == "AWAIT_AUTO_DELIVERY_DATES") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::AWAIT_AUTO_DELIVERY_DATES);
    } 
    else if (s == "AWAIT_USER_PERSONAL_DATA") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::AWAIT_USER_PERSONAL_DATA);
    } 
    else if (s == "NO_PERSONAL_DATA_EXPIRED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::NO_PERSONAL_DATA_EXPIRED);
    } 
    else if (s == "CUSTOMS_PROBLEMS") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::CUSTOMS_PROBLEMS);
    } 
    else if (s == "AWAIT_CASHIER") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::AWAIT_CASHIER);
    } 
    else if (s == "WAITING_POSTPAID_BUDGET_RESERVATION") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::WAITING_POSTPAID_BUDGET_RESERVATION);
    } 
    else if (s == "AWAIT_SERVICEABLE_CONFIRMATION") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::AWAIT_SERVICEABLE_CONFIRMATION);
    } 
    else if (s == "POSTPAID_BUDGET_RESERVATION_FAILED") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::POSTPAID_BUDGET_RESERVATION_FAILED);
    } 
    else if (s == "AWAIT_CUSTOM_PRICE_CONFIRMATION") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::AWAIT_CUSTOM_PRICE_CONFIRMATION);
    } 
    else if (s == "READY_FOR_PICKUP") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::READY_FOR_PICKUP);
    } 
    else if (s == "UNKNOWN") {
     o.setValue(OrderSubstatusType::eOrderSubstatusType::UNKNOWN);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " OrderSubstatusType::eOrderSubstatusType";
     throw std::invalid_argument(ss.str());
    } 

}

OrderSubstatusType::eOrderSubstatusType OrderSubstatusType::getValue() const
{
    return m_value;
}
void OrderSubstatusType::setValue(OrderSubstatusType::eOrderSubstatusType value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

