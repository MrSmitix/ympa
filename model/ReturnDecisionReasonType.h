/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnDecisionReasonType.h
 *
 * Причины возврата:  * &#x60;BAD_QUALITY&#x60; — бракованный товар (есть недостатки).  * &#x60;DO_NOT_FIT&#x60; — товар не подошел.  * &#x60;WRONG_ITEM&#x60; — привезли не тот товар.  * &#x60;DAMAGE_DELIVERY&#x60; — товар поврежден при доставке.  * &#x60;LOYALTY_FAIL&#x60; — невозможно установить виновного в браке/пересорте.  * &#x60;CONTENT_FAIL&#x60; — ошибочное описание товара по вине Маркета.  * &#x60;UNKNOWN&#x60; — причина не известна. 
 */

#ifndef ReturnDecisionReasonType_H_
#define ReturnDecisionReasonType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Причины возврата:  * &#x60;BAD_QUALITY&#x60; — бракованный товар (есть недостатки).  * &#x60;DO_NOT_FIT&#x60; — товар не подошел.  * &#x60;WRONG_ITEM&#x60; — привезли не тот товар.  * &#x60;DAMAGE_DELIVERY&#x60; — товар поврежден при доставке.  * &#x60;LOYALTY_FAIL&#x60; — невозможно установить виновного в браке/пересорте.  * &#x60;CONTENT_FAIL&#x60; — ошибочное описание товара по вине Маркета.  * &#x60;UNKNOWN&#x60; — причина не известна. 
/// </summary>
class  ReturnDecisionReasonType 
{
public:
    ReturnDecisionReasonType() = default;
    explicit ReturnDecisionReasonType(boost::property_tree::ptree const& pt);
    virtual ~ReturnDecisionReasonType() = default;

    ReturnDecisionReasonType(const ReturnDecisionReasonType& other) = default; // copy constructor
    ReturnDecisionReasonType(ReturnDecisionReasonType&& other) noexcept = default; // move constructor

    ReturnDecisionReasonType& operator=(const ReturnDecisionReasonType& other) = default; // copy assignment
    ReturnDecisionReasonType& operator=(ReturnDecisionReasonType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// ReturnDecisionReasonType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_ReturnDecisionReasonTypeEnumValue;
};

std::vector<ReturnDecisionReasonType> createReturnDecisionReasonTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ReturnDecisionReasonType>(const ReturnDecisionReasonType& val) {
    return val.toPropertyTree();
}

template<>
inline ReturnDecisionReasonType fromPt<ReturnDecisionReasonType>(const boost::property_tree::ptree& pt) {
    ReturnDecisionReasonType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ReturnDecisionReasonType_H_ */
