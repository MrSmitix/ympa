/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateUnitedMarketplaceServicesReportRequest.h
 *
 * Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 
 */

#ifndef GenerateUnitedMarketplaceServicesReportRequest_H_
#define GenerateUnitedMarketplaceServicesReportRequest_H_



#include <string>
#include "PlacementType.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 
/// </summary>
class  GenerateUnitedMarketplaceServicesReportRequest 
{
public:
    GenerateUnitedMarketplaceServicesReportRequest() = default;
    explicit GenerateUnitedMarketplaceServicesReportRequest(boost::property_tree::ptree const& pt);
    virtual ~GenerateUnitedMarketplaceServicesReportRequest() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// GenerateUnitedMarketplaceServicesReportRequest members

    /// <summary>
    /// Идентификатор бизнеса.
    /// </summary>
    int64_t getBusinessId() const;
    void setBusinessId(int64_t value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно. 
    /// </summary>
    std::string getDateTimeFrom() const;
    void setDateTimeFrom(std::string value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год. 
    /// </summary>
    std::string getDateTimeTo() const;
    void setDateTimeTo(std::string value);

    /// <summary>
    /// Начало периода, включительно.
    /// </summary>
    std::string getDateFrom() const;
    void setDateFrom(std::string value);

    /// <summary>
    /// Конец периода, включительно. Максимальный период — 1 год.
    /// </summary>
    std::string getDateTo() const;
    void setDateTo(std::string value);

    /// <summary>
    /// Начальный год формирования акта.
    /// </summary>
    int32_t getYearFrom() const;
    void setYearFrom(int32_t value);

    /// <summary>
    /// Начальный номер месяца формирования акта.
    /// </summary>
    int32_t getMonthFrom() const;
    void setMonthFrom(int32_t value);

    /// <summary>
    /// Конечный год формирования акта.
    /// </summary>
    int32_t getYearTo() const;
    void setYearTo(int32_t value);

    /// <summary>
    /// Конечный номер месяца формирования акта.
    /// </summary>
    int32_t getMonthTo() const;
    void setMonthTo(int32_t value);

    /// <summary>
    /// Список моделей, которые нужны в отчете. 
    /// </summary>
    std::vector<std::shared_ptr<PlacementType>> getPlacementPrograms() const;
    void setPlacementPrograms(std::vector<std::shared_ptr<PlacementType>> value);

    /// <summary>
    /// Список ИНН, которые нужны в отчете.
    /// </summary>
    std::vector<std::string> getInns() const;
    void setInns(std::vector<std::string> value);

    /// <summary>
    /// Список магазинов, которые нужны в отчете.
    /// </summary>
    std::vector<int64_t> getCampaignIds() const;
    void setCampaignIds(std::vector<int64_t> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_BusinessId = 0L;
    std::string m_DateTimeFrom = "";
    std::string m_DateTimeTo = "";
    std::string m_DateFrom = "";
    std::string m_DateTo = "";
    int32_t m_YearFrom = 0;
    int32_t m_MonthFrom = 0;
    int32_t m_YearTo = 0;
    int32_t m_MonthTo = 0;
    std::vector<std::shared_ptr<PlacementType>> m_PlacementPrograms;
    std::vector<std::string> m_Inns;
    std::vector<int64_t> m_CampaignIds;
};

std::vector<GenerateUnitedMarketplaceServicesReportRequest> createGenerateUnitedMarketplaceServicesReportRequestVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* GenerateUnitedMarketplaceServicesReportRequest_H_ */
