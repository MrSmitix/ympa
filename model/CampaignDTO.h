/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CampaignDTO.h
 *
 * Информация о магазине.
 */

#ifndef CampaignDTO_H_
#define CampaignDTO_H_



#include <string>
#include "PlacementType.h"
#include "BusinessDTO.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о магазине.
/// </summary>
class  CampaignDTO 
{
public:
    CampaignDTO() = default;
    explicit CampaignDTO(boost::property_tree::ptree const& pt);
    virtual ~CampaignDTO() = default;

    CampaignDTO(const CampaignDTO& other) = default; // copy constructor
    CampaignDTO(CampaignDTO&& other) noexcept = default; // move constructor

    CampaignDTO& operator=(const CampaignDTO& other) = default; // copy assignment
    CampaignDTO& operator=(CampaignDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CampaignDTO members

    /// <summary>
    /// URL магазина.
    /// </summary>
    std::string getDomain() const;
    void setDomain(std::string value);

    /// <summary>
    /// Идентификатор кампании.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Идентификатор плательщика в Яндекс Балансе.
    /// </summary>
    int64_t getClientId() const;
    void setClientId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    BusinessDTO getBusiness() const;
    void setBusiness(BusinessDTO value);

    /// <summary>
    /// 
    /// </summary>
    PlacementType getPlacementType() const;
    void setPlacementType(PlacementType value);

protected:
    std::string m_Domain = "";
    int64_t m_Id = 0L;
    int64_t m_ClientId = 0L;
    BusinessDTO m_Business;
    PlacementType m_PlacementType = PlacementType{};
};

std::vector<CampaignDTO> createCampaignDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CampaignDTO>(const CampaignDTO& val) {
    return val.toPropertyTree();
}

template<>
inline CampaignDTO fromPt<CampaignDTO>(const boost::property_tree::ptree& pt) {
    CampaignDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CampaignDTO_H_ */
