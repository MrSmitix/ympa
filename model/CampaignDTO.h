/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CampaignDTO.h
 *
 * Информация о магазине.
 */

#ifndef CampaignDTO_H_
#define CampaignDTO_H_



#include <string>
#include "PlacementType.h"
#include "BusinessDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о магазине.
/// </summary>
class  CampaignDTO 
{
public:
    CampaignDTO() = default;
    explicit CampaignDTO(boost::property_tree::ptree const& pt);
    virtual ~CampaignDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// CampaignDTO members

    /// <summary>
    /// URL магазина.
    /// </summary>
    std::string getDomain() const;
    void setDomain(std::string value);

    /// <summary>
    /// Идентификатор кампании.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Идентификатор плательщика в Яндекс Балансе.
    /// </summary>
    int64_t getClientId() const;
    void setClientId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BusinessDTO> getBusiness() const;
    void setBusiness(std::shared_ptr<BusinessDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlacementType> getPlacementType() const;
    void setPlacementType(std::shared_ptr<PlacementType> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Domain = "";
    int64_t m_Id = 0L;
    int64_t m_ClientId = 0L;
    std::shared_ptr<BusinessDTO> m_Business;
    std::shared_ptr<PlacementType> m_PlacementType = std::make_shared<PlacementType>();
};

std::vector<CampaignDTO> createCampaignDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* CampaignDTO_H_ */
