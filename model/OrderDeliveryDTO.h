/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrderDeliveryDTO.h
 *
 * Информация о доставке.
 */

#ifndef OrderDeliveryDTO_H_
#define OrderDeliveryDTO_H_


#include "OrderDeliveryEacType.h"
#include "OrderCourierDTO.h"
#include <string>
#include "OrderDeliveryType.h"
#include "OrderTrackDTO.h"
#include "RegionDTO.h"
#include <vector>
#include "OrderDeliveryDispatchType.h"
#include "OrderShipmentDTO.h"
#include "OrderDeliveryAddressDTO.h"
#include "OrderDeliveryDatesDTO.h"
#include "OrderLiftType.h"
#include "OrderVatType.h"
#include "OrderDeliveryPartnerType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о доставке.
/// </summary>
class  OrderDeliveryDTO
{
public:
    OrderDeliveryDTO();
    virtual ~OrderDeliveryDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OrderDeliveryDTO& rhs) const;
    bool operator!=(const OrderDeliveryDTO& rhs) const;

    /////////////////////////////////////////////
    /// OrderDeliveryDTO members

    /// <summary>
    /// Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderDeliveryType getType() const;
    void setType(org::openapitools::server::model::OrderDeliveryType const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// Наименование службы доставки.
    /// </summary>
    std::string getServiceName() const;
    void setServiceName(std::string const& value);
    bool serviceNameIsSet() const;
    void unsetServiceName();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Стоимость доставки смотрите в параметре &#x60;deliveryTotal&#x60;.  {% endnote %}  Стоимость доставки в валюте заказа. 
    /// </summary>
    double getPrice() const;
    void setPrice(double const value);
    bool priceIsSet() const;
    void unsetPrice();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderDeliveryPartnerType getDeliveryPartnerType() const;
    void setDeliveryPartnerType(org::openapitools::server::model::OrderDeliveryPartnerType const& value);
    bool deliveryPartnerTypeIsSet() const;
    void unsetDeliveryPartnerType();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderCourierDTO getCourier() const;
    void setCourier(org::openapitools::server::model::OrderCourierDTO const& value);
    bool courierIsSet() const;
    void unsetCourier();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderDeliveryDatesDTO getDates() const;
    void setDates(org::openapitools::server::model::OrderDeliveryDatesDTO const& value);
    bool datesIsSet() const;
    void unsetDates();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::RegionDTO getRegion() const;
    void setRegion(org::openapitools::server::model::RegionDTO const& value);
    bool regionIsSet() const;
    void unsetRegion();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderDeliveryAddressDTO getAddress() const;
    void setAddress(org::openapitools::server::model::OrderDeliveryAddressDTO const& value);
    bool addressIsSet() const;
    void unsetAddress();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderVatType getVat() const;
    void setVat(org::openapitools::server::model::OrderVatType const& value);
    bool vatIsSet() const;
    void unsetVat();
    /// <summary>
    /// Идентификатор службы доставки.
    /// </summary>
    int64_t getDeliveryServiceId() const;
    void setDeliveryServiceId(int64_t const value);
    bool deliveryServiceIdIsSet() const;
    void unsetDeliveryServiceId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderLiftType getLiftType() const;
    void setLiftType(org::openapitools::server::model::OrderLiftType const& value);
    bool liftTypeIsSet() const;
    void unsetLiftType();
    /// <summary>
    /// Стоимость подъема на этаж.
    /// </summary>
    double getLiftPrice() const;
    void setLiftPrice(double const value);
    bool liftPriceIsSet() const;
    void unsetLiftPrice();
    /// <summary>
    /// Идентификатор пункта самовывоза, присвоенный магазином.
    /// </summary>
    std::string getOutletCode() const;
    void setOutletCode(std::string const& value);
    bool outletCodeIsSet() const;
    void unsetOutletCode();
    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getOutletStorageLimitDate() const;
    void setOutletStorageLimitDate(std::string const& value);
    bool outletStorageLimitDateIsSet() const;
    void unsetOutletStorageLimitDate();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderDeliveryDispatchType getDispatchType() const;
    void setDispatchType(org::openapitools::server::model::OrderDeliveryDispatchType const& value);
    bool dispatchTypeIsSet() const;
    void unsetDispatchType();
    /// <summary>
    /// Информация для отслеживания перемещений посылки.
    /// </summary>
    std::vector<org::openapitools::server::model::OrderTrackDTO> getTracks() const;
    void setTracks(std::vector<org::openapitools::server::model::OrderTrackDTO> const& value);
    bool tracksIsSet() const;
    void unsetTracks();
    /// <summary>
    /// Информация о посылках.
    /// </summary>
    std::vector<org::openapitools::server::model::OrderShipmentDTO> getShipments() const;
    void setShipments(std::vector<org::openapitools::server::model::OrderShipmentDTO> const& value);
    bool shipmentsIsSet() const;
    void unsetShipments();
    /// <summary>
    /// Приблизительная ли дата доставки.
    /// </summary>
    bool isEstimated() const;
    void setEstimated(bool const value);
    bool estimatedIsSet() const;
    void unsetEstimated();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderDeliveryEacType getEacType() const;
    void setEacType(org::openapitools::server::model::OrderDeliveryEacType const& value);
    bool eacTypeIsSet() const;
    void unsetEacType();
    /// <summary>
    /// Код подтверждения ЭАПП (для типа &#x60;MERCHANT_TO_COURIER&#x60;). 
    /// </summary>
    std::string getEacCode() const;
    void setEacCode(std::string const& value);
    bool eacCodeIsSet() const;
    void unsetEacCode();

    friend  void to_json(nlohmann::json& j, const OrderDeliveryDTO& o);
    friend  void from_json(const nlohmann::json& j, OrderDeliveryDTO& o);
protected:
    std::string m_Id;
    bool m_IdIsSet;
    org::openapitools::server::model::OrderDeliveryType m_Type;
    bool m_TypeIsSet;
    std::string m_ServiceName;
    bool m_ServiceNameIsSet;
    double m_Price;
    bool m_PriceIsSet;
    org::openapitools::server::model::OrderDeliveryPartnerType m_DeliveryPartnerType;
    bool m_DeliveryPartnerTypeIsSet;
    org::openapitools::server::model::OrderCourierDTO m_Courier;
    bool m_CourierIsSet;
    org::openapitools::server::model::OrderDeliveryDatesDTO m_Dates;
    bool m_DatesIsSet;
    org::openapitools::server::model::RegionDTO m_Region;
    bool m_RegionIsSet;
    org::openapitools::server::model::OrderDeliveryAddressDTO m_Address;
    bool m_AddressIsSet;
    org::openapitools::server::model::OrderVatType m_Vat;
    bool m_VatIsSet;
    int64_t m_DeliveryServiceId;
    bool m_DeliveryServiceIdIsSet;
    org::openapitools::server::model::OrderLiftType m_LiftType;
    bool m_LiftTypeIsSet;
    double m_LiftPrice;
    bool m_LiftPriceIsSet;
    std::string m_OutletCode;
    bool m_OutletCodeIsSet;
    std::string m_OutletStorageLimitDate;
    bool m_OutletStorageLimitDateIsSet;
    org::openapitools::server::model::OrderDeliveryDispatchType m_DispatchType;
    bool m_DispatchTypeIsSet;
    std::vector<org::openapitools::server::model::OrderTrackDTO> m_Tracks;
    bool m_TracksIsSet;
    std::vector<org::openapitools::server::model::OrderShipmentDTO> m_Shipments;
    bool m_ShipmentsIsSet;
    bool m_Estimated;
    bool m_EstimatedIsSet;
    org::openapitools::server::model::OrderDeliveryEacType m_EacType;
    bool m_EacTypeIsSet;
    std::string m_EacCode;
    bool m_EacCodeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OrderDeliveryDTO_H_ */
