/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderDeliveryDTO.h
 *
 * Информация о доставке.
 */

#ifndef OrderDeliveryDTO_H_
#define OrderDeliveryDTO_H_



#include "OrderDeliveryEacType.h"
#include "OrderCourierDTO.h"
#include <string>
#include "OrderDeliveryType.h"
#include "OrderTrackDTO.h"
#include "RegionDTO.h"
#include <vector>
#include "OrderDeliveryDispatchType.h"
#include "OrderShipmentDTO.h"
#include "OrderDeliveryAddressDTO.h"
#include "OrderDeliveryDatesDTO.h"
#include "OrderLiftType.h"
#include "OrderVatType.h"
#include "OrderDeliveryPartnerType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о доставке.
/// </summary>
class  OrderDeliveryDTO 
{
public:
    OrderDeliveryDTO() = default;
    explicit OrderDeliveryDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderDeliveryDTO() = default;

    OrderDeliveryDTO(const OrderDeliveryDTO& other) = default; // copy constructor
    OrderDeliveryDTO(OrderDeliveryDTO&& other) noexcept = default; // move constructor

    OrderDeliveryDTO& operator=(const OrderDeliveryDTO& other) = default; // copy assignment
    OrderDeliveryDTO& operator=(OrderDeliveryDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrderDeliveryDTO members

    /// <summary>
    /// Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    OrderDeliveryType getType() const;
    void setType(OrderDeliveryType value);

    /// <summary>
    /// Наименование службы доставки.
    /// </summary>
    std::string getServiceName() const;
    void setServiceName(std::string value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Стоимость доставки смотрите в параметре &#x60;deliveryTotal&#x60;.  {% endnote %}  Стоимость доставки в валюте заказа. 
    /// </summary>
    double getPrice() const;
    void setPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    OrderDeliveryPartnerType getDeliveryPartnerType() const;
    void setDeliveryPartnerType(OrderDeliveryPartnerType value);

    /// <summary>
    /// 
    /// </summary>
    OrderCourierDTO getCourier() const;
    void setCourier(OrderCourierDTO value);

    /// <summary>
    /// 
    /// </summary>
    OrderDeliveryDatesDTO getDates() const;
    void setDates(OrderDeliveryDatesDTO value);

    /// <summary>
    /// 
    /// </summary>
    RegionDTO getRegion() const;
    void setRegion(RegionDTO value);

    /// <summary>
    /// 
    /// </summary>
    OrderDeliveryAddressDTO getAddress() const;
    void setAddress(OrderDeliveryAddressDTO value);

    /// <summary>
    /// 
    /// </summary>
    OrderVatType getVat() const;
    void setVat(OrderVatType value);

    /// <summary>
    /// Идентификатор службы доставки.
    /// </summary>
    int64_t getDeliveryServiceId() const;
    void setDeliveryServiceId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    OrderLiftType getLiftType() const;
    void setLiftType(OrderLiftType value);

    /// <summary>
    /// Стоимость подъема на этаж.
    /// </summary>
    double getLiftPrice() const;
    void setLiftPrice(double value);

    /// <summary>
    /// Идентификатор пункта самовывоза, присвоенный магазином.
    /// </summary>
    std::string getOutletCode() const;
    void setOutletCode(std::string value);

    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getOutletStorageLimitDate() const;
    void setOutletStorageLimitDate(std::string value);

    /// <summary>
    /// 
    /// </summary>
    OrderDeliveryDispatchType getDispatchType() const;
    void setDispatchType(OrderDeliveryDispatchType value);

    /// <summary>
    /// Информация для отслеживания перемещений посылки.
    /// </summary>
    std::vector<OrderTrackDTO> getTracks() const;
    void setTracks(std::vector<OrderTrackDTO> value);

    /// <summary>
    /// Информация о посылках.
    /// </summary>
    std::vector<OrderShipmentDTO> getShipments() const;
    void setShipments(std::vector<OrderShipmentDTO> value);

    /// <summary>
    /// Приблизительная ли дата доставки.
    /// </summary>
    bool isEstimated() const;
    void setEstimated(bool value);

    /// <summary>
    /// 
    /// </summary>
    OrderDeliveryEacType getEacType() const;
    void setEacType(OrderDeliveryEacType value);

    /// <summary>
    /// Код подтверждения ЭАПП (для типа &#x60;MERCHANT_TO_COURIER&#x60;). 
    /// </summary>
    std::string getEacCode() const;
    void setEacCode(std::string value);

protected:
    std::string m_Id = "";
    OrderDeliveryType m_Type = OrderDeliveryType{};
    std::string m_ServiceName = "";
    double m_Price = 0.0;
    OrderDeliveryPartnerType m_DeliveryPartnerType = OrderDeliveryPartnerType{};
    OrderCourierDTO m_Courier;
    OrderDeliveryDatesDTO m_Dates;
    RegionDTO m_Region;
    OrderDeliveryAddressDTO m_Address;
    OrderVatType m_Vat = OrderVatType{};
    int64_t m_DeliveryServiceId = 0L;
    OrderLiftType m_LiftType = OrderLiftType{};
    double m_LiftPrice = 0.0;
    std::string m_OutletCode = "";
    std::string m_OutletStorageLimitDate = "";
    OrderDeliveryDispatchType m_DispatchType = OrderDeliveryDispatchType{};
    std::vector<OrderTrackDTO> m_Tracks;
    std::vector<OrderShipmentDTO> m_Shipments;
    bool m_Estimated = false;
    OrderDeliveryEacType m_EacType = OrderDeliveryEacType{};
    std::string m_EacCode = "";
};

std::vector<OrderDeliveryDTO> createOrderDeliveryDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderDeliveryDTO>(const OrderDeliveryDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrderDeliveryDTO fromPt<OrderDeliveryDTO>(const boost::property_tree::ptree& pt) {
    OrderDeliveryDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderDeliveryDTO_H_ */
