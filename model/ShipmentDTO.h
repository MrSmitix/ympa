/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ShipmentDTO.h
 *
 * Информация об отгрузке.
 */

#ifndef ShipmentDTO_H_
#define ShipmentDTO_H_



#include "ShipmentStatusChangeDTO.h"
#include "PalletsCountDTO.h"
#include "PartnerShipmentWarehouseDTO.h"
#include "Set.h"
#include "DeliveryServiceDTO.h"
#include <string>
#include "ShipmentActionType.h"
#include "ShipmentType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация об отгрузке.
/// </summary>
class  ShipmentDTO : public BaseShipmentDTO, public ExtensionShipmentDTO
{
public:
    ShipmentDTO() = default;
    explicit ShipmentDTO(boost::property_tree::ptree const& pt);
    virtual ~ShipmentDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// ShipmentDTO members

    /// <summary>
    /// Идентификатор отгрузки.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Начало планового интервала отгрузки.
    /// </summary>
    std::string getPlanIntervalFrom() const;
    void setPlanIntervalFrom(std::string value);

    /// <summary>
    /// Конец планового интервала отгрузки.
    /// </summary>
    std::string getPlanIntervalTo() const;
    void setPlanIntervalTo(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ShipmentType> getShipmentType() const;
    void setShipmentType(std::shared_ptr<ShipmentType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PartnerShipmentWarehouseDTO> getWarehouse() const;
    void setWarehouse(std::shared_ptr<PartnerShipmentWarehouseDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PartnerShipmentWarehouseDTO> getWarehouseTo() const;
    void setWarehouseTo(std::shared_ptr<PartnerShipmentWarehouseDTO> value);

    /// <summary>
    /// Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра &#x60;id&#x60;.
    /// </summary>
    std::string getExternalId() const;
    void setExternalId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DeliveryServiceDTO> getDeliveryService() const;
    void setDeliveryService(std::shared_ptr<DeliveryServiceDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PalletsCountDTO> getPalletsCount() const;
    void setPalletsCount(std::shared_ptr<PalletsCountDTO> value);

    /// <summary>
    /// Идентификаторы заказов в отгрузке.
    /// </summary>
    Set<int64_t> getOrderIds() const;
    void setOrderIds(Set<int64_t> value);

    /// <summary>
    /// Количество заказов, которое Маркет запланировал к отгрузке.
    /// </summary>
    int32_t getDraftCount() const;
    void setDraftCount(int32_t value);

    /// <summary>
    /// Количество заказов, которое Маркет подтвердил к отгрузке.
    /// </summary>
    int32_t getPlannedCount() const;
    void setPlannedCount(int32_t value);

    /// <summary>
    /// Количество заказов, принятых в сортировочном центре или пункте приема.
    /// </summary>
    int32_t getFactCount() const;
    void setFactCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ShipmentStatusChangeDTO> getCurrentStatus() const;
    void setCurrentStatus(std::shared_ptr<ShipmentStatusChangeDTO> value);

    /// <summary>
    /// Доступные действия над отгрузкой.
    /// </summary>
    Set<std::shared_ptr<ShipmentActionType>> getAvailableActions() const;
    void setAvailableActions(Set<std::shared_ptr<ShipmentActionType>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_Id = 0L;
    std::string m_PlanIntervalFrom = "";
    std::string m_PlanIntervalTo = "";
    std::shared_ptr<ShipmentType> m_ShipmentType = std::make_shared<ShipmentType>();
    std::shared_ptr<PartnerShipmentWarehouseDTO> m_Warehouse;
    std::shared_ptr<PartnerShipmentWarehouseDTO> m_WarehouseTo;
    std::string m_ExternalId = "";
    std::shared_ptr<DeliveryServiceDTO> m_DeliveryService;
    std::shared_ptr<PalletsCountDTO> m_PalletsCount;
    Set<int64_t> m_OrderIds;
    int32_t m_DraftCount = 0;
    int32_t m_PlannedCount = 0;
    int32_t m_FactCount = 0;
    std::shared_ptr<ShipmentStatusChangeDTO> m_CurrentStatus;
    Set<std::shared_ptr<ShipmentActionType>> m_AvailableActions;
};

std::vector<ShipmentDTO> createShipmentDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* ShipmentDTO_H_ */
