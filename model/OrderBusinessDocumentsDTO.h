/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrderBusinessDocumentsDTO.h
 *
 * Информация о документах. 
 */

#ifndef OrderBusinessDocumentsDTO_H_
#define OrderBusinessDocumentsDTO_H_


#include "DocumentDTO.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о документах. 
/// </summary>
class  OrderBusinessDocumentsDTO
{
public:
    OrderBusinessDocumentsDTO();
    virtual ~OrderBusinessDocumentsDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OrderBusinessDocumentsDTO& rhs) const;
    bool operator!=(const OrderBusinessDocumentsDTO& rhs) const;

    /////////////////////////////////////////////
    /// OrderBusinessDocumentsDTO members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::DocumentDTO getUpd() const;
    void setUpd(org::openapitools::server::model::DocumentDTO const& value);
    bool updIsSet() const;
    void unsetUpd();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::DocumentDTO getUkd() const;
    void setUkd(org::openapitools::server::model::DocumentDTO const& value);
    bool ukdIsSet() const;
    void unsetUkd();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::DocumentDTO getTorgTwelve() const;
    void setTorgTwelve(org::openapitools::server::model::DocumentDTO const& value);
    bool torgTwelveIsSet() const;
    void unsetTorgTwelve();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::DocumentDTO getSf() const;
    void setSf(org::openapitools::server::model::DocumentDTO const& value);
    bool sfIsSet() const;
    void unsetSf();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::DocumentDTO getKsf() const;
    void setKsf(org::openapitools::server::model::DocumentDTO const& value);
    bool ksfIsSet() const;
    void unsetKsf();

    friend  void to_json(nlohmann::json& j, const OrderBusinessDocumentsDTO& o);
    friend  void from_json(const nlohmann::json& j, OrderBusinessDocumentsDTO& o);
protected:
    org::openapitools::server::model::DocumentDTO m_Upd;
    bool m_UpdIsSet;
    org::openapitools::server::model::DocumentDTO m_Ukd;
    bool m_UkdIsSet;
    org::openapitools::server::model::DocumentDTO m_TorgTwelve;
    bool m_TorgTwelveIsSet;
    org::openapitools::server::model::DocumentDTO m_Sf;
    bool m_SfIsSet;
    org::openapitools::server::model::DocumentDTO m_Ksf;
    bool m_KsfIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OrderBusinessDocumentsDTO_H_ */
