/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderBusinessDocumentsDTO.h
 *
 * Информация о документах. 
 */

#ifndef OrderBusinessDocumentsDTO_H_
#define OrderBusinessDocumentsDTO_H_



#include "DocumentDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о документах. 
/// </summary>
class  OrderBusinessDocumentsDTO 
{
public:
    OrderBusinessDocumentsDTO() = default;
    explicit OrderBusinessDocumentsDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderBusinessDocumentsDTO() = default;

    OrderBusinessDocumentsDTO(const OrderBusinessDocumentsDTO& other) = default; // copy constructor
    OrderBusinessDocumentsDTO(OrderBusinessDocumentsDTO&& other) noexcept = default; // move constructor

    OrderBusinessDocumentsDTO& operator=(const OrderBusinessDocumentsDTO& other) = default; // copy assignment
    OrderBusinessDocumentsDTO& operator=(OrderBusinessDocumentsDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrderBusinessDocumentsDTO members

    /// <summary>
    /// 
    /// </summary>
    DocumentDTO getUpd() const;
    void setUpd(DocumentDTO value);

    /// <summary>
    /// 
    /// </summary>
    DocumentDTO getUkd() const;
    void setUkd(DocumentDTO value);

    /// <summary>
    /// 
    /// </summary>
    DocumentDTO getTorgTwelve() const;
    void setTorgTwelve(DocumentDTO value);

    /// <summary>
    /// 
    /// </summary>
    DocumentDTO getSf() const;
    void setSf(DocumentDTO value);

    /// <summary>
    /// 
    /// </summary>
    DocumentDTO getKsf() const;
    void setKsf(DocumentDTO value);

protected:
    DocumentDTO m_Upd;
    DocumentDTO m_Ukd;
    DocumentDTO m_TorgTwelve;
    DocumentDTO m_Sf;
    DocumentDTO m_Ksf;
};

std::vector<OrderBusinessDocumentsDTO> createOrderBusinessDocumentsDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderBusinessDocumentsDTO>(const OrderBusinessDocumentsDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrderBusinessDocumentsDTO fromPt<OrderBusinessDocumentsDTO>(const boost::property_tree::ptree& pt) {
    OrderBusinessDocumentsDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderBusinessDocumentsDTO_H_ */
