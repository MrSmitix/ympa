/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedIndexLogsIndexType.h
 *
 * Тип обновления.  Возможные значения:  * &#x60;DIFF&#x60; — частичное обновление данных на Яндекс Маркете (например, обновление цен ранее опубликованных предложений и публикация новых). * &#x60;FAST_PRICE&#x60; — только обновление цен ранее опубликованных предложений. * &#x60;FULL&#x60; — полное обновление данных на Яндекс Маркете. 
 */

#ifndef FeedIndexLogsIndexType_H_
#define FeedIndexLogsIndexType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Тип обновления.  Возможные значения:  * &#x60;DIFF&#x60; — частичное обновление данных на Яндекс Маркете (например, обновление цен ранее опубликованных предложений и публикация новых). * &#x60;FAST_PRICE&#x60; — только обновление цен ранее опубликованных предложений. * &#x60;FULL&#x60; — полное обновление данных на Яндекс Маркете. 
/// </summary>
class  FeedIndexLogsIndexType 
{
public:
    FeedIndexLogsIndexType() = default;
    explicit FeedIndexLogsIndexType(boost::property_tree::ptree const& pt);
    virtual ~FeedIndexLogsIndexType() = default;

    FeedIndexLogsIndexType(const FeedIndexLogsIndexType& other) = default; // copy constructor
    FeedIndexLogsIndexType(FeedIndexLogsIndexType&& other) noexcept = default; // move constructor

    FeedIndexLogsIndexType& operator=(const FeedIndexLogsIndexType& other) = default; // copy assignment
    FeedIndexLogsIndexType& operator=(FeedIndexLogsIndexType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// FeedIndexLogsIndexType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_FeedIndexLogsIndexTypeEnumValue;
};

std::vector<FeedIndexLogsIndexType> createFeedIndexLogsIndexTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FeedIndexLogsIndexType>(const FeedIndexLogsIndexType& val) {
    return val.toPropertyTree();
}

template<>
inline FeedIndexLogsIndexType fromPt<FeedIndexLogsIndexType>(const boost::property_tree::ptree& pt) {
    FeedIndexLogsIndexType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FeedIndexLogsIndexType_H_ */
