/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderLiftType.h
 *
 * Тип подъема заказа на этаж:  * &#x60;NOT_NEEDED&#x60; — не требуется.  * &#x60;MANUAL&#x60; — ручной.  * &#x60;ELEVATOR&#x60; — лифт.  * &#x60;CARGO_ELEVATOR&#x60; — грузовой лифт.  * &#x60;FREE&#x60; — любой из перечисленных выше, если включена опция бесплатного подъема.  * &#x60;UNKNOWN&#x60; — неизвестный тип. 
 */

#ifndef OrderLiftType_H_
#define OrderLiftType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Тип подъема заказа на этаж:  * &#x60;NOT_NEEDED&#x60; — не требуется.  * &#x60;MANUAL&#x60; — ручной.  * &#x60;ELEVATOR&#x60; — лифт.  * &#x60;CARGO_ELEVATOR&#x60; — грузовой лифт.  * &#x60;FREE&#x60; — любой из перечисленных выше, если включена опция бесплатного подъема.  * &#x60;UNKNOWN&#x60; — неизвестный тип. 
/// </summary>
class  OrderLiftType 
{
public:
    OrderLiftType() = default;
    explicit OrderLiftType(boost::property_tree::ptree const& pt);
    virtual ~OrderLiftType() = default;

    OrderLiftType(const OrderLiftType& other) = default; // copy constructor
    OrderLiftType(OrderLiftType&& other) noexcept = default; // move constructor

    OrderLiftType& operator=(const OrderLiftType& other) = default; // copy assignment
    OrderLiftType& operator=(OrderLiftType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// OrderLiftType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_OrderLiftTypeEnumValue;
};

std::vector<OrderLiftType> createOrderLiftTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderLiftType>(const OrderLiftType& val) {
    return val.toPropertyTree();
}

template<>
inline OrderLiftType fromPt<OrderLiftType>(const boost::property_tree::ptree& pt) {
    OrderLiftType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderLiftType_H_ */
