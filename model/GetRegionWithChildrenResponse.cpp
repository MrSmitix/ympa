/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetRegionWithChildrenResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetRegionWithChildrenResponse::GetRegionWithChildrenResponse()
{
    m_PagerIsSet = false;
    m_RegionsIsSet = false;
    
}

void GetRegionWithChildrenResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetRegionWithChildrenResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetRegionWithChildrenResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetRegionWithChildrenResponse" : pathPrefix;

            
    return success;
}

bool GetRegionWithChildrenResponse::operator==(const GetRegionWithChildrenResponse& rhs) const
{
    return
    
    
    
    ((!pagerIsSet() && !rhs.pagerIsSet()) || (pagerIsSet() && rhs.pagerIsSet() && getPager() == rhs.getPager())) &&
    
    
    ((!regionsIsSet() && !rhs.regionsIsSet()) || (regionsIsSet() && rhs.regionsIsSet() && getRegions() == rhs.getRegions()))
    
    ;
}

bool GetRegionWithChildrenResponse::operator!=(const GetRegionWithChildrenResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetRegionWithChildrenResponse& o)
{
    j = nlohmann::json::object();
    if(o.pagerIsSet())
        j["pager"] = o.m_Pager;
    if(o.regionsIsSet())
        j["regions"] = o.m_Regions;
    
}

void from_json(const nlohmann::json& j, GetRegionWithChildrenResponse& o)
{
    if(j.find("pager") != j.end())
    {
        j.at("pager").get_to(o.m_Pager);
        o.m_PagerIsSet = true;
    } 
    if(j.find("regions") != j.end())
    {
        j.at("regions").get_to(o.m_Regions);
        o.m_RegionsIsSet = true;
    } 
    
}

org::openapitools::server::model::FlippingPagerDTO GetRegionWithChildrenResponse::getPager() const
{
    return m_Pager;
}
void GetRegionWithChildrenResponse::setPager(org::openapitools::server::model::FlippingPagerDTO const& value)
{
    m_Pager = value;
    m_PagerIsSet = true;
}
bool GetRegionWithChildrenResponse::pagerIsSet() const
{
    return m_PagerIsSet;
}
void GetRegionWithChildrenResponse::unsetPager()
{
    m_PagerIsSet = false;
}
org::openapitools::server::model::RegionDTO GetRegionWithChildrenResponse::getRegions() const
{
    return m_Regions;
}
void GetRegionWithChildrenResponse::setRegions(org::openapitools::server::model::RegionDTO const& value)
{
    m_Regions = value;
    m_RegionsIsSet = true;
}
bool GetRegionWithChildrenResponse::regionsIsSet() const
{
    return m_RegionsIsSet;
}
void GetRegionWithChildrenResponse::unsetRegions()
{
    m_RegionsIsSet = false;
}


} // namespace org::openapitools::server::model

