/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrdersStatsCommissionType.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

OrdersStatsCommissionType::OrdersStatsCommissionType()
{
    
}

void OrdersStatsCommissionType::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrdersStatsCommissionType::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrdersStatsCommissionType::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrdersStatsCommissionType" : pathPrefix;

    
    if (m_value == OrdersStatsCommissionType::eOrdersStatsCommissionType::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool OrdersStatsCommissionType::operator==(const OrdersStatsCommissionType& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool OrdersStatsCommissionType::operator!=(const OrdersStatsCommissionType& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrdersStatsCommissionType& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::FEE:
            j = "FEE";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::FULFILLMENT:
            j = "FULFILLMENT";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::LOYALTY_PARTICIPATION_FEE:
            j = "LOYALTY_PARTICIPATION_FEE";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::AUCTION_PROMOTION:
            j = "AUCTION_PROMOTION";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::INSTALLMENT:
            j = "INSTALLMENT";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::DELIVERY_TO_CUSTOMER:
            j = "DELIVERY_TO_CUSTOMER";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::EXPRESS_DELIVERY_TO_CUSTOMER:
            j = "EXPRESS_DELIVERY_TO_CUSTOMER";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::AGENCY:
            j = "AGENCY";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::PAYMENT_TRANSFER:
            j = "PAYMENT_TRANSFER";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::RETURNED_ORDERS_STORAGE:
            j = "RETURNED_ORDERS_STORAGE";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::SORTING:
            j = "SORTING";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::INTAKE_SORTING:
            j = "INTAKE_SORTING";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::RETURN_PROCESSING:
            j = "RETURN_PROCESSING";
            break;
        case OrdersStatsCommissionType::eOrdersStatsCommissionType::ILLIQUID_GOODS_SALE:
            j = "ILLIQUID_GOODS_SALE";
            break;
    }
}

void from_json(const nlohmann::json& j, OrdersStatsCommissionType& o)
{
    
    auto s = j.get<std::string>();
    if (s == "FEE") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::FEE);
    } 
    else if (s == "FULFILLMENT") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::FULFILLMENT);
    } 
    else if (s == "LOYALTY_PARTICIPATION_FEE") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::LOYALTY_PARTICIPATION_FEE);
    } 
    else if (s == "AUCTION_PROMOTION") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::AUCTION_PROMOTION);
    } 
    else if (s == "INSTALLMENT") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::INSTALLMENT);
    } 
    else if (s == "DELIVERY_TO_CUSTOMER") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::DELIVERY_TO_CUSTOMER);
    } 
    else if (s == "EXPRESS_DELIVERY_TO_CUSTOMER") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::EXPRESS_DELIVERY_TO_CUSTOMER);
    } 
    else if (s == "AGENCY") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::AGENCY);
    } 
    else if (s == "PAYMENT_TRANSFER") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::PAYMENT_TRANSFER);
    } 
    else if (s == "RETURNED_ORDERS_STORAGE") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::RETURNED_ORDERS_STORAGE);
    } 
    else if (s == "SORTING") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::SORTING);
    } 
    else if (s == "INTAKE_SORTING") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::INTAKE_SORTING);
    } 
    else if (s == "RETURN_PROCESSING") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::RETURN_PROCESSING);
    } 
    else if (s == "ILLIQUID_GOODS_SALE") {
     o.setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType::ILLIQUID_GOODS_SALE);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " OrdersStatsCommissionType::eOrdersStatsCommissionType";
     throw std::invalid_argument(ss.str());
    } 

}

OrdersStatsCommissionType::eOrdersStatsCommissionType OrdersStatsCommissionType::getValue() const
{
    return m_value;
}
void OrdersStatsCommissionType::setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

