/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CategoryParameterDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CategoryParameterDTO::CategoryParameterDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string CategoryParameterDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void CategoryParameterDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree CategoryParameterDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void CategoryParameterDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string CategoryParameterDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void CategoryParameterDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CategoryParameterDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("name", m_Name);
	if (m_Unit != nullptr) {
		pt.add_child("unit", m_Unit->toPropertyTree());
	}
	pt.put("description", m_Description);
	// generate tree for RecommendationTypes
	if (!m_RecommendationTypes.empty()) {
		for (const auto &childEntry : m_RecommendationTypes) {
            ptree RecommendationTypes_node;
            RecommendationTypes_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", RecommendationTypes_node));
		}
		pt.add_child("recommendationTypes", tmp_node);
		tmp_node.clear();
	}
	pt.put("required", m_Required);
	pt.put("filtering", m_Filtering);
	pt.put("distinctive", m_Distinctive);
	pt.put("multivalue", m_Multivalue);
	pt.put("allowCustomValues", m_AllowCustomValues);
	// generate tree for Values
	if (!m_Values.empty()) {
		for (const auto &childEntry : m_Values) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("values", tmp_node);
		tmp_node.clear();
	}
	if (m_Constraints != nullptr) {
		pt.add_child("constraints", m_Constraints->toPropertyTree());
	}
	// generate tree for ValueRestrictions
	if (!m_ValueRestrictions.empty()) {
		for (const auto &childEntry : m_ValueRestrictions) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("valueRestrictions", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void CategoryParameterDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", 0L);
	m_Name = pt.get("name", "");
	if (pt.get_child_optional("unit")) {
		m_Unit = std::make_shared<CategoryParameterUnitDTO>();
		m_Unit->fromPropertyTree(pt.get_child("unit"));
	}
	m_Description = pt.get("description", "");
	// push all items of RecommendationTypes into member vector
	if (pt.get_child_optional("recommendationTypes")) {
		for (const auto &childTree : pt.get_child("recommendationTypes")) {
            std::shared_ptr<OfferCardRecommendationType> val =
            m_RecommendationTypes.emplace_back(std::move(val));
		}
	}
	m_Required = pt.get("required", false);
	m_Filtering = pt.get("filtering", false);
	m_Distinctive = pt.get("distinctive", false);
	m_Multivalue = pt.get("multivalue", false);
	m_AllowCustomValues = pt.get("allowCustomValues", false);
	// push all items of Values into member vector
	if (pt.get_child_optional("values")) {
		for (const auto &childTree : pt.get_child("values")) {
            std::shared_ptr<ParameterValueOptionDTO> val =
                std::make_shared<ParameterValueOptionDTO>(childTree.second);
            m_Values.emplace_back(std::move(val));
		}
	}
	if (pt.get_child_optional("constraints")) {
		m_Constraints = std::make_shared<ParameterValueConstraintsDTO>();
		m_Constraints->fromPropertyTree(pt.get_child("constraints"));
	}
	// push all items of ValueRestrictions into member vector
	if (pt.get_child_optional("valueRestrictions")) {
		for (const auto &childTree : pt.get_child("valueRestrictions")) {
            std::shared_ptr<ValueRestrictionDTO> val =
                std::make_shared<ValueRestrictionDTO>(childTree.second);
            m_ValueRestrictions.emplace_back(std::move(val));
		}
	}
}

int64_t CategoryParameterDTO::getId() const
{
    return m_Id;
}

void CategoryParameterDTO::setId(int64_t value)
{
	m_Id = value;
}
std::string CategoryParameterDTO::getName() const
{
    return m_Name;
}

void CategoryParameterDTO::setName(std::string value)
{
	m_Name = value;
}
std::shared_ptr<ParameterType> CategoryParameterDTO::getType() const
{
    return m_Type;
}

void CategoryParameterDTO::setType(std::shared_ptr<ParameterType> value)
{
	m_Type = value;
}
std::shared_ptr<CategoryParameterUnitDTO> CategoryParameterDTO::getUnit() const
{
    return m_Unit;
}

void CategoryParameterDTO::setUnit(std::shared_ptr<CategoryParameterUnitDTO> value)
{
	m_Unit = value;
}
std::string CategoryParameterDTO::getDescription() const
{
    return m_Description;
}

void CategoryParameterDTO::setDescription(std::string value)
{
	m_Description = value;
}
std::vector<std::shared_ptr<OfferCardRecommendationType>> CategoryParameterDTO::getRecommendationTypes() const
{
    return m_RecommendationTypes;
}

void CategoryParameterDTO::setRecommendationTypes(std::vector<std::shared_ptr<OfferCardRecommendationType>> value)
{
	m_RecommendationTypes = value;
}
bool CategoryParameterDTO::isRequired() const
{
    return m_Required;
}

void CategoryParameterDTO::setRequired(bool value)
{
	m_Required = value;
}
bool CategoryParameterDTO::isFiltering() const
{
    return m_Filtering;
}

void CategoryParameterDTO::setFiltering(bool value)
{
	m_Filtering = value;
}
bool CategoryParameterDTO::isDistinctive() const
{
    return m_Distinctive;
}

void CategoryParameterDTO::setDistinctive(bool value)
{
	m_Distinctive = value;
}
bool CategoryParameterDTO::isMultivalue() const
{
    return m_Multivalue;
}

void CategoryParameterDTO::setMultivalue(bool value)
{
	m_Multivalue = value;
}
bool CategoryParameterDTO::isAllowCustomValues() const
{
    return m_AllowCustomValues;
}

void CategoryParameterDTO::setAllowCustomValues(bool value)
{
	m_AllowCustomValues = value;
}
std::vector<std::shared_ptr<ParameterValueOptionDTO>> CategoryParameterDTO::getValues() const
{
    return m_Values;
}

void CategoryParameterDTO::setValues(std::vector<std::shared_ptr<ParameterValueOptionDTO>> value)
{
	m_Values = value;
}
std::shared_ptr<ParameterValueConstraintsDTO> CategoryParameterDTO::getConstraints() const
{
    return m_Constraints;
}

void CategoryParameterDTO::setConstraints(std::shared_ptr<ParameterValueConstraintsDTO> value)
{
	m_Constraints = value;
}
std::vector<std::shared_ptr<ValueRestrictionDTO>> CategoryParameterDTO::getValueRestrictions() const
{
    return m_ValueRestrictions;
}

void CategoryParameterDTO::setValueRestrictions(std::vector<std::shared_ptr<ValueRestrictionDTO>> value)
{
	m_ValueRestrictions = value;
}

std::vector<CategoryParameterDTO> createCategoryParameterDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CategoryParameterDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(CategoryParameterDTO(child.second));
    }

    return vec;
}

}
}
}
}

