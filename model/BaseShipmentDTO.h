/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BaseShipmentDTO.h
 *
 * Информация об отгрузке.
 */

#ifndef BaseShipmentDTO_H_
#define BaseShipmentDTO_H_


#include "PalletsCountDTO.h"
#include "PartnerShipmentWarehouseDTO.h"
#include "DeliveryServiceDTO.h"
#include <string>
#include "ShipmentType.h"
#include <set>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация об отгрузке.
/// </summary>
class  BaseShipmentDTO
{
public:
    BaseShipmentDTO();
    virtual ~BaseShipmentDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const BaseShipmentDTO& rhs) const;
    bool operator!=(const BaseShipmentDTO& rhs) const;

    /////////////////////////////////////////////
    /// BaseShipmentDTO members

    /// <summary>
    /// Идентификатор отгрузки.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Начало планового интервала отгрузки.
    /// </summary>
    std::string getPlanIntervalFrom() const;
    void setPlanIntervalFrom(std::string const& value);
    bool planIntervalFromIsSet() const;
    void unsetPlanIntervalFrom();
    /// <summary>
    /// Конец планового интервала отгрузки.
    /// </summary>
    std::string getPlanIntervalTo() const;
    void setPlanIntervalTo(std::string const& value);
    bool planIntervalToIsSet() const;
    void unsetPlanIntervalTo();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ShipmentType getShipmentType() const;
    void setShipmentType(org::openapitools::server::model::ShipmentType const& value);
    bool shipmentTypeIsSet() const;
    void unsetShipmentType();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PartnerShipmentWarehouseDTO getWarehouse() const;
    void setWarehouse(org::openapitools::server::model::PartnerShipmentWarehouseDTO const& value);
    bool warehouseIsSet() const;
    void unsetWarehouse();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PartnerShipmentWarehouseDTO getWarehouseTo() const;
    void setWarehouseTo(org::openapitools::server::model::PartnerShipmentWarehouseDTO const& value);
    bool warehouseToIsSet() const;
    void unsetWarehouseTo();
    /// <summary>
    /// Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра &#x60;id&#x60;.
    /// </summary>
    std::string getExternalId() const;
    void setExternalId(std::string const& value);
    bool externalIdIsSet() const;
    void unsetExternalId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::DeliveryServiceDTO getDeliveryService() const;
    void setDeliveryService(org::openapitools::server::model::DeliveryServiceDTO const& value);
    bool deliveryServiceIsSet() const;
    void unsetDeliveryService();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PalletsCountDTO getPalletsCount() const;
    void setPalletsCount(org::openapitools::server::model::PalletsCountDTO const& value);
    bool palletsCountIsSet() const;
    void unsetPalletsCount();
    /// <summary>
    /// Идентификаторы заказов в отгрузке.
    /// </summary>
    std::set<int64_t> getOrderIds() const;
    void setOrderIds(std::set<int64_t> const value);
    /// <summary>
    /// Количество заказов, которое Маркет запланировал к отгрузке.
    /// </summary>
    int32_t getDraftCount() const;
    void setDraftCount(int32_t const value);
    bool draftCountIsSet() const;
    void unsetDraftCount();
    /// <summary>
    /// Количество заказов, которое Маркет подтвердил к отгрузке.
    /// </summary>
    int32_t getPlannedCount() const;
    void setPlannedCount(int32_t const value);
    bool plannedCountIsSet() const;
    void unsetPlannedCount();
    /// <summary>
    /// Количество заказов, принятых в сортировочном центре или пункте приема.
    /// </summary>
    int32_t getFactCount() const;
    void setFactCount(int32_t const value);
    bool factCountIsSet() const;
    void unsetFactCount();

    friend  void to_json(nlohmann::json& j, const BaseShipmentDTO& o);
    friend  void from_json(const nlohmann::json& j, BaseShipmentDTO& o);
protected:
    int64_t m_Id;
    bool m_IdIsSet;
    std::string m_PlanIntervalFrom;
    bool m_PlanIntervalFromIsSet;
    std::string m_PlanIntervalTo;
    bool m_PlanIntervalToIsSet;
    org::openapitools::server::model::ShipmentType m_ShipmentType;
    bool m_ShipmentTypeIsSet;
    org::openapitools::server::model::PartnerShipmentWarehouseDTO m_Warehouse;
    bool m_WarehouseIsSet;
    org::openapitools::server::model::PartnerShipmentWarehouseDTO m_WarehouseTo;
    bool m_WarehouseToIsSet;
    std::string m_ExternalId;
    bool m_ExternalIdIsSet;
    org::openapitools::server::model::DeliveryServiceDTO m_DeliveryService;
    bool m_DeliveryServiceIsSet;
    org::openapitools::server::model::PalletsCountDTO m_PalletsCount;
    bool m_PalletsCountIsSet;
    std::set<int64_t> m_OrderIds;

    int32_t m_DraftCount;
    bool m_DraftCountIsSet;
    int32_t m_PlannedCount;
    bool m_PlannedCountIsSet;
    int32_t m_FactCount;
    bool m_FactCountIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* BaseShipmentDTO_H_ */
