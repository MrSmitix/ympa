/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetOfferRecommendationsRequest.h
 *
 * 
 */

#ifndef GetOfferRecommendationsRequest_H_
#define GetOfferRecommendationsRequest_H_



#include "FieldStateType.h"
#include <string>
#include "PriceCompetitivenessType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  GetOfferRecommendationsRequest 
{
public:
    GetOfferRecommendationsRequest() = default;
    explicit GetOfferRecommendationsRequest(boost::property_tree::ptree const& pt);
    virtual ~GetOfferRecommendationsRequest() = default;

    GetOfferRecommendationsRequest(const GetOfferRecommendationsRequest& other) = default; // copy constructor
    GetOfferRecommendationsRequest(GetOfferRecommendationsRequest&& other) noexcept = default; // move constructor

    GetOfferRecommendationsRequest& operator=(const GetOfferRecommendationsRequest& other) = default; // copy assignment
    GetOfferRecommendationsRequest& operator=(GetOfferRecommendationsRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GetOfferRecommendationsRequest members

    /// <summary>
    /// Идентификаторы товаров, информация о которых нужна. ⚠️ Не используйте это поле одновременно с остальными фильтрами. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.
    /// </summary>
    std::vector<std::string> getOfferIds() const;
    void setOfferIds(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    FieldStateType getCofinancePriceFilter() const;
    void setCofinancePriceFilter(FieldStateType value);

    /// <summary>
    /// 
    /// </summary>
    FieldStateType getRecommendedCofinancePriceFilter() const;
    void setRecommendedCofinancePriceFilter(FieldStateType value);

    /// <summary>
    /// 
    /// </summary>
    PriceCompetitivenessType getCompetitivenessFilter() const;
    void setCompetitivenessFilter(PriceCompetitivenessType value);

protected:
    std::vector<std::string> m_OfferIds;
    FieldStateType m_CofinancePriceFilter = FieldStateType{};
    FieldStateType m_RecommendedCofinancePriceFilter = FieldStateType{};
    PriceCompetitivenessType m_CompetitivenessFilter = PriceCompetitivenessType{};
};

std::vector<GetOfferRecommendationsRequest> createGetOfferRecommendationsRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GetOfferRecommendationsRequest>(const GetOfferRecommendationsRequest& val) {
    return val.toPropertyTree();
}

template<>
inline GetOfferRecommendationsRequest fromPt<GetOfferRecommendationsRequest>(const boost::property_tree::ptree& pt) {
    GetOfferRecommendationsRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GetOfferRecommendationsRequest_H_ */
