/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GetOfferRecommendationsRequest.h
 *
 * 
 */

#ifndef GetOfferRecommendationsRequest_H_
#define GetOfferRecommendationsRequest_H_


#include "FieldStateType.h"
#include <string>
#include "PriceCompetitivenessType.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  GetOfferRecommendationsRequest
{
public:
    GetOfferRecommendationsRequest();
    virtual ~GetOfferRecommendationsRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GetOfferRecommendationsRequest& rhs) const;
    bool operator!=(const GetOfferRecommendationsRequest& rhs) const;

    /////////////////////////////////////////////
    /// GetOfferRecommendationsRequest members

    /// <summary>
    /// Идентификаторы товаров, информация о которых нужна. ⚠️ Не используйте это поле одновременно с остальными фильтрами. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.
    /// </summary>
    std::vector<std::string> getOfferIds() const;
    void setOfferIds(std::vector<std::string> const& value);
    bool offerIdsIsSet() const;
    void unsetOfferIds();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FieldStateType getCofinancePriceFilter() const;
    void setCofinancePriceFilter(org::openapitools::server::model::FieldStateType const& value);
    bool cofinancePriceFilterIsSet() const;
    void unsetCofinancePriceFilter();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FieldStateType getRecommendedCofinancePriceFilter() const;
    void setRecommendedCofinancePriceFilter(org::openapitools::server::model::FieldStateType const& value);
    bool recommendedCofinancePriceFilterIsSet() const;
    void unsetRecommendedCofinancePriceFilter();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PriceCompetitivenessType getCompetitivenessFilter() const;
    void setCompetitivenessFilter(org::openapitools::server::model::PriceCompetitivenessType const& value);
    bool competitivenessFilterIsSet() const;
    void unsetCompetitivenessFilter();

    friend  void to_json(nlohmann::json& j, const GetOfferRecommendationsRequest& o);
    friend  void from_json(const nlohmann::json& j, GetOfferRecommendationsRequest& o);
protected:
    std::vector<std::string> m_OfferIds;
    bool m_OfferIdsIsSet;
    org::openapitools::server::model::FieldStateType m_CofinancePriceFilter;
    bool m_CofinancePriceFilterIsSet;
    org::openapitools::server::model::FieldStateType m_RecommendedCofinancePriceFilter;
    bool m_RecommendedCofinancePriceFilterIsSet;
    org::openapitools::server::model::PriceCompetitivenessType m_CompetitivenessFilter;
    bool m_CompetitivenessFilterIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GetOfferRecommendationsRequest_H_ */
