/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ShipmentStatusChangeDTO.h
 *
 * Статус отгрузки.
 */

#ifndef ShipmentStatusChangeDTO_H_
#define ShipmentStatusChangeDTO_H_



#include "ShipmentStatusType.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Статус отгрузки.
/// </summary>
class  ShipmentStatusChangeDTO 
{
public:
    ShipmentStatusChangeDTO() = default;
    explicit ShipmentStatusChangeDTO(boost::property_tree::ptree const& pt);
    virtual ~ShipmentStatusChangeDTO() = default;

    ShipmentStatusChangeDTO(const ShipmentStatusChangeDTO& other) = default; // copy constructor
    ShipmentStatusChangeDTO(ShipmentStatusChangeDTO&& other) noexcept = default; // move constructor

    ShipmentStatusChangeDTO& operator=(const ShipmentStatusChangeDTO& other) = default; // copy assignment
    ShipmentStatusChangeDTO& operator=(ShipmentStatusChangeDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ShipmentStatusChangeDTO members

    /// <summary>
    /// 
    /// </summary>
    ShipmentStatusType getStatus() const;
    void setStatus(ShipmentStatusType value);

    /// <summary>
    /// Описание статуса отгрузки.
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// Время последнего изменения статуса отгрузки.
    /// </summary>
    std::string getUpdateTime() const;
    void setUpdateTime(std::string value);

protected:
    ShipmentStatusType m_Status = ShipmentStatusType{};
    std::string m_Description = "";
    std::string m_UpdateTime = "";
};

std::vector<ShipmentStatusChangeDTO> createShipmentStatusChangeDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ShipmentStatusChangeDTO>(const ShipmentStatusChangeDTO& val) {
    return val.toPropertyTree();
}

template<>
inline ShipmentStatusChangeDTO fromPt<ShipmentStatusChangeDTO>(const boost::property_tree::ptree& pt) {
    ShipmentStatusChangeDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ShipmentStatusChangeDTO_H_ */
