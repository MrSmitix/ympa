/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdatePromoOffersRequest.h
 *
 * Добавление товаров в акцию или обновление их параметров.  Чтобы добавить товары в акцию или обновить параметры каких-то товаров, передайте их в параметре &#x60;offers&#x60;. 
 */

#ifndef UpdatePromoOffersRequest_H_
#define UpdatePromoOffersRequest_H_



#include "UpdatePromoOfferDTO.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Добавление товаров в акцию или обновление их параметров.  Чтобы добавить товары в акцию или обновить параметры каких-то товаров, передайте их в параметре &#x60;offers&#x60;. 
/// </summary>
class  UpdatePromoOffersRequest 
{
public:
    UpdatePromoOffersRequest() = default;
    explicit UpdatePromoOffersRequest(boost::property_tree::ptree const& pt);
    virtual ~UpdatePromoOffersRequest() = default;

    UpdatePromoOffersRequest(const UpdatePromoOffersRequest& other) = default; // copy constructor
    UpdatePromoOffersRequest(UpdatePromoOffersRequest&& other) noexcept = default; // move constructor

    UpdatePromoOffersRequest& operator=(const UpdatePromoOffersRequest& other) = default; // copy assignment
    UpdatePromoOffersRequest& operator=(UpdatePromoOffersRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UpdatePromoOffersRequest members

    /// <summary>
    /// Идентификатор акции.
    /// </summary>
    std::string getPromoId() const;
    void setPromoId(std::string value);

    /// <summary>
    /// Товары, которые необходимо добавить в акцию или цены которых нужно изменить.
    /// </summary>
    std::vector<UpdatePromoOfferDTO> getOffers() const;
    void setOffers(std::vector<UpdatePromoOfferDTO> value);

protected:
    std::string m_PromoId = "";
    std::vector<UpdatePromoOfferDTO> m_Offers;
};

std::vector<UpdatePromoOffersRequest> createUpdatePromoOffersRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UpdatePromoOffersRequest>(const UpdatePromoOffersRequest& val) {
    return val.toPropertyTree();
}

template<>
inline UpdatePromoOffersRequest fromPt<UpdatePromoOffersRequest>(const boost::property_tree::ptree& pt) {
    UpdatePromoOffersRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UpdatePromoOffersRequest_H_ */
