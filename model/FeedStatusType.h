/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedStatusType.h
 *
 * Статус прайс-листа.  Возможные значения:    * &#x60;ERROR&#x60; — найдены ошибки.   * &#x60;NA&#x60; — прайс-лист не загружался более семи дней или на этапе загрузки произошла ошибка.   * &#x60;OK&#x60; — ошибок не найдено. 
 */

#ifndef FeedStatusType_H_
#define FeedStatusType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Статус прайс-листа.  Возможные значения:    * &#x60;ERROR&#x60; — найдены ошибки.   * &#x60;NA&#x60; — прайс-лист не загружался более семи дней или на этапе загрузки произошла ошибка.   * &#x60;OK&#x60; — ошибок не найдено. 
/// </summary>
class  FeedStatusType 
{
public:
    FeedStatusType() = default;
    explicit FeedStatusType(boost::property_tree::ptree const& pt);
    virtual ~FeedStatusType() = default;

    FeedStatusType(const FeedStatusType& other) = default; // copy constructor
    FeedStatusType(FeedStatusType&& other) noexcept = default; // move constructor

    FeedStatusType& operator=(const FeedStatusType& other) = default; // copy assignment
    FeedStatusType& operator=(FeedStatusType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// FeedStatusType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_FeedStatusTypeEnumValue;
};

std::vector<FeedStatusType> createFeedStatusTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FeedStatusType>(const FeedStatusType& val) {
    return val.toPropertyTree();
}

template<>
inline FeedStatusType fromPt<FeedStatusType>(const boost::property_tree::ptree& pt) {
    FeedStatusType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FeedStatusType_H_ */
