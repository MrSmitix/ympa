/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetCategoriesMaxSaleQuantumDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetCategoriesMaxSaleQuantumDTO::GetCategoriesMaxSaleQuantumDTO()
{
    m_ErrorsIsSet = false;
    
}

void GetCategoriesMaxSaleQuantumDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetCategoriesMaxSaleQuantumDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetCategoriesMaxSaleQuantumDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetCategoriesMaxSaleQuantumDTO" : pathPrefix;

         
    
    /* Results */ {
        const std::vector<org::openapitools::server::model::MaxSaleQuantumDTO>& value = m_Results;
        const std::string currentValuePath = _pathPrefix + ".results";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::MaxSaleQuantumDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".results") && success;
 
                i++;
            }
        }

    }
         
    if (errorsIsSet())
    {
        const std::vector<org::openapitools::server::model::CategoryErrorDTO>& value = m_Errors;
        const std::string currentValuePath = _pathPrefix + ".errors";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::CategoryErrorDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".errors") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool GetCategoriesMaxSaleQuantumDTO::operator==(const GetCategoriesMaxSaleQuantumDTO& rhs) const
{
    return
    
    
    (getResults() == rhs.getResults())
     &&
    
    
    ((!errorsIsSet() && !rhs.errorsIsSet()) || (errorsIsSet() && rhs.errorsIsSet() && getErrors() == rhs.getErrors()))
    
    ;
}

bool GetCategoriesMaxSaleQuantumDTO::operator!=(const GetCategoriesMaxSaleQuantumDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetCategoriesMaxSaleQuantumDTO& o)
{
    j = nlohmann::json::object();
    j["results"] = o.m_Results;
    if(o.errorsIsSet() || !o.m_Errors.empty())
        j["errors"] = o.m_Errors;
    
}

void from_json(const nlohmann::json& j, GetCategoriesMaxSaleQuantumDTO& o)
{
    j.at("results").get_to(o.m_Results);
    if(j.find("errors") != j.end())
    {
        j.at("errors").get_to(o.m_Errors);
        o.m_ErrorsIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::MaxSaleQuantumDTO> GetCategoriesMaxSaleQuantumDTO::getResults() const
{
    return m_Results;
}
void GetCategoriesMaxSaleQuantumDTO::setResults(std::vector<org::openapitools::server::model::MaxSaleQuantumDTO> const& value)
{
    m_Results = value;
}
std::vector<org::openapitools::server::model::CategoryErrorDTO> GetCategoriesMaxSaleQuantumDTO::getErrors() const
{
    return m_Errors;
}
void GetCategoriesMaxSaleQuantumDTO::setErrors(std::vector<org::openapitools::server::model::CategoryErrorDTO> const& value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}
bool GetCategoriesMaxSaleQuantumDTO::errorsIsSet() const
{
    return m_ErrorsIsSet;
}
void GetCategoriesMaxSaleQuantumDTO::unsetErrors()
{
    m_ErrorsIsSet = false;
}


} // namespace org::openapitools::server::model

