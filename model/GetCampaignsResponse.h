/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetCampaignsResponse.h
 *
 * Результаты поиска магазинов.
 */

#ifndef GetCampaignsResponse_H_
#define GetCampaignsResponse_H_



#include "FlippingPagerDTO.h"
#include <vector>
#include "CampaignDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Результаты поиска магазинов.
/// </summary>
class  GetCampaignsResponse 
{
public:
    GetCampaignsResponse() = default;
    explicit GetCampaignsResponse(boost::property_tree::ptree const& pt);
    virtual ~GetCampaignsResponse() = default;

    GetCampaignsResponse(const GetCampaignsResponse& other) = default; // copy constructor
    GetCampaignsResponse(GetCampaignsResponse&& other) noexcept = default; // move constructor

    GetCampaignsResponse& operator=(const GetCampaignsResponse& other) = default; // copy assignment
    GetCampaignsResponse& operator=(GetCampaignsResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GetCampaignsResponse members

    /// <summary>
    /// Список с информацией по каждому магазину.
    /// </summary>
    std::vector<CampaignDTO> getCampaigns() const;
    void setCampaigns(std::vector<CampaignDTO> value);

    /// <summary>
    /// 
    /// </summary>
    FlippingPagerDTO getPager() const;
    void setPager(FlippingPagerDTO value);

protected:
    std::vector<CampaignDTO> m_Campaigns;
    FlippingPagerDTO m_Pager;
};

std::vector<GetCampaignsResponse> createGetCampaignsResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GetCampaignsResponse>(const GetCampaignsResponse& val) {
    return val.toPropertyTree();
}

template<>
inline GetCampaignsResponse fromPt<GetCampaignsResponse>(const boost::property_tree::ptree& pt) {
    GetCampaignsResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GetCampaignsResponse_H_ */
