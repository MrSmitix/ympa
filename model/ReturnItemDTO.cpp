/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ReturnItemDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ReturnItemDTO::ReturnItemDTO()
{
    m_MarketSku = 0L;
    m_MarketSkuIsSet = false;
    m_ShopSku = "";
    m_Count = 0L;
    m_DecisionsIsSet = false;
    m_InstancesIsSet = false;
    m_TracksIsSet = false;
    
}

void ReturnItemDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ReturnItemDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ReturnItemDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ReturnItemDTO" : pathPrefix;

             
    
    /* ShopSku */ {
        const std::string& value = m_ShopSku;
        const std::string currentValuePath = _pathPrefix + ".shopSku";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
             
    if (decisionsIsSet())
    {
        const std::vector<org::openapitools::server::model::ReturnDecisionDTO>& value = m_Decisions;
        const std::string currentValuePath = _pathPrefix + ".decisions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ReturnDecisionDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".decisions") && success;
 
                i++;
            }
        }

    }
         
    if (instancesIsSet())
    {
        const std::vector<org::openapitools::server::model::ReturnInstanceDTO>& value = m_Instances;
        const std::string currentValuePath = _pathPrefix + ".instances";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ReturnInstanceDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".instances") && success;
 
                i++;
            }
        }

    }
         
    if (tracksIsSet())
    {
        const std::vector<org::openapitools::server::model::TrackDTO>& value = m_Tracks;
        const std::string currentValuePath = _pathPrefix + ".tracks";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::TrackDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".tracks") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool ReturnItemDTO::operator==(const ReturnItemDTO& rhs) const
{
    return
    
    
    
    ((!marketSkuIsSet() && !rhs.marketSkuIsSet()) || (marketSkuIsSet() && rhs.marketSkuIsSet() && getMarketSku() == rhs.getMarketSku())) &&
    
    (getShopSku() == rhs.getShopSku())
     &&
    
    (getCount() == rhs.getCount())
     &&
    
    
    ((!decisionsIsSet() && !rhs.decisionsIsSet()) || (decisionsIsSet() && rhs.decisionsIsSet() && getDecisions() == rhs.getDecisions())) &&
    
    
    ((!instancesIsSet() && !rhs.instancesIsSet()) || (instancesIsSet() && rhs.instancesIsSet() && getInstances() == rhs.getInstances())) &&
    
    
    ((!tracksIsSet() && !rhs.tracksIsSet()) || (tracksIsSet() && rhs.tracksIsSet() && getTracks() == rhs.getTracks()))
    
    ;
}

bool ReturnItemDTO::operator!=(const ReturnItemDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ReturnItemDTO& o)
{
    j = nlohmann::json::object();
    if(o.marketSkuIsSet())
        j["marketSku"] = o.m_MarketSku;
    j["shopSku"] = o.m_ShopSku;
    j["count"] = o.m_Count;
    if(o.decisionsIsSet() || !o.m_Decisions.empty())
        j["decisions"] = o.m_Decisions;
    if(o.instancesIsSet() || !o.m_Instances.empty())
        j["instances"] = o.m_Instances;
    if(o.tracksIsSet() || !o.m_Tracks.empty())
        j["tracks"] = o.m_Tracks;
    
}

void from_json(const nlohmann::json& j, ReturnItemDTO& o)
{
    if(j.find("marketSku") != j.end())
    {
        j.at("marketSku").get_to(o.m_MarketSku);
        o.m_MarketSkuIsSet = true;
    } 
    j.at("shopSku").get_to(o.m_ShopSku);
    j.at("count").get_to(o.m_Count);
    if(j.find("decisions") != j.end())
    {
        j.at("decisions").get_to(o.m_Decisions);
        o.m_DecisionsIsSet = true;
    } 
    if(j.find("instances") != j.end())
    {
        j.at("instances").get_to(o.m_Instances);
        o.m_InstancesIsSet = true;
    } 
    if(j.find("tracks") != j.end())
    {
        j.at("tracks").get_to(o.m_Tracks);
        o.m_TracksIsSet = true;
    } 
    
}

int64_t ReturnItemDTO::getMarketSku() const
{
    return m_MarketSku;
}
void ReturnItemDTO::setMarketSku(int64_t const value)
{
    m_MarketSku = value;
    m_MarketSkuIsSet = true;
}
bool ReturnItemDTO::marketSkuIsSet() const
{
    return m_MarketSkuIsSet;
}
void ReturnItemDTO::unsetMarketSku()
{
    m_MarketSkuIsSet = false;
}
std::string ReturnItemDTO::getShopSku() const
{
    return m_ShopSku;
}
void ReturnItemDTO::setShopSku(std::string const& value)
{
    m_ShopSku = value;
}
int64_t ReturnItemDTO::getCount() const
{
    return m_Count;
}
void ReturnItemDTO::setCount(int64_t const value)
{
    m_Count = value;
}
std::vector<org::openapitools::server::model::ReturnDecisionDTO> ReturnItemDTO::getDecisions() const
{
    return m_Decisions;
}
void ReturnItemDTO::setDecisions(std::vector<org::openapitools::server::model::ReturnDecisionDTO> const& value)
{
    m_Decisions = value;
    m_DecisionsIsSet = true;
}
bool ReturnItemDTO::decisionsIsSet() const
{
    return m_DecisionsIsSet;
}
void ReturnItemDTO::unsetDecisions()
{
    m_DecisionsIsSet = false;
}
std::vector<org::openapitools::server::model::ReturnInstanceDTO> ReturnItemDTO::getInstances() const
{
    return m_Instances;
}
void ReturnItemDTO::setInstances(std::vector<org::openapitools::server::model::ReturnInstanceDTO> const& value)
{
    m_Instances = value;
    m_InstancesIsSet = true;
}
bool ReturnItemDTO::instancesIsSet() const
{
    return m_InstancesIsSet;
}
void ReturnItemDTO::unsetInstances()
{
    m_InstancesIsSet = false;
}
std::vector<org::openapitools::server::model::TrackDTO> ReturnItemDTO::getTracks() const
{
    return m_Tracks;
}
void ReturnItemDTO::setTracks(std::vector<org::openapitools::server::model::TrackDTO> const& value)
{
    m_Tracks = value;
    m_TracksIsSet = true;
}
bool ReturnItemDTO::tracksIsSet() const
{
    return m_TracksIsSet;
}
void ReturnItemDTO::unsetTracks()
{
    m_TracksIsSet = false;
}


} // namespace org::openapitools::server::model

