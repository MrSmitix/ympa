/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedbackAuthorDTO.h
 *
 * Информация об авторе отзыва.  Если отзыв оставлен анонимно, параметр не возвращается. 
 */

#ifndef FeedbackAuthorDTO_H_
#define FeedbackAuthorDTO_H_



#include <string>
#include "RegionDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация об авторе отзыва.  Если отзыв оставлен анонимно, параметр не возвращается. 
/// </summary>
class  FeedbackAuthorDTO 
{
public:
    FeedbackAuthorDTO() = default;
    explicit FeedbackAuthorDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedbackAuthorDTO() = default;

    FeedbackAuthorDTO(const FeedbackAuthorDTO& other) = default; // copy constructor
    FeedbackAuthorDTO(FeedbackAuthorDTO&& other) noexcept = default; // move constructor

    FeedbackAuthorDTO& operator=(const FeedbackAuthorDTO& other) = default; // copy assignment
    FeedbackAuthorDTO& operator=(FeedbackAuthorDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FeedbackAuthorDTO members

    /// <summary>
    /// Имя автора отзыва.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    RegionDTO getRegion() const;
    void setRegion(RegionDTO value);

protected:
    std::string m_Name = "";
    RegionDTO m_Region;
};

std::vector<FeedbackAuthorDTO> createFeedbackAuthorDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FeedbackAuthorDTO>(const FeedbackAuthorDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FeedbackAuthorDTO fromPt<FeedbackAuthorDTO>(const boost::property_tree::ptree& pt) {
    FeedbackAuthorDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FeedbackAuthorDTO_H_ */
