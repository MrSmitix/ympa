/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersStatsPriceType.h
 *
 * Тип скидки или цена на товар: - &#x60;BUYER&#x60; — цена на товар с учетом скидок, в том числе купонов. - &#x60;CASHBACK&#x60; — баллы Плюса. - &#x60;MARKETPLACE&#x60; — купоны. 
 */

#ifndef OrdersStatsPriceType_H_
#define OrdersStatsPriceType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Тип скидки или цена на товар: - &#x60;BUYER&#x60; — цена на товар с учетом скидок, в том числе купонов. - &#x60;CASHBACK&#x60; — баллы Плюса. - &#x60;MARKETPLACE&#x60; — купоны. 
/// </summary>
class  OrdersStatsPriceType 
{
public:
    OrdersStatsPriceType() = default;
    explicit OrdersStatsPriceType(boost::property_tree::ptree const& pt);
    virtual ~OrdersStatsPriceType() = default;

    OrdersStatsPriceType(const OrdersStatsPriceType& other) = default; // copy constructor
    OrdersStatsPriceType(OrdersStatsPriceType&& other) noexcept = default; // move constructor

    OrdersStatsPriceType& operator=(const OrdersStatsPriceType& other) = default; // copy assignment
    OrdersStatsPriceType& operator=(OrdersStatsPriceType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// OrdersStatsPriceType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_OrdersStatsPriceTypeEnumValue;
};

std::vector<OrdersStatsPriceType> createOrdersStatsPriceTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrdersStatsPriceType>(const OrdersStatsPriceType& val) {
    return val.toPropertyTree();
}

template<>
inline OrdersStatsPriceType fromPt<OrdersStatsPriceType>(const boost::property_tree::ptree& pt) {
    OrdersStatsPriceType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrdersStatsPriceType_H_ */
