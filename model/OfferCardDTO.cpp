/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OfferCardDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OfferCardDTO::OfferCardDTO()
{
    m_OfferId = "";
    m_MappingIsSet = false;
    m_ParameterValuesIsSet = false;
    m_CardStatusIsSet = false;
    m_ContentRating = 0;
    m_ContentRatingIsSet = false;
    m_RecommendationsIsSet = false;
    m_ErrorsIsSet = false;
    m_WarningsIsSet = false;
    
}

void OfferCardDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OfferCardDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OfferCardDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OfferCardDTO" : pathPrefix;

         
    
    /* OfferId */ {
        const std::string& value = m_OfferId;
        const std::string currentValuePath = _pathPrefix + ".offerId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
             
    if (parameterValuesIsSet())
    {
        const std::vector<org::openapitools::server::model::ParameterValueDTO>& value = m_ParameterValues;
        const std::string currentValuePath = _pathPrefix + ".parameterValues";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ParameterValueDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".parameterValues") && success;
 
                i++;
            }
        }

    }
                 
    if (recommendationsIsSet())
    {
        const std::vector<org::openapitools::server::model::OfferCardRecommendationDTO>& value = m_Recommendations;
        const std::string currentValuePath = _pathPrefix + ".recommendations";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OfferCardRecommendationDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".recommendations") && success;
 
                i++;
            }
        }

    }
         
    if (errorsIsSet())
    {
        const std::vector<org::openapitools::server::model::OfferErrorDTO>& value = m_Errors;
        const std::string currentValuePath = _pathPrefix + ".errors";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OfferErrorDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".errors") && success;
 
                i++;
            }
        }

    }
         
    if (warningsIsSet())
    {
        const std::vector<org::openapitools::server::model::OfferErrorDTO>& value = m_Warnings;
        const std::string currentValuePath = _pathPrefix + ".warnings";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OfferErrorDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".warnings") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool OfferCardDTO::operator==(const OfferCardDTO& rhs) const
{
    return
    
    
    (getOfferId() == rhs.getOfferId())
     &&
    
    
    ((!mappingIsSet() && !rhs.mappingIsSet()) || (mappingIsSet() && rhs.mappingIsSet() && getMapping() == rhs.getMapping())) &&
    
    
    ((!parameterValuesIsSet() && !rhs.parameterValuesIsSet()) || (parameterValuesIsSet() && rhs.parameterValuesIsSet() && getParameterValues() == rhs.getParameterValues())) &&
    
    
    ((!cardStatusIsSet() && !rhs.cardStatusIsSet()) || (cardStatusIsSet() && rhs.cardStatusIsSet() && getCardStatus() == rhs.getCardStatus())) &&
    
    
    ((!contentRatingIsSet() && !rhs.contentRatingIsSet()) || (contentRatingIsSet() && rhs.contentRatingIsSet() && getContentRating() == rhs.getContentRating())) &&
    
    
    ((!recommendationsIsSet() && !rhs.recommendationsIsSet()) || (recommendationsIsSet() && rhs.recommendationsIsSet() && getRecommendations() == rhs.getRecommendations())) &&
    
    
    ((!errorsIsSet() && !rhs.errorsIsSet()) || (errorsIsSet() && rhs.errorsIsSet() && getErrors() == rhs.getErrors())) &&
    
    
    ((!warningsIsSet() && !rhs.warningsIsSet()) || (warningsIsSet() && rhs.warningsIsSet() && getWarnings() == rhs.getWarnings()))
    
    ;
}

bool OfferCardDTO::operator!=(const OfferCardDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OfferCardDTO& o)
{
    j = nlohmann::json::object();
    j["offerId"] = o.m_OfferId;
    if(o.mappingIsSet())
        j["mapping"] = o.m_Mapping;
    if(o.parameterValuesIsSet() || !o.m_ParameterValues.empty())
        j["parameterValues"] = o.m_ParameterValues;
    if(o.cardStatusIsSet())
        j["cardStatus"] = o.m_CardStatus;
    if(o.contentRatingIsSet())
        j["contentRating"] = o.m_ContentRating;
    if(o.recommendationsIsSet() || !o.m_Recommendations.empty())
        j["recommendations"] = o.m_Recommendations;
    if(o.errorsIsSet() || !o.m_Errors.empty())
        j["errors"] = o.m_Errors;
    if(o.warningsIsSet() || !o.m_Warnings.empty())
        j["warnings"] = o.m_Warnings;
    
}

void from_json(const nlohmann::json& j, OfferCardDTO& o)
{
    j.at("offerId").get_to(o.m_OfferId);
    if(j.find("mapping") != j.end())
    {
        j.at("mapping").get_to(o.m_Mapping);
        o.m_MappingIsSet = true;
    } 
    if(j.find("parameterValues") != j.end())
    {
        j.at("parameterValues").get_to(o.m_ParameterValues);
        o.m_ParameterValuesIsSet = true;
    } 
    if(j.find("cardStatus") != j.end())
    {
        j.at("cardStatus").get_to(o.m_CardStatus);
        o.m_CardStatusIsSet = true;
    } 
    if(j.find("contentRating") != j.end())
    {
        j.at("contentRating").get_to(o.m_ContentRating);
        o.m_ContentRatingIsSet = true;
    } 
    if(j.find("recommendations") != j.end())
    {
        j.at("recommendations").get_to(o.m_Recommendations);
        o.m_RecommendationsIsSet = true;
    } 
    if(j.find("errors") != j.end())
    {
        j.at("errors").get_to(o.m_Errors);
        o.m_ErrorsIsSet = true;
    } 
    if(j.find("warnings") != j.end())
    {
        j.at("warnings").get_to(o.m_Warnings);
        o.m_WarningsIsSet = true;
    } 
    
}

std::string OfferCardDTO::getOfferId() const
{
    return m_OfferId;
}
void OfferCardDTO::setOfferId(std::string const& value)
{
    m_OfferId = value;
}
org::openapitools::server::model::GetMappingDTO OfferCardDTO::getMapping() const
{
    return m_Mapping;
}
void OfferCardDTO::setMapping(org::openapitools::server::model::GetMappingDTO const& value)
{
    m_Mapping = value;
    m_MappingIsSet = true;
}
bool OfferCardDTO::mappingIsSet() const
{
    return m_MappingIsSet;
}
void OfferCardDTO::unsetMapping()
{
    m_MappingIsSet = false;
}
std::vector<org::openapitools::server::model::ParameterValueDTO> OfferCardDTO::getParameterValues() const
{
    return m_ParameterValues;
}
void OfferCardDTO::setParameterValues(std::vector<org::openapitools::server::model::ParameterValueDTO> const& value)
{
    m_ParameterValues = value;
    m_ParameterValuesIsSet = true;
}
bool OfferCardDTO::parameterValuesIsSet() const
{
    return m_ParameterValuesIsSet;
}
void OfferCardDTO::unsetParameterValues()
{
    m_ParameterValuesIsSet = false;
}
org::openapitools::server::model::OfferCardStatusType OfferCardDTO::getCardStatus() const
{
    return m_CardStatus;
}
void OfferCardDTO::setCardStatus(org::openapitools::server::model::OfferCardStatusType const& value)
{
    m_CardStatus = value;
    m_CardStatusIsSet = true;
}
bool OfferCardDTO::cardStatusIsSet() const
{
    return m_CardStatusIsSet;
}
void OfferCardDTO::unsetCardStatus()
{
    m_CardStatusIsSet = false;
}
int32_t OfferCardDTO::getContentRating() const
{
    return m_ContentRating;
}
void OfferCardDTO::setContentRating(int32_t const value)
{
    m_ContentRating = value;
    m_ContentRatingIsSet = true;
}
bool OfferCardDTO::contentRatingIsSet() const
{
    return m_ContentRatingIsSet;
}
void OfferCardDTO::unsetContentRating()
{
    m_ContentRatingIsSet = false;
}
std::vector<org::openapitools::server::model::OfferCardRecommendationDTO> OfferCardDTO::getRecommendations() const
{
    return m_Recommendations;
}
void OfferCardDTO::setRecommendations(std::vector<org::openapitools::server::model::OfferCardRecommendationDTO> const& value)
{
    m_Recommendations = value;
    m_RecommendationsIsSet = true;
}
bool OfferCardDTO::recommendationsIsSet() const
{
    return m_RecommendationsIsSet;
}
void OfferCardDTO::unsetRecommendations()
{
    m_RecommendationsIsSet = false;
}
std::vector<org::openapitools::server::model::OfferErrorDTO> OfferCardDTO::getErrors() const
{
    return m_Errors;
}
void OfferCardDTO::setErrors(std::vector<org::openapitools::server::model::OfferErrorDTO> const& value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}
bool OfferCardDTO::errorsIsSet() const
{
    return m_ErrorsIsSet;
}
void OfferCardDTO::unsetErrors()
{
    m_ErrorsIsSet = false;
}
std::vector<org::openapitools::server::model::OfferErrorDTO> OfferCardDTO::getWarnings() const
{
    return m_Warnings;
}
void OfferCardDTO::setWarnings(std::vector<org::openapitools::server::model::OfferErrorDTO> const& value)
{
    m_Warnings = value;
    m_WarningsIsSet = true;
}
bool OfferCardDTO::warningsIsSet() const
{
    return m_WarningsIsSet;
}
void OfferCardDTO::unsetWarnings()
{
    m_WarningsIsSet = false;
}


} // namespace org::openapitools::server::model

