/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OfferCardDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OfferCardDTO::OfferCardDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string OfferCardDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void OfferCardDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree OfferCardDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void OfferCardDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string OfferCardDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void OfferCardDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OfferCardDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("offerId", m_OfferId);
	if (m_Mapping != nullptr) {
		pt.add_child("mapping", m_Mapping->toPropertyTree());
	}
	// generate tree for ParameterValues
	if (!m_ParameterValues.empty()) {
		for (const auto &childEntry : m_ParameterValues) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("parameterValues", tmp_node);
		tmp_node.clear();
	}
	pt.put("contentRating", m_ContentRating);
	// generate tree for Recommendations
	if (!m_Recommendations.empty()) {
		for (const auto &childEntry : m_Recommendations) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("recommendations", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Errors
	if (!m_Errors.empty()) {
		for (const auto &childEntry : m_Errors) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("errors", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Warnings
	if (!m_Warnings.empty()) {
		for (const auto &childEntry : m_Warnings) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("warnings", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void OfferCardDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_OfferId = pt.get("offerId", "");
	if (pt.get_child_optional("mapping")) {
		m_Mapping = std::make_shared<GetMappingDTO>();
		m_Mapping->fromPropertyTree(pt.get_child("mapping"));
	}
	// push all items of ParameterValues into member vector
	if (pt.get_child_optional("parameterValues")) {
		for (const auto &childTree : pt.get_child("parameterValues")) {
            std::shared_ptr<ParameterValueDTO> val =
                std::make_shared<ParameterValueDTO>(childTree.second);
            m_ParameterValues.emplace_back(std::move(val));
		}
	}
	m_ContentRating = pt.get("contentRating", 0);
	// push all items of Recommendations into member vector
	if (pt.get_child_optional("recommendations")) {
		for (const auto &childTree : pt.get_child("recommendations")) {
            std::shared_ptr<OfferCardRecommendationDTO> val =
                std::make_shared<OfferCardRecommendationDTO>(childTree.second);
            m_Recommendations.emplace_back(std::move(val));
		}
	}
	// push all items of Errors into member vector
	if (pt.get_child_optional("errors")) {
		for (const auto &childTree : pt.get_child("errors")) {
            std::shared_ptr<OfferErrorDTO> val =
                std::make_shared<OfferErrorDTO>(childTree.second);
            m_Errors.emplace_back(std::move(val));
		}
	}
	// push all items of Warnings into member vector
	if (pt.get_child_optional("warnings")) {
		for (const auto &childTree : pt.get_child("warnings")) {
            std::shared_ptr<OfferErrorDTO> val =
                std::make_shared<OfferErrorDTO>(childTree.second);
            m_Warnings.emplace_back(std::move(val));
		}
	}
}

std::string OfferCardDTO::getOfferId() const
{
    return m_OfferId;
}

void OfferCardDTO::setOfferId(std::string value)
{
	m_OfferId = value;
}
std::shared_ptr<GetMappingDTO> OfferCardDTO::getMapping() const
{
    return m_Mapping;
}

void OfferCardDTO::setMapping(std::shared_ptr<GetMappingDTO> value)
{
	m_Mapping = value;
}
std::vector<std::shared_ptr<ParameterValueDTO>> OfferCardDTO::getParameterValues() const
{
    return m_ParameterValues;
}

void OfferCardDTO::setParameterValues(std::vector<std::shared_ptr<ParameterValueDTO>> value)
{
	m_ParameterValues = value;
}
std::shared_ptr<OfferCardStatusType> OfferCardDTO::getCardStatus() const
{
    return m_CardStatus;
}

void OfferCardDTO::setCardStatus(std::shared_ptr<OfferCardStatusType> value)
{
	m_CardStatus = value;
}
int32_t OfferCardDTO::getContentRating() const
{
    return m_ContentRating;
}

void OfferCardDTO::setContentRating(int32_t value)
{
	m_ContentRating = value;
}
std::vector<std::shared_ptr<OfferCardRecommendationDTO>> OfferCardDTO::getRecommendations() const
{
    return m_Recommendations;
}

void OfferCardDTO::setRecommendations(std::vector<std::shared_ptr<OfferCardRecommendationDTO>> value)
{
	m_Recommendations = value;
}
std::vector<std::shared_ptr<OfferErrorDTO>> OfferCardDTO::getErrors() const
{
    return m_Errors;
}

void OfferCardDTO::setErrors(std::vector<std::shared_ptr<OfferErrorDTO>> value)
{
	m_Errors = value;
}
std::vector<std::shared_ptr<OfferErrorDTO>> OfferCardDTO::getWarnings() const
{
    return m_Warnings;
}

void OfferCardDTO::setWarnings(std::vector<std::shared_ptr<OfferErrorDTO>> value)
{
	m_Warnings = value;
}

std::vector<OfferCardDTO> createOfferCardDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OfferCardDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OfferCardDTO(child.second));
    }

    return vec;
}

}
}
}
}

