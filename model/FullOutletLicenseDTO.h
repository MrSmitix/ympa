/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FullOutletLicenseDTO.h
 *
 * Информация о лицензии.
 */

#ifndef FullOutletLicenseDTO_H_
#define FullOutletLicenseDTO_H_


#include "LicenseType.h"
#include <string>
#include "LicenseCheckStatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о лицензии.
/// </summary>
class  FullOutletLicenseDTO
{
public:
    FullOutletLicenseDTO();
    virtual ~FullOutletLicenseDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FullOutletLicenseDTO& rhs) const;
    bool operator!=(const FullOutletLicenseDTO& rhs) const;

    /////////////////////////////////////////////
    /// FullOutletLicenseDTO members

    /// <summary>
    /// Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре &#x60;number&#x60;. 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Идентификатор точки продаж, для которой действительна лицензия.
    /// </summary>
    int64_t getOutletId() const;
    void setOutletId(int64_t const value);
    bool outletIdIsSet() const;
    void unsetOutletId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::LicenseType getLicenseType() const;
    void setLicenseType(org::openapitools::server::model::LicenseType const& value);
    bool licenseTypeIsSet() const;
    void unsetLicenseType();
    /// <summary>
    /// Номер лицензии.
    /// </summary>
    std::string getNumber() const;
    void setNumber(std::string const& value);
    bool numberIsSet() const;
    void unsetnumber();
    /// <summary>
    /// Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение &#x60;2017-11-13T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре &#x60;dateOfExpiry&#x60;. 
    /// </summary>
    std::string getDateOfIssue() const;
    void setDateOfIssue(std::string const& value);
    bool dateOfIssueIsSet() const;
    void unsetDateOfIssue();
    /// <summary>
    /// Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение &#x60;2022-11-20T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре &#x60;dateOfIssue&#x60;. 
    /// </summary>
    std::string getDateOfExpiry() const;
    void setDateOfExpiry(std::string const& value);
    bool dateOfExpiryIsSet() const;
    void unsetDateOfExpiry();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::LicenseCheckStatusType getCheckStatus() const;
    void setCheckStatus(org::openapitools::server::model::LicenseCheckStatusType const& value);
    bool checkStatusIsSet() const;
    void unsetCheckStatus();
    /// <summary>
    /// Причина, по которой лицензия не прошла проверку.  Параметр возвращается, только если параметр &#x60;checkStatus&#x60; имеет значение &#x60;FAIL&#x60;. 
    /// </summary>
    std::string getCheckComment() const;
    void setCheckComment(std::string const& value);
    bool checkCommentIsSet() const;
    void unsetCheckComment();

    friend  void to_json(nlohmann::json& j, const FullOutletLicenseDTO& o);
    friend  void from_json(const nlohmann::json& j, FullOutletLicenseDTO& o);
protected:
    int64_t m_Id;
    bool m_IdIsSet;
    int64_t m_OutletId;
    bool m_OutletIdIsSet;
    org::openapitools::server::model::LicenseType m_LicenseType;
    bool m_LicenseTypeIsSet;
    std::string m_number;
    bool m_numberIsSet;
    std::string m_DateOfIssue;
    bool m_DateOfIssueIsSet;
    std::string m_DateOfExpiry;
    bool m_DateOfExpiryIsSet;
    org::openapitools::server::model::LicenseCheckStatusType m_CheckStatus;
    bool m_CheckStatusIsSet;
    std::string m_CheckComment;
    bool m_CheckCommentIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* FullOutletLicenseDTO_H_ */
