/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FullOutletLicenseDTO.h
 *
 * Информация о лицензии.
 */

#ifndef FullOutletLicenseDTO_H_
#define FullOutletLicenseDTO_H_



#include "LicenseType.h"
#include <string>
#include "LicenseCheckStatusType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "OutletLicenseDTO.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о лицензии.
/// </summary>
class  FullOutletLicenseDTO : public OutletLicenseDTO
{
public:
    FullOutletLicenseDTO() = default;
    explicit FullOutletLicenseDTO(boost::property_tree::ptree const& pt);
    virtual ~FullOutletLicenseDTO() = default;

    FullOutletLicenseDTO(const FullOutletLicenseDTO& other) = default; // copy constructor
    FullOutletLicenseDTO(FullOutletLicenseDTO&& other) noexcept = default; // move constructor

    FullOutletLicenseDTO& operator=(const FullOutletLicenseDTO& other) = default; // copy assignment
    FullOutletLicenseDTO& operator=(FullOutletLicenseDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FullOutletLicenseDTO members

    /// <summary>
    /// Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре &#x60;number&#x60;. 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Идентификатор точки продаж, для которой действительна лицензия.
    /// </summary>
    int64_t getOutletId() const;
    void setOutletId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    LicenseType getLicenseType() const;
    void setLicenseType(LicenseType value);

    /// <summary>
    /// Номер лицензии.
    /// </summary>
    std::string getNumber() const;
    void setNumber(std::string value);

    /// <summary>
    /// Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение &#x60;2017-11-13T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре &#x60;dateOfExpiry&#x60;. 
    /// </summary>
    std::string getDateOfIssue() const;
    void setDateOfIssue(std::string value);

    /// <summary>
    /// Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение &#x60;2022-11-20T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре &#x60;dateOfIssue&#x60;. 
    /// </summary>
    std::string getDateOfExpiry() const;
    void setDateOfExpiry(std::string value);

    /// <summary>
    /// 
    /// </summary>
    LicenseCheckStatusType getCheckStatus() const;
    void setCheckStatus(LicenseCheckStatusType value);

    /// <summary>
    /// Причина, по которой лицензия не прошла проверку.  Параметр возвращается, только если параметр &#x60;checkStatus&#x60; имеет значение &#x60;FAIL&#x60;. 
    /// </summary>
    std::string getCheckComment() const;
    void setCheckComment(std::string value);

protected:
    int64_t m_Id = 0L;
    int64_t m_OutletId = 0L;
    LicenseType m_LicenseType = LicenseType{};
    std::string m_number = "";
    std::string m_DateOfIssue = "";
    std::string m_DateOfExpiry = "";
    LicenseCheckStatusType m_CheckStatus = LicenseCheckStatusType{};
    std::string m_CheckComment = "";
};

std::vector<FullOutletLicenseDTO> createFullOutletLicenseDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FullOutletLicenseDTO>(const FullOutletLicenseDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FullOutletLicenseDTO fromPt<FullOutletLicenseDTO>(const boost::property_tree::ptree& pt) {
    FullOutletLicenseDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FullOutletLicenseDTO_H_ */
