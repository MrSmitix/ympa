/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DeleteOffersRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

DeleteOffersRequest::DeleteOffersRequest()
{
    
}

void DeleteOffersRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool DeleteOffersRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool DeleteOffersRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "DeleteOffersRequest" : pathPrefix;

         
    
    /* OfferIds */ {
        const std::vector<std::string>& value = m_OfferIds;
        const std::string currentValuePath = _pathPrefix + ".offerIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 500)
        {
            success = false;
            msg << currentValuePath << ": must have at most 500 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }
 
                i++;
            }
        }

    }
    
    return success;
}

bool DeleteOffersRequest::operator==(const DeleteOffersRequest& rhs) const
{
    return
    
    
    (getOfferIds() == rhs.getOfferIds())
    
    
    ;
}

bool DeleteOffersRequest::operator!=(const DeleteOffersRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DeleteOffersRequest& o)
{
    j = nlohmann::json::object();
    j["offerIds"] = o.m_OfferIds;
    
}

void from_json(const nlohmann::json& j, DeleteOffersRequest& o)
{
    j.at("offerIds").get_to(o.m_OfferIds);
    
}

std::vector<std::string> DeleteOffersRequest::getOfferIds() const
{
    return m_OfferIds;
}
void DeleteOffersRequest::setOfferIds(std::vector<std::string> const& value)
{
    m_OfferIds = value;
}


} // namespace org::openapitools::server::model

