/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrdersShipmentInfoDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrdersShipmentInfoDTO::OrdersShipmentInfoDTO()
{
    
}

void OrdersShipmentInfoDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrdersShipmentInfoDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrdersShipmentInfoDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrdersShipmentInfoDTO" : pathPrefix;

         
    
    /* OrderIdsWithLabels */ {
        const std::set<int64_t>& value = m_OrderIdsWithLabels;
        const std::string currentValuePath = _pathPrefix + ".orderIdsWithLabels";
                
        
        if (!org::openapitools::server::helpers::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    
    /* OrderIdsWithoutLabels */ {
        const std::set<int64_t>& value = m_OrderIdsWithoutLabels;
        const std::string currentValuePath = _pathPrefix + ".orderIdsWithoutLabels";
                
        
        if (!org::openapitools::server::helpers::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool OrdersShipmentInfoDTO::operator==(const OrdersShipmentInfoDTO& rhs) const
{
    return
    
    
    (getOrderIdsWithLabels() == rhs.getOrderIdsWithLabels())
     &&
    
    (getOrderIdsWithoutLabels() == rhs.getOrderIdsWithoutLabels())
    
    
    ;
}

bool OrdersShipmentInfoDTO::operator!=(const OrdersShipmentInfoDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrdersShipmentInfoDTO& o)
{
    j = nlohmann::json::object();
    j["orderIdsWithLabels"] = o.m_OrderIdsWithLabels;
    j["orderIdsWithoutLabels"] = o.m_OrderIdsWithoutLabels;
    
}

void from_json(const nlohmann::json& j, OrdersShipmentInfoDTO& o)
{
    j.at("orderIdsWithLabels").get_to(o.m_OrderIdsWithLabels);
    j.at("orderIdsWithoutLabels").get_to(o.m_OrderIdsWithoutLabels);
    
}

std::set<int64_t> OrdersShipmentInfoDTO::getOrderIdsWithLabels() const
{
    return m_OrderIdsWithLabels;
}
void OrdersShipmentInfoDTO::setOrderIdsWithLabels(std::set<int64_t> const value)
{
    m_OrderIdsWithLabels = value;
}
std::set<int64_t> OrdersShipmentInfoDTO::getOrderIdsWithoutLabels() const
{
    return m_OrderIdsWithoutLabels;
}
void OrdersShipmentInfoDTO::setOrderIdsWithoutLabels(std::set<int64_t> const value)
{
    m_OrderIdsWithoutLabels = value;
}


} // namespace org::openapitools::server::model

