/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GetGoodsFeedbackRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

GetGoodsFeedbackRequest::GetGoodsFeedbackRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string GetGoodsFeedbackRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void GetGoodsFeedbackRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree GetGoodsFeedbackRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("dateTimeFrom", m_DateTimeFrom);
	pt.put("dateTimeTo", m_DateTimeTo);
	// generate tree for RatingValues
    tmp_node.clear();
	if (!m_RatingValues.empty()) {
        tmp_node = toPt(m_RatingValues);
		pt.add_child("ratingValues", tmp_node);
		tmp_node.clear();
	}
	// generate tree for ModelIds
    tmp_node.clear();
	if (!m_ModelIds.empty()) {
        tmp_node = toPt(m_ModelIds);
		pt.add_child("modelIds", tmp_node);
		tmp_node.clear();
	}
	pt.put("paid", m_Paid);
	return pt;
}

void GetGoodsFeedbackRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_DateTimeFrom = pt.get("dateTimeFrom", "");
	m_DateTimeTo = pt.get("dateTimeTo", "");
	// push all items of RatingValues into member
	if (pt.get_child_optional("ratingValues")) {
        m_RatingValues = fromPt<std::set<int32_t>>(pt.get_child("ratingValues"));
	}
	// push all items of ModelIds into member
	if (pt.get_child_optional("modelIds")) {
        m_ModelIds = fromPt<std::set<int64_t>>(pt.get_child("modelIds"));
	}
	m_Paid = pt.get("paid", false);
}

std::string GetGoodsFeedbackRequest::getDateTimeFrom() const
{
    return m_DateTimeFrom;
}

void GetGoodsFeedbackRequest::setDateTimeFrom(std::string value)
{
    m_DateTimeFrom = value;
}


std::string GetGoodsFeedbackRequest::getDateTimeTo() const
{
    return m_DateTimeTo;
}

void GetGoodsFeedbackRequest::setDateTimeTo(std::string value)
{
    m_DateTimeTo = value;
}


FeedbackReactionStatusType GetGoodsFeedbackRequest::getReactionStatus() const
{
    return m_ReactionStatus;
}

void GetGoodsFeedbackRequest::setReactionStatus(FeedbackReactionStatusType value)
{
    m_ReactionStatus = value;
}


std::set<int32_t> GetGoodsFeedbackRequest::getRatingValues() const
{
    return m_RatingValues;
}

void GetGoodsFeedbackRequest::setRatingValues(std::set<int32_t> value)
{
    m_RatingValues = value;
}


std::set<int64_t> GetGoodsFeedbackRequest::getModelIds() const
{
    return m_ModelIds;
}

void GetGoodsFeedbackRequest::setModelIds(std::set<int64_t> value)
{
    m_ModelIds = value;
}


bool GetGoodsFeedbackRequest::isPaid() const
{
    return m_Paid;
}

void GetGoodsFeedbackRequest::setPaid(bool value)
{
    m_Paid = value;
}



std::vector<GetGoodsFeedbackRequest> createGetGoodsFeedbackRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<GetGoodsFeedbackRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(GetGoodsFeedbackRequest(child.second));
    }

    return vec;
}

}
}
}
}

