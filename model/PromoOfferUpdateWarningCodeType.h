/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PromoOfferUpdateWarningCodeType.h
 *
 * Предупреждение, которое появилось при добавлении товара:  * &#x60;DEEP_DISCOUNT_OFFER&#x60; — большая разница с ценой в каталоге. Проверьте, нет ли ошибки.  * &#x60;CATALOG_PRICE_IS_LOWER_THAN_PROMO&#x60; — [базовая цена](*basic-price) в кабинете ниже цены по акции. У товара в акции будет отображаться базовая цена.  * &#x60;SHOP_PRICES_ARE_LOWER_THAN_PROMO&#x60; — цена в отдельном магазине ниже цены по акции. У товара в акции будет отображаться цена в магазине. Для остальных магазинов будет действовать цена по акции.  * &#x60;PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE&#x60; — в отдельном магазине цена с учетом промокода выше максимально возможной цены. Товар не будет участвовать в акции.  * &#x60;SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO&#x60; — товар в отдельном магазине не подходит под условия акции. 
 */

#ifndef PromoOfferUpdateWarningCodeType_H_
#define PromoOfferUpdateWarningCodeType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Предупреждение, которое появилось при добавлении товара:  * &#x60;DEEP_DISCOUNT_OFFER&#x60; — большая разница с ценой в каталоге. Проверьте, нет ли ошибки.  * &#x60;CATALOG_PRICE_IS_LOWER_THAN_PROMO&#x60; — [базовая цена](*basic-price) в кабинете ниже цены по акции. У товара в акции будет отображаться базовая цена.  * &#x60;SHOP_PRICES_ARE_LOWER_THAN_PROMO&#x60; — цена в отдельном магазине ниже цены по акции. У товара в акции будет отображаться цена в магазине. Для остальных магазинов будет действовать цена по акции.  * &#x60;PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE&#x60; — в отдельном магазине цена с учетом промокода выше максимально возможной цены. Товар не будет участвовать в акции.  * &#x60;SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO&#x60; — товар в отдельном магазине не подходит под условия акции. 
/// </summary>
class  PromoOfferUpdateWarningCodeType 
{
public:
    PromoOfferUpdateWarningCodeType() = default;
    explicit PromoOfferUpdateWarningCodeType(boost::property_tree::ptree const& pt);
    virtual ~PromoOfferUpdateWarningCodeType() = default;

    PromoOfferUpdateWarningCodeType(const PromoOfferUpdateWarningCodeType& other) = default; // copy constructor
    PromoOfferUpdateWarningCodeType(PromoOfferUpdateWarningCodeType&& other) noexcept = default; // move constructor

    PromoOfferUpdateWarningCodeType& operator=(const PromoOfferUpdateWarningCodeType& other) = default; // copy assignment
    PromoOfferUpdateWarningCodeType& operator=(PromoOfferUpdateWarningCodeType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// PromoOfferUpdateWarningCodeType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_PromoOfferUpdateWarningCodeTypeEnumValue;
};

std::vector<PromoOfferUpdateWarningCodeType> createPromoOfferUpdateWarningCodeTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PromoOfferUpdateWarningCodeType>(const PromoOfferUpdateWarningCodeType& val) {
    return val.toPropertyTree();
}

template<>
inline PromoOfferUpdateWarningCodeType fromPt<PromoOfferUpdateWarningCodeType>(const boost::property_tree::ptree& pt) {
    PromoOfferUpdateWarningCodeType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PromoOfferUpdateWarningCodeType_H_ */
