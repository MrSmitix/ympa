/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CategoryDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CategoryDTO::CategoryDTO()
{
    m_Id = 0L;
    m_Name = "";
    m_ChildrenIsSet = false;
    
}

void CategoryDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CategoryDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CategoryDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CategoryDTO" : pathPrefix;

                 
    if (childrenIsSet())
    {
        const std::vector<org::openapitools::server::model::CategoryDTO>& value = m_Children;
        const std::string currentValuePath = _pathPrefix + ".children";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::CategoryDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".children") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool CategoryDTO::operator==(const CategoryDTO& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getName() == rhs.getName())
     &&
    
    
    ((!childrenIsSet() && !rhs.childrenIsSet()) || (childrenIsSet() && rhs.childrenIsSet() && getChildren() == rhs.getChildren()))
    
    ;
}

bool CategoryDTO::operator!=(const CategoryDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CategoryDTO& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    j["name"] = o.m_Name;
    if(o.childrenIsSet() || !o.m_Children.empty())
        j["children"] = o.m_Children;
    
}

void from_json(const nlohmann::json& j, CategoryDTO& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("name").get_to(o.m_Name);
    if(j.find("children") != j.end())
    {
        j.at("children").get_to(o.m_Children);
        o.m_ChildrenIsSet = true;
    } 
    
}

int64_t CategoryDTO::getId() const
{
    return m_Id;
}
void CategoryDTO::setId(int64_t const value)
{
    m_Id = value;
}
std::string CategoryDTO::getName() const
{
    return m_Name;
}
void CategoryDTO::setName(std::string const& value)
{
    m_Name = value;
}
std::vector<org::openapitools::server::model::CategoryDTO> CategoryDTO::getChildren() const
{
    return m_Children;
}
void CategoryDTO::setChildren(std::vector<org::openapitools::server::model::CategoryDTO> const& value)
{
    m_Children = value;
    m_ChildrenIsSet = true;
}
bool CategoryDTO::childrenIsSet() const
{
    return m_ChildrenIsSet;
}
void CategoryDTO::unsetChildren()
{
    m_ChildrenIsSet = false;
}


} // namespace org::openapitools::server::model

