/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferCardStatusType.h
 *
 * Статус карточки товара:  * &#x60;HAS_CARD_CAN_NOT_UPDATE&#x60; — Карточка Маркета. * &#x60;HAS_CARD_CAN_UPDATE&#x60; — Можно дополнить. * &#x60;HAS_CARD_CAN_UPDATE_ERRORS&#x60; — Изменения не приняты. * &#x60;HAS_CARD_CAN_UPDATE_PROCESSING&#x60; — Изменения на проверке. * &#x60;NO_CARD_NEED_CONTENT&#x60; — Создайте карточку. * &#x60;NO_CARD_MARKET_WILL_CREATE&#x60; — Создаст Маркет. * &#x60;NO_CARD_ERRORS&#x60; — Не создана из-за ошибки. * &#x60;NO_CARD_PROCESSING&#x60; — Проверяем данные. * &#x60;NO_CARD_ADD_TO_CAMPAIGN&#x60; — Разместите товар в магазине.  [Что обозначает каждый из статусов](https://yandex.ru/support/marketplace/assortment/content/statuses.html) 
 */

#ifndef OfferCardStatusType_H_
#define OfferCardStatusType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Статус карточки товара:  * &#x60;HAS_CARD_CAN_NOT_UPDATE&#x60; — Карточка Маркета. * &#x60;HAS_CARD_CAN_UPDATE&#x60; — Можно дополнить. * &#x60;HAS_CARD_CAN_UPDATE_ERRORS&#x60; — Изменения не приняты. * &#x60;HAS_CARD_CAN_UPDATE_PROCESSING&#x60; — Изменения на проверке. * &#x60;NO_CARD_NEED_CONTENT&#x60; — Создайте карточку. * &#x60;NO_CARD_MARKET_WILL_CREATE&#x60; — Создаст Маркет. * &#x60;NO_CARD_ERRORS&#x60; — Не создана из-за ошибки. * &#x60;NO_CARD_PROCESSING&#x60; — Проверяем данные. * &#x60;NO_CARD_ADD_TO_CAMPAIGN&#x60; — Разместите товар в магазине.  [Что обозначает каждый из статусов](https://yandex.ru/support/marketplace/assortment/content/statuses.html) 
/// </summary>
class  OfferCardStatusType 
{
public:
    OfferCardStatusType() = default;
    explicit OfferCardStatusType(boost::property_tree::ptree const& pt);
    virtual ~OfferCardStatusType() = default;

    OfferCardStatusType(const OfferCardStatusType& other) = default; // copy constructor
    OfferCardStatusType(OfferCardStatusType&& other) noexcept = default; // move constructor

    OfferCardStatusType& operator=(const OfferCardStatusType& other) = default; // copy assignment
    OfferCardStatusType& operator=(OfferCardStatusType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// OfferCardStatusType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_OfferCardStatusTypeEnumValue;
};

std::vector<OfferCardStatusType> createOfferCardStatusTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OfferCardStatusType>(const OfferCardStatusType& val) {
    return val.toPropertyTree();
}

template<>
inline OfferCardStatusType fromPt<OfferCardStatusType>(const boost::property_tree::ptree& pt) {
    OfferCardStatusType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OfferCardStatusType_H_ */
