/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ShipmentInfoDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ShipmentInfoDTO::ShipmentInfoDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_PlanIntervalFrom = "";
    m_PlanIntervalFromIsSet = false;
    m_PlanIntervalTo = "";
    m_PlanIntervalToIsSet = false;
    m_ShipmentTypeIsSet = false;
    m_WarehouseIsSet = false;
    m_WarehouseToIsSet = false;
    m_ExternalId = "";
    m_ExternalIdIsSet = false;
    m_DeliveryServiceIsSet = false;
    m_PalletsCountIsSet = false;
    m_DraftCount = 0;
    m_DraftCountIsSet = false;
    m_PlannedCount = 0;
    m_PlannedCountIsSet = false;
    m_FactCount = 0;
    m_FactCountIsSet = false;
    m_StatusIsSet = false;
    m_StatusDescription = "";
    m_StatusDescriptionIsSet = false;
    m_StatusUpdateTime = "";
    m_StatusUpdateTimeIsSet = false;
    
}

void ShipmentInfoDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ShipmentInfoDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ShipmentInfoDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ShipmentInfoDTO" : pathPrefix;

                                             
    
    /* OrderIds */ {
        const std::set<int64_t>& value = m_OrderIds;
        const std::string currentValuePath = _pathPrefix + ".orderIds";
                
        
        if (!org::openapitools::server::helpers::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                            
    return success;
}

bool ShipmentInfoDTO::operator==(const ShipmentInfoDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!planIntervalFromIsSet() && !rhs.planIntervalFromIsSet()) || (planIntervalFromIsSet() && rhs.planIntervalFromIsSet() && getPlanIntervalFrom() == rhs.getPlanIntervalFrom())) &&
    
    
    ((!planIntervalToIsSet() && !rhs.planIntervalToIsSet()) || (planIntervalToIsSet() && rhs.planIntervalToIsSet() && getPlanIntervalTo() == rhs.getPlanIntervalTo())) &&
    
    
    ((!shipmentTypeIsSet() && !rhs.shipmentTypeIsSet()) || (shipmentTypeIsSet() && rhs.shipmentTypeIsSet() && getShipmentType() == rhs.getShipmentType())) &&
    
    
    ((!warehouseIsSet() && !rhs.warehouseIsSet()) || (warehouseIsSet() && rhs.warehouseIsSet() && getWarehouse() == rhs.getWarehouse())) &&
    
    
    ((!warehouseToIsSet() && !rhs.warehouseToIsSet()) || (warehouseToIsSet() && rhs.warehouseToIsSet() && getWarehouseTo() == rhs.getWarehouseTo())) &&
    
    
    ((!externalIdIsSet() && !rhs.externalIdIsSet()) || (externalIdIsSet() && rhs.externalIdIsSet() && getExternalId() == rhs.getExternalId())) &&
    
    
    ((!deliveryServiceIsSet() && !rhs.deliveryServiceIsSet()) || (deliveryServiceIsSet() && rhs.deliveryServiceIsSet() && getDeliveryService() == rhs.getDeliveryService())) &&
    
    
    ((!palletsCountIsSet() && !rhs.palletsCountIsSet()) || (palletsCountIsSet() && rhs.palletsCountIsSet() && getPalletsCount() == rhs.getPalletsCount())) &&
    
    (getOrderIds() == rhs.getOrderIds())
     &&
    
    
    ((!draftCountIsSet() && !rhs.draftCountIsSet()) || (draftCountIsSet() && rhs.draftCountIsSet() && getDraftCount() == rhs.getDraftCount())) &&
    
    
    ((!plannedCountIsSet() && !rhs.plannedCountIsSet()) || (plannedCountIsSet() && rhs.plannedCountIsSet() && getPlannedCount() == rhs.getPlannedCount())) &&
    
    
    ((!factCountIsSet() && !rhs.factCountIsSet()) || (factCountIsSet() && rhs.factCountIsSet() && getFactCount() == rhs.getFactCount())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!statusDescriptionIsSet() && !rhs.statusDescriptionIsSet()) || (statusDescriptionIsSet() && rhs.statusDescriptionIsSet() && getStatusDescription() == rhs.getStatusDescription())) &&
    
    
    ((!statusUpdateTimeIsSet() && !rhs.statusUpdateTimeIsSet()) || (statusUpdateTimeIsSet() && rhs.statusUpdateTimeIsSet() && getStatusUpdateTime() == rhs.getStatusUpdateTime()))
    
    ;
}

bool ShipmentInfoDTO::operator!=(const ShipmentInfoDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ShipmentInfoDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.planIntervalFromIsSet())
        j["planIntervalFrom"] = o.m_PlanIntervalFrom;
    if(o.planIntervalToIsSet())
        j["planIntervalTo"] = o.m_PlanIntervalTo;
    if(o.shipmentTypeIsSet())
        j["shipmentType"] = o.m_ShipmentType;
    if(o.warehouseIsSet())
        j["warehouse"] = o.m_Warehouse;
    if(o.warehouseToIsSet())
        j["warehouseTo"] = o.m_WarehouseTo;
    if(o.externalIdIsSet())
        j["externalId"] = o.m_ExternalId;
    if(o.deliveryServiceIsSet())
        j["deliveryService"] = o.m_DeliveryService;
    if(o.palletsCountIsSet())
        j["palletsCount"] = o.m_PalletsCount;
    j["orderIds"] = o.m_OrderIds;
    if(o.draftCountIsSet())
        j["draftCount"] = o.m_DraftCount;
    if(o.plannedCountIsSet())
        j["plannedCount"] = o.m_PlannedCount;
    if(o.factCountIsSet())
        j["factCount"] = o.m_FactCount;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.statusDescriptionIsSet())
        j["statusDescription"] = o.m_StatusDescription;
    if(o.statusUpdateTimeIsSet())
        j["statusUpdateTime"] = o.m_StatusUpdateTime;
    
}

void from_json(const nlohmann::json& j, ShipmentInfoDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("planIntervalFrom") != j.end())
    {
        j.at("planIntervalFrom").get_to(o.m_PlanIntervalFrom);
        o.m_PlanIntervalFromIsSet = true;
    } 
    if(j.find("planIntervalTo") != j.end())
    {
        j.at("planIntervalTo").get_to(o.m_PlanIntervalTo);
        o.m_PlanIntervalToIsSet = true;
    } 
    if(j.find("shipmentType") != j.end())
    {
        j.at("shipmentType").get_to(o.m_ShipmentType);
        o.m_ShipmentTypeIsSet = true;
    } 
    if(j.find("warehouse") != j.end())
    {
        j.at("warehouse").get_to(o.m_Warehouse);
        o.m_WarehouseIsSet = true;
    } 
    if(j.find("warehouseTo") != j.end())
    {
        j.at("warehouseTo").get_to(o.m_WarehouseTo);
        o.m_WarehouseToIsSet = true;
    } 
    if(j.find("externalId") != j.end())
    {
        j.at("externalId").get_to(o.m_ExternalId);
        o.m_ExternalIdIsSet = true;
    } 
    if(j.find("deliveryService") != j.end())
    {
        j.at("deliveryService").get_to(o.m_DeliveryService);
        o.m_DeliveryServiceIsSet = true;
    } 
    if(j.find("palletsCount") != j.end())
    {
        j.at("palletsCount").get_to(o.m_PalletsCount);
        o.m_PalletsCountIsSet = true;
    } 
    j.at("orderIds").get_to(o.m_OrderIds);
    if(j.find("draftCount") != j.end())
    {
        j.at("draftCount").get_to(o.m_DraftCount);
        o.m_DraftCountIsSet = true;
    } 
    if(j.find("plannedCount") != j.end())
    {
        j.at("plannedCount").get_to(o.m_PlannedCount);
        o.m_PlannedCountIsSet = true;
    } 
    if(j.find("factCount") != j.end())
    {
        j.at("factCount").get_to(o.m_FactCount);
        o.m_FactCountIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("statusDescription") != j.end())
    {
        j.at("statusDescription").get_to(o.m_StatusDescription);
        o.m_StatusDescriptionIsSet = true;
    } 
    if(j.find("statusUpdateTime") != j.end())
    {
        j.at("statusUpdateTime").get_to(o.m_StatusUpdateTime);
        o.m_StatusUpdateTimeIsSet = true;
    } 
    
}

int64_t ShipmentInfoDTO::getId() const
{
    return m_Id;
}
void ShipmentInfoDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ShipmentInfoDTO::idIsSet() const
{
    return m_IdIsSet;
}
void ShipmentInfoDTO::unsetId()
{
    m_IdIsSet = false;
}
std::string ShipmentInfoDTO::getPlanIntervalFrom() const
{
    return m_PlanIntervalFrom;
}
void ShipmentInfoDTO::setPlanIntervalFrom(std::string const& value)
{
    m_PlanIntervalFrom = value;
    m_PlanIntervalFromIsSet = true;
}
bool ShipmentInfoDTO::planIntervalFromIsSet() const
{
    return m_PlanIntervalFromIsSet;
}
void ShipmentInfoDTO::unsetPlanIntervalFrom()
{
    m_PlanIntervalFromIsSet = false;
}
std::string ShipmentInfoDTO::getPlanIntervalTo() const
{
    return m_PlanIntervalTo;
}
void ShipmentInfoDTO::setPlanIntervalTo(std::string const& value)
{
    m_PlanIntervalTo = value;
    m_PlanIntervalToIsSet = true;
}
bool ShipmentInfoDTO::planIntervalToIsSet() const
{
    return m_PlanIntervalToIsSet;
}
void ShipmentInfoDTO::unsetPlanIntervalTo()
{
    m_PlanIntervalToIsSet = false;
}
org::openapitools::server::model::ShipmentType ShipmentInfoDTO::getShipmentType() const
{
    return m_ShipmentType;
}
void ShipmentInfoDTO::setShipmentType(org::openapitools::server::model::ShipmentType const& value)
{
    m_ShipmentType = value;
    m_ShipmentTypeIsSet = true;
}
bool ShipmentInfoDTO::shipmentTypeIsSet() const
{
    return m_ShipmentTypeIsSet;
}
void ShipmentInfoDTO::unsetShipmentType()
{
    m_ShipmentTypeIsSet = false;
}
org::openapitools::server::model::PartnerShipmentWarehouseDTO ShipmentInfoDTO::getWarehouse() const
{
    return m_Warehouse;
}
void ShipmentInfoDTO::setWarehouse(org::openapitools::server::model::PartnerShipmentWarehouseDTO const& value)
{
    m_Warehouse = value;
    m_WarehouseIsSet = true;
}
bool ShipmentInfoDTO::warehouseIsSet() const
{
    return m_WarehouseIsSet;
}
void ShipmentInfoDTO::unsetWarehouse()
{
    m_WarehouseIsSet = false;
}
org::openapitools::server::model::PartnerShipmentWarehouseDTO ShipmentInfoDTO::getWarehouseTo() const
{
    return m_WarehouseTo;
}
void ShipmentInfoDTO::setWarehouseTo(org::openapitools::server::model::PartnerShipmentWarehouseDTO const& value)
{
    m_WarehouseTo = value;
    m_WarehouseToIsSet = true;
}
bool ShipmentInfoDTO::warehouseToIsSet() const
{
    return m_WarehouseToIsSet;
}
void ShipmentInfoDTO::unsetWarehouseTo()
{
    m_WarehouseToIsSet = false;
}
std::string ShipmentInfoDTO::getExternalId() const
{
    return m_ExternalId;
}
void ShipmentInfoDTO::setExternalId(std::string const& value)
{
    m_ExternalId = value;
    m_ExternalIdIsSet = true;
}
bool ShipmentInfoDTO::externalIdIsSet() const
{
    return m_ExternalIdIsSet;
}
void ShipmentInfoDTO::unsetExternalId()
{
    m_ExternalIdIsSet = false;
}
org::openapitools::server::model::DeliveryServiceDTO ShipmentInfoDTO::getDeliveryService() const
{
    return m_DeliveryService;
}
void ShipmentInfoDTO::setDeliveryService(org::openapitools::server::model::DeliveryServiceDTO const& value)
{
    m_DeliveryService = value;
    m_DeliveryServiceIsSet = true;
}
bool ShipmentInfoDTO::deliveryServiceIsSet() const
{
    return m_DeliveryServiceIsSet;
}
void ShipmentInfoDTO::unsetDeliveryService()
{
    m_DeliveryServiceIsSet = false;
}
org::openapitools::server::model::PalletsCountDTO ShipmentInfoDTO::getPalletsCount() const
{
    return m_PalletsCount;
}
void ShipmentInfoDTO::setPalletsCount(org::openapitools::server::model::PalletsCountDTO const& value)
{
    m_PalletsCount = value;
    m_PalletsCountIsSet = true;
}
bool ShipmentInfoDTO::palletsCountIsSet() const
{
    return m_PalletsCountIsSet;
}
void ShipmentInfoDTO::unsetPalletsCount()
{
    m_PalletsCountIsSet = false;
}
std::set<int64_t> ShipmentInfoDTO::getOrderIds() const
{
    return m_OrderIds;
}
void ShipmentInfoDTO::setOrderIds(std::set<int64_t> const value)
{
    m_OrderIds = value;
}
int32_t ShipmentInfoDTO::getDraftCount() const
{
    return m_DraftCount;
}
void ShipmentInfoDTO::setDraftCount(int32_t const value)
{
    m_DraftCount = value;
    m_DraftCountIsSet = true;
}
bool ShipmentInfoDTO::draftCountIsSet() const
{
    return m_DraftCountIsSet;
}
void ShipmentInfoDTO::unsetDraftCount()
{
    m_DraftCountIsSet = false;
}
int32_t ShipmentInfoDTO::getPlannedCount() const
{
    return m_PlannedCount;
}
void ShipmentInfoDTO::setPlannedCount(int32_t const value)
{
    m_PlannedCount = value;
    m_PlannedCountIsSet = true;
}
bool ShipmentInfoDTO::plannedCountIsSet() const
{
    return m_PlannedCountIsSet;
}
void ShipmentInfoDTO::unsetPlannedCount()
{
    m_PlannedCountIsSet = false;
}
int32_t ShipmentInfoDTO::getFactCount() const
{
    return m_FactCount;
}
void ShipmentInfoDTO::setFactCount(int32_t const value)
{
    m_FactCount = value;
    m_FactCountIsSet = true;
}
bool ShipmentInfoDTO::factCountIsSet() const
{
    return m_FactCountIsSet;
}
void ShipmentInfoDTO::unsetFactCount()
{
    m_FactCountIsSet = false;
}
org::openapitools::server::model::ShipmentStatusType ShipmentInfoDTO::getStatus() const
{
    return m_Status;
}
void ShipmentInfoDTO::setStatus(org::openapitools::server::model::ShipmentStatusType const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool ShipmentInfoDTO::statusIsSet() const
{
    return m_StatusIsSet;
}
void ShipmentInfoDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string ShipmentInfoDTO::getStatusDescription() const
{
    return m_StatusDescription;
}
void ShipmentInfoDTO::setStatusDescription(std::string const& value)
{
    m_StatusDescription = value;
    m_StatusDescriptionIsSet = true;
}
bool ShipmentInfoDTO::statusDescriptionIsSet() const
{
    return m_StatusDescriptionIsSet;
}
void ShipmentInfoDTO::unsetStatusDescription()
{
    m_StatusDescriptionIsSet = false;
}
std::string ShipmentInfoDTO::getStatusUpdateTime() const
{
    return m_StatusUpdateTime;
}
void ShipmentInfoDTO::setStatusUpdateTime(std::string const& value)
{
    m_StatusUpdateTime = value;
    m_StatusUpdateTimeIsSet = true;
}
bool ShipmentInfoDTO::statusUpdateTimeIsSet() const
{
    return m_StatusUpdateTimeIsSet;
}
void ShipmentInfoDTO::unsetStatusUpdateTime()
{
    m_StatusUpdateTimeIsSet = false;
}


} // namespace org::openapitools::server::model

