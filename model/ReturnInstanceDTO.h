/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnInstanceDTO.h
 *
 * Логистическая информация по возврату.
 */

#ifndef ReturnInstanceDTO_H_
#define ReturnInstanceDTO_H_



#include "ReturnInstanceStockType.h"
#include <string>
#include "ReturnInstanceStatusType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Логистическая информация по возврату.
/// </summary>
class  ReturnInstanceDTO 
{
public:
    ReturnInstanceDTO() = default;
    explicit ReturnInstanceDTO(boost::property_tree::ptree const& pt);
    virtual ~ReturnInstanceDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// ReturnInstanceDTO members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReturnInstanceStockType> getStockType() const;
    void setStockType(std::shared_ptr<ReturnInstanceStockType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReturnInstanceStatusType> getStatus() const;
    void setStatus(std::shared_ptr<ReturnInstanceStatusType> value);

    /// <summary>
    /// Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
    /// </summary>
    std::string getCis() const;
    void setCis(std::string value);

    /// <summary>
    /// Международный идентификатор мобильного оборудования.
    /// </summary>
    std::string getImei() const;
    void setImei(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::shared_ptr<ReturnInstanceStockType> m_StockType = std::make_shared<ReturnInstanceStockType>();
    std::shared_ptr<ReturnInstanceStatusType> m_Status = std::make_shared<ReturnInstanceStatusType>();
    std::string m_Cis = "";
    std::string m_Imei = "";
};

std::vector<ReturnInstanceDTO> createReturnInstanceDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* ReturnInstanceDTO_H_ */
