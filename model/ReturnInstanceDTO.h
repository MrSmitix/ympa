/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ReturnInstanceDTO.h
 *
 * Логистическая информация по возврату.
 */

#ifndef ReturnInstanceDTO_H_
#define ReturnInstanceDTO_H_


#include "ReturnInstanceStockType.h"
#include <string>
#include "ReturnInstanceStatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Логистическая информация по возврату.
/// </summary>
class  ReturnInstanceDTO
{
public:
    ReturnInstanceDTO();
    virtual ~ReturnInstanceDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ReturnInstanceDTO& rhs) const;
    bool operator!=(const ReturnInstanceDTO& rhs) const;

    /////////////////////////////////////////////
    /// ReturnInstanceDTO members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ReturnInstanceStockType getStockType() const;
    void setStockType(org::openapitools::server::model::ReturnInstanceStockType const& value);
    bool stockTypeIsSet() const;
    void unsetStockType();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ReturnInstanceStatusType getStatus() const;
    void setStatus(org::openapitools::server::model::ReturnInstanceStatusType const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
    /// </summary>
    std::string getCis() const;
    void setCis(std::string const& value);
    bool cisIsSet() const;
    void unsetCis();
    /// <summary>
    /// Международный идентификатор мобильного оборудования.
    /// </summary>
    std::string getImei() const;
    void setImei(std::string const& value);
    bool imeiIsSet() const;
    void unsetImei();

    friend  void to_json(nlohmann::json& j, const ReturnInstanceDTO& o);
    friend  void from_json(const nlohmann::json& j, ReturnInstanceDTO& o);
protected:
    org::openapitools::server::model::ReturnInstanceStockType m_StockType;
    bool m_StockTypeIsSet;
    org::openapitools::server::model::ReturnInstanceStatusType m_Status;
    bool m_StatusIsSet;
    std::string m_Cis;
    bool m_CisIsSet;
    std::string m_Imei;
    bool m_ImeiIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ReturnInstanceDTO_H_ */
