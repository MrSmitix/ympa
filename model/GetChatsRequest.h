/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GetChatsRequest.h
 *
 * Фильтры по чатам, которые нужно вернуть. 
 */

#ifndef GetChatsRequest_H_
#define GetChatsRequest_H_


#include "ChatType.h"
#include <vector>
#include "ChatStatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Фильтры по чатам, которые нужно вернуть. 
/// </summary>
class  GetChatsRequest
{
public:
    GetChatsRequest();
    virtual ~GetChatsRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GetChatsRequest& rhs) const;
    bool operator!=(const GetChatsRequest& rhs) const;

    /////////////////////////////////////////////
    /// GetChatsRequest members

    /// <summary>
    /// Фильтр по идентификаторам заказов на Маркете.
    /// </summary>
    std::vector<int64_t> getOrderIds() const;
    void setOrderIds(std::vector<int64_t> const value);
    bool orderIdsIsSet() const;
    void unsetOrderIds();
    /// <summary>
    /// Фильтр по типам чатов.
    /// </summary>
    std::vector<org::openapitools::server::model::ChatType> getTypes() const;
    void setTypes(std::vector<org::openapitools::server::model::ChatType> const& value);
    bool typesIsSet() const;
    void unsetTypes();
    /// <summary>
    /// Фильтр по статусам чатов.
    /// </summary>
    std::vector<org::openapitools::server::model::ChatStatusType> getStatuses() const;
    void setStatuses(std::vector<org::openapitools::server::model::ChatStatusType> const& value);
    bool statusesIsSet() const;
    void unsetStatuses();

    friend  void to_json(nlohmann::json& j, const GetChatsRequest& o);
    friend  void from_json(const nlohmann::json& j, GetChatsRequest& o);
protected:
    std::vector<int64_t> m_OrderIds;
    bool m_OrderIdsIsSet;
    std::vector<org::openapitools::server::model::ChatType> m_Types;
    bool m_TypesIsSet;
    std::vector<org::openapitools::server::model::ChatStatusType> m_Statuses;
    bool m_StatusesIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GetChatsRequest_H_ */
