/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetChatsRequest.h
 *
 * Фильтры по чатам, которые нужно вернуть. 
 */

#ifndef GetChatsRequest_H_
#define GetChatsRequest_H_



#include "ChatType.h"
#include <vector>
#include "ChatStatusType.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Фильтры по чатам, которые нужно вернуть. 
/// </summary>
class  GetChatsRequest 
{
public:
    GetChatsRequest() = default;
    explicit GetChatsRequest(boost::property_tree::ptree const& pt);
    virtual ~GetChatsRequest() = default;

    GetChatsRequest(const GetChatsRequest& other) = default; // copy constructor
    GetChatsRequest(GetChatsRequest&& other) noexcept = default; // move constructor

    GetChatsRequest& operator=(const GetChatsRequest& other) = default; // copy assignment
    GetChatsRequest& operator=(GetChatsRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GetChatsRequest members

    /// <summary>
    /// Фильтр по идентификаторам заказов на Маркете.
    /// </summary>
    std::vector<int64_t> getOrderIds() const;
    void setOrderIds(std::vector<int64_t> value);

    /// <summary>
    /// Фильтр по типам чатов.
    /// </summary>
    std::vector<ChatType> getTypes() const;
    void setTypes(std::vector<ChatType> value);

    /// <summary>
    /// Фильтр по статусам чатов.
    /// </summary>
    std::vector<ChatStatusType> getStatuses() const;
    void setStatuses(std::vector<ChatStatusType> value);

protected:
    std::vector<int64_t> m_OrderIds;
    std::vector<ChatType> m_Types;
    std::vector<ChatStatusType> m_Statuses;
};

std::vector<GetChatsRequest> createGetChatsRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GetChatsRequest>(const GetChatsRequest& val) {
    return val.toPropertyTree();
}

template<>
inline GetChatsRequest fromPt<GetChatsRequest>(const boost::property_tree::ptree& pt) {
    GetChatsRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GetChatsRequest_H_ */
