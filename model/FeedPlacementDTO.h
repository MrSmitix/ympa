/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedPlacementDTO.h
 *
 * Информация о размещении предложений из прайс-листа на Маркете на момент выполнения запроса.
 */

#ifndef FeedPlacementDTO_H_
#define FeedPlacementDTO_H_



#include "FeedStatusType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о размещении предложений из прайс-листа на Маркете на момент выполнения запроса.
/// </summary>
class  FeedPlacementDTO 
{
public:
    FeedPlacementDTO() = default;
    explicit FeedPlacementDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedPlacementDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// FeedPlacementDTO members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedStatusType> getStatus() const;
    void setStatus(std::shared_ptr<FeedStatusType> value);

    /// <summary>
    /// Количество предложений из прайс-листа, которые размещаются на Яндекс Маркете в момент выполнения запроса.
    /// </summary>
    int32_t getTotalOffersCount() const;
    void setTotalOffersCount(int32_t value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::shared_ptr<FeedStatusType> m_Status = std::make_shared<FeedStatusType>();
    int32_t m_TotalOffersCount = 0;
};

std::vector<FeedPlacementDTO> createFeedPlacementDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* FeedPlacementDTO_H_ */
