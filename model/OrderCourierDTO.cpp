/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderCourierDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderCourierDTO::OrderCourierDTO()
{
    m_FullName = "";
    m_FullNameIsSet = false;
    m_Phone = "";
    m_PhoneIsSet = false;
    m_PhoneExtension = "";
    m_PhoneExtensionIsSet = false;
    m_VehicleNumber = "";
    m_VehicleNumberIsSet = false;
    m_VehicleDescription = "";
    m_VehicleDescriptionIsSet = false;
    
}

void OrderCourierDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderCourierDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderCourierDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderCourierDTO" : pathPrefix;

                        
    return success;
}

bool OrderCourierDTO::operator==(const OrderCourierDTO& rhs) const
{
    return
    
    
    
    ((!fullNameIsSet() && !rhs.fullNameIsSet()) || (fullNameIsSet() && rhs.fullNameIsSet() && getFullName() == rhs.getFullName())) &&
    
    
    ((!phoneIsSet() && !rhs.phoneIsSet()) || (phoneIsSet() && rhs.phoneIsSet() && getPhone() == rhs.getPhone())) &&
    
    
    ((!phoneExtensionIsSet() && !rhs.phoneExtensionIsSet()) || (phoneExtensionIsSet() && rhs.phoneExtensionIsSet() && getPhoneExtension() == rhs.getPhoneExtension())) &&
    
    
    ((!vehicleNumberIsSet() && !rhs.vehicleNumberIsSet()) || (vehicleNumberIsSet() && rhs.vehicleNumberIsSet() && getVehicleNumber() == rhs.getVehicleNumber())) &&
    
    
    ((!vehicleDescriptionIsSet() && !rhs.vehicleDescriptionIsSet()) || (vehicleDescriptionIsSet() && rhs.vehicleDescriptionIsSet() && getVehicleDescription() == rhs.getVehicleDescription()))
    
    ;
}

bool OrderCourierDTO::operator!=(const OrderCourierDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderCourierDTO& o)
{
    j = nlohmann::json::object();
    if(o.fullNameIsSet())
        j["fullName"] = o.m_FullName;
    if(o.phoneIsSet())
        j["phone"] = o.m_Phone;
    if(o.phoneExtensionIsSet())
        j["phoneExtension"] = o.m_PhoneExtension;
    if(o.vehicleNumberIsSet())
        j["vehicleNumber"] = o.m_VehicleNumber;
    if(o.vehicleDescriptionIsSet())
        j["vehicleDescription"] = o.m_VehicleDescription;
    
}

void from_json(const nlohmann::json& j, OrderCourierDTO& o)
{
    if(j.find("fullName") != j.end())
    {
        j.at("fullName").get_to(o.m_FullName);
        o.m_FullNameIsSet = true;
    } 
    if(j.find("phone") != j.end())
    {
        j.at("phone").get_to(o.m_Phone);
        o.m_PhoneIsSet = true;
    } 
    if(j.find("phoneExtension") != j.end())
    {
        j.at("phoneExtension").get_to(o.m_PhoneExtension);
        o.m_PhoneExtensionIsSet = true;
    } 
    if(j.find("vehicleNumber") != j.end())
    {
        j.at("vehicleNumber").get_to(o.m_VehicleNumber);
        o.m_VehicleNumberIsSet = true;
    } 
    if(j.find("vehicleDescription") != j.end())
    {
        j.at("vehicleDescription").get_to(o.m_VehicleDescription);
        o.m_VehicleDescriptionIsSet = true;
    } 
    
}

std::string OrderCourierDTO::getFullName() const
{
    return m_FullName;
}
void OrderCourierDTO::setFullName(std::string const& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool OrderCourierDTO::fullNameIsSet() const
{
    return m_FullNameIsSet;
}
void OrderCourierDTO::unsetFullName()
{
    m_FullNameIsSet = false;
}
std::string OrderCourierDTO::getPhone() const
{
    return m_Phone;
}
void OrderCourierDTO::setPhone(std::string const& value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}
bool OrderCourierDTO::phoneIsSet() const
{
    return m_PhoneIsSet;
}
void OrderCourierDTO::unsetPhone()
{
    m_PhoneIsSet = false;
}
std::string OrderCourierDTO::getPhoneExtension() const
{
    return m_PhoneExtension;
}
void OrderCourierDTO::setPhoneExtension(std::string const& value)
{
    m_PhoneExtension = value;
    m_PhoneExtensionIsSet = true;
}
bool OrderCourierDTO::phoneExtensionIsSet() const
{
    return m_PhoneExtensionIsSet;
}
void OrderCourierDTO::unsetPhoneExtension()
{
    m_PhoneExtensionIsSet = false;
}
std::string OrderCourierDTO::getVehicleNumber() const
{
    return m_VehicleNumber;
}
void OrderCourierDTO::setVehicleNumber(std::string const& value)
{
    m_VehicleNumber = value;
    m_VehicleNumberIsSet = true;
}
bool OrderCourierDTO::vehicleNumberIsSet() const
{
    return m_VehicleNumberIsSet;
}
void OrderCourierDTO::unsetVehicleNumber()
{
    m_VehicleNumberIsSet = false;
}
std::string OrderCourierDTO::getVehicleDescription() const
{
    return m_VehicleDescription;
}
void OrderCourierDTO::setVehicleDescription(std::string const& value)
{
    m_VehicleDescription = value;
    m_VehicleDescriptionIsSet = true;
}
bool OrderCourierDTO::vehicleDescriptionIsSet() const
{
    return m_VehicleDescriptionIsSet;
}
void OrderCourierDTO::unsetVehicleDescription()
{
    m_VehicleDescriptionIsSet = false;
}


} // namespace org::openapitools::server::model

