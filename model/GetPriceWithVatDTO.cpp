/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetPriceWithVatDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetPriceWithVatDTO::GetPriceWithVatDTO()
{
    m_Value = 0.0;
    m_ValueIsSet = false;
    m_DiscountBase = 0.0;
    m_DiscountBaseIsSet = false;
    m_CurrencyIdIsSet = false;
    m_Vat = 0;
    m_VatIsSet = false;
    m_UpdatedAt = "";
    
}

void GetPriceWithVatDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetPriceWithVatDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetPriceWithVatDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetPriceWithVatDTO" : pathPrefix;

                        
    return success;
}

bool GetPriceWithVatDTO::operator==(const GetPriceWithVatDTO& rhs) const
{
    return
    
    
    
    ((!valueIsSet() && !rhs.valueIsSet()) || (valueIsSet() && rhs.valueIsSet() && getValue() == rhs.getValue())) &&
    
    
    ((!discountBaseIsSet() && !rhs.discountBaseIsSet()) || (discountBaseIsSet() && rhs.discountBaseIsSet() && getDiscountBase() == rhs.getDiscountBase())) &&
    
    
    ((!currencyIdIsSet() && !rhs.currencyIdIsSet()) || (currencyIdIsSet() && rhs.currencyIdIsSet() && getCurrencyId() == rhs.getCurrencyId())) &&
    
    
    ((!vatIsSet() && !rhs.vatIsSet()) || (vatIsSet() && rhs.vatIsSet() && getVat() == rhs.getVat())) &&
    
    (getUpdatedAt() == rhs.getUpdatedAt())
    
    
    ;
}

bool GetPriceWithVatDTO::operator!=(const GetPriceWithVatDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetPriceWithVatDTO& o)
{
    j = nlohmann::json::object();
    if(o.valueIsSet())
        j["value"] = o.m_Value;
    if(o.discountBaseIsSet())
        j["discountBase"] = o.m_DiscountBase;
    if(o.currencyIdIsSet())
        j["currencyId"] = o.m_CurrencyId;
    if(o.vatIsSet())
        j["vat"] = o.m_Vat;
    j["updatedAt"] = o.m_UpdatedAt;
    
}

void from_json(const nlohmann::json& j, GetPriceWithVatDTO& o)
{
    if(j.find("value") != j.end())
    {
        j.at("value").get_to(o.m_Value);
        o.m_ValueIsSet = true;
    } 
    if(j.find("discountBase") != j.end())
    {
        j.at("discountBase").get_to(o.m_DiscountBase);
        o.m_DiscountBaseIsSet = true;
    } 
    if(j.find("currencyId") != j.end())
    {
        j.at("currencyId").get_to(o.m_CurrencyId);
        o.m_CurrencyIdIsSet = true;
    } 
    if(j.find("vat") != j.end())
    {
        j.at("vat").get_to(o.m_Vat);
        o.m_VatIsSet = true;
    } 
    j.at("updatedAt").get_to(o.m_UpdatedAt);
    
}

double GetPriceWithVatDTO::getValue() const
{
    return m_Value;
}
void GetPriceWithVatDTO::setValue(double const value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool GetPriceWithVatDTO::valueIsSet() const
{
    return m_ValueIsSet;
}
void GetPriceWithVatDTO::unsetValue()
{
    m_ValueIsSet = false;
}
double GetPriceWithVatDTO::getDiscountBase() const
{
    return m_DiscountBase;
}
void GetPriceWithVatDTO::setDiscountBase(double const value)
{
    m_DiscountBase = value;
    m_DiscountBaseIsSet = true;
}
bool GetPriceWithVatDTO::discountBaseIsSet() const
{
    return m_DiscountBaseIsSet;
}
void GetPriceWithVatDTO::unsetDiscountBase()
{
    m_DiscountBaseIsSet = false;
}
org::openapitools::server::model::CurrencyType GetPriceWithVatDTO::getCurrencyId() const
{
    return m_CurrencyId;
}
void GetPriceWithVatDTO::setCurrencyId(org::openapitools::server::model::CurrencyType const& value)
{
    m_CurrencyId = value;
    m_CurrencyIdIsSet = true;
}
bool GetPriceWithVatDTO::currencyIdIsSet() const
{
    return m_CurrencyIdIsSet;
}
void GetPriceWithVatDTO::unsetCurrencyId()
{
    m_CurrencyIdIsSet = false;
}
int32_t GetPriceWithVatDTO::getVat() const
{
    return m_Vat;
}
void GetPriceWithVatDTO::setVat(int32_t const value)
{
    m_Vat = value;
    m_VatIsSet = true;
}
bool GetPriceWithVatDTO::vatIsSet() const
{
    return m_VatIsSet;
}
void GetPriceWithVatDTO::unsetVat()
{
    m_VatIsSet = false;
}
std::string GetPriceWithVatDTO::getUpdatedAt() const
{
    return m_UpdatedAt;
}
void GetPriceWithVatDTO::setUpdatedAt(std::string const& value)
{
    m_UpdatedAt = value;
}


} // namespace org::openapitools::server::model

