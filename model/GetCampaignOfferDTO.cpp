/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GetCampaignOfferDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

GetCampaignOfferDTO::GetCampaignOfferDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string GetCampaignOfferDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void GetCampaignOfferDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree GetCampaignOfferDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("offerId", m_OfferId);
	pt.add_child("quantum", m_Quantum.toPropertyTree());
	pt.put("available", m_Available);
	pt.add_child("basicPrice", m_BasicPrice.toPropertyTree());
	pt.add_child("campaignPrice", m_CampaignPrice.toPropertyTree());
	// generate tree for Errors
    tmp_node.clear();
	if (!m_Errors.empty()) {
        tmp_node = toPt(m_Errors);
		pt.add_child("errors", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Warnings
    tmp_node.clear();
	if (!m_Warnings.empty()) {
        tmp_node = toPt(m_Warnings);
		pt.add_child("warnings", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void GetCampaignOfferDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_OfferId = pt.get("offerId", "");
	if (pt.get_child_optional("quantum")) {
        m_Quantum = fromPt<QuantumDTO>(pt.get_child("quantum"));
	}
	m_Available = pt.get("available", false);
	if (pt.get_child_optional("basicPrice")) {
        m_BasicPrice = fromPt<GetPriceWithDiscountDTO>(pt.get_child("basicPrice"));
	}
	if (pt.get_child_optional("campaignPrice")) {
        m_CampaignPrice = fromPt<GetPriceWithVatDTO>(pt.get_child("campaignPrice"));
	}
	// push all items of Errors into member
	if (pt.get_child_optional("errors")) {
        m_Errors = fromPt<std::vector<OfferErrorDTO>>(pt.get_child("errors"));
	}
	// push all items of Warnings into member
	if (pt.get_child_optional("warnings")) {
        m_Warnings = fromPt<std::vector<OfferErrorDTO>>(pt.get_child("warnings"));
	}
}

std::string GetCampaignOfferDTO::getOfferId() const
{
    return m_OfferId;
}

void GetCampaignOfferDTO::setOfferId(std::string value)
{
    m_OfferId = value;
}


QuantumDTO GetCampaignOfferDTO::getQuantum() const
{
    return m_Quantum;
}

void GetCampaignOfferDTO::setQuantum(QuantumDTO value)
{
    m_Quantum = value;
}


bool GetCampaignOfferDTO::isAvailable() const
{
    return m_Available;
}

void GetCampaignOfferDTO::setAvailable(bool value)
{
    m_Available = value;
}


GetPriceWithDiscountDTO GetCampaignOfferDTO::getBasicPrice() const
{
    return m_BasicPrice;
}

void GetCampaignOfferDTO::setBasicPrice(GetPriceWithDiscountDTO value)
{
    m_BasicPrice = value;
}


GetPriceWithVatDTO GetCampaignOfferDTO::getCampaignPrice() const
{
    return m_CampaignPrice;
}

void GetCampaignOfferDTO::setCampaignPrice(GetPriceWithVatDTO value)
{
    m_CampaignPrice = value;
}


OfferCampaignStatusType GetCampaignOfferDTO::getStatus() const
{
    return m_Status;
}

void GetCampaignOfferDTO::setStatus(OfferCampaignStatusType value)
{
    m_Status = value;
}


std::vector<OfferErrorDTO> GetCampaignOfferDTO::getErrors() const
{
    return m_Errors;
}

void GetCampaignOfferDTO::setErrors(std::vector<OfferErrorDTO> value)
{
    m_Errors = value;
}


std::vector<OfferErrorDTO> GetCampaignOfferDTO::getWarnings() const
{
    return m_Warnings;
}

void GetCampaignOfferDTO::setWarnings(std::vector<OfferErrorDTO> value)
{
    m_Warnings = value;
}



std::vector<GetCampaignOfferDTO> createGetCampaignOfferDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<GetCampaignOfferDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(GetCampaignOfferDTO(child.second));
    }

    return vec;
}

}
}
}
}

