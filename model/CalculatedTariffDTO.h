/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CalculatedTariffDTO.h
 *
 * Информация об услугах Маркета.
 */

#ifndef CalculatedTariffDTO_H_
#define CalculatedTariffDTO_H_



#include "TariffParameterDTO.h"
#include "CalculatedTariffType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация об услугах Маркета.
/// </summary>
class  CalculatedTariffDTO 
{
public:
    CalculatedTariffDTO() = default;
    explicit CalculatedTariffDTO(boost::property_tree::ptree const& pt);
    virtual ~CalculatedTariffDTO() = default;

    CalculatedTariffDTO(const CalculatedTariffDTO& other) = default; // copy constructor
    CalculatedTariffDTO(CalculatedTariffDTO&& other) noexcept = default; // move constructor

    CalculatedTariffDTO& operator=(const CalculatedTariffDTO& other) = default; // copy assignment
    CalculatedTariffDTO& operator=(CalculatedTariffDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CalculatedTariffDTO members

    /// <summary>
    /// 
    /// </summary>
    CalculatedTariffType getType() const;
    void setType(CalculatedTariffType value);

    /// <summary>
    /// Стоимость услуги в рублях.
    /// </summary>
    double getAmount() const;
    void setAmount(double value);

    /// <summary>
    /// Параметры расчета тарифа.
    /// </summary>
    std::vector<TariffParameterDTO> getParameters() const;
    void setParameters(std::vector<TariffParameterDTO> value);

protected:
    CalculatedTariffType m_Type = CalculatedTariffType{};
    double m_Amount = 0.0;
    std::vector<TariffParameterDTO> m_Parameters;
};

std::vector<CalculatedTariffDTO> createCalculatedTariffDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CalculatedTariffDTO>(const CalculatedTariffDTO& val) {
    return val.toPropertyTree();
}

template<>
inline CalculatedTariffDTO fromPt<CalculatedTariffDTO>(const boost::property_tree::ptree& pt) {
    CalculatedTariffDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CalculatedTariffDTO_H_ */
