/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ShipmentStatusType.h
 *
 * Статус отгрузки:  * &#x60;OUTBOUND_CREATED&#x60; — формируется. * &#x60;OUTBOUND_READY_FOR_CONFIRMATION&#x60; — можно обрабатывать. * &#x60;OUTBOUND_CONFIRMED&#x60; — подтверждена и готова к отправке. * &#x60;OUTBOUND_SIGNED&#x60; — по ней подписан электронный акт приема-передачи. * &#x60;ACCEPTED&#x60; — принята в сортировочном центре или пункте приема. * &#x60;ACCEPTED_WITH_DISCREPANCIES&#x60; — принята с расхождениями. * &#x60;FINISHED&#x60; — завершена. * &#x60;ERROR&#x60; — отменена из-за ошибки. 
 */

#ifndef ShipmentStatusType_H_
#define ShipmentStatusType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Статус отгрузки:  * &#x60;OUTBOUND_CREATED&#x60; — формируется. * &#x60;OUTBOUND_READY_FOR_CONFIRMATION&#x60; — можно обрабатывать. * &#x60;OUTBOUND_CONFIRMED&#x60; — подтверждена и готова к отправке. * &#x60;OUTBOUND_SIGNED&#x60; — по ней подписан электронный акт приема-передачи. * &#x60;ACCEPTED&#x60; — принята в сортировочном центре или пункте приема. * &#x60;ACCEPTED_WITH_DISCREPANCIES&#x60; — принята с расхождениями. * &#x60;FINISHED&#x60; — завершена. * &#x60;ERROR&#x60; — отменена из-за ошибки. 
/// </summary>
class  ShipmentStatusType 
{
public:
    ShipmentStatusType() = default;
    explicit ShipmentStatusType(boost::property_tree::ptree const& pt);
    virtual ~ShipmentStatusType() = default;

    ShipmentStatusType(const ShipmentStatusType& other) = default; // copy constructor
    ShipmentStatusType(ShipmentStatusType&& other) noexcept = default; // move constructor

    ShipmentStatusType& operator=(const ShipmentStatusType& other) = default; // copy assignment
    ShipmentStatusType& operator=(ShipmentStatusType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// ShipmentStatusType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_ShipmentStatusTypeEnumValue;
};

std::vector<ShipmentStatusType> createShipmentStatusTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ShipmentStatusType>(const ShipmentStatusType& val) {
    return val.toPropertyTree();
}

template<>
inline ShipmentStatusType fromPt<ShipmentStatusType>(const boost::property_tree::ptree& pt) {
    ShipmentStatusType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ShipmentStatusType_H_ */
