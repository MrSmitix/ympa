/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderItemPromoDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderItemPromoDTO::OrderItemPromoDTO()
{
    m_Discount = 0.0;
    m_DiscountIsSet = false;
    m_Subsidy = 0.0;
    m_SubsidyIsSet = false;
    m_ShopPromoId = "";
    m_ShopPromoIdIsSet = false;
    m_MarketPromoId = "";
    m_MarketPromoIdIsSet = false;
    
}

void OrderItemPromoDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderItemPromoDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderItemPromoDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderItemPromoDTO" : pathPrefix;

                        
    return success;
}

bool OrderItemPromoDTO::operator==(const OrderItemPromoDTO& rhs) const
{
    return
    
    
    (getType() == rhs.getType())
     &&
    
    
    ((!discountIsSet() && !rhs.discountIsSet()) || (discountIsSet() && rhs.discountIsSet() && getDiscount() == rhs.getDiscount())) &&
    
    
    ((!subsidyIsSet() && !rhs.subsidyIsSet()) || (subsidyIsSet() && rhs.subsidyIsSet() && getSubsidy() == rhs.getSubsidy())) &&
    
    
    ((!shopPromoIdIsSet() && !rhs.shopPromoIdIsSet()) || (shopPromoIdIsSet() && rhs.shopPromoIdIsSet() && getShopPromoId() == rhs.getShopPromoId())) &&
    
    
    ((!marketPromoIdIsSet() && !rhs.marketPromoIdIsSet()) || (marketPromoIdIsSet() && rhs.marketPromoIdIsSet() && getMarketPromoId() == rhs.getMarketPromoId()))
    
    ;
}

bool OrderItemPromoDTO::operator!=(const OrderItemPromoDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderItemPromoDTO& o)
{
    j = nlohmann::json::object();
    j["type"] = o.m_Type;
    if(o.discountIsSet())
        j["discount"] = o.m_Discount;
    if(o.subsidyIsSet())
        j["subsidy"] = o.m_Subsidy;
    if(o.shopPromoIdIsSet())
        j["shopPromoId"] = o.m_ShopPromoId;
    if(o.marketPromoIdIsSet())
        j["marketPromoId"] = o.m_MarketPromoId;
    
}

void from_json(const nlohmann::json& j, OrderItemPromoDTO& o)
{
    j.at("type").get_to(o.m_Type);
    if(j.find("discount") != j.end())
    {
        j.at("discount").get_to(o.m_Discount);
        o.m_DiscountIsSet = true;
    } 
    if(j.find("subsidy") != j.end())
    {
        j.at("subsidy").get_to(o.m_Subsidy);
        o.m_SubsidyIsSet = true;
    } 
    if(j.find("shopPromoId") != j.end())
    {
        j.at("shopPromoId").get_to(o.m_ShopPromoId);
        o.m_ShopPromoIdIsSet = true;
    } 
    if(j.find("marketPromoId") != j.end())
    {
        j.at("marketPromoId").get_to(o.m_MarketPromoId);
        o.m_MarketPromoIdIsSet = true;
    } 
    
}

org::openapitools::server::model::OrderPromoType OrderItemPromoDTO::getType() const
{
    return m_Type;
}
void OrderItemPromoDTO::setType(org::openapitools::server::model::OrderPromoType const& value)
{
    m_Type = value;
}
double OrderItemPromoDTO::getDiscount() const
{
    return m_Discount;
}
void OrderItemPromoDTO::setDiscount(double const value)
{
    m_Discount = value;
    m_DiscountIsSet = true;
}
bool OrderItemPromoDTO::discountIsSet() const
{
    return m_DiscountIsSet;
}
void OrderItemPromoDTO::unsetDiscount()
{
    m_DiscountIsSet = false;
}
double OrderItemPromoDTO::getSubsidy() const
{
    return m_Subsidy;
}
void OrderItemPromoDTO::setSubsidy(double const value)
{
    m_Subsidy = value;
    m_SubsidyIsSet = true;
}
bool OrderItemPromoDTO::subsidyIsSet() const
{
    return m_SubsidyIsSet;
}
void OrderItemPromoDTO::unsetSubsidy()
{
    m_SubsidyIsSet = false;
}
std::string OrderItemPromoDTO::getShopPromoId() const
{
    return m_ShopPromoId;
}
void OrderItemPromoDTO::setShopPromoId(std::string const& value)
{
    m_ShopPromoId = value;
    m_ShopPromoIdIsSet = true;
}
bool OrderItemPromoDTO::shopPromoIdIsSet() const
{
    return m_ShopPromoIdIsSet;
}
void OrderItemPromoDTO::unsetShopPromoId()
{
    m_ShopPromoIdIsSet = false;
}
std::string OrderItemPromoDTO::getMarketPromoId() const
{
    return m_MarketPromoId;
}
void OrderItemPromoDTO::setMarketPromoId(std::string const& value)
{
    m_MarketPromoId = value;
    m_MarketPromoIdIsSet = true;
}
bool OrderItemPromoDTO::marketPromoIdIsSet() const
{
    return m_MarketPromoIdIsSet;
}
void OrderItemPromoDTO::unsetMarketPromoId()
{
    m_MarketPromoIdIsSet = false;
}


} // namespace org::openapitools::server::model

