/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ModelOfferDTO.h
 *
 * Информация о предложении.
 */

#ifndef ModelOfferDTO_H_
#define ModelOfferDTO_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о предложении.
/// </summary>
class  ModelOfferDTO
{
public:
    ModelOfferDTO();
    virtual ~ModelOfferDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ModelOfferDTO& rhs) const;
    bool operator!=(const ModelOfferDTO& rhs) const;

    /////////////////////////////////////////////
    /// ModelOfferDTO members

    /// <summary>
    /// Скидка на предложение в процентах.
    /// </summary>
    int32_t getDiscount() const;
    void setDiscount(int32_t const value);
    bool discountIsSet() const;
    void unsetDiscount();
    /// <summary>
    /// Наименование предложения.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// Позиция предложения в выдаче Маркета на карточке модели.
    /// </summary>
    int32_t getPos() const;
    void setPos(int32_t const value);
    bool posIsSet() const;
    void unsetPos();
    /// <summary>
    /// Цена предложения без скидки магазина.
    /// </summary>
    double getPreDiscountPrice() const;
    void setPreDiscountPrice(double const value);
    bool preDiscountPriceIsSet() const;
    void unsetPreDiscountPrice();
    /// <summary>
    /// Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.
    /// </summary>
    double getPrice() const;
    void setPrice(double const value);
    bool priceIsSet() const;
    void unsetPrice();
    /// <summary>
    /// Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре &#x60;regionId&#x60;. Предложения, доставляемые из других регионов, показываются после них. 
    /// </summary>
    int64_t getRegionId() const;
    void setRegionId(int64_t const value);
    bool regionIdIsSet() const;
    void unsetRegionId();
    /// <summary>
    /// Стоимость доставки товара в регион:  * &#x60;0&#x60; — доставка осуществляется бесплатно. * &#x60;-1&#x60; — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. 
    /// </summary>
    double getShippingCost() const;
    void setShippingCost(double const value);
    bool shippingCostIsSet() const;
    void unsetShippingCost();
    /// <summary>
    /// Название магазина (в том виде, в котором отображается на Маркете).
    /// </summary>
    std::string getShopName() const;
    void setShopName(std::string const& value);
    bool shopNameIsSet() const;
    void unsetShopName();
    /// <summary>
    /// Рейтинг магазина.  Возможные значения: * &#x60;-1&#x60; — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение &#x60;-1&#x60;. * &#x60;1&#x60;. * &#x60;2&#x60;. * &#x60;3&#x60;. * &#x60;4&#x60;. * &#x60;5&#x60;. 
    /// </summary>
    int32_t getShopRating() const;
    void setShopRating(int32_t const value);
    bool shopRatingIsSet() const;
    void unsetShopRating();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
    /// </summary>
    int32_t getInStock() const;
    void setInStock(int32_t const value);
    bool inStockIsSet() const;
    void unsetInStock();

    friend  void to_json(nlohmann::json& j, const ModelOfferDTO& o);
    friend  void from_json(const nlohmann::json& j, ModelOfferDTO& o);
protected:
    int32_t m_Discount;
    bool m_DiscountIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    int32_t m_Pos;
    bool m_PosIsSet;
    double m_PreDiscountPrice;
    bool m_PreDiscountPriceIsSet;
    double m_Price;
    bool m_PriceIsSet;
    int64_t m_RegionId;
    bool m_RegionIdIsSet;
    double m_ShippingCost;
    bool m_ShippingCostIsSet;
    std::string m_ShopName;
    bool m_ShopNameIsSet;
    int32_t m_ShopRating;
    bool m_ShopRatingIsSet;
    int32_t m_InStock;
    bool m_InStockIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ModelOfferDTO_H_ */
