/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ModelOfferDTO.h
 *
 * Информация о предложении.
 */

#ifndef ModelOfferDTO_H_
#define ModelOfferDTO_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о предложении.
/// </summary>
class  ModelOfferDTO 
{
public:
    ModelOfferDTO() = default;
    explicit ModelOfferDTO(boost::property_tree::ptree const& pt);
    virtual ~ModelOfferDTO() = default;

    ModelOfferDTO(const ModelOfferDTO& other) = default; // copy constructor
    ModelOfferDTO(ModelOfferDTO&& other) noexcept = default; // move constructor

    ModelOfferDTO& operator=(const ModelOfferDTO& other) = default; // copy assignment
    ModelOfferDTO& operator=(ModelOfferDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ModelOfferDTO members

    /// <summary>
    /// Скидка на предложение в процентах.
    /// </summary>
    int32_t getDiscount() const;
    void setDiscount(int32_t value);

    /// <summary>
    /// Наименование предложения.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Позиция предложения в выдаче Маркета на карточке модели.
    /// </summary>
    int32_t getPos() const;
    void setPos(int32_t value);

    /// <summary>
    /// Цена предложения без скидки магазина.
    /// </summary>
    double getPreDiscountPrice() const;
    void setPreDiscountPrice(double value);

    /// <summary>
    /// Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.
    /// </summary>
    double getPrice() const;
    void setPrice(double value);

    /// <summary>
    /// Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре &#x60;regionId&#x60;. Предложения, доставляемые из других регионов, показываются после них. 
    /// </summary>
    int64_t getRegionId() const;
    void setRegionId(int64_t value);

    /// <summary>
    /// Стоимость доставки товара в регион:  * &#x60;0&#x60; — доставка осуществляется бесплатно. * &#x60;-1&#x60; — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. 
    /// </summary>
    double getShippingCost() const;
    void setShippingCost(double value);

    /// <summary>
    /// Название магазина (в том виде, в котором отображается на Маркете).
    /// </summary>
    std::string getShopName() const;
    void setShopName(std::string value);

    /// <summary>
    /// Рейтинг магазина.  Возможные значения: * &#x60;-1&#x60; — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение &#x60;-1&#x60;. * &#x60;1&#x60;. * &#x60;2&#x60;. * &#x60;3&#x60;. * &#x60;4&#x60;. * &#x60;5&#x60;. 
    /// </summary>
    int32_t getShopRating() const;
    void setShopRating(int32_t value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
    /// </summary>
    int32_t getInStock() const;
    void setInStock(int32_t value);

protected:
    int32_t m_Discount = 0;
    std::string m_Name = "";
    int32_t m_Pos = 0;
    double m_PreDiscountPrice = 0.0;
    double m_Price = 0.0;
    int64_t m_RegionId = 0L;
    double m_ShippingCost = 0.0;
    std::string m_ShopName = "";
    int32_t m_ShopRating = 0;
    int32_t m_InStock = 0;
};

std::vector<ModelOfferDTO> createModelOfferDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ModelOfferDTO>(const ModelOfferDTO& val) {
    return val.toPropertyTree();
}

template<>
inline ModelOfferDTO fromPt<ModelOfferDTO>(const boost::property_tree::ptree& pt) {
    ModelOfferDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ModelOfferDTO_H_ */
