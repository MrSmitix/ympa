/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SendMessageToChatRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SendMessageToChatRequest::SendMessageToChatRequest()
{
    m_Message = "";
    
}

void SendMessageToChatRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SendMessageToChatRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SendMessageToChatRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SendMessageToChatRequest" : pathPrefix;

         
    
    /* Message */ {
        const std::string& value = m_Message;
        const std::string currentValuePath = _pathPrefix + ".message";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 4096)
        {
            success = false;
            msg << currentValuePath << ": must be at most 4096 characters long;";
        }

    }
    
    return success;
}

bool SendMessageToChatRequest::operator==(const SendMessageToChatRequest& rhs) const
{
    return
    
    
    (getMessage() == rhs.getMessage())
    
    
    ;
}

bool SendMessageToChatRequest::operator!=(const SendMessageToChatRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SendMessageToChatRequest& o)
{
    j = nlohmann::json::object();
    j["message"] = o.m_Message;
    
}

void from_json(const nlohmann::json& j, SendMessageToChatRequest& o)
{
    j.at("message").get_to(o.m_Message);
    
}

std::string SendMessageToChatRequest::getMessage() const
{
    return m_Message;
}
void SendMessageToChatRequest::setMessage(std::string const& value)
{
    m_Message = value;
}


} // namespace org::openapitools::server::model

