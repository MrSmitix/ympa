/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetChatsRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetChatsRequest::GetChatsRequest()
{
    m_OrderIdsIsSet = false;
    m_TypesIsSet = false;
    m_StatusesIsSet = false;
    
}

void GetChatsRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetChatsRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetChatsRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetChatsRequest" : pathPrefix;

         
    if (orderIdsIsSet())
    {
        const std::vector<int64_t>& value = m_OrderIds;
        const std::string currentValuePath = _pathPrefix + ".orderIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (typesIsSet())
    {
        const std::vector<org::openapitools::server::model::ChatType>& value = m_Types;
        const std::string currentValuePath = _pathPrefix + ".types";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ChatType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
         
    if (statusesIsSet())
    {
        const std::vector<org::openapitools::server::model::ChatStatusType>& value = m_Statuses;
        const std::string currentValuePath = _pathPrefix + ".statuses";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ChatStatusType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool GetChatsRequest::operator==(const GetChatsRequest& rhs) const
{
    return
    
    
    
    ((!orderIdsIsSet() && !rhs.orderIdsIsSet()) || (orderIdsIsSet() && rhs.orderIdsIsSet() && getOrderIds() == rhs.getOrderIds())) &&
    
    
    ((!typesIsSet() && !rhs.typesIsSet()) || (typesIsSet() && rhs.typesIsSet() && getTypes() == rhs.getTypes())) &&
    
    
    ((!statusesIsSet() && !rhs.statusesIsSet()) || (statusesIsSet() && rhs.statusesIsSet() && getStatuses() == rhs.getStatuses()))
    
    ;
}

bool GetChatsRequest::operator!=(const GetChatsRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetChatsRequest& o)
{
    j = nlohmann::json::object();
    if(o.orderIdsIsSet() || !o.m_OrderIds.empty())
        j["orderIds"] = o.m_OrderIds;
    if(o.typesIsSet() || !o.m_Types.empty())
        j["types"] = o.m_Types;
    if(o.statusesIsSet() || !o.m_Statuses.empty())
        j["statuses"] = o.m_Statuses;
    
}

void from_json(const nlohmann::json& j, GetChatsRequest& o)
{
    if(j.find("orderIds") != j.end())
    {
        j.at("orderIds").get_to(o.m_OrderIds);
        o.m_OrderIdsIsSet = true;
    } 
    if(j.find("types") != j.end())
    {
        j.at("types").get_to(o.m_Types);
        o.m_TypesIsSet = true;
    } 
    if(j.find("statuses") != j.end())
    {
        j.at("statuses").get_to(o.m_Statuses);
        o.m_StatusesIsSet = true;
    } 
    
}

std::vector<int64_t> GetChatsRequest::getOrderIds() const
{
    return m_OrderIds;
}
void GetChatsRequest::setOrderIds(std::vector<int64_t> const value)
{
    m_OrderIds = value;
    m_OrderIdsIsSet = true;
}
bool GetChatsRequest::orderIdsIsSet() const
{
    return m_OrderIdsIsSet;
}
void GetChatsRequest::unsetOrderIds()
{
    m_OrderIdsIsSet = false;
}
std::vector<org::openapitools::server::model::ChatType> GetChatsRequest::getTypes() const
{
    return m_Types;
}
void GetChatsRequest::setTypes(std::vector<org::openapitools::server::model::ChatType> const& value)
{
    m_Types = value;
    m_TypesIsSet = true;
}
bool GetChatsRequest::typesIsSet() const
{
    return m_TypesIsSet;
}
void GetChatsRequest::unsetTypes()
{
    m_TypesIsSet = false;
}
std::vector<org::openapitools::server::model::ChatStatusType> GetChatsRequest::getStatuses() const
{
    return m_Statuses;
}
void GetChatsRequest::setStatuses(std::vector<org::openapitools::server::model::ChatStatusType> const& value)
{
    m_Statuses = value;
    m_StatusesIsSet = true;
}
bool GetChatsRequest::statusesIsSet() const
{
    return m_StatusesIsSet;
}
void GetChatsRequest::unsetStatuses()
{
    m_StatusesIsSet = false;
}


} // namespace org::openapitools::server::model

