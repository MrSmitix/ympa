/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetOutletResponse.h
 *
 * Ответ на запрос информации о точке продаж.
 */

#ifndef GetOutletResponse_H_
#define GetOutletResponse_H_



#include "FullOutletDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Ответ на запрос информации о точке продаж.
/// </summary>
class  GetOutletResponse 
{
public:
    GetOutletResponse() = default;
    explicit GetOutletResponse(boost::property_tree::ptree const& pt);
    virtual ~GetOutletResponse() = default;

    GetOutletResponse(const GetOutletResponse& other) = default; // copy constructor
    GetOutletResponse(GetOutletResponse&& other) noexcept = default; // move constructor

    GetOutletResponse& operator=(const GetOutletResponse& other) = default; // copy assignment
    GetOutletResponse& operator=(GetOutletResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GetOutletResponse members

    /// <summary>
    /// 
    /// </summary>
    FullOutletDTO getOutlet() const;
    void setOutlet(FullOutletDTO value);

protected:
    FullOutletDTO m_Outlet;
};

std::vector<GetOutletResponse> createGetOutletResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GetOutletResponse>(const GetOutletResponse& val) {
    return val.toPropertyTree();
}

template<>
inline GetOutletResponse fromPt<GetOutletResponse>(const boost::property_tree::ptree& pt) {
    GetOutletResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GetOutletResponse_H_ */
