/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UpdateGoodsFeedbackCommentDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UpdateGoodsFeedbackCommentDTO::UpdateGoodsFeedbackCommentDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_ParentId = 0L;
    m_ParentIdIsSet = false;
    m_Text = "";
    
}

void UpdateGoodsFeedbackCommentDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UpdateGoodsFeedbackCommentDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UpdateGoodsFeedbackCommentDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UpdateGoodsFeedbackCommentDTO" : pathPrefix;

                 
    
    /* Text */ {
        const std::string& value = m_Text;
        const std::string currentValuePath = _pathPrefix + ".text";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 4096)
        {
            success = false;
            msg << currentValuePath << ": must be at most 4096 characters long;";
        }

    }
    
    return success;
}

bool UpdateGoodsFeedbackCommentDTO::operator==(const UpdateGoodsFeedbackCommentDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!parentIdIsSet() && !rhs.parentIdIsSet()) || (parentIdIsSet() && rhs.parentIdIsSet() && getParentId() == rhs.getParentId())) &&
    
    (getText() == rhs.getText())
    
    
    ;
}

bool UpdateGoodsFeedbackCommentDTO::operator!=(const UpdateGoodsFeedbackCommentDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UpdateGoodsFeedbackCommentDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.parentIdIsSet())
        j["parentId"] = o.m_ParentId;
    j["text"] = o.m_Text;
    
}

void from_json(const nlohmann::json& j, UpdateGoodsFeedbackCommentDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("parentId") != j.end())
    {
        j.at("parentId").get_to(o.m_ParentId);
        o.m_ParentIdIsSet = true;
    } 
    j.at("text").get_to(o.m_Text);
    
}

int64_t UpdateGoodsFeedbackCommentDTO::getId() const
{
    return m_Id;
}
void UpdateGoodsFeedbackCommentDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool UpdateGoodsFeedbackCommentDTO::idIsSet() const
{
    return m_IdIsSet;
}
void UpdateGoodsFeedbackCommentDTO::unsetId()
{
    m_IdIsSet = false;
}
int64_t UpdateGoodsFeedbackCommentDTO::getParentId() const
{
    return m_ParentId;
}
void UpdateGoodsFeedbackCommentDTO::setParentId(int64_t const value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}
bool UpdateGoodsFeedbackCommentDTO::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}
void UpdateGoodsFeedbackCommentDTO::unsetParentId()
{
    m_ParentIdIsSet = false;
}
std::string UpdateGoodsFeedbackCommentDTO::getText() const
{
    return m_Text;
}
void UpdateGoodsFeedbackCommentDTO::setText(std::string const& value)
{
    m_Text = value;
}


} // namespace org::openapitools::server::model

