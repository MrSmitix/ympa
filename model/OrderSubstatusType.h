/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrderSubstatusType.h
 *
 * Этап обработки заказа (если он имеет статус &#x60;PROCESSING&#x60;) или причина отмены заказа (если он имеет статус &#x60;CANCELLED&#x60;).  * Значения для заказа в статусе &#x60;PROCESSING&#x60;:      * &#x60;STARTED&#x60; — заказ подтвержден, его можно начать обрабатывать.      * &#x60;READY_TO_SHIP&#x60; — заказ собран и готов к отправке.  * Значения для заказа в статусе &#x60;CANCELLED&#x60;:      * &#x60;PROCESSING_EXPIRED&#x60; — значение более не используется.      * &#x60;REPLACING_ORDER&#x60; — покупатель решил заменить товар другим по собственной инициативе.      * &#x60;RESERVATION_EXPIRED&#x60; — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.      * &#x60;SHOP_FAILED&#x60; — магазин не может выполнить заказ.      * &#x60;USER_CHANGED_MIND&#x60; — покупатель отменил заказ по личным причинам.      * &#x60;USER_NOT_PAID&#x60; — покупатель не оплатил заказ (для типа оплаты &#x60;PREPAID&#x60;) в течение 30 минут.      * &#x60;USER_REFUSED_DELIVERY&#x60; — покупателя не устроили условия доставки.      * &#x60;USER_REFUSED_PRODUCT&#x60; — покупателю не подошел товар.      * &#x60;USER_REFUSED_QUALITY&#x60; — покупателя не устроило качество товара.      * &#x60;USER_UNREACHABLE&#x60; — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:        * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;       * перерыв между первым и третьим звонком не менее 90 минут;       * соединение не короче 5 секунд.        Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400.  * &#x60;TECHNICAL_ERROR&#x60; — техническая ошибка на стороне Маркета. Обратитесь в поддержку.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
 */

#ifndef OrderSubstatusType_H_
#define OrderSubstatusType_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Этап обработки заказа (если он имеет статус &#x60;PROCESSING&#x60;) или причина отмены заказа (если он имеет статус &#x60;CANCELLED&#x60;).  * Значения для заказа в статусе &#x60;PROCESSING&#x60;:      * &#x60;STARTED&#x60; — заказ подтвержден, его можно начать обрабатывать.      * &#x60;READY_TO_SHIP&#x60; — заказ собран и готов к отправке.  * Значения для заказа в статусе &#x60;CANCELLED&#x60;:      * &#x60;PROCESSING_EXPIRED&#x60; — значение более не используется.      * &#x60;REPLACING_ORDER&#x60; — покупатель решил заменить товар другим по собственной инициативе.      * &#x60;RESERVATION_EXPIRED&#x60; — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.      * &#x60;SHOP_FAILED&#x60; — магазин не может выполнить заказ.      * &#x60;USER_CHANGED_MIND&#x60; — покупатель отменил заказ по личным причинам.      * &#x60;USER_NOT_PAID&#x60; — покупатель не оплатил заказ (для типа оплаты &#x60;PREPAID&#x60;) в течение 30 минут.      * &#x60;USER_REFUSED_DELIVERY&#x60; — покупателя не устроили условия доставки.      * &#x60;USER_REFUSED_PRODUCT&#x60; — покупателю не подошел товар.      * &#x60;USER_REFUSED_QUALITY&#x60; — покупателя не устроило качество товара.      * &#x60;USER_UNREACHABLE&#x60; — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:        * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;       * перерыв между первым и третьим звонком не менее 90 минут;       * соединение не короче 5 секунд.        Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400.  * &#x60;TECHNICAL_ERROR&#x60; — техническая ошибка на стороне Маркета. Обратитесь в поддержку.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
/// </summary>
class  OrderSubstatusType
{
public:
    OrderSubstatusType();
    virtual ~OrderSubstatusType() = default;

    enum class eOrderSubstatusType {
    // To have a valid default value.
    // Avoiding name clashes with user defined
    // enum values
    INVALID_VALUE_OPENAPI_GENERATED = 0,
    RESERVATION_EXPIRED, 
    USER_NOT_PAID, 
    USER_UNREACHABLE, 
    USER_CHANGED_MIND, 
    USER_REFUSED_DELIVERY, 
    USER_REFUSED_PRODUCT, 
    SHOP_FAILED, 
    USER_REFUSED_QUALITY, 
    REPLACING_ORDER, 
    PROCESSING_EXPIRED, 
    PENDING_EXPIRED, 
    SHOP_PENDING_CANCELLED, 
    PENDING_CANCELLED, 
    USER_FRAUD, 
    RESERVATION_FAILED, 
    USER_PLACED_OTHER_ORDER, 
    USER_BOUGHT_CHEAPER, 
    MISSING_ITEM, 
    BROKEN_ITEM, 
    WRONG_ITEM, 
    PICKUP_EXPIRED, 
    DELIVERY_PROBLEMS, 
    LATE_CONTACT, 
    CUSTOM, 
    DELIVERY_SERVICE_FAILED, 
    WAREHOUSE_FAILED_TO_SHIP, 
    DELIVERY_SERIVCE_UNDELIVERED, 
    DELIVERY_SERVICE_UNDELIVERED, 
    PREORDER, 
    AWAIT_CONFIRMATION, 
    STARTED, 
    PACKAGING, 
    READY_TO_SHIP, 
    SHIPPED, 
    ASYNC_PROCESSING, 
    USER_REFUSED_TO_PROVIDE_PERSONAL_DATA, 
    WAITING_USER_INPUT, 
    WAITING_BANK_DECISION, 
    BANK_REJECT_CREDIT_OFFER, 
    CUSTOMER_REJECT_CREDIT_OFFER, 
    CREDIT_OFFER_FAILED, 
    AWAIT_DELIVERY_DATES_CONFIRMATION, 
    SERVICE_FAULT, 
    DELIVERY_SERVICE_RECEIVED, 
    USER_RECEIVED, 
    WAITING_FOR_STOCKS, 
    AS_PART_OF_MULTI_ORDER, 
    READY_FOR_LAST_MILE, 
    LAST_MILE_STARTED, 
    ANTIFRAUD, 
    DELIVERY_USER_NOT_RECEIVED, 
    DELIVERY_SERVICE_DELIVERED, 
    DELIVERED_USER_NOT_RECEIVED, 
    USER_WANTED_ANOTHER_PAYMENT_METHOD, 
    USER_RECEIVED_TECHNICAL_ERROR, 
    USER_FORGOT_TO_USE_BONUS, 
    RECEIVED_ON_DISTRIBUTION_CENTER, 
    DELIVERY_SERVICE_NOT_RECEIVED, 
    DELIVERY_SERVICE_LOST, 
    SHIPPED_TO_WRONG_DELIVERY_SERVICE, 
    DELIVERED_USER_RECEIVED, 
    WAITING_TINKOFF_DECISION, 
    COURIER_SEARCH, 
    COURIER_FOUND, 
    COURIER_IN_TRANSIT_TO_SENDER, 
    COURIER_ARRIVED_TO_SENDER, 
    COURIER_RECEIVED, 
    COURIER_NOT_FOUND, 
    COURIER_NOT_DELIVER_ORDER, 
    COURIER_RETURNS_ORDER, 
    COURIER_RETURNED_ORDER, 
    WAITING_USER_DELIVERY_INPUT, 
    PICKUP_SERVICE_RECEIVED, 
    PICKUP_USER_RECEIVED, 
    CANCELLED_COURIER_NOT_FOUND, 
    COURIER_NOT_COME_FOR_ORDER, 
    DELIVERY_NOT_MANAGED_REGION, 
    INCOMPLETE_CONTACT_INFORMATION, 
    INCOMPLETE_MULTI_ORDER, 
    INAPPROPRIATE_WEIGHT_SIZE, 
    TECHNICAL_ERROR, 
    SORTING_CENTER_LOST, 
    COURIER_SEARCH_NOT_STARTED, 
    LOST, 
    AWAIT_PAYMENT, 
    AWAIT_LAVKA_RESERVATION, 
    USER_WANTS_TO_CHANGE_ADDRESS, 
    FULL_NOT_RANSOM, 
    PRESCRIPTION_MISMATCH, 
    DROPOFF_LOST, 
    DROPOFF_CLOSED, 
    DELIVERY_TO_STORE_STARTED, 
    USER_WANTS_TO_CHANGE_DELIVERY_DATE, 
    WRONG_ITEM_DELIVERED, 
    DAMAGED_BOX, 
    AWAIT_DELIVERY_DATES, 
    LAST_MILE_COURIER_SEARCH, 
    PICKUP_POINT_CLOSED, 
    LEGAL_INFO_CHANGED, 
    USER_HAS_NO_TIME_TO_PICKUP_ORDER, 
    DELIVERY_CUSTOMS_ARRIVED, 
    DELIVERY_CUSTOMS_CLEARED, 
    FIRST_MILE_DELIVERY_SERVICE_RECEIVED, 
    AWAIT_AUTO_DELIVERY_DATES, 
    AWAIT_USER_PERSONAL_DATA, 
    NO_PERSONAL_DATA_EXPIRED, 
    CUSTOMS_PROBLEMS, 
    AWAIT_CASHIER, 
    WAITING_POSTPAID_BUDGET_RESERVATION, 
    AWAIT_SERVICEABLE_CONFIRMATION, 
    POSTPAID_BUDGET_RESERVATION_FAILED, 
    AWAIT_CUSTOM_PRICE_CONFIRMATION, 
    READY_FOR_PICKUP, 
    UNKNOWN
    };

    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OrderSubstatusType& rhs) const;
    bool operator!=(const OrderSubstatusType& rhs) const;

    /////////////////////////////////////////////
    /// OrderSubstatusType members

    OrderSubstatusType::eOrderSubstatusType getValue() const;
    void setValue(OrderSubstatusType::eOrderSubstatusType value);
    
    friend  void to_json(nlohmann::json& j, const OrderSubstatusType& o);
    friend  void from_json(const nlohmann::json& j, OrderSubstatusType& o);
protected:
    OrderSubstatusType::eOrderSubstatusType m_value = OrderSubstatusType::eOrderSubstatusType::INVALID_VALUE_OPENAPI_GENERATED;
};

} // namespace org::openapitools::server::model

#endif /* OrderSubstatusType_H_ */
