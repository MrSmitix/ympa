/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FeedDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

FeedDTO::FeedDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string FeedDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void FeedDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree FeedDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("login", m_Login);
	pt.put("name", m_Name);
	pt.put("password", m_Password);
	pt.put("uploadDate", m_UploadDate);
	pt.put("url", m_Url);
	pt.add_child("content", m_Content.toPropertyTree());
	pt.add_child("download", m_Download.toPropertyTree());
	pt.add_child("placement", m_Placement.toPropertyTree());
	pt.add_child("publication", m_Publication.toPropertyTree());
	return pt;
}

void FeedDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", 0L);
	m_Login = pt.get("login", "");
	m_Name = pt.get("name", "");
	m_Password = pt.get("password", "");
	m_UploadDate = pt.get("uploadDate", "");
	m_Url = pt.get("url", "");
	if (pt.get_child_optional("content")) {
        m_Content = fromPt<FeedContentDTO>(pt.get_child("content"));
	}
	if (pt.get_child_optional("download")) {
        m_Download = fromPt<FeedDownloadDTO>(pt.get_child("download"));
	}
	if (pt.get_child_optional("placement")) {
        m_Placement = fromPt<FeedPlacementDTO>(pt.get_child("placement"));
	}
	if (pt.get_child_optional("publication")) {
        m_Publication = fromPt<FeedPublicationDTO>(pt.get_child("publication"));
	}
}

int64_t FeedDTO::getId() const
{
    return m_Id;
}

void FeedDTO::setId(int64_t value)
{
    m_Id = value;
}


std::string FeedDTO::getLogin() const
{
    return m_Login;
}

void FeedDTO::setLogin(std::string value)
{
    m_Login = value;
}


std::string FeedDTO::getName() const
{
    return m_Name;
}

void FeedDTO::setName(std::string value)
{
    m_Name = value;
}


std::string FeedDTO::getPassword() const
{
    return m_Password;
}

void FeedDTO::setPassword(std::string value)
{
    m_Password = value;
}


std::string FeedDTO::getUploadDate() const
{
    return m_UploadDate;
}

void FeedDTO::setUploadDate(std::string value)
{
    m_UploadDate = value;
}


std::string FeedDTO::getUrl() const
{
    return m_Url;
}

void FeedDTO::setUrl(std::string value)
{
    m_Url = value;
}


FeedContentDTO FeedDTO::getContent() const
{
    return m_Content;
}

void FeedDTO::setContent(FeedContentDTO value)
{
    m_Content = value;
}


FeedDownloadDTO FeedDTO::getDownload() const
{
    return m_Download;
}

void FeedDTO::setDownload(FeedDownloadDTO value)
{
    m_Download = value;
}


FeedPlacementDTO FeedDTO::getPlacement() const
{
    return m_Placement;
}

void FeedDTO::setPlacement(FeedPlacementDTO value)
{
    m_Placement = value;
}


FeedPublicationDTO FeedDTO::getPublication() const
{
    return m_Publication;
}

void FeedDTO::setPublication(FeedPublicationDTO value)
{
    m_Publication = value;
}



std::vector<FeedDTO> createFeedDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<FeedDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(FeedDTO(child.second));
    }

    return vec;
}

}
}
}
}

