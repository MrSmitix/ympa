/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FeedDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FeedDTO::FeedDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Login = "";
    m_LoginIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Password = "";
    m_PasswordIsSet = false;
    m_UploadDate = "";
    m_UploadDateIsSet = false;
    m_Url = "";
    m_UrlIsSet = false;
    m_ContentIsSet = false;
    m_DownloadIsSet = false;
    m_PlacementIsSet = false;
    m_PublicationIsSet = false;
    
}

void FeedDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FeedDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FeedDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FeedDTO" : pathPrefix;

                                            
    return success;
}

bool FeedDTO::operator==(const FeedDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!loginIsSet() && !rhs.loginIsSet()) || (loginIsSet() && rhs.loginIsSet() && getLogin() == rhs.getLogin())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!passwordIsSet() && !rhs.passwordIsSet()) || (passwordIsSet() && rhs.passwordIsSet() && getPassword() == rhs.getPassword())) &&
    
    
    ((!uploadDateIsSet() && !rhs.uploadDateIsSet()) || (uploadDateIsSet() && rhs.uploadDateIsSet() && getUploadDate() == rhs.getUploadDate())) &&
    
    
    ((!urlIsSet() && !rhs.urlIsSet()) || (urlIsSet() && rhs.urlIsSet() && getUrl() == rhs.getUrl())) &&
    
    
    ((!contentIsSet() && !rhs.contentIsSet()) || (contentIsSet() && rhs.contentIsSet() && getContent() == rhs.getContent())) &&
    
    
    ((!downloadIsSet() && !rhs.downloadIsSet()) || (downloadIsSet() && rhs.downloadIsSet() && getDownload() == rhs.getDownload())) &&
    
    
    ((!placementIsSet() && !rhs.placementIsSet()) || (placementIsSet() && rhs.placementIsSet() && getPlacement() == rhs.getPlacement())) &&
    
    
    ((!publicationIsSet() && !rhs.publicationIsSet()) || (publicationIsSet() && rhs.publicationIsSet() && getPublication() == rhs.getPublication()))
    
    ;
}

bool FeedDTO::operator!=(const FeedDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FeedDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.loginIsSet())
        j["login"] = o.m_Login;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.passwordIsSet())
        j["password"] = o.m_Password;
    if(o.uploadDateIsSet())
        j["uploadDate"] = o.m_UploadDate;
    if(o.urlIsSet())
        j["url"] = o.m_Url;
    if(o.contentIsSet())
        j["content"] = o.m_Content;
    if(o.downloadIsSet())
        j["download"] = o.m_Download;
    if(o.placementIsSet())
        j["placement"] = o.m_Placement;
    if(o.publicationIsSet())
        j["publication"] = o.m_Publication;
    
}

void from_json(const nlohmann::json& j, FeedDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("login") != j.end())
    {
        j.at("login").get_to(o.m_Login);
        o.m_LoginIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("password") != j.end())
    {
        j.at("password").get_to(o.m_Password);
        o.m_PasswordIsSet = true;
    } 
    if(j.find("uploadDate") != j.end())
    {
        j.at("uploadDate").get_to(o.m_UploadDate);
        o.m_UploadDateIsSet = true;
    } 
    if(j.find("url") != j.end())
    {
        j.at("url").get_to(o.m_Url);
        o.m_UrlIsSet = true;
    } 
    if(j.find("content") != j.end())
    {
        j.at("content").get_to(o.m_Content);
        o.m_ContentIsSet = true;
    } 
    if(j.find("download") != j.end())
    {
        j.at("download").get_to(o.m_Download);
        o.m_DownloadIsSet = true;
    } 
    if(j.find("placement") != j.end())
    {
        j.at("placement").get_to(o.m_Placement);
        o.m_PlacementIsSet = true;
    } 
    if(j.find("publication") != j.end())
    {
        j.at("publication").get_to(o.m_Publication);
        o.m_PublicationIsSet = true;
    } 
    
}

int64_t FeedDTO::getId() const
{
    return m_Id;
}
void FeedDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool FeedDTO::idIsSet() const
{
    return m_IdIsSet;
}
void FeedDTO::unsetId()
{
    m_IdIsSet = false;
}
std::string FeedDTO::getLogin() const
{
    return m_Login;
}
void FeedDTO::setLogin(std::string const& value)
{
    m_Login = value;
    m_LoginIsSet = true;
}
bool FeedDTO::loginIsSet() const
{
    return m_LoginIsSet;
}
void FeedDTO::unsetLogin()
{
    m_LoginIsSet = false;
}
std::string FeedDTO::getName() const
{
    return m_Name;
}
void FeedDTO::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool FeedDTO::nameIsSet() const
{
    return m_NameIsSet;
}
void FeedDTO::unsetName()
{
    m_NameIsSet = false;
}
std::string FeedDTO::getPassword() const
{
    return m_Password;
}
void FeedDTO::setPassword(std::string const& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool FeedDTO::passwordIsSet() const
{
    return m_PasswordIsSet;
}
void FeedDTO::unsetPassword()
{
    m_PasswordIsSet = false;
}
std::string FeedDTO::getUploadDate() const
{
    return m_UploadDate;
}
void FeedDTO::setUploadDate(std::string const& value)
{
    m_UploadDate = value;
    m_UploadDateIsSet = true;
}
bool FeedDTO::uploadDateIsSet() const
{
    return m_UploadDateIsSet;
}
void FeedDTO::unsetUploadDate()
{
    m_UploadDateIsSet = false;
}
std::string FeedDTO::getUrl() const
{
    return m_Url;
}
void FeedDTO::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool FeedDTO::urlIsSet() const
{
    return m_UrlIsSet;
}
void FeedDTO::unsetUrl()
{
    m_UrlIsSet = false;
}
org::openapitools::server::model::FeedContentDTO FeedDTO::getContent() const
{
    return m_Content;
}
void FeedDTO::setContent(org::openapitools::server::model::FeedContentDTO const& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}
bool FeedDTO::contentIsSet() const
{
    return m_ContentIsSet;
}
void FeedDTO::unsetContent()
{
    m_ContentIsSet = false;
}
org::openapitools::server::model::FeedDownloadDTO FeedDTO::getDownload() const
{
    return m_Download;
}
void FeedDTO::setDownload(org::openapitools::server::model::FeedDownloadDTO const& value)
{
    m_Download = value;
    m_DownloadIsSet = true;
}
bool FeedDTO::downloadIsSet() const
{
    return m_DownloadIsSet;
}
void FeedDTO::unsetDownload()
{
    m_DownloadIsSet = false;
}
org::openapitools::server::model::FeedPlacementDTO FeedDTO::getPlacement() const
{
    return m_Placement;
}
void FeedDTO::setPlacement(org::openapitools::server::model::FeedPlacementDTO const& value)
{
    m_Placement = value;
    m_PlacementIsSet = true;
}
bool FeedDTO::placementIsSet() const
{
    return m_PlacementIsSet;
}
void FeedDTO::unsetPlacement()
{
    m_PlacementIsSet = false;
}
org::openapitools::server::model::FeedPublicationDTO FeedDTO::getPublication() const
{
    return m_Publication;
}
void FeedDTO::setPublication(org::openapitools::server::model::FeedPublicationDTO const& value)
{
    m_Publication = value;
    m_PublicationIsSet = true;
}
bool FeedDTO::publicationIsSet() const
{
    return m_PublicationIsSet;
}
void FeedDTO::unsetPublication()
{
    m_PublicationIsSet = false;
}


} // namespace org::openapitools::server::model

