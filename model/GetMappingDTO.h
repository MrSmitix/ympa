/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GetMappingDTO.h
 *
 * Информация о товарах в каталоге. 
 */

#ifndef GetMappingDTO_H_
#define GetMappingDTO_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о товарах в каталоге. 
/// </summary>
class  GetMappingDTO
{
public:
    GetMappingDTO();
    virtual ~GetMappingDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GetMappingDTO& rhs) const;
    bool operator!=(const GetMappingDTO& rhs) const;

    /////////////////////////////////////////////
    /// GetMappingDTO members

    /// <summary>
    /// SKU на Маркете.
    /// </summary>
    int64_t getMarketSku() const;
    void setMarketSku(int64_t const value);
    bool marketSkuIsSet() const;
    void unsetMarketSku();
    /// <summary>
    /// Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
    /// </summary>
    std::string getMarketSkuName() const;
    void setMarketSkuName(std::string const& value);
    bool marketSkuNameIsSet() const;
    void unsetMarketSkuName();
    /// <summary>
    /// Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
    /// </summary>
    int64_t getMarketModelId() const;
    void setMarketModelId(int64_t const value);
    bool marketModelIdIsSet() const;
    void unsetMarketModelId();
    /// <summary>
    /// Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
    /// </summary>
    std::string getMarketModelName() const;
    void setMarketModelName(std::string const& value);
    bool marketModelNameIsSet() const;
    void unsetMarketModelName();
    /// <summary>
    /// Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
    /// </summary>
    int64_t getMarketCategoryId() const;
    void setMarketCategoryId(int64_t const value);
    bool marketCategoryIdIsSet() const;
    void unsetMarketCategoryId();
    /// <summary>
    /// Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
    /// </summary>
    std::string getMarketCategoryName() const;
    void setMarketCategoryName(std::string const& value);
    bool marketCategoryNameIsSet() const;
    void unsetMarketCategoryName();

    friend  void to_json(nlohmann::json& j, const GetMappingDTO& o);
    friend  void from_json(const nlohmann::json& j, GetMappingDTO& o);
protected:
    int64_t m_MarketSku;
    bool m_MarketSkuIsSet;
    std::string m_MarketSkuName;
    bool m_MarketSkuNameIsSet;
    int64_t m_MarketModelId;
    bool m_MarketModelIdIsSet;
    std::string m_MarketModelName;
    bool m_MarketModelNameIsSet;
    int64_t m_MarketCategoryId;
    bool m_MarketCategoryIdIsSet;
    std::string m_MarketCategoryName;
    bool m_MarketCategoryNameIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GetMappingDTO_H_ */
