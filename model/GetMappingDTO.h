/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetMappingDTO.h
 *
 * Информация о товарах в каталоге. 
 */

#ifndef GetMappingDTO_H_
#define GetMappingDTO_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "UpdateMappingDTO.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о товарах в каталоге. 
/// </summary>
class  GetMappingDTO : public UpdateMappingDTO
{
public:
    GetMappingDTO() = default;
    explicit GetMappingDTO(boost::property_tree::ptree const& pt);
    virtual ~GetMappingDTO() = default;

    GetMappingDTO(const GetMappingDTO& other) = default; // copy constructor
    GetMappingDTO(GetMappingDTO&& other) noexcept = default; // move constructor

    GetMappingDTO& operator=(const GetMappingDTO& other) = default; // copy assignment
    GetMappingDTO& operator=(GetMappingDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GetMappingDTO members

    /// <summary>
    /// SKU на Маркете.
    /// </summary>
    int64_t getMarketSku() const;
    void setMarketSku(int64_t value);

    /// <summary>
    /// Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
    /// </summary>
    std::string getMarketSkuName() const;
    void setMarketSkuName(std::string value);

    /// <summary>
    /// Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
    /// </summary>
    int64_t getMarketModelId() const;
    void setMarketModelId(int64_t value);

    /// <summary>
    /// Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
    /// </summary>
    std::string getMarketModelName() const;
    void setMarketModelName(std::string value);

    /// <summary>
    /// Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
    /// </summary>
    int64_t getMarketCategoryId() const;
    void setMarketCategoryId(int64_t value);

    /// <summary>
    /// Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
    /// </summary>
    std::string getMarketCategoryName() const;
    void setMarketCategoryName(std::string value);

protected:
    int64_t m_MarketSku = 0L;
    std::string m_MarketSkuName = "";
    int64_t m_MarketModelId = 0L;
    std::string m_MarketModelName = "";
    int64_t m_MarketCategoryId = 0L;
    std::string m_MarketCategoryName = "";
};

std::vector<GetMappingDTO> createGetMappingDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GetMappingDTO>(const GetMappingDTO& val) {
    return val.toPropertyTree();
}

template<>
inline GetMappingDTO fromPt<GetMappingDTO>(const boost::property_tree::ptree& pt) {
    GetMappingDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GetMappingDTO_H_ */
