/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderBuyerBasicInfoDTO.h
 *
 * Информация о покупателе с базовыми полями.
 */

#ifndef OrderBuyerBasicInfoDTO_H_
#define OrderBuyerBasicInfoDTO_H_



#include "OrderBuyerType.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о покупателе с базовыми полями.
/// </summary>
class  OrderBuyerBasicInfoDTO 
{
public:
    OrderBuyerBasicInfoDTO() = default;
    explicit OrderBuyerBasicInfoDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderBuyerBasicInfoDTO() = default;

    OrderBuyerBasicInfoDTO(const OrderBuyerBasicInfoDTO& other) = default; // copy constructor
    OrderBuyerBasicInfoDTO(OrderBuyerBasicInfoDTO&& other) noexcept = default; // move constructor

    OrderBuyerBasicInfoDTO& operator=(const OrderBuyerBasicInfoDTO& other) = default; // copy assignment
    OrderBuyerBasicInfoDTO& operator=(OrderBuyerBasicInfoDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrderBuyerBasicInfoDTO members

    /// <summary>
    /// Идентификатор покупателя.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Фамилия покупателя.
    /// </summary>
    std::string getLastName() const;
    void setLastName(std::string value);

    /// <summary>
    /// Имя покупателя.
    /// </summary>
    std::string getFirstName() const;
    void setFirstName(std::string value);

    /// <summary>
    /// Отчество покупателя.
    /// </summary>
    std::string getMiddleName() const;
    void setMiddleName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    OrderBuyerType getType() const;
    void setType(OrderBuyerType value);

protected:
    std::string m_Id = "";
    std::string m_LastName = "";
    std::string m_FirstName = "";
    std::string m_MiddleName = "";
    OrderBuyerType m_Type = OrderBuyerType{};
};

std::vector<OrderBuyerBasicInfoDTO> createOrderBuyerBasicInfoDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderBuyerBasicInfoDTO>(const OrderBuyerBasicInfoDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrderBuyerBasicInfoDTO fromPt<OrderBuyerBasicInfoDTO>(const boost::property_tree::ptree& pt) {
    OrderBuyerBasicInfoDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderBuyerBasicInfoDTO_H_ */
