/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BusinessSettingsDTO.h
 *
 * Настройки кабинета.
 */

#ifndef BusinessSettingsDTO_H_
#define BusinessSettingsDTO_H_



#include "CurrencyType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Настройки кабинета.
/// </summary>
class  BusinessSettingsDTO 
{
public:
    BusinessSettingsDTO() = default;
    explicit BusinessSettingsDTO(boost::property_tree::ptree const& pt);
    virtual ~BusinessSettingsDTO() = default;

    BusinessSettingsDTO(const BusinessSettingsDTO& other) = default; // copy constructor
    BusinessSettingsDTO(BusinessSettingsDTO&& other) noexcept = default; // move constructor

    BusinessSettingsDTO& operator=(const BusinessSettingsDTO& other) = default; // copy assignment
    BusinessSettingsDTO& operator=(BusinessSettingsDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BusinessSettingsDTO members

    /// <summary>
    /// Можно ли установить только [базовую цену](*rule): * &#x60;false&#x60; — можно задать и базовую цену, и цены в конкретных магазинах. * &#x60;true&#x60; — можно задать только базовую цену. 
    /// </summary>
    bool isOnlyDefaultPrice() const;
    void setOnlyDefaultPrice(bool value);

    /// <summary>
    /// 
    /// </summary>
    CurrencyType getCurrency() const;
    void setCurrency(CurrencyType value);

protected:
    bool m_OnlyDefaultPrice = false;
    CurrencyType m_Currency = CurrencyType{};
};

std::vector<BusinessSettingsDTO> createBusinessSettingsDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BusinessSettingsDTO>(const BusinessSettingsDTO& val) {
    return val.toPropertyTree();
}

template<>
inline BusinessSettingsDTO fromPt<BusinessSettingsDTO>(const boost::property_tree::ptree& pt) {
    BusinessSettingsDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BusinessSettingsDTO_H_ */
