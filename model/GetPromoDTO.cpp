/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GetPromoDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

GetPromoDTO::GetPromoDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string GetPromoDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void GetPromoDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree GetPromoDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void GetPromoDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string GetPromoDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void GetPromoDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree GetPromoDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("name", m_Name);
	if (m_Period != nullptr) {
		pt.add_child("period", m_Period->toPropertyTree());
	}
	pt.put("participating", m_Participating);
	if (m_AssortmentInfo != nullptr) {
		pt.add_child("assortmentInfo", m_AssortmentInfo->toPropertyTree());
	}
	if (m_MechanicsInfo != nullptr) {
		pt.add_child("mechanicsInfo", m_MechanicsInfo->toPropertyTree());
	}
	if (m_BestsellerInfo != nullptr) {
		pt.add_child("bestsellerInfo", m_BestsellerInfo->toPropertyTree());
	}
	// generate tree for Channels
	if (!m_Channels.empty()) {
		for (const auto &childEntry : m_Channels) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("channels", tmp_node);
		tmp_node.clear();
	}
	if (m_Constraints != nullptr) {
		pt.add_child("constraints", m_Constraints->toPropertyTree());
	}
	return pt;
}

void GetPromoDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_Name = pt.get("name", "");
	if (pt.get_child_optional("period")) {
		m_Period = std::make_shared<PromoPeriodDTO>();
		m_Period->fromPropertyTree(pt.get_child("period"));
	}
	m_Participating = pt.get("participating", false);
	if (pt.get_child_optional("assortmentInfo")) {
		m_AssortmentInfo = std::make_shared<GetPromoAssortmentInfoDTO>();
		m_AssortmentInfo->fromPropertyTree(pt.get_child("assortmentInfo"));
	}
	if (pt.get_child_optional("mechanicsInfo")) {
		m_MechanicsInfo = std::make_shared<GetPromoMechanicsInfoDTO>();
		m_MechanicsInfo->fromPropertyTree(pt.get_child("mechanicsInfo"));
	}
	if (pt.get_child_optional("bestsellerInfo")) {
		m_BestsellerInfo = std::make_shared<GetPromoBestsellerInfoDTO>();
		m_BestsellerInfo->fromPropertyTree(pt.get_child("bestsellerInfo"));
	}
	// push all items of Channels into member vector
	if (pt.get_child_optional("channels")) {
		for (const auto &childTree : pt.get_child("channels")) {
            std::shared_ptr<ChannelType> val =
                std::make_shared<ChannelType>(childTree.second);
            m_Channels.emplace_back(std::move(val));
		}
	}
	if (pt.get_child_optional("constraints")) {
		m_Constraints = std::make_shared<GetPromoConstraintsDTO>();
		m_Constraints->fromPropertyTree(pt.get_child("constraints"));
	}
}

std::string GetPromoDTO::getId() const
{
    return m_Id;
}

void GetPromoDTO::setId(std::string value)
{
	m_Id = value;
}
std::string GetPromoDTO::getName() const
{
    return m_Name;
}

void GetPromoDTO::setName(std::string value)
{
	m_Name = value;
}
std::shared_ptr<PromoPeriodDTO> GetPromoDTO::getPeriod() const
{
    return m_Period;
}

void GetPromoDTO::setPeriod(std::shared_ptr<PromoPeriodDTO> value)
{
	m_Period = value;
}
bool GetPromoDTO::isParticipating() const
{
    return m_Participating;
}

void GetPromoDTO::setParticipating(bool value)
{
	m_Participating = value;
}
std::shared_ptr<GetPromoAssortmentInfoDTO> GetPromoDTO::getAssortmentInfo() const
{
    return m_AssortmentInfo;
}

void GetPromoDTO::setAssortmentInfo(std::shared_ptr<GetPromoAssortmentInfoDTO> value)
{
	m_AssortmentInfo = value;
}
std::shared_ptr<GetPromoMechanicsInfoDTO> GetPromoDTO::getMechanicsInfo() const
{
    return m_MechanicsInfo;
}

void GetPromoDTO::setMechanicsInfo(std::shared_ptr<GetPromoMechanicsInfoDTO> value)
{
	m_MechanicsInfo = value;
}
std::shared_ptr<GetPromoBestsellerInfoDTO> GetPromoDTO::getBestsellerInfo() const
{
    return m_BestsellerInfo;
}

void GetPromoDTO::setBestsellerInfo(std::shared_ptr<GetPromoBestsellerInfoDTO> value)
{
	m_BestsellerInfo = value;
}
std::vector<std::shared_ptr<ChannelType>> GetPromoDTO::getChannels() const
{
    return m_Channels;
}

void GetPromoDTO::setChannels(std::vector<std::shared_ptr<ChannelType>> value)
{
	m_Channels = value;
}
std::shared_ptr<GetPromoConstraintsDTO> GetPromoDTO::getConstraints() const
{
    return m_Constraints;
}

void GetPromoDTO::setConstraints(std::shared_ptr<GetPromoConstraintsDTO> value)
{
	m_Constraints = value;
}

std::vector<GetPromoDTO> createGetPromoDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<GetPromoDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(GetPromoDTO(child.second));
    }

    return vec;
}

}
}
}
}

