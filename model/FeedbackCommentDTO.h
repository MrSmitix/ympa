/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FeedbackCommentDTO.h
 *
 * Комментарий к отзыву на магазин.
 */

#ifndef FeedbackCommentDTO_H_
#define FeedbackCommentDTO_H_


#include "FeedbackCommentDTO.h"
#include <string>
#include "FeedbackCommentAuthorDTO.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Комментарий к отзыву на магазин.
/// </summary>
class  FeedbackCommentDTO
{
public:
    FeedbackCommentDTO();
    virtual ~FeedbackCommentDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FeedbackCommentDTO& rhs) const;
    bool operator!=(const FeedbackCommentDTO& rhs) const;

    /////////////////////////////////////////////
    /// FeedbackCommentDTO members

    /// <summary>
    /// Идентификатор ответа.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Идентификатор родительского ответа.
    /// </summary>
    int64_t getParentId() const;
    void setParentId(int64_t const value);
    bool parentIdIsSet() const;
    void unsetParentId();
    /// <summary>
    /// Текст ответа.
    /// </summary>
    std::string getBody() const;
    void setBody(std::string const& value);
    bool bodyIsSet() const;
    void unsetBody();
    /// <summary>
    /// Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string const& value);
    bool createdAtIsSet() const;
    void unsetCreatedAt();
    /// <summary>
    /// Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string const& value);
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedbackCommentAuthorDTO getAuthor() const;
    void setAuthor(org::openapitools::server::model::FeedbackCommentAuthorDTO const& value);
    bool authorIsSet() const;
    void unsetAuthor();
    /// <summary>
    /// Дочерние ответы.
    /// </summary>
    std::vector<org::openapitools::server::model::FeedbackCommentDTO> getChildren() const;
    void setChildren(std::vector<org::openapitools::server::model::FeedbackCommentDTO> const& value);
    bool childrenIsSet() const;
    void unsetChildren();

    friend  void to_json(nlohmann::json& j, const FeedbackCommentDTO& o);
    friend  void from_json(const nlohmann::json& j, FeedbackCommentDTO& o);
protected:
    int64_t m_Id;
    bool m_IdIsSet;
    int64_t m_ParentId;
    bool m_ParentIdIsSet;
    std::string m_Body;
    bool m_BodyIsSet;
    std::string m_CreatedAt;
    bool m_CreatedAtIsSet;
    std::string m_UpdatedAt;
    bool m_UpdatedAtIsSet;
    org::openapitools::server::model::FeedbackCommentAuthorDTO m_Author;
    bool m_AuthorIsSet;
    std::vector<org::openapitools::server::model::FeedbackCommentDTO> m_Children;
    bool m_ChildrenIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* FeedbackCommentDTO_H_ */
