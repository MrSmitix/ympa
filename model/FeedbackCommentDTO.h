/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedbackCommentDTO.h
 *
 * Комментарий к отзыву на магазин.
 */

#ifndef FeedbackCommentDTO_H_
#define FeedbackCommentDTO_H_



#include "FeedbackCommentDTO.h"
#include <string>
#include "FeedbackCommentAuthorDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Комментарий к отзыву на магазин.
/// </summary>
class  FeedbackCommentDTO 
{
public:
    FeedbackCommentDTO() = default;
    explicit FeedbackCommentDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedbackCommentDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// FeedbackCommentDTO members

    /// <summary>
    /// Идентификатор ответа.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Идентификатор родительского ответа.
    /// </summary>
    int64_t getParentId() const;
    void setParentId(int64_t value);

    /// <summary>
    /// Текст ответа.
    /// </summary>
    std::string getBody() const;
    void setBody(std::string value);

    /// <summary>
    /// Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedbackCommentAuthorDTO> getAuthor() const;
    void setAuthor(std::shared_ptr<FeedbackCommentAuthorDTO> value);

    /// <summary>
    /// Дочерние ответы.
    /// </summary>
    std::vector<std::shared_ptr<FeedbackCommentDTO>> getChildren() const;
    void setChildren(std::vector<std::shared_ptr<FeedbackCommentDTO>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_Id = 0L;
    int64_t m_ParentId = 0L;
    std::string m_Body = "";
    std::string m_CreatedAt = "";
    std::string m_UpdatedAt = "";
    std::shared_ptr<FeedbackCommentAuthorDTO> m_Author;
    std::vector<std::shared_ptr<FeedbackCommentDTO>> m_Children;
};

std::vector<FeedbackCommentDTO> createFeedbackCommentDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* FeedbackCommentDTO_H_ */
