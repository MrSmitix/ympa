/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ShipmentPalletLabelPageFormatType.h
 *
 * Формат страницы: * &#x60;A4&#x60; — формат страницы A4. * &#x60;A8&#x60; — формат страницы A8. 
 */

#ifndef ShipmentPalletLabelPageFormatType_H_
#define ShipmentPalletLabelPageFormatType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Формат страницы: * &#x60;A4&#x60; — формат страницы A4. * &#x60;A8&#x60; — формат страницы A8. 
/// </summary>
class  ShipmentPalletLabelPageFormatType 
{
public:
    ShipmentPalletLabelPageFormatType() = default;
    explicit ShipmentPalletLabelPageFormatType(boost::property_tree::ptree const& pt);
    virtual ~ShipmentPalletLabelPageFormatType() = default;

    ShipmentPalletLabelPageFormatType(const ShipmentPalletLabelPageFormatType& other) = default; // copy constructor
    ShipmentPalletLabelPageFormatType(ShipmentPalletLabelPageFormatType&& other) noexcept = default; // move constructor

    ShipmentPalletLabelPageFormatType& operator=(const ShipmentPalletLabelPageFormatType& other) = default; // copy assignment
    ShipmentPalletLabelPageFormatType& operator=(ShipmentPalletLabelPageFormatType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// ShipmentPalletLabelPageFormatType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_ShipmentPalletLabelPageFormatTypeEnumValue;
};

std::vector<ShipmentPalletLabelPageFormatType> createShipmentPalletLabelPageFormatTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ShipmentPalletLabelPageFormatType>(const ShipmentPalletLabelPageFormatType& val) {
    return val.toPropertyTree();
}

template<>
inline ShipmentPalletLabelPageFormatType fromPt<ShipmentPalletLabelPageFormatType>(const boost::property_tree::ptree& pt) {
    ShipmentPalletLabelPageFormatType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ShipmentPalletLabelPageFormatType_H_ */
