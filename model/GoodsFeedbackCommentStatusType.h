/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GoodsFeedbackCommentStatusType.h
 *
 * Статус комментария:  * &#x60;PUBLISHED&#x60; — опубликован. * &#x60;UNMODERATED&#x60; — не проверен. * &#x60;BANNED&#x60; — заблокирован. * &#x60;DELETED&#x60; — удален. 
 */

#ifndef GoodsFeedbackCommentStatusType_H_
#define GoodsFeedbackCommentStatusType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Статус комментария:  * &#x60;PUBLISHED&#x60; — опубликован. * &#x60;UNMODERATED&#x60; — не проверен. * &#x60;BANNED&#x60; — заблокирован. * &#x60;DELETED&#x60; — удален. 
/// </summary>
class  GoodsFeedbackCommentStatusType 
{
public:
    GoodsFeedbackCommentStatusType() = default;
    explicit GoodsFeedbackCommentStatusType(boost::property_tree::ptree const& pt);
    virtual ~GoodsFeedbackCommentStatusType() = default;

    GoodsFeedbackCommentStatusType(const GoodsFeedbackCommentStatusType& other) = default; // copy constructor
    GoodsFeedbackCommentStatusType(GoodsFeedbackCommentStatusType&& other) noexcept = default; // move constructor

    GoodsFeedbackCommentStatusType& operator=(const GoodsFeedbackCommentStatusType& other) = default; // copy assignment
    GoodsFeedbackCommentStatusType& operator=(GoodsFeedbackCommentStatusType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// GoodsFeedbackCommentStatusType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_GoodsFeedbackCommentStatusTypeEnumValue;
};

std::vector<GoodsFeedbackCommentStatusType> createGoodsFeedbackCommentStatusTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GoodsFeedbackCommentStatusType>(const GoodsFeedbackCommentStatusType& val) {
    return val.toPropertyTree();
}

template<>
inline GoodsFeedbackCommentStatusType fromPt<GoodsFeedbackCommentStatusType>(const boost::property_tree::ptree& pt) {
    GoodsFeedbackCommentStatusType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GoodsFeedbackCommentStatusType_H_ */
