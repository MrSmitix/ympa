/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DeletePromoOffersResultDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

DeletePromoOffersResultDTO::DeletePromoOffersResultDTO()
{
    m_RejectedOffersIsSet = false;
    
}

void DeletePromoOffersResultDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool DeletePromoOffersResultDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool DeletePromoOffersResultDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "DeletePromoOffersResultDTO" : pathPrefix;

         
    if (rejectedOffersIsSet())
    {
        const std::vector<org::openapitools::server::model::RejectedPromoOfferDeleteDTO>& value = m_RejectedOffers;
        const std::string currentValuePath = _pathPrefix + ".rejectedOffers";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::RejectedPromoOfferDeleteDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".rejectedOffers") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool DeletePromoOffersResultDTO::operator==(const DeletePromoOffersResultDTO& rhs) const
{
    return
    
    
    
    ((!rejectedOffersIsSet() && !rhs.rejectedOffersIsSet()) || (rejectedOffersIsSet() && rhs.rejectedOffersIsSet() && getRejectedOffers() == rhs.getRejectedOffers()))
    
    ;
}

bool DeletePromoOffersResultDTO::operator!=(const DeletePromoOffersResultDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DeletePromoOffersResultDTO& o)
{
    j = nlohmann::json::object();
    if(o.rejectedOffersIsSet() || !o.m_RejectedOffers.empty())
        j["rejectedOffers"] = o.m_RejectedOffers;
    
}

void from_json(const nlohmann::json& j, DeletePromoOffersResultDTO& o)
{
    if(j.find("rejectedOffers") != j.end())
    {
        j.at("rejectedOffers").get_to(o.m_RejectedOffers);
        o.m_RejectedOffersIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::RejectedPromoOfferDeleteDTO> DeletePromoOffersResultDTO::getRejectedOffers() const
{
    return m_RejectedOffers;
}
void DeletePromoOffersResultDTO::setRejectedOffers(std::vector<org::openapitools::server::model::RejectedPromoOfferDeleteDTO> const& value)
{
    m_RejectedOffers = value;
    m_RejectedOffersIsSet = true;
}
bool DeletePromoOffersResultDTO::rejectedOffersIsSet() const
{
    return m_RejectedOffersIsSet;
}
void DeletePromoOffersResultDTO::unsetRejectedOffers()
{
    m_RejectedOffersIsSet = false;
}


} // namespace org::openapitools::server::model

