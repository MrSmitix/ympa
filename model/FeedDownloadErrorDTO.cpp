/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FeedDownloadErrorDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FeedDownloadErrorDTO::FeedDownloadErrorDTO()
{
    m_HttpStatusCode = 0;
    m_HttpStatusCodeIsSet = false;
    m_TypeIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    
}

void FeedDownloadErrorDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FeedDownloadErrorDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FeedDownloadErrorDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FeedDownloadErrorDTO" : pathPrefix;

                
    return success;
}

bool FeedDownloadErrorDTO::operator==(const FeedDownloadErrorDTO& rhs) const
{
    return
    
    
    
    ((!httpStatusCodeIsSet() && !rhs.httpStatusCodeIsSet()) || (httpStatusCodeIsSet() && rhs.httpStatusCodeIsSet() && getHttpStatusCode() == rhs.getHttpStatusCode())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription()))
    
    ;
}

bool FeedDownloadErrorDTO::operator!=(const FeedDownloadErrorDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FeedDownloadErrorDTO& o)
{
    j = nlohmann::json::object();
    if(o.httpStatusCodeIsSet())
        j["httpStatusCode"] = o.m_HttpStatusCode;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    
}

void from_json(const nlohmann::json& j, FeedDownloadErrorDTO& o)
{
    if(j.find("httpStatusCode") != j.end())
    {
        j.at("httpStatusCode").get_to(o.m_HttpStatusCode);
        o.m_HttpStatusCodeIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    
}

int32_t FeedDownloadErrorDTO::getHttpStatusCode() const
{
    return m_HttpStatusCode;
}
void FeedDownloadErrorDTO::setHttpStatusCode(int32_t const value)
{
    m_HttpStatusCode = value;
    m_HttpStatusCodeIsSet = true;
}
bool FeedDownloadErrorDTO::httpStatusCodeIsSet() const
{
    return m_HttpStatusCodeIsSet;
}
void FeedDownloadErrorDTO::unsetHttpStatusCode()
{
    m_HttpStatusCodeIsSet = false;
}
org::openapitools::server::model::FeedDownloadErrorType FeedDownloadErrorDTO::getType() const
{
    return m_Type;
}
void FeedDownloadErrorDTO::setType(org::openapitools::server::model::FeedDownloadErrorType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool FeedDownloadErrorDTO::typeIsSet() const
{
    return m_TypeIsSet;
}
void FeedDownloadErrorDTO::unsetType()
{
    m_TypeIsSet = false;
}
std::string FeedDownloadErrorDTO::getDescription() const
{
    return m_Description;
}
void FeedDownloadErrorDTO::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool FeedDownloadErrorDTO::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void FeedDownloadErrorDTO::unsetDescription()
{
    m_DescriptionIsSet = false;
}


} // namespace org::openapitools::server::model

