/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersStatsDetailsDTO.h
 *
 * Информация об удалении товара из заказа.
 */

#ifndef OrdersStatsDetailsDTO_H_
#define OrdersStatsDetailsDTO_H_



#include <string>
#include "OrdersStatsItemStatusType.h"
#include "OrdersStatsStockType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация об удалении товара из заказа.
/// </summary>
class  OrdersStatsDetailsDTO 
{
public:
    OrdersStatsDetailsDTO() = default;
    explicit OrdersStatsDetailsDTO(boost::property_tree::ptree const& pt);
    virtual ~OrdersStatsDetailsDTO() = default;

    OrdersStatsDetailsDTO(const OrdersStatsDetailsDTO& other) = default; // copy constructor
    OrdersStatsDetailsDTO(OrdersStatsDetailsDTO&& other) noexcept = default; // move constructor

    OrdersStatsDetailsDTO& operator=(const OrdersStatsDetailsDTO& other) = default; // copy assignment
    OrdersStatsDetailsDTO& operator=(OrdersStatsDetailsDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrdersStatsDetailsDTO members

    /// <summary>
    /// 
    /// </summary>
    OrdersStatsItemStatusType getItemStatus() const;
    void setItemStatus(OrdersStatsItemStatusType value);

    /// <summary>
    /// Количество товара со статусом, указанном в параметре &#x60;itemStatus&#x60;.
    /// </summary>
    int64_t getItemCount() const;
    void setItemCount(int64_t value);

    /// <summary>
    /// Дата, когда товар получил статус, указанный в параметре &#x60;itemStatus&#x60;.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
    /// </summary>
    std::string getUpdateDate() const;
    void setUpdateDate(std::string value);

    /// <summary>
    /// 
    /// </summary>
    OrdersStatsStockType getStockType() const;
    void setStockType(OrdersStatsStockType value);

protected:
    OrdersStatsItemStatusType m_ItemStatus = OrdersStatsItemStatusType{};
    int64_t m_ItemCount = 0L;
    std::string m_UpdateDate = "";
    OrdersStatsStockType m_StockType = OrdersStatsStockType{};
};

std::vector<OrdersStatsDetailsDTO> createOrdersStatsDetailsDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrdersStatsDetailsDTO>(const OrdersStatsDetailsDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrdersStatsDetailsDTO fromPt<OrdersStatsDetailsDTO>(const boost::property_tree::ptree& pt) {
    OrdersStatsDetailsDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrdersStatsDetailsDTO_H_ */
