/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrdersStatsDetailsDTO.h
 *
 * Информация об удалении товара из заказа.
 */

#ifndef OrdersStatsDetailsDTO_H_
#define OrdersStatsDetailsDTO_H_


#include <string>
#include "OrdersStatsItemStatusType.h"
#include "OrdersStatsStockType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация об удалении товара из заказа.
/// </summary>
class  OrdersStatsDetailsDTO
{
public:
    OrdersStatsDetailsDTO();
    virtual ~OrdersStatsDetailsDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OrdersStatsDetailsDTO& rhs) const;
    bool operator!=(const OrdersStatsDetailsDTO& rhs) const;

    /////////////////////////////////////////////
    /// OrdersStatsDetailsDTO members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrdersStatsItemStatusType getItemStatus() const;
    void setItemStatus(org::openapitools::server::model::OrdersStatsItemStatusType const& value);
    bool itemStatusIsSet() const;
    void unsetItemStatus();
    /// <summary>
    /// Количество товара со статусом, указанном в параметре &#x60;itemStatus&#x60;.
    /// </summary>
    int64_t getItemCount() const;
    void setItemCount(int64_t const value);
    bool itemCountIsSet() const;
    void unsetItemCount();
    /// <summary>
    /// Дата, когда товар получил статус, указанный в параметре &#x60;itemStatus&#x60;.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
    /// </summary>
    std::string getUpdateDate() const;
    void setUpdateDate(std::string const& value);
    bool updateDateIsSet() const;
    void unsetUpdateDate();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrdersStatsStockType getStockType() const;
    void setStockType(org::openapitools::server::model::OrdersStatsStockType const& value);
    bool stockTypeIsSet() const;
    void unsetStockType();

    friend  void to_json(nlohmann::json& j, const OrdersStatsDetailsDTO& o);
    friend  void from_json(const nlohmann::json& j, OrdersStatsDetailsDTO& o);
protected:
    org::openapitools::server::model::OrdersStatsItemStatusType m_ItemStatus;
    bool m_ItemStatusIsSet;
    int64_t m_ItemCount;
    bool m_ItemCountIsSet;
    std::string m_UpdateDate;
    bool m_UpdateDateIsSet;
    org::openapitools::server::model::OrdersStatsStockType m_StockType;
    bool m_StockTypeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OrdersStatsDetailsDTO_H_ */
