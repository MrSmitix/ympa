/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ExtensionShipmentDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ExtensionShipmentDTO::ExtensionShipmentDTO()
{
    m_CurrentStatusIsSet = false;
    
}

void ExtensionShipmentDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ExtensionShipmentDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ExtensionShipmentDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ExtensionShipmentDTO" : pathPrefix;

             
    
    /* AvailableActions */ {
        const std::set<org::openapitools::server::model::ShipmentActionType>& value = m_AvailableActions;
        const std::string currentValuePath = _pathPrefix + ".availableActions";
                
        
        if (!org::openapitools::server::helpers::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ShipmentActionType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool ExtensionShipmentDTO::operator==(const ExtensionShipmentDTO& rhs) const
{
    return
    
    
    
    ((!currentStatusIsSet() && !rhs.currentStatusIsSet()) || (currentStatusIsSet() && rhs.currentStatusIsSet() && getCurrentStatus() == rhs.getCurrentStatus())) &&
    
    (getAvailableActions() == rhs.getAvailableActions())
    
    
    ;
}

bool ExtensionShipmentDTO::operator!=(const ExtensionShipmentDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ExtensionShipmentDTO& o)
{
    j = nlohmann::json::object();
    if(o.currentStatusIsSet())
        j["currentStatus"] = o.m_CurrentStatus;
    j["availableActions"] = o.m_AvailableActions;
    
}

void from_json(const nlohmann::json& j, ExtensionShipmentDTO& o)
{
    if(j.find("currentStatus") != j.end())
    {
        j.at("currentStatus").get_to(o.m_CurrentStatus);
        o.m_CurrentStatusIsSet = true;
    } 
    j.at("availableActions").get_to(o.m_AvailableActions);
    
}

org::openapitools::server::model::ShipmentStatusChangeDTO ExtensionShipmentDTO::getCurrentStatus() const
{
    return m_CurrentStatus;
}
void ExtensionShipmentDTO::setCurrentStatus(org::openapitools::server::model::ShipmentStatusChangeDTO const& value)
{
    m_CurrentStatus = value;
    m_CurrentStatusIsSet = true;
}
bool ExtensionShipmentDTO::currentStatusIsSet() const
{
    return m_CurrentStatusIsSet;
}
void ExtensionShipmentDTO::unsetCurrentStatus()
{
    m_CurrentStatusIsSet = false;
}
std::set<org::openapitools::server::model::ShipmentActionType> ExtensionShipmentDTO::getAvailableActions() const
{
    return m_AvailableActions;
}
void ExtensionShipmentDTO::setAvailableActions(std::set<org::openapitools::server::model::ShipmentActionType> const& value)
{
    m_AvailableActions = value;
}


} // namespace org::openapitools::server::model

