/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FeedbackDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

FeedbackDTO::FeedbackDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string FeedbackDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void FeedbackDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree FeedbackDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("createdAt", m_CreatedAt);
	pt.put("text", m_Text);
	pt.add_child("author", m_Author.toPropertyTree());
	pt.put("pro", m_Pro);
	pt.put("contra", m_Contra);
	// generate tree for Comments
    tmp_node.clear();
	if (!m_Comments.empty()) {
        tmp_node = toPt(m_Comments);
		pt.add_child("comments", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("shop", m_Shop.toPropertyTree());
	pt.put("resolved", m_Resolved);
	pt.put("verified", m_Verified);
	pt.put("recommend", m_Recommend);
	pt.add_child("grades", m_Grades.toPropertyTree());
	pt.add_child("order", m_Order.toPropertyTree());
	return pt;
}

void FeedbackDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", 0L);
	m_CreatedAt = pt.get("createdAt", "");
	m_Text = pt.get("text", "");
	if (pt.get_child_optional("author")) {
        m_Author = fromPt<FeedbackAuthorDTO>(pt.get_child("author"));
	}
	m_Pro = pt.get("pro", "");
	m_Contra = pt.get("contra", "");
	// push all items of Comments into member
	if (pt.get_child_optional("comments")) {
        m_Comments = fromPt<std::vector<FeedbackCommentDTO>>(pt.get_child("comments"));
	}
	if (pt.get_child_optional("shop")) {
        m_Shop = fromPt<FeedbackShopDTO>(pt.get_child("shop"));
	}
	m_Resolved = pt.get("resolved", false);
	m_Verified = pt.get("verified", false);
	m_Recommend = pt.get("recommend", false);
	if (pt.get_child_optional("grades")) {
        m_Grades = fromPt<FeedbackGradesDTO>(pt.get_child("grades"));
	}
	if (pt.get_child_optional("order")) {
        m_Order = fromPt<FeedbackOrderDTO>(pt.get_child("order"));
	}
}

int64_t FeedbackDTO::getId() const
{
    return m_Id;
}

void FeedbackDTO::setId(int64_t value)
{
    m_Id = value;
}


std::string FeedbackDTO::getCreatedAt() const
{
    return m_CreatedAt;
}

void FeedbackDTO::setCreatedAt(std::string value)
{
    m_CreatedAt = value;
}


std::string FeedbackDTO::getText() const
{
    return m_Text;
}

void FeedbackDTO::setText(std::string value)
{
    m_Text = value;
}


FeedbackStateType FeedbackDTO::getState() const
{
    return m_State;
}

void FeedbackDTO::setState(FeedbackStateType value)
{
    m_State = value;
}


FeedbackAuthorDTO FeedbackDTO::getAuthor() const
{
    return m_Author;
}

void FeedbackDTO::setAuthor(FeedbackAuthorDTO value)
{
    m_Author = value;
}


std::string FeedbackDTO::getPro() const
{
    return m_Pro;
}

void FeedbackDTO::setPro(std::string value)
{
    m_Pro = value;
}


std::string FeedbackDTO::getContra() const
{
    return m_Contra;
}

void FeedbackDTO::setContra(std::string value)
{
    m_Contra = value;
}


std::vector<FeedbackCommentDTO> FeedbackDTO::getComments() const
{
    return m_Comments;
}

void FeedbackDTO::setComments(std::vector<FeedbackCommentDTO> value)
{
    m_Comments = value;
}


FeedbackShopDTO FeedbackDTO::getShop() const
{
    return m_Shop;
}

void FeedbackDTO::setShop(FeedbackShopDTO value)
{
    m_Shop = value;
}


bool FeedbackDTO::isResolved() const
{
    return m_Resolved;
}

void FeedbackDTO::setResolved(bool value)
{
    m_Resolved = value;
}


bool FeedbackDTO::isVerified() const
{
    return m_Verified;
}

void FeedbackDTO::setVerified(bool value)
{
    m_Verified = value;
}


bool FeedbackDTO::isRecommend() const
{
    return m_Recommend;
}

void FeedbackDTO::setRecommend(bool value)
{
    m_Recommend = value;
}


FeedbackGradesDTO FeedbackDTO::getGrades() const
{
    return m_Grades;
}

void FeedbackDTO::setGrades(FeedbackGradesDTO value)
{
    m_Grades = value;
}


FeedbackOrderDTO FeedbackDTO::getOrder() const
{
    return m_Order;
}

void FeedbackDTO::setOrder(FeedbackOrderDTO value)
{
    m_Order = value;
}



std::vector<FeedbackDTO> createFeedbackDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<FeedbackDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(FeedbackDTO(child.second));
    }

    return vec;
}

}
}
}
}

