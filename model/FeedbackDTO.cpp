/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FeedbackDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FeedbackDTO::FeedbackDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_CreatedAt = "";
    m_CreatedAtIsSet = false;
    m_Text = "";
    m_TextIsSet = false;
    m_StateIsSet = false;
    m_AuthorIsSet = false;
    m_Pro = "";
    m_ProIsSet = false;
    m_Contra = "";
    m_ContraIsSet = false;
    m_ShopIsSet = false;
    m_Resolved = false;
    m_ResolvedIsSet = false;
    m_Verified = false;
    m_VerifiedIsSet = false;
    m_Recommend = false;
    m_RecommendIsSet = false;
    m_GradesIsSet = false;
    m_OrderIsSet = false;
    
}

void FeedbackDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FeedbackDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FeedbackDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FeedbackDTO" : pathPrefix;

                                     
    
    /* Comments */ {
        const std::vector<org::openapitools::server::model::FeedbackCommentDTO>& value = m_Comments;
        const std::string currentValuePath = _pathPrefix + ".comments";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::FeedbackCommentDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".comments") && success;
 
                i++;
            }
        }

    }
                            
    return success;
}

bool FeedbackDTO::operator==(const FeedbackDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!createdAtIsSet() && !rhs.createdAtIsSet()) || (createdAtIsSet() && rhs.createdAtIsSet() && getCreatedAt() == rhs.getCreatedAt())) &&
    
    
    ((!textIsSet() && !rhs.textIsSet()) || (textIsSet() && rhs.textIsSet() && getText() == rhs.getText())) &&
    
    
    ((!stateIsSet() && !rhs.stateIsSet()) || (stateIsSet() && rhs.stateIsSet() && getState() == rhs.getState())) &&
    
    
    ((!authorIsSet() && !rhs.authorIsSet()) || (authorIsSet() && rhs.authorIsSet() && getAuthor() == rhs.getAuthor())) &&
    
    
    ((!proIsSet() && !rhs.proIsSet()) || (proIsSet() && rhs.proIsSet() && getPro() == rhs.getPro())) &&
    
    
    ((!contraIsSet() && !rhs.contraIsSet()) || (contraIsSet() && rhs.contraIsSet() && getContra() == rhs.getContra())) &&
    
    (getComments() == rhs.getComments())
     &&
    
    
    ((!shopIsSet() && !rhs.shopIsSet()) || (shopIsSet() && rhs.shopIsSet() && getShop() == rhs.getShop())) &&
    
    
    ((!resolvedIsSet() && !rhs.resolvedIsSet()) || (resolvedIsSet() && rhs.resolvedIsSet() && isResolved() == rhs.isResolved())) &&
    
    
    ((!verifiedIsSet() && !rhs.verifiedIsSet()) || (verifiedIsSet() && rhs.verifiedIsSet() && isVerified() == rhs.isVerified())) &&
    
    
    ((!recommendIsSet() && !rhs.recommendIsSet()) || (recommendIsSet() && rhs.recommendIsSet() && isRecommend() == rhs.isRecommend())) &&
    
    
    ((!gradesIsSet() && !rhs.gradesIsSet()) || (gradesIsSet() && rhs.gradesIsSet() && getGrades() == rhs.getGrades())) &&
    
    
    ((!orderIsSet() && !rhs.orderIsSet()) || (orderIsSet() && rhs.orderIsSet() && getOrder() == rhs.getOrder()))
    
    ;
}

bool FeedbackDTO::operator!=(const FeedbackDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FeedbackDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.createdAtIsSet())
        j["createdAt"] = o.m_CreatedAt;
    if(o.textIsSet())
        j["text"] = o.m_Text;
    if(o.stateIsSet())
        j["state"] = o.m_State;
    if(o.authorIsSet())
        j["author"] = o.m_Author;
    if(o.proIsSet())
        j["pro"] = o.m_Pro;
    if(o.contraIsSet())
        j["contra"] = o.m_Contra;
    j["comments"] = o.m_Comments;
    if(o.shopIsSet())
        j["shop"] = o.m_Shop;
    if(o.resolvedIsSet())
        j["resolved"] = o.m_Resolved;
    if(o.verifiedIsSet())
        j["verified"] = o.m_Verified;
    if(o.recommendIsSet())
        j["recommend"] = o.m_Recommend;
    if(o.gradesIsSet())
        j["grades"] = o.m_Grades;
    if(o.orderIsSet())
        j["order"] = o.m_Order;
    
}

void from_json(const nlohmann::json& j, FeedbackDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("createdAt") != j.end())
    {
        j.at("createdAt").get_to(o.m_CreatedAt);
        o.m_CreatedAtIsSet = true;
    } 
    if(j.find("text") != j.end())
    {
        j.at("text").get_to(o.m_Text);
        o.m_TextIsSet = true;
    } 
    if(j.find("state") != j.end())
    {
        j.at("state").get_to(o.m_State);
        o.m_StateIsSet = true;
    } 
    if(j.find("author") != j.end())
    {
        j.at("author").get_to(o.m_Author);
        o.m_AuthorIsSet = true;
    } 
    if(j.find("pro") != j.end())
    {
        j.at("pro").get_to(o.m_Pro);
        o.m_ProIsSet = true;
    } 
    if(j.find("contra") != j.end())
    {
        j.at("contra").get_to(o.m_Contra);
        o.m_ContraIsSet = true;
    } 
    j.at("comments").get_to(o.m_Comments);
    if(j.find("shop") != j.end())
    {
        j.at("shop").get_to(o.m_Shop);
        o.m_ShopIsSet = true;
    } 
    if(j.find("resolved") != j.end())
    {
        j.at("resolved").get_to(o.m_Resolved);
        o.m_ResolvedIsSet = true;
    } 
    if(j.find("verified") != j.end())
    {
        j.at("verified").get_to(o.m_Verified);
        o.m_VerifiedIsSet = true;
    } 
    if(j.find("recommend") != j.end())
    {
        j.at("recommend").get_to(o.m_Recommend);
        o.m_RecommendIsSet = true;
    } 
    if(j.find("grades") != j.end())
    {
        j.at("grades").get_to(o.m_Grades);
        o.m_GradesIsSet = true;
    } 
    if(j.find("order") != j.end())
    {
        j.at("order").get_to(o.m_Order);
        o.m_OrderIsSet = true;
    } 
    
}

int64_t FeedbackDTO::getId() const
{
    return m_Id;
}
void FeedbackDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool FeedbackDTO::idIsSet() const
{
    return m_IdIsSet;
}
void FeedbackDTO::unsetId()
{
    m_IdIsSet = false;
}
std::string FeedbackDTO::getCreatedAt() const
{
    return m_CreatedAt;
}
void FeedbackDTO::setCreatedAt(std::string const& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}
bool FeedbackDTO::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}
void FeedbackDTO::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
std::string FeedbackDTO::getText() const
{
    return m_Text;
}
void FeedbackDTO::setText(std::string const& value)
{
    m_Text = value;
    m_TextIsSet = true;
}
bool FeedbackDTO::textIsSet() const
{
    return m_TextIsSet;
}
void FeedbackDTO::unsetText()
{
    m_TextIsSet = false;
}
org::openapitools::server::model::FeedbackStateType FeedbackDTO::getState() const
{
    return m_State;
}
void FeedbackDTO::setState(org::openapitools::server::model::FeedbackStateType const& value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool FeedbackDTO::stateIsSet() const
{
    return m_StateIsSet;
}
void FeedbackDTO::unsetState()
{
    m_StateIsSet = false;
}
org::openapitools::server::model::FeedbackAuthorDTO FeedbackDTO::getAuthor() const
{
    return m_Author;
}
void FeedbackDTO::setAuthor(org::openapitools::server::model::FeedbackAuthorDTO const& value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}
bool FeedbackDTO::authorIsSet() const
{
    return m_AuthorIsSet;
}
void FeedbackDTO::unsetAuthor()
{
    m_AuthorIsSet = false;
}
std::string FeedbackDTO::getPro() const
{
    return m_Pro;
}
void FeedbackDTO::setPro(std::string const& value)
{
    m_Pro = value;
    m_ProIsSet = true;
}
bool FeedbackDTO::proIsSet() const
{
    return m_ProIsSet;
}
void FeedbackDTO::unsetPro()
{
    m_ProIsSet = false;
}
std::string FeedbackDTO::getContra() const
{
    return m_Contra;
}
void FeedbackDTO::setContra(std::string const& value)
{
    m_Contra = value;
    m_ContraIsSet = true;
}
bool FeedbackDTO::contraIsSet() const
{
    return m_ContraIsSet;
}
void FeedbackDTO::unsetContra()
{
    m_ContraIsSet = false;
}
std::vector<org::openapitools::server::model::FeedbackCommentDTO> FeedbackDTO::getComments() const
{
    return m_Comments;
}
void FeedbackDTO::setComments(std::vector<org::openapitools::server::model::FeedbackCommentDTO> const& value)
{
    m_Comments = value;
}
org::openapitools::server::model::FeedbackShopDTO FeedbackDTO::getShop() const
{
    return m_Shop;
}
void FeedbackDTO::setShop(org::openapitools::server::model::FeedbackShopDTO const& value)
{
    m_Shop = value;
    m_ShopIsSet = true;
}
bool FeedbackDTO::shopIsSet() const
{
    return m_ShopIsSet;
}
void FeedbackDTO::unsetShop()
{
    m_ShopIsSet = false;
}
bool FeedbackDTO::isResolved() const
{
    return m_Resolved;
}
void FeedbackDTO::setResolved(bool const value)
{
    m_Resolved = value;
    m_ResolvedIsSet = true;
}
bool FeedbackDTO::resolvedIsSet() const
{
    return m_ResolvedIsSet;
}
void FeedbackDTO::unsetResolved()
{
    m_ResolvedIsSet = false;
}
bool FeedbackDTO::isVerified() const
{
    return m_Verified;
}
void FeedbackDTO::setVerified(bool const value)
{
    m_Verified = value;
    m_VerifiedIsSet = true;
}
bool FeedbackDTO::verifiedIsSet() const
{
    return m_VerifiedIsSet;
}
void FeedbackDTO::unsetVerified()
{
    m_VerifiedIsSet = false;
}
bool FeedbackDTO::isRecommend() const
{
    return m_Recommend;
}
void FeedbackDTO::setRecommend(bool const value)
{
    m_Recommend = value;
    m_RecommendIsSet = true;
}
bool FeedbackDTO::recommendIsSet() const
{
    return m_RecommendIsSet;
}
void FeedbackDTO::unsetRecommend()
{
    m_RecommendIsSet = false;
}
org::openapitools::server::model::FeedbackGradesDTO FeedbackDTO::getGrades() const
{
    return m_Grades;
}
void FeedbackDTO::setGrades(org::openapitools::server::model::FeedbackGradesDTO const& value)
{
    m_Grades = value;
    m_GradesIsSet = true;
}
bool FeedbackDTO::gradesIsSet() const
{
    return m_GradesIsSet;
}
void FeedbackDTO::unsetGrades()
{
    m_GradesIsSet = false;
}
org::openapitools::server::model::FeedbackOrderDTO FeedbackDTO::getOrder() const
{
    return m_Order;
}
void FeedbackDTO::setOrder(org::openapitools::server::model::FeedbackOrderDTO const& value)
{
    m_Order = value;
    m_OrderIsSet = true;
}
bool FeedbackDTO::orderIsSet() const
{
    return m_OrderIsSet;
}
void FeedbackDTO::unsetOrder()
{
    m_OrderIsSet = false;
}


} // namespace org::openapitools::server::model

