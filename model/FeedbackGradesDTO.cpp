/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FeedbackGradesDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FeedbackGradesDTO::FeedbackGradesDTO()
{
    m_Average = 0.0;
    m_AverageIsSet = false;
    m_AgreeCount = 0L;
    m_AgreeCountIsSet = false;
    m_RejectCount = 0L;
    m_RejectCountIsSet = false;
    
}

void FeedbackGradesDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FeedbackGradesDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FeedbackGradesDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FeedbackGradesDTO" : pathPrefix;

                     
    
    /* Factors */ {
        const std::vector<org::openapitools::server::model::FeedbackFactorDTO>& value = m_Factors;
        const std::string currentValuePath = _pathPrefix + ".factors";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::FeedbackFactorDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".factors") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool FeedbackGradesDTO::operator==(const FeedbackGradesDTO& rhs) const
{
    return
    
    
    
    ((!averageIsSet() && !rhs.averageIsSet()) || (averageIsSet() && rhs.averageIsSet() && getAverage() == rhs.getAverage())) &&
    
    
    ((!agreeCountIsSet() && !rhs.agreeCountIsSet()) || (agreeCountIsSet() && rhs.agreeCountIsSet() && getAgreeCount() == rhs.getAgreeCount())) &&
    
    
    ((!rejectCountIsSet() && !rhs.rejectCountIsSet()) || (rejectCountIsSet() && rhs.rejectCountIsSet() && getRejectCount() == rhs.getRejectCount())) &&
    
    (getFactors() == rhs.getFactors())
    
    
    ;
}

bool FeedbackGradesDTO::operator!=(const FeedbackGradesDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FeedbackGradesDTO& o)
{
    j = nlohmann::json::object();
    if(o.averageIsSet())
        j["average"] = o.m_Average;
    if(o.agreeCountIsSet())
        j["agreeCount"] = o.m_AgreeCount;
    if(o.rejectCountIsSet())
        j["rejectCount"] = o.m_RejectCount;
    j["factors"] = o.m_Factors;
    
}

void from_json(const nlohmann::json& j, FeedbackGradesDTO& o)
{
    if(j.find("average") != j.end())
    {
        j.at("average").get_to(o.m_Average);
        o.m_AverageIsSet = true;
    } 
    if(j.find("agreeCount") != j.end())
    {
        j.at("agreeCount").get_to(o.m_AgreeCount);
        o.m_AgreeCountIsSet = true;
    } 
    if(j.find("rejectCount") != j.end())
    {
        j.at("rejectCount").get_to(o.m_RejectCount);
        o.m_RejectCountIsSet = true;
    } 
    j.at("factors").get_to(o.m_Factors);
    
}

double FeedbackGradesDTO::getAverage() const
{
    return m_Average;
}
void FeedbackGradesDTO::setAverage(double const value)
{
    m_Average = value;
    m_AverageIsSet = true;
}
bool FeedbackGradesDTO::averageIsSet() const
{
    return m_AverageIsSet;
}
void FeedbackGradesDTO::unsetAverage()
{
    m_AverageIsSet = false;
}
int64_t FeedbackGradesDTO::getAgreeCount() const
{
    return m_AgreeCount;
}
void FeedbackGradesDTO::setAgreeCount(int64_t const value)
{
    m_AgreeCount = value;
    m_AgreeCountIsSet = true;
}
bool FeedbackGradesDTO::agreeCountIsSet() const
{
    return m_AgreeCountIsSet;
}
void FeedbackGradesDTO::unsetAgreeCount()
{
    m_AgreeCountIsSet = false;
}
int64_t FeedbackGradesDTO::getRejectCount() const
{
    return m_RejectCount;
}
void FeedbackGradesDTO::setRejectCount(int64_t const value)
{
    m_RejectCount = value;
    m_RejectCountIsSet = true;
}
bool FeedbackGradesDTO::rejectCountIsSet() const
{
    return m_RejectCountIsSet;
}
void FeedbackGradesDTO::unsetRejectCount()
{
    m_RejectCountIsSet = false;
}
std::vector<org::openapitools::server::model::FeedbackFactorDTO> FeedbackGradesDTO::getFactors() const
{
    return m_Factors;
}
void FeedbackGradesDTO::setFactors(std::vector<org::openapitools::server::model::FeedbackFactorDTO> const& value)
{
    m_Factors = value;
}


} // namespace org::openapitools::server::model

