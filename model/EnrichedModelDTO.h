/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EnrichedModelDTO.h
 *
 * Модель товара.
 */

#ifndef EnrichedModelDTO_H_
#define EnrichedModelDTO_H_



#include <string>
#include "ModelPriceDTO.h"
#include <vector>
#include "ModelOfferDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "ModelDTO.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Модель товара.
/// </summary>
class  EnrichedModelDTO : public ModelDTO
{
public:
    EnrichedModelDTO() = default;
    explicit EnrichedModelDTO(boost::property_tree::ptree const& pt);
    virtual ~EnrichedModelDTO() = default;

    EnrichedModelDTO(const EnrichedModelDTO& other) = default; // copy constructor
    EnrichedModelDTO(EnrichedModelDTO&& other) noexcept = default; // move constructor

    EnrichedModelDTO& operator=(const EnrichedModelDTO& other) = default; // copy assignment
    EnrichedModelDTO& operator=(EnrichedModelDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// EnrichedModelDTO members

    /// <summary>
    /// Идентификатор модели товара.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Название модели товара.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ModelPriceDTO getPrices() const;
    void setPrices(ModelPriceDTO value);

    /// <summary>
    /// Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
    /// </summary>
    std::vector<ModelOfferDTO> getOffers() const;
    void setOffers(std::vector<ModelOfferDTO> value);

    /// <summary>
    /// Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
    /// </summary>
    int32_t getOfflineOffers() const;
    void setOfflineOffers(int32_t value);

    /// <summary>
    /// Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
    /// </summary>
    int32_t getOnlineOffers() const;
    void setOnlineOffers(int32_t value);

protected:
    int64_t m_Id = 0L;
    std::string m_Name = "";
    ModelPriceDTO m_Prices;
    std::vector<ModelOfferDTO> m_Offers;
    int32_t m_OfflineOffers = 0;
    int32_t m_OnlineOffers = 0;
};

std::vector<EnrichedModelDTO> createEnrichedModelDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<EnrichedModelDTO>(const EnrichedModelDTO& val) {
    return val.toPropertyTree();
}

template<>
inline EnrichedModelDTO fromPt<EnrichedModelDTO>(const boost::property_tree::ptree& pt) {
    EnrichedModelDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* EnrichedModelDTO_H_ */
