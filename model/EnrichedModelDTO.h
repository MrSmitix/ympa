/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * EnrichedModelDTO.h
 *
 * Модель товара.
 */

#ifndef EnrichedModelDTO_H_
#define EnrichedModelDTO_H_


#include <string>
#include "ModelPriceDTO.h"
#include <vector>
#include "ModelOfferDTO.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Модель товара.
/// </summary>
class  EnrichedModelDTO
{
public:
    EnrichedModelDTO();
    virtual ~EnrichedModelDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const EnrichedModelDTO& rhs) const;
    bool operator!=(const EnrichedModelDTO& rhs) const;

    /////////////////////////////////////////////
    /// EnrichedModelDTO members

    /// <summary>
    /// Идентификатор модели товара.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Название модели товара.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ModelPriceDTO getPrices() const;
    void setPrices(org::openapitools::server::model::ModelPriceDTO const& value);
    bool pricesIsSet() const;
    void unsetPrices();
    /// <summary>
    /// Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
    /// </summary>
    std::vector<org::openapitools::server::model::ModelOfferDTO> getOffers() const;
    void setOffers(std::vector<org::openapitools::server::model::ModelOfferDTO> const& value);
    bool offersIsSet() const;
    void unsetOffers();
    /// <summary>
    /// Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
    /// </summary>
    int32_t getOfflineOffers() const;
    void setOfflineOffers(int32_t const value);
    bool offlineOffersIsSet() const;
    void unsetOfflineOffers();
    /// <summary>
    /// Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
    /// </summary>
    int32_t getOnlineOffers() const;
    void setOnlineOffers(int32_t const value);
    bool onlineOffersIsSet() const;
    void unsetOnlineOffers();

    friend  void to_json(nlohmann::json& j, const EnrichedModelDTO& o);
    friend  void from_json(const nlohmann::json& j, EnrichedModelDTO& o);
protected:
    int64_t m_Id;
    bool m_IdIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    org::openapitools::server::model::ModelPriceDTO m_Prices;
    bool m_PricesIsSet;
    std::vector<org::openapitools::server::model::ModelOfferDTO> m_Offers;
    bool m_OffersIsSet;
    int32_t m_OfflineOffers;
    bool m_OfflineOffersIsSet;
    int32_t m_OnlineOffers;
    bool m_OnlineOffersIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* EnrichedModelDTO_H_ */
