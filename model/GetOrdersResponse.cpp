/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetOrdersResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetOrdersResponse::GetOrdersResponse()
{
    m_PagerIsSet = false;
    m_PagingIsSet = false;
    
}

void GetOrdersResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetOrdersResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetOrdersResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetOrdersResponse" : pathPrefix;

             
    
    /* Orders */ {
        const std::vector<org::openapitools::server::model::OrderDTO>& value = m_Orders;
        const std::string currentValuePath = _pathPrefix + ".orders";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".orders") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool GetOrdersResponse::operator==(const GetOrdersResponse& rhs) const
{
    return
    
    
    
    ((!pagerIsSet() && !rhs.pagerIsSet()) || (pagerIsSet() && rhs.pagerIsSet() && getPager() == rhs.getPager())) &&
    
    (getOrders() == rhs.getOrders())
     &&
    
    
    ((!pagingIsSet() && !rhs.pagingIsSet()) || (pagingIsSet() && rhs.pagingIsSet() && getPaging() == rhs.getPaging()))
    
    ;
}

bool GetOrdersResponse::operator!=(const GetOrdersResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetOrdersResponse& o)
{
    j = nlohmann::json::object();
    if(o.pagerIsSet())
        j["pager"] = o.m_Pager;
    j["orders"] = o.m_Orders;
    if(o.pagingIsSet())
        j["paging"] = o.m_Paging;
    
}

void from_json(const nlohmann::json& j, GetOrdersResponse& o)
{
    if(j.find("pager") != j.end())
    {
        j.at("pager").get_to(o.m_Pager);
        o.m_PagerIsSet = true;
    } 
    j.at("orders").get_to(o.m_Orders);
    if(j.find("paging") != j.end())
    {
        j.at("paging").get_to(o.m_Paging);
        o.m_PagingIsSet = true;
    } 
    
}

org::openapitools::server::model::FlippingPagerDTO GetOrdersResponse::getPager() const
{
    return m_Pager;
}
void GetOrdersResponse::setPager(org::openapitools::server::model::FlippingPagerDTO const& value)
{
    m_Pager = value;
    m_PagerIsSet = true;
}
bool GetOrdersResponse::pagerIsSet() const
{
    return m_PagerIsSet;
}
void GetOrdersResponse::unsetPager()
{
    m_PagerIsSet = false;
}
std::vector<org::openapitools::server::model::OrderDTO> GetOrdersResponse::getOrders() const
{
    return m_Orders;
}
void GetOrdersResponse::setOrders(std::vector<org::openapitools::server::model::OrderDTO> const& value)
{
    m_Orders = value;
}
org::openapitools::server::model::ForwardScrollingPagerDTO GetOrdersResponse::getPaging() const
{
    return m_Paging;
}
void GetOrdersResponse::setPaging(org::openapitools::server::model::ForwardScrollingPagerDTO const& value)
{
    m_Paging = value;
    m_PagingIsSet = true;
}
bool GetOrdersResponse::pagingIsSet() const
{
    return m_PagingIsSet;
}
void GetOrdersResponse::unsetPaging()
{
    m_PagingIsSet = false;
}


} // namespace org::openapitools::server::model

