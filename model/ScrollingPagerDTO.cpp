/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ScrollingPagerDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ScrollingPagerDTO::ScrollingPagerDTO()
{
    m_NextPageToken = "";
    m_NextPageTokenIsSet = false;
    m_PrevPageToken = "";
    m_PrevPageTokenIsSet = false;
    
}

void ScrollingPagerDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ScrollingPagerDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ScrollingPagerDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ScrollingPagerDTO" : pathPrefix;

            
    return success;
}

bool ScrollingPagerDTO::operator==(const ScrollingPagerDTO& rhs) const
{
    return
    
    
    
    ((!nextPageTokenIsSet() && !rhs.nextPageTokenIsSet()) || (nextPageTokenIsSet() && rhs.nextPageTokenIsSet() && getNextPageToken() == rhs.getNextPageToken())) &&
    
    
    ((!prevPageTokenIsSet() && !rhs.prevPageTokenIsSet()) || (prevPageTokenIsSet() && rhs.prevPageTokenIsSet() && getPrevPageToken() == rhs.getPrevPageToken()))
    
    ;
}

bool ScrollingPagerDTO::operator!=(const ScrollingPagerDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ScrollingPagerDTO& o)
{
    j = nlohmann::json::object();
    if(o.nextPageTokenIsSet())
        j["nextPageToken"] = o.m_NextPageToken;
    if(o.prevPageTokenIsSet())
        j["prevPageToken"] = o.m_PrevPageToken;
    
}

void from_json(const nlohmann::json& j, ScrollingPagerDTO& o)
{
    if(j.find("nextPageToken") != j.end())
    {
        j.at("nextPageToken").get_to(o.m_NextPageToken);
        o.m_NextPageTokenIsSet = true;
    } 
    if(j.find("prevPageToken") != j.end())
    {
        j.at("prevPageToken").get_to(o.m_PrevPageToken);
        o.m_PrevPageTokenIsSet = true;
    } 
    
}

std::string ScrollingPagerDTO::getNextPageToken() const
{
    return m_NextPageToken;
}
void ScrollingPagerDTO::setNextPageToken(std::string const& value)
{
    m_NextPageToken = value;
    m_NextPageTokenIsSet = true;
}
bool ScrollingPagerDTO::nextPageTokenIsSet() const
{
    return m_NextPageTokenIsSet;
}
void ScrollingPagerDTO::unsetNextPageToken()
{
    m_NextPageTokenIsSet = false;
}
std::string ScrollingPagerDTO::getPrevPageToken() const
{
    return m_PrevPageToken;
}
void ScrollingPagerDTO::setPrevPageToken(std::string const& value)
{
    m_PrevPageToken = value;
    m_PrevPageTokenIsSet = true;
}
bool ScrollingPagerDTO::prevPageTokenIsSet() const
{
    return m_PrevPageTokenIsSet;
}
void ScrollingPagerDTO::unsetPrevPageToken()
{
    m_PrevPageTokenIsSet = false;
}


} // namespace org::openapitools::server::model

