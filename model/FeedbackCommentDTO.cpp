/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FeedbackCommentDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FeedbackCommentDTO::FeedbackCommentDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_ParentId = 0L;
    m_ParentIdIsSet = false;
    m_Body = "";
    m_BodyIsSet = false;
    m_CreatedAt = "";
    m_CreatedAtIsSet = false;
    m_UpdatedAt = "";
    m_UpdatedAtIsSet = false;
    m_AuthorIsSet = false;
    m_ChildrenIsSet = false;
    
}

void FeedbackCommentDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FeedbackCommentDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FeedbackCommentDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FeedbackCommentDTO" : pathPrefix;

                                 
    if (childrenIsSet())
    {
        const std::vector<org::openapitools::server::model::FeedbackCommentDTO>& value = m_Children;
        const std::string currentValuePath = _pathPrefix + ".children";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::FeedbackCommentDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".children") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool FeedbackCommentDTO::operator==(const FeedbackCommentDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!parentIdIsSet() && !rhs.parentIdIsSet()) || (parentIdIsSet() && rhs.parentIdIsSet() && getParentId() == rhs.getParentId())) &&
    
    
    ((!bodyIsSet() && !rhs.bodyIsSet()) || (bodyIsSet() && rhs.bodyIsSet() && getBody() == rhs.getBody())) &&
    
    
    ((!createdAtIsSet() && !rhs.createdAtIsSet()) || (createdAtIsSet() && rhs.createdAtIsSet() && getCreatedAt() == rhs.getCreatedAt())) &&
    
    
    ((!updatedAtIsSet() && !rhs.updatedAtIsSet()) || (updatedAtIsSet() && rhs.updatedAtIsSet() && getUpdatedAt() == rhs.getUpdatedAt())) &&
    
    
    ((!authorIsSet() && !rhs.authorIsSet()) || (authorIsSet() && rhs.authorIsSet() && getAuthor() == rhs.getAuthor())) &&
    
    
    ((!childrenIsSet() && !rhs.childrenIsSet()) || (childrenIsSet() && rhs.childrenIsSet() && getChildren() == rhs.getChildren()))
    
    ;
}

bool FeedbackCommentDTO::operator!=(const FeedbackCommentDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FeedbackCommentDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.parentIdIsSet())
        j["parentId"] = o.m_ParentId;
    if(o.bodyIsSet())
        j["body"] = o.m_Body;
    if(o.createdAtIsSet())
        j["createdAt"] = o.m_CreatedAt;
    if(o.updatedAtIsSet())
        j["updatedAt"] = o.m_UpdatedAt;
    if(o.authorIsSet())
        j["author"] = o.m_Author;
    if(o.childrenIsSet() || !o.m_Children.empty())
        j["children"] = o.m_Children;
    
}

void from_json(const nlohmann::json& j, FeedbackCommentDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("parentId") != j.end())
    {
        j.at("parentId").get_to(o.m_ParentId);
        o.m_ParentIdIsSet = true;
    } 
    if(j.find("body") != j.end())
    {
        j.at("body").get_to(o.m_Body);
        o.m_BodyIsSet = true;
    } 
    if(j.find("createdAt") != j.end())
    {
        j.at("createdAt").get_to(o.m_CreatedAt);
        o.m_CreatedAtIsSet = true;
    } 
    if(j.find("updatedAt") != j.end())
    {
        j.at("updatedAt").get_to(o.m_UpdatedAt);
        o.m_UpdatedAtIsSet = true;
    } 
    if(j.find("author") != j.end())
    {
        j.at("author").get_to(o.m_Author);
        o.m_AuthorIsSet = true;
    } 
    if(j.find("children") != j.end())
    {
        j.at("children").get_to(o.m_Children);
        o.m_ChildrenIsSet = true;
    } 
    
}

int64_t FeedbackCommentDTO::getId() const
{
    return m_Id;
}
void FeedbackCommentDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool FeedbackCommentDTO::idIsSet() const
{
    return m_IdIsSet;
}
void FeedbackCommentDTO::unsetId()
{
    m_IdIsSet = false;
}
int64_t FeedbackCommentDTO::getParentId() const
{
    return m_ParentId;
}
void FeedbackCommentDTO::setParentId(int64_t const value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}
bool FeedbackCommentDTO::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}
void FeedbackCommentDTO::unsetParentId()
{
    m_ParentIdIsSet = false;
}
std::string FeedbackCommentDTO::getBody() const
{
    return m_Body;
}
void FeedbackCommentDTO::setBody(std::string const& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}
bool FeedbackCommentDTO::bodyIsSet() const
{
    return m_BodyIsSet;
}
void FeedbackCommentDTO::unsetBody()
{
    m_BodyIsSet = false;
}
std::string FeedbackCommentDTO::getCreatedAt() const
{
    return m_CreatedAt;
}
void FeedbackCommentDTO::setCreatedAt(std::string const& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}
bool FeedbackCommentDTO::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}
void FeedbackCommentDTO::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
std::string FeedbackCommentDTO::getUpdatedAt() const
{
    return m_UpdatedAt;
}
void FeedbackCommentDTO::setUpdatedAt(std::string const& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}
bool FeedbackCommentDTO::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}
void FeedbackCommentDTO::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
org::openapitools::server::model::FeedbackCommentAuthorDTO FeedbackCommentDTO::getAuthor() const
{
    return m_Author;
}
void FeedbackCommentDTO::setAuthor(org::openapitools::server::model::FeedbackCommentAuthorDTO const& value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}
bool FeedbackCommentDTO::authorIsSet() const
{
    return m_AuthorIsSet;
}
void FeedbackCommentDTO::unsetAuthor()
{
    m_AuthorIsSet = false;
}
std::vector<org::openapitools::server::model::FeedbackCommentDTO> FeedbackCommentDTO::getChildren() const
{
    return m_Children;
}
void FeedbackCommentDTO::setChildren(std::vector<org::openapitools::server::model::FeedbackCommentDTO> const& value)
{
    m_Children = value;
    m_ChildrenIsSet = true;
}
bool FeedbackCommentDTO::childrenIsSet() const
{
    return m_ChildrenIsSet;
}
void FeedbackCommentDTO::unsetChildren()
{
    m_ChildrenIsSet = false;
}


} // namespace org::openapitools::server::model

