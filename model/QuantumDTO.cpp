/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "QuantumDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

QuantumDTO::QuantumDTO()
{
    m_MinQuantity = 0;
    m_MinQuantityIsSet = false;
    m_StepQuantity = 0;
    m_StepQuantityIsSet = false;
    
}

void QuantumDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool QuantumDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool QuantumDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "QuantumDTO" : pathPrefix;

         
    if (minQuantityIsSet())
    {
        const int32_t& value = m_MinQuantity;
        const std::string currentValuePath = _pathPrefix + ".minQuantity";
                
        
        if (value < 1)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }

    }
         
    if (stepQuantityIsSet())
    {
        const int32_t& value = m_StepQuantity;
        const std::string currentValuePath = _pathPrefix + ".stepQuantity";
                
        
        if (value < 1)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }
        if (value > 100)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 100;";
        }

    }
    
    return success;
}

bool QuantumDTO::operator==(const QuantumDTO& rhs) const
{
    return
    
    
    
    ((!minQuantityIsSet() && !rhs.minQuantityIsSet()) || (minQuantityIsSet() && rhs.minQuantityIsSet() && getMinQuantity() == rhs.getMinQuantity())) &&
    
    
    ((!stepQuantityIsSet() && !rhs.stepQuantityIsSet()) || (stepQuantityIsSet() && rhs.stepQuantityIsSet() && getStepQuantity() == rhs.getStepQuantity()))
    
    ;
}

bool QuantumDTO::operator!=(const QuantumDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const QuantumDTO& o)
{
    j = nlohmann::json::object();
    if(o.minQuantityIsSet())
        j["minQuantity"] = o.m_MinQuantity;
    if(o.stepQuantityIsSet())
        j["stepQuantity"] = o.m_StepQuantity;
    
}

void from_json(const nlohmann::json& j, QuantumDTO& o)
{
    if(j.find("minQuantity") != j.end())
    {
        j.at("minQuantity").get_to(o.m_MinQuantity);
        o.m_MinQuantityIsSet = true;
    } 
    if(j.find("stepQuantity") != j.end())
    {
        j.at("stepQuantity").get_to(o.m_StepQuantity);
        o.m_StepQuantityIsSet = true;
    } 
    
}

int32_t QuantumDTO::getMinQuantity() const
{
    return m_MinQuantity;
}
void QuantumDTO::setMinQuantity(int32_t const value)
{
    m_MinQuantity = value;
    m_MinQuantityIsSet = true;
}
bool QuantumDTO::minQuantityIsSet() const
{
    return m_MinQuantityIsSet;
}
void QuantumDTO::unsetMinQuantity()
{
    m_MinQuantityIsSet = false;
}
int32_t QuantumDTO::getStepQuantity() const
{
    return m_StepQuantity;
}
void QuantumDTO::setStepQuantity(int32_t const value)
{
    m_StepQuantity = value;
    m_StepQuantityIsSet = true;
}
bool QuantumDTO::stepQuantityIsSet() const
{
    return m_StepQuantityIsSet;
}
void QuantumDTO::unsetStepQuantity()
{
    m_StepQuantityIsSet = false;
}


} // namespace org::openapitools::server::model

