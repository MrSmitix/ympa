/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderItemInstanceModificationDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderItemInstanceModificationDTO::OrderItemInstanceModificationDTO()
{
    m_Id = 0L;
    
}

void OrderItemInstanceModificationDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderItemInstanceModificationDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderItemInstanceModificationDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderItemInstanceModificationDTO" : pathPrefix;

             
    
    /* Instances */ {
        const std::vector<org::openapitools::server::model::BriefOrderItemInstanceDTO>& value = m_Instances;
        const std::string currentValuePath = _pathPrefix + ".instances";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::BriefOrderItemInstanceDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".instances") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool OrderItemInstanceModificationDTO::operator==(const OrderItemInstanceModificationDTO& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getInstances() == rhs.getInstances())
    
    
    ;
}

bool OrderItemInstanceModificationDTO::operator!=(const OrderItemInstanceModificationDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderItemInstanceModificationDTO& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    j["instances"] = o.m_Instances;
    
}

void from_json(const nlohmann::json& j, OrderItemInstanceModificationDTO& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("instances").get_to(o.m_Instances);
    
}

int64_t OrderItemInstanceModificationDTO::getId() const
{
    return m_Id;
}
void OrderItemInstanceModificationDTO::setId(int64_t const value)
{
    m_Id = value;
}
std::vector<org::openapitools::server::model::BriefOrderItemInstanceDTO> OrderItemInstanceModificationDTO::getInstances() const
{
    return m_Instances;
}
void OrderItemInstanceModificationDTO::setInstances(std::vector<org::openapitools::server::model::BriefOrderItemInstanceDTO> const& value)
{
    m_Instances = value;
}


} // namespace org::openapitools::server::model

