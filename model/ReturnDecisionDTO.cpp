/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ReturnDecisionDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ReturnDecisionDTO::ReturnDecisionDTO()
{
    m_ReturnItemId = 0L;
    m_ReturnItemIdIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_Comment = "";
    m_CommentIsSet = false;
    m_ReasonTypeIsSet = false;
    m_SubreasonTypeIsSet = false;
    m_DecisionTypeIsSet = false;
    m_RefundAmount = 0L;
    m_RefundAmountIsSet = false;
    m_PartnerCompensation = 0L;
    m_PartnerCompensationIsSet = false;
    m_ImagesIsSet = false;
    
}

void ReturnDecisionDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ReturnDecisionDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ReturnDecisionDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ReturnDecisionDTO" : pathPrefix;

                                         
    if (imagesIsSet())
    {
        const std::vector<std::string>& value = m_Images;
        const std::string currentValuePath = _pathPrefix + ".images";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool ReturnDecisionDTO::operator==(const ReturnDecisionDTO& rhs) const
{
    return
    
    
    
    ((!returnItemIdIsSet() && !rhs.returnItemIdIsSet()) || (returnItemIdIsSet() && rhs.returnItemIdIsSet() && getReturnItemId() == rhs.getReturnItemId())) &&
    
    
    ((!countIsSet() && !rhs.countIsSet()) || (countIsSet() && rhs.countIsSet() && getCount() == rhs.getCount())) &&
    
    
    ((!commentIsSet() && !rhs.commentIsSet()) || (commentIsSet() && rhs.commentIsSet() && getComment() == rhs.getComment())) &&
    
    
    ((!reasonTypeIsSet() && !rhs.reasonTypeIsSet()) || (reasonTypeIsSet() && rhs.reasonTypeIsSet() && getReasonType() == rhs.getReasonType())) &&
    
    
    ((!subreasonTypeIsSet() && !rhs.subreasonTypeIsSet()) || (subreasonTypeIsSet() && rhs.subreasonTypeIsSet() && getSubreasonType() == rhs.getSubreasonType())) &&
    
    
    ((!decisionTypeIsSet() && !rhs.decisionTypeIsSet()) || (decisionTypeIsSet() && rhs.decisionTypeIsSet() && getDecisionType() == rhs.getDecisionType())) &&
    
    
    ((!refundAmountIsSet() && !rhs.refundAmountIsSet()) || (refundAmountIsSet() && rhs.refundAmountIsSet() && getRefundAmount() == rhs.getRefundAmount())) &&
    
    
    ((!partnerCompensationIsSet() && !rhs.partnerCompensationIsSet()) || (partnerCompensationIsSet() && rhs.partnerCompensationIsSet() && getPartnerCompensation() == rhs.getPartnerCompensation())) &&
    
    
    ((!imagesIsSet() && !rhs.imagesIsSet()) || (imagesIsSet() && rhs.imagesIsSet() && getImages() == rhs.getImages()))
    
    ;
}

bool ReturnDecisionDTO::operator!=(const ReturnDecisionDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ReturnDecisionDTO& o)
{
    j = nlohmann::json::object();
    if(o.returnItemIdIsSet())
        j["returnItemId"] = o.m_ReturnItemId;
    if(o.countIsSet())
        j["count"] = o.m_Count;
    if(o.commentIsSet())
        j["comment"] = o.m_Comment;
    if(o.reasonTypeIsSet())
        j["reasonType"] = o.m_ReasonType;
    if(o.subreasonTypeIsSet())
        j["subreasonType"] = o.m_SubreasonType;
    if(o.decisionTypeIsSet())
        j["decisionType"] = o.m_DecisionType;
    if(o.refundAmountIsSet())
        j["refundAmount"] = o.m_RefundAmount;
    if(o.partnerCompensationIsSet())
        j["partnerCompensation"] = o.m_PartnerCompensation;
    if(o.imagesIsSet() || !o.m_Images.empty())
        j["images"] = o.m_Images;
    
}

void from_json(const nlohmann::json& j, ReturnDecisionDTO& o)
{
    if(j.find("returnItemId") != j.end())
    {
        j.at("returnItemId").get_to(o.m_ReturnItemId);
        o.m_ReturnItemIdIsSet = true;
    } 
    if(j.find("count") != j.end())
    {
        j.at("count").get_to(o.m_Count);
        o.m_CountIsSet = true;
    } 
    if(j.find("comment") != j.end())
    {
        j.at("comment").get_to(o.m_Comment);
        o.m_CommentIsSet = true;
    } 
    if(j.find("reasonType") != j.end())
    {
        j.at("reasonType").get_to(o.m_ReasonType);
        o.m_ReasonTypeIsSet = true;
    } 
    if(j.find("subreasonType") != j.end())
    {
        j.at("subreasonType").get_to(o.m_SubreasonType);
        o.m_SubreasonTypeIsSet = true;
    } 
    if(j.find("decisionType") != j.end())
    {
        j.at("decisionType").get_to(o.m_DecisionType);
        o.m_DecisionTypeIsSet = true;
    } 
    if(j.find("refundAmount") != j.end())
    {
        j.at("refundAmount").get_to(o.m_RefundAmount);
        o.m_RefundAmountIsSet = true;
    } 
    if(j.find("partnerCompensation") != j.end())
    {
        j.at("partnerCompensation").get_to(o.m_PartnerCompensation);
        o.m_PartnerCompensationIsSet = true;
    } 
    if(j.find("images") != j.end())
    {
        j.at("images").get_to(o.m_Images);
        o.m_ImagesIsSet = true;
    } 
    
}

int64_t ReturnDecisionDTO::getReturnItemId() const
{
    return m_ReturnItemId;
}
void ReturnDecisionDTO::setReturnItemId(int64_t const value)
{
    m_ReturnItemId = value;
    m_ReturnItemIdIsSet = true;
}
bool ReturnDecisionDTO::returnItemIdIsSet() const
{
    return m_ReturnItemIdIsSet;
}
void ReturnDecisionDTO::unsetReturnItemId()
{
    m_ReturnItemIdIsSet = false;
}
int32_t ReturnDecisionDTO::getCount() const
{
    return m_Count;
}
void ReturnDecisionDTO::setCount(int32_t const value)
{
    m_Count = value;
    m_CountIsSet = true;
}
bool ReturnDecisionDTO::countIsSet() const
{
    return m_CountIsSet;
}
void ReturnDecisionDTO::unsetCount()
{
    m_CountIsSet = false;
}
std::string ReturnDecisionDTO::getComment() const
{
    return m_Comment;
}
void ReturnDecisionDTO::setComment(std::string const& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}
bool ReturnDecisionDTO::commentIsSet() const
{
    return m_CommentIsSet;
}
void ReturnDecisionDTO::unsetComment()
{
    m_CommentIsSet = false;
}
org::openapitools::server::model::ReturnDecisionReasonType ReturnDecisionDTO::getReasonType() const
{
    return m_ReasonType;
}
void ReturnDecisionDTO::setReasonType(org::openapitools::server::model::ReturnDecisionReasonType const& value)
{
    m_ReasonType = value;
    m_ReasonTypeIsSet = true;
}
bool ReturnDecisionDTO::reasonTypeIsSet() const
{
    return m_ReasonTypeIsSet;
}
void ReturnDecisionDTO::unsetReasonType()
{
    m_ReasonTypeIsSet = false;
}
org::openapitools::server::model::ReturnDecisionSubreasonType ReturnDecisionDTO::getSubreasonType() const
{
    return m_SubreasonType;
}
void ReturnDecisionDTO::setSubreasonType(org::openapitools::server::model::ReturnDecisionSubreasonType const& value)
{
    m_SubreasonType = value;
    m_SubreasonTypeIsSet = true;
}
bool ReturnDecisionDTO::subreasonTypeIsSet() const
{
    return m_SubreasonTypeIsSet;
}
void ReturnDecisionDTO::unsetSubreasonType()
{
    m_SubreasonTypeIsSet = false;
}
org::openapitools::server::model::ReturnDecisionType ReturnDecisionDTO::getDecisionType() const
{
    return m_DecisionType;
}
void ReturnDecisionDTO::setDecisionType(org::openapitools::server::model::ReturnDecisionType const& value)
{
    m_DecisionType = value;
    m_DecisionTypeIsSet = true;
}
bool ReturnDecisionDTO::decisionTypeIsSet() const
{
    return m_DecisionTypeIsSet;
}
void ReturnDecisionDTO::unsetDecisionType()
{
    m_DecisionTypeIsSet = false;
}
int64_t ReturnDecisionDTO::getRefundAmount() const
{
    return m_RefundAmount;
}
void ReturnDecisionDTO::setRefundAmount(int64_t const value)
{
    m_RefundAmount = value;
    m_RefundAmountIsSet = true;
}
bool ReturnDecisionDTO::refundAmountIsSet() const
{
    return m_RefundAmountIsSet;
}
void ReturnDecisionDTO::unsetRefundAmount()
{
    m_RefundAmountIsSet = false;
}
int64_t ReturnDecisionDTO::getPartnerCompensation() const
{
    return m_PartnerCompensation;
}
void ReturnDecisionDTO::setPartnerCompensation(int64_t const value)
{
    m_PartnerCompensation = value;
    m_PartnerCompensationIsSet = true;
}
bool ReturnDecisionDTO::partnerCompensationIsSet() const
{
    return m_PartnerCompensationIsSet;
}
void ReturnDecisionDTO::unsetPartnerCompensation()
{
    m_PartnerCompensationIsSet = false;
}
std::vector<std::string> ReturnDecisionDTO::getImages() const
{
    return m_Images;
}
void ReturnDecisionDTO::setImages(std::vector<std::string> const& value)
{
    m_Images = value;
    m_ImagesIsSet = true;
}
bool ReturnDecisionDTO::imagesIsSet() const
{
    return m_ImagesIsSet;
}
void ReturnDecisionDTO::unsetImages()
{
    m_ImagesIsSet = false;
}


} // namespace org::openapitools::server::model

