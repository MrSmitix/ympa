/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ReturnDecisionDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ReturnDecisionDTO::ReturnDecisionDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string ReturnDecisionDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void ReturnDecisionDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree ReturnDecisionDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void ReturnDecisionDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string ReturnDecisionDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void ReturnDecisionDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ReturnDecisionDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("returnItemId", m_ReturnItemId);
	pt.put("count", m_Count);
	pt.put("comment", m_Comment);
	pt.put("refundAmount", m_RefundAmount);
	pt.put("partnerCompensation", m_PartnerCompensation);
	// generate tree for Images
	if (!m_Images.empty()) {
		for (const auto &childEntry : m_Images) {
            ptree Images_node;
            Images_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Images_node));
		}
		pt.add_child("images", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void ReturnDecisionDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_ReturnItemId = pt.get("returnItemId", 0L);
	m_Count = pt.get("count", 0);
	m_Comment = pt.get("comment", "");
	m_RefundAmount = pt.get("refundAmount", 0L);
	m_PartnerCompensation = pt.get("partnerCompensation", 0L);
	// push all items of Images into member vector
	if (pt.get_child_optional("images")) {
		for (const auto &childTree : pt.get_child("images")) {
            std::string val =
                childTree.second.data();
            m_Images.emplace_back(std::move(val));
		}
	}
}

int64_t ReturnDecisionDTO::getReturnItemId() const
{
    return m_ReturnItemId;
}

void ReturnDecisionDTO::setReturnItemId(int64_t value)
{
	m_ReturnItemId = value;
}
int32_t ReturnDecisionDTO::getCount() const
{
    return m_Count;
}

void ReturnDecisionDTO::setCount(int32_t value)
{
	m_Count = value;
}
std::string ReturnDecisionDTO::getComment() const
{
    return m_Comment;
}

void ReturnDecisionDTO::setComment(std::string value)
{
	m_Comment = value;
}
std::shared_ptr<ReturnDecisionReasonType> ReturnDecisionDTO::getReasonType() const
{
    return m_ReasonType;
}

void ReturnDecisionDTO::setReasonType(std::shared_ptr<ReturnDecisionReasonType> value)
{
	m_ReasonType = value;
}
std::shared_ptr<ReturnDecisionSubreasonType> ReturnDecisionDTO::getSubreasonType() const
{
    return m_SubreasonType;
}

void ReturnDecisionDTO::setSubreasonType(std::shared_ptr<ReturnDecisionSubreasonType> value)
{
	m_SubreasonType = value;
}
std::shared_ptr<ReturnDecisionType> ReturnDecisionDTO::getDecisionType() const
{
    return m_DecisionType;
}

void ReturnDecisionDTO::setDecisionType(std::shared_ptr<ReturnDecisionType> value)
{
	m_DecisionType = value;
}
int64_t ReturnDecisionDTO::getRefundAmount() const
{
    return m_RefundAmount;
}

void ReturnDecisionDTO::setRefundAmount(int64_t value)
{
	m_RefundAmount = value;
}
int64_t ReturnDecisionDTO::getPartnerCompensation() const
{
    return m_PartnerCompensation;
}

void ReturnDecisionDTO::setPartnerCompensation(int64_t value)
{
	m_PartnerCompensation = value;
}
std::vector<std::string> ReturnDecisionDTO::getImages() const
{
    return m_Images;
}

void ReturnDecisionDTO::setImages(std::vector<std::string> value)
{
	m_Images = value;
}

std::vector<ReturnDecisionDTO> createReturnDecisionDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ReturnDecisionDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(ReturnDecisionDTO(child.second));
    }

    return vec;
}

}
}
}
}

