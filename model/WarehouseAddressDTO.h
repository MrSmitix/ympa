/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WarehouseAddressDTO.h
 *
 * Адрес склада.
 */

#ifndef WarehouseAddressDTO_H_
#define WarehouseAddressDTO_H_



#include "GpsDTO.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Адрес склада.
/// </summary>
class  WarehouseAddressDTO 
{
public:
    WarehouseAddressDTO() = default;
    explicit WarehouseAddressDTO(boost::property_tree::ptree const& pt);
    virtual ~WarehouseAddressDTO() = default;

    WarehouseAddressDTO(const WarehouseAddressDTO& other) = default; // copy constructor
    WarehouseAddressDTO(WarehouseAddressDTO&& other) noexcept = default; // move constructor

    WarehouseAddressDTO& operator=(const WarehouseAddressDTO& other) = default; // copy assignment
    WarehouseAddressDTO& operator=(WarehouseAddressDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// WarehouseAddressDTO members

    /// <summary>
    /// Город.
    /// </summary>
    std::string getCity() const;
    void setCity(std::string value);

    /// <summary>
    /// Улица.
    /// </summary>
    std::string getStreet() const;
    void setStreet(std::string value);

    /// <summary>
    /// Номер дома.
    /// </summary>
    std::string getNumber() const;
    void setNumber(std::string value);

    /// <summary>
    /// Номер строения.
    /// </summary>
    std::string getBuilding() const;
    void setBuilding(std::string value);

    /// <summary>
    /// Номер корпуса.
    /// </summary>
    std::string getBlock() const;
    void setBlock(std::string value);

    /// <summary>
    /// 
    /// </summary>
    GpsDTO getGps() const;
    void setGps(GpsDTO value);

protected:
    std::string m_City = "";
    std::string m_Street = "";
    std::string m_number = "";
    std::string m_Building = "";
    std::string m_Block = "";
    GpsDTO m_Gps;
};

std::vector<WarehouseAddressDTO> createWarehouseAddressDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<WarehouseAddressDTO>(const WarehouseAddressDTO& val) {
    return val.toPropertyTree();
}

template<>
inline WarehouseAddressDTO fromPt<WarehouseAddressDTO>(const boost::property_tree::ptree& pt) {
    WarehouseAddressDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* WarehouseAddressDTO_H_ */
