/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferMappingErrorDTO.h
 *
 * Текст ошибки.
 */

#ifndef OfferMappingErrorDTO_H_
#define OfferMappingErrorDTO_H_



#include <string>
#include "OfferMappingErrorType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Текст ошибки.
/// </summary>
class  OfferMappingErrorDTO 
{
public:
    OfferMappingErrorDTO() = default;
    explicit OfferMappingErrorDTO(boost::property_tree::ptree const& pt);
    virtual ~OfferMappingErrorDTO() = default;

    OfferMappingErrorDTO(const OfferMappingErrorDTO& other) = default; // copy constructor
    OfferMappingErrorDTO(OfferMappingErrorDTO&& other) noexcept = default; // move constructor

    OfferMappingErrorDTO& operator=(const OfferMappingErrorDTO& other) = default; // copy assignment
    OfferMappingErrorDTO& operator=(OfferMappingErrorDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OfferMappingErrorDTO members

    /// <summary>
    /// 
    /// </summary>
    OfferMappingErrorType getType() const;
    void setType(OfferMappingErrorType value);

    /// <summary>
    /// Идентификатор характеристики, с которой связана ошибка.
    /// </summary>
    int64_t getParameterId() const;
    void setParameterId(int64_t value);

    /// <summary>
    /// Текст ошибки.
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string value);

protected:
    OfferMappingErrorType m_Type = OfferMappingErrorType{};
    int64_t m_ParameterId = 0L;
    std::string m_Message = "";
};

std::vector<OfferMappingErrorDTO> createOfferMappingErrorDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OfferMappingErrorDTO>(const OfferMappingErrorDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OfferMappingErrorDTO fromPt<OfferMappingErrorDTO>(const boost::property_tree::ptree& pt) {
    OfferMappingErrorDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OfferMappingErrorDTO_H_ */
