/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateOrderStatusesDTO.h
 *
 * Список заказов, статус которых обновился.
 */

#ifndef UpdateOrderStatusesDTO_H_
#define UpdateOrderStatusesDTO_H_



#include "UpdateOrderStatusDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Список заказов, статус которых обновился.
/// </summary>
class  UpdateOrderStatusesDTO 
{
public:
    UpdateOrderStatusesDTO() = default;
    explicit UpdateOrderStatusesDTO(boost::property_tree::ptree const& pt);
    virtual ~UpdateOrderStatusesDTO() = default;

    UpdateOrderStatusesDTO(const UpdateOrderStatusesDTO& other) = default; // copy constructor
    UpdateOrderStatusesDTO(UpdateOrderStatusesDTO&& other) noexcept = default; // move constructor

    UpdateOrderStatusesDTO& operator=(const UpdateOrderStatusesDTO& other) = default; // copy assignment
    UpdateOrderStatusesDTO& operator=(UpdateOrderStatusesDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UpdateOrderStatusesDTO members

    /// <summary>
    /// Список с обновленными заказами.
    /// </summary>
    std::vector<UpdateOrderStatusDTO> getOrders() const;
    void setOrders(std::vector<UpdateOrderStatusDTO> value);

protected:
    std::vector<UpdateOrderStatusDTO> m_Orders;
};

std::vector<UpdateOrderStatusesDTO> createUpdateOrderStatusesDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UpdateOrderStatusesDTO>(const UpdateOrderStatusesDTO& val) {
    return val.toPropertyTree();
}

template<>
inline UpdateOrderStatusesDTO fromPt<UpdateOrderStatusesDTO>(const boost::property_tree::ptree& pt) {
    UpdateOrderStatusesDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UpdateOrderStatusesDTO_H_ */
