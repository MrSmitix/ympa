/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GenerateUnitedOrdersRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GenerateUnitedOrdersRequest::GenerateUnitedOrdersRequest()
{
    m_BusinessId = 0L;
    m_CampaignIdsIsSet = false;
    m_PromoId = "";
    m_PromoIdIsSet = false;
    
}

void GenerateUnitedOrdersRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GenerateUnitedOrdersRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GenerateUnitedOrdersRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GenerateUnitedOrdersRequest" : pathPrefix;

                     
    if (campaignIdsIsSet())
    {
        const std::vector<int64_t>& value = m_CampaignIds;
        const std::string currentValuePath = _pathPrefix + ".campaignIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool GenerateUnitedOrdersRequest::operator==(const GenerateUnitedOrdersRequest& rhs) const
{
    return
    
    
    (getBusinessId() == rhs.getBusinessId())
     &&
    
    (getDateFrom() == rhs.getDateFrom())
     &&
    
    (getDateTo() == rhs.getDateTo())
     &&
    
    
    ((!campaignIdsIsSet() && !rhs.campaignIdsIsSet()) || (campaignIdsIsSet() && rhs.campaignIdsIsSet() && getCampaignIds() == rhs.getCampaignIds())) &&
    
    
    ((!promoIdIsSet() && !rhs.promoIdIsSet()) || (promoIdIsSet() && rhs.promoIdIsSet() && getPromoId() == rhs.getPromoId()))
    
    ;
}

bool GenerateUnitedOrdersRequest::operator!=(const GenerateUnitedOrdersRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GenerateUnitedOrdersRequest& o)
{
    j = nlohmann::json::object();
    j["businessId"] = o.m_BusinessId;
    j["dateFrom"] = o.m_DateFrom;
    j["dateTo"] = o.m_DateTo;
    if(o.campaignIdsIsSet() || !o.m_CampaignIds.empty())
        j["campaignIds"] = o.m_CampaignIds;
    if(o.promoIdIsSet())
        j["promoId"] = o.m_PromoId;
    
}

void from_json(const nlohmann::json& j, GenerateUnitedOrdersRequest& o)
{
    j.at("businessId").get_to(o.m_BusinessId);
    j.at("dateFrom").get_to(o.m_DateFrom);
    j.at("dateTo").get_to(o.m_DateTo);
    if(j.find("campaignIds") != j.end())
    {
        j.at("campaignIds").get_to(o.m_CampaignIds);
        o.m_CampaignIdsIsSet = true;
    } 
    if(j.find("promoId") != j.end())
    {
        j.at("promoId").get_to(o.m_PromoId);
        o.m_PromoIdIsSet = true;
    } 
    
}

int64_t GenerateUnitedOrdersRequest::getBusinessId() const
{
    return m_BusinessId;
}
void GenerateUnitedOrdersRequest::setBusinessId(int64_t const value)
{
    m_BusinessId = value;
}
std::string GenerateUnitedOrdersRequest::getDateFrom() const
{
    return m_DateFrom;
}
void GenerateUnitedOrdersRequest::setDateFrom(std::string const& value)
{
    m_DateFrom = value;
}
std::string GenerateUnitedOrdersRequest::getDateTo() const
{
    return m_DateTo;
}
void GenerateUnitedOrdersRequest::setDateTo(std::string const& value)
{
    m_DateTo = value;
}
std::vector<int64_t> GenerateUnitedOrdersRequest::getCampaignIds() const
{
    return m_CampaignIds;
}
void GenerateUnitedOrdersRequest::setCampaignIds(std::vector<int64_t> const value)
{
    m_CampaignIds = value;
    m_CampaignIdsIsSet = true;
}
bool GenerateUnitedOrdersRequest::campaignIdsIsSet() const
{
    return m_CampaignIdsIsSet;
}
void GenerateUnitedOrdersRequest::unsetCampaignIds()
{
    m_CampaignIdsIsSet = false;
}
std::string GenerateUnitedOrdersRequest::getPromoId() const
{
    return m_PromoId;
}
void GenerateUnitedOrdersRequest::setPromoId(std::string const& value)
{
    m_PromoId = value;
    m_PromoIdIsSet = true;
}
bool GenerateUnitedOrdersRequest::promoIdIsSet() const
{
    return m_PromoIdIsSet;
}
void GenerateUnitedOrdersRequest::unsetPromoId()
{
    m_PromoIdIsSet = false;
}


} // namespace org::openapitools::server::model

