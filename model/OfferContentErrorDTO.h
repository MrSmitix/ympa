/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferContentErrorDTO.h
 *
 * Текст ошибки.
 */

#ifndef OfferContentErrorDTO_H_
#define OfferContentErrorDTO_H_



#include <string>
#include "OfferContentErrorType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Текст ошибки.
/// </summary>
class  OfferContentErrorDTO 
{
public:
    OfferContentErrorDTO() = default;
    explicit OfferContentErrorDTO(boost::property_tree::ptree const& pt);
    virtual ~OfferContentErrorDTO() = default;

    OfferContentErrorDTO(const OfferContentErrorDTO& other) = default; // copy constructor
    OfferContentErrorDTO(OfferContentErrorDTO&& other) noexcept = default; // move constructor

    OfferContentErrorDTO& operator=(const OfferContentErrorDTO& other) = default; // copy assignment
    OfferContentErrorDTO& operator=(OfferContentErrorDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OfferContentErrorDTO members

    /// <summary>
    /// 
    /// </summary>
    OfferContentErrorType getType() const;
    void setType(OfferContentErrorType value);

    /// <summary>
    /// Идентификатор характеристики, с которой связана ошибка.
    /// </summary>
    int64_t getParameterId() const;
    void setParameterId(int64_t value);

    /// <summary>
    /// Текст ошибки.
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string value);

protected:
    OfferContentErrorType m_Type = OfferContentErrorType{};
    int64_t m_ParameterId = 0L;
    std::string m_Message = "";
};

std::vector<OfferContentErrorDTO> createOfferContentErrorDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OfferContentErrorDTO>(const OfferContentErrorDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OfferContentErrorDTO fromPt<OfferContentErrorDTO>(const boost::property_tree::ptree& pt) {
    OfferContentErrorDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OfferContentErrorDTO_H_ */
