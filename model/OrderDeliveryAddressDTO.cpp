/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderDeliveryAddressDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderDeliveryAddressDTO::OrderDeliveryAddressDTO()
{
    m_Country = "";
    m_CountryIsSet = false;
    m_Postcode = "";
    m_PostcodeIsSet = false;
    m_City = "";
    m_CityIsSet = false;
    m_District = "";
    m_DistrictIsSet = false;
    m_Subway = "";
    m_SubwayIsSet = false;
    m_Street = "";
    m_StreetIsSet = false;
    m_House = "";
    m_HouseIsSet = false;
    m_Block = "";
    m_BlockIsSet = false;
    m_Entrance = "";
    m_EntranceIsSet = false;
    m_Entryphone = "";
    m_EntryphoneIsSet = false;
    m_Floor = "";
    m_FloorIsSet = false;
    m_Apartment = "";
    m_ApartmentIsSet = false;
    m_Phone = "";
    m_PhoneIsSet = false;
    m_Recipient = "";
    m_RecipientIsSet = false;
    m_GpsIsSet = false;
    
}

void OrderDeliveryAddressDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderDeliveryAddressDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderDeliveryAddressDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderDeliveryAddressDTO" : pathPrefix;

                                                                
    return success;
}

bool OrderDeliveryAddressDTO::operator==(const OrderDeliveryAddressDTO& rhs) const
{
    return
    
    
    
    ((!countryIsSet() && !rhs.countryIsSet()) || (countryIsSet() && rhs.countryIsSet() && getCountry() == rhs.getCountry())) &&
    
    
    ((!postcodeIsSet() && !rhs.postcodeIsSet()) || (postcodeIsSet() && rhs.postcodeIsSet() && getPostcode() == rhs.getPostcode())) &&
    
    
    ((!cityIsSet() && !rhs.cityIsSet()) || (cityIsSet() && rhs.cityIsSet() && getCity() == rhs.getCity())) &&
    
    
    ((!districtIsSet() && !rhs.districtIsSet()) || (districtIsSet() && rhs.districtIsSet() && getDistrict() == rhs.getDistrict())) &&
    
    
    ((!subwayIsSet() && !rhs.subwayIsSet()) || (subwayIsSet() && rhs.subwayIsSet() && getSubway() == rhs.getSubway())) &&
    
    
    ((!streetIsSet() && !rhs.streetIsSet()) || (streetIsSet() && rhs.streetIsSet() && getStreet() == rhs.getStreet())) &&
    
    
    ((!houseIsSet() && !rhs.houseIsSet()) || (houseIsSet() && rhs.houseIsSet() && getHouse() == rhs.getHouse())) &&
    
    
    ((!blockIsSet() && !rhs.blockIsSet()) || (blockIsSet() && rhs.blockIsSet() && getBlock() == rhs.getBlock())) &&
    
    
    ((!entranceIsSet() && !rhs.entranceIsSet()) || (entranceIsSet() && rhs.entranceIsSet() && getEntrance() == rhs.getEntrance())) &&
    
    
    ((!entryphoneIsSet() && !rhs.entryphoneIsSet()) || (entryphoneIsSet() && rhs.entryphoneIsSet() && getEntryphone() == rhs.getEntryphone())) &&
    
    
    ((!floorIsSet() && !rhs.floorIsSet()) || (floorIsSet() && rhs.floorIsSet() && getFloor() == rhs.getFloor())) &&
    
    
    ((!apartmentIsSet() && !rhs.apartmentIsSet()) || (apartmentIsSet() && rhs.apartmentIsSet() && getApartment() == rhs.getApartment())) &&
    
    
    ((!phoneIsSet() && !rhs.phoneIsSet()) || (phoneIsSet() && rhs.phoneIsSet() && getPhone() == rhs.getPhone())) &&
    
    
    ((!recipientIsSet() && !rhs.recipientIsSet()) || (recipientIsSet() && rhs.recipientIsSet() && getRecipient() == rhs.getRecipient())) &&
    
    
    ((!gpsIsSet() && !rhs.gpsIsSet()) || (gpsIsSet() && rhs.gpsIsSet() && getGps() == rhs.getGps()))
    
    ;
}

bool OrderDeliveryAddressDTO::operator!=(const OrderDeliveryAddressDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderDeliveryAddressDTO& o)
{
    j = nlohmann::json::object();
    if(o.countryIsSet())
        j["country"] = o.m_Country;
    if(o.postcodeIsSet())
        j["postcode"] = o.m_Postcode;
    if(o.cityIsSet())
        j["city"] = o.m_City;
    if(o.districtIsSet())
        j["district"] = o.m_District;
    if(o.subwayIsSet())
        j["subway"] = o.m_Subway;
    if(o.streetIsSet())
        j["street"] = o.m_Street;
    if(o.houseIsSet())
        j["house"] = o.m_House;
    if(o.blockIsSet())
        j["block"] = o.m_Block;
    if(o.entranceIsSet())
        j["entrance"] = o.m_Entrance;
    if(o.entryphoneIsSet())
        j["entryphone"] = o.m_Entryphone;
    if(o.floorIsSet())
        j["floor"] = o.m_Floor;
    if(o.apartmentIsSet())
        j["apartment"] = o.m_Apartment;
    if(o.phoneIsSet())
        j["phone"] = o.m_Phone;
    if(o.recipientIsSet())
        j["recipient"] = o.m_Recipient;
    if(o.gpsIsSet())
        j["gps"] = o.m_Gps;
    
}

void from_json(const nlohmann::json& j, OrderDeliveryAddressDTO& o)
{
    if(j.find("country") != j.end())
    {
        j.at("country").get_to(o.m_Country);
        o.m_CountryIsSet = true;
    } 
    if(j.find("postcode") != j.end())
    {
        j.at("postcode").get_to(o.m_Postcode);
        o.m_PostcodeIsSet = true;
    } 
    if(j.find("city") != j.end())
    {
        j.at("city").get_to(o.m_City);
        o.m_CityIsSet = true;
    } 
    if(j.find("district") != j.end())
    {
        j.at("district").get_to(o.m_District);
        o.m_DistrictIsSet = true;
    } 
    if(j.find("subway") != j.end())
    {
        j.at("subway").get_to(o.m_Subway);
        o.m_SubwayIsSet = true;
    } 
    if(j.find("street") != j.end())
    {
        j.at("street").get_to(o.m_Street);
        o.m_StreetIsSet = true;
    } 
    if(j.find("house") != j.end())
    {
        j.at("house").get_to(o.m_House);
        o.m_HouseIsSet = true;
    } 
    if(j.find("block") != j.end())
    {
        j.at("block").get_to(o.m_Block);
        o.m_BlockIsSet = true;
    } 
    if(j.find("entrance") != j.end())
    {
        j.at("entrance").get_to(o.m_Entrance);
        o.m_EntranceIsSet = true;
    } 
    if(j.find("entryphone") != j.end())
    {
        j.at("entryphone").get_to(o.m_Entryphone);
        o.m_EntryphoneIsSet = true;
    } 
    if(j.find("floor") != j.end())
    {
        j.at("floor").get_to(o.m_Floor);
        o.m_FloorIsSet = true;
    } 
    if(j.find("apartment") != j.end())
    {
        j.at("apartment").get_to(o.m_Apartment);
        o.m_ApartmentIsSet = true;
    } 
    if(j.find("phone") != j.end())
    {
        j.at("phone").get_to(o.m_Phone);
        o.m_PhoneIsSet = true;
    } 
    if(j.find("recipient") != j.end())
    {
        j.at("recipient").get_to(o.m_Recipient);
        o.m_RecipientIsSet = true;
    } 
    if(j.find("gps") != j.end())
    {
        j.at("gps").get_to(o.m_Gps);
        o.m_GpsIsSet = true;
    } 
    
}

std::string OrderDeliveryAddressDTO::getCountry() const
{
    return m_Country;
}
void OrderDeliveryAddressDTO::setCountry(std::string const& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool OrderDeliveryAddressDTO::countryIsSet() const
{
    return m_CountryIsSet;
}
void OrderDeliveryAddressDTO::unsetCountry()
{
    m_CountryIsSet = false;
}
std::string OrderDeliveryAddressDTO::getPostcode() const
{
    return m_Postcode;
}
void OrderDeliveryAddressDTO::setPostcode(std::string const& value)
{
    m_Postcode = value;
    m_PostcodeIsSet = true;
}
bool OrderDeliveryAddressDTO::postcodeIsSet() const
{
    return m_PostcodeIsSet;
}
void OrderDeliveryAddressDTO::unsetPostcode()
{
    m_PostcodeIsSet = false;
}
std::string OrderDeliveryAddressDTO::getCity() const
{
    return m_City;
}
void OrderDeliveryAddressDTO::setCity(std::string const& value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool OrderDeliveryAddressDTO::cityIsSet() const
{
    return m_CityIsSet;
}
void OrderDeliveryAddressDTO::unsetCity()
{
    m_CityIsSet = false;
}
std::string OrderDeliveryAddressDTO::getDistrict() const
{
    return m_District;
}
void OrderDeliveryAddressDTO::setDistrict(std::string const& value)
{
    m_District = value;
    m_DistrictIsSet = true;
}
bool OrderDeliveryAddressDTO::districtIsSet() const
{
    return m_DistrictIsSet;
}
void OrderDeliveryAddressDTO::unsetDistrict()
{
    m_DistrictIsSet = false;
}
std::string OrderDeliveryAddressDTO::getSubway() const
{
    return m_Subway;
}
void OrderDeliveryAddressDTO::setSubway(std::string const& value)
{
    m_Subway = value;
    m_SubwayIsSet = true;
}
bool OrderDeliveryAddressDTO::subwayIsSet() const
{
    return m_SubwayIsSet;
}
void OrderDeliveryAddressDTO::unsetSubway()
{
    m_SubwayIsSet = false;
}
std::string OrderDeliveryAddressDTO::getStreet() const
{
    return m_Street;
}
void OrderDeliveryAddressDTO::setStreet(std::string const& value)
{
    m_Street = value;
    m_StreetIsSet = true;
}
bool OrderDeliveryAddressDTO::streetIsSet() const
{
    return m_StreetIsSet;
}
void OrderDeliveryAddressDTO::unsetStreet()
{
    m_StreetIsSet = false;
}
std::string OrderDeliveryAddressDTO::getHouse() const
{
    return m_House;
}
void OrderDeliveryAddressDTO::setHouse(std::string const& value)
{
    m_House = value;
    m_HouseIsSet = true;
}
bool OrderDeliveryAddressDTO::houseIsSet() const
{
    return m_HouseIsSet;
}
void OrderDeliveryAddressDTO::unsetHouse()
{
    m_HouseIsSet = false;
}
std::string OrderDeliveryAddressDTO::getBlock() const
{
    return m_Block;
}
void OrderDeliveryAddressDTO::setBlock(std::string const& value)
{
    m_Block = value;
    m_BlockIsSet = true;
}
bool OrderDeliveryAddressDTO::blockIsSet() const
{
    return m_BlockIsSet;
}
void OrderDeliveryAddressDTO::unsetBlock()
{
    m_BlockIsSet = false;
}
std::string OrderDeliveryAddressDTO::getEntrance() const
{
    return m_Entrance;
}
void OrderDeliveryAddressDTO::setEntrance(std::string const& value)
{
    m_Entrance = value;
    m_EntranceIsSet = true;
}
bool OrderDeliveryAddressDTO::entranceIsSet() const
{
    return m_EntranceIsSet;
}
void OrderDeliveryAddressDTO::unsetEntrance()
{
    m_EntranceIsSet = false;
}
std::string OrderDeliveryAddressDTO::getEntryphone() const
{
    return m_Entryphone;
}
void OrderDeliveryAddressDTO::setEntryphone(std::string const& value)
{
    m_Entryphone = value;
    m_EntryphoneIsSet = true;
}
bool OrderDeliveryAddressDTO::entryphoneIsSet() const
{
    return m_EntryphoneIsSet;
}
void OrderDeliveryAddressDTO::unsetEntryphone()
{
    m_EntryphoneIsSet = false;
}
std::string OrderDeliveryAddressDTO::getFloor() const
{
    return m_Floor;
}
void OrderDeliveryAddressDTO::setFloor(std::string const& value)
{
    m_Floor = value;
    m_FloorIsSet = true;
}
bool OrderDeliveryAddressDTO::floorIsSet() const
{
    return m_FloorIsSet;
}
void OrderDeliveryAddressDTO::unsetFloor()
{
    m_FloorIsSet = false;
}
std::string OrderDeliveryAddressDTO::getApartment() const
{
    return m_Apartment;
}
void OrderDeliveryAddressDTO::setApartment(std::string const& value)
{
    m_Apartment = value;
    m_ApartmentIsSet = true;
}
bool OrderDeliveryAddressDTO::apartmentIsSet() const
{
    return m_ApartmentIsSet;
}
void OrderDeliveryAddressDTO::unsetApartment()
{
    m_ApartmentIsSet = false;
}
std::string OrderDeliveryAddressDTO::getPhone() const
{
    return m_Phone;
}
void OrderDeliveryAddressDTO::setPhone(std::string const& value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}
bool OrderDeliveryAddressDTO::phoneIsSet() const
{
    return m_PhoneIsSet;
}
void OrderDeliveryAddressDTO::unsetPhone()
{
    m_PhoneIsSet = false;
}
std::string OrderDeliveryAddressDTO::getRecipient() const
{
    return m_Recipient;
}
void OrderDeliveryAddressDTO::setRecipient(std::string const& value)
{
    m_Recipient = value;
    m_RecipientIsSet = true;
}
bool OrderDeliveryAddressDTO::recipientIsSet() const
{
    return m_RecipientIsSet;
}
void OrderDeliveryAddressDTO::unsetRecipient()
{
    m_RecipientIsSet = false;
}
org::openapitools::server::model::GpsDTO OrderDeliveryAddressDTO::getGps() const
{
    return m_Gps;
}
void OrderDeliveryAddressDTO::setGps(org::openapitools::server::model::GpsDTO const& value)
{
    m_Gps = value;
    m_GpsIsSet = true;
}
bool OrderDeliveryAddressDTO::gpsIsSet() const
{
    return m_GpsIsSet;
}
void OrderDeliveryAddressDTO::unsetGps()
{
    m_GpsIsSet = false;
}


} // namespace org::openapitools::server::model

