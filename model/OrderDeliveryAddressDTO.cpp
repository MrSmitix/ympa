/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrderDeliveryAddressDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrderDeliveryAddressDTO::OrderDeliveryAddressDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string OrderDeliveryAddressDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void OrderDeliveryAddressDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OrderDeliveryAddressDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("country", m_Country);
	pt.put("postcode", m_Postcode);
	pt.put("city", m_City);
	pt.put("district", m_District);
	pt.put("subway", m_Subway);
	pt.put("street", m_Street);
	pt.put("house", m_House);
	pt.put("block", m_Block);
	pt.put("entrance", m_Entrance);
	pt.put("entryphone", m_Entryphone);
	pt.put("floor", m_Floor);
	pt.put("apartment", m_Apartment);
	pt.put("phone", m_Phone);
	pt.put("recipient", m_Recipient);
	pt.add_child("gps", m_Gps.toPropertyTree());
	return pt;
}

void OrderDeliveryAddressDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Country = pt.get("country", "");
	m_Postcode = pt.get("postcode", "");
	m_City = pt.get("city", "");
	m_District = pt.get("district", "");
	m_Subway = pt.get("subway", "");
	m_Street = pt.get("street", "");
	m_House = pt.get("house", "");
	m_Block = pt.get("block", "");
	m_Entrance = pt.get("entrance", "");
	m_Entryphone = pt.get("entryphone", "");
	m_Floor = pt.get("floor", "");
	m_Apartment = pt.get("apartment", "");
	m_Phone = pt.get("phone", "");
	m_Recipient = pt.get("recipient", "");
	if (pt.get_child_optional("gps")) {
        m_Gps = fromPt<GpsDTO>(pt.get_child("gps"));
	}
}

std::string OrderDeliveryAddressDTO::getCountry() const
{
    return m_Country;
}

void OrderDeliveryAddressDTO::setCountry(std::string value)
{
    m_Country = value;
}


std::string OrderDeliveryAddressDTO::getPostcode() const
{
    return m_Postcode;
}

void OrderDeliveryAddressDTO::setPostcode(std::string value)
{
    m_Postcode = value;
}


std::string OrderDeliveryAddressDTO::getCity() const
{
    return m_City;
}

void OrderDeliveryAddressDTO::setCity(std::string value)
{
    m_City = value;
}


std::string OrderDeliveryAddressDTO::getDistrict() const
{
    return m_District;
}

void OrderDeliveryAddressDTO::setDistrict(std::string value)
{
    m_District = value;
}


std::string OrderDeliveryAddressDTO::getSubway() const
{
    return m_Subway;
}

void OrderDeliveryAddressDTO::setSubway(std::string value)
{
    m_Subway = value;
}


std::string OrderDeliveryAddressDTO::getStreet() const
{
    return m_Street;
}

void OrderDeliveryAddressDTO::setStreet(std::string value)
{
    m_Street = value;
}


std::string OrderDeliveryAddressDTO::getHouse() const
{
    return m_House;
}

void OrderDeliveryAddressDTO::setHouse(std::string value)
{
    m_House = value;
}


std::string OrderDeliveryAddressDTO::getBlock() const
{
    return m_Block;
}

void OrderDeliveryAddressDTO::setBlock(std::string value)
{
    m_Block = value;
}


std::string OrderDeliveryAddressDTO::getEntrance() const
{
    return m_Entrance;
}

void OrderDeliveryAddressDTO::setEntrance(std::string value)
{
    m_Entrance = value;
}


std::string OrderDeliveryAddressDTO::getEntryphone() const
{
    return m_Entryphone;
}

void OrderDeliveryAddressDTO::setEntryphone(std::string value)
{
    m_Entryphone = value;
}


std::string OrderDeliveryAddressDTO::getFloor() const
{
    return m_Floor;
}

void OrderDeliveryAddressDTO::setFloor(std::string value)
{
    m_Floor = value;
}


std::string OrderDeliveryAddressDTO::getApartment() const
{
    return m_Apartment;
}

void OrderDeliveryAddressDTO::setApartment(std::string value)
{
    m_Apartment = value;
}


std::string OrderDeliveryAddressDTO::getPhone() const
{
    return m_Phone;
}

void OrderDeliveryAddressDTO::setPhone(std::string value)
{
    m_Phone = value;
}


std::string OrderDeliveryAddressDTO::getRecipient() const
{
    return m_Recipient;
}

void OrderDeliveryAddressDTO::setRecipient(std::string value)
{
    m_Recipient = value;
}


GpsDTO OrderDeliveryAddressDTO::getGps() const
{
    return m_Gps;
}

void OrderDeliveryAddressDTO::setGps(GpsDTO value)
{
    m_Gps = value;
}



std::vector<OrderDeliveryAddressDTO> createOrderDeliveryAddressDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OrderDeliveryAddressDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OrderDeliveryAddressDTO(child.second));
    }

    return vec;
}

}
}
}
}

