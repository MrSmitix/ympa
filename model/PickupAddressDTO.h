/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PickupAddressDTO.h
 *
 * Адрес доставки.
 */

#ifndef PickupAddressDTO_H_
#define PickupAddressDTO_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Адрес доставки.
/// </summary>
class  PickupAddressDTO 
{
public:
    PickupAddressDTO() = default;
    explicit PickupAddressDTO(boost::property_tree::ptree const& pt);
    virtual ~PickupAddressDTO() = default;

    PickupAddressDTO(const PickupAddressDTO& other) = default; // copy constructor
    PickupAddressDTO(PickupAddressDTO&& other) noexcept = default; // move constructor

    PickupAddressDTO& operator=(const PickupAddressDTO& other) = default; // copy assignment
    PickupAddressDTO& operator=(PickupAddressDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PickupAddressDTO members

    /// <summary>
    /// Страна.
    /// </summary>
    std::string getCountry() const;
    void setCountry(std::string value);

    /// <summary>
    /// Город.
    /// </summary>
    std::string getCity() const;
    void setCity(std::string value);

    /// <summary>
    /// Улица.
    /// </summary>
    std::string getStreet() const;
    void setStreet(std::string value);

    /// <summary>
    /// Номер дома.
    /// </summary>
    std::string getHouse() const;
    void setHouse(std::string value);

    /// <summary>
    /// Почтовый индекс.
    /// </summary>
    std::string getPostcode() const;
    void setPostcode(std::string value);

protected:
    std::string m_Country = "";
    std::string m_City = "";
    std::string m_Street = "";
    std::string m_House = "";
    std::string m_Postcode = "";
};

std::vector<PickupAddressDTO> createPickupAddressDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PickupAddressDTO>(const PickupAddressDTO& val) {
    return val.toPropertyTree();
}

template<>
inline PickupAddressDTO fromPt<PickupAddressDTO>(const boost::property_tree::ptree& pt) {
    PickupAddressDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PickupAddressDTO_H_ */
