/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PickupAddressDTO.h
 *
 * Адрес доставки.
 */

#ifndef PickupAddressDTO_H_
#define PickupAddressDTO_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Адрес доставки.
/// </summary>
class  PickupAddressDTO
{
public:
    PickupAddressDTO();
    virtual ~PickupAddressDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const PickupAddressDTO& rhs) const;
    bool operator!=(const PickupAddressDTO& rhs) const;

    /////////////////////////////////////////////
    /// PickupAddressDTO members

    /// <summary>
    /// Страна.
    /// </summary>
    std::string getCountry() const;
    void setCountry(std::string const& value);
    bool countryIsSet() const;
    void unsetCountry();
    /// <summary>
    /// Город.
    /// </summary>
    std::string getCity() const;
    void setCity(std::string const& value);
    bool cityIsSet() const;
    void unsetCity();
    /// <summary>
    /// Улица.
    /// </summary>
    std::string getStreet() const;
    void setStreet(std::string const& value);
    bool streetIsSet() const;
    void unsetStreet();
    /// <summary>
    /// Номер дома.
    /// </summary>
    std::string getHouse() const;
    void setHouse(std::string const& value);
    bool houseIsSet() const;
    void unsetHouse();
    /// <summary>
    /// Почтовый индекс.
    /// </summary>
    std::string getPostcode() const;
    void setPostcode(std::string const& value);
    bool postcodeIsSet() const;
    void unsetPostcode();

    friend  void to_json(nlohmann::json& j, const PickupAddressDTO& o);
    friend  void from_json(const nlohmann::json& j, PickupAddressDTO& o);
protected:
    std::string m_Country;
    bool m_CountryIsSet;
    std::string m_City;
    bool m_CityIsSet;
    std::string m_Street;
    bool m_StreetIsSet;
    std::string m_House;
    bool m_HouseIsSet;
    std::string m_Postcode;
    bool m_PostcodeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* PickupAddressDTO_H_ */
