/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AddHiddenOffersRequest.h
 *
 * Запрос на скрытие оферов.
 */

#ifndef AddHiddenOffersRequest_H_
#define AddHiddenOffersRequest_H_



#include "HiddenOfferDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Запрос на скрытие оферов.
/// </summary>
class  AddHiddenOffersRequest 
{
public:
    AddHiddenOffersRequest() = default;
    explicit AddHiddenOffersRequest(boost::property_tree::ptree const& pt);
    virtual ~AddHiddenOffersRequest() = default;

    AddHiddenOffersRequest(const AddHiddenOffersRequest& other) = default; // copy constructor
    AddHiddenOffersRequest(AddHiddenOffersRequest&& other) noexcept = default; // move constructor

    AddHiddenOffersRequest& operator=(const AddHiddenOffersRequest& other) = default; // copy assignment
    AddHiddenOffersRequest& operator=(AddHiddenOffersRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AddHiddenOffersRequest members

    /// <summary>
    /// Список скрытых товаров. 
    /// </summary>
    std::vector<HiddenOfferDTO> getHiddenOffers() const;
    void setHiddenOffers(std::vector<HiddenOfferDTO> value);

protected:
    std::vector<HiddenOfferDTO> m_HiddenOffers;
};

std::vector<AddHiddenOffersRequest> createAddHiddenOffersRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AddHiddenOffersRequest>(const AddHiddenOffersRequest& val) {
    return val.toPropertyTree();
}

template<>
inline AddHiddenOffersRequest fromPt<AddHiddenOffersRequest>(const boost::property_tree::ptree& pt) {
    AddHiddenOffersRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AddHiddenOffersRequest_H_ */
