/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrderItemDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrderItemDTO::OrderItemDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string OrderItemDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void OrderItemDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree OrderItemDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void OrderItemDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string OrderItemDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void OrderItemDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OrderItemDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("offerId", m_OfferId);
	pt.put("offerName", m_OfferName);
	pt.put("price", m_Price);
	pt.put("buyerPrice", m_BuyerPrice);
	pt.put("buyerPriceBeforeDiscount", m_BuyerPriceBeforeDiscount);
	pt.put("priceBeforeDiscount", m_PriceBeforeDiscount);
	pt.put("count", m_Count);
	pt.put("shopSku", m_ShopSku);
	pt.put("subsidy", m_Subsidy);
	pt.put("partnerWarehouseId", m_PartnerWarehouseId);
	// generate tree for Promos
	if (!m_Promos.empty()) {
		for (const auto &childEntry : m_Promos) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("promos", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Instances
	if (!m_Instances.empty()) {
		for (const auto &childEntry : m_Instances) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("instances", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Details
	if (!m_Details.empty()) {
		for (const auto &childEntry : m_Details) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("details", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Subsidies
	if (!m_Subsidies.empty()) {
		for (const auto &childEntry : m_Subsidies) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("subsidies", tmp_node);
		tmp_node.clear();
	}
	// generate tree for RequiredInstanceTypes
	if (!m_RequiredInstanceTypes.empty()) {
		for (const auto &childEntry : m_RequiredInstanceTypes) {
            ptree RequiredInstanceTypes_node;
            RequiredInstanceTypes_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", RequiredInstanceTypes_node));
		}
		pt.add_child("requiredInstanceTypes", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void OrderItemDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", 0L);
	m_OfferId = pt.get("offerId", "");
	m_OfferName = pt.get("offerName", "");
	m_Price = pt.get("price", 0.0);
	m_BuyerPrice = pt.get("buyerPrice", 0.0);
	m_BuyerPriceBeforeDiscount = pt.get("buyerPriceBeforeDiscount", 0.0);
	m_PriceBeforeDiscount = pt.get("priceBeforeDiscount", 0.0);
	m_Count = pt.get("count", 0);
	m_ShopSku = pt.get("shopSku", "");
	m_Subsidy = pt.get("subsidy", 0.0);
	m_PartnerWarehouseId = pt.get("partnerWarehouseId", "");
	// push all items of Promos into member vector
	if (pt.get_child_optional("promos")) {
		for (const auto &childTree : pt.get_child("promos")) {
            std::shared_ptr<OrderItemPromoDTO> val =
                std::make_shared<OrderItemPromoDTO>(childTree.second);
            m_Promos.emplace_back(std::move(val));
		}
	}
	// push all items of Instances into member vector
	if (pt.get_child_optional("instances")) {
		for (const auto &childTree : pt.get_child("instances")) {
            std::shared_ptr<OrderItemInstanceDTO> val =
                std::make_shared<OrderItemInstanceDTO>(childTree.second);
            m_Instances.emplace_back(std::move(val));
		}
	}
	// push all items of Details into member vector
	if (pt.get_child_optional("details")) {
		for (const auto &childTree : pt.get_child("details")) {
            std::shared_ptr<OrderItemDetailDTO> val =
                std::make_shared<OrderItemDetailDTO>(childTree.second);
            m_Details.emplace_back(std::move(val));
		}
	}
	// push all items of Subsidies into member vector
	if (pt.get_child_optional("subsidies")) {
		for (const auto &childTree : pt.get_child("subsidies")) {
            std::shared_ptr<OrderItemSubsidyDTO> val =
                std::make_shared<OrderItemSubsidyDTO>(childTree.second);
            m_Subsidies.emplace_back(std::move(val));
		}
	}
	// push all items of RequiredInstanceTypes into member vector
	if (pt.get_child_optional("requiredInstanceTypes")) {
		for (const auto &childTree : pt.get_child("requiredInstanceTypes")) {
            std::shared_ptr<OrderItemInstanceType> val =
            m_RequiredInstanceTypes.emplace_back(std::move(val));
		}
	}
}

int64_t OrderItemDTO::getId() const
{
    return m_Id;
}

void OrderItemDTO::setId(int64_t value)
{
	m_Id = value;
}
std::string OrderItemDTO::getOfferId() const
{
    return m_OfferId;
}

void OrderItemDTO::setOfferId(std::string value)
{
	m_OfferId = value;
}
std::string OrderItemDTO::getOfferName() const
{
    return m_OfferName;
}

void OrderItemDTO::setOfferName(std::string value)
{
	m_OfferName = value;
}
double OrderItemDTO::getPrice() const
{
    return m_Price;
}

void OrderItemDTO::setPrice(double value)
{
	m_Price = value;
}
double OrderItemDTO::getBuyerPrice() const
{
    return m_BuyerPrice;
}

void OrderItemDTO::setBuyerPrice(double value)
{
	m_BuyerPrice = value;
}
double OrderItemDTO::getBuyerPriceBeforeDiscount() const
{
    return m_BuyerPriceBeforeDiscount;
}

void OrderItemDTO::setBuyerPriceBeforeDiscount(double value)
{
	m_BuyerPriceBeforeDiscount = value;
}
double OrderItemDTO::getPriceBeforeDiscount() const
{
    return m_PriceBeforeDiscount;
}

void OrderItemDTO::setPriceBeforeDiscount(double value)
{
	m_PriceBeforeDiscount = value;
}
int32_t OrderItemDTO::getCount() const
{
    return m_Count;
}

void OrderItemDTO::setCount(int32_t value)
{
	m_Count = value;
}
std::shared_ptr<OrderVatType> OrderItemDTO::getVat() const
{
    return m_Vat;
}

void OrderItemDTO::setVat(std::shared_ptr<OrderVatType> value)
{
	m_Vat = value;
}
std::string OrderItemDTO::getShopSku() const
{
    return m_ShopSku;
}

void OrderItemDTO::setShopSku(std::string value)
{
	m_ShopSku = value;
}
double OrderItemDTO::getSubsidy() const
{
    return m_Subsidy;
}

void OrderItemDTO::setSubsidy(double value)
{
	m_Subsidy = value;
}
std::string OrderItemDTO::getPartnerWarehouseId() const
{
    return m_PartnerWarehouseId;
}

void OrderItemDTO::setPartnerWarehouseId(std::string value)
{
	m_PartnerWarehouseId = value;
}
std::vector<std::shared_ptr<OrderItemPromoDTO>> OrderItemDTO::getPromos() const
{
    return m_Promos;
}

void OrderItemDTO::setPromos(std::vector<std::shared_ptr<OrderItemPromoDTO>> value)
{
	m_Promos = value;
}
std::vector<std::shared_ptr<OrderItemInstanceDTO>> OrderItemDTO::getInstances() const
{
    return m_Instances;
}

void OrderItemDTO::setInstances(std::vector<std::shared_ptr<OrderItemInstanceDTO>> value)
{
	m_Instances = value;
}
std::vector<std::shared_ptr<OrderItemDetailDTO>> OrderItemDTO::getDetails() const
{
    return m_Details;
}

void OrderItemDTO::setDetails(std::vector<std::shared_ptr<OrderItemDetailDTO>> value)
{
	m_Details = value;
}
std::vector<std::shared_ptr<OrderItemSubsidyDTO>> OrderItemDTO::getSubsidies() const
{
    return m_Subsidies;
}

void OrderItemDTO::setSubsidies(std::vector<std::shared_ptr<OrderItemSubsidyDTO>> value)
{
	m_Subsidies = value;
}
std::vector<std::shared_ptr<OrderItemInstanceType>> OrderItemDTO::getRequiredInstanceTypes() const
{
    return m_RequiredInstanceTypes;
}

void OrderItemDTO::setRequiredInstanceTypes(std::vector<std::shared_ptr<OrderItemInstanceType>> value)
{
	m_RequiredInstanceTypes = value;
}

std::vector<OrderItemDTO> createOrderItemDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OrderItemDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OrderItemDTO(child.second));
    }

    return vec;
}

}
}
}
}

