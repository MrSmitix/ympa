/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderItemDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderItemDTO::OrderItemDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_OfferId = "";
    m_OfferIdIsSet = false;
    m_OfferName = "";
    m_OfferNameIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_BuyerPrice = 0.0;
    m_BuyerPriceIsSet = false;
    m_BuyerPriceBeforeDiscount = 0.0;
    m_BuyerPriceBeforeDiscountIsSet = false;
    m_PriceBeforeDiscount = 0.0;
    m_PriceBeforeDiscountIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_VatIsSet = false;
    m_ShopSku = "";
    m_ShopSkuIsSet = false;
    m_Subsidy = 0.0;
    m_SubsidyIsSet = false;
    m_PartnerWarehouseId = "";
    m_PartnerWarehouseIdIsSet = false;
    m_PromosIsSet = false;
    m_InstancesIsSet = false;
    m_DetailsIsSet = false;
    m_SubsidiesIsSet = false;
    m_RequiredInstanceTypesIsSet = false;
    
}

void OrderItemDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderItemDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderItemDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderItemDTO" : pathPrefix;

             
    if (offerIdIsSet())
    {
        const std::string& value = m_OfferId;
        const std::string currentValuePath = _pathPrefix + ".offerId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
                                     
    if (shopSkuIsSet())
    {
        const std::string& value = m_ShopSku;
        const std::string currentValuePath = _pathPrefix + ".shopSku";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
                 
    if (promosIsSet())
    {
        const std::vector<org::openapitools::server::model::OrderItemPromoDTO>& value = m_Promos;
        const std::string currentValuePath = _pathPrefix + ".promos";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderItemPromoDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".promos") && success;
 
                i++;
            }
        }

    }
         
    if (instancesIsSet())
    {
        const std::vector<org::openapitools::server::model::OrderItemInstanceDTO>& value = m_Instances;
        const std::string currentValuePath = _pathPrefix + ".instances";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderItemInstanceDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".instances") && success;
 
                i++;
            }
        }

    }
         
    if (detailsIsSet())
    {
        const std::vector<org::openapitools::server::model::OrderItemDetailDTO>& value = m_Details;
        const std::string currentValuePath = _pathPrefix + ".details";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderItemDetailDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".details") && success;
 
                i++;
            }
        }

    }
         
    if (subsidiesIsSet())
    {
        const std::vector<org::openapitools::server::model::OrderItemSubsidyDTO>& value = m_Subsidies;
        const std::string currentValuePath = _pathPrefix + ".subsidies";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderItemSubsidyDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".subsidies") && success;
 
                i++;
            }
        }

    }
         
    if (requiredInstanceTypesIsSet())
    {
        const std::vector<org::openapitools::server::model::OrderItemInstanceType>& value = m_RequiredInstanceTypes;
        const std::string currentValuePath = _pathPrefix + ".requiredInstanceTypes";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderItemInstanceType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool OrderItemDTO::operator==(const OrderItemDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!offerIdIsSet() && !rhs.offerIdIsSet()) || (offerIdIsSet() && rhs.offerIdIsSet() && getOfferId() == rhs.getOfferId())) &&
    
    
    ((!offerNameIsSet() && !rhs.offerNameIsSet()) || (offerNameIsSet() && rhs.offerNameIsSet() && getOfferName() == rhs.getOfferName())) &&
    
    
    ((!priceIsSet() && !rhs.priceIsSet()) || (priceIsSet() && rhs.priceIsSet() && getPrice() == rhs.getPrice())) &&
    
    
    ((!buyerPriceIsSet() && !rhs.buyerPriceIsSet()) || (buyerPriceIsSet() && rhs.buyerPriceIsSet() && getBuyerPrice() == rhs.getBuyerPrice())) &&
    
    
    ((!buyerPriceBeforeDiscountIsSet() && !rhs.buyerPriceBeforeDiscountIsSet()) || (buyerPriceBeforeDiscountIsSet() && rhs.buyerPriceBeforeDiscountIsSet() && getBuyerPriceBeforeDiscount() == rhs.getBuyerPriceBeforeDiscount())) &&
    
    
    ((!priceBeforeDiscountIsSet() && !rhs.priceBeforeDiscountIsSet()) || (priceBeforeDiscountIsSet() && rhs.priceBeforeDiscountIsSet() && getPriceBeforeDiscount() == rhs.getPriceBeforeDiscount())) &&
    
    
    ((!countIsSet() && !rhs.countIsSet()) || (countIsSet() && rhs.countIsSet() && getCount() == rhs.getCount())) &&
    
    
    ((!vatIsSet() && !rhs.vatIsSet()) || (vatIsSet() && rhs.vatIsSet() && getVat() == rhs.getVat())) &&
    
    
    ((!shopSkuIsSet() && !rhs.shopSkuIsSet()) || (shopSkuIsSet() && rhs.shopSkuIsSet() && getShopSku() == rhs.getShopSku())) &&
    
    
    ((!subsidyIsSet() && !rhs.subsidyIsSet()) || (subsidyIsSet() && rhs.subsidyIsSet() && getSubsidy() == rhs.getSubsidy())) &&
    
    
    ((!partnerWarehouseIdIsSet() && !rhs.partnerWarehouseIdIsSet()) || (partnerWarehouseIdIsSet() && rhs.partnerWarehouseIdIsSet() && getPartnerWarehouseId() == rhs.getPartnerWarehouseId())) &&
    
    
    ((!promosIsSet() && !rhs.promosIsSet()) || (promosIsSet() && rhs.promosIsSet() && getPromos() == rhs.getPromos())) &&
    
    
    ((!instancesIsSet() && !rhs.instancesIsSet()) || (instancesIsSet() && rhs.instancesIsSet() && getInstances() == rhs.getInstances())) &&
    
    
    ((!detailsIsSet() && !rhs.detailsIsSet()) || (detailsIsSet() && rhs.detailsIsSet() && getDetails() == rhs.getDetails())) &&
    
    
    ((!subsidiesIsSet() && !rhs.subsidiesIsSet()) || (subsidiesIsSet() && rhs.subsidiesIsSet() && getSubsidies() == rhs.getSubsidies())) &&
    
    
    ((!requiredInstanceTypesIsSet() && !rhs.requiredInstanceTypesIsSet()) || (requiredInstanceTypesIsSet() && rhs.requiredInstanceTypesIsSet() && getRequiredInstanceTypes() == rhs.getRequiredInstanceTypes()))
    
    ;
}

bool OrderItemDTO::operator!=(const OrderItemDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderItemDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.offerIdIsSet())
        j["offerId"] = o.m_OfferId;
    if(o.offerNameIsSet())
        j["offerName"] = o.m_OfferName;
    if(o.priceIsSet())
        j["price"] = o.m_Price;
    if(o.buyerPriceIsSet())
        j["buyerPrice"] = o.m_BuyerPrice;
    if(o.buyerPriceBeforeDiscountIsSet())
        j["buyerPriceBeforeDiscount"] = o.m_BuyerPriceBeforeDiscount;
    if(o.priceBeforeDiscountIsSet())
        j["priceBeforeDiscount"] = o.m_PriceBeforeDiscount;
    if(o.countIsSet())
        j["count"] = o.m_Count;
    if(o.vatIsSet())
        j["vat"] = o.m_Vat;
    if(o.shopSkuIsSet())
        j["shopSku"] = o.m_ShopSku;
    if(o.subsidyIsSet())
        j["subsidy"] = o.m_Subsidy;
    if(o.partnerWarehouseIdIsSet())
        j["partnerWarehouseId"] = o.m_PartnerWarehouseId;
    if(o.promosIsSet() || !o.m_Promos.empty())
        j["promos"] = o.m_Promos;
    if(o.instancesIsSet() || !o.m_Instances.empty())
        j["instances"] = o.m_Instances;
    if(o.detailsIsSet() || !o.m_Details.empty())
        j["details"] = o.m_Details;
    if(o.subsidiesIsSet() || !o.m_Subsidies.empty())
        j["subsidies"] = o.m_Subsidies;
    if(o.requiredInstanceTypesIsSet() || !o.m_RequiredInstanceTypes.empty())
        j["requiredInstanceTypes"] = o.m_RequiredInstanceTypes;
    
}

void from_json(const nlohmann::json& j, OrderItemDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("offerId") != j.end())
    {
        j.at("offerId").get_to(o.m_OfferId);
        o.m_OfferIdIsSet = true;
    } 
    if(j.find("offerName") != j.end())
    {
        j.at("offerName").get_to(o.m_OfferName);
        o.m_OfferNameIsSet = true;
    } 
    if(j.find("price") != j.end())
    {
        j.at("price").get_to(o.m_Price);
        o.m_PriceIsSet = true;
    } 
    if(j.find("buyerPrice") != j.end())
    {
        j.at("buyerPrice").get_to(o.m_BuyerPrice);
        o.m_BuyerPriceIsSet = true;
    } 
    if(j.find("buyerPriceBeforeDiscount") != j.end())
    {
        j.at("buyerPriceBeforeDiscount").get_to(o.m_BuyerPriceBeforeDiscount);
        o.m_BuyerPriceBeforeDiscountIsSet = true;
    } 
    if(j.find("priceBeforeDiscount") != j.end())
    {
        j.at("priceBeforeDiscount").get_to(o.m_PriceBeforeDiscount);
        o.m_PriceBeforeDiscountIsSet = true;
    } 
    if(j.find("count") != j.end())
    {
        j.at("count").get_to(o.m_Count);
        o.m_CountIsSet = true;
    } 
    if(j.find("vat") != j.end())
    {
        j.at("vat").get_to(o.m_Vat);
        o.m_VatIsSet = true;
    } 
    if(j.find("shopSku") != j.end())
    {
        j.at("shopSku").get_to(o.m_ShopSku);
        o.m_ShopSkuIsSet = true;
    } 
    if(j.find("subsidy") != j.end())
    {
        j.at("subsidy").get_to(o.m_Subsidy);
        o.m_SubsidyIsSet = true;
    } 
    if(j.find("partnerWarehouseId") != j.end())
    {
        j.at("partnerWarehouseId").get_to(o.m_PartnerWarehouseId);
        o.m_PartnerWarehouseIdIsSet = true;
    } 
    if(j.find("promos") != j.end())
    {
        j.at("promos").get_to(o.m_Promos);
        o.m_PromosIsSet = true;
    } 
    if(j.find("instances") != j.end())
    {
        j.at("instances").get_to(o.m_Instances);
        o.m_InstancesIsSet = true;
    } 
    if(j.find("details") != j.end())
    {
        j.at("details").get_to(o.m_Details);
        o.m_DetailsIsSet = true;
    } 
    if(j.find("subsidies") != j.end())
    {
        j.at("subsidies").get_to(o.m_Subsidies);
        o.m_SubsidiesIsSet = true;
    } 
    if(j.find("requiredInstanceTypes") != j.end())
    {
        j.at("requiredInstanceTypes").get_to(o.m_RequiredInstanceTypes);
        o.m_RequiredInstanceTypesIsSet = true;
    } 
    
}

int64_t OrderItemDTO::getId() const
{
    return m_Id;
}
void OrderItemDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool OrderItemDTO::idIsSet() const
{
    return m_IdIsSet;
}
void OrderItemDTO::unsetId()
{
    m_IdIsSet = false;
}
std::string OrderItemDTO::getOfferId() const
{
    return m_OfferId;
}
void OrderItemDTO::setOfferId(std::string const& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}
bool OrderItemDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}
void OrderItemDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
std::string OrderItemDTO::getOfferName() const
{
    return m_OfferName;
}
void OrderItemDTO::setOfferName(std::string const& value)
{
    m_OfferName = value;
    m_OfferNameIsSet = true;
}
bool OrderItemDTO::offerNameIsSet() const
{
    return m_OfferNameIsSet;
}
void OrderItemDTO::unsetOfferName()
{
    m_OfferNameIsSet = false;
}
double OrderItemDTO::getPrice() const
{
    return m_Price;
}
void OrderItemDTO::setPrice(double const value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool OrderItemDTO::priceIsSet() const
{
    return m_PriceIsSet;
}
void OrderItemDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
double OrderItemDTO::getBuyerPrice() const
{
    return m_BuyerPrice;
}
void OrderItemDTO::setBuyerPrice(double const value)
{
    m_BuyerPrice = value;
    m_BuyerPriceIsSet = true;
}
bool OrderItemDTO::buyerPriceIsSet() const
{
    return m_BuyerPriceIsSet;
}
void OrderItemDTO::unsetBuyerPrice()
{
    m_BuyerPriceIsSet = false;
}
double OrderItemDTO::getBuyerPriceBeforeDiscount() const
{
    return m_BuyerPriceBeforeDiscount;
}
void OrderItemDTO::setBuyerPriceBeforeDiscount(double const value)
{
    m_BuyerPriceBeforeDiscount = value;
    m_BuyerPriceBeforeDiscountIsSet = true;
}
bool OrderItemDTO::buyerPriceBeforeDiscountIsSet() const
{
    return m_BuyerPriceBeforeDiscountIsSet;
}
void OrderItemDTO::unsetBuyerPriceBeforeDiscount()
{
    m_BuyerPriceBeforeDiscountIsSet = false;
}
double OrderItemDTO::getPriceBeforeDiscount() const
{
    return m_PriceBeforeDiscount;
}
void OrderItemDTO::setPriceBeforeDiscount(double const value)
{
    m_PriceBeforeDiscount = value;
    m_PriceBeforeDiscountIsSet = true;
}
bool OrderItemDTO::priceBeforeDiscountIsSet() const
{
    return m_PriceBeforeDiscountIsSet;
}
void OrderItemDTO::unsetPriceBeforeDiscount()
{
    m_PriceBeforeDiscountIsSet = false;
}
int32_t OrderItemDTO::getCount() const
{
    return m_Count;
}
void OrderItemDTO::setCount(int32_t const value)
{
    m_Count = value;
    m_CountIsSet = true;
}
bool OrderItemDTO::countIsSet() const
{
    return m_CountIsSet;
}
void OrderItemDTO::unsetCount()
{
    m_CountIsSet = false;
}
org::openapitools::server::model::OrderVatType OrderItemDTO::getVat() const
{
    return m_Vat;
}
void OrderItemDTO::setVat(org::openapitools::server::model::OrderVatType const& value)
{
    m_Vat = value;
    m_VatIsSet = true;
}
bool OrderItemDTO::vatIsSet() const
{
    return m_VatIsSet;
}
void OrderItemDTO::unsetVat()
{
    m_VatIsSet = false;
}
std::string OrderItemDTO::getShopSku() const
{
    return m_ShopSku;
}
void OrderItemDTO::setShopSku(std::string const& value)
{
    m_ShopSku = value;
    m_ShopSkuIsSet = true;
}
bool OrderItemDTO::shopSkuIsSet() const
{
    return m_ShopSkuIsSet;
}
void OrderItemDTO::unsetShopSku()
{
    m_ShopSkuIsSet = false;
}
double OrderItemDTO::getSubsidy() const
{
    return m_Subsidy;
}
void OrderItemDTO::setSubsidy(double const value)
{
    m_Subsidy = value;
    m_SubsidyIsSet = true;
}
bool OrderItemDTO::subsidyIsSet() const
{
    return m_SubsidyIsSet;
}
void OrderItemDTO::unsetSubsidy()
{
    m_SubsidyIsSet = false;
}
std::string OrderItemDTO::getPartnerWarehouseId() const
{
    return m_PartnerWarehouseId;
}
void OrderItemDTO::setPartnerWarehouseId(std::string const& value)
{
    m_PartnerWarehouseId = value;
    m_PartnerWarehouseIdIsSet = true;
}
bool OrderItemDTO::partnerWarehouseIdIsSet() const
{
    return m_PartnerWarehouseIdIsSet;
}
void OrderItemDTO::unsetPartnerWarehouseId()
{
    m_PartnerWarehouseIdIsSet = false;
}
std::vector<org::openapitools::server::model::OrderItemPromoDTO> OrderItemDTO::getPromos() const
{
    return m_Promos;
}
void OrderItemDTO::setPromos(std::vector<org::openapitools::server::model::OrderItemPromoDTO> const& value)
{
    m_Promos = value;
    m_PromosIsSet = true;
}
bool OrderItemDTO::promosIsSet() const
{
    return m_PromosIsSet;
}
void OrderItemDTO::unsetPromos()
{
    m_PromosIsSet = false;
}
std::vector<org::openapitools::server::model::OrderItemInstanceDTO> OrderItemDTO::getInstances() const
{
    return m_Instances;
}
void OrderItemDTO::setInstances(std::vector<org::openapitools::server::model::OrderItemInstanceDTO> const& value)
{
    m_Instances = value;
    m_InstancesIsSet = true;
}
bool OrderItemDTO::instancesIsSet() const
{
    return m_InstancesIsSet;
}
void OrderItemDTO::unsetInstances()
{
    m_InstancesIsSet = false;
}
std::vector<org::openapitools::server::model::OrderItemDetailDTO> OrderItemDTO::getDetails() const
{
    return m_Details;
}
void OrderItemDTO::setDetails(std::vector<org::openapitools::server::model::OrderItemDetailDTO> const& value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool OrderItemDTO::detailsIsSet() const
{
    return m_DetailsIsSet;
}
void OrderItemDTO::unsetDetails()
{
    m_DetailsIsSet = false;
}
std::vector<org::openapitools::server::model::OrderItemSubsidyDTO> OrderItemDTO::getSubsidies() const
{
    return m_Subsidies;
}
void OrderItemDTO::setSubsidies(std::vector<org::openapitools::server::model::OrderItemSubsidyDTO> const& value)
{
    m_Subsidies = value;
    m_SubsidiesIsSet = true;
}
bool OrderItemDTO::subsidiesIsSet() const
{
    return m_SubsidiesIsSet;
}
void OrderItemDTO::unsetSubsidies()
{
    m_SubsidiesIsSet = false;
}
std::vector<org::openapitools::server::model::OrderItemInstanceType> OrderItemDTO::getRequiredInstanceTypes() const
{
    return m_RequiredInstanceTypes;
}
void OrderItemDTO::setRequiredInstanceTypes(std::vector<org::openapitools::server::model::OrderItemInstanceType> const& value)
{
    m_RequiredInstanceTypes = value;
    m_RequiredInstanceTypesIsSet = true;
}
bool OrderItemDTO::requiredInstanceTypesIsSet() const
{
    return m_RequiredInstanceTypesIsSet;
}
void OrderItemDTO::unsetRequiredInstanceTypes()
{
    m_RequiredInstanceTypesIsSet = false;
}


} // namespace org::openapitools::server::model

