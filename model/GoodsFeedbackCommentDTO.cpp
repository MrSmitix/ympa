/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GoodsFeedbackCommentDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GoodsFeedbackCommentDTO::GoodsFeedbackCommentDTO()
{
    m_Id = 0L;
    m_Text = "";
    m_CanModify = false;
    m_CanModifyIsSet = false;
    m_ParentId = 0L;
    m_ParentIdIsSet = false;
    
}

void GoodsFeedbackCommentDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GoodsFeedbackCommentDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GoodsFeedbackCommentDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GoodsFeedbackCommentDTO" : pathPrefix;

             
    
    /* Text */ {
        const std::string& value = m_Text;
        const std::string currentValuePath = _pathPrefix + ".text";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 4096)
        {
            success = false;
            msg << currentValuePath << ": must be at most 4096 characters long;";
        }

    }
                
    if (!m_Author.validate(msg, _pathPrefix + ".author")) {
        msg << _pathPrefix << ": Author is invalid;";
        success = false;
    }    
    return success;
}

bool GoodsFeedbackCommentDTO::operator==(const GoodsFeedbackCommentDTO& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getText() == rhs.getText())
     &&
    
    
    ((!canModifyIsSet() && !rhs.canModifyIsSet()) || (canModifyIsSet() && rhs.canModifyIsSet() && isCanModify() == rhs.isCanModify())) &&
    
    
    ((!parentIdIsSet() && !rhs.parentIdIsSet()) || (parentIdIsSet() && rhs.parentIdIsSet() && getParentId() == rhs.getParentId())) &&
    
    (getAuthor() == rhs.getAuthor())
     &&
    
    (getStatus() == rhs.getStatus())
    
    
    ;
}

bool GoodsFeedbackCommentDTO::operator!=(const GoodsFeedbackCommentDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GoodsFeedbackCommentDTO& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    j["text"] = o.m_Text;
    if(o.canModifyIsSet())
        j["canModify"] = o.m_CanModify;
    if(o.parentIdIsSet())
        j["parentId"] = o.m_ParentId;
    j["author"] = o.m_Author;
    j["status"] = o.m_Status;
    
}

void from_json(const nlohmann::json& j, GoodsFeedbackCommentDTO& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("text").get_to(o.m_Text);
    if(j.find("canModify") != j.end())
    {
        j.at("canModify").get_to(o.m_CanModify);
        o.m_CanModifyIsSet = true;
    } 
    if(j.find("parentId") != j.end())
    {
        j.at("parentId").get_to(o.m_ParentId);
        o.m_ParentIdIsSet = true;
    } 
    j.at("author").get_to(o.m_Author);
    j.at("status").get_to(o.m_Status);
    
}

int64_t GoodsFeedbackCommentDTO::getId() const
{
    return m_Id;
}
void GoodsFeedbackCommentDTO::setId(int64_t const value)
{
    m_Id = value;
}
std::string GoodsFeedbackCommentDTO::getText() const
{
    return m_Text;
}
void GoodsFeedbackCommentDTO::setText(std::string const& value)
{
    m_Text = value;
}
bool GoodsFeedbackCommentDTO::isCanModify() const
{
    return m_CanModify;
}
void GoodsFeedbackCommentDTO::setCanModify(bool const value)
{
    m_CanModify = value;
    m_CanModifyIsSet = true;
}
bool GoodsFeedbackCommentDTO::canModifyIsSet() const
{
    return m_CanModifyIsSet;
}
void GoodsFeedbackCommentDTO::unsetCanModify()
{
    m_CanModifyIsSet = false;
}
int64_t GoodsFeedbackCommentDTO::getParentId() const
{
    return m_ParentId;
}
void GoodsFeedbackCommentDTO::setParentId(int64_t const value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}
bool GoodsFeedbackCommentDTO::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}
void GoodsFeedbackCommentDTO::unsetParentId()
{
    m_ParentIdIsSet = false;
}
org::openapitools::server::model::GoodsFeedbackCommentAuthorDTO GoodsFeedbackCommentDTO::getAuthor() const
{
    return m_Author;
}
void GoodsFeedbackCommentDTO::setAuthor(org::openapitools::server::model::GoodsFeedbackCommentAuthorDTO const& value)
{
    m_Author = value;
}
org::openapitools::server::model::GoodsFeedbackCommentStatusType GoodsFeedbackCommentDTO::getStatus() const
{
    return m_Status;
}
void GoodsFeedbackCommentDTO::setStatus(org::openapitools::server::model::GoodsFeedbackCommentStatusType const& value)
{
    m_Status = value;
}


} // namespace org::openapitools::server::model

