/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderBoxLayoutItemDTO.h
 *
 * Информация о товаре в коробке.
 */

#ifndef OrderBoxLayoutItemDTO_H_
#define OrderBoxLayoutItemDTO_H_



#include "BriefOrderItemInstanceDTO.h"
#include <vector>
#include "OrderBoxLayoutPartialCountDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о товаре в коробке.
/// </summary>
class  OrderBoxLayoutItemDTO 
{
public:
    OrderBoxLayoutItemDTO() = default;
    explicit OrderBoxLayoutItemDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderBoxLayoutItemDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// OrderBoxLayoutItemDTO members

    /// <summary>
    /// Идентификатор товара в заказе.  {% cut \&quot;Где его взять\&quot; %}  Идентификатор приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр &#x60;id&#x60; в &#x60;items&#x60;.  {% endcut %}   
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Количество единиц товара в коробке.  Используйте это поле, если в коробке поедут целые товары, не разделенные на части. Не используйте это поле одновременно с &#x60;partialCount&#x60;. 
    /// </summary>
    int32_t getFullCount() const;
    void setFullCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderBoxLayoutPartialCountDTO> getPartialCount() const;
    void setPartialCount(std::shared_ptr<OrderBoxLayoutPartialCountDTO> value);

    /// <summary>
    /// Переданные вами коды маркировки.
    /// </summary>
    std::vector<std::shared_ptr<BriefOrderItemInstanceDTO>> getInstances() const;
    void setInstances(std::vector<std::shared_ptr<BriefOrderItemInstanceDTO>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_Id = 0L;
    int32_t m_FullCount = 0;
    std::shared_ptr<OrderBoxLayoutPartialCountDTO> m_PartialCount;
    std::vector<std::shared_ptr<BriefOrderItemInstanceDTO>> m_Instances;
};

std::vector<OrderBoxLayoutItemDTO> createOrderBoxLayoutItemDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* OrderBoxLayoutItemDTO_H_ */
