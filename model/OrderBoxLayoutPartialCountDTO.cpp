/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderBoxLayoutPartialCountDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderBoxLayoutPartialCountDTO::OrderBoxLayoutPartialCountDTO()
{
    m_Current = 0;
    m_Total = 0;
    
}

void OrderBoxLayoutPartialCountDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderBoxLayoutPartialCountDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderBoxLayoutPartialCountDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderBoxLayoutPartialCountDTO" : pathPrefix;

         
    
    /* Current */ {
        const int32_t& value = m_Current;
        const std::string currentValuePath = _pathPrefix + ".current";
                
        
        if (value < 1)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }

    }
         
    
    /* Total */ {
        const int32_t& value = m_Total;
        const std::string currentValuePath = _pathPrefix + ".total";
                
        
        if (value < 2)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 2;";
        }

    }
    
    return success;
}

bool OrderBoxLayoutPartialCountDTO::operator==(const OrderBoxLayoutPartialCountDTO& rhs) const
{
    return
    
    
    (getCurrent() == rhs.getCurrent())
     &&
    
    (getTotal() == rhs.getTotal())
    
    
    ;
}

bool OrderBoxLayoutPartialCountDTO::operator!=(const OrderBoxLayoutPartialCountDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderBoxLayoutPartialCountDTO& o)
{
    j = nlohmann::json::object();
    j["current"] = o.m_Current;
    j["total"] = o.m_Total;
    
}

void from_json(const nlohmann::json& j, OrderBoxLayoutPartialCountDTO& o)
{
    j.at("current").get_to(o.m_Current);
    j.at("total").get_to(o.m_Total);
    
}

int32_t OrderBoxLayoutPartialCountDTO::getCurrent() const
{
    return m_Current;
}
void OrderBoxLayoutPartialCountDTO::setCurrent(int32_t const value)
{
    m_Current = value;
}
int32_t OrderBoxLayoutPartialCountDTO::getTotal() const
{
    return m_Total;
}
void OrderBoxLayoutPartialCountDTO::setTotal(int32_t const value)
{
    m_Total = value;
}


} // namespace org::openapitools::server::model

