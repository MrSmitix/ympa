/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedPublicationFullDTO.h
 *
 * Информация о последней публикации предложений из прайс-листа на Маркете. 
 */

#ifndef FeedPublicationFullDTO_H_
#define FeedPublicationFullDTO_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о последней публикации предложений из прайс-листа на Маркете. 
/// </summary>
class  FeedPublicationFullDTO 
{
public:
    FeedPublicationFullDTO() = default;
    explicit FeedPublicationFullDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedPublicationFullDTO() = default;

    FeedPublicationFullDTO(const FeedPublicationFullDTO& other) = default; // copy constructor
    FeedPublicationFullDTO(FeedPublicationFullDTO&& other) noexcept = default; // move constructor

    FeedPublicationFullDTO& operator=(const FeedPublicationFullDTO& other) = default; // copy assignment
    FeedPublicationFullDTO& operator=(FeedPublicationFullDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FeedPublicationFullDTO members

    /// <summary>
    /// Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    std::string getFileTime() const;
    void setFileTime(std::string value);

    /// <summary>
    /// Дата и время публикации предложений из прайс-листа на Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    std::string getPublishedTime() const;
    void setPublishedTime(std::string value);

protected:
    std::string m_FileTime = "";
    std::string m_PublishedTime = "";
};

std::vector<FeedPublicationFullDTO> createFeedPublicationFullDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FeedPublicationFullDTO>(const FeedPublicationFullDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FeedPublicationFullDTO fromPt<FeedPublicationFullDTO>(const boost::property_tree::ptree& pt) {
    FeedPublicationFullDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FeedPublicationFullDTO_H_ */
