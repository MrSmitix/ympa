/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdatePromoOffersResultDTO.h
 *
 * Ошибки и предупреждения, которые появились при добавлении товаров в акцию.
 */

#ifndef UpdatePromoOffersResultDTO_H_
#define UpdatePromoOffersResultDTO_H_



#include "RejectedPromoOfferUpdateDTO.h"
#include "WarningPromoOfferUpdateDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Ошибки и предупреждения, которые появились при добавлении товаров в акцию.
/// </summary>
class  UpdatePromoOffersResultDTO 
{
public:
    UpdatePromoOffersResultDTO() = default;
    explicit UpdatePromoOffersResultDTO(boost::property_tree::ptree const& pt);
    virtual ~UpdatePromoOffersResultDTO() = default;

    UpdatePromoOffersResultDTO(const UpdatePromoOffersResultDTO& other) = default; // copy constructor
    UpdatePromoOffersResultDTO(UpdatePromoOffersResultDTO&& other) noexcept = default; // move constructor

    UpdatePromoOffersResultDTO& operator=(const UpdatePromoOffersResultDTO& other) = default; // copy assignment
    UpdatePromoOffersResultDTO& operator=(UpdatePromoOffersResultDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UpdatePromoOffersResultDTO members

    /// <summary>
    /// Изменения, которые были отклонены.  Возвращается, только если есть отклоненные изменения. 
    /// </summary>
    std::vector<RejectedPromoOfferUpdateDTO> getRejectedOffers() const;
    void setRejectedOffers(std::vector<RejectedPromoOfferUpdateDTO> value);

    /// <summary>
    /// Изменения, по которым есть предупреждения. Они информируют о возможных проблемах. Информация о товарах обновится.  Возвращается, только если есть предупреждения. 
    /// </summary>
    std::vector<WarningPromoOfferUpdateDTO> getWarningOffers() const;
    void setWarningOffers(std::vector<WarningPromoOfferUpdateDTO> value);

protected:
    std::vector<RejectedPromoOfferUpdateDTO> m_RejectedOffers;
    std::vector<WarningPromoOfferUpdateDTO> m_WarningOffers;
};

std::vector<UpdatePromoOffersResultDTO> createUpdatePromoOffersResultDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UpdatePromoOffersResultDTO>(const UpdatePromoOffersResultDTO& val) {
    return val.toPropertyTree();
}

template<>
inline UpdatePromoOffersResultDTO fromPt<UpdatePromoOffersResultDTO>(const boost::property_tree::ptree& pt) {
    UpdatePromoOffersResultDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UpdatePromoOffersResultDTO_H_ */
