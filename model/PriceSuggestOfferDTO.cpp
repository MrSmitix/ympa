/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PriceSuggestOfferDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PriceSuggestOfferDTO::PriceSuggestOfferDTO()
{
    m_MarketSku = 0L;
    m_MarketSkuIsSet = false;
    m_OfferId = "";
    m_OfferIdIsSet = false;
    m_PriceSuggestionIsSet = false;
    
}

void PriceSuggestOfferDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PriceSuggestOfferDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PriceSuggestOfferDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PriceSuggestOfferDTO" : pathPrefix;

             
    if (offerIdIsSet())
    {
        const std::string& value = m_OfferId;
        const std::string currentValuePath = _pathPrefix + ".offerId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
         
    if (priceSuggestionIsSet())
    {
        const std::vector<org::openapitools::server::model::PriceSuggestDTO>& value = m_PriceSuggestion;
        const std::string currentValuePath = _pathPrefix + ".priceSuggestion";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::PriceSuggestDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".priceSuggestion") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool PriceSuggestOfferDTO::operator==(const PriceSuggestOfferDTO& rhs) const
{
    return
    
    
    
    ((!marketSkuIsSet() && !rhs.marketSkuIsSet()) || (marketSkuIsSet() && rhs.marketSkuIsSet() && getMarketSku() == rhs.getMarketSku())) &&
    
    
    ((!offerIdIsSet() && !rhs.offerIdIsSet()) || (offerIdIsSet() && rhs.offerIdIsSet() && getOfferId() == rhs.getOfferId())) &&
    
    
    ((!priceSuggestionIsSet() && !rhs.priceSuggestionIsSet()) || (priceSuggestionIsSet() && rhs.priceSuggestionIsSet() && getPriceSuggestion() == rhs.getPriceSuggestion()))
    
    ;
}

bool PriceSuggestOfferDTO::operator!=(const PriceSuggestOfferDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PriceSuggestOfferDTO& o)
{
    j = nlohmann::json::object();
    if(o.marketSkuIsSet())
        j["marketSku"] = o.m_MarketSku;
    if(o.offerIdIsSet())
        j["offerId"] = o.m_OfferId;
    if(o.priceSuggestionIsSet() || !o.m_PriceSuggestion.empty())
        j["priceSuggestion"] = o.m_PriceSuggestion;
    
}

void from_json(const nlohmann::json& j, PriceSuggestOfferDTO& o)
{
    if(j.find("marketSku") != j.end())
    {
        j.at("marketSku").get_to(o.m_MarketSku);
        o.m_MarketSkuIsSet = true;
    } 
    if(j.find("offerId") != j.end())
    {
        j.at("offerId").get_to(o.m_OfferId);
        o.m_OfferIdIsSet = true;
    } 
    if(j.find("priceSuggestion") != j.end())
    {
        j.at("priceSuggestion").get_to(o.m_PriceSuggestion);
        o.m_PriceSuggestionIsSet = true;
    } 
    
}

int64_t PriceSuggestOfferDTO::getMarketSku() const
{
    return m_MarketSku;
}
void PriceSuggestOfferDTO::setMarketSku(int64_t const value)
{
    m_MarketSku = value;
    m_MarketSkuIsSet = true;
}
bool PriceSuggestOfferDTO::marketSkuIsSet() const
{
    return m_MarketSkuIsSet;
}
void PriceSuggestOfferDTO::unsetMarketSku()
{
    m_MarketSkuIsSet = false;
}
std::string PriceSuggestOfferDTO::getOfferId() const
{
    return m_OfferId;
}
void PriceSuggestOfferDTO::setOfferId(std::string const& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}
bool PriceSuggestOfferDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}
void PriceSuggestOfferDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
std::vector<org::openapitools::server::model::PriceSuggestDTO> PriceSuggestOfferDTO::getPriceSuggestion() const
{
    return m_PriceSuggestion;
}
void PriceSuggestOfferDTO::setPriceSuggestion(std::vector<org::openapitools::server::model::PriceSuggestDTO> const& value)
{
    m_PriceSuggestion = value;
    m_PriceSuggestionIsSet = true;
}
bool PriceSuggestOfferDTO::priceSuggestionIsSet() const
{
    return m_PriceSuggestionIsSet;
}
void PriceSuggestOfferDTO::unsetPriceSuggestion()
{
    m_PriceSuggestionIsSet = false;
}


} // namespace org::openapitools::server::model

