/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AcceptOrderCancellationRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AcceptOrderCancellationRequest::AcceptOrderCancellationRequest()
{
    m_Accepted = false;
    m_ReasonIsSet = false;
    
}

void AcceptOrderCancellationRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AcceptOrderCancellationRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AcceptOrderCancellationRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AcceptOrderCancellationRequest" : pathPrefix;

            
    return success;
}

bool AcceptOrderCancellationRequest::operator==(const AcceptOrderCancellationRequest& rhs) const
{
    return
    
    
    (isAccepted() == rhs.isAccepted())
     &&
    
    
    ((!reasonIsSet() && !rhs.reasonIsSet()) || (reasonIsSet() && rhs.reasonIsSet() && getReason() == rhs.getReason()))
    
    ;
}

bool AcceptOrderCancellationRequest::operator!=(const AcceptOrderCancellationRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AcceptOrderCancellationRequest& o)
{
    j = nlohmann::json::object();
    j["accepted"] = o.m_Accepted;
    if(o.reasonIsSet())
        j["reason"] = o.m_Reason;
    
}

void from_json(const nlohmann::json& j, AcceptOrderCancellationRequest& o)
{
    j.at("accepted").get_to(o.m_Accepted);
    if(j.find("reason") != j.end())
    {
        j.at("reason").get_to(o.m_Reason);
        o.m_ReasonIsSet = true;
    } 
    
}

bool AcceptOrderCancellationRequest::isAccepted() const
{
    return m_Accepted;
}
void AcceptOrderCancellationRequest::setAccepted(bool const value)
{
    m_Accepted = value;
}
org::openapitools::server::model::OrderCancellationReasonType AcceptOrderCancellationRequest::getReason() const
{
    return m_Reason;
}
void AcceptOrderCancellationRequest::setReason(org::openapitools::server::model::OrderCancellationReasonType const& value)
{
    m_Reason = value;
    m_ReasonIsSet = true;
}
bool AcceptOrderCancellationRequest::reasonIsSet() const
{
    return m_ReasonIsSet;
}
void AcceptOrderCancellationRequest::unsetReason()
{
    m_ReasonIsSet = false;
}


} // namespace org::openapitools::server::model

