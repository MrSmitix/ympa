/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferProcessingNoteDTO.h
 *
 * Причины, по которым товар не прошел модерацию.
 */

#ifndef OfferProcessingNoteDTO_H_
#define OfferProcessingNoteDTO_H_



#include <string>
#include "OfferProcessingNoteType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Причины, по которым товар не прошел модерацию.
/// </summary>
class  OfferProcessingNoteDTO 
{
public:
    OfferProcessingNoteDTO() = default;
    explicit OfferProcessingNoteDTO(boost::property_tree::ptree const& pt);
    virtual ~OfferProcessingNoteDTO() = default;

    OfferProcessingNoteDTO(const OfferProcessingNoteDTO& other) = default; // copy constructor
    OfferProcessingNoteDTO(OfferProcessingNoteDTO&& other) noexcept = default; // move constructor

    OfferProcessingNoteDTO& operator=(const OfferProcessingNoteDTO& other) = default; // copy assignment
    OfferProcessingNoteDTO& operator=(OfferProcessingNoteDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OfferProcessingNoteDTO members

    /// <summary>
    /// 
    /// </summary>
    OfferProcessingNoteType getType() const;
    void setType(OfferProcessingNoteType value);

    /// <summary>
    /// Дополнительная информация о причине отклонения товара. 
    /// </summary>
    std::string getPayload() const;
    void setPayload(std::string value);

protected:
    OfferProcessingNoteType m_Type = OfferProcessingNoteType{};
    std::string m_Payload = "";
};

std::vector<OfferProcessingNoteDTO> createOfferProcessingNoteDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OfferProcessingNoteDTO>(const OfferProcessingNoteDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OfferProcessingNoteDTO fromPt<OfferProcessingNoteDTO>(const boost::property_tree::ptree& pt) {
    OfferProcessingNoteDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OfferProcessingNoteDTO_H_ */
