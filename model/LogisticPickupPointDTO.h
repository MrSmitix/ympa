/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LogisticPickupPointDTO.h
 *
 * Описание пункта вывоза для возврата.
 */

#ifndef LogisticPickupPointDTO_H_
#define LogisticPickupPointDTO_H_



#include <string>
#include "LogisticPointType.h"
#include "PickupAddressDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Описание пункта вывоза для возврата.
/// </summary>
class  LogisticPickupPointDTO 
{
public:
    LogisticPickupPointDTO() = default;
    explicit LogisticPickupPointDTO(boost::property_tree::ptree const& pt);
    virtual ~LogisticPickupPointDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// LogisticPickupPointDTO members

    /// <summary>
    /// Идентификатор пункта вывоза.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Название пункта вывоза.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PickupAddressDTO> getAddress() const;
    void setAddress(std::shared_ptr<PickupAddressDTO> value);

    /// <summary>
    /// Дополнительные инструкции к вывозу.
    /// </summary>
    std::string getInstruction() const;
    void setInstruction(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LogisticPointType> getType() const;
    void setType(std::shared_ptr<LogisticPointType> value);

    /// <summary>
    /// Идентификатор логистического партнера, к которому относится логистическая точка.
    /// </summary>
    int64_t getLogisticPartnerId() const;
    void setLogisticPartnerId(int64_t value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_Id = 0L;
    std::string m_Name = "";
    std::shared_ptr<PickupAddressDTO> m_Address;
    std::string m_Instruction = "";
    std::shared_ptr<LogisticPointType> m_Type = std::make_shared<LogisticPointType>();
    int64_t m_LogisticPartnerId = 0L;
};

std::vector<LogisticPickupPointDTO> createLogisticPickupPointDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* LogisticPickupPointDTO_H_ */
