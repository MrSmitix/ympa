/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LogisticPickupPointDTO.h
 *
 * Описание пункта вывоза для возврата.
 */

#ifndef LogisticPickupPointDTO_H_
#define LogisticPickupPointDTO_H_



#include <string>
#include "LogisticPointType.h"
#include "PickupAddressDTO.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Описание пункта вывоза для возврата.
/// </summary>
class  LogisticPickupPointDTO 
{
public:
    LogisticPickupPointDTO() = default;
    explicit LogisticPickupPointDTO(boost::property_tree::ptree const& pt);
    virtual ~LogisticPickupPointDTO() = default;

    LogisticPickupPointDTO(const LogisticPickupPointDTO& other) = default; // copy constructor
    LogisticPickupPointDTO(LogisticPickupPointDTO&& other) noexcept = default; // move constructor

    LogisticPickupPointDTO& operator=(const LogisticPickupPointDTO& other) = default; // copy assignment
    LogisticPickupPointDTO& operator=(LogisticPickupPointDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// LogisticPickupPointDTO members

    /// <summary>
    /// Идентификатор пункта вывоза.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Название пункта вывоза.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    PickupAddressDTO getAddress() const;
    void setAddress(PickupAddressDTO value);

    /// <summary>
    /// Дополнительные инструкции к вывозу.
    /// </summary>
    std::string getInstruction() const;
    void setInstruction(std::string value);

    /// <summary>
    /// 
    /// </summary>
    LogisticPointType getType() const;
    void setType(LogisticPointType value);

    /// <summary>
    /// Идентификатор логистического партнера, к которому относится логистическая точка.
    /// </summary>
    int64_t getLogisticPartnerId() const;
    void setLogisticPartnerId(int64_t value);

protected:
    int64_t m_Id = 0L;
    std::string m_Name = "";
    PickupAddressDTO m_Address;
    std::string m_Instruction = "";
    LogisticPointType m_Type = LogisticPointType{};
    int64_t m_LogisticPartnerId = 0L;
};

std::vector<LogisticPickupPointDTO> createLogisticPickupPointDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<LogisticPickupPointDTO>(const LogisticPickupPointDTO& val) {
    return val.toPropertyTree();
}

template<>
inline LogisticPickupPointDTO fromPt<LogisticPickupPointDTO>(const boost::property_tree::ptree& pt) {
    LogisticPickupPointDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* LogisticPickupPointDTO_H_ */
