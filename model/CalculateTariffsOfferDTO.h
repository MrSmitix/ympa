/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CalculateTariffsOfferDTO.h
 *
 * Параметры товара, для которого нужно рассчитать стоимость услуг.
 */

#ifndef CalculateTariffsOfferDTO_H_
#define CalculateTariffsOfferDTO_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Параметры товара, для которого нужно рассчитать стоимость услуг.
/// </summary>
class  CalculateTariffsOfferDTO 
{
public:
    CalculateTariffsOfferDTO() = default;
    explicit CalculateTariffsOfferDTO(boost::property_tree::ptree const& pt);
    virtual ~CalculateTariffsOfferDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// CalculateTariffsOfferDTO members

    /// <summary>
    /// Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
    /// </summary>
    int64_t getCategoryId() const;
    void setCategoryId(int64_t value);

    /// <summary>
    /// Цена на товар в рублях.
    /// </summary>
    double getPrice() const;
    void setPrice(double value);

    /// <summary>
    /// Длина товара в сантиметрах.
    /// </summary>
    double getLength() const;
    void setLength(double value);

    /// <summary>
    /// Ширина товара в сантиметрах.
    /// </summary>
    double getWidth() const;
    void setWidth(double value);

    /// <summary>
    /// Высота товара в сантиметрах.
    /// </summary>
    double getHeight() const;
    void setHeight(double value);

    /// <summary>
    /// Вес товара в килограммах.
    /// </summary>
    double getWeight() const;
    void setWeight(double value);

    /// <summary>
    /// Квант продажи — количество единиц товара в одном товарном предложении.
    /// </summary>
    int32_t getQuantity() const;
    void setQuantity(int32_t value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_CategoryId = 0L;
    double m_Price = 0.0;
    double m_Length = 0.0;
    double m_Width = 0.0;
    double m_Height = 0.0;
    double m_Weight = 0.0;
    int32_t m_Quantity = 1;
};

std::vector<CalculateTariffsOfferDTO> createCalculateTariffsOfferDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* CalculateTariffsOfferDTO_H_ */
