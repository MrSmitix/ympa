/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateGoodsFeedbackCommentRequest.h
 *
 * Комментарий к отзыву.
 */

#ifndef UpdateGoodsFeedbackCommentRequest_H_
#define UpdateGoodsFeedbackCommentRequest_H_



#include "UpdateGoodsFeedbackCommentDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Комментарий к отзыву.
/// </summary>
class  UpdateGoodsFeedbackCommentRequest 
{
public:
    UpdateGoodsFeedbackCommentRequest() = default;
    explicit UpdateGoodsFeedbackCommentRequest(boost::property_tree::ptree const& pt);
    virtual ~UpdateGoodsFeedbackCommentRequest() = default;

    UpdateGoodsFeedbackCommentRequest(const UpdateGoodsFeedbackCommentRequest& other) = default; // copy constructor
    UpdateGoodsFeedbackCommentRequest(UpdateGoodsFeedbackCommentRequest&& other) noexcept = default; // move constructor

    UpdateGoodsFeedbackCommentRequest& operator=(const UpdateGoodsFeedbackCommentRequest& other) = default; // copy assignment
    UpdateGoodsFeedbackCommentRequest& operator=(UpdateGoodsFeedbackCommentRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UpdateGoodsFeedbackCommentRequest members

    /// <summary>
    /// Идентификатор отзыва. 
    /// </summary>
    int64_t getFeedbackId() const;
    void setFeedbackId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    UpdateGoodsFeedbackCommentDTO getComment() const;
    void setComment(UpdateGoodsFeedbackCommentDTO value);

protected:
    int64_t m_FeedbackId = 0L;
    UpdateGoodsFeedbackCommentDTO m_Comment;
};

std::vector<UpdateGoodsFeedbackCommentRequest> createUpdateGoodsFeedbackCommentRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UpdateGoodsFeedbackCommentRequest>(const UpdateGoodsFeedbackCommentRequest& val) {
    return val.toPropertyTree();
}

template<>
inline UpdateGoodsFeedbackCommentRequest fromPt<UpdateGoodsFeedbackCommentRequest>(const boost::property_tree::ptree& pt) {
    UpdateGoodsFeedbackCommentRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UpdateGoodsFeedbackCommentRequest_H_ */
