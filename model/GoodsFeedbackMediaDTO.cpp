/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GoodsFeedbackMediaDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GoodsFeedbackMediaDTO::GoodsFeedbackMediaDTO()
{
    m_PhotosIsSet = false;
    m_VideosIsSet = false;
    
}

void GoodsFeedbackMediaDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GoodsFeedbackMediaDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GoodsFeedbackMediaDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GoodsFeedbackMediaDTO" : pathPrefix;

         
    if (photosIsSet())
    {
        const std::vector<std::string>& value = m_Photos;
        const std::string currentValuePath = _pathPrefix + ".photos";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (videosIsSet())
    {
        const std::vector<std::string>& value = m_Videos;
        const std::string currentValuePath = _pathPrefix + ".videos";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool GoodsFeedbackMediaDTO::operator==(const GoodsFeedbackMediaDTO& rhs) const
{
    return
    
    
    
    ((!photosIsSet() && !rhs.photosIsSet()) || (photosIsSet() && rhs.photosIsSet() && getPhotos() == rhs.getPhotos())) &&
    
    
    ((!videosIsSet() && !rhs.videosIsSet()) || (videosIsSet() && rhs.videosIsSet() && getVideos() == rhs.getVideos()))
    
    ;
}

bool GoodsFeedbackMediaDTO::operator!=(const GoodsFeedbackMediaDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GoodsFeedbackMediaDTO& o)
{
    j = nlohmann::json::object();
    if(o.photosIsSet() || !o.m_Photos.empty())
        j["photos"] = o.m_Photos;
    if(o.videosIsSet() || !o.m_Videos.empty())
        j["videos"] = o.m_Videos;
    
}

void from_json(const nlohmann::json& j, GoodsFeedbackMediaDTO& o)
{
    if(j.find("photos") != j.end())
    {
        j.at("photos").get_to(o.m_Photos);
        o.m_PhotosIsSet = true;
    } 
    if(j.find("videos") != j.end())
    {
        j.at("videos").get_to(o.m_Videos);
        o.m_VideosIsSet = true;
    } 
    
}

std::vector<std::string> GoodsFeedbackMediaDTO::getPhotos() const
{
    return m_Photos;
}
void GoodsFeedbackMediaDTO::setPhotos(std::vector<std::string> const& value)
{
    m_Photos = value;
    m_PhotosIsSet = true;
}
bool GoodsFeedbackMediaDTO::photosIsSet() const
{
    return m_PhotosIsSet;
}
void GoodsFeedbackMediaDTO::unsetPhotos()
{
    m_PhotosIsSet = false;
}
std::vector<std::string> GoodsFeedbackMediaDTO::getVideos() const
{
    return m_Videos;
}
void GoodsFeedbackMediaDTO::setVideos(std::vector<std::string> const& value)
{
    m_Videos = value;
    m_VideosIsSet = true;
}
bool GoodsFeedbackMediaDTO::videosIsSet() const
{
    return m_VideosIsSet;
}
void GoodsFeedbackMediaDTO::unsetVideos()
{
    m_VideosIsSet = false;
}


} // namespace org::openapitools::server::model

