/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PriceQuarantineVerdictDTO.h
 *
 * Причина попадания товара в карантин.
 */

#ifndef PriceQuarantineVerdictDTO_H_
#define PriceQuarantineVerdictDTO_H_



#include "PriceQuarantineVerdictType.h"
#include "PriceQuarantineVerdictParameterDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Причина попадания товара в карантин.
/// </summary>
class  PriceQuarantineVerdictDTO 
{
public:
    PriceQuarantineVerdictDTO() = default;
    explicit PriceQuarantineVerdictDTO(boost::property_tree::ptree const& pt);
    virtual ~PriceQuarantineVerdictDTO() = default;

    PriceQuarantineVerdictDTO(const PriceQuarantineVerdictDTO& other) = default; // copy constructor
    PriceQuarantineVerdictDTO(PriceQuarantineVerdictDTO&& other) noexcept = default; // move constructor

    PriceQuarantineVerdictDTO& operator=(const PriceQuarantineVerdictDTO& other) = default; // copy assignment
    PriceQuarantineVerdictDTO& operator=(PriceQuarantineVerdictDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PriceQuarantineVerdictDTO members

    /// <summary>
    /// 
    /// </summary>
    PriceQuarantineVerdictType getType() const;
    void setType(PriceQuarantineVerdictType value);

    /// <summary>
    /// Цена, из-за которой товар попал в карантин, и значения для сравнения. Конкретный набор параметров зависит от типа карантина.
    /// </summary>
    std::vector<PriceQuarantineVerdictParameterDTO> getParams() const;
    void setParams(std::vector<PriceQuarantineVerdictParameterDTO> value);

protected:
    PriceQuarantineVerdictType m_Type = PriceQuarantineVerdictType{};
    std::vector<PriceQuarantineVerdictParameterDTO> m_Params;
};

std::vector<PriceQuarantineVerdictDTO> createPriceQuarantineVerdictDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PriceQuarantineVerdictDTO>(const PriceQuarantineVerdictDTO& val) {
    return val.toPropertyTree();
}

template<>
inline PriceQuarantineVerdictDTO fromPt<PriceQuarantineVerdictDTO>(const boost::property_tree::ptree& pt) {
    PriceQuarantineVerdictDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PriceQuarantineVerdictDTO_H_ */
