/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PartnerShipmentWarehouseDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PartnerShipmentWarehouseDTO::PartnerShipmentWarehouseDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Address = "";
    m_AddressIsSet = false;
    
}

void PartnerShipmentWarehouseDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PartnerShipmentWarehouseDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PartnerShipmentWarehouseDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PartnerShipmentWarehouseDTO" : pathPrefix;

                
    return success;
}

bool PartnerShipmentWarehouseDTO::operator==(const PartnerShipmentWarehouseDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!addressIsSet() && !rhs.addressIsSet()) || (addressIsSet() && rhs.addressIsSet() && getAddress() == rhs.getAddress()))
    
    ;
}

bool PartnerShipmentWarehouseDTO::operator!=(const PartnerShipmentWarehouseDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PartnerShipmentWarehouseDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.addressIsSet())
        j["address"] = o.m_Address;
    
}

void from_json(const nlohmann::json& j, PartnerShipmentWarehouseDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("address") != j.end())
    {
        j.at("address").get_to(o.m_Address);
        o.m_AddressIsSet = true;
    } 
    
}

int64_t PartnerShipmentWarehouseDTO::getId() const
{
    return m_Id;
}
void PartnerShipmentWarehouseDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool PartnerShipmentWarehouseDTO::idIsSet() const
{
    return m_IdIsSet;
}
void PartnerShipmentWarehouseDTO::unsetId()
{
    m_IdIsSet = false;
}
std::string PartnerShipmentWarehouseDTO::getName() const
{
    return m_Name;
}
void PartnerShipmentWarehouseDTO::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool PartnerShipmentWarehouseDTO::nameIsSet() const
{
    return m_NameIsSet;
}
void PartnerShipmentWarehouseDTO::unsetName()
{
    m_NameIsSet = false;
}
std::string PartnerShipmentWarehouseDTO::getAddress() const
{
    return m_Address;
}
void PartnerShipmentWarehouseDTO::setAddress(std::string const& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}
bool PartnerShipmentWarehouseDTO::addressIsSet() const
{
    return m_AddressIsSet;
}
void PartnerShipmentWarehouseDTO::unsetAddress()
{
    m_AddressIsSet = false;
}


} // namespace org::openapitools::server::model

