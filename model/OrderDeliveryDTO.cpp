/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrderDeliveryDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrderDeliveryDTO::OrderDeliveryDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string OrderDeliveryDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void OrderDeliveryDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OrderDeliveryDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("serviceName", m_ServiceName);
	pt.put("price", m_Price);
	pt.add_child("courier", m_Courier.toPropertyTree());
	pt.add_child("dates", m_Dates.toPropertyTree());
	pt.add_child("region", m_Region.toPropertyTree());
	pt.add_child("address", m_Address.toPropertyTree());
	pt.put("deliveryServiceId", m_DeliveryServiceId);
	pt.put("liftPrice", m_LiftPrice);
	pt.put("outletCode", m_OutletCode);
	pt.put("outletStorageLimitDate", m_OutletStorageLimitDate);
	// generate tree for Tracks
    tmp_node.clear();
	if (!m_Tracks.empty()) {
        tmp_node = toPt(m_Tracks);
		pt.add_child("tracks", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Shipments
    tmp_node.clear();
	if (!m_Shipments.empty()) {
        tmp_node = toPt(m_Shipments);
		pt.add_child("shipments", tmp_node);
		tmp_node.clear();
	}
	pt.put("estimated", m_Estimated);
	pt.put("eacCode", m_EacCode);
	return pt;
}

void OrderDeliveryDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_ServiceName = pt.get("serviceName", "");
	m_Price = pt.get("price", 0.0);
	if (pt.get_child_optional("courier")) {
        m_Courier = fromPt<OrderCourierDTO>(pt.get_child("courier"));
	}
	if (pt.get_child_optional("dates")) {
        m_Dates = fromPt<OrderDeliveryDatesDTO>(pt.get_child("dates"));
	}
	if (pt.get_child_optional("region")) {
        m_Region = fromPt<RegionDTO>(pt.get_child("region"));
	}
	if (pt.get_child_optional("address")) {
        m_Address = fromPt<OrderDeliveryAddressDTO>(pt.get_child("address"));
	}
	m_DeliveryServiceId = pt.get("deliveryServiceId", 0L);
	m_LiftPrice = pt.get("liftPrice", 0.0);
	m_OutletCode = pt.get("outletCode", "");
	m_OutletStorageLimitDate = pt.get("outletStorageLimitDate", "");
	// push all items of Tracks into member
	if (pt.get_child_optional("tracks")) {
        m_Tracks = fromPt<std::vector<OrderTrackDTO>>(pt.get_child("tracks"));
	}
	// push all items of Shipments into member
	if (pt.get_child_optional("shipments")) {
        m_Shipments = fromPt<std::vector<OrderShipmentDTO>>(pt.get_child("shipments"));
	}
	m_Estimated = pt.get("estimated", false);
	m_EacCode = pt.get("eacCode", "");
}

std::string OrderDeliveryDTO::getId() const
{
    return m_Id;
}

void OrderDeliveryDTO::setId(std::string value)
{
    m_Id = value;
}


OrderDeliveryType OrderDeliveryDTO::getType() const
{
    return m_Type;
}

void OrderDeliveryDTO::setType(OrderDeliveryType value)
{
    m_Type = value;
}


std::string OrderDeliveryDTO::getServiceName() const
{
    return m_ServiceName;
}

void OrderDeliveryDTO::setServiceName(std::string value)
{
    m_ServiceName = value;
}


double OrderDeliveryDTO::getPrice() const
{
    return m_Price;
}

void OrderDeliveryDTO::setPrice(double value)
{
    m_Price = value;
}


OrderDeliveryPartnerType OrderDeliveryDTO::getDeliveryPartnerType() const
{
    return m_DeliveryPartnerType;
}

void OrderDeliveryDTO::setDeliveryPartnerType(OrderDeliveryPartnerType value)
{
    m_DeliveryPartnerType = value;
}


OrderCourierDTO OrderDeliveryDTO::getCourier() const
{
    return m_Courier;
}

void OrderDeliveryDTO::setCourier(OrderCourierDTO value)
{
    m_Courier = value;
}


OrderDeliveryDatesDTO OrderDeliveryDTO::getDates() const
{
    return m_Dates;
}

void OrderDeliveryDTO::setDates(OrderDeliveryDatesDTO value)
{
    m_Dates = value;
}


RegionDTO OrderDeliveryDTO::getRegion() const
{
    return m_Region;
}

void OrderDeliveryDTO::setRegion(RegionDTO value)
{
    m_Region = value;
}


OrderDeliveryAddressDTO OrderDeliveryDTO::getAddress() const
{
    return m_Address;
}

void OrderDeliveryDTO::setAddress(OrderDeliveryAddressDTO value)
{
    m_Address = value;
}


OrderVatType OrderDeliveryDTO::getVat() const
{
    return m_Vat;
}

void OrderDeliveryDTO::setVat(OrderVatType value)
{
    m_Vat = value;
}


int64_t OrderDeliveryDTO::getDeliveryServiceId() const
{
    return m_DeliveryServiceId;
}

void OrderDeliveryDTO::setDeliveryServiceId(int64_t value)
{
    m_DeliveryServiceId = value;
}


OrderLiftType OrderDeliveryDTO::getLiftType() const
{
    return m_LiftType;
}

void OrderDeliveryDTO::setLiftType(OrderLiftType value)
{
    m_LiftType = value;
}


double OrderDeliveryDTO::getLiftPrice() const
{
    return m_LiftPrice;
}

void OrderDeliveryDTO::setLiftPrice(double value)
{
    m_LiftPrice = value;
}


std::string OrderDeliveryDTO::getOutletCode() const
{
    return m_OutletCode;
}

void OrderDeliveryDTO::setOutletCode(std::string value)
{
    m_OutletCode = value;
}


std::string OrderDeliveryDTO::getOutletStorageLimitDate() const
{
    return m_OutletStorageLimitDate;
}

void OrderDeliveryDTO::setOutletStorageLimitDate(std::string value)
{
    m_OutletStorageLimitDate = value;
}


OrderDeliveryDispatchType OrderDeliveryDTO::getDispatchType() const
{
    return m_DispatchType;
}

void OrderDeliveryDTO::setDispatchType(OrderDeliveryDispatchType value)
{
    m_DispatchType = value;
}


std::vector<OrderTrackDTO> OrderDeliveryDTO::getTracks() const
{
    return m_Tracks;
}

void OrderDeliveryDTO::setTracks(std::vector<OrderTrackDTO> value)
{
    m_Tracks = value;
}


std::vector<OrderShipmentDTO> OrderDeliveryDTO::getShipments() const
{
    return m_Shipments;
}

void OrderDeliveryDTO::setShipments(std::vector<OrderShipmentDTO> value)
{
    m_Shipments = value;
}


bool OrderDeliveryDTO::isEstimated() const
{
    return m_Estimated;
}

void OrderDeliveryDTO::setEstimated(bool value)
{
    m_Estimated = value;
}


OrderDeliveryEacType OrderDeliveryDTO::getEacType() const
{
    return m_EacType;
}

void OrderDeliveryDTO::setEacType(OrderDeliveryEacType value)
{
    m_EacType = value;
}


std::string OrderDeliveryDTO::getEacCode() const
{
    return m_EacCode;
}

void OrderDeliveryDTO::setEacCode(std::string value)
{
    m_EacCode = value;
}



std::vector<OrderDeliveryDTO> createOrderDeliveryDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OrderDeliveryDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OrderDeliveryDTO(child.second));
    }

    return vec;
}

}
}
}
}

