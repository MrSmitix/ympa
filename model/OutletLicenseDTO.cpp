/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OutletLicenseDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OutletLicenseDTO::OutletLicenseDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_OutletId = 0L;
    m_OutletIdIsSet = false;
    m_LicenseTypeIsSet = false;
    m_number = "";
    m_numberIsSet = false;
    m_DateOfIssue = "";
    m_DateOfIssueIsSet = false;
    m_DateOfExpiry = "";
    m_DateOfExpiryIsSet = false;
    
}

void OutletLicenseDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OutletLicenseDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OutletLicenseDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OutletLicenseDTO" : pathPrefix;

                            
    return success;
}

bool OutletLicenseDTO::operator==(const OutletLicenseDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!outletIdIsSet() && !rhs.outletIdIsSet()) || (outletIdIsSet() && rhs.outletIdIsSet() && getOutletId() == rhs.getOutletId())) &&
    
    
    ((!licenseTypeIsSet() && !rhs.licenseTypeIsSet()) || (licenseTypeIsSet() && rhs.licenseTypeIsSet() && getLicenseType() == rhs.getLicenseType())) &&
    
    
    ((!numberIsSet() && !rhs.numberIsSet()) || (numberIsSet() && rhs.numberIsSet() && getNumber() == rhs.getNumber())) &&
    
    
    ((!dateOfIssueIsSet() && !rhs.dateOfIssueIsSet()) || (dateOfIssueIsSet() && rhs.dateOfIssueIsSet() && getDateOfIssue() == rhs.getDateOfIssue())) &&
    
    
    ((!dateOfExpiryIsSet() && !rhs.dateOfExpiryIsSet()) || (dateOfExpiryIsSet() && rhs.dateOfExpiryIsSet() && getDateOfExpiry() == rhs.getDateOfExpiry()))
    
    ;
}

bool OutletLicenseDTO::operator!=(const OutletLicenseDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OutletLicenseDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.outletIdIsSet())
        j["outletId"] = o.m_OutletId;
    if(o.licenseTypeIsSet())
        j["licenseType"] = o.m_LicenseType;
    if(o.numberIsSet())
        j["number"] = o.m_number;
    if(o.dateOfIssueIsSet())
        j["dateOfIssue"] = o.m_DateOfIssue;
    if(o.dateOfExpiryIsSet())
        j["dateOfExpiry"] = o.m_DateOfExpiry;
    
}

void from_json(const nlohmann::json& j, OutletLicenseDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("outletId") != j.end())
    {
        j.at("outletId").get_to(o.m_OutletId);
        o.m_OutletIdIsSet = true;
    } 
    if(j.find("licenseType") != j.end())
    {
        j.at("licenseType").get_to(o.m_LicenseType);
        o.m_LicenseTypeIsSet = true;
    } 
    if(j.find("number") != j.end())
    {
        j.at("number").get_to(o.m_number);
        o.m_numberIsSet = true;
    } 
    if(j.find("dateOfIssue") != j.end())
    {
        j.at("dateOfIssue").get_to(o.m_DateOfIssue);
        o.m_DateOfIssueIsSet = true;
    } 
    if(j.find("dateOfExpiry") != j.end())
    {
        j.at("dateOfExpiry").get_to(o.m_DateOfExpiry);
        o.m_DateOfExpiryIsSet = true;
    } 
    
}

int64_t OutletLicenseDTO::getId() const
{
    return m_Id;
}
void OutletLicenseDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool OutletLicenseDTO::idIsSet() const
{
    return m_IdIsSet;
}
void OutletLicenseDTO::unsetId()
{
    m_IdIsSet = false;
}
int64_t OutletLicenseDTO::getOutletId() const
{
    return m_OutletId;
}
void OutletLicenseDTO::setOutletId(int64_t const value)
{
    m_OutletId = value;
    m_OutletIdIsSet = true;
}
bool OutletLicenseDTO::outletIdIsSet() const
{
    return m_OutletIdIsSet;
}
void OutletLicenseDTO::unsetOutletId()
{
    m_OutletIdIsSet = false;
}
org::openapitools::server::model::LicenseType OutletLicenseDTO::getLicenseType() const
{
    return m_LicenseType;
}
void OutletLicenseDTO::setLicenseType(org::openapitools::server::model::LicenseType const& value)
{
    m_LicenseType = value;
    m_LicenseTypeIsSet = true;
}
bool OutletLicenseDTO::licenseTypeIsSet() const
{
    return m_LicenseTypeIsSet;
}
void OutletLicenseDTO::unsetLicenseType()
{
    m_LicenseTypeIsSet = false;
}
std::string OutletLicenseDTO::getNumber() const
{
    return m_number;
}
void OutletLicenseDTO::setNumber(std::string const& value)
{
    m_number = value;
    m_numberIsSet = true;
}
bool OutletLicenseDTO::numberIsSet() const
{
    return m_numberIsSet;
}
void OutletLicenseDTO::unsetnumber()
{
    m_numberIsSet = false;
}
std::string OutletLicenseDTO::getDateOfIssue() const
{
    return m_DateOfIssue;
}
void OutletLicenseDTO::setDateOfIssue(std::string const& value)
{
    m_DateOfIssue = value;
    m_DateOfIssueIsSet = true;
}
bool OutletLicenseDTO::dateOfIssueIsSet() const
{
    return m_DateOfIssueIsSet;
}
void OutletLicenseDTO::unsetDateOfIssue()
{
    m_DateOfIssueIsSet = false;
}
std::string OutletLicenseDTO::getDateOfExpiry() const
{
    return m_DateOfExpiry;
}
void OutletLicenseDTO::setDateOfExpiry(std::string const& value)
{
    m_DateOfExpiry = value;
    m_DateOfExpiryIsSet = true;
}
bool OutletLicenseDTO::dateOfExpiryIsSet() const
{
    return m_DateOfExpiryIsSet;
}
void OutletLicenseDTO::unsetDateOfExpiry()
{
    m_DateOfExpiryIsSet = false;
}


} // namespace org::openapitools::server::model

