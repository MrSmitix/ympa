/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateOutletLicenseRequest.h
 *
 * Запрос на создание или изменение лицензий для точек продаж.
 */

#ifndef UpdateOutletLicenseRequest_H_
#define UpdateOutletLicenseRequest_H_



#include "OutletLicenseDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Запрос на создание или изменение лицензий для точек продаж.
/// </summary>
class  UpdateOutletLicenseRequest 
{
public:
    UpdateOutletLicenseRequest() = default;
    explicit UpdateOutletLicenseRequest(boost::property_tree::ptree const& pt);
    virtual ~UpdateOutletLicenseRequest() = default;

    UpdateOutletLicenseRequest(const UpdateOutletLicenseRequest& other) = default; // copy constructor
    UpdateOutletLicenseRequest(UpdateOutletLicenseRequest&& other) noexcept = default; // move constructor

    UpdateOutletLicenseRequest& operator=(const UpdateOutletLicenseRequest& other) = default; // copy assignment
    UpdateOutletLicenseRequest& operator=(UpdateOutletLicenseRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UpdateOutletLicenseRequest members

    /// <summary>
    /// Список лицензий. Обязательный параметр, должен содержать информацию хотя бы об одной лицензии. 
    /// </summary>
    std::vector<OutletLicenseDTO> getLicenses() const;
    void setLicenses(std::vector<OutletLicenseDTO> value);

protected:
    std::vector<OutletLicenseDTO> m_Licenses;
};

std::vector<UpdateOutletLicenseRequest> createUpdateOutletLicenseRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UpdateOutletLicenseRequest>(const UpdateOutletLicenseRequest& val) {
    return val.toPropertyTree();
}

template<>
inline UpdateOutletLicenseRequest fromPt<UpdateOutletLicenseRequest>(const boost::property_tree::ptree& pt) {
    UpdateOutletLicenseRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UpdateOutletLicenseRequest_H_ */
