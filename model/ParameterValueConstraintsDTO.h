/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ParameterValueConstraintsDTO.h
 *
 * Ограничения на значения характеристик.
 */

#ifndef ParameterValueConstraintsDTO_H_
#define ParameterValueConstraintsDTO_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Ограничения на значения характеристик.
/// </summary>
class  ParameterValueConstraintsDTO 
{
public:
    ParameterValueConstraintsDTO() = default;
    explicit ParameterValueConstraintsDTO(boost::property_tree::ptree const& pt);
    virtual ~ParameterValueConstraintsDTO() = default;

    ParameterValueConstraintsDTO(const ParameterValueConstraintsDTO& other) = default; // copy constructor
    ParameterValueConstraintsDTO(ParameterValueConstraintsDTO&& other) noexcept = default; // move constructor

    ParameterValueConstraintsDTO& operator=(const ParameterValueConstraintsDTO& other) = default; // copy assignment
    ParameterValueConstraintsDTO& operator=(ParameterValueConstraintsDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ParameterValueConstraintsDTO members

    /// <summary>
    /// Минимальное число.
    /// </summary>
    double getMinValue() const;
    void setMinValue(double value);

    /// <summary>
    /// Максимальное число.
    /// </summary>
    double getMaxValue() const;
    void setMaxValue(double value);

    /// <summary>
    /// Максимальная длина текста.
    /// </summary>
    int32_t getMaxLength() const;
    void setMaxLength(int32_t value);

protected:
    double m_MinValue = 0.0;
    double m_MaxValue = 0.0;
    int32_t m_MaxLength = 0;
};

std::vector<ParameterValueConstraintsDTO> createParameterValueConstraintsDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ParameterValueConstraintsDTO>(const ParameterValueConstraintsDTO& val) {
    return val.toPropertyTree();
}

template<>
inline ParameterValueConstraintsDTO fromPt<ParameterValueConstraintsDTO>(const boost::property_tree::ptree& pt) {
    ParameterValueConstraintsDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ParameterValueConstraintsDTO_H_ */
