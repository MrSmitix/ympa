/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ParameterValueConstraintsDTO.h
 *
 * Ограничения на значения характеристик.
 */

#ifndef ParameterValueConstraintsDTO_H_
#define ParameterValueConstraintsDTO_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Ограничения на значения характеристик.
/// </summary>
class  ParameterValueConstraintsDTO
{
public:
    ParameterValueConstraintsDTO();
    virtual ~ParameterValueConstraintsDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ParameterValueConstraintsDTO& rhs) const;
    bool operator!=(const ParameterValueConstraintsDTO& rhs) const;

    /////////////////////////////////////////////
    /// ParameterValueConstraintsDTO members

    /// <summary>
    /// Минимальное число.
    /// </summary>
    double getMinValue() const;
    void setMinValue(double const value);
    bool minValueIsSet() const;
    void unsetMinValue();
    /// <summary>
    /// Максимальное число.
    /// </summary>
    double getMaxValue() const;
    void setMaxValue(double const value);
    bool maxValueIsSet() const;
    void unsetMaxValue();
    /// <summary>
    /// Максимальная длина текста.
    /// </summary>
    int32_t getMaxLength() const;
    void setMaxLength(int32_t const value);
    bool maxLengthIsSet() const;
    void unsetMaxLength();

    friend  void to_json(nlohmann::json& j, const ParameterValueConstraintsDTO& o);
    friend  void from_json(const nlohmann::json& j, ParameterValueConstraintsDTO& o);
protected:
    double m_MinValue;
    bool m_MinValueIsSet;
    double m_MaxValue;
    bool m_MaxValueIsSet;
    int32_t m_MaxLength;
    bool m_MaxLengthIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ParameterValueConstraintsDTO_H_ */
