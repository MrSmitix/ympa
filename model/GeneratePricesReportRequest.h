/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GeneratePricesReportRequest.h
 *
 * Данные, необходимые для генерации отчета.
 */

#ifndef GeneratePricesReportRequest_H_
#define GeneratePricesReportRequest_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Данные, необходимые для генерации отчета.
/// </summary>
class  GeneratePricesReportRequest
{
public:
    GeneratePricesReportRequest();
    virtual ~GeneratePricesReportRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GeneratePricesReportRequest& rhs) const;
    bool operator!=(const GeneratePricesReportRequest& rhs) const;

    /////////////////////////////////////////////
    /// GeneratePricesReportRequest members

    /// <summary>
    /// Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан &#x60;campaignId&#x60;. 
    /// </summary>
    int64_t getBusinessId() const;
    void setBusinessId(int64_t const value);
    bool businessIdIsSet() const;
    void unsetBusinessId();
    /// <summary>
    /// Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать &#x60;businessId&#x60; не нужно. 
    /// </summary>
    int64_t getCampaignId() const;
    void setCampaignId(int64_t const value);
    bool campaignIdIsSet() const;
    void unsetCampaignId();
    /// <summary>
    /// Фильтр по категориям на Маркете.
    /// </summary>
    std::vector<int64_t> getCategoryIds() const;
    void setCategoryIds(std::vector<int64_t> const value);
    bool categoryIdsIsSet() const;
    void unsetCategoryIds();
    /// <summary>
    /// Фильтр по времени появления предложения — начало периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getCreationDateFrom() const;
    void setCreationDateFrom(std::string const& value);
    bool creationDateFromIsSet() const;
    void unsetCreationDateFrom();
    /// <summary>
    /// Фильтр по времени появления предложения — окончание периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getCreationDateTo() const;
    void setCreationDateTo(std::string const& value);
    bool creationDateToIsSet() const;
    void unsetCreationDateTo();

    friend  void to_json(nlohmann::json& j, const GeneratePricesReportRequest& o);
    friend  void from_json(const nlohmann::json& j, GeneratePricesReportRequest& o);
protected:
    int64_t m_BusinessId;
    bool m_BusinessIdIsSet;
    int64_t m_CampaignId;
    bool m_CampaignIdIsSet;
    std::vector<int64_t> m_CategoryIds;
    bool m_CategoryIdsIsSet;
    std::string m_CreationDateFrom;
    bool m_CreationDateFromIsSet;
    std::string m_CreationDateTo;
    bool m_CreationDateToIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GeneratePricesReportRequest_H_ */
