/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GeneratePricesReportRequest.h
 *
 * Данные, необходимые для генерации отчета.
 */

#ifndef GeneratePricesReportRequest_H_
#define GeneratePricesReportRequest_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Данные, необходимые для генерации отчета.
/// </summary>
class  GeneratePricesReportRequest 
{
public:
    GeneratePricesReportRequest() = default;
    explicit GeneratePricesReportRequest(boost::property_tree::ptree const& pt);
    virtual ~GeneratePricesReportRequest() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// GeneratePricesReportRequest members

    /// <summary>
    /// Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан &#x60;campaignId&#x60;. 
    /// </summary>
    int64_t getBusinessId() const;
    void setBusinessId(int64_t value);

    /// <summary>
    /// Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать &#x60;businessId&#x60; не нужно. 
    /// </summary>
    int64_t getCampaignId() const;
    void setCampaignId(int64_t value);

    /// <summary>
    /// Фильтр по категориям на Маркете.
    /// </summary>
    std::vector<int64_t> getCategoryIds() const;
    void setCategoryIds(std::vector<int64_t> value);

    /// <summary>
    /// Фильтр по времени появления предложения — начало периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getCreationDateFrom() const;
    void setCreationDateFrom(std::string value);

    /// <summary>
    /// Фильтр по времени появления предложения — окончание периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getCreationDateTo() const;
    void setCreationDateTo(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_BusinessId = 0L;
    int64_t m_CampaignId = 0L;
    std::vector<int64_t> m_CategoryIds;
    std::string m_CreationDateFrom = "";
    std::string m_CreationDateTo = "";
};

std::vector<GeneratePricesReportRequest> createGeneratePricesReportRequestVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* GeneratePricesReportRequest_H_ */
