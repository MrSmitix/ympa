/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SuggestOfferPriceDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SuggestOfferPriceDTO::SuggestOfferPriceDTO()
{
    m_OfferId = "";
    m_OfferIdIsSet = false;
    m_MarketSku = 0L;
    m_MarketSkuIsSet = false;
    
}

void SuggestOfferPriceDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SuggestOfferPriceDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SuggestOfferPriceDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SuggestOfferPriceDTO" : pathPrefix;

         
    if (offerIdIsSet())
    {
        const std::string& value = m_OfferId;
        const std::string currentValuePath = _pathPrefix + ".offerId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
        
    return success;
}

bool SuggestOfferPriceDTO::operator==(const SuggestOfferPriceDTO& rhs) const
{
    return
    
    
    
    ((!offerIdIsSet() && !rhs.offerIdIsSet()) || (offerIdIsSet() && rhs.offerIdIsSet() && getOfferId() == rhs.getOfferId())) &&
    
    
    ((!marketSkuIsSet() && !rhs.marketSkuIsSet()) || (marketSkuIsSet() && rhs.marketSkuIsSet() && getMarketSku() == rhs.getMarketSku()))
    
    ;
}

bool SuggestOfferPriceDTO::operator!=(const SuggestOfferPriceDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SuggestOfferPriceDTO& o)
{
    j = nlohmann::json::object();
    if(o.offerIdIsSet())
        j["offerId"] = o.m_OfferId;
    if(o.marketSkuIsSet())
        j["marketSku"] = o.m_MarketSku;
    
}

void from_json(const nlohmann::json& j, SuggestOfferPriceDTO& o)
{
    if(j.find("offerId") != j.end())
    {
        j.at("offerId").get_to(o.m_OfferId);
        o.m_OfferIdIsSet = true;
    } 
    if(j.find("marketSku") != j.end())
    {
        j.at("marketSku").get_to(o.m_MarketSku);
        o.m_MarketSkuIsSet = true;
    } 
    
}

std::string SuggestOfferPriceDTO::getOfferId() const
{
    return m_OfferId;
}
void SuggestOfferPriceDTO::setOfferId(std::string const& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}
bool SuggestOfferPriceDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}
void SuggestOfferPriceDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
int64_t SuggestOfferPriceDTO::getMarketSku() const
{
    return m_MarketSku;
}
void SuggestOfferPriceDTO::setMarketSku(int64_t const value)
{
    m_MarketSku = value;
    m_MarketSkuIsSet = true;
}
bool SuggestOfferPriceDTO::marketSkuIsSet() const
{
    return m_MarketSkuIsSet;
}
void SuggestOfferPriceDTO::unsetMarketSku()
{
    m_MarketSkuIsSet = false;
}


} // namespace org::openapitools::server::model

