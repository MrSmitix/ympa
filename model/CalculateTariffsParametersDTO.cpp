/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CalculateTariffsParametersDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CalculateTariffsParametersDTO::CalculateTariffsParametersDTO()
{
    m_CampaignId = 0L;
    m_CampaignIdIsSet = false;
    m_SellingProgramIsSet = false;
    m_FrequencyIsSet = false;
    
}

void CalculateTariffsParametersDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CalculateTariffsParametersDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CalculateTariffsParametersDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CalculateTariffsParametersDTO" : pathPrefix;

                
    return success;
}

bool CalculateTariffsParametersDTO::operator==(const CalculateTariffsParametersDTO& rhs) const
{
    return
    
    
    
    ((!campaignIdIsSet() && !rhs.campaignIdIsSet()) || (campaignIdIsSet() && rhs.campaignIdIsSet() && getCampaignId() == rhs.getCampaignId())) &&
    
    
    ((!sellingProgramIsSet() && !rhs.sellingProgramIsSet()) || (sellingProgramIsSet() && rhs.sellingProgramIsSet() && getSellingProgram() == rhs.getSellingProgram())) &&
    
    
    ((!frequencyIsSet() && !rhs.frequencyIsSet()) || (frequencyIsSet() && rhs.frequencyIsSet() && getFrequency() == rhs.getFrequency()))
    
    ;
}

bool CalculateTariffsParametersDTO::operator!=(const CalculateTariffsParametersDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CalculateTariffsParametersDTO& o)
{
    j = nlohmann::json::object();
    if(o.campaignIdIsSet())
        j["campaignId"] = o.m_CampaignId;
    if(o.sellingProgramIsSet())
        j["sellingProgram"] = o.m_SellingProgram;
    if(o.frequencyIsSet())
        j["frequency"] = o.m_Frequency;
    
}

void from_json(const nlohmann::json& j, CalculateTariffsParametersDTO& o)
{
    if(j.find("campaignId") != j.end())
    {
        j.at("campaignId").get_to(o.m_CampaignId);
        o.m_CampaignIdIsSet = true;
    } 
    if(j.find("sellingProgram") != j.end())
    {
        j.at("sellingProgram").get_to(o.m_SellingProgram);
        o.m_SellingProgramIsSet = true;
    } 
    if(j.find("frequency") != j.end())
    {
        j.at("frequency").get_to(o.m_Frequency);
        o.m_FrequencyIsSet = true;
    } 
    
}

int64_t CalculateTariffsParametersDTO::getCampaignId() const
{
    return m_CampaignId;
}
void CalculateTariffsParametersDTO::setCampaignId(int64_t const value)
{
    m_CampaignId = value;
    m_CampaignIdIsSet = true;
}
bool CalculateTariffsParametersDTO::campaignIdIsSet() const
{
    return m_CampaignIdIsSet;
}
void CalculateTariffsParametersDTO::unsetCampaignId()
{
    m_CampaignIdIsSet = false;
}
org::openapitools::server::model::SellingProgramType CalculateTariffsParametersDTO::getSellingProgram() const
{
    return m_SellingProgram;
}
void CalculateTariffsParametersDTO::setSellingProgram(org::openapitools::server::model::SellingProgramType const& value)
{
    m_SellingProgram = value;
    m_SellingProgramIsSet = true;
}
bool CalculateTariffsParametersDTO::sellingProgramIsSet() const
{
    return m_SellingProgramIsSet;
}
void CalculateTariffsParametersDTO::unsetSellingProgram()
{
    m_SellingProgramIsSet = false;
}
org::openapitools::server::model::PaymentFrequencyType CalculateTariffsParametersDTO::getFrequency() const
{
    return m_Frequency;
}
void CalculateTariffsParametersDTO::setFrequency(org::openapitools::server::model::PaymentFrequencyType const& value)
{
    m_Frequency = value;
    m_FrequencyIsSet = true;
}
bool CalculateTariffsParametersDTO::frequencyIsSet() const
{
    return m_FrequencyIsSet;
}
void CalculateTariffsParametersDTO::unsetFrequency()
{
    m_FrequencyIsSet = false;
}


} // namespace org::openapitools::server::model

