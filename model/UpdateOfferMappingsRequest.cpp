/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UpdateOfferMappingsRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UpdateOfferMappingsRequest::UpdateOfferMappingsRequest()
{
    m_OnlyPartnerMediaContent = false;
    m_OnlyPartnerMediaContentIsSet = false;
    
}

void UpdateOfferMappingsRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UpdateOfferMappingsRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UpdateOfferMappingsRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UpdateOfferMappingsRequest" : pathPrefix;

         
    
    /* OfferMappings */ {
        const std::vector<org::openapitools::server::model::UpdateOfferMappingDTO>& value = m_OfferMappings;
        const std::string currentValuePath = _pathPrefix + ".offerMappings";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 500)
        {
            success = false;
            msg << currentValuePath << ": must have at most 500 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::UpdateOfferMappingDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".offerMappings") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool UpdateOfferMappingsRequest::operator==(const UpdateOfferMappingsRequest& rhs) const
{
    return
    
    
    (getOfferMappings() == rhs.getOfferMappings())
     &&
    
    
    ((!onlyPartnerMediaContentIsSet() && !rhs.onlyPartnerMediaContentIsSet()) || (onlyPartnerMediaContentIsSet() && rhs.onlyPartnerMediaContentIsSet() && isOnlyPartnerMediaContent() == rhs.isOnlyPartnerMediaContent()))
    
    ;
}

bool UpdateOfferMappingsRequest::operator!=(const UpdateOfferMappingsRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UpdateOfferMappingsRequest& o)
{
    j = nlohmann::json::object();
    j["offerMappings"] = o.m_OfferMappings;
    if(o.onlyPartnerMediaContentIsSet())
        j["onlyPartnerMediaContent"] = o.m_OnlyPartnerMediaContent;
    
}

void from_json(const nlohmann::json& j, UpdateOfferMappingsRequest& o)
{
    j.at("offerMappings").get_to(o.m_OfferMappings);
    if(j.find("onlyPartnerMediaContent") != j.end())
    {
        j.at("onlyPartnerMediaContent").get_to(o.m_OnlyPartnerMediaContent);
        o.m_OnlyPartnerMediaContentIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::UpdateOfferMappingDTO> UpdateOfferMappingsRequest::getOfferMappings() const
{
    return m_OfferMappings;
}
void UpdateOfferMappingsRequest::setOfferMappings(std::vector<org::openapitools::server::model::UpdateOfferMappingDTO> const& value)
{
    m_OfferMappings = value;
}
bool UpdateOfferMappingsRequest::isOnlyPartnerMediaContent() const
{
    return m_OnlyPartnerMediaContent;
}
void UpdateOfferMappingsRequest::setOnlyPartnerMediaContent(bool const value)
{
    m_OnlyPartnerMediaContent = value;
    m_OnlyPartnerMediaContentIsSet = true;
}
bool UpdateOfferMappingsRequest::onlyPartnerMediaContentIsSet() const
{
    return m_OnlyPartnerMediaContentIsSet;
}
void UpdateOfferMappingsRequest::unsetOnlyPartnerMediaContent()
{
    m_OnlyPartnerMediaContentIsSet = false;
}


} // namespace org::openapitools::server::model

