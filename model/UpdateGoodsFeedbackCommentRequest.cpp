/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UpdateGoodsFeedbackCommentRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UpdateGoodsFeedbackCommentRequest::UpdateGoodsFeedbackCommentRequest()
{
    m_FeedbackId = 0L;
    
}

void UpdateGoodsFeedbackCommentRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UpdateGoodsFeedbackCommentRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UpdateGoodsFeedbackCommentRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UpdateGoodsFeedbackCommentRequest" : pathPrefix;

            
    if (!m_Comment.validate(msg, _pathPrefix + ".comment")) {
        msg << _pathPrefix << ": Comment is invalid;";
        success = false;
    }
    return success;
}

bool UpdateGoodsFeedbackCommentRequest::operator==(const UpdateGoodsFeedbackCommentRequest& rhs) const
{
    return
    
    
    (getFeedbackId() == rhs.getFeedbackId())
     &&
    
    (getComment() == rhs.getComment())
    
    
    ;
}

bool UpdateGoodsFeedbackCommentRequest::operator!=(const UpdateGoodsFeedbackCommentRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UpdateGoodsFeedbackCommentRequest& o)
{
    j = nlohmann::json::object();
    j["feedbackId"] = o.m_FeedbackId;
    j["comment"] = o.m_Comment;
    
}

void from_json(const nlohmann::json& j, UpdateGoodsFeedbackCommentRequest& o)
{
    j.at("feedbackId").get_to(o.m_FeedbackId);
    j.at("comment").get_to(o.m_Comment);
    
}

int64_t UpdateGoodsFeedbackCommentRequest::getFeedbackId() const
{
    return m_FeedbackId;
}
void UpdateGoodsFeedbackCommentRequest::setFeedbackId(int64_t const value)
{
    m_FeedbackId = value;
}
org::openapitools::server::model::UpdateGoodsFeedbackCommentDTO UpdateGoodsFeedbackCommentRequest::getComment() const
{
    return m_Comment;
}
void UpdateGoodsFeedbackCommentRequest::setComment(org::openapitools::server::model::UpdateGoodsFeedbackCommentDTO const& value)
{
    m_Comment = value;
}


} // namespace org::openapitools::server::model

