/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OfferPriceDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OfferPriceDTO::OfferPriceDTO()
{
    m_OfferId = "";
    m_OfferIdIsSet = false;
    m_PriceIsSet = false;
    
}

void OfferPriceDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OfferPriceDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OfferPriceDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OfferPriceDTO" : pathPrefix;

         
    if (offerIdIsSet())
    {
        const std::string& value = m_OfferId;
        const std::string currentValuePath = _pathPrefix + ".offerId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
        
    return success;
}

bool OfferPriceDTO::operator==(const OfferPriceDTO& rhs) const
{
    return
    
    
    
    ((!offerIdIsSet() && !rhs.offerIdIsSet()) || (offerIdIsSet() && rhs.offerIdIsSet() && getOfferId() == rhs.getOfferId())) &&
    
    
    ((!priceIsSet() && !rhs.priceIsSet()) || (priceIsSet() && rhs.priceIsSet() && getPrice() == rhs.getPrice()))
    
    ;
}

bool OfferPriceDTO::operator!=(const OfferPriceDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OfferPriceDTO& o)
{
    j = nlohmann::json::object();
    if(o.offerIdIsSet())
        j["offerId"] = o.m_OfferId;
    if(o.priceIsSet())
        j["price"] = o.m_Price;
    
}

void from_json(const nlohmann::json& j, OfferPriceDTO& o)
{
    if(j.find("offerId") != j.end())
    {
        j.at("offerId").get_to(o.m_OfferId);
        o.m_OfferIdIsSet = true;
    } 
    if(j.find("price") != j.end())
    {
        j.at("price").get_to(o.m_Price);
        o.m_PriceIsSet = true;
    } 
    
}

std::string OfferPriceDTO::getOfferId() const
{
    return m_OfferId;
}
void OfferPriceDTO::setOfferId(std::string const& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}
bool OfferPriceDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}
void OfferPriceDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
org::openapitools::server::model::PriceDTO OfferPriceDTO::getPrice() const
{
    return m_Price;
}
void OfferPriceDTO::setPrice(org::openapitools::server::model::PriceDTO const& value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool OfferPriceDTO::priceIsSet() const
{
    return m_PriceIsSet;
}
void OfferPriceDTO::unsetPrice()
{
    m_PriceIsSet = false;
}


} // namespace org::openapitools::server::model

