/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GetWarehouseStocksRequest.h
 *
 * Фильтры для запроса остатков. 
 */

#ifndef GetWarehouseStocksRequest_H_
#define GetWarehouseStocksRequest_H_


#include <string>
#include <set>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Фильтры для запроса остатков. 
/// </summary>
class  GetWarehouseStocksRequest
{
public:
    GetWarehouseStocksRequest();
    virtual ~GetWarehouseStocksRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GetWarehouseStocksRequest& rhs) const;
    bool operator!=(const GetWarehouseStocksRequest& rhs) const;

    /////////////////////////////////////////////
    /// GetWarehouseStocksRequest members

    /// <summary>
    /// **Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию — &#x60;false&#x60;. Если информация нужна, передайте значение &#x60;true&#x60;. 
    /// </summary>
    bool isWithTurnover() const;
    void setWithTurnover(bool const value);
    bool withTurnoverIsSet() const;
    void unsetWithTurnover();
    /// <summary>
    /// Фильтр по нахождению в архиве.  Передайте &#x60;true&#x60;, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано &#x60;false&#x60;, в ответе возвращается информация о товарах, которые не находятся в архиве. 
    /// </summary>
    bool isArchived() const;
    void setArchived(bool const value);
    bool archivedIsSet() const;
    void unsetArchived();
    /// <summary>
    /// Фильтр по вашим SKU товаров.  Возвращается информация об остатках всех переданных SKU, включая товары в архиве.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60; * &#x60;archived&#x60;  {% endnote %}    
    /// </summary>
    std::set<std::string> getOfferIds() const;
    void setOfferIds(std::set<std::string> const& value);
    bool offerIdsIsSet() const;
    void unsetOfferIds();

    friend  void to_json(nlohmann::json& j, const GetWarehouseStocksRequest& o);
    friend  void from_json(const nlohmann::json& j, GetWarehouseStocksRequest& o);
protected:
    bool m_WithTurnover;
    bool m_WithTurnoverIsSet;
    bool m_Archived;
    bool m_ArchivedIsSet;
    std::set<std::string> m_OfferIds;
    bool m_OfferIdsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GetWarehouseStocksRequest_H_ */
