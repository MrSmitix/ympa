/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetWarehouseStocksRequest.h
 *
 * Фильтры для запроса остатков. 
 */

#ifndef GetWarehouseStocksRequest_H_
#define GetWarehouseStocksRequest_H_



#include "Set.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Фильтры для запроса остатков. 
/// </summary>
class  GetWarehouseStocksRequest 
{
public:
    GetWarehouseStocksRequest() = default;
    explicit GetWarehouseStocksRequest(boost::property_tree::ptree const& pt);
    virtual ~GetWarehouseStocksRequest() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// GetWarehouseStocksRequest members

    /// <summary>
    /// **Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию — &#x60;false&#x60;. Если информация нужна, передайте значение &#x60;true&#x60;. 
    /// </summary>
    bool isWithTurnover() const;
    void setWithTurnover(bool value);

    /// <summary>
    /// Фильтр по нахождению в архиве.  Передайте &#x60;true&#x60;, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано &#x60;false&#x60;, в ответе возвращается информация о товарах, которые не находятся в архиве. 
    /// </summary>
    bool isArchived() const;
    void setArchived(bool value);

    /// <summary>
    /// Фильтр по вашим SKU товаров.  Возвращается информация об остатках всех переданных SKU, включая товары в архиве.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60; * &#x60;archived&#x60;  {% endnote %}    
    /// </summary>
    Set<std::shared_ptr<std::string>> getOfferIds() const;
    void setOfferIds(Set<std::shared_ptr<std::string>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    bool m_WithTurnover = false;
    bool m_Archived = false;
    Set<std::shared_ptr<std::string>> m_OfferIds;
};

std::vector<GetWarehouseStocksRequest> createGetWarehouseStocksRequestVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* GetWarehouseStocksRequest_H_ */
