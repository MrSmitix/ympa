/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TimePeriodDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TimePeriodDTO::TimePeriodDTO()
{
    m_TimePeriod = 0;
    m_Comment = "";
    m_CommentIsSet = false;
    
}

void TimePeriodDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TimePeriodDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TimePeriodDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TimePeriodDTO" : pathPrefix;

                
    return success;
}

bool TimePeriodDTO::operator==(const TimePeriodDTO& rhs) const
{
    return
    
    
    (getTimePeriod() == rhs.getTimePeriod())
     &&
    
    (getTimeUnit() == rhs.getTimeUnit())
     &&
    
    
    ((!commentIsSet() && !rhs.commentIsSet()) || (commentIsSet() && rhs.commentIsSet() && getComment() == rhs.getComment()))
    
    ;
}

bool TimePeriodDTO::operator!=(const TimePeriodDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TimePeriodDTO& o)
{
    j = nlohmann::json::object();
    j["timePeriod"] = o.m_TimePeriod;
    j["timeUnit"] = o.m_TimeUnit;
    if(o.commentIsSet())
        j["comment"] = o.m_Comment;
    
}

void from_json(const nlohmann::json& j, TimePeriodDTO& o)
{
    j.at("timePeriod").get_to(o.m_TimePeriod);
    j.at("timeUnit").get_to(o.m_TimeUnit);
    if(j.find("comment") != j.end())
    {
        j.at("comment").get_to(o.m_Comment);
        o.m_CommentIsSet = true;
    } 
    
}

int32_t TimePeriodDTO::getTimePeriod() const
{
    return m_TimePeriod;
}
void TimePeriodDTO::setTimePeriod(int32_t const value)
{
    m_TimePeriod = value;
}
org::openapitools::server::model::TimeUnitType TimePeriodDTO::getTimeUnit() const
{
    return m_TimeUnit;
}
void TimePeriodDTO::setTimeUnit(org::openapitools::server::model::TimeUnitType const& value)
{
    m_TimeUnit = value;
}
std::string TimePeriodDTO::getComment() const
{
    return m_Comment;
}
void TimePeriodDTO::setComment(std::string const& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}
bool TimePeriodDTO::commentIsSet() const
{
    return m_CommentIsSet;
}
void TimePeriodDTO::unsetComment()
{
    m_CommentIsSet = false;
}


} // namespace org::openapitools::server::model

