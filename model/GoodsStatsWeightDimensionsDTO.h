/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GoodsStatsWeightDimensionsDTO.h
 *
 * Информация о весе и габаритах товара.  Если товар уже привязан к карточке (&#x60;marketSku&#x60;), в ответе вернутся габариты из карточки Маркета, а не размеры, которые вы передаете. 
 */

#ifndef GoodsStatsWeightDimensionsDTO_H_
#define GoodsStatsWeightDimensionsDTO_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о весе и габаритах товара.  Если товар уже привязан к карточке (&#x60;marketSku&#x60;), в ответе вернутся габариты из карточки Маркета, а не размеры, которые вы передаете. 
/// </summary>
class  GoodsStatsWeightDimensionsDTO 
{
public:
    GoodsStatsWeightDimensionsDTO() = default;
    explicit GoodsStatsWeightDimensionsDTO(boost::property_tree::ptree const& pt);
    virtual ~GoodsStatsWeightDimensionsDTO() = default;

    GoodsStatsWeightDimensionsDTO(const GoodsStatsWeightDimensionsDTO& other) = default; // copy constructor
    GoodsStatsWeightDimensionsDTO(GoodsStatsWeightDimensionsDTO&& other) noexcept = default; // move constructor

    GoodsStatsWeightDimensionsDTO& operator=(const GoodsStatsWeightDimensionsDTO& other) = default; // copy assignment
    GoodsStatsWeightDimensionsDTO& operator=(GoodsStatsWeightDimensionsDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GoodsStatsWeightDimensionsDTO members

    /// <summary>
    /// Длина товара в сантиметрах.
    /// </summary>
    double getLength() const;
    void setLength(double value);

    /// <summary>
    /// Ширина товара в сантиметрах.
    /// </summary>
    double getWidth() const;
    void setWidth(double value);

    /// <summary>
    /// Высота товара в сантиметрах.
    /// </summary>
    double getHeight() const;
    void setHeight(double value);

    /// <summary>
    /// Вес товара в килограммах.
    /// </summary>
    double getWeight() const;
    void setWeight(double value);

protected:
    double m_Length = 0.0;
    double m_Width = 0.0;
    double m_Height = 0.0;
    double m_Weight = 0.0;
};

std::vector<GoodsStatsWeightDimensionsDTO> createGoodsStatsWeightDimensionsDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GoodsStatsWeightDimensionsDTO>(const GoodsStatsWeightDimensionsDTO& val) {
    return val.toPropertyTree();
}

template<>
inline GoodsStatsWeightDimensionsDTO fromPt<GoodsStatsWeightDimensionsDTO>(const boost::property_tree::ptree& pt) {
    GoodsStatsWeightDimensionsDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GoodsStatsWeightDimensionsDTO_H_ */
