/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PromoOfferDiscountParamsDTO.h
 *
 * Параметры товара в акции с типом &#x60;DIRECT_DISCOUNT&#x60; или &#x60;BLUE_FLASH&#x60;.
 */

#ifndef PromoOfferDiscountParamsDTO_H_
#define PromoOfferDiscountParamsDTO_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Параметры товара в акции с типом &#x60;DIRECT_DISCOUNT&#x60; или &#x60;BLUE_FLASH&#x60;.
/// </summary>
class  PromoOfferDiscountParamsDTO 
{
public:
    PromoOfferDiscountParamsDTO() = default;
    explicit PromoOfferDiscountParamsDTO(boost::property_tree::ptree const& pt);
    virtual ~PromoOfferDiscountParamsDTO() = default;

    PromoOfferDiscountParamsDTO(const PromoOfferDiscountParamsDTO& other) = default; // copy constructor
    PromoOfferDiscountParamsDTO(PromoOfferDiscountParamsDTO&& other) noexcept = default; // move constructor

    PromoOfferDiscountParamsDTO& operator=(const PromoOfferDiscountParamsDTO& other) = default; // copy assignment
    PromoOfferDiscountParamsDTO& operator=(PromoOfferDiscountParamsDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PromoOfferDiscountParamsDTO members

    /// <summary>
    /// Зачеркнутая цена — та, по которой товар продавался до акции.  Указывается в рублях.  Возвращается, только если товар участвует в акции. 
    /// </summary>
    int64_t getPrice() const;
    void setPrice(int64_t value);

    /// <summary>
    /// Цена по акции — та, по которой вы хотите продавать товар.  Указывается в рублях.  Возвращается, только если товар участвует в акции. 
    /// </summary>
    int64_t getPromoPrice() const;
    void setPromoPrice(int64_t value);

    /// <summary>
    /// Максимально возможная цена для участия в акции.  Указывается в рублях.  Возвращается для всех товаров. 
    /// </summary>
    int64_t getMaxPromoPrice() const;
    void setMaxPromoPrice(int64_t value);

protected:
    int64_t m_Price = 0L;
    int64_t m_PromoPrice = 0L;
    int64_t m_MaxPromoPrice = 0L;
};

std::vector<PromoOfferDiscountParamsDTO> createPromoOfferDiscountParamsDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PromoOfferDiscountParamsDTO>(const PromoOfferDiscountParamsDTO& val) {
    return val.toPropertyTree();
}

template<>
inline PromoOfferDiscountParamsDTO fromPt<PromoOfferDiscountParamsDTO>(const boost::property_tree::ptree& pt) {
    PromoOfferDiscountParamsDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PromoOfferDiscountParamsDTO_H_ */
