/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OfferProcessingNoteType.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

OfferProcessingNoteType::OfferProcessingNoteType()
{
    
}

void OfferProcessingNoteType::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OfferProcessingNoteType::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OfferProcessingNoteType::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OfferProcessingNoteType" : pathPrefix;

    
    if (m_value == OfferProcessingNoteType::eOfferProcessingNoteType::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool OfferProcessingNoteType::operator==(const OfferProcessingNoteType& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool OfferProcessingNoteType::operator!=(const OfferProcessingNoteType& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OfferProcessingNoteType& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case OfferProcessingNoteType::eOfferProcessingNoteType::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::ASSORTMENT:
            j = "ASSORTMENT";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::CANCELLED:
            j = "CANCELLED";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::CONFLICTING_INFORMATION:
            j = "CONFLICTING_INFORMATION";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::OTHER:
            j = "OTHER";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::DEPARTMENT_FROZEN:
            j = "DEPARTMENT_FROZEN";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::INCORRECT_INFORMATION:
            j = "INCORRECT_INFORMATION";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::LEGAL_CONFLICT:
            j = "LEGAL_CONFLICT";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::NEED_CLASSIFICATION_INFORMATION:
            j = "NEED_CLASSIFICATION_INFORMATION";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::NEED_INFORMATION:
            j = "NEED_INFORMATION";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::NEED_PICTURES:
            j = "NEED_PICTURES";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::NEED_VENDOR:
            j = "NEED_VENDOR";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::NO_CATEGORY:
            j = "NO_CATEGORY";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::NO_KNOWLEDGE:
            j = "NO_KNOWLEDGE";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::NO_PARAMETERS_IN_SHOP_TITLE:
            j = "NO_PARAMETERS_IN_SHOP_TITLE";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::NO_SIZE_MEASURE:
            j = "NO_SIZE_MEASURE";
            break;
        case OfferProcessingNoteType::eOfferProcessingNoteType::SAMPLE_LINE:
            j = "SAMPLE_LINE";
            break;
    }
}

void from_json(const nlohmann::json& j, OfferProcessingNoteType& o)
{
    
    auto s = j.get<std::string>();
    if (s == "ASSORTMENT") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::ASSORTMENT);
    } 
    else if (s == "CANCELLED") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::CANCELLED);
    } 
    else if (s == "CONFLICTING_INFORMATION") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::CONFLICTING_INFORMATION);
    } 
    else if (s == "OTHER") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::OTHER);
    } 
    else if (s == "DEPARTMENT_FROZEN") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::DEPARTMENT_FROZEN);
    } 
    else if (s == "INCORRECT_INFORMATION") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::INCORRECT_INFORMATION);
    } 
    else if (s == "LEGAL_CONFLICT") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::LEGAL_CONFLICT);
    } 
    else if (s == "NEED_CLASSIFICATION_INFORMATION") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::NEED_CLASSIFICATION_INFORMATION);
    } 
    else if (s == "NEED_INFORMATION") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::NEED_INFORMATION);
    } 
    else if (s == "NEED_PICTURES") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::NEED_PICTURES);
    } 
    else if (s == "NEED_VENDOR") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::NEED_VENDOR);
    } 
    else if (s == "NO_CATEGORY") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::NO_CATEGORY);
    } 
    else if (s == "NO_KNOWLEDGE") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::NO_KNOWLEDGE);
    } 
    else if (s == "NO_PARAMETERS_IN_SHOP_TITLE") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::NO_PARAMETERS_IN_SHOP_TITLE);
    } 
    else if (s == "NO_SIZE_MEASURE") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::NO_SIZE_MEASURE);
    } 
    else if (s == "SAMPLE_LINE") {
     o.setValue(OfferProcessingNoteType::eOfferProcessingNoteType::SAMPLE_LINE);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " OfferProcessingNoteType::eOfferProcessingNoteType";
     throw std::invalid_argument(ss.str());
    } 

}

OfferProcessingNoteType::eOfferProcessingNoteType OfferProcessingNoteType::getValue() const
{
    return m_value;
}
void OfferProcessingNoteType::setValue(OfferProcessingNoteType::eOfferProcessingNoteType value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

