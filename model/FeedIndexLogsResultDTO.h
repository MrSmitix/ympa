/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedIndexLogsResultDTO.h
 *
 * Результат выполнения запроса отчета по индексации прайс-листа.
 */

#ifndef FeedIndexLogsResultDTO_H_
#define FeedIndexLogsResultDTO_H_



#include "FeedIndexLogsRecordDTO.h"
#include "FeedIndexLogsFeedDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Результат выполнения запроса отчета по индексации прайс-листа.
/// </summary>
class  FeedIndexLogsResultDTO 
{
public:
    FeedIndexLogsResultDTO() = default;
    explicit FeedIndexLogsResultDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedIndexLogsResultDTO() = default;

    FeedIndexLogsResultDTO(const FeedIndexLogsResultDTO& other) = default; // copy constructor
    FeedIndexLogsResultDTO(FeedIndexLogsResultDTO&& other) noexcept = default; // move constructor

    FeedIndexLogsResultDTO& operator=(const FeedIndexLogsResultDTO& other) = default; // copy assignment
    FeedIndexLogsResultDTO& operator=(FeedIndexLogsResultDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FeedIndexLogsResultDTO members

    /// <summary>
    /// 
    /// </summary>
    FeedIndexLogsFeedDTO getFeed() const;
    void setFeed(FeedIndexLogsFeedDTO value);

    /// <summary>
    /// Список отчетов по индексации прайс-листа.
    /// </summary>
    std::vector<FeedIndexLogsRecordDTO> getIndexLogRecords() const;
    void setIndexLogRecords(std::vector<FeedIndexLogsRecordDTO> value);

    /// <summary>
    /// Количество отчетов на всех страницах выходных данных.
    /// </summary>
    int64_t getTotal() const;
    void setTotal(int64_t value);

protected:
    FeedIndexLogsFeedDTO m_Feed;
    std::vector<FeedIndexLogsRecordDTO> m_IndexLogRecords;
    int64_t m_Total = 0L;
};

std::vector<FeedIndexLogsResultDTO> createFeedIndexLogsResultDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FeedIndexLogsResultDTO>(const FeedIndexLogsResultDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FeedIndexLogsResultDTO fromPt<FeedIndexLogsResultDTO>(const boost::property_tree::ptree& pt) {
    FeedIndexLogsResultDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FeedIndexLogsResultDTO_H_ */
