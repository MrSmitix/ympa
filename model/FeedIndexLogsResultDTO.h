/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FeedIndexLogsResultDTO.h
 *
 * Результат выполнения запроса отчета по индексации прайс-листа.
 */

#ifndef FeedIndexLogsResultDTO_H_
#define FeedIndexLogsResultDTO_H_


#include "FeedIndexLogsRecordDTO.h"
#include "FeedIndexLogsFeedDTO.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Результат выполнения запроса отчета по индексации прайс-листа.
/// </summary>
class  FeedIndexLogsResultDTO
{
public:
    FeedIndexLogsResultDTO();
    virtual ~FeedIndexLogsResultDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FeedIndexLogsResultDTO& rhs) const;
    bool operator!=(const FeedIndexLogsResultDTO& rhs) const;

    /////////////////////////////////////////////
    /// FeedIndexLogsResultDTO members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedIndexLogsFeedDTO getFeed() const;
    void setFeed(org::openapitools::server::model::FeedIndexLogsFeedDTO const& value);
    bool feedIsSet() const;
    void unsetFeed();
    /// <summary>
    /// Список отчетов по индексации прайс-листа.
    /// </summary>
    std::vector<org::openapitools::server::model::FeedIndexLogsRecordDTO> getIndexLogRecords() const;
    void setIndexLogRecords(std::vector<org::openapitools::server::model::FeedIndexLogsRecordDTO> const& value);
    /// <summary>
    /// Количество отчетов на всех страницах выходных данных.
    /// </summary>
    int64_t getTotal() const;
    void setTotal(int64_t const value);
    bool totalIsSet() const;
    void unsetTotal();

    friend  void to_json(nlohmann::json& j, const FeedIndexLogsResultDTO& o);
    friend  void from_json(const nlohmann::json& j, FeedIndexLogsResultDTO& o);
protected:
    org::openapitools::server::model::FeedIndexLogsFeedDTO m_Feed;
    bool m_FeedIsSet;
    std::vector<org::openapitools::server::model::FeedIndexLogsRecordDTO> m_IndexLogRecords;

    int64_t m_Total;
    bool m_TotalIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* FeedIndexLogsResultDTO_H_ */
