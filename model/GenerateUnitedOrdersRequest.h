/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GenerateUnitedOrdersRequest.h
 *
 * Данные, необходимые для генерации отчета. 
 */

#ifndef GenerateUnitedOrdersRequest_H_
#define GenerateUnitedOrdersRequest_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Данные, необходимые для генерации отчета. 
/// </summary>
class  GenerateUnitedOrdersRequest
{
public:
    GenerateUnitedOrdersRequest();
    virtual ~GenerateUnitedOrdersRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GenerateUnitedOrdersRequest& rhs) const;
    bool operator!=(const GenerateUnitedOrdersRequest& rhs) const;

    /////////////////////////////////////////////
    /// GenerateUnitedOrdersRequest members

    /// <summary>
    /// Идентификатор бизнеса.
    /// </summary>
    int64_t getBusinessId() const;
    void setBusinessId(int64_t const value);
    /// <summary>
    /// Начало периода, включительно.
    /// </summary>
    std::string getDateFrom() const;
    void setDateFrom(std::string const& value);
    /// <summary>
    /// Конец периода, включительно. Максимальный период — 1 год.
    /// </summary>
    std::string getDateTo() const;
    void setDateTo(std::string const& value);
    /// <summary>
    /// Список магазинов, которые нужны в отчете.
    /// </summary>
    std::vector<int64_t> getCampaignIds() const;
    void setCampaignIds(std::vector<int64_t> const value);
    bool campaignIdsIsSet() const;
    void unsetCampaignIds();
    /// <summary>
    /// Идентификатор акции, товары из которой нужны в отчете.
    /// </summary>
    std::string getPromoId() const;
    void setPromoId(std::string const& value);
    bool promoIdIsSet() const;
    void unsetPromoId();

    friend  void to_json(nlohmann::json& j, const GenerateUnitedOrdersRequest& o);
    friend  void from_json(const nlohmann::json& j, GenerateUnitedOrdersRequest& o);
protected:
    int64_t m_BusinessId;

    std::string m_DateFrom;

    std::string m_DateTo;

    std::vector<int64_t> m_CampaignIds;
    bool m_CampaignIdsIsSet;
    std::string m_PromoId;
    bool m_PromoIdIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GenerateUnitedOrdersRequest_H_ */
