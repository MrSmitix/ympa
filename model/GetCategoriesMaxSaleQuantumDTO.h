/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GetCategoriesMaxSaleQuantumDTO.h
 *
 * Категории и лимит на установку кванта и минимального количества товаров.
 */

#ifndef GetCategoriesMaxSaleQuantumDTO_H_
#define GetCategoriesMaxSaleQuantumDTO_H_


#include "CategoryErrorDTO.h"
#include "MaxSaleQuantumDTO.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Категории и лимит на установку кванта и минимального количества товаров.
/// </summary>
class  GetCategoriesMaxSaleQuantumDTO
{
public:
    GetCategoriesMaxSaleQuantumDTO();
    virtual ~GetCategoriesMaxSaleQuantumDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GetCategoriesMaxSaleQuantumDTO& rhs) const;
    bool operator!=(const GetCategoriesMaxSaleQuantumDTO& rhs) const;

    /////////////////////////////////////////////
    /// GetCategoriesMaxSaleQuantumDTO members

    /// <summary>
    /// Категории и лимит на установку кванта и минимального количества товаров.
    /// </summary>
    std::vector<org::openapitools::server::model::MaxSaleQuantumDTO> getResults() const;
    void setResults(std::vector<org::openapitools::server::model::MaxSaleQuantumDTO> const& value);
    /// <summary>
    /// Ошибки, которые появились из-за переданных категорий.
    /// </summary>
    std::vector<org::openapitools::server::model::CategoryErrorDTO> getErrors() const;
    void setErrors(std::vector<org::openapitools::server::model::CategoryErrorDTO> const& value);
    bool errorsIsSet() const;
    void unsetErrors();

    friend  void to_json(nlohmann::json& j, const GetCategoriesMaxSaleQuantumDTO& o);
    friend  void from_json(const nlohmann::json& j, GetCategoriesMaxSaleQuantumDTO& o);
protected:
    std::vector<org::openapitools::server::model::MaxSaleQuantumDTO> m_Results;

    std::vector<org::openapitools::server::model::CategoryErrorDTO> m_Errors;
    bool m_ErrorsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GetCategoriesMaxSaleQuantumDTO_H_ */
