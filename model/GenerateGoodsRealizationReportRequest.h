/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GenerateGoodsRealizationReportRequest.h
 *
 * Данные, необходимые для генерации отчета: идентификатор магазина и период, за который нужен отчет. 
 */

#ifndef GenerateGoodsRealizationReportRequest_H_
#define GenerateGoodsRealizationReportRequest_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Данные, необходимые для генерации отчета: идентификатор магазина и период, за который нужен отчет. 
/// </summary>
class  GenerateGoodsRealizationReportRequest
{
public:
    GenerateGoodsRealizationReportRequest();
    virtual ~GenerateGoodsRealizationReportRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GenerateGoodsRealizationReportRequest& rhs) const;
    bool operator!=(const GenerateGoodsRealizationReportRequest& rhs) const;

    /////////////////////////////////////////////
    /// GenerateGoodsRealizationReportRequest members

    /// <summary>
    /// Идентификатор кампании.
    /// </summary>
    int64_t getCampaignId() const;
    void setCampaignId(int64_t const value);
    /// <summary>
    /// Год.
    /// </summary>
    int32_t getYear() const;
    void setYear(int32_t const value);
    /// <summary>
    /// Номер месяца.
    /// </summary>
    int32_t getMonth() const;
    void setMonth(int32_t const value);

    friend  void to_json(nlohmann::json& j, const GenerateGoodsRealizationReportRequest& o);
    friend  void from_json(const nlohmann::json& j, GenerateGoodsRealizationReportRequest& o);
protected:
    int64_t m_CampaignId;

    int32_t m_Year;

    int32_t m_Month;

    
};

} // namespace org::openapitools::server::model

#endif /* GenerateGoodsRealizationReportRequest_H_ */
