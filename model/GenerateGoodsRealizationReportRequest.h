/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateGoodsRealizationReportRequest.h
 *
 * Данные, необходимые для генерации отчета: идентификатор магазина и период, за который нужен отчет. 
 */

#ifndef GenerateGoodsRealizationReportRequest_H_
#define GenerateGoodsRealizationReportRequest_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Данные, необходимые для генерации отчета: идентификатор магазина и период, за который нужен отчет. 
/// </summary>
class  GenerateGoodsRealizationReportRequest 
{
public:
    GenerateGoodsRealizationReportRequest() = default;
    explicit GenerateGoodsRealizationReportRequest(boost::property_tree::ptree const& pt);
    virtual ~GenerateGoodsRealizationReportRequest() = default;

    GenerateGoodsRealizationReportRequest(const GenerateGoodsRealizationReportRequest& other) = default; // copy constructor
    GenerateGoodsRealizationReportRequest(GenerateGoodsRealizationReportRequest&& other) noexcept = default; // move constructor

    GenerateGoodsRealizationReportRequest& operator=(const GenerateGoodsRealizationReportRequest& other) = default; // copy assignment
    GenerateGoodsRealizationReportRequest& operator=(GenerateGoodsRealizationReportRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GenerateGoodsRealizationReportRequest members

    /// <summary>
    /// Идентификатор кампании.
    /// </summary>
    int64_t getCampaignId() const;
    void setCampaignId(int64_t value);

    /// <summary>
    /// Год.
    /// </summary>
    int32_t getYear() const;
    void setYear(int32_t value);

    /// <summary>
    /// Номер месяца.
    /// </summary>
    int32_t getMonth() const;
    void setMonth(int32_t value);

protected:
    int64_t m_CampaignId = 0L;
    int32_t m_Year = 0;
    int32_t m_Month = 0;
};

std::vector<GenerateGoodsRealizationReportRequest> createGenerateGoodsRealizationReportRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GenerateGoodsRealizationReportRequest>(const GenerateGoodsRealizationReportRequest& val) {
    return val.toPropertyTree();
}

template<>
inline GenerateGoodsRealizationReportRequest fromPt<GenerateGoodsRealizationReportRequest>(const boost::property_tree::ptree& pt) {
    GenerateGoodsRealizationReportRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GenerateGoodsRealizationReportRequest_H_ */
