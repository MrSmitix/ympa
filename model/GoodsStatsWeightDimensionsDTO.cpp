/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GoodsStatsWeightDimensionsDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GoodsStatsWeightDimensionsDTO::GoodsStatsWeightDimensionsDTO()
{
    m_Length = 0.0;
    m_LengthIsSet = false;
    m_Width = 0.0;
    m_WidthIsSet = false;
    m_Height = 0.0;
    m_HeightIsSet = false;
    m_Weight = 0.0;
    m_WeightIsSet = false;
    
}

void GoodsStatsWeightDimensionsDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GoodsStatsWeightDimensionsDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GoodsStatsWeightDimensionsDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GoodsStatsWeightDimensionsDTO" : pathPrefix;

                    
    return success;
}

bool GoodsStatsWeightDimensionsDTO::operator==(const GoodsStatsWeightDimensionsDTO& rhs) const
{
    return
    
    
    
    ((!lengthIsSet() && !rhs.lengthIsSet()) || (lengthIsSet() && rhs.lengthIsSet() && getLength() == rhs.getLength())) &&
    
    
    ((!widthIsSet() && !rhs.widthIsSet()) || (widthIsSet() && rhs.widthIsSet() && getWidth() == rhs.getWidth())) &&
    
    
    ((!heightIsSet() && !rhs.heightIsSet()) || (heightIsSet() && rhs.heightIsSet() && getHeight() == rhs.getHeight())) &&
    
    
    ((!weightIsSet() && !rhs.weightIsSet()) || (weightIsSet() && rhs.weightIsSet() && getWeight() == rhs.getWeight()))
    
    ;
}

bool GoodsStatsWeightDimensionsDTO::operator!=(const GoodsStatsWeightDimensionsDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GoodsStatsWeightDimensionsDTO& o)
{
    j = nlohmann::json::object();
    if(o.lengthIsSet())
        j["length"] = o.m_Length;
    if(o.widthIsSet())
        j["width"] = o.m_Width;
    if(o.heightIsSet())
        j["height"] = o.m_Height;
    if(o.weightIsSet())
        j["weight"] = o.m_Weight;
    
}

void from_json(const nlohmann::json& j, GoodsStatsWeightDimensionsDTO& o)
{
    if(j.find("length") != j.end())
    {
        j.at("length").get_to(o.m_Length);
        o.m_LengthIsSet = true;
    } 
    if(j.find("width") != j.end())
    {
        j.at("width").get_to(o.m_Width);
        o.m_WidthIsSet = true;
    } 
    if(j.find("height") != j.end())
    {
        j.at("height").get_to(o.m_Height);
        o.m_HeightIsSet = true;
    } 
    if(j.find("weight") != j.end())
    {
        j.at("weight").get_to(o.m_Weight);
        o.m_WeightIsSet = true;
    } 
    
}

double GoodsStatsWeightDimensionsDTO::getLength() const
{
    return m_Length;
}
void GoodsStatsWeightDimensionsDTO::setLength(double const value)
{
    m_Length = value;
    m_LengthIsSet = true;
}
bool GoodsStatsWeightDimensionsDTO::lengthIsSet() const
{
    return m_LengthIsSet;
}
void GoodsStatsWeightDimensionsDTO::unsetLength()
{
    m_LengthIsSet = false;
}
double GoodsStatsWeightDimensionsDTO::getWidth() const
{
    return m_Width;
}
void GoodsStatsWeightDimensionsDTO::setWidth(double const value)
{
    m_Width = value;
    m_WidthIsSet = true;
}
bool GoodsStatsWeightDimensionsDTO::widthIsSet() const
{
    return m_WidthIsSet;
}
void GoodsStatsWeightDimensionsDTO::unsetWidth()
{
    m_WidthIsSet = false;
}
double GoodsStatsWeightDimensionsDTO::getHeight() const
{
    return m_Height;
}
void GoodsStatsWeightDimensionsDTO::setHeight(double const value)
{
    m_Height = value;
    m_HeightIsSet = true;
}
bool GoodsStatsWeightDimensionsDTO::heightIsSet() const
{
    return m_HeightIsSet;
}
void GoodsStatsWeightDimensionsDTO::unsetHeight()
{
    m_HeightIsSet = false;
}
double GoodsStatsWeightDimensionsDTO::getWeight() const
{
    return m_Weight;
}
void GoodsStatsWeightDimensionsDTO::setWeight(double const value)
{
    m_Weight = value;
    m_WeightIsSet = true;
}
bool GoodsStatsWeightDimensionsDTO::weightIsSet() const
{
    return m_WeightIsSet;
}
void GoodsStatsWeightDimensionsDTO::unsetWeight()
{
    m_WeightIsSet = false;
}


} // namespace org::openapitools::server::model

