/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PartnerShipmentWarehouseDTO.h
 *
 * Данные о складе отправления.
 */

#ifndef PartnerShipmentWarehouseDTO_H_
#define PartnerShipmentWarehouseDTO_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Данные о складе отправления.
/// </summary>
class  PartnerShipmentWarehouseDTO 
{
public:
    PartnerShipmentWarehouseDTO() = default;
    explicit PartnerShipmentWarehouseDTO(boost::property_tree::ptree const& pt);
    virtual ~PartnerShipmentWarehouseDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// PartnerShipmentWarehouseDTO members

    /// <summary>
    /// Идентификатор склада отправления.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Наименование склада отправления.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Адрес склада отправления.
    /// </summary>
    std::string getAddress() const;
    void setAddress(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_Id = 0L;
    std::string m_Name = "";
    std::string m_Address = "";
};

std::vector<PartnerShipmentWarehouseDTO> createPartnerShipmentWarehouseDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* PartnerShipmentWarehouseDTO_H_ */
