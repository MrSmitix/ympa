/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "QualityRatingDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

QualityRatingDTO::QualityRatingDTO()
{
    m_Rating = 0L;
    
}

void QualityRatingDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool QualityRatingDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool QualityRatingDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "QualityRatingDTO" : pathPrefix;

         
    
    /* Rating */ {
        const int64_t& value = m_Rating;
        const std::string currentValuePath = _pathPrefix + ".rating";
                
        
        if (value < 0ll)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 100ll)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 100;";
        }

    }
             
    
    /* Components */ {
        const std::vector<org::openapitools::server::model::QualityRatingComponentDTO>& value = m_Components;
        const std::string currentValuePath = _pathPrefix + ".components";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::QualityRatingComponentDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".components") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool QualityRatingDTO::operator==(const QualityRatingDTO& rhs) const
{
    return
    
    
    (getRating() == rhs.getRating())
     &&
    
    (getCalculationDate() == rhs.getCalculationDate())
     &&
    
    (getComponents() == rhs.getComponents())
    
    
    ;
}

bool QualityRatingDTO::operator!=(const QualityRatingDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const QualityRatingDTO& o)
{
    j = nlohmann::json::object();
    j["rating"] = o.m_Rating;
    j["calculationDate"] = o.m_CalculationDate;
    j["components"] = o.m_Components;
    
}

void from_json(const nlohmann::json& j, QualityRatingDTO& o)
{
    j.at("rating").get_to(o.m_Rating);
    j.at("calculationDate").get_to(o.m_CalculationDate);
    j.at("components").get_to(o.m_Components);
    
}

int64_t QualityRatingDTO::getRating() const
{
    return m_Rating;
}
void QualityRatingDTO::setRating(int64_t const value)
{
    m_Rating = value;
}
std::string QualityRatingDTO::getCalculationDate() const
{
    return m_CalculationDate;
}
void QualityRatingDTO::setCalculationDate(std::string const& value)
{
    m_CalculationDate = value;
}
std::vector<org::openapitools::server::model::QualityRatingComponentDTO> QualityRatingDTO::getComponents() const
{
    return m_Components;
}
void QualityRatingDTO::setComponents(std::vector<org::openapitools::server::model::QualityRatingComponentDTO> const& value)
{
    m_Components = value;
}


} // namespace org::openapitools::server::model

