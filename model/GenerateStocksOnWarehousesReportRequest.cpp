/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GenerateStocksOnWarehousesReportRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

GenerateStocksOnWarehousesReportRequest::GenerateStocksOnWarehousesReportRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string GenerateStocksOnWarehousesReportRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void GenerateStocksOnWarehousesReportRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree GenerateStocksOnWarehousesReportRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("campaignId", m_CampaignId);
	// generate tree for WarehouseIds
    tmp_node.clear();
	if (!m_WarehouseIds.empty()) {
        tmp_node = toPt(m_WarehouseIds);
		pt.add_child("warehouseIds", tmp_node);
		tmp_node.clear();
	}
	pt.put("reportDate", m_ReportDate);
	// generate tree for CategoryIds
    tmp_node.clear();
	if (!m_CategoryIds.empty()) {
        tmp_node = toPt(m_CategoryIds);
		pt.add_child("categoryIds", tmp_node);
		tmp_node.clear();
	}
	pt.put("hasStocks", m_HasStocks);
	return pt;
}

void GenerateStocksOnWarehousesReportRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_CampaignId = pt.get("campaignId", 0L);
	// push all items of WarehouseIds into member
	if (pt.get_child_optional("warehouseIds")) {
        m_WarehouseIds = fromPt<std::vector<int64_t>>(pt.get_child("warehouseIds"));
	}
	m_ReportDate = pt.get("reportDate", "");
	// push all items of CategoryIds into member
	if (pt.get_child_optional("categoryIds")) {
        m_CategoryIds = fromPt<std::vector<int64_t>>(pt.get_child("categoryIds"));
	}
	m_HasStocks = pt.get("hasStocks", false);
}

int64_t GenerateStocksOnWarehousesReportRequest::getCampaignId() const
{
    return m_CampaignId;
}

void GenerateStocksOnWarehousesReportRequest::setCampaignId(int64_t value)
{
    m_CampaignId = value;
}


std::vector<int64_t> GenerateStocksOnWarehousesReportRequest::getWarehouseIds() const
{
    return m_WarehouseIds;
}

void GenerateStocksOnWarehousesReportRequest::setWarehouseIds(std::vector<int64_t> value)
{
    m_WarehouseIds = value;
}


std::string GenerateStocksOnWarehousesReportRequest::getReportDate() const
{
    return m_ReportDate;
}

void GenerateStocksOnWarehousesReportRequest::setReportDate(std::string value)
{
    m_ReportDate = value;
}


std::vector<int64_t> GenerateStocksOnWarehousesReportRequest::getCategoryIds() const
{
    return m_CategoryIds;
}

void GenerateStocksOnWarehousesReportRequest::setCategoryIds(std::vector<int64_t> value)
{
    m_CategoryIds = value;
}


bool GenerateStocksOnWarehousesReportRequest::isHasStocks() const
{
    return m_HasStocks;
}

void GenerateStocksOnWarehousesReportRequest::setHasStocks(bool value)
{
    m_HasStocks = value;
}



std::vector<GenerateStocksOnWarehousesReportRequest> createGenerateStocksOnWarehousesReportRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<GenerateStocksOnWarehousesReportRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(GenerateStocksOnWarehousesReportRequest(child.second));
    }

    return vec;
}

}
}
}
}

