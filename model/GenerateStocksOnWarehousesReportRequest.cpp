/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GenerateStocksOnWarehousesReportRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GenerateStocksOnWarehousesReportRequest::GenerateStocksOnWarehousesReportRequest()
{
    m_CampaignId = 0L;
    m_WarehouseIdsIsSet = false;
    m_ReportDateIsSet = false;
    m_CategoryIdsIsSet = false;
    m_HasStocks = false;
    m_HasStocksIsSet = false;
    
}

void GenerateStocksOnWarehousesReportRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GenerateStocksOnWarehousesReportRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GenerateStocksOnWarehousesReportRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GenerateStocksOnWarehousesReportRequest" : pathPrefix;

             
    if (warehouseIdsIsSet())
    {
        const std::vector<int64_t>& value = m_WarehouseIds;
        const std::string currentValuePath = _pathPrefix + ".warehouseIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
             
    if (categoryIdsIsSet())
    {
        const std::vector<int64_t>& value = m_CategoryIds;
        const std::string currentValuePath = _pathPrefix + ".categoryIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool GenerateStocksOnWarehousesReportRequest::operator==(const GenerateStocksOnWarehousesReportRequest& rhs) const
{
    return
    
    
    (getCampaignId() == rhs.getCampaignId())
     &&
    
    
    ((!warehouseIdsIsSet() && !rhs.warehouseIdsIsSet()) || (warehouseIdsIsSet() && rhs.warehouseIdsIsSet() && getWarehouseIds() == rhs.getWarehouseIds())) &&
    
    
    ((!reportDateIsSet() && !rhs.reportDateIsSet()) || (reportDateIsSet() && rhs.reportDateIsSet() && getReportDate() == rhs.getReportDate())) &&
    
    
    ((!categoryIdsIsSet() && !rhs.categoryIdsIsSet()) || (categoryIdsIsSet() && rhs.categoryIdsIsSet() && getCategoryIds() == rhs.getCategoryIds())) &&
    
    
    ((!hasStocksIsSet() && !rhs.hasStocksIsSet()) || (hasStocksIsSet() && rhs.hasStocksIsSet() && isHasStocks() == rhs.isHasStocks()))
    
    ;
}

bool GenerateStocksOnWarehousesReportRequest::operator!=(const GenerateStocksOnWarehousesReportRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GenerateStocksOnWarehousesReportRequest& o)
{
    j = nlohmann::json::object();
    j["campaignId"] = o.m_CampaignId;
    if(o.warehouseIdsIsSet() || !o.m_WarehouseIds.empty())
        j["warehouseIds"] = o.m_WarehouseIds;
    if(o.reportDateIsSet())
        j["reportDate"] = o.m_ReportDate;
    if(o.categoryIdsIsSet() || !o.m_CategoryIds.empty())
        j["categoryIds"] = o.m_CategoryIds;
    if(o.hasStocksIsSet())
        j["hasStocks"] = o.m_HasStocks;
    
}

void from_json(const nlohmann::json& j, GenerateStocksOnWarehousesReportRequest& o)
{
    j.at("campaignId").get_to(o.m_CampaignId);
    if(j.find("warehouseIds") != j.end())
    {
        j.at("warehouseIds").get_to(o.m_WarehouseIds);
        o.m_WarehouseIdsIsSet = true;
    } 
    if(j.find("reportDate") != j.end())
    {
        j.at("reportDate").get_to(o.m_ReportDate);
        o.m_ReportDateIsSet = true;
    } 
    if(j.find("categoryIds") != j.end())
    {
        j.at("categoryIds").get_to(o.m_CategoryIds);
        o.m_CategoryIdsIsSet = true;
    } 
    if(j.find("hasStocks") != j.end())
    {
        j.at("hasStocks").get_to(o.m_HasStocks);
        o.m_HasStocksIsSet = true;
    } 
    
}

int64_t GenerateStocksOnWarehousesReportRequest::getCampaignId() const
{
    return m_CampaignId;
}
void GenerateStocksOnWarehousesReportRequest::setCampaignId(int64_t const value)
{
    m_CampaignId = value;
}
std::vector<int64_t> GenerateStocksOnWarehousesReportRequest::getWarehouseIds() const
{
    return m_WarehouseIds;
}
void GenerateStocksOnWarehousesReportRequest::setWarehouseIds(std::vector<int64_t> const value)
{
    m_WarehouseIds = value;
    m_WarehouseIdsIsSet = true;
}
bool GenerateStocksOnWarehousesReportRequest::warehouseIdsIsSet() const
{
    return m_WarehouseIdsIsSet;
}
void GenerateStocksOnWarehousesReportRequest::unsetWarehouseIds()
{
    m_WarehouseIdsIsSet = false;
}
std::string GenerateStocksOnWarehousesReportRequest::getReportDate() const
{
    return m_ReportDate;
}
void GenerateStocksOnWarehousesReportRequest::setReportDate(std::string const& value)
{
    m_ReportDate = value;
    m_ReportDateIsSet = true;
}
bool GenerateStocksOnWarehousesReportRequest::reportDateIsSet() const
{
    return m_ReportDateIsSet;
}
void GenerateStocksOnWarehousesReportRequest::unsetReportDate()
{
    m_ReportDateIsSet = false;
}
std::vector<int64_t> GenerateStocksOnWarehousesReportRequest::getCategoryIds() const
{
    return m_CategoryIds;
}
void GenerateStocksOnWarehousesReportRequest::setCategoryIds(std::vector<int64_t> const value)
{
    m_CategoryIds = value;
    m_CategoryIdsIsSet = true;
}
bool GenerateStocksOnWarehousesReportRequest::categoryIdsIsSet() const
{
    return m_CategoryIdsIsSet;
}
void GenerateStocksOnWarehousesReportRequest::unsetCategoryIds()
{
    m_CategoryIdsIsSet = false;
}
bool GenerateStocksOnWarehousesReportRequest::isHasStocks() const
{
    return m_HasStocks;
}
void GenerateStocksOnWarehousesReportRequest::setHasStocks(bool const value)
{
    m_HasStocks = value;
    m_HasStocksIsSet = true;
}
bool GenerateStocksOnWarehousesReportRequest::hasStocksIsSet() const
{
    return m_HasStocksIsSet;
}
void GenerateStocksOnWarehousesReportRequest::unsetHasStocks()
{
    m_HasStocksIsSet = false;
}


} // namespace org::openapitools::server::model

