/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ParameterValueDTO.h
 *
 * Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — &#x60;ENUM&#x60;. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле &#x60;multivalue&#x60; имеет значение &#x60;true&#x60;.  Для этого в &#x60;parameterValues&#x60; передавайте каждое значение отдельно — несколько объектов с параметрами &#x60;parameterId&#x60;, &#x60;valueId&#x60; и &#x60;value&#x60;. Параметр &#x60;parameterId&#x60; должен быть одинаковым. 
 */

#ifndef ParameterValueDTO_H_
#define ParameterValueDTO_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — &#x60;ENUM&#x60;. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле &#x60;multivalue&#x60; имеет значение &#x60;true&#x60;.  Для этого в &#x60;parameterValues&#x60; передавайте каждое значение отдельно — несколько объектов с параметрами &#x60;parameterId&#x60;, &#x60;valueId&#x60; и &#x60;value&#x60;. Параметр &#x60;parameterId&#x60; должен быть одинаковым. 
/// </summary>
class  ParameterValueDTO
{
public:
    ParameterValueDTO();
    virtual ~ParameterValueDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ParameterValueDTO& rhs) const;
    bool operator!=(const ParameterValueDTO& rhs) const;

    /////////////////////////////////////////////
    /// ParameterValueDTO members

    /// <summary>
    /// Идентификатор характеристики.
    /// </summary>
    int64_t getParameterId() const;
    void setParameterId(int64_t const value);
    /// <summary>
    /// Идентификатор единицы измерения. Если вы не передали параметр &#x60;unitId&#x60;, используется единица измерения по умолчанию.
    /// </summary>
    int64_t getUnitId() const;
    void setUnitId(int64_t const value);
    bool unitIdIsSet() const;
    void unsetUnitId();
    /// <summary>
    /// Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа &#x60;ENUM&#x60;. 
    /// </summary>
    int64_t getValueId() const;
    void setValueId(int64_t const value);
    bool valueIdIsSet() const;
    void unsetValueId();
    /// <summary>
    /// Значение.
    /// </summary>
    std::string getValue() const;
    void setValue(std::string const& value);
    bool valueIsSet() const;
    void unsetValue();

    friend  void to_json(nlohmann::json& j, const ParameterValueDTO& o);
    friend  void from_json(const nlohmann::json& j, ParameterValueDTO& o);
protected:
    int64_t m_ParameterId;

    int64_t m_UnitId;
    bool m_UnitIdIsSet;
    int64_t m_ValueId;
    bool m_ValueIdIsSet;
    std::string m_Value;
    bool m_ValueIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ParameterValueDTO_H_ */
