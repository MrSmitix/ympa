/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PriceSuggestDTO.h
 *
 * Тип цены.
 */

#ifndef PriceSuggestDTO_H_
#define PriceSuggestDTO_H_



#include "PriceSuggestType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Тип цены.
/// </summary>
class  PriceSuggestDTO 
{
public:
    PriceSuggestDTO() = default;
    explicit PriceSuggestDTO(boost::property_tree::ptree const& pt);
    virtual ~PriceSuggestDTO() = default;

    PriceSuggestDTO(const PriceSuggestDTO& other) = default; // copy constructor
    PriceSuggestDTO(PriceSuggestDTO&& other) noexcept = default; // move constructor

    PriceSuggestDTO& operator=(const PriceSuggestDTO& other) = default; // copy assignment
    PriceSuggestDTO& operator=(PriceSuggestDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PriceSuggestDTO members

    /// <summary>
    /// 
    /// </summary>
    PriceSuggestType getType() const;
    void setType(PriceSuggestType value);

    /// <summary>
    /// Цена в рублях.
    /// </summary>
    double getPrice() const;
    void setPrice(double value);

protected:
    PriceSuggestType m_Type = PriceSuggestType{};
    double m_Price = 0.0;
};

std::vector<PriceSuggestDTO> createPriceSuggestDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PriceSuggestDTO>(const PriceSuggestDTO& val) {
    return val.toPropertyTree();
}

template<>
inline PriceSuggestDTO fromPt<PriceSuggestDTO>(const boost::property_tree::ptree& pt) {
    PriceSuggestDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PriceSuggestDTO_H_ */
