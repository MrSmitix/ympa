/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetOfferRecommendationsRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetOfferRecommendationsRequest::GetOfferRecommendationsRequest()
{
    m_OfferIdsIsSet = false;
    m_CofinancePriceFilterIsSet = false;
    m_RecommendedCofinancePriceFilterIsSet = false;
    m_CompetitivenessFilterIsSet = false;
    
}

void GetOfferRecommendationsRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetOfferRecommendationsRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetOfferRecommendationsRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetOfferRecommendationsRequest" : pathPrefix;

         
    if (offerIdsIsSet())
    {
        const std::vector<std::string>& value = m_OfferIds;
        const std::string currentValuePath = _pathPrefix + ".offerIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }
 
                i++;
            }
        }

    }
                
    return success;
}

bool GetOfferRecommendationsRequest::operator==(const GetOfferRecommendationsRequest& rhs) const
{
    return
    
    
    
    ((!offerIdsIsSet() && !rhs.offerIdsIsSet()) || (offerIdsIsSet() && rhs.offerIdsIsSet() && getOfferIds() == rhs.getOfferIds())) &&
    
    
    ((!cofinancePriceFilterIsSet() && !rhs.cofinancePriceFilterIsSet()) || (cofinancePriceFilterIsSet() && rhs.cofinancePriceFilterIsSet() && getCofinancePriceFilter() == rhs.getCofinancePriceFilter())) &&
    
    
    ((!recommendedCofinancePriceFilterIsSet() && !rhs.recommendedCofinancePriceFilterIsSet()) || (recommendedCofinancePriceFilterIsSet() && rhs.recommendedCofinancePriceFilterIsSet() && getRecommendedCofinancePriceFilter() == rhs.getRecommendedCofinancePriceFilter())) &&
    
    
    ((!competitivenessFilterIsSet() && !rhs.competitivenessFilterIsSet()) || (competitivenessFilterIsSet() && rhs.competitivenessFilterIsSet() && getCompetitivenessFilter() == rhs.getCompetitivenessFilter()))
    
    ;
}

bool GetOfferRecommendationsRequest::operator!=(const GetOfferRecommendationsRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetOfferRecommendationsRequest& o)
{
    j = nlohmann::json::object();
    if(o.offerIdsIsSet() || !o.m_OfferIds.empty())
        j["offerIds"] = o.m_OfferIds;
    if(o.cofinancePriceFilterIsSet())
        j["cofinancePriceFilter"] = o.m_CofinancePriceFilter;
    if(o.recommendedCofinancePriceFilterIsSet())
        j["recommendedCofinancePriceFilter"] = o.m_RecommendedCofinancePriceFilter;
    if(o.competitivenessFilterIsSet())
        j["competitivenessFilter"] = o.m_CompetitivenessFilter;
    
}

void from_json(const nlohmann::json& j, GetOfferRecommendationsRequest& o)
{
    if(j.find("offerIds") != j.end())
    {
        j.at("offerIds").get_to(o.m_OfferIds);
        o.m_OfferIdsIsSet = true;
    } 
    if(j.find("cofinancePriceFilter") != j.end())
    {
        j.at("cofinancePriceFilter").get_to(o.m_CofinancePriceFilter);
        o.m_CofinancePriceFilterIsSet = true;
    } 
    if(j.find("recommendedCofinancePriceFilter") != j.end())
    {
        j.at("recommendedCofinancePriceFilter").get_to(o.m_RecommendedCofinancePriceFilter);
        o.m_RecommendedCofinancePriceFilterIsSet = true;
    } 
    if(j.find("competitivenessFilter") != j.end())
    {
        j.at("competitivenessFilter").get_to(o.m_CompetitivenessFilter);
        o.m_CompetitivenessFilterIsSet = true;
    } 
    
}

std::vector<std::string> GetOfferRecommendationsRequest::getOfferIds() const
{
    return m_OfferIds;
}
void GetOfferRecommendationsRequest::setOfferIds(std::vector<std::string> const& value)
{
    m_OfferIds = value;
    m_OfferIdsIsSet = true;
}
bool GetOfferRecommendationsRequest::offerIdsIsSet() const
{
    return m_OfferIdsIsSet;
}
void GetOfferRecommendationsRequest::unsetOfferIds()
{
    m_OfferIdsIsSet = false;
}
org::openapitools::server::model::FieldStateType GetOfferRecommendationsRequest::getCofinancePriceFilter() const
{
    return m_CofinancePriceFilter;
}
void GetOfferRecommendationsRequest::setCofinancePriceFilter(org::openapitools::server::model::FieldStateType const& value)
{
    m_CofinancePriceFilter = value;
    m_CofinancePriceFilterIsSet = true;
}
bool GetOfferRecommendationsRequest::cofinancePriceFilterIsSet() const
{
    return m_CofinancePriceFilterIsSet;
}
void GetOfferRecommendationsRequest::unsetCofinancePriceFilter()
{
    m_CofinancePriceFilterIsSet = false;
}
org::openapitools::server::model::FieldStateType GetOfferRecommendationsRequest::getRecommendedCofinancePriceFilter() const
{
    return m_RecommendedCofinancePriceFilter;
}
void GetOfferRecommendationsRequest::setRecommendedCofinancePriceFilter(org::openapitools::server::model::FieldStateType const& value)
{
    m_RecommendedCofinancePriceFilter = value;
    m_RecommendedCofinancePriceFilterIsSet = true;
}
bool GetOfferRecommendationsRequest::recommendedCofinancePriceFilterIsSet() const
{
    return m_RecommendedCofinancePriceFilterIsSet;
}
void GetOfferRecommendationsRequest::unsetRecommendedCofinancePriceFilter()
{
    m_RecommendedCofinancePriceFilterIsSet = false;
}
org::openapitools::server::model::PriceCompetitivenessType GetOfferRecommendationsRequest::getCompetitivenessFilter() const
{
    return m_CompetitivenessFilter;
}
void GetOfferRecommendationsRequest::setCompetitivenessFilter(org::openapitools::server::model::PriceCompetitivenessType const& value)
{
    m_CompetitivenessFilter = value;
    m_CompetitivenessFilterIsSet = true;
}
bool GetOfferRecommendationsRequest::competitivenessFilterIsSet() const
{
    return m_CompetitivenessFilterIsSet;
}
void GetOfferRecommendationsRequest::unsetCompetitivenessFilter()
{
    m_CompetitivenessFilterIsSet = false;
}


} // namespace org::openapitools::server::model

