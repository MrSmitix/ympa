/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CampaignDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CampaignDTO::CampaignDTO()
{
    m_Domain = "";
    m_DomainIsSet = false;
    m_Id = 0L;
    m_IdIsSet = false;
    m_ClientId = 0L;
    m_ClientIdIsSet = false;
    m_BusinessIsSet = false;
    m_PlacementTypeIsSet = false;
    
}

void CampaignDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CampaignDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CampaignDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CampaignDTO" : pathPrefix;

                        
    return success;
}

bool CampaignDTO::operator==(const CampaignDTO& rhs) const
{
    return
    
    
    
    ((!domainIsSet() && !rhs.domainIsSet()) || (domainIsSet() && rhs.domainIsSet() && getDomain() == rhs.getDomain())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!clientIdIsSet() && !rhs.clientIdIsSet()) || (clientIdIsSet() && rhs.clientIdIsSet() && getClientId() == rhs.getClientId())) &&
    
    
    ((!businessIsSet() && !rhs.businessIsSet()) || (businessIsSet() && rhs.businessIsSet() && getBusiness() == rhs.getBusiness())) &&
    
    
    ((!placementTypeIsSet() && !rhs.placementTypeIsSet()) || (placementTypeIsSet() && rhs.placementTypeIsSet() && getPlacementType() == rhs.getPlacementType()))
    
    ;
}

bool CampaignDTO::operator!=(const CampaignDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CampaignDTO& o)
{
    j = nlohmann::json::object();
    if(o.domainIsSet())
        j["domain"] = o.m_Domain;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.clientIdIsSet())
        j["clientId"] = o.m_ClientId;
    if(o.businessIsSet())
        j["business"] = o.m_Business;
    if(o.placementTypeIsSet())
        j["placementType"] = o.m_PlacementType;
    
}

void from_json(const nlohmann::json& j, CampaignDTO& o)
{
    if(j.find("domain") != j.end())
    {
        j.at("domain").get_to(o.m_Domain);
        o.m_DomainIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("clientId") != j.end())
    {
        j.at("clientId").get_to(o.m_ClientId);
        o.m_ClientIdIsSet = true;
    } 
    if(j.find("business") != j.end())
    {
        j.at("business").get_to(o.m_Business);
        o.m_BusinessIsSet = true;
    } 
    if(j.find("placementType") != j.end())
    {
        j.at("placementType").get_to(o.m_PlacementType);
        o.m_PlacementTypeIsSet = true;
    } 
    
}

std::string CampaignDTO::getDomain() const
{
    return m_Domain;
}
void CampaignDTO::setDomain(std::string const& value)
{
    m_Domain = value;
    m_DomainIsSet = true;
}
bool CampaignDTO::domainIsSet() const
{
    return m_DomainIsSet;
}
void CampaignDTO::unsetDomain()
{
    m_DomainIsSet = false;
}
int64_t CampaignDTO::getId() const
{
    return m_Id;
}
void CampaignDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool CampaignDTO::idIsSet() const
{
    return m_IdIsSet;
}
void CampaignDTO::unsetId()
{
    m_IdIsSet = false;
}
int64_t CampaignDTO::getClientId() const
{
    return m_ClientId;
}
void CampaignDTO::setClientId(int64_t const value)
{
    m_ClientId = value;
    m_ClientIdIsSet = true;
}
bool CampaignDTO::clientIdIsSet() const
{
    return m_ClientIdIsSet;
}
void CampaignDTO::unsetClientId()
{
    m_ClientIdIsSet = false;
}
org::openapitools::server::model::BusinessDTO CampaignDTO::getBusiness() const
{
    return m_Business;
}
void CampaignDTO::setBusiness(org::openapitools::server::model::BusinessDTO const& value)
{
    m_Business = value;
    m_BusinessIsSet = true;
}
bool CampaignDTO::businessIsSet() const
{
    return m_BusinessIsSet;
}
void CampaignDTO::unsetBusiness()
{
    m_BusinessIsSet = false;
}
org::openapitools::server::model::PlacementType CampaignDTO::getPlacementType() const
{
    return m_PlacementType;
}
void CampaignDTO::setPlacementType(org::openapitools::server::model::PlacementType const& value)
{
    m_PlacementType = value;
    m_PlacementTypeIsSet = true;
}
bool CampaignDTO::placementTypeIsSet() const
{
    return m_PlacementTypeIsSet;
}
void CampaignDTO::unsetPlacementType()
{
    m_PlacementTypeIsSet = false;
}


} // namespace org::openapitools::server::model

