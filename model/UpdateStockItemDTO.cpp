/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UpdateStockItemDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UpdateStockItemDTO::UpdateStockItemDTO()
{
    m_Count = 0L;
    m_UpdatedAt = "";
    m_UpdatedAtIsSet = false;
    
}

void UpdateStockItemDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UpdateStockItemDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UpdateStockItemDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UpdateStockItemDTO" : pathPrefix;

         
    
    /* Count */ {
        const int64_t& value = m_Count;
        const std::string currentValuePath = _pathPrefix + ".count";
                
        
        if (value < 0ll)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 2000000000ll)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 2000000000;";
        }

    }
        
    return success;
}

bool UpdateStockItemDTO::operator==(const UpdateStockItemDTO& rhs) const
{
    return
    
    
    (getCount() == rhs.getCount())
     &&
    
    
    ((!updatedAtIsSet() && !rhs.updatedAtIsSet()) || (updatedAtIsSet() && rhs.updatedAtIsSet() && getUpdatedAt() == rhs.getUpdatedAt()))
    
    ;
}

bool UpdateStockItemDTO::operator!=(const UpdateStockItemDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UpdateStockItemDTO& o)
{
    j = nlohmann::json::object();
    j["count"] = o.m_Count;
    if(o.updatedAtIsSet())
        j["updatedAt"] = o.m_UpdatedAt;
    
}

void from_json(const nlohmann::json& j, UpdateStockItemDTO& o)
{
    j.at("count").get_to(o.m_Count);
    if(j.find("updatedAt") != j.end())
    {
        j.at("updatedAt").get_to(o.m_UpdatedAt);
        o.m_UpdatedAtIsSet = true;
    } 
    
}

int64_t UpdateStockItemDTO::getCount() const
{
    return m_Count;
}
void UpdateStockItemDTO::setCount(int64_t const value)
{
    m_Count = value;
}
std::string UpdateStockItemDTO::getUpdatedAt() const
{
    return m_UpdatedAt;
}
void UpdateStockItemDTO::setUpdatedAt(std::string const& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}
bool UpdateStockItemDTO::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}
void UpdateStockItemDTO::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}


} // namespace org::openapitools::server::model

