/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderDeliveryDatesDTO.h
 *
 * Диапазон дат доставки.
 */

#ifndef OrderDeliveryDatesDTO_H_
#define OrderDeliveryDatesDTO_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Диапазон дат доставки.
/// </summary>
class  OrderDeliveryDatesDTO 
{
public:
    OrderDeliveryDatesDTO() = default;
    explicit OrderDeliveryDatesDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderDeliveryDatesDTO() = default;

    OrderDeliveryDatesDTO(const OrderDeliveryDatesDTO& other) = default; // copy constructor
    OrderDeliveryDatesDTO(OrderDeliveryDatesDTO&& other) noexcept = default; // move constructor

    OrderDeliveryDatesDTO& operator=(const OrderDeliveryDatesDTO& other) = default; // copy assignment
    OrderDeliveryDatesDTO& operator=(OrderDeliveryDatesDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrderDeliveryDatesDTO members

    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getFromDate() const;
    void setFromDate(std::string value);

    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getToDate() const;
    void setToDate(std::string value);

    /// <summary>
    /// Начало интервала времени доставки.  Передается только совместно с параметром &#x60;type&#x3D;DELIVERY&#x60;.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;. В качестве минут всегда должно быть указано &#x60;00&#x60; (исключение — &#x60;23:59&#x60;).  Минимальное значение: &#x60;00:00&#x60;. 
    /// </summary>
    std::string getFromTime() const;
    void setFromTime(std::string value);

    /// <summary>
    /// Конец интервала времени доставки.  Передается только совместно с параметром &#x60;type&#x3D;DELIVERY&#x60;.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;. В качестве минут всегда должно быть указано &#x60;00&#x60; (исключение — &#x60;23:59&#x60;).  Максимальное значение: &#x60;23:59&#x60;. 
    /// </summary>
    std::string getToTime() const;
    void setToTime(std::string value);

    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getRealDeliveryDate() const;
    void setRealDeliveryDate(std::string value);

protected:
    std::string m_FromDate = "";
    std::string m_ToDate = "";
    std::string m_FromTime = "";
    std::string m_ToTime = "";
    std::string m_RealDeliveryDate = "";
};

std::vector<OrderDeliveryDatesDTO> createOrderDeliveryDatesDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderDeliveryDatesDTO>(const OrderDeliveryDatesDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrderDeliveryDatesDTO fromPt<OrderDeliveryDatesDTO>(const boost::property_tree::ptree& pt) {
    OrderDeliveryDatesDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderDeliveryDatesDTO_H_ */
