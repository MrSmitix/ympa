/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateCompetitorsPositionReportRequest.h
 *
 * Данные, необходимые для генерации отчета.
 */

#ifndef GenerateCompetitorsPositionReportRequest_H_
#define GenerateCompetitorsPositionReportRequest_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Данные, необходимые для генерации отчета.
/// </summary>
class  GenerateCompetitorsPositionReportRequest 
{
public:
    GenerateCompetitorsPositionReportRequest() = default;
    explicit GenerateCompetitorsPositionReportRequest(boost::property_tree::ptree const& pt);
    virtual ~GenerateCompetitorsPositionReportRequest() = default;

    GenerateCompetitorsPositionReportRequest(const GenerateCompetitorsPositionReportRequest& other) = default; // copy constructor
    GenerateCompetitorsPositionReportRequest(GenerateCompetitorsPositionReportRequest&& other) noexcept = default; // move constructor

    GenerateCompetitorsPositionReportRequest& operator=(const GenerateCompetitorsPositionReportRequest& other) = default; // copy assignment
    GenerateCompetitorsPositionReportRequest& operator=(GenerateCompetitorsPositionReportRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GenerateCompetitorsPositionReportRequest members

    /// <summary>
    /// Идентификатор бизнеса.
    /// </summary>
    int64_t getBusinessId() const;
    void setBusinessId(int64_t value);

    /// <summary>
    /// Идентификатор категории.
    /// </summary>
    int64_t getCategoryId() const;
    void setCategoryId(int64_t value);

    /// <summary>
    /// Начало периода, включительно.
    /// </summary>
    std::string getDateFrom() const;
    void setDateFrom(std::string value);

    /// <summary>
    /// Конец периода, включительно.
    /// </summary>
    std::string getDateTo() const;
    void setDateTo(std::string value);

protected:
    int64_t m_BusinessId = 0L;
    int64_t m_CategoryId = 0L;
    std::string m_DateFrom = "";
    std::string m_DateTo = "";
};

std::vector<GenerateCompetitorsPositionReportRequest> createGenerateCompetitorsPositionReportRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GenerateCompetitorsPositionReportRequest>(const GenerateCompetitorsPositionReportRequest& val) {
    return val.toPropertyTree();
}

template<>
inline GenerateCompetitorsPositionReportRequest fromPt<GenerateCompetitorsPositionReportRequest>(const boost::property_tree::ptree& pt) {
    GenerateCompetitorsPositionReportRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GenerateCompetitorsPositionReportRequest_H_ */
