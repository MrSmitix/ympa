/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * QuantumDTO.h
 *
 * Настройка продажи квантами.  Чтобы сбросить установленные ранее значения, передайте пустой параметр &#x60;quantum&#x60;.  {% cut \&quot;Пример\&quot; %}  &#x60;&#x60;&#x60;json {   \&quot;offers\&quot;: [     {       \&quot;offerId\&quot;: \&quot;08e35dc1-89a2-11e3-8055-0015e9b8c48d\&quot;,       \&quot;quantum\&quot;: {}     }   ] } &#x60;&#x60;&#x60;  {% endcut %} 
 */

#ifndef QuantumDTO_H_
#define QuantumDTO_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Настройка продажи квантами.  Чтобы сбросить установленные ранее значения, передайте пустой параметр &#x60;quantum&#x60;.  {% cut \&quot;Пример\&quot; %}  &#x60;&#x60;&#x60;json {   \&quot;offers\&quot;: [     {       \&quot;offerId\&quot;: \&quot;08e35dc1-89a2-11e3-8055-0015e9b8c48d\&quot;,       \&quot;quantum\&quot;: {}     }   ] } &#x60;&#x60;&#x60;  {% endcut %} 
/// </summary>
class  QuantumDTO 
{
public:
    QuantumDTO() = default;
    explicit QuantumDTO(boost::property_tree::ptree const& pt);
    virtual ~QuantumDTO() = default;

    QuantumDTO(const QuantumDTO& other) = default; // copy constructor
    QuantumDTO(QuantumDTO&& other) noexcept = default; // move constructor

    QuantumDTO& operator=(const QuantumDTO& other) = default; // copy assignment
    QuantumDTO& operator=(QuantumDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// QuantumDTO members

    /// <summary>
    /// Минимальное количество единиц товара в заказе. Например, если указать 10, покупатель сможет добавить в корзину не меньше 10 единиц.  ⚠️ Если количество товара на складе меньше заданного, ограничение не сработает и покупатель сможет его заказать. 
    /// </summary>
    int32_t getMinQuantity() const;
    void setMinQuantity(int32_t value);

    /// <summary>
    /// На сколько единиц покупатель сможет увеличить количество товара в корзине.  Например, если задать 5, покупатель сможет добавить к заказу только 5, 10, 15, ... единиц товара.  ⚠️ Если количество товара на складе не дотягивает до кванта, ограничение не сработает и покупатель сможет заказать количество, не кратное кванту. 
    /// </summary>
    int32_t getStepQuantity() const;
    void setStepQuantity(int32_t value);

protected:
    int32_t m_MinQuantity = 0;
    int32_t m_StepQuantity = 0;
};

std::vector<QuantumDTO> createQuantumDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<QuantumDTO>(const QuantumDTO& val) {
    return val.toPropertyTree();
}

template<>
inline QuantumDTO fromPt<QuantumDTO>(const boost::property_tree::ptree& pt) {
    QuantumDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* QuantumDTO_H_ */
