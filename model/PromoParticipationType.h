/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PromoParticipationType.h
 *
 * Какие акции вернутся:  * &#x60;PARTICIPATING_NOW&#x60; — текущие и будущие акции продавца.  * &#x60;PARTICIPATED&#x60; — завершенные акции продавца за последний год. Если за год их было меньше 15, в ответе придут 15 последних акций за все время. 
 */

#ifndef PromoParticipationType_H_
#define PromoParticipationType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Какие акции вернутся:  * &#x60;PARTICIPATING_NOW&#x60; — текущие и будущие акции продавца.  * &#x60;PARTICIPATED&#x60; — завершенные акции продавца за последний год. Если за год их было меньше 15, в ответе придут 15 последних акций за все время. 
/// </summary>
class  PromoParticipationType 
{
public:
    PromoParticipationType() = default;
    explicit PromoParticipationType(boost::property_tree::ptree const& pt);
    virtual ~PromoParticipationType() = default;

    PromoParticipationType(const PromoParticipationType& other) = default; // copy constructor
    PromoParticipationType(PromoParticipationType&& other) noexcept = default; // move constructor

    PromoParticipationType& operator=(const PromoParticipationType& other) = default; // copy assignment
    PromoParticipationType& operator=(PromoParticipationType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// PromoParticipationType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_PromoParticipationTypeEnumValue;
};

std::vector<PromoParticipationType> createPromoParticipationTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PromoParticipationType>(const PromoParticipationType& val) {
    return val.toPropertyTree();
}

template<>
inline PromoParticipationType fromPt<PromoParticipationType>(const boost::property_tree::ptree& pt) {
    PromoParticipationType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PromoParticipationType_H_ */
