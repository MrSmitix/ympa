/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferMappingDTO.h
 *
 * Информация о текущей карточке товара на Маркете.
 */

#ifndef OfferMappingDTO_H_
#define OfferMappingDTO_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о текущей карточке товара на Маркете.
/// </summary>
class  OfferMappingDTO 
{
public:
    OfferMappingDTO() = default;
    explicit OfferMappingDTO(boost::property_tree::ptree const& pt);
    virtual ~OfferMappingDTO() = default;

    OfferMappingDTO(const OfferMappingDTO& other) = default; // copy constructor
    OfferMappingDTO(OfferMappingDTO&& other) noexcept = default; // move constructor

    OfferMappingDTO& operator=(const OfferMappingDTO& other) = default; // copy assignment
    OfferMappingDTO& operator=(OfferMappingDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OfferMappingDTO members

    /// <summary>
    /// SKU на Маркете.
    /// </summary>
    int64_t getMarketSku() const;
    void setMarketSku(int64_t value);

    /// <summary>
    /// Идентификатор модели для текущей карточки товара на Маркете.  Например, две лопатки разных цветов имеют разные SKU на Маркете (параметр &#x60;marketSku&#x60;), но одинаковый идентификатор модели товара. 
    /// </summary>
    int64_t getModelId() const;
    void setModelId(int64_t value);

    /// <summary>
    /// Идентификатор категории для текущей карточки товара на Маркете.
    /// </summary>
    int64_t getCategoryId() const;
    void setCategoryId(int64_t value);

protected:
    int64_t m_MarketSku = 0L;
    int64_t m_ModelId = 0L;
    int64_t m_CategoryId = 0L;
};

std::vector<OfferMappingDTO> createOfferMappingDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OfferMappingDTO>(const OfferMappingDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OfferMappingDTO fromPt<OfferMappingDTO>(const boost::property_tree::ptree& pt) {
    OfferMappingDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OfferMappingDTO_H_ */
