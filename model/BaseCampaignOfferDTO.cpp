/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BaseCampaignOfferDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BaseCampaignOfferDTO::BaseCampaignOfferDTO()
{
    m_OfferId = "";
    m_QuantumIsSet = false;
    m_Available = false;
    m_AvailableIsSet = false;
    
}

void BaseCampaignOfferDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BaseCampaignOfferDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BaseCampaignOfferDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BaseCampaignOfferDTO" : pathPrefix;

         
    
    /* OfferId */ {
        const std::string& value = m_OfferId;
        const std::string currentValuePath = _pathPrefix + ".offerId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
            
    return success;
}

bool BaseCampaignOfferDTO::operator==(const BaseCampaignOfferDTO& rhs) const
{
    return
    
    
    (getOfferId() == rhs.getOfferId())
     &&
    
    
    ((!quantumIsSet() && !rhs.quantumIsSet()) || (quantumIsSet() && rhs.quantumIsSet() && getQuantum() == rhs.getQuantum())) &&
    
    
    ((!availableIsSet() && !rhs.availableIsSet()) || (availableIsSet() && rhs.availableIsSet() && isAvailable() == rhs.isAvailable()))
    
    ;
}

bool BaseCampaignOfferDTO::operator!=(const BaseCampaignOfferDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BaseCampaignOfferDTO& o)
{
    j = nlohmann::json::object();
    j["offerId"] = o.m_OfferId;
    if(o.quantumIsSet())
        j["quantum"] = o.m_Quantum;
    if(o.availableIsSet())
        j["available"] = o.m_Available;
    
}

void from_json(const nlohmann::json& j, BaseCampaignOfferDTO& o)
{
    j.at("offerId").get_to(o.m_OfferId);
    if(j.find("quantum") != j.end())
    {
        j.at("quantum").get_to(o.m_Quantum);
        o.m_QuantumIsSet = true;
    } 
    if(j.find("available") != j.end())
    {
        j.at("available").get_to(o.m_Available);
        o.m_AvailableIsSet = true;
    } 
    
}

std::string BaseCampaignOfferDTO::getOfferId() const
{
    return m_OfferId;
}
void BaseCampaignOfferDTO::setOfferId(std::string const& value)
{
    m_OfferId = value;
}
org::openapitools::server::model::QuantumDTO BaseCampaignOfferDTO::getQuantum() const
{
    return m_Quantum;
}
void BaseCampaignOfferDTO::setQuantum(org::openapitools::server::model::QuantumDTO const& value)
{
    m_Quantum = value;
    m_QuantumIsSet = true;
}
bool BaseCampaignOfferDTO::quantumIsSet() const
{
    return m_QuantumIsSet;
}
void BaseCampaignOfferDTO::unsetQuantum()
{
    m_QuantumIsSet = false;
}
bool BaseCampaignOfferDTO::isAvailable() const
{
    return m_Available;
}
void BaseCampaignOfferDTO::setAvailable(bool const value)
{
    m_Available = value;
    m_AvailableIsSet = true;
}
bool BaseCampaignOfferDTO::availableIsSet() const
{
    return m_AvailableIsSet;
}
void BaseCampaignOfferDTO::unsetAvailable()
{
    m_AvailableIsSet = false;
}


} // namespace org::openapitools::server::model

