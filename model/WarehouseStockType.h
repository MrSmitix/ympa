/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WarehouseStockType.h
 *
 * Тип остатков товаров на складе:  * &#x60;AVAILABLE&#x60; (соответствует типу «Доступный к заказу» в отчете «Остатки на складе» в кабинете продавца на Маркете) — товар, доступный для продажи.  * &#x60;DEFECT&#x60; (соответствует типу «Брак») — товар с браком.  * &#x60;EXPIRED&#x60; (соответствует типу «Просрочен») — товар с истекшим сроком годности.  * &#x60;FIT&#x60; (соответствует типу «Годный») — товар, который доступен для продажи или уже зарезервирован.  * &#x60;FREEZE&#x60; — товар, который зарезервирован для заказов.  * &#x60;QUARANTINE&#x60; (соответствует типу «Карантин») — товар, временно недоступный для продажи (например, товар перемещают из одного помещения склада в другое).  * &#x60;UTILIZATION&#x60; — товар, который будет утилизирован. 
 */

#ifndef WarehouseStockType_H_
#define WarehouseStockType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Тип остатков товаров на складе:  * &#x60;AVAILABLE&#x60; (соответствует типу «Доступный к заказу» в отчете «Остатки на складе» в кабинете продавца на Маркете) — товар, доступный для продажи.  * &#x60;DEFECT&#x60; (соответствует типу «Брак») — товар с браком.  * &#x60;EXPIRED&#x60; (соответствует типу «Просрочен») — товар с истекшим сроком годности.  * &#x60;FIT&#x60; (соответствует типу «Годный») — товар, который доступен для продажи или уже зарезервирован.  * &#x60;FREEZE&#x60; — товар, который зарезервирован для заказов.  * &#x60;QUARANTINE&#x60; (соответствует типу «Карантин») — товар, временно недоступный для продажи (например, товар перемещают из одного помещения склада в другое).  * &#x60;UTILIZATION&#x60; — товар, который будет утилизирован. 
/// </summary>
class  WarehouseStockType 
{
public:
    WarehouseStockType() = default;
    explicit WarehouseStockType(boost::property_tree::ptree const& pt);
    virtual ~WarehouseStockType() = default;

    WarehouseStockType(const WarehouseStockType& other) = default; // copy constructor
    WarehouseStockType(WarehouseStockType&& other) noexcept = default; // move constructor

    WarehouseStockType& operator=(const WarehouseStockType& other) = default; // copy assignment
    WarehouseStockType& operator=(WarehouseStockType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// WarehouseStockType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_WarehouseStockTypeEnumValue;
};

std::vector<WarehouseStockType> createWarehouseStockTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<WarehouseStockType>(const WarehouseStockType& val) {
    return val.toPropertyTree();
}

template<>
inline WarehouseStockType fromPt<WarehouseStockType>(const boost::property_tree::ptree& pt) {
    WarehouseStockType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* WarehouseStockType_H_ */
