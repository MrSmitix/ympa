/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GenerateUnitedNettingReportRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

GenerateUnitedNettingReportRequest::GenerateUnitedNettingReportRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string GenerateUnitedNettingReportRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void GenerateUnitedNettingReportRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree GenerateUnitedNettingReportRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("businessId", m_BusinessId);
	pt.put("dateTimeFrom", m_DateTimeFrom);
	pt.put("dateTimeTo", m_DateTimeTo);
	pt.put("dateFrom", m_DateFrom);
	pt.put("dateTo", m_DateTo);
	pt.put("bankOrderId", m_BankOrderId);
	pt.put("bankOrderDateTime", m_BankOrderDateTime);
	// generate tree for PlacementPrograms
    tmp_node.clear();
	if (!m_PlacementPrograms.empty()) {
        tmp_node = toPt(m_PlacementPrograms);
		pt.add_child("placementPrograms", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Inns
    tmp_node.clear();
	if (!m_Inns.empty()) {
        tmp_node = toPt(m_Inns);
		pt.add_child("inns", tmp_node);
		tmp_node.clear();
	}
	// generate tree for CampaignIds
    tmp_node.clear();
	if (!m_CampaignIds.empty()) {
        tmp_node = toPt(m_CampaignIds);
		pt.add_child("campaignIds", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void GenerateUnitedNettingReportRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_BusinessId = pt.get("businessId", 0L);
	m_DateTimeFrom = pt.get("dateTimeFrom", "");
	m_DateTimeTo = pt.get("dateTimeTo", "");
	m_DateFrom = pt.get("dateFrom", "");
	m_DateTo = pt.get("dateTo", "");
	m_BankOrderId = pt.get("bankOrderId", 0L);
	m_BankOrderDateTime = pt.get("bankOrderDateTime", "");
	// push all items of PlacementPrograms into member
	if (pt.get_child_optional("placementPrograms")) {
        m_PlacementPrograms = fromPt<std::vector<PlacementType>>(pt.get_child("placementPrograms"));
	}
	// push all items of Inns into member
	if (pt.get_child_optional("inns")) {
        m_Inns = fromPt<std::vector<std::string>>(pt.get_child("inns"));
	}
	// push all items of CampaignIds into member
	if (pt.get_child_optional("campaignIds")) {
        m_CampaignIds = fromPt<std::vector<int64_t>>(pt.get_child("campaignIds"));
	}
}

int64_t GenerateUnitedNettingReportRequest::getBusinessId() const
{
    return m_BusinessId;
}

void GenerateUnitedNettingReportRequest::setBusinessId(int64_t value)
{
    m_BusinessId = value;
}


std::string GenerateUnitedNettingReportRequest::getDateTimeFrom() const
{
    return m_DateTimeFrom;
}

void GenerateUnitedNettingReportRequest::setDateTimeFrom(std::string value)
{
    m_DateTimeFrom = value;
}


std::string GenerateUnitedNettingReportRequest::getDateTimeTo() const
{
    return m_DateTimeTo;
}

void GenerateUnitedNettingReportRequest::setDateTimeTo(std::string value)
{
    m_DateTimeTo = value;
}


std::string GenerateUnitedNettingReportRequest::getDateFrom() const
{
    return m_DateFrom;
}

void GenerateUnitedNettingReportRequest::setDateFrom(std::string value)
{
    m_DateFrom = value;
}


std::string GenerateUnitedNettingReportRequest::getDateTo() const
{
    return m_DateTo;
}

void GenerateUnitedNettingReportRequest::setDateTo(std::string value)
{
    m_DateTo = value;
}


int64_t GenerateUnitedNettingReportRequest::getBankOrderId() const
{
    return m_BankOrderId;
}

void GenerateUnitedNettingReportRequest::setBankOrderId(int64_t value)
{
    m_BankOrderId = value;
}


std::string GenerateUnitedNettingReportRequest::getBankOrderDateTime() const
{
    return m_BankOrderDateTime;
}

void GenerateUnitedNettingReportRequest::setBankOrderDateTime(std::string value)
{
    m_BankOrderDateTime = value;
}


std::vector<PlacementType> GenerateUnitedNettingReportRequest::getPlacementPrograms() const
{
    return m_PlacementPrograms;
}

void GenerateUnitedNettingReportRequest::setPlacementPrograms(std::vector<PlacementType> value)
{
    m_PlacementPrograms = value;
}


std::vector<std::string> GenerateUnitedNettingReportRequest::getInns() const
{
    return m_Inns;
}

void GenerateUnitedNettingReportRequest::setInns(std::vector<std::string> value)
{
    m_Inns = value;
}


std::vector<int64_t> GenerateUnitedNettingReportRequest::getCampaignIds() const
{
    return m_CampaignIds;
}

void GenerateUnitedNettingReportRequest::setCampaignIds(std::vector<int64_t> value)
{
    m_CampaignIds = value;
}



std::vector<GenerateUnitedNettingReportRequest> createGenerateUnitedNettingReportRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<GenerateUnitedNettingReportRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(GenerateUnitedNettingReportRequest(child.second));
    }

    return vec;
}

}
}
}
}

