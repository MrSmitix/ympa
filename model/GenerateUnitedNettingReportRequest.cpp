/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GenerateUnitedNettingReportRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GenerateUnitedNettingReportRequest::GenerateUnitedNettingReportRequest()
{
    m_BusinessId = 0L;
    m_DateTimeFrom = "";
    m_DateTimeFromIsSet = false;
    m_DateTimeTo = "";
    m_DateTimeToIsSet = false;
    m_DateFromIsSet = false;
    m_DateToIsSet = false;
    m_BankOrderId = 0L;
    m_BankOrderIdIsSet = false;
    m_BankOrderDateTime = "";
    m_BankOrderDateTimeIsSet = false;
    m_PlacementProgramsIsSet = false;
    m_InnsIsSet = false;
    m_CampaignIdsIsSet = false;
    
}

void GenerateUnitedNettingReportRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GenerateUnitedNettingReportRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GenerateUnitedNettingReportRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GenerateUnitedNettingReportRequest" : pathPrefix;

                                     
    if (placementProgramsIsSet())
    {
        const std::vector<org::openapitools::server::model::PlacementType>& value = m_PlacementPrograms;
        const std::string currentValuePath = _pathPrefix + ".placementPrograms";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::PlacementType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
         
    if (innsIsSet())
    {
        const std::vector<std::string>& value = m_Inns;
        const std::string currentValuePath = _pathPrefix + ".inns";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (campaignIdsIsSet())
    {
        const std::vector<int64_t>& value = m_CampaignIds;
        const std::string currentValuePath = _pathPrefix + ".campaignIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool GenerateUnitedNettingReportRequest::operator==(const GenerateUnitedNettingReportRequest& rhs) const
{
    return
    
    
    (getBusinessId() == rhs.getBusinessId())
     &&
    
    
    ((!dateTimeFromIsSet() && !rhs.dateTimeFromIsSet()) || (dateTimeFromIsSet() && rhs.dateTimeFromIsSet() && getDateTimeFrom() == rhs.getDateTimeFrom())) &&
    
    
    ((!dateTimeToIsSet() && !rhs.dateTimeToIsSet()) || (dateTimeToIsSet() && rhs.dateTimeToIsSet() && getDateTimeTo() == rhs.getDateTimeTo())) &&
    
    
    ((!dateFromIsSet() && !rhs.dateFromIsSet()) || (dateFromIsSet() && rhs.dateFromIsSet() && getDateFrom() == rhs.getDateFrom())) &&
    
    
    ((!dateToIsSet() && !rhs.dateToIsSet()) || (dateToIsSet() && rhs.dateToIsSet() && getDateTo() == rhs.getDateTo())) &&
    
    
    ((!bankOrderIdIsSet() && !rhs.bankOrderIdIsSet()) || (bankOrderIdIsSet() && rhs.bankOrderIdIsSet() && getBankOrderId() == rhs.getBankOrderId())) &&
    
    
    ((!bankOrderDateTimeIsSet() && !rhs.bankOrderDateTimeIsSet()) || (bankOrderDateTimeIsSet() && rhs.bankOrderDateTimeIsSet() && getBankOrderDateTime() == rhs.getBankOrderDateTime())) &&
    
    
    ((!placementProgramsIsSet() && !rhs.placementProgramsIsSet()) || (placementProgramsIsSet() && rhs.placementProgramsIsSet() && getPlacementPrograms() == rhs.getPlacementPrograms())) &&
    
    
    ((!innsIsSet() && !rhs.innsIsSet()) || (innsIsSet() && rhs.innsIsSet() && getInns() == rhs.getInns())) &&
    
    
    ((!campaignIdsIsSet() && !rhs.campaignIdsIsSet()) || (campaignIdsIsSet() && rhs.campaignIdsIsSet() && getCampaignIds() == rhs.getCampaignIds()))
    
    ;
}

bool GenerateUnitedNettingReportRequest::operator!=(const GenerateUnitedNettingReportRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GenerateUnitedNettingReportRequest& o)
{
    j = nlohmann::json::object();
    j["businessId"] = o.m_BusinessId;
    if(o.dateTimeFromIsSet())
        j["dateTimeFrom"] = o.m_DateTimeFrom;
    if(o.dateTimeToIsSet())
        j["dateTimeTo"] = o.m_DateTimeTo;
    if(o.dateFromIsSet())
        j["dateFrom"] = o.m_DateFrom;
    if(o.dateToIsSet())
        j["dateTo"] = o.m_DateTo;
    if(o.bankOrderIdIsSet())
        j["bankOrderId"] = o.m_BankOrderId;
    if(o.bankOrderDateTimeIsSet())
        j["bankOrderDateTime"] = o.m_BankOrderDateTime;
    if(o.placementProgramsIsSet() || !o.m_PlacementPrograms.empty())
        j["placementPrograms"] = o.m_PlacementPrograms;
    if(o.innsIsSet() || !o.m_Inns.empty())
        j["inns"] = o.m_Inns;
    if(o.campaignIdsIsSet() || !o.m_CampaignIds.empty())
        j["campaignIds"] = o.m_CampaignIds;
    
}

void from_json(const nlohmann::json& j, GenerateUnitedNettingReportRequest& o)
{
    j.at("businessId").get_to(o.m_BusinessId);
    if(j.find("dateTimeFrom") != j.end())
    {
        j.at("dateTimeFrom").get_to(o.m_DateTimeFrom);
        o.m_DateTimeFromIsSet = true;
    } 
    if(j.find("dateTimeTo") != j.end())
    {
        j.at("dateTimeTo").get_to(o.m_DateTimeTo);
        o.m_DateTimeToIsSet = true;
    } 
    if(j.find("dateFrom") != j.end())
    {
        j.at("dateFrom").get_to(o.m_DateFrom);
        o.m_DateFromIsSet = true;
    } 
    if(j.find("dateTo") != j.end())
    {
        j.at("dateTo").get_to(o.m_DateTo);
        o.m_DateToIsSet = true;
    } 
    if(j.find("bankOrderId") != j.end())
    {
        j.at("bankOrderId").get_to(o.m_BankOrderId);
        o.m_BankOrderIdIsSet = true;
    } 
    if(j.find("bankOrderDateTime") != j.end())
    {
        j.at("bankOrderDateTime").get_to(o.m_BankOrderDateTime);
        o.m_BankOrderDateTimeIsSet = true;
    } 
    if(j.find("placementPrograms") != j.end())
    {
        j.at("placementPrograms").get_to(o.m_PlacementPrograms);
        o.m_PlacementProgramsIsSet = true;
    } 
    if(j.find("inns") != j.end())
    {
        j.at("inns").get_to(o.m_Inns);
        o.m_InnsIsSet = true;
    } 
    if(j.find("campaignIds") != j.end())
    {
        j.at("campaignIds").get_to(o.m_CampaignIds);
        o.m_CampaignIdsIsSet = true;
    } 
    
}

int64_t GenerateUnitedNettingReportRequest::getBusinessId() const
{
    return m_BusinessId;
}
void GenerateUnitedNettingReportRequest::setBusinessId(int64_t const value)
{
    m_BusinessId = value;
}
std::string GenerateUnitedNettingReportRequest::getDateTimeFrom() const
{
    return m_DateTimeFrom;
}
void GenerateUnitedNettingReportRequest::setDateTimeFrom(std::string const& value)
{
    m_DateTimeFrom = value;
    m_DateTimeFromIsSet = true;
}
bool GenerateUnitedNettingReportRequest::dateTimeFromIsSet() const
{
    return m_DateTimeFromIsSet;
}
void GenerateUnitedNettingReportRequest::unsetDateTimeFrom()
{
    m_DateTimeFromIsSet = false;
}
std::string GenerateUnitedNettingReportRequest::getDateTimeTo() const
{
    return m_DateTimeTo;
}
void GenerateUnitedNettingReportRequest::setDateTimeTo(std::string const& value)
{
    m_DateTimeTo = value;
    m_DateTimeToIsSet = true;
}
bool GenerateUnitedNettingReportRequest::dateTimeToIsSet() const
{
    return m_DateTimeToIsSet;
}
void GenerateUnitedNettingReportRequest::unsetDateTimeTo()
{
    m_DateTimeToIsSet = false;
}
std::string GenerateUnitedNettingReportRequest::getDateFrom() const
{
    return m_DateFrom;
}
void GenerateUnitedNettingReportRequest::setDateFrom(std::string const& value)
{
    m_DateFrom = value;
    m_DateFromIsSet = true;
}
bool GenerateUnitedNettingReportRequest::dateFromIsSet() const
{
    return m_DateFromIsSet;
}
void GenerateUnitedNettingReportRequest::unsetDateFrom()
{
    m_DateFromIsSet = false;
}
std::string GenerateUnitedNettingReportRequest::getDateTo() const
{
    return m_DateTo;
}
void GenerateUnitedNettingReportRequest::setDateTo(std::string const& value)
{
    m_DateTo = value;
    m_DateToIsSet = true;
}
bool GenerateUnitedNettingReportRequest::dateToIsSet() const
{
    return m_DateToIsSet;
}
void GenerateUnitedNettingReportRequest::unsetDateTo()
{
    m_DateToIsSet = false;
}
int64_t GenerateUnitedNettingReportRequest::getBankOrderId() const
{
    return m_BankOrderId;
}
void GenerateUnitedNettingReportRequest::setBankOrderId(int64_t const value)
{
    m_BankOrderId = value;
    m_BankOrderIdIsSet = true;
}
bool GenerateUnitedNettingReportRequest::bankOrderIdIsSet() const
{
    return m_BankOrderIdIsSet;
}
void GenerateUnitedNettingReportRequest::unsetBankOrderId()
{
    m_BankOrderIdIsSet = false;
}
std::string GenerateUnitedNettingReportRequest::getBankOrderDateTime() const
{
    return m_BankOrderDateTime;
}
void GenerateUnitedNettingReportRequest::setBankOrderDateTime(std::string const& value)
{
    m_BankOrderDateTime = value;
    m_BankOrderDateTimeIsSet = true;
}
bool GenerateUnitedNettingReportRequest::bankOrderDateTimeIsSet() const
{
    return m_BankOrderDateTimeIsSet;
}
void GenerateUnitedNettingReportRequest::unsetBankOrderDateTime()
{
    m_BankOrderDateTimeIsSet = false;
}
std::vector<org::openapitools::server::model::PlacementType> GenerateUnitedNettingReportRequest::getPlacementPrograms() const
{
    return m_PlacementPrograms;
}
void GenerateUnitedNettingReportRequest::setPlacementPrograms(std::vector<org::openapitools::server::model::PlacementType> const& value)
{
    m_PlacementPrograms = value;
    m_PlacementProgramsIsSet = true;
}
bool GenerateUnitedNettingReportRequest::placementProgramsIsSet() const
{
    return m_PlacementProgramsIsSet;
}
void GenerateUnitedNettingReportRequest::unsetPlacementPrograms()
{
    m_PlacementProgramsIsSet = false;
}
std::vector<std::string> GenerateUnitedNettingReportRequest::getInns() const
{
    return m_Inns;
}
void GenerateUnitedNettingReportRequest::setInns(std::vector<std::string> const& value)
{
    m_Inns = value;
    m_InnsIsSet = true;
}
bool GenerateUnitedNettingReportRequest::innsIsSet() const
{
    return m_InnsIsSet;
}
void GenerateUnitedNettingReportRequest::unsetInns()
{
    m_InnsIsSet = false;
}
std::vector<int64_t> GenerateUnitedNettingReportRequest::getCampaignIds() const
{
    return m_CampaignIds;
}
void GenerateUnitedNettingReportRequest::setCampaignIds(std::vector<int64_t> const value)
{
    m_CampaignIds = value;
    m_CampaignIdsIsSet = true;
}
bool GenerateUnitedNettingReportRequest::campaignIdsIsSet() const
{
    return m_CampaignIdsIsSet;
}
void GenerateUnitedNettingReportRequest::unsetCampaignIds()
{
    m_CampaignIdsIsSet = false;
}


} // namespace org::openapitools::server::model

