/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetBidsInfoRequest.h
 *
 * description.
 */

#ifndef GetBidsInfoRequest_H_
#define GetBidsInfoRequest_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// description.
/// </summary>
class  GetBidsInfoRequest 
{
public:
    GetBidsInfoRequest() = default;
    explicit GetBidsInfoRequest(boost::property_tree::ptree const& pt);
    virtual ~GetBidsInfoRequest() = default;

    GetBidsInfoRequest(const GetBidsInfoRequest& other) = default; // copy constructor
    GetBidsInfoRequest(GetBidsInfoRequest&& other) noexcept = default; // move constructor

    GetBidsInfoRequest& operator=(const GetBidsInfoRequest& other) = default; // copy assignment
    GetBidsInfoRequest& operator=(GetBidsInfoRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GetBidsInfoRequest members

    /// <summary>
    /// Список товаров, для которых нужно получить значения ставок.  Если список не задан, постранично возвращаются все товары со ставками.  Если список задан, результаты возвращаются одной страницей, а параметры &#x60;page_token&#x60; и &#x60;limit&#x60; игнорируются. 
    /// </summary>
    std::vector<std::string> getSkus() const;
    void setSkus(std::vector<std::string> value);

protected:
    std::vector<std::string> m_Skus;
};

std::vector<GetBidsInfoRequest> createGetBidsInfoRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GetBidsInfoRequest>(const GetBidsInfoRequest& val) {
    return val.toPropertyTree();
}

template<>
inline GetBidsInfoRequest fromPt<GetBidsInfoRequest>(const boost::property_tree::ptree& pt) {
    GetBidsInfoRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GetBidsInfoRequest_H_ */
