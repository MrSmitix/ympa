/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ModelPriceDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ModelPriceDTO::ModelPriceDTO()
{
    m_Avg = 0.0;
    m_AvgIsSet = false;
    m_Max = 0.0;
    m_MaxIsSet = false;
    m_Min = 0.0;
    m_MinIsSet = false;
    
}

void ModelPriceDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ModelPriceDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ModelPriceDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ModelPriceDTO" : pathPrefix;

                
    return success;
}

bool ModelPriceDTO::operator==(const ModelPriceDTO& rhs) const
{
    return
    
    
    
    ((!avgIsSet() && !rhs.avgIsSet()) || (avgIsSet() && rhs.avgIsSet() && getAvg() == rhs.getAvg())) &&
    
    
    ((!maxIsSet() && !rhs.maxIsSet()) || (maxIsSet() && rhs.maxIsSet() && getMax() == rhs.getMax())) &&
    
    
    ((!minIsSet() && !rhs.minIsSet()) || (minIsSet() && rhs.minIsSet() && getMin() == rhs.getMin()))
    
    ;
}

bool ModelPriceDTO::operator!=(const ModelPriceDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ModelPriceDTO& o)
{
    j = nlohmann::json::object();
    if(o.avgIsSet())
        j["avg"] = o.m_Avg;
    if(o.maxIsSet())
        j["max"] = o.m_Max;
    if(o.minIsSet())
        j["min"] = o.m_Min;
    
}

void from_json(const nlohmann::json& j, ModelPriceDTO& o)
{
    if(j.find("avg") != j.end())
    {
        j.at("avg").get_to(o.m_Avg);
        o.m_AvgIsSet = true;
    } 
    if(j.find("max") != j.end())
    {
        j.at("max").get_to(o.m_Max);
        o.m_MaxIsSet = true;
    } 
    if(j.find("min") != j.end())
    {
        j.at("min").get_to(o.m_Min);
        o.m_MinIsSet = true;
    } 
    
}

double ModelPriceDTO::getAvg() const
{
    return m_Avg;
}
void ModelPriceDTO::setAvg(double const value)
{
    m_Avg = value;
    m_AvgIsSet = true;
}
bool ModelPriceDTO::avgIsSet() const
{
    return m_AvgIsSet;
}
void ModelPriceDTO::unsetAvg()
{
    m_AvgIsSet = false;
}
double ModelPriceDTO::getMax() const
{
    return m_Max;
}
void ModelPriceDTO::setMax(double const value)
{
    m_Max = value;
    m_MaxIsSet = true;
}
bool ModelPriceDTO::maxIsSet() const
{
    return m_MaxIsSet;
}
void ModelPriceDTO::unsetMax()
{
    m_MaxIsSet = false;
}
double ModelPriceDTO::getMin() const
{
    return m_Min;
}
void ModelPriceDTO::setMin(double const value)
{
    m_Min = value;
    m_MinIsSet = true;
}
bool ModelPriceDTO::minIsSet() const
{
    return m_MinIsSet;
}
void ModelPriceDTO::unsetMin()
{
    m_MinIsSet = false;
}


} // namespace org::openapitools::server::model

