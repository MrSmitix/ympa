/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CalculatedTariffType.h
 *
 * Услуга Маркета:  * &#x60;AGENCY_COMMISSION&#x60; — прием платежа покупателя.  * &#x60;PAYMENT_TRANSFER&#x60; — перевод платежа покупателя.  * &#x60;FEE&#x60; — размещение товара на Маркете.  * &#x60;DELIVERY_TO_CUSTOMER&#x60; — доставка покупателю.  * &#x60;CROSSREGIONAL_DELIVERY&#x60; — доставка в федеральный округ, город или населенный пункт.  * &#x60;EXPRESS_DELIVERY&#x60; — экспресс-доставка покупателю.  * &#x60;SORTING&#x60; — обработка заказа.  * &#x60;MIDDLE_MILE&#x60; — средняя миля.  Подробнее об услугах Маркета читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/introduction/rates/index.html). 
 */

#ifndef CalculatedTariffType_H_
#define CalculatedTariffType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Услуга Маркета:  * &#x60;AGENCY_COMMISSION&#x60; — прием платежа покупателя.  * &#x60;PAYMENT_TRANSFER&#x60; — перевод платежа покупателя.  * &#x60;FEE&#x60; — размещение товара на Маркете.  * &#x60;DELIVERY_TO_CUSTOMER&#x60; — доставка покупателю.  * &#x60;CROSSREGIONAL_DELIVERY&#x60; — доставка в федеральный округ, город или населенный пункт.  * &#x60;EXPRESS_DELIVERY&#x60; — экспресс-доставка покупателю.  * &#x60;SORTING&#x60; — обработка заказа.  * &#x60;MIDDLE_MILE&#x60; — средняя миля.  Подробнее об услугах Маркета читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/introduction/rates/index.html). 
/// </summary>
class  CalculatedTariffType 
{
public:
    CalculatedTariffType() = default;
    explicit CalculatedTariffType(boost::property_tree::ptree const& pt);
    virtual ~CalculatedTariffType() = default;

    CalculatedTariffType(const CalculatedTariffType& other) = default; // copy constructor
    CalculatedTariffType(CalculatedTariffType&& other) noexcept = default; // move constructor

    CalculatedTariffType& operator=(const CalculatedTariffType& other) = default; // copy assignment
    CalculatedTariffType& operator=(CalculatedTariffType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// CalculatedTariffType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_CalculatedTariffTypeEnumValue;
};

std::vector<CalculatedTariffType> createCalculatedTariffTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CalculatedTariffType>(const CalculatedTariffType& val) {
    return val.toPropertyTree();
}

template<>
inline CalculatedTariffType fromPt<CalculatedTariffType>(const boost::property_tree::ptree& pt) {
    CalculatedTariffType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CalculatedTariffType_H_ */
