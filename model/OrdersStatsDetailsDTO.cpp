/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrdersStatsDetailsDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrdersStatsDetailsDTO::OrdersStatsDetailsDTO()
{
    m_ItemStatusIsSet = false;
    m_ItemCount = 0L;
    m_ItemCountIsSet = false;
    m_UpdateDateIsSet = false;
    m_StockTypeIsSet = false;
    
}

void OrdersStatsDetailsDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrdersStatsDetailsDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrdersStatsDetailsDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrdersStatsDetailsDTO" : pathPrefix;

                    
    return success;
}

bool OrdersStatsDetailsDTO::operator==(const OrdersStatsDetailsDTO& rhs) const
{
    return
    
    
    
    ((!itemStatusIsSet() && !rhs.itemStatusIsSet()) || (itemStatusIsSet() && rhs.itemStatusIsSet() && getItemStatus() == rhs.getItemStatus())) &&
    
    
    ((!itemCountIsSet() && !rhs.itemCountIsSet()) || (itemCountIsSet() && rhs.itemCountIsSet() && getItemCount() == rhs.getItemCount())) &&
    
    
    ((!updateDateIsSet() && !rhs.updateDateIsSet()) || (updateDateIsSet() && rhs.updateDateIsSet() && getUpdateDate() == rhs.getUpdateDate())) &&
    
    
    ((!stockTypeIsSet() && !rhs.stockTypeIsSet()) || (stockTypeIsSet() && rhs.stockTypeIsSet() && getStockType() == rhs.getStockType()))
    
    ;
}

bool OrdersStatsDetailsDTO::operator!=(const OrdersStatsDetailsDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrdersStatsDetailsDTO& o)
{
    j = nlohmann::json::object();
    if(o.itemStatusIsSet())
        j["itemStatus"] = o.m_ItemStatus;
    if(o.itemCountIsSet())
        j["itemCount"] = o.m_ItemCount;
    if(o.updateDateIsSet())
        j["updateDate"] = o.m_UpdateDate;
    if(o.stockTypeIsSet())
        j["stockType"] = o.m_StockType;
    
}

void from_json(const nlohmann::json& j, OrdersStatsDetailsDTO& o)
{
    if(j.find("itemStatus") != j.end())
    {
        j.at("itemStatus").get_to(o.m_ItemStatus);
        o.m_ItemStatusIsSet = true;
    } 
    if(j.find("itemCount") != j.end())
    {
        j.at("itemCount").get_to(o.m_ItemCount);
        o.m_ItemCountIsSet = true;
    } 
    if(j.find("updateDate") != j.end())
    {
        j.at("updateDate").get_to(o.m_UpdateDate);
        o.m_UpdateDateIsSet = true;
    } 
    if(j.find("stockType") != j.end())
    {
        j.at("stockType").get_to(o.m_StockType);
        o.m_StockTypeIsSet = true;
    } 
    
}

org::openapitools::server::model::OrdersStatsItemStatusType OrdersStatsDetailsDTO::getItemStatus() const
{
    return m_ItemStatus;
}
void OrdersStatsDetailsDTO::setItemStatus(org::openapitools::server::model::OrdersStatsItemStatusType const& value)
{
    m_ItemStatus = value;
    m_ItemStatusIsSet = true;
}
bool OrdersStatsDetailsDTO::itemStatusIsSet() const
{
    return m_ItemStatusIsSet;
}
void OrdersStatsDetailsDTO::unsetItemStatus()
{
    m_ItemStatusIsSet = false;
}
int64_t OrdersStatsDetailsDTO::getItemCount() const
{
    return m_ItemCount;
}
void OrdersStatsDetailsDTO::setItemCount(int64_t const value)
{
    m_ItemCount = value;
    m_ItemCountIsSet = true;
}
bool OrdersStatsDetailsDTO::itemCountIsSet() const
{
    return m_ItemCountIsSet;
}
void OrdersStatsDetailsDTO::unsetItemCount()
{
    m_ItemCountIsSet = false;
}
std::string OrdersStatsDetailsDTO::getUpdateDate() const
{
    return m_UpdateDate;
}
void OrdersStatsDetailsDTO::setUpdateDate(std::string const& value)
{
    m_UpdateDate = value;
    m_UpdateDateIsSet = true;
}
bool OrdersStatsDetailsDTO::updateDateIsSet() const
{
    return m_UpdateDateIsSet;
}
void OrdersStatsDetailsDTO::unsetUpdateDate()
{
    m_UpdateDateIsSet = false;
}
org::openapitools::server::model::OrdersStatsStockType OrdersStatsDetailsDTO::getStockType() const
{
    return m_StockType;
}
void OrdersStatsDetailsDTO::setStockType(org::openapitools::server::model::OrdersStatsStockType const& value)
{
    m_StockType = value;
    m_StockTypeIsSet = true;
}
bool OrdersStatsDetailsDTO::stockTypeIsSet() const
{
    return m_StockTypeIsSet;
}
void OrdersStatsDetailsDTO::unsetStockType()
{
    m_StockTypeIsSet = false;
}


} // namespace org::openapitools::server::model

