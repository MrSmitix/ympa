/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CampaignSettingsScheduleDTO.h
 *
 * Расписание работы службы доставки в своем регионе.
 */

#ifndef CampaignSettingsScheduleDTO_H_
#define CampaignSettingsScheduleDTO_H_



#include <string>
#include "CampaignSettingsTimePeriodDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Расписание работы службы доставки в своем регионе.
/// </summary>
class  CampaignSettingsScheduleDTO 
{
public:
    CampaignSettingsScheduleDTO() = default;
    explicit CampaignSettingsScheduleDTO(boost::property_tree::ptree const& pt);
    virtual ~CampaignSettingsScheduleDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// CampaignSettingsScheduleDTO members

    /// <summary>
    /// Признак работы службы доставки в государственные праздники. Возможные значения. * &#x60;false&#x60; — служба доставки не работает в праздничные дни. * &#x60;true&#x60; — служба доставки работает в праздничные дни. 
    /// </summary>
    bool isAvailableOnHolidays() const;
    void setAvailableOnHolidays(bool value);

    /// <summary>
    /// Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.
    /// </summary>
    std::vector<std::shared_ptr<std::string>> getCustomHolidays() const;
    void setCustomHolidays(std::vector<std::shared_ptr<std::string>> value);

    /// <summary>
    /// Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.
    /// </summary>
    std::vector<std::shared_ptr<std::string>> getCustomWorkingDays() const;
    void setCustomWorkingDays(std::vector<std::shared_ptr<std::string>> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CampaignSettingsTimePeriodDTO> getPeriod() const;
    void setPeriod(std::shared_ptr<CampaignSettingsTimePeriodDTO> value);

    /// <summary>
    /// Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.
    /// </summary>
    std::vector<std::shared_ptr<std::string>> getTotalHolidays() const;
    void setTotalHolidays(std::vector<std::shared_ptr<std::string>> value);

    /// <summary>
    /// Список выходных дней недели и государственных праздников.
    /// </summary>
    std::vector<int32_t> getWeeklyHolidays() const;
    void setWeeklyHolidays(std::vector<int32_t> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    bool m_AvailableOnHolidays = false;
    std::vector<std::shared_ptr<std::string>> m_CustomHolidays;
    std::vector<std::shared_ptr<std::string>> m_CustomWorkingDays;
    std::shared_ptr<CampaignSettingsTimePeriodDTO> m_Period;
    std::vector<std::shared_ptr<std::string>> m_TotalHolidays;
    std::vector<int32_t> m_WeeklyHolidays;
};

std::vector<CampaignSettingsScheduleDTO> createCampaignSettingsScheduleDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* CampaignSettingsScheduleDTO_H_ */
