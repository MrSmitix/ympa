/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CampaignSettingsScheduleDTO.h
 *
 * Расписание работы службы доставки в своем регионе.
 */

#ifndef CampaignSettingsScheduleDTO_H_
#define CampaignSettingsScheduleDTO_H_


#include <string>
#include "CampaignSettingsTimePeriodDTO.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Расписание работы службы доставки в своем регионе.
/// </summary>
class  CampaignSettingsScheduleDTO
{
public:
    CampaignSettingsScheduleDTO();
    virtual ~CampaignSettingsScheduleDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CampaignSettingsScheduleDTO& rhs) const;
    bool operator!=(const CampaignSettingsScheduleDTO& rhs) const;

    /////////////////////////////////////////////
    /// CampaignSettingsScheduleDTO members

    /// <summary>
    /// Признак работы службы доставки в государственные праздники. Возможные значения. * &#x60;false&#x60; — служба доставки не работает в праздничные дни. * &#x60;true&#x60; — служба доставки работает в праздничные дни. 
    /// </summary>
    bool isAvailableOnHolidays() const;
    void setAvailableOnHolidays(bool const value);
    bool availableOnHolidaysIsSet() const;
    void unsetAvailableOnHolidays();
    /// <summary>
    /// Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.
    /// </summary>
    std::vector<std::string> getCustomHolidays() const;
    void setCustomHolidays(std::vector<std::string> const& value);
    /// <summary>
    /// Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.
    /// </summary>
    std::vector<std::string> getCustomWorkingDays() const;
    void setCustomWorkingDays(std::vector<std::string> const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CampaignSettingsTimePeriodDTO getPeriod() const;
    void setPeriod(org::openapitools::server::model::CampaignSettingsTimePeriodDTO const& value);
    bool periodIsSet() const;
    void unsetPeriod();
    /// <summary>
    /// Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.
    /// </summary>
    std::vector<std::string> getTotalHolidays() const;
    void setTotalHolidays(std::vector<std::string> const& value);
    /// <summary>
    /// Список выходных дней недели и государственных праздников.
    /// </summary>
    std::vector<int32_t> getWeeklyHolidays() const;
    void setWeeklyHolidays(std::vector<int32_t> const value);

    friend  void to_json(nlohmann::json& j, const CampaignSettingsScheduleDTO& o);
    friend  void from_json(const nlohmann::json& j, CampaignSettingsScheduleDTO& o);
protected:
    bool m_AvailableOnHolidays;
    bool m_AvailableOnHolidaysIsSet;
    std::vector<std::string> m_CustomHolidays;

    std::vector<std::string> m_CustomWorkingDays;

    org::openapitools::server::model::CampaignSettingsTimePeriodDTO m_Period;
    bool m_PeriodIsSet;
    std::vector<std::string> m_TotalHolidays;

    std::vector<int32_t> m_WeeklyHolidays;

    
};

} // namespace org::openapitools::server::model

#endif /* CampaignSettingsScheduleDTO_H_ */
