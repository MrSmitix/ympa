/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedIndexLogsErrorDTO.h
 *
 * Информация об ошибке, произошедшей во время индексации прайс-листа.  Выводится, если во время индексации произошли ошибки (&#x60;index-log-record status&#x3D;ERROR&#x60;). 
 */

#ifndef FeedIndexLogsErrorDTO_H_
#define FeedIndexLogsErrorDTO_H_



#include <string>
#include "FeedIndexLogsErrorType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация об ошибке, произошедшей во время индексации прайс-листа.  Выводится, если во время индексации произошли ошибки (&#x60;index-log-record status&#x3D;ERROR&#x60;). 
/// </summary>
class  FeedIndexLogsErrorDTO 
{
public:
    FeedIndexLogsErrorDTO() = default;
    explicit FeedIndexLogsErrorDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedIndexLogsErrorDTO() = default;

    FeedIndexLogsErrorDTO(const FeedIndexLogsErrorDTO& other) = default; // copy constructor
    FeedIndexLogsErrorDTO(FeedIndexLogsErrorDTO&& other) noexcept = default; // move constructor

    FeedIndexLogsErrorDTO& operator=(const FeedIndexLogsErrorDTO& other) = default; // copy assignment
    FeedIndexLogsErrorDTO& operator=(FeedIndexLogsErrorDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FeedIndexLogsErrorDTO members

    /// <summary>
    /// HTTP-код ошибки индексации прайс-листа.  Выводится, если &#x60;type&#x3D;DOWNLOAD_HTTP_ERROR&#x60;. 
    /// </summary>
    int32_t getHttpStatusCode() const;
    void setHttpStatusCode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    FeedIndexLogsErrorType getType() const;
    void setType(FeedIndexLogsErrorType value);

    /// <summary>
    /// Описание ошибки.  Выводится, если &#x60;type&#x3D;DOWNLOAD_ERROR&#x60;. 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

protected:
    int32_t m_HttpStatusCode = 0;
    FeedIndexLogsErrorType m_Type = FeedIndexLogsErrorType{};
    std::string m_Description = "";
};

std::vector<FeedIndexLogsErrorDTO> createFeedIndexLogsErrorDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FeedIndexLogsErrorDTO>(const FeedIndexLogsErrorDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FeedIndexLogsErrorDTO fromPt<FeedIndexLogsErrorDTO>(const boost::property_tree::ptree& pt) {
    FeedIndexLogsErrorDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FeedIndexLogsErrorDTO_H_ */
