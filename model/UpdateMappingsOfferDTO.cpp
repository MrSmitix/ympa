/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UpdateMappingsOfferDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

UpdateMappingsOfferDTO::UpdateMappingsOfferDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string UpdateMappingsOfferDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void UpdateMappingsOfferDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree UpdateMappingsOfferDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	pt.put("shopSku", m_ShopSku);
	pt.put("category", m_Category);
	pt.put("vendor", m_Vendor);
	pt.put("vendorCode", m_VendorCode);
	pt.put("description", m_Description);
	pt.put("id", m_Id);
	pt.put("feedId", m_FeedId);
	// generate tree for Barcodes
    tmp_node.clear();
	if (!m_Barcodes.empty()) {
        tmp_node = toPt(m_Barcodes);
		pt.add_child("barcodes", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Urls
    tmp_node.clear();
	if (!m_Urls.empty()) {
        tmp_node = toPt(m_Urls);
		pt.add_child("urls", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Pictures
    tmp_node.clear();
	if (!m_Pictures.empty()) {
        tmp_node = toPt(m_Pictures);
		pt.add_child("pictures", tmp_node);
		tmp_node.clear();
	}
	pt.put("manufacturer", m_Manufacturer);
	// generate tree for ManufacturerCountries
    tmp_node.clear();
	if (!m_ManufacturerCountries.empty()) {
        tmp_node = toPt(m_ManufacturerCountries);
		pt.add_child("manufacturerCountries", tmp_node);
		tmp_node.clear();
	}
	pt.put("minShipment", m_MinShipment);
	pt.put("transportUnitSize", m_TransportUnitSize);
	pt.put("quantumOfSupply", m_QuantumOfSupply);
	pt.put("deliveryDurationDays", m_DeliveryDurationDays);
	pt.put("boxCount", m_BoxCount);
	// generate tree for CustomsCommodityCodes
    tmp_node.clear();
	if (!m_CustomsCommodityCodes.empty()) {
        tmp_node = toPt(m_CustomsCommodityCodes);
		pt.add_child("customsCommodityCodes", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("weightDimensions", m_WeightDimensions.toPropertyTree());
	// generate tree for SupplyScheduleDays
    tmp_node.clear();
	if (!m_SupplyScheduleDays.empty()) {
        tmp_node = toPt(m_SupplyScheduleDays);
		pt.add_child("supplyScheduleDays", tmp_node);
		tmp_node.clear();
	}
	pt.put("shelfLifeDays", m_ShelfLifeDays);
	pt.put("lifeTimeDays", m_LifeTimeDays);
	pt.put("guaranteePeriodDays", m_GuaranteePeriodDays);
	pt.add_child("processingState", m_ProcessingState.toPropertyTree());
	pt.add_child("shelfLife", m_ShelfLife.toPropertyTree());
	pt.add_child("lifeTime", m_LifeTime.toPropertyTree());
	pt.add_child("guaranteePeriod", m_GuaranteePeriod.toPropertyTree());
	pt.put("certificate", m_Certificate);
	return pt;
}

void UpdateMappingsOfferDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	m_ShopSku = pt.get("shopSku", "");
	m_Category = pt.get("category", "");
	m_Vendor = pt.get("vendor", "");
	m_VendorCode = pt.get("vendorCode", "");
	m_Description = pt.get("description", "");
	m_Id = pt.get("id", "");
	m_FeedId = pt.get("feedId", 0L);
	// push all items of Barcodes into member
	if (pt.get_child_optional("barcodes")) {
        m_Barcodes = fromPt<std::vector<std::string>>(pt.get_child("barcodes"));
	}
	// push all items of Urls into member
	if (pt.get_child_optional("urls")) {
        m_Urls = fromPt<std::vector<std::string>>(pt.get_child("urls"));
	}
	// push all items of Pictures into member
	if (pt.get_child_optional("pictures")) {
        m_Pictures = fromPt<std::vector<std::string>>(pt.get_child("pictures"));
	}
	m_Manufacturer = pt.get("manufacturer", "");
	// push all items of ManufacturerCountries into member
	if (pt.get_child_optional("manufacturerCountries")) {
        m_ManufacturerCountries = fromPt<std::vector<std::string>>(pt.get_child("manufacturerCountries"));
	}
	m_MinShipment = pt.get("minShipment", 0);
	m_TransportUnitSize = pt.get("transportUnitSize", 0);
	m_QuantumOfSupply = pt.get("quantumOfSupply", 0);
	m_DeliveryDurationDays = pt.get("deliveryDurationDays", 0);
	m_BoxCount = pt.get("boxCount", 0);
	// push all items of CustomsCommodityCodes into member
	if (pt.get_child_optional("customsCommodityCodes")) {
        m_CustomsCommodityCodes = fromPt<std::vector<std::string>>(pt.get_child("customsCommodityCodes"));
	}
	if (pt.get_child_optional("weightDimensions")) {
        m_WeightDimensions = fromPt<OfferWeightDimensionsDTO>(pt.get_child("weightDimensions"));
	}
	// push all items of SupplyScheduleDays into member
	if (pt.get_child_optional("supplyScheduleDays")) {
        m_SupplyScheduleDays = fromPt<std::vector<DayOfWeekType>>(pt.get_child("supplyScheduleDays"));
	}
	m_ShelfLifeDays = pt.get("shelfLifeDays", 0);
	m_LifeTimeDays = pt.get("lifeTimeDays", 0);
	m_GuaranteePeriodDays = pt.get("guaranteePeriodDays", 0);
	if (pt.get_child_optional("processingState")) {
        m_ProcessingState = fromPt<OfferProcessingStateDTO>(pt.get_child("processingState"));
	}
	if (pt.get_child_optional("shelfLife")) {
        m_ShelfLife = fromPt<TimePeriodDTO>(pt.get_child("shelfLife"));
	}
	if (pt.get_child_optional("lifeTime")) {
        m_LifeTime = fromPt<TimePeriodDTO>(pt.get_child("lifeTime"));
	}
	if (pt.get_child_optional("guaranteePeriod")) {
        m_GuaranteePeriod = fromPt<TimePeriodDTO>(pt.get_child("guaranteePeriod"));
	}
	m_Certificate = pt.get("certificate", "");
}

std::string UpdateMappingsOfferDTO::getName() const
{
    return m_Name;
}

void UpdateMappingsOfferDTO::setName(std::string value)
{
    m_Name = value;
}


std::string UpdateMappingsOfferDTO::getShopSku() const
{
    return m_ShopSku;
}

void UpdateMappingsOfferDTO::setShopSku(std::string value)
{
    m_ShopSku = value;
}


std::string UpdateMappingsOfferDTO::getCategory() const
{
    return m_Category;
}

void UpdateMappingsOfferDTO::setCategory(std::string value)
{
    m_Category = value;
}


std::string UpdateMappingsOfferDTO::getVendor() const
{
    return m_Vendor;
}

void UpdateMappingsOfferDTO::setVendor(std::string value)
{
    m_Vendor = value;
}


std::string UpdateMappingsOfferDTO::getVendorCode() const
{
    return m_VendorCode;
}

void UpdateMappingsOfferDTO::setVendorCode(std::string value)
{
    m_VendorCode = value;
}


std::string UpdateMappingsOfferDTO::getDescription() const
{
    return m_Description;
}

void UpdateMappingsOfferDTO::setDescription(std::string value)
{
    m_Description = value;
}


std::string UpdateMappingsOfferDTO::getId() const
{
    return m_Id;
}

void UpdateMappingsOfferDTO::setId(std::string value)
{
    m_Id = value;
}


int64_t UpdateMappingsOfferDTO::getFeedId() const
{
    return m_FeedId;
}

void UpdateMappingsOfferDTO::setFeedId(int64_t value)
{
    m_FeedId = value;
}


std::vector<std::string> UpdateMappingsOfferDTO::getBarcodes() const
{
    return m_Barcodes;
}

void UpdateMappingsOfferDTO::setBarcodes(std::vector<std::string> value)
{
    m_Barcodes = value;
}


std::vector<std::string> UpdateMappingsOfferDTO::getUrls() const
{
    return m_Urls;
}

void UpdateMappingsOfferDTO::setUrls(std::vector<std::string> value)
{
    m_Urls = value;
}


std::vector<std::string> UpdateMappingsOfferDTO::getPictures() const
{
    return m_Pictures;
}

void UpdateMappingsOfferDTO::setPictures(std::vector<std::string> value)
{
    m_Pictures = value;
}


std::string UpdateMappingsOfferDTO::getManufacturer() const
{
    return m_Manufacturer;
}

void UpdateMappingsOfferDTO::setManufacturer(std::string value)
{
    m_Manufacturer = value;
}


std::vector<std::string> UpdateMappingsOfferDTO::getManufacturerCountries() const
{
    return m_ManufacturerCountries;
}

void UpdateMappingsOfferDTO::setManufacturerCountries(std::vector<std::string> value)
{
    m_ManufacturerCountries = value;
}


int32_t UpdateMappingsOfferDTO::getMinShipment() const
{
    return m_MinShipment;
}

void UpdateMappingsOfferDTO::setMinShipment(int32_t value)
{
    m_MinShipment = value;
}


int32_t UpdateMappingsOfferDTO::getTransportUnitSize() const
{
    return m_TransportUnitSize;
}

void UpdateMappingsOfferDTO::setTransportUnitSize(int32_t value)
{
    m_TransportUnitSize = value;
}


int32_t UpdateMappingsOfferDTO::getQuantumOfSupply() const
{
    return m_QuantumOfSupply;
}

void UpdateMappingsOfferDTO::setQuantumOfSupply(int32_t value)
{
    m_QuantumOfSupply = value;
}


int32_t UpdateMappingsOfferDTO::getDeliveryDurationDays() const
{
    return m_DeliveryDurationDays;
}

void UpdateMappingsOfferDTO::setDeliveryDurationDays(int32_t value)
{
    m_DeliveryDurationDays = value;
}


int32_t UpdateMappingsOfferDTO::getBoxCount() const
{
    return m_BoxCount;
}

void UpdateMappingsOfferDTO::setBoxCount(int32_t value)
{
    m_BoxCount = value;
}


std::vector<std::string> UpdateMappingsOfferDTO::getCustomsCommodityCodes() const
{
    return m_CustomsCommodityCodes;
}

void UpdateMappingsOfferDTO::setCustomsCommodityCodes(std::vector<std::string> value)
{
    m_CustomsCommodityCodes = value;
}


OfferWeightDimensionsDTO UpdateMappingsOfferDTO::getWeightDimensions() const
{
    return m_WeightDimensions;
}

void UpdateMappingsOfferDTO::setWeightDimensions(OfferWeightDimensionsDTO value)
{
    m_WeightDimensions = value;
}


std::vector<DayOfWeekType> UpdateMappingsOfferDTO::getSupplyScheduleDays() const
{
    return m_SupplyScheduleDays;
}

void UpdateMappingsOfferDTO::setSupplyScheduleDays(std::vector<DayOfWeekType> value)
{
    m_SupplyScheduleDays = value;
}


int32_t UpdateMappingsOfferDTO::getShelfLifeDays() const
{
    return m_ShelfLifeDays;
}

void UpdateMappingsOfferDTO::setShelfLifeDays(int32_t value)
{
    m_ShelfLifeDays = value;
}


int32_t UpdateMappingsOfferDTO::getLifeTimeDays() const
{
    return m_LifeTimeDays;
}

void UpdateMappingsOfferDTO::setLifeTimeDays(int32_t value)
{
    m_LifeTimeDays = value;
}


int32_t UpdateMappingsOfferDTO::getGuaranteePeriodDays() const
{
    return m_GuaranteePeriodDays;
}

void UpdateMappingsOfferDTO::setGuaranteePeriodDays(int32_t value)
{
    m_GuaranteePeriodDays = value;
}


OfferProcessingStateDTO UpdateMappingsOfferDTO::getProcessingState() const
{
    return m_ProcessingState;
}

void UpdateMappingsOfferDTO::setProcessingState(OfferProcessingStateDTO value)
{
    m_ProcessingState = value;
}


OfferAvailabilityStatusType UpdateMappingsOfferDTO::getAvailability() const
{
    return m_Availability;
}

void UpdateMappingsOfferDTO::setAvailability(OfferAvailabilityStatusType value)
{
    m_Availability = value;
}


TimePeriodDTO UpdateMappingsOfferDTO::getShelfLife() const
{
    return m_ShelfLife;
}

void UpdateMappingsOfferDTO::setShelfLife(TimePeriodDTO value)
{
    m_ShelfLife = value;
}


TimePeriodDTO UpdateMappingsOfferDTO::getLifeTime() const
{
    return m_LifeTime;
}

void UpdateMappingsOfferDTO::setLifeTime(TimePeriodDTO value)
{
    m_LifeTime = value;
}


TimePeriodDTO UpdateMappingsOfferDTO::getGuaranteePeriod() const
{
    return m_GuaranteePeriod;
}

void UpdateMappingsOfferDTO::setGuaranteePeriod(TimePeriodDTO value)
{
    m_GuaranteePeriod = value;
}


std::string UpdateMappingsOfferDTO::getCertificate() const
{
    return m_Certificate;
}

void UpdateMappingsOfferDTO::setCertificate(std::string value)
{
    m_Certificate = value;
}



std::vector<UpdateMappingsOfferDTO> createUpdateMappingsOfferDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<UpdateMappingsOfferDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(UpdateMappingsOfferDTO(child.second));
    }

    return vec;
}

}
}
}
}

