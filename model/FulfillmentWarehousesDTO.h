/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FulfillmentWarehousesDTO.h
 *
 * Список складов Маркета (FBY).
 */

#ifndef FulfillmentWarehousesDTO_H_
#define FulfillmentWarehousesDTO_H_



#include "FulfillmentWarehouseDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Список складов Маркета (FBY).
/// </summary>
class  FulfillmentWarehousesDTO 
{
public:
    FulfillmentWarehousesDTO() = default;
    explicit FulfillmentWarehousesDTO(boost::property_tree::ptree const& pt);
    virtual ~FulfillmentWarehousesDTO() = default;

    FulfillmentWarehousesDTO(const FulfillmentWarehousesDTO& other) = default; // copy constructor
    FulfillmentWarehousesDTO(FulfillmentWarehousesDTO&& other) noexcept = default; // move constructor

    FulfillmentWarehousesDTO& operator=(const FulfillmentWarehousesDTO& other) = default; // copy assignment
    FulfillmentWarehousesDTO& operator=(FulfillmentWarehousesDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FulfillmentWarehousesDTO members

    /// <summary>
    /// Список складов Маркета (FBY).
    /// </summary>
    std::vector<FulfillmentWarehouseDTO> getWarehouses() const;
    void setWarehouses(std::vector<FulfillmentWarehouseDTO> value);

protected:
    std::vector<FulfillmentWarehouseDTO> m_Warehouses;
};

std::vector<FulfillmentWarehousesDTO> createFulfillmentWarehousesDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FulfillmentWarehousesDTO>(const FulfillmentWarehousesDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FulfillmentWarehousesDTO fromPt<FulfillmentWarehousesDTO>(const boost::property_tree::ptree& pt) {
    FulfillmentWarehousesDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FulfillmentWarehousesDTO_H_ */
