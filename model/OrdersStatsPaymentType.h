/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersStatsPaymentType.h
 *
 * Тип денежного перевода: - &#x60;PAYMENT&#x60; — оплата. - &#x60;REFUND&#x60; — возврат. 
 */

#ifndef OrdersStatsPaymentType_H_
#define OrdersStatsPaymentType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Тип денежного перевода: - &#x60;PAYMENT&#x60; — оплата. - &#x60;REFUND&#x60; — возврат. 
/// </summary>
class  OrdersStatsPaymentType 
{
public:
    OrdersStatsPaymentType() = default;
    explicit OrdersStatsPaymentType(boost::property_tree::ptree const& pt);
    virtual ~OrdersStatsPaymentType() = default;

    OrdersStatsPaymentType(const OrdersStatsPaymentType& other) = default; // copy constructor
    OrdersStatsPaymentType(OrdersStatsPaymentType&& other) noexcept = default; // move constructor

    OrdersStatsPaymentType& operator=(const OrdersStatsPaymentType& other) = default; // copy assignment
    OrdersStatsPaymentType& operator=(OrdersStatsPaymentType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// OrdersStatsPaymentType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_OrdersStatsPaymentTypeEnumValue;
};

std::vector<OrdersStatsPaymentType> createOrdersStatsPaymentTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrdersStatsPaymentType>(const OrdersStatsPaymentType& val) {
    return val.toPropertyTree();
}

template<>
inline OrdersStatsPaymentType fromPt<OrdersStatsPaymentType>(const boost::property_tree::ptree& pt) {
    OrdersStatsPaymentType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrdersStatsPaymentType_H_ */
