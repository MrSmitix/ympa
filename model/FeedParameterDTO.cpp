/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FeedParameterDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FeedParameterDTO::FeedParameterDTO()
{
    m_Deleted = false;
    m_DeletedIsSet = false;
    m_Name = "";
    m_ValuesIsSet = false;
    
}

void FeedParameterDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FeedParameterDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FeedParameterDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FeedParameterDTO" : pathPrefix;

                 
    if (valuesIsSet())
    {
        const std::vector<int32_t>& value = m_Values;
        const std::string currentValuePath = _pathPrefix + ".values";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int32_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool FeedParameterDTO::operator==(const FeedParameterDTO& rhs) const
{
    return
    
    
    
    ((!deletedIsSet() && !rhs.deletedIsSet()) || (deletedIsSet() && rhs.deletedIsSet() && isDeleted() == rhs.isDeleted())) &&
    
    (getName() == rhs.getName())
     &&
    
    
    ((!valuesIsSet() && !rhs.valuesIsSet()) || (valuesIsSet() && rhs.valuesIsSet() && getValues() == rhs.getValues()))
    
    ;
}

bool FeedParameterDTO::operator!=(const FeedParameterDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FeedParameterDTO& o)
{
    j = nlohmann::json::object();
    if(o.deletedIsSet())
        j["deleted"] = o.m_Deleted;
    j["name"] = o.m_Name;
    if(o.valuesIsSet() || !o.m_Values.empty())
        j["values"] = o.m_Values;
    
}

void from_json(const nlohmann::json& j, FeedParameterDTO& o)
{
    if(j.find("deleted") != j.end())
    {
        j.at("deleted").get_to(o.m_Deleted);
        o.m_DeletedIsSet = true;
    } 
    j.at("name").get_to(o.m_Name);
    if(j.find("values") != j.end())
    {
        j.at("values").get_to(o.m_Values);
        o.m_ValuesIsSet = true;
    } 
    
}

bool FeedParameterDTO::isDeleted() const
{
    return m_Deleted;
}
void FeedParameterDTO::setDeleted(bool const value)
{
    m_Deleted = value;
    m_DeletedIsSet = true;
}
bool FeedParameterDTO::deletedIsSet() const
{
    return m_DeletedIsSet;
}
void FeedParameterDTO::unsetDeleted()
{
    m_DeletedIsSet = false;
}
std::string FeedParameterDTO::getName() const
{
    return m_Name;
}
void FeedParameterDTO::setName(std::string const& value)
{
    m_Name = value;
}
std::vector<int32_t> FeedParameterDTO::getValues() const
{
    return m_Values;
}
void FeedParameterDTO::setValues(std::vector<int32_t> const value)
{
    m_Values = value;
    m_ValuesIsSet = true;
}
bool FeedParameterDTO::valuesIsSet() const
{
    return m_ValuesIsSet;
}
void FeedParameterDTO::unsetValues()
{
    m_ValuesIsSet = false;
}


} // namespace org::openapitools::server::model

