/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OfferProcessingNoteDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OfferProcessingNoteDTO::OfferProcessingNoteDTO()
{
    m_TypeIsSet = false;
    m_Payload = "";
    m_PayloadIsSet = false;
    
}

void OfferProcessingNoteDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OfferProcessingNoteDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OfferProcessingNoteDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OfferProcessingNoteDTO" : pathPrefix;

            
    return success;
}

bool OfferProcessingNoteDTO::operator==(const OfferProcessingNoteDTO& rhs) const
{
    return
    
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!payloadIsSet() && !rhs.payloadIsSet()) || (payloadIsSet() && rhs.payloadIsSet() && getPayload() == rhs.getPayload()))
    
    ;
}

bool OfferProcessingNoteDTO::operator!=(const OfferProcessingNoteDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OfferProcessingNoteDTO& o)
{
    j = nlohmann::json::object();
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.payloadIsSet())
        j["payload"] = o.m_Payload;
    
}

void from_json(const nlohmann::json& j, OfferProcessingNoteDTO& o)
{
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("payload") != j.end())
    {
        j.at("payload").get_to(o.m_Payload);
        o.m_PayloadIsSet = true;
    } 
    
}

org::openapitools::server::model::OfferProcessingNoteType OfferProcessingNoteDTO::getType() const
{
    return m_Type;
}
void OfferProcessingNoteDTO::setType(org::openapitools::server::model::OfferProcessingNoteType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool OfferProcessingNoteDTO::typeIsSet() const
{
    return m_TypeIsSet;
}
void OfferProcessingNoteDTO::unsetType()
{
    m_TypeIsSet = false;
}
std::string OfferProcessingNoteDTO::getPayload() const
{
    return m_Payload;
}
void OfferProcessingNoteDTO::setPayload(std::string const& value)
{
    m_Payload = value;
    m_PayloadIsSet = true;
}
bool OfferProcessingNoteDTO::payloadIsSet() const
{
    return m_PayloadIsSet;
}
void OfferProcessingNoteDTO::unsetPayload()
{
    m_PayloadIsSet = false;
}


} // namespace org::openapitools::server::model

