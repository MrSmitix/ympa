/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderItemDetailDTO.h
 *
 * Детали по товару в заказе.
 */

#ifndef OrderItemDetailDTO_H_
#define OrderItemDetailDTO_H_



#include <string>
#include "OrderItemStatusType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Детали по товару в заказе.
/// </summary>
class  OrderItemDetailDTO 
{
public:
    OrderItemDetailDTO() = default;
    explicit OrderItemDetailDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderItemDetailDTO() = default;

    OrderItemDetailDTO(const OrderItemDetailDTO& other) = default; // copy constructor
    OrderItemDetailDTO(OrderItemDetailDTO&& other) noexcept = default; // move constructor

    OrderItemDetailDTO& operator=(const OrderItemDetailDTO& other) = default; // copy assignment
    OrderItemDetailDTO& operator=(OrderItemDetailDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrderItemDetailDTO members

    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int64_t getItemCount() const;
    void setItemCount(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    OrderItemStatusType getItemStatus() const;
    void setItemStatus(OrderItemStatusType value);

    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getUpdateDate() const;
    void setUpdateDate(std::string value);

protected:
    int64_t m_ItemCount = 0L;
    OrderItemStatusType m_ItemStatus = OrderItemStatusType{};
    std::string m_UpdateDate = "";
};

std::vector<OrderItemDetailDTO> createOrderItemDetailDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderItemDetailDTO>(const OrderItemDetailDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrderItemDetailDTO fromPt<OrderItemDetailDTO>(const boost::property_tree::ptree& pt) {
    OrderItemDetailDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderItemDetailDTO_H_ */
