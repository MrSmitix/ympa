/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FeedbackDeliveryType.h
 *
 * Способ покупки, указанный в отзыве:  * &#x60;DELIVERY&#x60; — доставка. * &#x60;PICKUP&#x60; — самовывоз. * &#x60;INSTORE&#x60; — в магазине. 
 */

#ifndef FeedbackDeliveryType_H_
#define FeedbackDeliveryType_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Способ покупки, указанный в отзыве:  * &#x60;DELIVERY&#x60; — доставка. * &#x60;PICKUP&#x60; — самовывоз. * &#x60;INSTORE&#x60; — в магазине. 
/// </summary>
class  FeedbackDeliveryType
{
public:
    FeedbackDeliveryType();
    virtual ~FeedbackDeliveryType() = default;

    enum class eFeedbackDeliveryType {
    // To have a valid default value.
    // Avoiding name clashes with user defined
    // enum values
    INVALID_VALUE_OPENAPI_GENERATED = 0,
    DELIVERY, 
    PICKUP, 
    INSTORE
    };

    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FeedbackDeliveryType& rhs) const;
    bool operator!=(const FeedbackDeliveryType& rhs) const;

    /////////////////////////////////////////////
    /// FeedbackDeliveryType members

    FeedbackDeliveryType::eFeedbackDeliveryType getValue() const;
    void setValue(FeedbackDeliveryType::eFeedbackDeliveryType value);
    
    friend  void to_json(nlohmann::json& j, const FeedbackDeliveryType& o);
    friend  void from_json(const nlohmann::json& j, FeedbackDeliveryType& o);
protected:
    FeedbackDeliveryType::eFeedbackDeliveryType m_value = FeedbackDeliveryType::eFeedbackDeliveryType::INVALID_VALUE_OPENAPI_GENERATED;
};

} // namespace org::openapitools::server::model

#endif /* FeedbackDeliveryType_H_ */
