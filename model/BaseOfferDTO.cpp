/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BaseOfferDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BaseOfferDTO::BaseOfferDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string BaseOfferDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void BaseOfferDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BaseOfferDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("offerId", m_OfferId);
	pt.put("name", m_Name);
	pt.put("marketCategoryId", m_MarketCategoryId);
	pt.put("category", m_Category);
	// generate tree for Pictures
    tmp_node.clear();
	if (!m_Pictures.empty()) {
        tmp_node = toPt(m_Pictures);
		pt.add_child("pictures", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Videos
    tmp_node.clear();
	if (!m_Videos.empty()) {
        tmp_node = toPt(m_Videos);
		pt.add_child("videos", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Manuals
    tmp_node.clear();
	if (!m_Manuals.empty()) {
        tmp_node = toPt(m_Manuals);
		pt.add_child("manuals", tmp_node);
		tmp_node.clear();
	}
	pt.put("vendor", m_Vendor);
	// generate tree for Barcodes
    tmp_node.clear();
	if (!m_Barcodes.empty()) {
        tmp_node = toPt(m_Barcodes);
		pt.add_child("barcodes", tmp_node);
		tmp_node.clear();
	}
	pt.put("description", m_Description);
	// generate tree for ManufacturerCountries
    tmp_node.clear();
	if (!m_ManufacturerCountries.empty()) {
        tmp_node = toPt(m_ManufacturerCountries);
		pt.add_child("manufacturerCountries", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("weightDimensions", m_WeightDimensions.toPropertyTree());
	pt.put("vendorCode", m_VendorCode);
	// generate tree for Tags
    tmp_node.clear();
	if (!m_Tags.empty()) {
        tmp_node = toPt(m_Tags);
		pt.add_child("tags", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("shelfLife", m_ShelfLife.toPropertyTree());
	pt.add_child("lifeTime", m_LifeTime.toPropertyTree());
	pt.add_child("guaranteePeriod", m_GuaranteePeriod.toPropertyTree());
	pt.put("customsCommodityCode", m_CustomsCommodityCode);
	// generate tree for Certificates
    tmp_node.clear();
	if (!m_Certificates.empty()) {
        tmp_node = toPt(m_Certificates);
		pt.add_child("certificates", tmp_node);
		tmp_node.clear();
	}
	pt.put("boxCount", m_BoxCount);
	pt.add_child("condition", m_Condition.toPropertyTree());
	pt.put("downloadable", m_Downloadable);
	pt.put("adult", m_Adult);
	pt.add_child("age", m_Age.toPropertyTree());
	// generate tree for Params
    tmp_node.clear();
	if (!m_Params.empty()) {
        tmp_node = toPt(m_Params);
		pt.add_child("params", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void BaseOfferDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_OfferId = pt.get("offerId", "");
	m_Name = pt.get("name", "");
	m_MarketCategoryId = pt.get("marketCategoryId", 0L);
	m_Category = pt.get("category", "");
	// push all items of Pictures into member
	if (pt.get_child_optional("pictures")) {
        m_Pictures = fromPt<std::vector<std::string>>(pt.get_child("pictures"));
	}
	// push all items of Videos into member
	if (pt.get_child_optional("videos")) {
        m_Videos = fromPt<std::vector<std::string>>(pt.get_child("videos"));
	}
	// push all items of Manuals into member
	if (pt.get_child_optional("manuals")) {
        m_Manuals = fromPt<std::vector<OfferManualDTO>>(pt.get_child("manuals"));
	}
	m_Vendor = pt.get("vendor", "");
	// push all items of Barcodes into member
	if (pt.get_child_optional("barcodes")) {
        m_Barcodes = fromPt<std::vector<std::string>>(pt.get_child("barcodes"));
	}
	m_Description = pt.get("description", "");
	// push all items of ManufacturerCountries into member
	if (pt.get_child_optional("manufacturerCountries")) {
        m_ManufacturerCountries = fromPt<std::vector<std::string>>(pt.get_child("manufacturerCountries"));
	}
	if (pt.get_child_optional("weightDimensions")) {
        m_WeightDimensions = fromPt<OfferWeightDimensionsDTO>(pt.get_child("weightDimensions"));
	}
	m_VendorCode = pt.get("vendorCode", "");
	// push all items of Tags into member
	if (pt.get_child_optional("tags")) {
        m_Tags = fromPt<std::vector<std::string>>(pt.get_child("tags"));
	}
	if (pt.get_child_optional("shelfLife")) {
        m_ShelfLife = fromPt<TimePeriodDTO>(pt.get_child("shelfLife"));
	}
	if (pt.get_child_optional("lifeTime")) {
        m_LifeTime = fromPt<TimePeriodDTO>(pt.get_child("lifeTime"));
	}
	if (pt.get_child_optional("guaranteePeriod")) {
        m_GuaranteePeriod = fromPt<TimePeriodDTO>(pt.get_child("guaranteePeriod"));
	}
	m_CustomsCommodityCode = pt.get("customsCommodityCode", "");
	// push all items of Certificates into member
	if (pt.get_child_optional("certificates")) {
        m_Certificates = fromPt<std::vector<std::string>>(pt.get_child("certificates"));
	}
	m_BoxCount = pt.get("boxCount", 0);
	if (pt.get_child_optional("condition")) {
        m_Condition = fromPt<OfferConditionDTO>(pt.get_child("condition"));
	}
	m_Downloadable = pt.get("downloadable", false);
	m_Adult = pt.get("adult", false);
	if (pt.get_child_optional("age")) {
        m_Age = fromPt<AgeDTO>(pt.get_child("age"));
	}
	// push all items of Params into member
	if (pt.get_child_optional("params")) {
        m_Params = fromPt<std::vector<OfferParamDTO>>(pt.get_child("params"));
	}
}

std::string BaseOfferDTO::getOfferId() const
{
    return m_OfferId;
}

void BaseOfferDTO::setOfferId(std::string value)
{
    m_OfferId = value;
}


std::string BaseOfferDTO::getName() const
{
    return m_Name;
}

void BaseOfferDTO::setName(std::string value)
{
    m_Name = value;
}


int64_t BaseOfferDTO::getMarketCategoryId() const
{
    return m_MarketCategoryId;
}

void BaseOfferDTO::setMarketCategoryId(int64_t value)
{
    m_MarketCategoryId = value;
}


std::string BaseOfferDTO::getCategory() const
{
    return m_Category;
}

void BaseOfferDTO::setCategory(std::string value)
{
    m_Category = value;
}


std::vector<std::string> BaseOfferDTO::getPictures() const
{
    return m_Pictures;
}

void BaseOfferDTO::setPictures(std::vector<std::string> value)
{
    m_Pictures = value;
}


std::vector<std::string> BaseOfferDTO::getVideos() const
{
    return m_Videos;
}

void BaseOfferDTO::setVideos(std::vector<std::string> value)
{
    m_Videos = value;
}


std::vector<OfferManualDTO> BaseOfferDTO::getManuals() const
{
    return m_Manuals;
}

void BaseOfferDTO::setManuals(std::vector<OfferManualDTO> value)
{
    m_Manuals = value;
}


std::string BaseOfferDTO::getVendor() const
{
    return m_Vendor;
}

void BaseOfferDTO::setVendor(std::string value)
{
    m_Vendor = value;
}


std::vector<std::string> BaseOfferDTO::getBarcodes() const
{
    return m_Barcodes;
}

void BaseOfferDTO::setBarcodes(std::vector<std::string> value)
{
    m_Barcodes = value;
}


std::string BaseOfferDTO::getDescription() const
{
    return m_Description;
}

void BaseOfferDTO::setDescription(std::string value)
{
    m_Description = value;
}


std::vector<std::string> BaseOfferDTO::getManufacturerCountries() const
{
    return m_ManufacturerCountries;
}

void BaseOfferDTO::setManufacturerCountries(std::vector<std::string> value)
{
    m_ManufacturerCountries = value;
}


OfferWeightDimensionsDTO BaseOfferDTO::getWeightDimensions() const
{
    return m_WeightDimensions;
}

void BaseOfferDTO::setWeightDimensions(OfferWeightDimensionsDTO value)
{
    m_WeightDimensions = value;
}


std::string BaseOfferDTO::getVendorCode() const
{
    return m_VendorCode;
}

void BaseOfferDTO::setVendorCode(std::string value)
{
    m_VendorCode = value;
}


std::vector<std::string> BaseOfferDTO::getTags() const
{
    return m_Tags;
}

void BaseOfferDTO::setTags(std::vector<std::string> value)
{
    m_Tags = value;
}


TimePeriodDTO BaseOfferDTO::getShelfLife() const
{
    return m_ShelfLife;
}

void BaseOfferDTO::setShelfLife(TimePeriodDTO value)
{
    m_ShelfLife = value;
}


TimePeriodDTO BaseOfferDTO::getLifeTime() const
{
    return m_LifeTime;
}

void BaseOfferDTO::setLifeTime(TimePeriodDTO value)
{
    m_LifeTime = value;
}


TimePeriodDTO BaseOfferDTO::getGuaranteePeriod() const
{
    return m_GuaranteePeriod;
}

void BaseOfferDTO::setGuaranteePeriod(TimePeriodDTO value)
{
    m_GuaranteePeriod = value;
}


std::string BaseOfferDTO::getCustomsCommodityCode() const
{
    return m_CustomsCommodityCode;
}

void BaseOfferDTO::setCustomsCommodityCode(std::string value)
{
    m_CustomsCommodityCode = value;
}


std::vector<std::string> BaseOfferDTO::getCertificates() const
{
    return m_Certificates;
}

void BaseOfferDTO::setCertificates(std::vector<std::string> value)
{
    m_Certificates = value;
}


int32_t BaseOfferDTO::getBoxCount() const
{
    return m_BoxCount;
}

void BaseOfferDTO::setBoxCount(int32_t value)
{
    m_BoxCount = value;
}


OfferConditionDTO BaseOfferDTO::getCondition() const
{
    return m_Condition;
}

void BaseOfferDTO::setCondition(OfferConditionDTO value)
{
    m_Condition = value;
}


OfferType BaseOfferDTO::getType() const
{
    return m_Type;
}

void BaseOfferDTO::setType(OfferType value)
{
    m_Type = value;
}


bool BaseOfferDTO::isDownloadable() const
{
    return m_Downloadable;
}

void BaseOfferDTO::setDownloadable(bool value)
{
    m_Downloadable = value;
}


bool BaseOfferDTO::isAdult() const
{
    return m_Adult;
}

void BaseOfferDTO::setAdult(bool value)
{
    m_Adult = value;
}


AgeDTO BaseOfferDTO::getAge() const
{
    return m_Age;
}

void BaseOfferDTO::setAge(AgeDTO value)
{
    m_Age = value;
}


std::vector<OfferParamDTO> BaseOfferDTO::getParams() const
{
    return m_Params;
}

void BaseOfferDTO::setParams(std::vector<OfferParamDTO> value)
{
    m_Params = value;
}



std::vector<BaseOfferDTO> createBaseOfferDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<BaseOfferDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(BaseOfferDTO(child.second));
    }

    return vec;
}

}
}
}
}

