/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BaseOfferDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BaseOfferDTO::BaseOfferDTO()
{
    m_OfferId = "";
    m_Name = "";
    m_NameIsSet = false;
    m_MarketCategoryId = 0L;
    m_MarketCategoryIdIsSet = false;
    m_Category = "";
    m_CategoryIsSet = false;
    m_PicturesIsSet = false;
    m_VideosIsSet = false;
    m_ManualsIsSet = false;
    m_Vendor = "";
    m_VendorIsSet = false;
    m_BarcodesIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_ManufacturerCountriesIsSet = false;
    m_WeightDimensionsIsSet = false;
    m_VendorCode = "";
    m_VendorCodeIsSet = false;
    m_TagsIsSet = false;
    m_ShelfLifeIsSet = false;
    m_LifeTimeIsSet = false;
    m_GuaranteePeriodIsSet = false;
    m_CustomsCommodityCode = "";
    m_CustomsCommodityCodeIsSet = false;
    m_CertificatesIsSet = false;
    m_BoxCount = 0;
    m_BoxCountIsSet = false;
    m_ConditionIsSet = false;
    m_TypeIsSet = false;
    m_Downloadable = false;
    m_DownloadableIsSet = false;
    m_Adult = false;
    m_AdultIsSet = false;
    m_AgeIsSet = false;
    m_ParamsIsSet = false;
    
}

void BaseOfferDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BaseOfferDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BaseOfferDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BaseOfferDTO" : pathPrefix;

         
    
    /* OfferId */ {
        const std::string& value = m_OfferId;
        const std::string currentValuePath = _pathPrefix + ".offerId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
         
    if (nameIsSet())
    {
        const std::string& value = m_Name;
        const std::string currentValuePath = _pathPrefix + ".name";
                
        
        if (value.length() > 256)
        {
            success = false;
            msg << currentValuePath << ": must be at most 256 characters long;";
        }

    }
                 
    if (picturesIsSet())
    {
        const std::vector<std::string>& value = m_Pictures;
        const std::string currentValuePath = _pathPrefix + ".pictures";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (videosIsSet())
    {
        const std::vector<std::string>& value = m_Videos;
        const std::string currentValuePath = _pathPrefix + ".videos";
                
        
        if (value.size() > 6)
        {
            success = false;
            msg << currentValuePath << ": must have at most 6 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (manualsIsSet())
    {
        const std::vector<org::openapitools::server::model::OfferManualDTO>& value = m_Manuals;
        const std::string currentValuePath = _pathPrefix + ".manuals";
                
        
        if (value.size() > 6)
        {
            success = false;
            msg << currentValuePath << ": must have at most 6 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OfferManualDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".manuals") && success;
 
                i++;
            }
        }

    }
             
    if (barcodesIsSet())
    {
        const std::vector<std::string>& value = m_Barcodes;
        const std::string currentValuePath = _pathPrefix + ".barcodes";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (descriptionIsSet())
    {
        const std::string& value = m_Description;
        const std::string currentValuePath = _pathPrefix + ".description";
                
        
        if (value.length() > 6000)
        {
            success = false;
            msg << currentValuePath << ": must be at most 6000 characters long;";
        }

    }
         
    if (manufacturerCountriesIsSet())
    {
        const std::vector<std::string>& value = m_ManufacturerCountries;
        const std::string currentValuePath = _pathPrefix + ".manufacturerCountries";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                 
    if (tagsIsSet())
    {
        const std::vector<std::string>& value = m_Tags;
        const std::string currentValuePath = _pathPrefix + ".tags";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                         
    if (certificatesIsSet())
    {
        const std::vector<std::string>& value = m_Certificates;
        const std::string currentValuePath = _pathPrefix + ".certificates";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                                 
    if (paramsIsSet())
    {
        const std::vector<org::openapitools::server::model::OfferParamDTO>& value = m_Params;
        const std::string currentValuePath = _pathPrefix + ".params";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OfferParamDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".params") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool BaseOfferDTO::operator==(const BaseOfferDTO& rhs) const
{
    return
    
    
    (getOfferId() == rhs.getOfferId())
     &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!marketCategoryIdIsSet() && !rhs.marketCategoryIdIsSet()) || (marketCategoryIdIsSet() && rhs.marketCategoryIdIsSet() && getMarketCategoryId() == rhs.getMarketCategoryId())) &&
    
    
    ((!categoryIsSet() && !rhs.categoryIsSet()) || (categoryIsSet() && rhs.categoryIsSet() && getCategory() == rhs.getCategory())) &&
    
    
    ((!picturesIsSet() && !rhs.picturesIsSet()) || (picturesIsSet() && rhs.picturesIsSet() && getPictures() == rhs.getPictures())) &&
    
    
    ((!videosIsSet() && !rhs.videosIsSet()) || (videosIsSet() && rhs.videosIsSet() && getVideos() == rhs.getVideos())) &&
    
    
    ((!manualsIsSet() && !rhs.manualsIsSet()) || (manualsIsSet() && rhs.manualsIsSet() && getManuals() == rhs.getManuals())) &&
    
    
    ((!vendorIsSet() && !rhs.vendorIsSet()) || (vendorIsSet() && rhs.vendorIsSet() && getVendor() == rhs.getVendor())) &&
    
    
    ((!barcodesIsSet() && !rhs.barcodesIsSet()) || (barcodesIsSet() && rhs.barcodesIsSet() && getBarcodes() == rhs.getBarcodes())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!manufacturerCountriesIsSet() && !rhs.manufacturerCountriesIsSet()) || (manufacturerCountriesIsSet() && rhs.manufacturerCountriesIsSet() && getManufacturerCountries() == rhs.getManufacturerCountries())) &&
    
    
    ((!weightDimensionsIsSet() && !rhs.weightDimensionsIsSet()) || (weightDimensionsIsSet() && rhs.weightDimensionsIsSet() && getWeightDimensions() == rhs.getWeightDimensions())) &&
    
    
    ((!vendorCodeIsSet() && !rhs.vendorCodeIsSet()) || (vendorCodeIsSet() && rhs.vendorCodeIsSet() && getVendorCode() == rhs.getVendorCode())) &&
    
    
    ((!tagsIsSet() && !rhs.tagsIsSet()) || (tagsIsSet() && rhs.tagsIsSet() && getTags() == rhs.getTags())) &&
    
    
    ((!shelfLifeIsSet() && !rhs.shelfLifeIsSet()) || (shelfLifeIsSet() && rhs.shelfLifeIsSet() && getShelfLife() == rhs.getShelfLife())) &&
    
    
    ((!lifeTimeIsSet() && !rhs.lifeTimeIsSet()) || (lifeTimeIsSet() && rhs.lifeTimeIsSet() && getLifeTime() == rhs.getLifeTime())) &&
    
    
    ((!guaranteePeriodIsSet() && !rhs.guaranteePeriodIsSet()) || (guaranteePeriodIsSet() && rhs.guaranteePeriodIsSet() && getGuaranteePeriod() == rhs.getGuaranteePeriod())) &&
    
    
    ((!customsCommodityCodeIsSet() && !rhs.customsCommodityCodeIsSet()) || (customsCommodityCodeIsSet() && rhs.customsCommodityCodeIsSet() && getCustomsCommodityCode() == rhs.getCustomsCommodityCode())) &&
    
    
    ((!certificatesIsSet() && !rhs.certificatesIsSet()) || (certificatesIsSet() && rhs.certificatesIsSet() && getCertificates() == rhs.getCertificates())) &&
    
    
    ((!boxCountIsSet() && !rhs.boxCountIsSet()) || (boxCountIsSet() && rhs.boxCountIsSet() && getBoxCount() == rhs.getBoxCount())) &&
    
    
    ((!conditionIsSet() && !rhs.conditionIsSet()) || (conditionIsSet() && rhs.conditionIsSet() && getCondition() == rhs.getCondition())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!downloadableIsSet() && !rhs.downloadableIsSet()) || (downloadableIsSet() && rhs.downloadableIsSet() && isDownloadable() == rhs.isDownloadable())) &&
    
    
    ((!adultIsSet() && !rhs.adultIsSet()) || (adultIsSet() && rhs.adultIsSet() && isAdult() == rhs.isAdult())) &&
    
    
    ((!ageIsSet() && !rhs.ageIsSet()) || (ageIsSet() && rhs.ageIsSet() && getAge() == rhs.getAge())) &&
    
    
    ((!paramsIsSet() && !rhs.paramsIsSet()) || (paramsIsSet() && rhs.paramsIsSet() && getParams() == rhs.getParams()))
    
    ;
}

bool BaseOfferDTO::operator!=(const BaseOfferDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BaseOfferDTO& o)
{
    j = nlohmann::json::object();
    j["offerId"] = o.m_OfferId;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.marketCategoryIdIsSet())
        j["marketCategoryId"] = o.m_MarketCategoryId;
    if(o.categoryIsSet())
        j["category"] = o.m_Category;
    if(o.picturesIsSet() || !o.m_Pictures.empty())
        j["pictures"] = o.m_Pictures;
    if(o.videosIsSet() || !o.m_Videos.empty())
        j["videos"] = o.m_Videos;
    if(o.manualsIsSet() || !o.m_Manuals.empty())
        j["manuals"] = o.m_Manuals;
    if(o.vendorIsSet())
        j["vendor"] = o.m_Vendor;
    if(o.barcodesIsSet() || !o.m_Barcodes.empty())
        j["barcodes"] = o.m_Barcodes;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.manufacturerCountriesIsSet() || !o.m_ManufacturerCountries.empty())
        j["manufacturerCountries"] = o.m_ManufacturerCountries;
    if(o.weightDimensionsIsSet())
        j["weightDimensions"] = o.m_WeightDimensions;
    if(o.vendorCodeIsSet())
        j["vendorCode"] = o.m_VendorCode;
    if(o.tagsIsSet() || !o.m_Tags.empty())
        j["tags"] = o.m_Tags;
    if(o.shelfLifeIsSet())
        j["shelfLife"] = o.m_ShelfLife;
    if(o.lifeTimeIsSet())
        j["lifeTime"] = o.m_LifeTime;
    if(o.guaranteePeriodIsSet())
        j["guaranteePeriod"] = o.m_GuaranteePeriod;
    if(o.customsCommodityCodeIsSet())
        j["customsCommodityCode"] = o.m_CustomsCommodityCode;
    if(o.certificatesIsSet() || !o.m_Certificates.empty())
        j["certificates"] = o.m_Certificates;
    if(o.boxCountIsSet())
        j["boxCount"] = o.m_BoxCount;
    if(o.conditionIsSet())
        j["condition"] = o.m_Condition;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.downloadableIsSet())
        j["downloadable"] = o.m_Downloadable;
    if(o.adultIsSet())
        j["adult"] = o.m_Adult;
    if(o.ageIsSet())
        j["age"] = o.m_Age;
    if(o.paramsIsSet() || !o.m_Params.empty())
        j["params"] = o.m_Params;
    
}

void from_json(const nlohmann::json& j, BaseOfferDTO& o)
{
    j.at("offerId").get_to(o.m_OfferId);
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("marketCategoryId") != j.end())
    {
        j.at("marketCategoryId").get_to(o.m_MarketCategoryId);
        o.m_MarketCategoryIdIsSet = true;
    } 
    if(j.find("category") != j.end())
    {
        j.at("category").get_to(o.m_Category);
        o.m_CategoryIsSet = true;
    } 
    if(j.find("pictures") != j.end())
    {
        j.at("pictures").get_to(o.m_Pictures);
        o.m_PicturesIsSet = true;
    } 
    if(j.find("videos") != j.end())
    {
        j.at("videos").get_to(o.m_Videos);
        o.m_VideosIsSet = true;
    } 
    if(j.find("manuals") != j.end())
    {
        j.at("manuals").get_to(o.m_Manuals);
        o.m_ManualsIsSet = true;
    } 
    if(j.find("vendor") != j.end())
    {
        j.at("vendor").get_to(o.m_Vendor);
        o.m_VendorIsSet = true;
    } 
    if(j.find("barcodes") != j.end())
    {
        j.at("barcodes").get_to(o.m_Barcodes);
        o.m_BarcodesIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("manufacturerCountries") != j.end())
    {
        j.at("manufacturerCountries").get_to(o.m_ManufacturerCountries);
        o.m_ManufacturerCountriesIsSet = true;
    } 
    if(j.find("weightDimensions") != j.end())
    {
        j.at("weightDimensions").get_to(o.m_WeightDimensions);
        o.m_WeightDimensionsIsSet = true;
    } 
    if(j.find("vendorCode") != j.end())
    {
        j.at("vendorCode").get_to(o.m_VendorCode);
        o.m_VendorCodeIsSet = true;
    } 
    if(j.find("tags") != j.end())
    {
        j.at("tags").get_to(o.m_Tags);
        o.m_TagsIsSet = true;
    } 
    if(j.find("shelfLife") != j.end())
    {
        j.at("shelfLife").get_to(o.m_ShelfLife);
        o.m_ShelfLifeIsSet = true;
    } 
    if(j.find("lifeTime") != j.end())
    {
        j.at("lifeTime").get_to(o.m_LifeTime);
        o.m_LifeTimeIsSet = true;
    } 
    if(j.find("guaranteePeriod") != j.end())
    {
        j.at("guaranteePeriod").get_to(o.m_GuaranteePeriod);
        o.m_GuaranteePeriodIsSet = true;
    } 
    if(j.find("customsCommodityCode") != j.end())
    {
        j.at("customsCommodityCode").get_to(o.m_CustomsCommodityCode);
        o.m_CustomsCommodityCodeIsSet = true;
    } 
    if(j.find("certificates") != j.end())
    {
        j.at("certificates").get_to(o.m_Certificates);
        o.m_CertificatesIsSet = true;
    } 
    if(j.find("boxCount") != j.end())
    {
        j.at("boxCount").get_to(o.m_BoxCount);
        o.m_BoxCountIsSet = true;
    } 
    if(j.find("condition") != j.end())
    {
        j.at("condition").get_to(o.m_Condition);
        o.m_ConditionIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("downloadable") != j.end())
    {
        j.at("downloadable").get_to(o.m_Downloadable);
        o.m_DownloadableIsSet = true;
    } 
    if(j.find("adult") != j.end())
    {
        j.at("adult").get_to(o.m_Adult);
        o.m_AdultIsSet = true;
    } 
    if(j.find("age") != j.end())
    {
        j.at("age").get_to(o.m_Age);
        o.m_AgeIsSet = true;
    } 
    if(j.find("params") != j.end())
    {
        j.at("params").get_to(o.m_Params);
        o.m_ParamsIsSet = true;
    } 
    
}

std::string BaseOfferDTO::getOfferId() const
{
    return m_OfferId;
}
void BaseOfferDTO::setOfferId(std::string const& value)
{
    m_OfferId = value;
}
std::string BaseOfferDTO::getName() const
{
    return m_Name;
}
void BaseOfferDTO::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool BaseOfferDTO::nameIsSet() const
{
    return m_NameIsSet;
}
void BaseOfferDTO::unsetName()
{
    m_NameIsSet = false;
}
int64_t BaseOfferDTO::getMarketCategoryId() const
{
    return m_MarketCategoryId;
}
void BaseOfferDTO::setMarketCategoryId(int64_t const value)
{
    m_MarketCategoryId = value;
    m_MarketCategoryIdIsSet = true;
}
bool BaseOfferDTO::marketCategoryIdIsSet() const
{
    return m_MarketCategoryIdIsSet;
}
void BaseOfferDTO::unsetMarketCategoryId()
{
    m_MarketCategoryIdIsSet = false;
}
std::string BaseOfferDTO::getCategory() const
{
    return m_Category;
}
void BaseOfferDTO::setCategory(std::string const& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}
bool BaseOfferDTO::categoryIsSet() const
{
    return m_CategoryIsSet;
}
void BaseOfferDTO::unsetCategory()
{
    m_CategoryIsSet = false;
}
std::vector<std::string> BaseOfferDTO::getPictures() const
{
    return m_Pictures;
}
void BaseOfferDTO::setPictures(std::vector<std::string> const& value)
{
    m_Pictures = value;
    m_PicturesIsSet = true;
}
bool BaseOfferDTO::picturesIsSet() const
{
    return m_PicturesIsSet;
}
void BaseOfferDTO::unsetPictures()
{
    m_PicturesIsSet = false;
}
std::vector<std::string> BaseOfferDTO::getVideos() const
{
    return m_Videos;
}
void BaseOfferDTO::setVideos(std::vector<std::string> const& value)
{
    m_Videos = value;
    m_VideosIsSet = true;
}
bool BaseOfferDTO::videosIsSet() const
{
    return m_VideosIsSet;
}
void BaseOfferDTO::unsetVideos()
{
    m_VideosIsSet = false;
}
std::vector<org::openapitools::server::model::OfferManualDTO> BaseOfferDTO::getManuals() const
{
    return m_Manuals;
}
void BaseOfferDTO::setManuals(std::vector<org::openapitools::server::model::OfferManualDTO> const& value)
{
    m_Manuals = value;
    m_ManualsIsSet = true;
}
bool BaseOfferDTO::manualsIsSet() const
{
    return m_ManualsIsSet;
}
void BaseOfferDTO::unsetManuals()
{
    m_ManualsIsSet = false;
}
std::string BaseOfferDTO::getVendor() const
{
    return m_Vendor;
}
void BaseOfferDTO::setVendor(std::string const& value)
{
    m_Vendor = value;
    m_VendorIsSet = true;
}
bool BaseOfferDTO::vendorIsSet() const
{
    return m_VendorIsSet;
}
void BaseOfferDTO::unsetVendor()
{
    m_VendorIsSet = false;
}
std::vector<std::string> BaseOfferDTO::getBarcodes() const
{
    return m_Barcodes;
}
void BaseOfferDTO::setBarcodes(std::vector<std::string> const& value)
{
    m_Barcodes = value;
    m_BarcodesIsSet = true;
}
bool BaseOfferDTO::barcodesIsSet() const
{
    return m_BarcodesIsSet;
}
void BaseOfferDTO::unsetBarcodes()
{
    m_BarcodesIsSet = false;
}
std::string BaseOfferDTO::getDescription() const
{
    return m_Description;
}
void BaseOfferDTO::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool BaseOfferDTO::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void BaseOfferDTO::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<std::string> BaseOfferDTO::getManufacturerCountries() const
{
    return m_ManufacturerCountries;
}
void BaseOfferDTO::setManufacturerCountries(std::vector<std::string> const& value)
{
    m_ManufacturerCountries = value;
    m_ManufacturerCountriesIsSet = true;
}
bool BaseOfferDTO::manufacturerCountriesIsSet() const
{
    return m_ManufacturerCountriesIsSet;
}
void BaseOfferDTO::unsetManufacturerCountries()
{
    m_ManufacturerCountriesIsSet = false;
}
org::openapitools::server::model::OfferWeightDimensionsDTO BaseOfferDTO::getWeightDimensions() const
{
    return m_WeightDimensions;
}
void BaseOfferDTO::setWeightDimensions(org::openapitools::server::model::OfferWeightDimensionsDTO const& value)
{
    m_WeightDimensions = value;
    m_WeightDimensionsIsSet = true;
}
bool BaseOfferDTO::weightDimensionsIsSet() const
{
    return m_WeightDimensionsIsSet;
}
void BaseOfferDTO::unsetWeightDimensions()
{
    m_WeightDimensionsIsSet = false;
}
std::string BaseOfferDTO::getVendorCode() const
{
    return m_VendorCode;
}
void BaseOfferDTO::setVendorCode(std::string const& value)
{
    m_VendorCode = value;
    m_VendorCodeIsSet = true;
}
bool BaseOfferDTO::vendorCodeIsSet() const
{
    return m_VendorCodeIsSet;
}
void BaseOfferDTO::unsetVendorCode()
{
    m_VendorCodeIsSet = false;
}
std::vector<std::string> BaseOfferDTO::getTags() const
{
    return m_Tags;
}
void BaseOfferDTO::setTags(std::vector<std::string> const& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool BaseOfferDTO::tagsIsSet() const
{
    return m_TagsIsSet;
}
void BaseOfferDTO::unsetTags()
{
    m_TagsIsSet = false;
}
org::openapitools::server::model::TimePeriodDTO BaseOfferDTO::getShelfLife() const
{
    return m_ShelfLife;
}
void BaseOfferDTO::setShelfLife(org::openapitools::server::model::TimePeriodDTO const& value)
{
    m_ShelfLife = value;
    m_ShelfLifeIsSet = true;
}
bool BaseOfferDTO::shelfLifeIsSet() const
{
    return m_ShelfLifeIsSet;
}
void BaseOfferDTO::unsetShelfLife()
{
    m_ShelfLifeIsSet = false;
}
org::openapitools::server::model::TimePeriodDTO BaseOfferDTO::getLifeTime() const
{
    return m_LifeTime;
}
void BaseOfferDTO::setLifeTime(org::openapitools::server::model::TimePeriodDTO const& value)
{
    m_LifeTime = value;
    m_LifeTimeIsSet = true;
}
bool BaseOfferDTO::lifeTimeIsSet() const
{
    return m_LifeTimeIsSet;
}
void BaseOfferDTO::unsetLifeTime()
{
    m_LifeTimeIsSet = false;
}
org::openapitools::server::model::TimePeriodDTO BaseOfferDTO::getGuaranteePeriod() const
{
    return m_GuaranteePeriod;
}
void BaseOfferDTO::setGuaranteePeriod(org::openapitools::server::model::TimePeriodDTO const& value)
{
    m_GuaranteePeriod = value;
    m_GuaranteePeriodIsSet = true;
}
bool BaseOfferDTO::guaranteePeriodIsSet() const
{
    return m_GuaranteePeriodIsSet;
}
void BaseOfferDTO::unsetGuaranteePeriod()
{
    m_GuaranteePeriodIsSet = false;
}
std::string BaseOfferDTO::getCustomsCommodityCode() const
{
    return m_CustomsCommodityCode;
}
void BaseOfferDTO::setCustomsCommodityCode(std::string const& value)
{
    m_CustomsCommodityCode = value;
    m_CustomsCommodityCodeIsSet = true;
}
bool BaseOfferDTO::customsCommodityCodeIsSet() const
{
    return m_CustomsCommodityCodeIsSet;
}
void BaseOfferDTO::unsetCustomsCommodityCode()
{
    m_CustomsCommodityCodeIsSet = false;
}
std::vector<std::string> BaseOfferDTO::getCertificates() const
{
    return m_Certificates;
}
void BaseOfferDTO::setCertificates(std::vector<std::string> const& value)
{
    m_Certificates = value;
    m_CertificatesIsSet = true;
}
bool BaseOfferDTO::certificatesIsSet() const
{
    return m_CertificatesIsSet;
}
void BaseOfferDTO::unsetCertificates()
{
    m_CertificatesIsSet = false;
}
int32_t BaseOfferDTO::getBoxCount() const
{
    return m_BoxCount;
}
void BaseOfferDTO::setBoxCount(int32_t const value)
{
    m_BoxCount = value;
    m_BoxCountIsSet = true;
}
bool BaseOfferDTO::boxCountIsSet() const
{
    return m_BoxCountIsSet;
}
void BaseOfferDTO::unsetBoxCount()
{
    m_BoxCountIsSet = false;
}
org::openapitools::server::model::OfferConditionDTO BaseOfferDTO::getCondition() const
{
    return m_Condition;
}
void BaseOfferDTO::setCondition(org::openapitools::server::model::OfferConditionDTO const& value)
{
    m_Condition = value;
    m_ConditionIsSet = true;
}
bool BaseOfferDTO::conditionIsSet() const
{
    return m_ConditionIsSet;
}
void BaseOfferDTO::unsetCondition()
{
    m_ConditionIsSet = false;
}
org::openapitools::server::model::OfferType BaseOfferDTO::getType() const
{
    return m_Type;
}
void BaseOfferDTO::setType(org::openapitools::server::model::OfferType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool BaseOfferDTO::typeIsSet() const
{
    return m_TypeIsSet;
}
void BaseOfferDTO::unsetType()
{
    m_TypeIsSet = false;
}
bool BaseOfferDTO::isDownloadable() const
{
    return m_Downloadable;
}
void BaseOfferDTO::setDownloadable(bool const value)
{
    m_Downloadable = value;
    m_DownloadableIsSet = true;
}
bool BaseOfferDTO::downloadableIsSet() const
{
    return m_DownloadableIsSet;
}
void BaseOfferDTO::unsetDownloadable()
{
    m_DownloadableIsSet = false;
}
bool BaseOfferDTO::isAdult() const
{
    return m_Adult;
}
void BaseOfferDTO::setAdult(bool const value)
{
    m_Adult = value;
    m_AdultIsSet = true;
}
bool BaseOfferDTO::adultIsSet() const
{
    return m_AdultIsSet;
}
void BaseOfferDTO::unsetAdult()
{
    m_AdultIsSet = false;
}
org::openapitools::server::model::AgeDTO BaseOfferDTO::getAge() const
{
    return m_Age;
}
void BaseOfferDTO::setAge(org::openapitools::server::model::AgeDTO const& value)
{
    m_Age = value;
    m_AgeIsSet = true;
}
bool BaseOfferDTO::ageIsSet() const
{
    return m_AgeIsSet;
}
void BaseOfferDTO::unsetAge()
{
    m_AgeIsSet = false;
}
std::vector<org::openapitools::server::model::OfferParamDTO> BaseOfferDTO::getParams() const
{
    return m_Params;
}
void BaseOfferDTO::setParams(std::vector<org::openapitools::server::model::OfferParamDTO> const& value)
{
    m_Params = value;
    m_ParamsIsSet = true;
}
bool BaseOfferDTO::paramsIsSet() const
{
    return m_ParamsIsSet;
}
void BaseOfferDTO::unsetParams()
{
    m_ParamsIsSet = false;
}


} // namespace org::openapitools::server::model

