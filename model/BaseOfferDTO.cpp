/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BaseOfferDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BaseOfferDTO::BaseOfferDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string BaseOfferDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void BaseOfferDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree BaseOfferDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void BaseOfferDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string BaseOfferDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void BaseOfferDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BaseOfferDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("offerId", m_OfferId);
	pt.put("name", m_Name);
	pt.put("marketCategoryId", m_MarketCategoryId);
	pt.put("category", m_Category);
	// generate tree for Pictures
	if (!m_Pictures.empty()) {
		for (const auto &childEntry : m_Pictures) {
            ptree Pictures_node;
            Pictures_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Pictures_node));
		}
		pt.add_child("pictures", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Videos
	if (!m_Videos.empty()) {
		for (const auto &childEntry : m_Videos) {
            ptree Videos_node;
            Videos_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Videos_node));
		}
		pt.add_child("videos", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Manuals
	if (!m_Manuals.empty()) {
		for (const auto &childEntry : m_Manuals) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("manuals", tmp_node);
		tmp_node.clear();
	}
	pt.put("vendor", m_Vendor);
	// generate tree for Barcodes
	if (!m_Barcodes.empty()) {
		for (const auto &childEntry : m_Barcodes) {
            ptree Barcodes_node;
            Barcodes_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Barcodes_node));
		}
		pt.add_child("barcodes", tmp_node);
		tmp_node.clear();
	}
	pt.put("description", m_Description);
	// generate tree for ManufacturerCountries
	if (!m_ManufacturerCountries.empty()) {
		for (const auto &childEntry : m_ManufacturerCountries) {
            ptree ManufacturerCountries_node;
            ManufacturerCountries_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", ManufacturerCountries_node));
		}
		pt.add_child("manufacturerCountries", tmp_node);
		tmp_node.clear();
	}
	if (m_WeightDimensions != nullptr) {
		pt.add_child("weightDimensions", m_WeightDimensions->toPropertyTree());
	}
	pt.put("vendorCode", m_VendorCode);
	// generate tree for Tags
	if (!m_Tags.empty()) {
		for (const auto &childEntry : m_Tags) {
            ptree Tags_node;
            Tags_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Tags_node));
		}
		pt.add_child("tags", tmp_node);
		tmp_node.clear();
	}
	if (m_ShelfLife != nullptr) {
		pt.add_child("shelfLife", m_ShelfLife->toPropertyTree());
	}
	if (m_LifeTime != nullptr) {
		pt.add_child("lifeTime", m_LifeTime->toPropertyTree());
	}
	if (m_GuaranteePeriod != nullptr) {
		pt.add_child("guaranteePeriod", m_GuaranteePeriod->toPropertyTree());
	}
	pt.put("customsCommodityCode", m_CustomsCommodityCode);
	// generate tree for Certificates
	if (!m_Certificates.empty()) {
		for (const auto &childEntry : m_Certificates) {
            ptree Certificates_node;
            Certificates_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Certificates_node));
		}
		pt.add_child("certificates", tmp_node);
		tmp_node.clear();
	}
	pt.put("boxCount", m_BoxCount);
	if (m_Condition != nullptr) {
		pt.add_child("condition", m_Condition->toPropertyTree());
	}
	pt.put("downloadable", m_Downloadable);
	pt.put("adult", m_Adult);
	if (m_Age != nullptr) {
		pt.add_child("age", m_Age->toPropertyTree());
	}
	// generate tree for Params
	if (!m_Params.empty()) {
		for (const auto &childEntry : m_Params) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("params", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void BaseOfferDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_OfferId = pt.get("offerId", "");
	m_Name = pt.get("name", "");
	m_MarketCategoryId = pt.get("marketCategoryId", 0L);
	m_Category = pt.get("category", "");
	// push all items of Pictures into member vector
	if (pt.get_child_optional("pictures")) {
		for (const auto &childTree : pt.get_child("pictures")) {
            std::string val =
                childTree.second.data();
            m_Pictures.emplace_back(std::move(val));
		}
	}
	// push all items of Videos into member vector
	if (pt.get_child_optional("videos")) {
		for (const auto &childTree : pt.get_child("videos")) {
            std::string val =
                childTree.second.data();
            m_Videos.emplace_back(std::move(val));
		}
	}
	// push all items of Manuals into member vector
	if (pt.get_child_optional("manuals")) {
		for (const auto &childTree : pt.get_child("manuals")) {
            std::shared_ptr<OfferManualDTO> val =
                std::make_shared<OfferManualDTO>(childTree.second);
            m_Manuals.emplace_back(std::move(val));
		}
	}
	m_Vendor = pt.get("vendor", "");
	// push all items of Barcodes into member vector
	if (pt.get_child_optional("barcodes")) {
		for (const auto &childTree : pt.get_child("barcodes")) {
            std::string val =
                childTree.second.data();
            m_Barcodes.emplace_back(std::move(val));
		}
	}
	m_Description = pt.get("description", "");
	// push all items of ManufacturerCountries into member vector
	if (pt.get_child_optional("manufacturerCountries")) {
		for (const auto &childTree : pt.get_child("manufacturerCountries")) {
            std::string val =
                childTree.second.data();
            m_ManufacturerCountries.emplace_back(std::move(val));
		}
	}
	if (pt.get_child_optional("weightDimensions")) {
		m_WeightDimensions = std::make_shared<OfferWeightDimensionsDTO>();
		m_WeightDimensions->fromPropertyTree(pt.get_child("weightDimensions"));
	}
	m_VendorCode = pt.get("vendorCode", "");
	// push all items of Tags into member vector
	if (pt.get_child_optional("tags")) {
		for (const auto &childTree : pt.get_child("tags")) {
            std::string val =
                childTree.second.data();
            m_Tags.emplace_back(std::move(val));
		}
	}
	if (pt.get_child_optional("shelfLife")) {
		m_ShelfLife = std::make_shared<TimePeriodDTO>();
		m_ShelfLife->fromPropertyTree(pt.get_child("shelfLife"));
	}
	if (pt.get_child_optional("lifeTime")) {
		m_LifeTime = std::make_shared<TimePeriodDTO>();
		m_LifeTime->fromPropertyTree(pt.get_child("lifeTime"));
	}
	if (pt.get_child_optional("guaranteePeriod")) {
		m_GuaranteePeriod = std::make_shared<TimePeriodDTO>();
		m_GuaranteePeriod->fromPropertyTree(pt.get_child("guaranteePeriod"));
	}
	m_CustomsCommodityCode = pt.get("customsCommodityCode", "");
	// push all items of Certificates into member vector
	if (pt.get_child_optional("certificates")) {
		for (const auto &childTree : pt.get_child("certificates")) {
            std::string val =
                childTree.second.data();
            m_Certificates.emplace_back(std::move(val));
		}
	}
	m_BoxCount = pt.get("boxCount", 0);
	if (pt.get_child_optional("condition")) {
		m_Condition = std::make_shared<OfferConditionDTO>();
		m_Condition->fromPropertyTree(pt.get_child("condition"));
	}
	m_Downloadable = pt.get("downloadable", false);
	m_Adult = pt.get("adult", false);
	if (pt.get_child_optional("age")) {
		m_Age = std::make_shared<AgeDTO>();
		m_Age->fromPropertyTree(pt.get_child("age"));
	}
	// push all items of Params into member vector
	if (pt.get_child_optional("params")) {
		for (const auto &childTree : pt.get_child("params")) {
            std::shared_ptr<OfferParamDTO> val =
                std::make_shared<OfferParamDTO>(childTree.second);
            m_Params.emplace_back(std::move(val));
		}
	}
}

std::string BaseOfferDTO::getOfferId() const
{
    return m_OfferId;
}

void BaseOfferDTO::setOfferId(std::string value)
{
	m_OfferId = value;
}
std::string BaseOfferDTO::getName() const
{
    return m_Name;
}

void BaseOfferDTO::setName(std::string value)
{
	m_Name = value;
}
int64_t BaseOfferDTO::getMarketCategoryId() const
{
    return m_MarketCategoryId;
}

void BaseOfferDTO::setMarketCategoryId(int64_t value)
{
	m_MarketCategoryId = value;
}
std::string BaseOfferDTO::getCategory() const
{
    return m_Category;
}

void BaseOfferDTO::setCategory(std::string value)
{
	m_Category = value;
}
std::vector<std::string> BaseOfferDTO::getPictures() const
{
    return m_Pictures;
}

void BaseOfferDTO::setPictures(std::vector<std::string> value)
{
	m_Pictures = value;
}
std::vector<std::string> BaseOfferDTO::getVideos() const
{
    return m_Videos;
}

void BaseOfferDTO::setVideos(std::vector<std::string> value)
{
	m_Videos = value;
}
std::vector<std::shared_ptr<OfferManualDTO>> BaseOfferDTO::getManuals() const
{
    return m_Manuals;
}

void BaseOfferDTO::setManuals(std::vector<std::shared_ptr<OfferManualDTO>> value)
{
	m_Manuals = value;
}
std::string BaseOfferDTO::getVendor() const
{
    return m_Vendor;
}

void BaseOfferDTO::setVendor(std::string value)
{
	m_Vendor = value;
}
std::vector<std::string> BaseOfferDTO::getBarcodes() const
{
    return m_Barcodes;
}

void BaseOfferDTO::setBarcodes(std::vector<std::string> value)
{
	m_Barcodes = value;
}
std::string BaseOfferDTO::getDescription() const
{
    return m_Description;
}

void BaseOfferDTO::setDescription(std::string value)
{
	m_Description = value;
}
std::vector<std::string> BaseOfferDTO::getManufacturerCountries() const
{
    return m_ManufacturerCountries;
}

void BaseOfferDTO::setManufacturerCountries(std::vector<std::string> value)
{
	m_ManufacturerCountries = value;
}
std::shared_ptr<OfferWeightDimensionsDTO> BaseOfferDTO::getWeightDimensions() const
{
    return m_WeightDimensions;
}

void BaseOfferDTO::setWeightDimensions(std::shared_ptr<OfferWeightDimensionsDTO> value)
{
	m_WeightDimensions = value;
}
std::string BaseOfferDTO::getVendorCode() const
{
    return m_VendorCode;
}

void BaseOfferDTO::setVendorCode(std::string value)
{
	m_VendorCode = value;
}
std::vector<std::string> BaseOfferDTO::getTags() const
{
    return m_Tags;
}

void BaseOfferDTO::setTags(std::vector<std::string> value)
{
	m_Tags = value;
}
std::shared_ptr<TimePeriodDTO> BaseOfferDTO::getShelfLife() const
{
    return m_ShelfLife;
}

void BaseOfferDTO::setShelfLife(std::shared_ptr<TimePeriodDTO> value)
{
	m_ShelfLife = value;
}
std::shared_ptr<TimePeriodDTO> BaseOfferDTO::getLifeTime() const
{
    return m_LifeTime;
}

void BaseOfferDTO::setLifeTime(std::shared_ptr<TimePeriodDTO> value)
{
	m_LifeTime = value;
}
std::shared_ptr<TimePeriodDTO> BaseOfferDTO::getGuaranteePeriod() const
{
    return m_GuaranteePeriod;
}

void BaseOfferDTO::setGuaranteePeriod(std::shared_ptr<TimePeriodDTO> value)
{
	m_GuaranteePeriod = value;
}
std::string BaseOfferDTO::getCustomsCommodityCode() const
{
    return m_CustomsCommodityCode;
}

void BaseOfferDTO::setCustomsCommodityCode(std::string value)
{
	m_CustomsCommodityCode = value;
}
std::vector<std::string> BaseOfferDTO::getCertificates() const
{
    return m_Certificates;
}

void BaseOfferDTO::setCertificates(std::vector<std::string> value)
{
	m_Certificates = value;
}
int32_t BaseOfferDTO::getBoxCount() const
{
    return m_BoxCount;
}

void BaseOfferDTO::setBoxCount(int32_t value)
{
	m_BoxCount = value;
}
std::shared_ptr<OfferConditionDTO> BaseOfferDTO::getCondition() const
{
    return m_Condition;
}

void BaseOfferDTO::setCondition(std::shared_ptr<OfferConditionDTO> value)
{
	m_Condition = value;
}
std::shared_ptr<OfferType> BaseOfferDTO::getType() const
{
    return m_Type;
}

void BaseOfferDTO::setType(std::shared_ptr<OfferType> value)
{
	m_Type = value;
}
bool BaseOfferDTO::isDownloadable() const
{
    return m_Downloadable;
}

void BaseOfferDTO::setDownloadable(bool value)
{
	m_Downloadable = value;
}
bool BaseOfferDTO::isAdult() const
{
    return m_Adult;
}

void BaseOfferDTO::setAdult(bool value)
{
	m_Adult = value;
}
std::shared_ptr<AgeDTO> BaseOfferDTO::getAge() const
{
    return m_Age;
}

void BaseOfferDTO::setAge(std::shared_ptr<AgeDTO> value)
{
	m_Age = value;
}
std::vector<std::shared_ptr<OfferParamDTO>> BaseOfferDTO::getParams() const
{
    return m_Params;
}

void BaseOfferDTO::setParams(std::vector<std::shared_ptr<OfferParamDTO>> value)
{
	m_Params = value;
}

std::vector<BaseOfferDTO> createBaseOfferDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<BaseOfferDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(BaseOfferDTO(child.second));
    }

    return vec;
}

}
}
}
}

