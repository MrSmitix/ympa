/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedbackGradesDTO.h
 *
 * Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
 */

#ifndef FeedbackGradesDTO_H_
#define FeedbackGradesDTO_H_



#include "FeedbackFactorDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
/// </summary>
class  FeedbackGradesDTO 
{
public:
    FeedbackGradesDTO() = default;
    explicit FeedbackGradesDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedbackGradesDTO() = default;

    FeedbackGradesDTO(const FeedbackGradesDTO& other) = default; // copy constructor
    FeedbackGradesDTO(FeedbackGradesDTO&& other) noexcept = default; // move constructor

    FeedbackGradesDTO& operator=(const FeedbackGradesDTO& other) = default; // copy assignment
    FeedbackGradesDTO& operator=(FeedbackGradesDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FeedbackGradesDTO members

    /// <summary>
    /// Общая оценка, указанная в отзыве: от &#x60;1&#x60; («Ужасный магазин») до &#x60;5&#x60; («Отличный магазин»).
    /// </summary>
    double getAverage() const;
    void setAverage(double value);

    /// <summary>
    /// Количество пользователей, считающих отзыв полезным.
    /// </summary>
    int64_t getAgreeCount() const;
    void setAgreeCount(int64_t value);

    /// <summary>
    /// Количество пользователей, считающих отзыв бесполезным.
    /// </summary>
    int64_t getRejectCount() const;
    void setRejectCount(int64_t value);

    /// <summary>
    /// Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор. 
    /// </summary>
    std::vector<FeedbackFactorDTO> getFactors() const;
    void setFactors(std::vector<FeedbackFactorDTO> value);

protected:
    double m_Average = 0.0;
    int64_t m_AgreeCount = 0L;
    int64_t m_RejectCount = 0L;
    std::vector<FeedbackFactorDTO> m_Factors;
};

std::vector<FeedbackGradesDTO> createFeedbackGradesDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FeedbackGradesDTO>(const FeedbackGradesDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FeedbackGradesDTO fromPt<FeedbackGradesDTO>(const boost::property_tree::ptree& pt) {
    FeedbackGradesDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FeedbackGradesDTO_H_ */
