/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FeedbackGradesDTO.h
 *
 * Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
 */

#ifndef FeedbackGradesDTO_H_
#define FeedbackGradesDTO_H_


#include "FeedbackFactorDTO.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
/// </summary>
class  FeedbackGradesDTO
{
public:
    FeedbackGradesDTO();
    virtual ~FeedbackGradesDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FeedbackGradesDTO& rhs) const;
    bool operator!=(const FeedbackGradesDTO& rhs) const;

    /////////////////////////////////////////////
    /// FeedbackGradesDTO members

    /// <summary>
    /// Общая оценка, указанная в отзыве: от &#x60;1&#x60; («Ужасный магазин») до &#x60;5&#x60; («Отличный магазин»).
    /// </summary>
    double getAverage() const;
    void setAverage(double const value);
    bool averageIsSet() const;
    void unsetAverage();
    /// <summary>
    /// Количество пользователей, считающих отзыв полезным.
    /// </summary>
    int64_t getAgreeCount() const;
    void setAgreeCount(int64_t const value);
    bool agreeCountIsSet() const;
    void unsetAgreeCount();
    /// <summary>
    /// Количество пользователей, считающих отзыв бесполезным.
    /// </summary>
    int64_t getRejectCount() const;
    void setRejectCount(int64_t const value);
    bool rejectCountIsSet() const;
    void unsetRejectCount();
    /// <summary>
    /// Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор. 
    /// </summary>
    std::vector<org::openapitools::server::model::FeedbackFactorDTO> getFactors() const;
    void setFactors(std::vector<org::openapitools::server::model::FeedbackFactorDTO> const& value);

    friend  void to_json(nlohmann::json& j, const FeedbackGradesDTO& o);
    friend  void from_json(const nlohmann::json& j, FeedbackGradesDTO& o);
protected:
    double m_Average;
    bool m_AverageIsSet;
    int64_t m_AgreeCount;
    bool m_AgreeCountIsSet;
    int64_t m_RejectCount;
    bool m_RejectCountIsSet;
    std::vector<org::openapitools::server::model::FeedbackFactorDTO> m_Factors;

    
};

} // namespace org::openapitools::server::model

#endif /* FeedbackGradesDTO_H_ */
