/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderDigitalItemDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderDigitalItemDTO::OrderDigitalItemDTO()
{
    m_Id = 0L;
    m_Code = "";
    m_Slip = "";
    
}

void OrderDigitalItemDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderDigitalItemDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderDigitalItemDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderDigitalItemDTO" : pathPrefix;

                    
    return success;
}

bool OrderDigitalItemDTO::operator==(const OrderDigitalItemDTO& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getCode() == rhs.getCode())
     &&
    
    (getSlip() == rhs.getSlip())
     &&
    
    (getActivateTill() == rhs.getActivateTill())
    
    
    ;
}

bool OrderDigitalItemDTO::operator!=(const OrderDigitalItemDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderDigitalItemDTO& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    j["code"] = o.m_Code;
    j["slip"] = o.m_Slip;
    j["activate_till"] = o.m_Activate_till;
    
}

void from_json(const nlohmann::json& j, OrderDigitalItemDTO& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("code").get_to(o.m_Code);
    j.at("slip").get_to(o.m_Slip);
    j.at("activate_till").get_to(o.m_Activate_till);
    
}

int64_t OrderDigitalItemDTO::getId() const
{
    return m_Id;
}
void OrderDigitalItemDTO::setId(int64_t const value)
{
    m_Id = value;
}
std::string OrderDigitalItemDTO::getCode() const
{
    return m_Code;
}
void OrderDigitalItemDTO::setCode(std::string const& value)
{
    m_Code = value;
}
std::string OrderDigitalItemDTO::getSlip() const
{
    return m_Slip;
}
void OrderDigitalItemDTO::setSlip(std::string const& value)
{
    m_Slip = value;
}
std::string OrderDigitalItemDTO::getActivateTill() const
{
    return m_Activate_till;
}
void OrderDigitalItemDTO::setActivateTill(std::string const& value)
{
    m_Activate_till = value;
}


} // namespace org::openapitools::server::model

