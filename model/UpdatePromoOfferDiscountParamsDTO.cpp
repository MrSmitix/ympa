/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UpdatePromoOfferDiscountParamsDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UpdatePromoOfferDiscountParamsDTO::UpdatePromoOfferDiscountParamsDTO()
{
    m_Price = 0L;
    m_PriceIsSet = false;
    m_PromoPrice = 0L;
    m_PromoPriceIsSet = false;
    
}

void UpdatePromoOfferDiscountParamsDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UpdatePromoOfferDiscountParamsDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UpdatePromoOfferDiscountParamsDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UpdatePromoOfferDiscountParamsDTO" : pathPrefix;

         
    if (priceIsSet())
    {
        const int64_t& value = m_Price;
        const std::string currentValuePath = _pathPrefix + ".price";
                
        
        if (value < 1ll)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }

    }
         
    if (promoPriceIsSet())
    {
        const int64_t& value = m_PromoPrice;
        const std::string currentValuePath = _pathPrefix + ".promoPrice";
                
        
        if (value < 1ll)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }

    }
    
    return success;
}

bool UpdatePromoOfferDiscountParamsDTO::operator==(const UpdatePromoOfferDiscountParamsDTO& rhs) const
{
    return
    
    
    
    ((!priceIsSet() && !rhs.priceIsSet()) || (priceIsSet() && rhs.priceIsSet() && getPrice() == rhs.getPrice())) &&
    
    
    ((!promoPriceIsSet() && !rhs.promoPriceIsSet()) || (promoPriceIsSet() && rhs.promoPriceIsSet() && getPromoPrice() == rhs.getPromoPrice()))
    
    ;
}

bool UpdatePromoOfferDiscountParamsDTO::operator!=(const UpdatePromoOfferDiscountParamsDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UpdatePromoOfferDiscountParamsDTO& o)
{
    j = nlohmann::json::object();
    if(o.priceIsSet())
        j["price"] = o.m_Price;
    if(o.promoPriceIsSet())
        j["promoPrice"] = o.m_PromoPrice;
    
}

void from_json(const nlohmann::json& j, UpdatePromoOfferDiscountParamsDTO& o)
{
    if(j.find("price") != j.end())
    {
        j.at("price").get_to(o.m_Price);
        o.m_PriceIsSet = true;
    } 
    if(j.find("promoPrice") != j.end())
    {
        j.at("promoPrice").get_to(o.m_PromoPrice);
        o.m_PromoPriceIsSet = true;
    } 
    
}

int64_t UpdatePromoOfferDiscountParamsDTO::getPrice() const
{
    return m_Price;
}
void UpdatePromoOfferDiscountParamsDTO::setPrice(int64_t const value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool UpdatePromoOfferDiscountParamsDTO::priceIsSet() const
{
    return m_PriceIsSet;
}
void UpdatePromoOfferDiscountParamsDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
int64_t UpdatePromoOfferDiscountParamsDTO::getPromoPrice() const
{
    return m_PromoPrice;
}
void UpdatePromoOfferDiscountParamsDTO::setPromoPrice(int64_t const value)
{
    m_PromoPrice = value;
    m_PromoPriceIsSet = true;
}
bool UpdatePromoOfferDiscountParamsDTO::promoPriceIsSet() const
{
    return m_PromoPriceIsSet;
}
void UpdatePromoOfferDiscountParamsDTO::unsetPromoPrice()
{
    m_PromoPriceIsSet = false;
}


} // namespace org::openapitools::server::model

