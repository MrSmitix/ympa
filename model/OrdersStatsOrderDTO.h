/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersStatsOrderDTO.h
 *
 * Информация о заказе.
 */

#ifndef OrdersStatsOrderDTO_H_
#define OrdersStatsOrderDTO_H_



#include "OrdersStatsDeliveryRegionDTO.h"
#include "OrdersStatsOrderPaymentType.h"
#include <string>
#include "OrdersStatsItemDTO.h"
#include "OrdersStatsCommissionDTO.h"
#include <vector>
#include "OrderStatsStatusType.h"
#include "OrdersStatsPaymentDTO.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о заказе.
/// </summary>
class  OrdersStatsOrderDTO 
{
public:
    OrdersStatsOrderDTO() = default;
    explicit OrdersStatsOrderDTO(boost::property_tree::ptree const& pt);
    virtual ~OrdersStatsOrderDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// OrdersStatsOrderDTO members

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Дата создания заказа.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
    /// </summary>
    std::string getCreationDate() const;
    void setCreationDate(std::string value);

    /// <summary>
    /// Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, &#x60;2017-11-21T00:00:00&#x60;. Часовой пояс — UTC+03:00 (Москва). 
    /// </summary>
    std::string getStatusUpdateDate() const;
    void setStatusUpdateDate(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderStatsStatusType> getStatus() const;
    void setStatus(std::shared_ptr<OrderStatsStatusType> value);

    /// <summary>
    /// Идентификатор заказа в информационной системе магазина.
    /// </summary>
    std::string getPartnerOrderId() const;
    void setPartnerOrderId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrdersStatsOrderPaymentType> getPaymentType() const;
    void setPaymentType(std::shared_ptr<OrdersStatsOrderPaymentType> value);

    /// <summary>
    /// Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
    /// </summary>
    bool isFake() const;
    void setFake(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrdersStatsDeliveryRegionDTO> getDeliveryRegion() const;
    void setDeliveryRegion(std::shared_ptr<OrdersStatsDeliveryRegionDTO> value);

    /// <summary>
    /// Список товаров в заказе после возможных изменений.
    /// </summary>
    std::vector<std::shared_ptr<OrdersStatsItemDTO>> getItems() const;
    void setItems(std::vector<std::shared_ptr<OrdersStatsItemDTO>> value);

    /// <summary>
    /// Список товаров в заказе до изменений.
    /// </summary>
    std::vector<std::shared_ptr<OrdersStatsItemDTO>> getInitialItems() const;
    void setInitialItems(std::vector<std::shared_ptr<OrdersStatsItemDTO>> value);

    /// <summary>
    /// Информация о денежных переводах по заказу.
    /// </summary>
    std::vector<std::shared_ptr<OrdersStatsPaymentDTO>> getPayments() const;
    void setPayments(std::vector<std::shared_ptr<OrdersStatsPaymentDTO>> value);

    /// <summary>
    /// Информация о комиссиях за заказ.
    /// </summary>
    std::vector<std::shared_ptr<OrdersStatsCommissionDTO>> getCommissions() const;
    void setCommissions(std::vector<std::shared_ptr<OrdersStatsCommissionDTO>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_Id = 0L;
    std::string m_CreationDate = "";
    std::string m_StatusUpdateDate = "";
    std::shared_ptr<OrderStatsStatusType> m_Status = std::make_shared<OrderStatsStatusType>();
    std::string m_PartnerOrderId = "";
    std::shared_ptr<OrdersStatsOrderPaymentType> m_PaymentType = std::make_shared<OrdersStatsOrderPaymentType>();
    bool m_Fake = false;
    std::shared_ptr<OrdersStatsDeliveryRegionDTO> m_DeliveryRegion;
    std::vector<std::shared_ptr<OrdersStatsItemDTO>> m_Items;
    std::vector<std::shared_ptr<OrdersStatsItemDTO>> m_InitialItems;
    std::vector<std::shared_ptr<OrdersStatsPaymentDTO>> m_Payments;
    std::vector<std::shared_ptr<OrdersStatsCommissionDTO>> m_Commissions;
};

std::vector<OrdersStatsOrderDTO> createOrdersStatsOrderDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* OrdersStatsOrderDTO_H_ */
