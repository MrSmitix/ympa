/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrdersStatsOrderDTO.h
 *
 * Информация о заказе.
 */

#ifndef OrdersStatsOrderDTO_H_
#define OrdersStatsOrderDTO_H_


#include "OrdersStatsDeliveryRegionDTO.h"
#include "OrdersStatsOrderPaymentType.h"
#include <string>
#include "OrdersStatsItemDTO.h"
#include "OrdersStatsCommissionDTO.h"
#include <vector>
#include "OrderStatsStatusType.h"
#include "OrdersStatsPaymentDTO.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о заказе.
/// </summary>
class  OrdersStatsOrderDTO
{
public:
    OrdersStatsOrderDTO();
    virtual ~OrdersStatsOrderDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OrdersStatsOrderDTO& rhs) const;
    bool operator!=(const OrdersStatsOrderDTO& rhs) const;

    /////////////////////////////////////////////
    /// OrdersStatsOrderDTO members

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Дата создания заказа.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
    /// </summary>
    std::string getCreationDate() const;
    void setCreationDate(std::string const& value);
    bool creationDateIsSet() const;
    void unsetCreationDate();
    /// <summary>
    /// Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, &#x60;2017-11-21T00:00:00&#x60;. Часовой пояс — UTC+03:00 (Москва). 
    /// </summary>
    std::string getStatusUpdateDate() const;
    void setStatusUpdateDate(std::string const& value);
    bool statusUpdateDateIsSet() const;
    void unsetStatusUpdateDate();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderStatsStatusType getStatus() const;
    void setStatus(org::openapitools::server::model::OrderStatsStatusType const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// Идентификатор заказа в информационной системе магазина.
    /// </summary>
    std::string getPartnerOrderId() const;
    void setPartnerOrderId(std::string const& value);
    bool partnerOrderIdIsSet() const;
    void unsetPartnerOrderId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrdersStatsOrderPaymentType getPaymentType() const;
    void setPaymentType(org::openapitools::server::model::OrdersStatsOrderPaymentType const& value);
    bool paymentTypeIsSet() const;
    void unsetPaymentType();
    /// <summary>
    /// Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
    /// </summary>
    bool isFake() const;
    void setFake(bool const value);
    bool fakeIsSet() const;
    void unsetFake();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrdersStatsDeliveryRegionDTO getDeliveryRegion() const;
    void setDeliveryRegion(org::openapitools::server::model::OrdersStatsDeliveryRegionDTO const& value);
    bool deliveryRegionIsSet() const;
    void unsetDeliveryRegion();
    /// <summary>
    /// Список товаров в заказе после возможных изменений.
    /// </summary>
    std::vector<org::openapitools::server::model::OrdersStatsItemDTO> getItems() const;
    void setItems(std::vector<org::openapitools::server::model::OrdersStatsItemDTO> const& value);
    /// <summary>
    /// Список товаров в заказе до изменений.
    /// </summary>
    std::vector<org::openapitools::server::model::OrdersStatsItemDTO> getInitialItems() const;
    void setInitialItems(std::vector<org::openapitools::server::model::OrdersStatsItemDTO> const& value);
    bool initialItemsIsSet() const;
    void unsetInitialItems();
    /// <summary>
    /// Информация о денежных переводах по заказу.
    /// </summary>
    std::vector<org::openapitools::server::model::OrdersStatsPaymentDTO> getPayments() const;
    void setPayments(std::vector<org::openapitools::server::model::OrdersStatsPaymentDTO> const& value);
    /// <summary>
    /// Информация о комиссиях за заказ.
    /// </summary>
    std::vector<org::openapitools::server::model::OrdersStatsCommissionDTO> getCommissions() const;
    void setCommissions(std::vector<org::openapitools::server::model::OrdersStatsCommissionDTO> const& value);

    friend  void to_json(nlohmann::json& j, const OrdersStatsOrderDTO& o);
    friend  void from_json(const nlohmann::json& j, OrdersStatsOrderDTO& o);
protected:
    int64_t m_Id;
    bool m_IdIsSet;
    std::string m_CreationDate;
    bool m_CreationDateIsSet;
    std::string m_StatusUpdateDate;
    bool m_StatusUpdateDateIsSet;
    org::openapitools::server::model::OrderStatsStatusType m_Status;
    bool m_StatusIsSet;
    std::string m_PartnerOrderId;
    bool m_PartnerOrderIdIsSet;
    org::openapitools::server::model::OrdersStatsOrderPaymentType m_PaymentType;
    bool m_PaymentTypeIsSet;
    bool m_Fake;
    bool m_FakeIsSet;
    org::openapitools::server::model::OrdersStatsDeliveryRegionDTO m_DeliveryRegion;
    bool m_DeliveryRegionIsSet;
    std::vector<org::openapitools::server::model::OrdersStatsItemDTO> m_Items;

    std::vector<org::openapitools::server::model::OrdersStatsItemDTO> m_InitialItems;
    bool m_InitialItemsIsSet;
    std::vector<org::openapitools::server::model::OrdersStatsPaymentDTO> m_Payments;

    std::vector<org::openapitools::server::model::OrdersStatsCommissionDTO> m_Commissions;

    
};

} // namespace org::openapitools::server::model

#endif /* OrdersStatsOrderDTO_H_ */
