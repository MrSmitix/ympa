/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GenerateShipmentListDocumentReportRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GenerateShipmentListDocumentReportRequest::GenerateShipmentListDocumentReportRequest()
{
    m_CampaignId = 0L;
    m_ShipmentId = 0L;
    m_ShipmentIdIsSet = false;
    m_OrderIdsIsSet = false;
    
}

void GenerateShipmentListDocumentReportRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GenerateShipmentListDocumentReportRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GenerateShipmentListDocumentReportRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GenerateShipmentListDocumentReportRequest" : pathPrefix;

                 
    if (orderIdsIsSet())
    {
        const std::vector<int64_t>& value = m_OrderIds;
        const std::string currentValuePath = _pathPrefix + ".orderIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool GenerateShipmentListDocumentReportRequest::operator==(const GenerateShipmentListDocumentReportRequest& rhs) const
{
    return
    
    
    (getCampaignId() == rhs.getCampaignId())
     &&
    
    
    ((!shipmentIdIsSet() && !rhs.shipmentIdIsSet()) || (shipmentIdIsSet() && rhs.shipmentIdIsSet() && getShipmentId() == rhs.getShipmentId())) &&
    
    
    ((!orderIdsIsSet() && !rhs.orderIdsIsSet()) || (orderIdsIsSet() && rhs.orderIdsIsSet() && getOrderIds() == rhs.getOrderIds()))
    
    ;
}

bool GenerateShipmentListDocumentReportRequest::operator!=(const GenerateShipmentListDocumentReportRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GenerateShipmentListDocumentReportRequest& o)
{
    j = nlohmann::json::object();
    j["campaignId"] = o.m_CampaignId;
    if(o.shipmentIdIsSet())
        j["shipmentId"] = o.m_ShipmentId;
    if(o.orderIdsIsSet() || !o.m_OrderIds.empty())
        j["orderIds"] = o.m_OrderIds;
    
}

void from_json(const nlohmann::json& j, GenerateShipmentListDocumentReportRequest& o)
{
    j.at("campaignId").get_to(o.m_CampaignId);
    if(j.find("shipmentId") != j.end())
    {
        j.at("shipmentId").get_to(o.m_ShipmentId);
        o.m_ShipmentIdIsSet = true;
    } 
    if(j.find("orderIds") != j.end())
    {
        j.at("orderIds").get_to(o.m_OrderIds);
        o.m_OrderIdsIsSet = true;
    } 
    
}

int64_t GenerateShipmentListDocumentReportRequest::getCampaignId() const
{
    return m_CampaignId;
}
void GenerateShipmentListDocumentReportRequest::setCampaignId(int64_t const value)
{
    m_CampaignId = value;
}
int64_t GenerateShipmentListDocumentReportRequest::getShipmentId() const
{
    return m_ShipmentId;
}
void GenerateShipmentListDocumentReportRequest::setShipmentId(int64_t const value)
{
    m_ShipmentId = value;
    m_ShipmentIdIsSet = true;
}
bool GenerateShipmentListDocumentReportRequest::shipmentIdIsSet() const
{
    return m_ShipmentIdIsSet;
}
void GenerateShipmentListDocumentReportRequest::unsetShipmentId()
{
    m_ShipmentIdIsSet = false;
}
std::vector<int64_t> GenerateShipmentListDocumentReportRequest::getOrderIds() const
{
    return m_OrderIds;
}
void GenerateShipmentListDocumentReportRequest::setOrderIds(std::vector<int64_t> const value)
{
    m_OrderIds = value;
    m_OrderIdsIsSet = true;
}
bool GenerateShipmentListDocumentReportRequest::orderIdsIsSet() const
{
    return m_OrderIdsIsSet;
}
void GenerateShipmentListDocumentReportRequest::unsetOrderIds()
{
    m_OrderIdsIsSet = false;
}


} // namespace org::openapitools::server::model

