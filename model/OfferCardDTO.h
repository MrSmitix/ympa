/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferCardDTO.h
 *
 * Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
 */

#ifndef OfferCardDTO_H_
#define OfferCardDTO_H_



#include "OfferCardRecommendationDTO.h"
#include "GetMappingDTO.h"
#include <string>
#include "ParameterValueDTO.h"
#include <vector>
#include "OfferCardStatusType.h"
#include "OfferErrorDTO.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
/// </summary>
class  OfferCardDTO 
{
public:
    OfferCardDTO() = default;
    explicit OfferCardDTO(boost::property_tree::ptree const& pt);
    virtual ~OfferCardDTO() = default;

    OfferCardDTO(const OfferCardDTO& other) = default; // copy constructor
    OfferCardDTO(OfferCardDTO&& other) noexcept = default; // move constructor

    OfferCardDTO& operator=(const OfferCardDTO& other) = default; // copy assignment
    OfferCardDTO& operator=(OfferCardDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OfferCardDTO members

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getOfferId() const;
    void setOfferId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    GetMappingDTO getMapping() const;
    void setMapping(GetMappingDTO value);

    /// <summary>
    /// Список характеристик с их значениями. 
    /// </summary>
    std::vector<ParameterValueDTO> getParameterValues() const;
    void setParameterValues(std::vector<ParameterValueDTO> value);

    /// <summary>
    /// 
    /// </summary>
    OfferCardStatusType getCardStatus() const;
    void setCardStatus(OfferCardStatusType value);

    /// <summary>
    /// Процент заполненности карточки.
    /// </summary>
    int32_t getContentRating() const;
    void setContentRating(int32_t value);

    /// <summary>
    /// Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. 
    /// </summary>
    std::vector<OfferCardRecommendationDTO> getRecommendations() const;
    void setRecommendations(std::vector<OfferCardRecommendationDTO> value);

    /// <summary>
    /// Ошибки в контенте, препятствующие размещению товара на витрине.
    /// </summary>
    std::vector<OfferErrorDTO> getErrors() const;
    void setErrors(std::vector<OfferErrorDTO> value);

    /// <summary>
    /// Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
    /// </summary>
    std::vector<OfferErrorDTO> getWarnings() const;
    void setWarnings(std::vector<OfferErrorDTO> value);

protected:
    std::string m_OfferId = "";
    GetMappingDTO m_Mapping;
    std::vector<ParameterValueDTO> m_ParameterValues;
    OfferCardStatusType m_CardStatus = OfferCardStatusType{};
    int32_t m_ContentRating = 0;
    std::vector<OfferCardRecommendationDTO> m_Recommendations;
    std::vector<OfferErrorDTO> m_Errors;
    std::vector<OfferErrorDTO> m_Warnings;
};

std::vector<OfferCardDTO> createOfferCardDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OfferCardDTO>(const OfferCardDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OfferCardDTO fromPt<OfferCardDTO>(const boost::property_tree::ptree& pt) {
    OfferCardDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OfferCardDTO_H_ */
