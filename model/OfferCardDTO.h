/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferCardDTO.h
 *
 * Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
 */

#ifndef OfferCardDTO_H_
#define OfferCardDTO_H_



#include "OfferCardRecommendationDTO.h"
#include "GetMappingDTO.h"
#include <string>
#include "ParameterValueDTO.h"
#include <vector>
#include "OfferCardStatusType.h"
#include "OfferErrorDTO.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
/// </summary>
class  OfferCardDTO 
{
public:
    OfferCardDTO() = default;
    explicit OfferCardDTO(boost::property_tree::ptree const& pt);
    virtual ~OfferCardDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// OfferCardDTO members

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getOfferId() const;
    void setOfferId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetMappingDTO> getMapping() const;
    void setMapping(std::shared_ptr<GetMappingDTO> value);

    /// <summary>
    /// Список характеристик с их значениями. 
    /// </summary>
    std::vector<std::shared_ptr<ParameterValueDTO>> getParameterValues() const;
    void setParameterValues(std::vector<std::shared_ptr<ParameterValueDTO>> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OfferCardStatusType> getCardStatus() const;
    void setCardStatus(std::shared_ptr<OfferCardStatusType> value);

    /// <summary>
    /// Процент заполненности карточки.
    /// </summary>
    int32_t getContentRating() const;
    void setContentRating(int32_t value);

    /// <summary>
    /// Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. 
    /// </summary>
    std::vector<std::shared_ptr<OfferCardRecommendationDTO>> getRecommendations() const;
    void setRecommendations(std::vector<std::shared_ptr<OfferCardRecommendationDTO>> value);

    /// <summary>
    /// Ошибки в контенте, препятствующие размещению товара на витрине.
    /// </summary>
    std::vector<std::shared_ptr<OfferErrorDTO>> getErrors() const;
    void setErrors(std::vector<std::shared_ptr<OfferErrorDTO>> value);

    /// <summary>
    /// Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
    /// </summary>
    std::vector<std::shared_ptr<OfferErrorDTO>> getWarnings() const;
    void setWarnings(std::vector<std::shared_ptr<OfferErrorDTO>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_OfferId = "";
    std::shared_ptr<GetMappingDTO> m_Mapping;
    std::vector<std::shared_ptr<ParameterValueDTO>> m_ParameterValues;
    std::shared_ptr<OfferCardStatusType> m_CardStatus = std::make_shared<OfferCardStatusType>();
    int32_t m_ContentRating = 0;
    std::vector<std::shared_ptr<OfferCardRecommendationDTO>> m_Recommendations;
    std::vector<std::shared_ptr<OfferErrorDTO>> m_Errors;
    std::vector<std::shared_ptr<OfferErrorDTO>> m_Warnings;
};

std::vector<OfferCardDTO> createOfferCardDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* OfferCardDTO_H_ */
