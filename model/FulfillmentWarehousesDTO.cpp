/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FulfillmentWarehousesDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FulfillmentWarehousesDTO::FulfillmentWarehousesDTO()
{
    
}

void FulfillmentWarehousesDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FulfillmentWarehousesDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FulfillmentWarehousesDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FulfillmentWarehousesDTO" : pathPrefix;

         
    
    /* Warehouses */ {
        const std::vector<org::openapitools::server::model::FulfillmentWarehouseDTO>& value = m_Warehouses;
        const std::string currentValuePath = _pathPrefix + ".warehouses";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::FulfillmentWarehouseDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".warehouses") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool FulfillmentWarehousesDTO::operator==(const FulfillmentWarehousesDTO& rhs) const
{
    return
    
    
    (getWarehouses() == rhs.getWarehouses())
    
    
    ;
}

bool FulfillmentWarehousesDTO::operator!=(const FulfillmentWarehousesDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FulfillmentWarehousesDTO& o)
{
    j = nlohmann::json::object();
    j["warehouses"] = o.m_Warehouses;
    
}

void from_json(const nlohmann::json& j, FulfillmentWarehousesDTO& o)
{
    j.at("warehouses").get_to(o.m_Warehouses);
    
}

std::vector<org::openapitools::server::model::FulfillmentWarehouseDTO> FulfillmentWarehousesDTO::getWarehouses() const
{
    return m_Warehouses;
}
void FulfillmentWarehousesDTO::setWarehouses(std::vector<org::openapitools::server::model::FulfillmentWarehouseDTO> const& value)
{
    m_Warehouses = value;
}


} // namespace org::openapitools::server::model

