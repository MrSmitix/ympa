/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateOrderStatusResponse.h
 *
 * Информация об изменении статуса заказа.
 */

#ifndef UpdateOrderStatusResponse_H_
#define UpdateOrderStatusResponse_H_



#include "OrderDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация об изменении статуса заказа.
/// </summary>
class  UpdateOrderStatusResponse 
{
public:
    UpdateOrderStatusResponse() = default;
    explicit UpdateOrderStatusResponse(boost::property_tree::ptree const& pt);
    virtual ~UpdateOrderStatusResponse() = default;

    UpdateOrderStatusResponse(const UpdateOrderStatusResponse& other) = default; // copy constructor
    UpdateOrderStatusResponse(UpdateOrderStatusResponse&& other) noexcept = default; // move constructor

    UpdateOrderStatusResponse& operator=(const UpdateOrderStatusResponse& other) = default; // copy assignment
    UpdateOrderStatusResponse& operator=(UpdateOrderStatusResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UpdateOrderStatusResponse members

    /// <summary>
    /// 
    /// </summary>
    OrderDTO getOrder() const;
    void setOrder(OrderDTO value);

protected:
    OrderDTO m_Order;
};

std::vector<UpdateOrderStatusResponse> createUpdateOrderStatusResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UpdateOrderStatusResponse>(const UpdateOrderStatusResponse& val) {
    return val.toPropertyTree();
}

template<>
inline UpdateOrderStatusResponse fromPt<UpdateOrderStatusResponse>(const boost::property_tree::ptree& pt) {
    UpdateOrderStatusResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UpdateOrderStatusResponse_H_ */
