/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PriceQuarantineVerdictDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PriceQuarantineVerdictDTO::PriceQuarantineVerdictDTO()
{
    m_TypeIsSet = false;
    
}

void PriceQuarantineVerdictDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PriceQuarantineVerdictDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PriceQuarantineVerdictDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PriceQuarantineVerdictDTO" : pathPrefix;

             
    
    /* Params */ {
        const std::vector<org::openapitools::server::model::PriceQuarantineVerdictParameterDTO>& value = m_Params;
        const std::string currentValuePath = _pathPrefix + ".params";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::PriceQuarantineVerdictParameterDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".params") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool PriceQuarantineVerdictDTO::operator==(const PriceQuarantineVerdictDTO& rhs) const
{
    return
    
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    (getParams() == rhs.getParams())
    
    
    ;
}

bool PriceQuarantineVerdictDTO::operator!=(const PriceQuarantineVerdictDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PriceQuarantineVerdictDTO& o)
{
    j = nlohmann::json::object();
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    j["params"] = o.m_Params;
    
}

void from_json(const nlohmann::json& j, PriceQuarantineVerdictDTO& o)
{
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    j.at("params").get_to(o.m_Params);
    
}

org::openapitools::server::model::PriceQuarantineVerdictType PriceQuarantineVerdictDTO::getType() const
{
    return m_Type;
}
void PriceQuarantineVerdictDTO::setType(org::openapitools::server::model::PriceQuarantineVerdictType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool PriceQuarantineVerdictDTO::typeIsSet() const
{
    return m_TypeIsSet;
}
void PriceQuarantineVerdictDTO::unsetType()
{
    m_TypeIsSet = false;
}
std::vector<org::openapitools::server::model::PriceQuarantineVerdictParameterDTO> PriceQuarantineVerdictDTO::getParams() const
{
    return m_Params;
}
void PriceQuarantineVerdictDTO::setParams(std::vector<org::openapitools::server::model::PriceQuarantineVerdictParameterDTO> const& value)
{
    m_Params = value;
}


} // namespace org::openapitools::server::model

