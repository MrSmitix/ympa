/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GetOrdersStatsRequest.h
 *
 * Запрос информации по заказам.
 */

#ifndef GetOrdersStatsRequest_H_
#define GetOrdersStatsRequest_H_


#include <string>
#include <vector>
#include "OrderStatsStatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Запрос информации по заказам.
/// </summary>
class  GetOrdersStatsRequest
{
public:
    GetOrdersStatsRequest();
    virtual ~GetOrdersStatsRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GetOrdersStatsRequest& rhs) const;
    bool operator!=(const GetOrdersStatsRequest& rhs) const;

    /////////////////////////////////////////////
    /// GetOrdersStatsRequest members

    /// <summary>
    /// Начальная дата, когда заказ был сформирован.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;updateFrom&#x60; и &#x60;updateTo&#x60;. 
    /// </summary>
    std::string getDateFrom() const;
    void setDateFrom(std::string const& value);
    bool dateFromIsSet() const;
    void unsetDateFrom();
    /// <summary>
    /// Конечная дата, когда заказ был сформирован.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;updateFrom&#x60; и &#x60;updateTo&#x60;. 
    /// </summary>
    std::string getDateTo() const;
    void setDateTo(std::string const& value);
    bool dateToIsSet() const;
    void unsetDateTo();
    /// <summary>
    /// Начальная дата периода, за который были изменения статуса заказа.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;dateFrom&#x60; и &#x60;dateTo&#x60;. 
    /// </summary>
    std::string getUpdateFrom() const;
    void setUpdateFrom(std::string const& value);
    bool updateFromIsSet() const;
    void unsetUpdateFrom();
    /// <summary>
    /// Конечная дата периода, за который были изменения статуса заказа.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;dateFrom&#x60; и &#x60;dateTo&#x60;. 
    /// </summary>
    std::string getUpdateTo() const;
    void setUpdateTo(std::string const& value);
    bool updateToIsSet() const;
    void unsetUpdateTo();
    /// <summary>
    /// Список идентификаторов заказов.
    /// </summary>
    std::vector<int64_t> getOrders() const;
    void setOrders(std::vector<int64_t> const value);
    bool ordersIsSet() const;
    void unsetOrders();
    /// <summary>
    /// Список статусов заказов.
    /// </summary>
    std::vector<org::openapitools::server::model::OrderStatsStatusType> getStatuses() const;
    void setStatuses(std::vector<org::openapitools::server::model::OrderStatsStatusType> const& value);
    bool statusesIsSet() const;
    void unsetStatuses();
    /// <summary>
    /// Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 
    /// </summary>
    bool isHasCis() const;
    void setHasCis(bool const value);
    bool hasCisIsSet() const;
    void unsetHasCis();

    friend  void to_json(nlohmann::json& j, const GetOrdersStatsRequest& o);
    friend  void from_json(const nlohmann::json& j, GetOrdersStatsRequest& o);
protected:
    std::string m_DateFrom;
    bool m_DateFromIsSet;
    std::string m_DateTo;
    bool m_DateToIsSet;
    std::string m_UpdateFrom;
    bool m_UpdateFromIsSet;
    std::string m_UpdateTo;
    bool m_UpdateToIsSet;
    std::vector<int64_t> m_Orders;
    bool m_OrdersIsSet;
    std::vector<org::openapitools::server::model::OrderStatsStatusType> m_Statuses;
    bool m_StatusesIsSet;
    bool m_HasCis;
    bool m_HasCisIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GetOrdersStatsRequest_H_ */
