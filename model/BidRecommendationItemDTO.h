/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BidRecommendationItemDTO.h
 *
 * Рекомендованная ставка и возможная доля показов.
 */

#ifndef BidRecommendationItemDTO_H_
#define BidRecommendationItemDTO_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Рекомендованная ставка и возможная доля показов.
/// </summary>
class  BidRecommendationItemDTO 
{
public:
    BidRecommendationItemDTO() = default;
    explicit BidRecommendationItemDTO(boost::property_tree::ptree const& pt);
    virtual ~BidRecommendationItemDTO() = default;

    BidRecommendationItemDTO(const BidRecommendationItemDTO& other) = default; // copy constructor
    BidRecommendationItemDTO(BidRecommendationItemDTO&& other) noexcept = default; // move constructor

    BidRecommendationItemDTO& operator=(const BidRecommendationItemDTO& other) = default; // copy assignment
    BidRecommendationItemDTO& operator=(BidRecommendationItemDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BidRecommendationItemDTO members

    /// <summary>
    /// Значение ставки.
    /// </summary>
    int32_t getBid() const;
    void setBid(int32_t value);

    /// <summary>
    /// Доля показов. 
    /// </summary>
    int64_t getShowPercent() const;
    void setShowPercent(int64_t value);

protected:
    int32_t m_Bid = 0;
    int64_t m_ShowPercent = 0L;
};

std::vector<BidRecommendationItemDTO> createBidRecommendationItemDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BidRecommendationItemDTO>(const BidRecommendationItemDTO& val) {
    return val.toPropertyTree();
}

template<>
inline BidRecommendationItemDTO fromPt<BidRecommendationItemDTO>(const boost::property_tree::ptree& pt) {
    BidRecommendationItemDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BidRecommendationItemDTO_H_ */
