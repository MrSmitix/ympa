/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedIndexLogsOffersDTO.h
 *
 * Информация о предложениях прайс-листа.
 */

#ifndef FeedIndexLogsOffersDTO_H_
#define FeedIndexLogsOffersDTO_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о предложениях прайс-листа.
/// </summary>
class  FeedIndexLogsOffersDTO 
{
public:
    FeedIndexLogsOffersDTO() = default;
    explicit FeedIndexLogsOffersDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedIndexLogsOffersDTO() = default;

    FeedIndexLogsOffersDTO(const FeedIndexLogsOffersDTO& other) = default; // copy constructor
    FeedIndexLogsOffersDTO(FeedIndexLogsOffersDTO&& other) noexcept = default; // move constructor

    FeedIndexLogsOffersDTO& operator=(const FeedIndexLogsOffersDTO& other) = default; // copy assignment
    FeedIndexLogsOffersDTO& operator=(FeedIndexLogsOffersDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FeedIndexLogsOffersDTO members

    /// <summary>
    /// Количество предложений, который не опубликованы на Маркете из-за найденных ошибок.
    /// </summary>
    int64_t getRejectedCount() const;
    void setRejectedCount(int64_t value);

    /// <summary>
    /// Количество предложений в прайс-листе.
    /// </summary>
    int64_t getTotalCount() const;
    void setTotalCount(int64_t value);

protected:
    int64_t m_RejectedCount = 0L;
    int64_t m_TotalCount = 0L;
};

std::vector<FeedIndexLogsOffersDTO> createFeedIndexLogsOffersDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FeedIndexLogsOffersDTO>(const FeedIndexLogsOffersDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FeedIndexLogsOffersDTO fromPt<FeedIndexLogsOffersDTO>(const boost::property_tree::ptree& pt) {
    FeedIndexLogsOffersDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FeedIndexLogsOffersDTO_H_ */
