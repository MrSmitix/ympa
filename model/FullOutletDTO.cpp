/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FullOutletDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

FullOutletDTO::FullOutletDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string FullOutletDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void FullOutletDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree FullOutletDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	pt.put("coords", m_Coords);
	pt.put("isMain", m_IsMain);
	pt.put("shopOutletCode", m_ShopOutletCode);
	pt.add_child("address", m_Address.toPropertyTree());
	// generate tree for Phones
    tmp_node.clear();
	if (!m_Phones.empty()) {
        tmp_node = toPt(m_Phones);
		pt.add_child("phones", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("workingSchedule", m_WorkingSchedule.toPropertyTree());
	// generate tree for DeliveryRules
    tmp_node.clear();
	if (!m_DeliveryRules.empty()) {
        tmp_node = toPt(m_DeliveryRules);
		pt.add_child("deliveryRules", tmp_node);
		tmp_node.clear();
	}
	pt.put("storagePeriod", m_StoragePeriod);
	pt.put("id", m_Id);
	pt.add_child("region", m_Region.toPropertyTree());
	pt.put("shopOutletId", m_ShopOutletId);
	pt.put("workingTime", m_WorkingTime);
	pt.put("moderationReason", m_ModerationReason);
	return pt;
}

void FullOutletDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	m_Coords = pt.get("coords", "");
	m_IsMain = pt.get("isMain", false);
	m_ShopOutletCode = pt.get("shopOutletCode", "");
	if (pt.get_child_optional("address")) {
        m_Address = fromPt<OutletAddressDTO>(pt.get_child("address"));
	}
	// push all items of Phones into member
	if (pt.get_child_optional("phones")) {
        m_Phones = fromPt<std::vector<std::string>>(pt.get_child("phones"));
	}
	if (pt.get_child_optional("workingSchedule")) {
        m_WorkingSchedule = fromPt<OutletWorkingScheduleDTO>(pt.get_child("workingSchedule"));
	}
	// push all items of DeliveryRules into member
	if (pt.get_child_optional("deliveryRules")) {
        m_DeliveryRules = fromPt<std::vector<OutletDeliveryRuleDTO>>(pt.get_child("deliveryRules"));
	}
	m_StoragePeriod = pt.get("storagePeriod", 0L);
	m_Id = pt.get("id", 0L);
	if (pt.get_child_optional("region")) {
        m_Region = fromPt<RegionDTO>(pt.get_child("region"));
	}
	m_ShopOutletId = pt.get("shopOutletId", "");
	m_WorkingTime = pt.get("workingTime", "");
	m_ModerationReason = pt.get("moderationReason", "");
}

std::string FullOutletDTO::getName() const
{
    return m_Name;
}

void FullOutletDTO::setName(std::string value)
{
    m_Name = value;
}


OutletType FullOutletDTO::getType() const
{
    return m_Type;
}

void FullOutletDTO::setType(OutletType value)
{
    m_Type = value;
}


std::string FullOutletDTO::getCoords() const
{
    return m_Coords;
}

void FullOutletDTO::setCoords(std::string value)
{
    m_Coords = value;
}


bool FullOutletDTO::isIsMain() const
{
    return m_IsMain;
}

void FullOutletDTO::setIsMain(bool value)
{
    m_IsMain = value;
}


std::string FullOutletDTO::getShopOutletCode() const
{
    return m_ShopOutletCode;
}

void FullOutletDTO::setShopOutletCode(std::string value)
{
    m_ShopOutletCode = value;
}


OutletVisibilityType FullOutletDTO::getVisibility() const
{
    return m_Visibility;
}

void FullOutletDTO::setVisibility(OutletVisibilityType value)
{
    m_Visibility = value;
}


OutletAddressDTO FullOutletDTO::getAddress() const
{
    return m_Address;
}

void FullOutletDTO::setAddress(OutletAddressDTO value)
{
    m_Address = value;
}


std::vector<std::string> FullOutletDTO::getPhones() const
{
    return m_Phones;
}

void FullOutletDTO::setPhones(std::vector<std::string> value)
{
    m_Phones = value;
}


OutletWorkingScheduleDTO FullOutletDTO::getWorkingSchedule() const
{
    return m_WorkingSchedule;
}

void FullOutletDTO::setWorkingSchedule(OutletWorkingScheduleDTO value)
{
    m_WorkingSchedule = value;
}


std::vector<OutletDeliveryRuleDTO> FullOutletDTO::getDeliveryRules() const
{
    return m_DeliveryRules;
}

void FullOutletDTO::setDeliveryRules(std::vector<OutletDeliveryRuleDTO> value)
{
    m_DeliveryRules = value;
}


int64_t FullOutletDTO::getStoragePeriod() const
{
    return m_StoragePeriod;
}

void FullOutletDTO::setStoragePeriod(int64_t value)
{
    m_StoragePeriod = value;
}


int64_t FullOutletDTO::getId() const
{
    return m_Id;
}

void FullOutletDTO::setId(int64_t value)
{
    m_Id = value;
}


OutletStatusType FullOutletDTO::getStatus() const
{
    return m_Status;
}

void FullOutletDTO::setStatus(OutletStatusType value)
{
    m_Status = value;
}


RegionDTO FullOutletDTO::getRegion() const
{
    return m_Region;
}

void FullOutletDTO::setRegion(RegionDTO value)
{
    m_Region = value;
}


std::string FullOutletDTO::getShopOutletId() const
{
    return m_ShopOutletId;
}

void FullOutletDTO::setShopOutletId(std::string value)
{
    m_ShopOutletId = value;
}


std::string FullOutletDTO::getWorkingTime() const
{
    return m_WorkingTime;
}

void FullOutletDTO::setWorkingTime(std::string value)
{
    m_WorkingTime = value;
}


std::string FullOutletDTO::getModerationReason() const
{
    return m_ModerationReason;
}

void FullOutletDTO::setModerationReason(std::string value)
{
    m_ModerationReason = value;
}



std::vector<FullOutletDTO> createFullOutletDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<FullOutletDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(FullOutletDTO(child.second));
    }

    return vec;
}

}
}
}
}

