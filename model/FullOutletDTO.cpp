/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FullOutletDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FullOutletDTO::FullOutletDTO()
{
    m_Name = "";
    m_Coords = "";
    m_CoordsIsSet = false;
    m_IsMain = false;
    m_IsMainIsSet = false;
    m_ShopOutletCode = "";
    m_ShopOutletCodeIsSet = false;
    m_VisibilityIsSet = false;
    m_DeliveryRulesIsSet = false;
    m_StoragePeriod = 0L;
    m_StoragePeriodIsSet = false;
    m_Id = 0L;
    m_IdIsSet = false;
    m_StatusIsSet = false;
    m_RegionIsSet = false;
    m_ShopOutletId = "";
    m_ShopOutletIdIsSet = false;
    m_WorkingTime = "";
    m_WorkingTimeIsSet = false;
    m_ModerationReason = "";
    m_ModerationReasonIsSet = false;
    
}

void FullOutletDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FullOutletDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FullOutletDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FullOutletDTO" : pathPrefix;

                                
    if (!m_Address.validate(msg, _pathPrefix + ".address")) {
        msg << _pathPrefix << ": Address is invalid;";
        success = false;
    }     
    
    /* Phones */ {
        const std::vector<std::string>& value = m_Phones;
        const std::string currentValuePath = _pathPrefix + ".phones";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
 
                i++;
            }
        }

    }
        
    if (!m_WorkingSchedule.validate(msg, _pathPrefix + ".workingSchedule")) {
        msg << _pathPrefix << ": WorkingSchedule is invalid;";
        success = false;
    }     
    if (deliveryRulesIsSet())
    {
        const std::vector<org::openapitools::server::model::OutletDeliveryRuleDTO>& value = m_DeliveryRules;
        const std::string currentValuePath = _pathPrefix + ".deliveryRules";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OutletDeliveryRuleDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".deliveryRules") && success;
 
                i++;
            }
        }

    }
                                
    return success;
}

bool FullOutletDTO::operator==(const FullOutletDTO& rhs) const
{
    return
    
    
    (getName() == rhs.getName())
     &&
    
    (getType() == rhs.getType())
     &&
    
    
    ((!coordsIsSet() && !rhs.coordsIsSet()) || (coordsIsSet() && rhs.coordsIsSet() && getCoords() == rhs.getCoords())) &&
    
    
    ((!isMainIsSet() && !rhs.isMainIsSet()) || (isMainIsSet() && rhs.isMainIsSet() && isIsMain() == rhs.isIsMain())) &&
    
    
    ((!shopOutletCodeIsSet() && !rhs.shopOutletCodeIsSet()) || (shopOutletCodeIsSet() && rhs.shopOutletCodeIsSet() && getShopOutletCode() == rhs.getShopOutletCode())) &&
    
    
    ((!visibilityIsSet() && !rhs.visibilityIsSet()) || (visibilityIsSet() && rhs.visibilityIsSet() && getVisibility() == rhs.getVisibility())) &&
    
    (getAddress() == rhs.getAddress())
     &&
    
    (getPhones() == rhs.getPhones())
     &&
    
    (getWorkingSchedule() == rhs.getWorkingSchedule())
     &&
    
    
    ((!deliveryRulesIsSet() && !rhs.deliveryRulesIsSet()) || (deliveryRulesIsSet() && rhs.deliveryRulesIsSet() && getDeliveryRules() == rhs.getDeliveryRules())) &&
    
    
    ((!storagePeriodIsSet() && !rhs.storagePeriodIsSet()) || (storagePeriodIsSet() && rhs.storagePeriodIsSet() && getStoragePeriod() == rhs.getStoragePeriod())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!regionIsSet() && !rhs.regionIsSet()) || (regionIsSet() && rhs.regionIsSet() && getRegion() == rhs.getRegion())) &&
    
    
    ((!shopOutletIdIsSet() && !rhs.shopOutletIdIsSet()) || (shopOutletIdIsSet() && rhs.shopOutletIdIsSet() && getShopOutletId() == rhs.getShopOutletId())) &&
    
    
    ((!workingTimeIsSet() && !rhs.workingTimeIsSet()) || (workingTimeIsSet() && rhs.workingTimeIsSet() && getWorkingTime() == rhs.getWorkingTime())) &&
    
    
    ((!moderationReasonIsSet() && !rhs.moderationReasonIsSet()) || (moderationReasonIsSet() && rhs.moderationReasonIsSet() && getModerationReason() == rhs.getModerationReason()))
    
    ;
}

bool FullOutletDTO::operator!=(const FullOutletDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FullOutletDTO& o)
{
    j = nlohmann::json::object();
    j["name"] = o.m_Name;
    j["type"] = o.m_Type;
    if(o.coordsIsSet())
        j["coords"] = o.m_Coords;
    if(o.isMainIsSet())
        j["isMain"] = o.m_IsMain;
    if(o.shopOutletCodeIsSet())
        j["shopOutletCode"] = o.m_ShopOutletCode;
    if(o.visibilityIsSet())
        j["visibility"] = o.m_Visibility;
    j["address"] = o.m_Address;
    j["phones"] = o.m_Phones;
    j["workingSchedule"] = o.m_WorkingSchedule;
    if(o.deliveryRulesIsSet() || !o.m_DeliveryRules.empty())
        j["deliveryRules"] = o.m_DeliveryRules;
    if(o.storagePeriodIsSet())
        j["storagePeriod"] = o.m_StoragePeriod;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.regionIsSet())
        j["region"] = o.m_Region;
    if(o.shopOutletIdIsSet())
        j["shopOutletId"] = o.m_ShopOutletId;
    if(o.workingTimeIsSet())
        j["workingTime"] = o.m_WorkingTime;
    if(o.moderationReasonIsSet())
        j["moderationReason"] = o.m_ModerationReason;
    
}

void from_json(const nlohmann::json& j, FullOutletDTO& o)
{
    j.at("name").get_to(o.m_Name);
    j.at("type").get_to(o.m_Type);
    if(j.find("coords") != j.end())
    {
        j.at("coords").get_to(o.m_Coords);
        o.m_CoordsIsSet = true;
    } 
    if(j.find("isMain") != j.end())
    {
        j.at("isMain").get_to(o.m_IsMain);
        o.m_IsMainIsSet = true;
    } 
    if(j.find("shopOutletCode") != j.end())
    {
        j.at("shopOutletCode").get_to(o.m_ShopOutletCode);
        o.m_ShopOutletCodeIsSet = true;
    } 
    if(j.find("visibility") != j.end())
    {
        j.at("visibility").get_to(o.m_Visibility);
        o.m_VisibilityIsSet = true;
    } 
    j.at("address").get_to(o.m_Address);
    j.at("phones").get_to(o.m_Phones);
    j.at("workingSchedule").get_to(o.m_WorkingSchedule);
    if(j.find("deliveryRules") != j.end())
    {
        j.at("deliveryRules").get_to(o.m_DeliveryRules);
        o.m_DeliveryRulesIsSet = true;
    } 
    if(j.find("storagePeriod") != j.end())
    {
        j.at("storagePeriod").get_to(o.m_StoragePeriod);
        o.m_StoragePeriodIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("region") != j.end())
    {
        j.at("region").get_to(o.m_Region);
        o.m_RegionIsSet = true;
    } 
    if(j.find("shopOutletId") != j.end())
    {
        j.at("shopOutletId").get_to(o.m_ShopOutletId);
        o.m_ShopOutletIdIsSet = true;
    } 
    if(j.find("workingTime") != j.end())
    {
        j.at("workingTime").get_to(o.m_WorkingTime);
        o.m_WorkingTimeIsSet = true;
    } 
    if(j.find("moderationReason") != j.end())
    {
        j.at("moderationReason").get_to(o.m_ModerationReason);
        o.m_ModerationReasonIsSet = true;
    } 
    
}

std::string FullOutletDTO::getName() const
{
    return m_Name;
}
void FullOutletDTO::setName(std::string const& value)
{
    m_Name = value;
}
org::openapitools::server::model::OutletType FullOutletDTO::getType() const
{
    return m_Type;
}
void FullOutletDTO::setType(org::openapitools::server::model::OutletType const& value)
{
    m_Type = value;
}
std::string FullOutletDTO::getCoords() const
{
    return m_Coords;
}
void FullOutletDTO::setCoords(std::string const& value)
{
    m_Coords = value;
    m_CoordsIsSet = true;
}
bool FullOutletDTO::coordsIsSet() const
{
    return m_CoordsIsSet;
}
void FullOutletDTO::unsetCoords()
{
    m_CoordsIsSet = false;
}
bool FullOutletDTO::isIsMain() const
{
    return m_IsMain;
}
void FullOutletDTO::setIsMain(bool const value)
{
    m_IsMain = value;
    m_IsMainIsSet = true;
}
bool FullOutletDTO::isMainIsSet() const
{
    return m_IsMainIsSet;
}
void FullOutletDTO::unsetIsMain()
{
    m_IsMainIsSet = false;
}
std::string FullOutletDTO::getShopOutletCode() const
{
    return m_ShopOutletCode;
}
void FullOutletDTO::setShopOutletCode(std::string const& value)
{
    m_ShopOutletCode = value;
    m_ShopOutletCodeIsSet = true;
}
bool FullOutletDTO::shopOutletCodeIsSet() const
{
    return m_ShopOutletCodeIsSet;
}
void FullOutletDTO::unsetShopOutletCode()
{
    m_ShopOutletCodeIsSet = false;
}
org::openapitools::server::model::OutletVisibilityType FullOutletDTO::getVisibility() const
{
    return m_Visibility;
}
void FullOutletDTO::setVisibility(org::openapitools::server::model::OutletVisibilityType const& value)
{
    m_Visibility = value;
    m_VisibilityIsSet = true;
}
bool FullOutletDTO::visibilityIsSet() const
{
    return m_VisibilityIsSet;
}
void FullOutletDTO::unsetVisibility()
{
    m_VisibilityIsSet = false;
}
org::openapitools::server::model::OutletAddressDTO FullOutletDTO::getAddress() const
{
    return m_Address;
}
void FullOutletDTO::setAddress(org::openapitools::server::model::OutletAddressDTO const& value)
{
    m_Address = value;
}
std::vector<std::string> FullOutletDTO::getPhones() const
{
    return m_Phones;
}
void FullOutletDTO::setPhones(std::vector<std::string> const& value)
{
    m_Phones = value;
}
org::openapitools::server::model::OutletWorkingScheduleDTO FullOutletDTO::getWorkingSchedule() const
{
    return m_WorkingSchedule;
}
void FullOutletDTO::setWorkingSchedule(org::openapitools::server::model::OutletWorkingScheduleDTO const& value)
{
    m_WorkingSchedule = value;
}
std::vector<org::openapitools::server::model::OutletDeliveryRuleDTO> FullOutletDTO::getDeliveryRules() const
{
    return m_DeliveryRules;
}
void FullOutletDTO::setDeliveryRules(std::vector<org::openapitools::server::model::OutletDeliveryRuleDTO> const& value)
{
    m_DeliveryRules = value;
    m_DeliveryRulesIsSet = true;
}
bool FullOutletDTO::deliveryRulesIsSet() const
{
    return m_DeliveryRulesIsSet;
}
void FullOutletDTO::unsetDeliveryRules()
{
    m_DeliveryRulesIsSet = false;
}
int64_t FullOutletDTO::getStoragePeriod() const
{
    return m_StoragePeriod;
}
void FullOutletDTO::setStoragePeriod(int64_t const value)
{
    m_StoragePeriod = value;
    m_StoragePeriodIsSet = true;
}
bool FullOutletDTO::storagePeriodIsSet() const
{
    return m_StoragePeriodIsSet;
}
void FullOutletDTO::unsetStoragePeriod()
{
    m_StoragePeriodIsSet = false;
}
int64_t FullOutletDTO::getId() const
{
    return m_Id;
}
void FullOutletDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool FullOutletDTO::idIsSet() const
{
    return m_IdIsSet;
}
void FullOutletDTO::unsetId()
{
    m_IdIsSet = false;
}
org::openapitools::server::model::OutletStatusType FullOutletDTO::getStatus() const
{
    return m_Status;
}
void FullOutletDTO::setStatus(org::openapitools::server::model::OutletStatusType const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool FullOutletDTO::statusIsSet() const
{
    return m_StatusIsSet;
}
void FullOutletDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
org::openapitools::server::model::RegionDTO FullOutletDTO::getRegion() const
{
    return m_Region;
}
void FullOutletDTO::setRegion(org::openapitools::server::model::RegionDTO const& value)
{
    m_Region = value;
    m_RegionIsSet = true;
}
bool FullOutletDTO::regionIsSet() const
{
    return m_RegionIsSet;
}
void FullOutletDTO::unsetRegion()
{
    m_RegionIsSet = false;
}
std::string FullOutletDTO::getShopOutletId() const
{
    return m_ShopOutletId;
}
void FullOutletDTO::setShopOutletId(std::string const& value)
{
    m_ShopOutletId = value;
    m_ShopOutletIdIsSet = true;
}
bool FullOutletDTO::shopOutletIdIsSet() const
{
    return m_ShopOutletIdIsSet;
}
void FullOutletDTO::unsetShopOutletId()
{
    m_ShopOutletIdIsSet = false;
}
std::string FullOutletDTO::getWorkingTime() const
{
    return m_WorkingTime;
}
void FullOutletDTO::setWorkingTime(std::string const& value)
{
    m_WorkingTime = value;
    m_WorkingTimeIsSet = true;
}
bool FullOutletDTO::workingTimeIsSet() const
{
    return m_WorkingTimeIsSet;
}
void FullOutletDTO::unsetWorkingTime()
{
    m_WorkingTimeIsSet = false;
}
std::string FullOutletDTO::getModerationReason() const
{
    return m_ModerationReason;
}
void FullOutletDTO::setModerationReason(std::string const& value)
{
    m_ModerationReason = value;
    m_ModerationReasonIsSet = true;
}
bool FullOutletDTO::moderationReasonIsSet() const
{
    return m_ModerationReasonIsSet;
}
void FullOutletDTO::unsetModerationReason()
{
    m_ModerationReasonIsSet = false;
}


} // namespace org::openapitools::server::model

