/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OfferPriceResponseDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OfferPriceResponseDTO::OfferPriceResponseDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string OfferPriceResponseDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void OfferPriceResponseDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree OfferPriceResponseDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void OfferPriceResponseDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string OfferPriceResponseDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void OfferPriceResponseDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OfferPriceResponseDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	if (m_Price != nullptr) {
		pt.add_child("price", m_Price->toPropertyTree());
	}
	pt.put("marketSku", m_MarketSku);
	pt.put("updatedAt", m_UpdatedAt);
	return pt;
}

void OfferPriceResponseDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	if (pt.get_child_optional("price")) {
		m_Price = std::make_shared<PriceDTO>();
		m_Price->fromPropertyTree(pt.get_child("price"));
	}
	m_MarketSku = pt.get("marketSku", 0L);
	m_UpdatedAt = pt.get("updatedAt", "");
}

std::string OfferPriceResponseDTO::getId() const
{
    return m_Id;
}

void OfferPriceResponseDTO::setId(std::string value)
{
	m_Id = value;
}
std::shared_ptr<PriceDTO> OfferPriceResponseDTO::getPrice() const
{
    return m_Price;
}

void OfferPriceResponseDTO::setPrice(std::shared_ptr<PriceDTO> value)
{
	m_Price = value;
}
int64_t OfferPriceResponseDTO::getMarketSku() const
{
    return m_MarketSku;
}

void OfferPriceResponseDTO::setMarketSku(int64_t value)
{
	m_MarketSku = value;
}
std::string OfferPriceResponseDTO::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void OfferPriceResponseDTO::setUpdatedAt(std::string value)
{
	m_UpdatedAt = value;
}

std::vector<OfferPriceResponseDTO> createOfferPriceResponseDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OfferPriceResponseDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OfferPriceResponseDTO(child.second));
    }

    return vec;
}

}
}
}
}

