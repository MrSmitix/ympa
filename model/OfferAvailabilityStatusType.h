/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferAvailabilityStatusType.h
 *
 * Планы по поставкам:  * &#x60;ACTIVE&#x60; — поставки будут. * &#x60;INACTIVE&#x60; — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. Через 60 дней после того, как товар закончится на складе, этот статус изменится на &#x60;DELISTED&#x60;. * &#x60;DELISTED&#x60; — архив: товар закончился на складе, и его поставок больше не будет. Если товар вернется на склад (например, покупатель вернет заказ), этот статус изменится на &#x60;INACTIVE&#x60;. 
 */

#ifndef OfferAvailabilityStatusType_H_
#define OfferAvailabilityStatusType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Планы по поставкам:  * &#x60;ACTIVE&#x60; — поставки будут. * &#x60;INACTIVE&#x60; — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. Через 60 дней после того, как товар закончится на складе, этот статус изменится на &#x60;DELISTED&#x60;. * &#x60;DELISTED&#x60; — архив: товар закончился на складе, и его поставок больше не будет. Если товар вернется на склад (например, покупатель вернет заказ), этот статус изменится на &#x60;INACTIVE&#x60;. 
/// </summary>
class  OfferAvailabilityStatusType 
{
public:
    OfferAvailabilityStatusType() = default;
    explicit OfferAvailabilityStatusType(boost::property_tree::ptree const& pt);
    virtual ~OfferAvailabilityStatusType() = default;

    OfferAvailabilityStatusType(const OfferAvailabilityStatusType& other) = default; // copy constructor
    OfferAvailabilityStatusType(OfferAvailabilityStatusType&& other) noexcept = default; // move constructor

    OfferAvailabilityStatusType& operator=(const OfferAvailabilityStatusType& other) = default; // copy assignment
    OfferAvailabilityStatusType& operator=(OfferAvailabilityStatusType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// OfferAvailabilityStatusType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_OfferAvailabilityStatusTypeEnumValue;
};

std::vector<OfferAvailabilityStatusType> createOfferAvailabilityStatusTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OfferAvailabilityStatusType>(const OfferAvailabilityStatusType& val) {
    return val.toPropertyTree();
}

template<>
inline OfferAvailabilityStatusType fromPt<OfferAvailabilityStatusType>(const boost::property_tree::ptree& pt) {
    OfferAvailabilityStatusType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OfferAvailabilityStatusType_H_ */
