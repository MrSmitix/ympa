/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrdersStatsOrderDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrdersStatsOrderDTO::OrdersStatsOrderDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_CreationDateIsSet = false;
    m_StatusUpdateDate = "";
    m_StatusUpdateDateIsSet = false;
    m_StatusIsSet = false;
    m_PartnerOrderId = "";
    m_PartnerOrderIdIsSet = false;
    m_PaymentTypeIsSet = false;
    m_Fake = false;
    m_FakeIsSet = false;
    m_DeliveryRegionIsSet = false;
    m_InitialItemsIsSet = false;
    
}

void OrdersStatsOrderDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrdersStatsOrderDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrdersStatsOrderDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrdersStatsOrderDTO" : pathPrefix;

                                         
    
    /* Items */ {
        const std::vector<org::openapitools::server::model::OrdersStatsItemDTO>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrdersStatsItemDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".items") && success;
 
                i++;
            }
        }

    }
         
    if (initialItemsIsSet())
    {
        const std::vector<org::openapitools::server::model::OrdersStatsItemDTO>& value = m_InitialItems;
        const std::string currentValuePath = _pathPrefix + ".initialItems";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrdersStatsItemDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".initialItems") && success;
 
                i++;
            }
        }

    }
         
    
    /* Payments */ {
        const std::vector<org::openapitools::server::model::OrdersStatsPaymentDTO>& value = m_Payments;
        const std::string currentValuePath = _pathPrefix + ".payments";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrdersStatsPaymentDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".payments") && success;
 
                i++;
            }
        }

    }
         
    
    /* Commissions */ {
        const std::vector<org::openapitools::server::model::OrdersStatsCommissionDTO>& value = m_Commissions;
        const std::string currentValuePath = _pathPrefix + ".commissions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrdersStatsCommissionDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".commissions") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool OrdersStatsOrderDTO::operator==(const OrdersStatsOrderDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!creationDateIsSet() && !rhs.creationDateIsSet()) || (creationDateIsSet() && rhs.creationDateIsSet() && getCreationDate() == rhs.getCreationDate())) &&
    
    
    ((!statusUpdateDateIsSet() && !rhs.statusUpdateDateIsSet()) || (statusUpdateDateIsSet() && rhs.statusUpdateDateIsSet() && getStatusUpdateDate() == rhs.getStatusUpdateDate())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!partnerOrderIdIsSet() && !rhs.partnerOrderIdIsSet()) || (partnerOrderIdIsSet() && rhs.partnerOrderIdIsSet() && getPartnerOrderId() == rhs.getPartnerOrderId())) &&
    
    
    ((!paymentTypeIsSet() && !rhs.paymentTypeIsSet()) || (paymentTypeIsSet() && rhs.paymentTypeIsSet() && getPaymentType() == rhs.getPaymentType())) &&
    
    
    ((!fakeIsSet() && !rhs.fakeIsSet()) || (fakeIsSet() && rhs.fakeIsSet() && isFake() == rhs.isFake())) &&
    
    
    ((!deliveryRegionIsSet() && !rhs.deliveryRegionIsSet()) || (deliveryRegionIsSet() && rhs.deliveryRegionIsSet() && getDeliveryRegion() == rhs.getDeliveryRegion())) &&
    
    (getItems() == rhs.getItems())
     &&
    
    
    ((!initialItemsIsSet() && !rhs.initialItemsIsSet()) || (initialItemsIsSet() && rhs.initialItemsIsSet() && getInitialItems() == rhs.getInitialItems())) &&
    
    (getPayments() == rhs.getPayments())
     &&
    
    (getCommissions() == rhs.getCommissions())
    
    
    ;
}

bool OrdersStatsOrderDTO::operator!=(const OrdersStatsOrderDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrdersStatsOrderDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.creationDateIsSet())
        j["creationDate"] = o.m_CreationDate;
    if(o.statusUpdateDateIsSet())
        j["statusUpdateDate"] = o.m_StatusUpdateDate;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.partnerOrderIdIsSet())
        j["partnerOrderId"] = o.m_PartnerOrderId;
    if(o.paymentTypeIsSet())
        j["paymentType"] = o.m_PaymentType;
    if(o.fakeIsSet())
        j["fake"] = o.m_Fake;
    if(o.deliveryRegionIsSet())
        j["deliveryRegion"] = o.m_DeliveryRegion;
    j["items"] = o.m_Items;
    if(o.initialItemsIsSet() || !o.m_InitialItems.empty())
        j["initialItems"] = o.m_InitialItems;
    j["payments"] = o.m_Payments;
    j["commissions"] = o.m_Commissions;
    
}

void from_json(const nlohmann::json& j, OrdersStatsOrderDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("creationDate") != j.end())
    {
        j.at("creationDate").get_to(o.m_CreationDate);
        o.m_CreationDateIsSet = true;
    } 
    if(j.find("statusUpdateDate") != j.end())
    {
        j.at("statusUpdateDate").get_to(o.m_StatusUpdateDate);
        o.m_StatusUpdateDateIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("partnerOrderId") != j.end())
    {
        j.at("partnerOrderId").get_to(o.m_PartnerOrderId);
        o.m_PartnerOrderIdIsSet = true;
    } 
    if(j.find("paymentType") != j.end())
    {
        j.at("paymentType").get_to(o.m_PaymentType);
        o.m_PaymentTypeIsSet = true;
    } 
    if(j.find("fake") != j.end())
    {
        j.at("fake").get_to(o.m_Fake);
        o.m_FakeIsSet = true;
    } 
    if(j.find("deliveryRegion") != j.end())
    {
        j.at("deliveryRegion").get_to(o.m_DeliveryRegion);
        o.m_DeliveryRegionIsSet = true;
    } 
    j.at("items").get_to(o.m_Items);
    if(j.find("initialItems") != j.end())
    {
        j.at("initialItems").get_to(o.m_InitialItems);
        o.m_InitialItemsIsSet = true;
    } 
    j.at("payments").get_to(o.m_Payments);
    j.at("commissions").get_to(o.m_Commissions);
    
}

int64_t OrdersStatsOrderDTO::getId() const
{
    return m_Id;
}
void OrdersStatsOrderDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool OrdersStatsOrderDTO::idIsSet() const
{
    return m_IdIsSet;
}
void OrdersStatsOrderDTO::unsetId()
{
    m_IdIsSet = false;
}
std::string OrdersStatsOrderDTO::getCreationDate() const
{
    return m_CreationDate;
}
void OrdersStatsOrderDTO::setCreationDate(std::string const& value)
{
    m_CreationDate = value;
    m_CreationDateIsSet = true;
}
bool OrdersStatsOrderDTO::creationDateIsSet() const
{
    return m_CreationDateIsSet;
}
void OrdersStatsOrderDTO::unsetCreationDate()
{
    m_CreationDateIsSet = false;
}
std::string OrdersStatsOrderDTO::getStatusUpdateDate() const
{
    return m_StatusUpdateDate;
}
void OrdersStatsOrderDTO::setStatusUpdateDate(std::string const& value)
{
    m_StatusUpdateDate = value;
    m_StatusUpdateDateIsSet = true;
}
bool OrdersStatsOrderDTO::statusUpdateDateIsSet() const
{
    return m_StatusUpdateDateIsSet;
}
void OrdersStatsOrderDTO::unsetStatusUpdateDate()
{
    m_StatusUpdateDateIsSet = false;
}
org::openapitools::server::model::OrderStatsStatusType OrdersStatsOrderDTO::getStatus() const
{
    return m_Status;
}
void OrdersStatsOrderDTO::setStatus(org::openapitools::server::model::OrderStatsStatusType const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool OrdersStatsOrderDTO::statusIsSet() const
{
    return m_StatusIsSet;
}
void OrdersStatsOrderDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string OrdersStatsOrderDTO::getPartnerOrderId() const
{
    return m_PartnerOrderId;
}
void OrdersStatsOrderDTO::setPartnerOrderId(std::string const& value)
{
    m_PartnerOrderId = value;
    m_PartnerOrderIdIsSet = true;
}
bool OrdersStatsOrderDTO::partnerOrderIdIsSet() const
{
    return m_PartnerOrderIdIsSet;
}
void OrdersStatsOrderDTO::unsetPartnerOrderId()
{
    m_PartnerOrderIdIsSet = false;
}
org::openapitools::server::model::OrdersStatsOrderPaymentType OrdersStatsOrderDTO::getPaymentType() const
{
    return m_PaymentType;
}
void OrdersStatsOrderDTO::setPaymentType(org::openapitools::server::model::OrdersStatsOrderPaymentType const& value)
{
    m_PaymentType = value;
    m_PaymentTypeIsSet = true;
}
bool OrdersStatsOrderDTO::paymentTypeIsSet() const
{
    return m_PaymentTypeIsSet;
}
void OrdersStatsOrderDTO::unsetPaymentType()
{
    m_PaymentTypeIsSet = false;
}
bool OrdersStatsOrderDTO::isFake() const
{
    return m_Fake;
}
void OrdersStatsOrderDTO::setFake(bool const value)
{
    m_Fake = value;
    m_FakeIsSet = true;
}
bool OrdersStatsOrderDTO::fakeIsSet() const
{
    return m_FakeIsSet;
}
void OrdersStatsOrderDTO::unsetFake()
{
    m_FakeIsSet = false;
}
org::openapitools::server::model::OrdersStatsDeliveryRegionDTO OrdersStatsOrderDTO::getDeliveryRegion() const
{
    return m_DeliveryRegion;
}
void OrdersStatsOrderDTO::setDeliveryRegion(org::openapitools::server::model::OrdersStatsDeliveryRegionDTO const& value)
{
    m_DeliveryRegion = value;
    m_DeliveryRegionIsSet = true;
}
bool OrdersStatsOrderDTO::deliveryRegionIsSet() const
{
    return m_DeliveryRegionIsSet;
}
void OrdersStatsOrderDTO::unsetDeliveryRegion()
{
    m_DeliveryRegionIsSet = false;
}
std::vector<org::openapitools::server::model::OrdersStatsItemDTO> OrdersStatsOrderDTO::getItems() const
{
    return m_Items;
}
void OrdersStatsOrderDTO::setItems(std::vector<org::openapitools::server::model::OrdersStatsItemDTO> const& value)
{
    m_Items = value;
}
std::vector<org::openapitools::server::model::OrdersStatsItemDTO> OrdersStatsOrderDTO::getInitialItems() const
{
    return m_InitialItems;
}
void OrdersStatsOrderDTO::setInitialItems(std::vector<org::openapitools::server::model::OrdersStatsItemDTO> const& value)
{
    m_InitialItems = value;
    m_InitialItemsIsSet = true;
}
bool OrdersStatsOrderDTO::initialItemsIsSet() const
{
    return m_InitialItemsIsSet;
}
void OrdersStatsOrderDTO::unsetInitialItems()
{
    m_InitialItemsIsSet = false;
}
std::vector<org::openapitools::server::model::OrdersStatsPaymentDTO> OrdersStatsOrderDTO::getPayments() const
{
    return m_Payments;
}
void OrdersStatsOrderDTO::setPayments(std::vector<org::openapitools::server::model::OrdersStatsPaymentDTO> const& value)
{
    m_Payments = value;
}
std::vector<org::openapitools::server::model::OrdersStatsCommissionDTO> OrdersStatsOrderDTO::getCommissions() const
{
    return m_Commissions;
}
void OrdersStatsOrderDTO::setCommissions(std::vector<org::openapitools::server::model::OrdersStatsCommissionDTO> const& value)
{
    m_Commissions = value;
}


} // namespace org::openapitools::server::model

