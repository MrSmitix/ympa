/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrdersStatsOrderDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrdersStatsOrderDTO::OrdersStatsOrderDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string OrdersStatsOrderDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void OrdersStatsOrderDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OrdersStatsOrderDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("creationDate", m_CreationDate);
	pt.put("statusUpdateDate", m_StatusUpdateDate);
	pt.put("partnerOrderId", m_PartnerOrderId);
	pt.put("fake", m_Fake);
	pt.add_child("deliveryRegion", m_DeliveryRegion.toPropertyTree());
	// generate tree for Items
    tmp_node.clear();
	if (!m_Items.empty()) {
        tmp_node = toPt(m_Items);
		pt.add_child("items", tmp_node);
		tmp_node.clear();
	}
	// generate tree for InitialItems
    tmp_node.clear();
	if (!m_InitialItems.empty()) {
        tmp_node = toPt(m_InitialItems);
		pt.add_child("initialItems", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Payments
    tmp_node.clear();
	if (!m_Payments.empty()) {
        tmp_node = toPt(m_Payments);
		pt.add_child("payments", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Commissions
    tmp_node.clear();
	if (!m_Commissions.empty()) {
        tmp_node = toPt(m_Commissions);
		pt.add_child("commissions", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void OrdersStatsOrderDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", 0L);
	m_CreationDate = pt.get("creationDate", "");
	m_StatusUpdateDate = pt.get("statusUpdateDate", "");
	m_PartnerOrderId = pt.get("partnerOrderId", "");
	m_Fake = pt.get("fake", false);
	if (pt.get_child_optional("deliveryRegion")) {
        m_DeliveryRegion = fromPt<OrdersStatsDeliveryRegionDTO>(pt.get_child("deliveryRegion"));
	}
	// push all items of Items into member
	if (pt.get_child_optional("items")) {
        m_Items = fromPt<std::vector<OrdersStatsItemDTO>>(pt.get_child("items"));
	}
	// push all items of InitialItems into member
	if (pt.get_child_optional("initialItems")) {
        m_InitialItems = fromPt<std::vector<OrdersStatsItemDTO>>(pt.get_child("initialItems"));
	}
	// push all items of Payments into member
	if (pt.get_child_optional("payments")) {
        m_Payments = fromPt<std::vector<OrdersStatsPaymentDTO>>(pt.get_child("payments"));
	}
	// push all items of Commissions into member
	if (pt.get_child_optional("commissions")) {
        m_Commissions = fromPt<std::vector<OrdersStatsCommissionDTO>>(pt.get_child("commissions"));
	}
}

int64_t OrdersStatsOrderDTO::getId() const
{
    return m_Id;
}

void OrdersStatsOrderDTO::setId(int64_t value)
{
    m_Id = value;
}


std::string OrdersStatsOrderDTO::getCreationDate() const
{
    return m_CreationDate;
}

void OrdersStatsOrderDTO::setCreationDate(std::string value)
{
    m_CreationDate = value;
}


std::string OrdersStatsOrderDTO::getStatusUpdateDate() const
{
    return m_StatusUpdateDate;
}

void OrdersStatsOrderDTO::setStatusUpdateDate(std::string value)
{
    m_StatusUpdateDate = value;
}


OrderStatsStatusType OrdersStatsOrderDTO::getStatus() const
{
    return m_Status;
}

void OrdersStatsOrderDTO::setStatus(OrderStatsStatusType value)
{
    m_Status = value;
}


std::string OrdersStatsOrderDTO::getPartnerOrderId() const
{
    return m_PartnerOrderId;
}

void OrdersStatsOrderDTO::setPartnerOrderId(std::string value)
{
    m_PartnerOrderId = value;
}


OrdersStatsOrderPaymentType OrdersStatsOrderDTO::getPaymentType() const
{
    return m_PaymentType;
}

void OrdersStatsOrderDTO::setPaymentType(OrdersStatsOrderPaymentType value)
{
    m_PaymentType = value;
}


bool OrdersStatsOrderDTO::isFake() const
{
    return m_Fake;
}

void OrdersStatsOrderDTO::setFake(bool value)
{
    m_Fake = value;
}


OrdersStatsDeliveryRegionDTO OrdersStatsOrderDTO::getDeliveryRegion() const
{
    return m_DeliveryRegion;
}

void OrdersStatsOrderDTO::setDeliveryRegion(OrdersStatsDeliveryRegionDTO value)
{
    m_DeliveryRegion = value;
}


std::vector<OrdersStatsItemDTO> OrdersStatsOrderDTO::getItems() const
{
    return m_Items;
}

void OrdersStatsOrderDTO::setItems(std::vector<OrdersStatsItemDTO> value)
{
    m_Items = value;
}


std::vector<OrdersStatsItemDTO> OrdersStatsOrderDTO::getInitialItems() const
{
    return m_InitialItems;
}

void OrdersStatsOrderDTO::setInitialItems(std::vector<OrdersStatsItemDTO> value)
{
    m_InitialItems = value;
}


std::vector<OrdersStatsPaymentDTO> OrdersStatsOrderDTO::getPayments() const
{
    return m_Payments;
}

void OrdersStatsOrderDTO::setPayments(std::vector<OrdersStatsPaymentDTO> value)
{
    m_Payments = value;
}


std::vector<OrdersStatsCommissionDTO> OrdersStatsOrderDTO::getCommissions() const
{
    return m_Commissions;
}

void OrdersStatsOrderDTO::setCommissions(std::vector<OrdersStatsCommissionDTO> value)
{
    m_Commissions = value;
}



std::vector<OrdersStatsOrderDTO> createOrdersStatsOrderDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OrdersStatsOrderDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OrdersStatsOrderDTO(child.second));
    }

    return vec;
}

}
}
}
}

