/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrdersStatsOrderDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrdersStatsOrderDTO::OrdersStatsOrderDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string OrdersStatsOrderDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void OrdersStatsOrderDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree OrdersStatsOrderDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void OrdersStatsOrderDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string OrdersStatsOrderDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void OrdersStatsOrderDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OrdersStatsOrderDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("creationDate", m_CreationDate);
	pt.put("statusUpdateDate", m_StatusUpdateDate);
	pt.put("partnerOrderId", m_PartnerOrderId);
	pt.put("fake", m_Fake);
	if (m_DeliveryRegion != nullptr) {
		pt.add_child("deliveryRegion", m_DeliveryRegion->toPropertyTree());
	}
	// generate tree for Items
	if (!m_Items.empty()) {
		for (const auto &childEntry : m_Items) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("items", tmp_node);
		tmp_node.clear();
	}
	// generate tree for InitialItems
	if (!m_InitialItems.empty()) {
		for (const auto &childEntry : m_InitialItems) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("initialItems", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Payments
	if (!m_Payments.empty()) {
		for (const auto &childEntry : m_Payments) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("payments", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Commissions
	if (!m_Commissions.empty()) {
		for (const auto &childEntry : m_Commissions) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("commissions", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void OrdersStatsOrderDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", 0L);
	m_CreationDate = pt.get("creationDate", "");
	m_StatusUpdateDate = pt.get("statusUpdateDate", "");
	m_PartnerOrderId = pt.get("partnerOrderId", "");
	m_Fake = pt.get("fake", false);
	if (pt.get_child_optional("deliveryRegion")) {
		m_DeliveryRegion = std::make_shared<OrdersStatsDeliveryRegionDTO>();
		m_DeliveryRegion->fromPropertyTree(pt.get_child("deliveryRegion"));
	}
	// push all items of Items into member vector
	if (pt.get_child_optional("items")) {
		for (const auto &childTree : pt.get_child("items")) {
            std::shared_ptr<OrdersStatsItemDTO> val =
                std::make_shared<OrdersStatsItemDTO>(childTree.second);
            m_Items.emplace_back(std::move(val));
		}
	}
	// push all items of InitialItems into member vector
	if (pt.get_child_optional("initialItems")) {
		for (const auto &childTree : pt.get_child("initialItems")) {
            std::shared_ptr<OrdersStatsItemDTO> val =
                std::make_shared<OrdersStatsItemDTO>(childTree.second);
            m_InitialItems.emplace_back(std::move(val));
		}
	}
	// push all items of Payments into member vector
	if (pt.get_child_optional("payments")) {
		for (const auto &childTree : pt.get_child("payments")) {
            std::shared_ptr<OrdersStatsPaymentDTO> val =
                std::make_shared<OrdersStatsPaymentDTO>(childTree.second);
            m_Payments.emplace_back(std::move(val));
		}
	}
	// push all items of Commissions into member vector
	if (pt.get_child_optional("commissions")) {
		for (const auto &childTree : pt.get_child("commissions")) {
            std::shared_ptr<OrdersStatsCommissionDTO> val =
                std::make_shared<OrdersStatsCommissionDTO>(childTree.second);
            m_Commissions.emplace_back(std::move(val));
		}
	}
}

int64_t OrdersStatsOrderDTO::getId() const
{
    return m_Id;
}

void OrdersStatsOrderDTO::setId(int64_t value)
{
	m_Id = value;
}
std::string OrdersStatsOrderDTO::getCreationDate() const
{
    return m_CreationDate;
}

void OrdersStatsOrderDTO::setCreationDate(std::string value)
{
	m_CreationDate = value;
}
std::string OrdersStatsOrderDTO::getStatusUpdateDate() const
{
    return m_StatusUpdateDate;
}

void OrdersStatsOrderDTO::setStatusUpdateDate(std::string value)
{
	m_StatusUpdateDate = value;
}
std::shared_ptr<OrderStatsStatusType> OrdersStatsOrderDTO::getStatus() const
{
    return m_Status;
}

void OrdersStatsOrderDTO::setStatus(std::shared_ptr<OrderStatsStatusType> value)
{
	m_Status = value;
}
std::string OrdersStatsOrderDTO::getPartnerOrderId() const
{
    return m_PartnerOrderId;
}

void OrdersStatsOrderDTO::setPartnerOrderId(std::string value)
{
	m_PartnerOrderId = value;
}
std::shared_ptr<OrdersStatsOrderPaymentType> OrdersStatsOrderDTO::getPaymentType() const
{
    return m_PaymentType;
}

void OrdersStatsOrderDTO::setPaymentType(std::shared_ptr<OrdersStatsOrderPaymentType> value)
{
	m_PaymentType = value;
}
bool OrdersStatsOrderDTO::isFake() const
{
    return m_Fake;
}

void OrdersStatsOrderDTO::setFake(bool value)
{
	m_Fake = value;
}
std::shared_ptr<OrdersStatsDeliveryRegionDTO> OrdersStatsOrderDTO::getDeliveryRegion() const
{
    return m_DeliveryRegion;
}

void OrdersStatsOrderDTO::setDeliveryRegion(std::shared_ptr<OrdersStatsDeliveryRegionDTO> value)
{
	m_DeliveryRegion = value;
}
std::vector<std::shared_ptr<OrdersStatsItemDTO>> OrdersStatsOrderDTO::getItems() const
{
    return m_Items;
}

void OrdersStatsOrderDTO::setItems(std::vector<std::shared_ptr<OrdersStatsItemDTO>> value)
{
	m_Items = value;
}
std::vector<std::shared_ptr<OrdersStatsItemDTO>> OrdersStatsOrderDTO::getInitialItems() const
{
    return m_InitialItems;
}

void OrdersStatsOrderDTO::setInitialItems(std::vector<std::shared_ptr<OrdersStatsItemDTO>> value)
{
	m_InitialItems = value;
}
std::vector<std::shared_ptr<OrdersStatsPaymentDTO>> OrdersStatsOrderDTO::getPayments() const
{
    return m_Payments;
}

void OrdersStatsOrderDTO::setPayments(std::vector<std::shared_ptr<OrdersStatsPaymentDTO>> value)
{
	m_Payments = value;
}
std::vector<std::shared_ptr<OrdersStatsCommissionDTO>> OrdersStatsOrderDTO::getCommissions() const
{
    return m_Commissions;
}

void OrdersStatsOrderDTO::setCommissions(std::vector<std::shared_ptr<OrdersStatsCommissionDTO>> value)
{
	m_Commissions = value;
}

std::vector<OrdersStatsOrderDTO> createOrdersStatsOrderDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OrdersStatsOrderDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OrdersStatsOrderDTO(child.second));
    }

    return vec;
}

}
}
}
}

