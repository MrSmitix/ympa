/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetQualityRatingRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetQualityRatingRequest::GetQualityRatingRequest()
{
    m_DateFromIsSet = false;
    m_DateToIsSet = false;
    
}

void GetQualityRatingRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetQualityRatingRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetQualityRatingRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetQualityRatingRequest" : pathPrefix;

                 
    
    /* CampaignIds */ {
        const std::set<int64_t>& value = m_CampaignIds;
        const std::string currentValuePath = _pathPrefix + ".campaignIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 50)
        {
            success = false;
            msg << currentValuePath << ": must have at most 50 elements;";
        }
        if (!org::openapitools::server::helpers::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool GetQualityRatingRequest::operator==(const GetQualityRatingRequest& rhs) const
{
    return
    
    
    
    ((!dateFromIsSet() && !rhs.dateFromIsSet()) || (dateFromIsSet() && rhs.dateFromIsSet() && getDateFrom() == rhs.getDateFrom())) &&
    
    
    ((!dateToIsSet() && !rhs.dateToIsSet()) || (dateToIsSet() && rhs.dateToIsSet() && getDateTo() == rhs.getDateTo())) &&
    
    (getCampaignIds() == rhs.getCampaignIds())
    
    
    ;
}

bool GetQualityRatingRequest::operator!=(const GetQualityRatingRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetQualityRatingRequest& o)
{
    j = nlohmann::json::object();
    if(o.dateFromIsSet())
        j["dateFrom"] = o.m_DateFrom;
    if(o.dateToIsSet())
        j["dateTo"] = o.m_DateTo;
    j["campaignIds"] = o.m_CampaignIds;
    
}

void from_json(const nlohmann::json& j, GetQualityRatingRequest& o)
{
    if(j.find("dateFrom") != j.end())
    {
        j.at("dateFrom").get_to(o.m_DateFrom);
        o.m_DateFromIsSet = true;
    } 
    if(j.find("dateTo") != j.end())
    {
        j.at("dateTo").get_to(o.m_DateTo);
        o.m_DateToIsSet = true;
    } 
    j.at("campaignIds").get_to(o.m_CampaignIds);
    
}

std::string GetQualityRatingRequest::getDateFrom() const
{
    return m_DateFrom;
}
void GetQualityRatingRequest::setDateFrom(std::string const& value)
{
    m_DateFrom = value;
    m_DateFromIsSet = true;
}
bool GetQualityRatingRequest::dateFromIsSet() const
{
    return m_DateFromIsSet;
}
void GetQualityRatingRequest::unsetDateFrom()
{
    m_DateFromIsSet = false;
}
std::string GetQualityRatingRequest::getDateTo() const
{
    return m_DateTo;
}
void GetQualityRatingRequest::setDateTo(std::string const& value)
{
    m_DateTo = value;
    m_DateToIsSet = true;
}
bool GetQualityRatingRequest::dateToIsSet() const
{
    return m_DateToIsSet;
}
void GetQualityRatingRequest::unsetDateTo()
{
    m_DateToIsSet = false;
}
std::set<int64_t> GetQualityRatingRequest::getCampaignIds() const
{
    return m_CampaignIds;
}
void GetQualityRatingRequest::setCampaignIds(std::set<int64_t> const value)
{
    m_CampaignIds = value;
}


} // namespace org::openapitools::server::model

