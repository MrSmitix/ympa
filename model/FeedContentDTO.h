/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FeedContentDTO.h
 *
 * Информация о проверке содержимого прайс-листа, загруженного на Маркет.
 */

#ifndef FeedContentDTO_H_
#define FeedContentDTO_H_


#include "FeedContentErrorDTO.h"
#include "FeedStatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о проверке содержимого прайс-листа, загруженного на Маркет.
/// </summary>
class  FeedContentDTO
{
public:
    FeedContentDTO();
    virtual ~FeedContentDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FeedContentDTO& rhs) const;
    bool operator!=(const FeedContentDTO& rhs) const;

    /////////////////////////////////////////////
    /// FeedContentDTO members

    /// <summary>
    /// Количество предложений, в которых найдены ошибки на этапе загрузки прайс-листа. Выводится, если параметр &#x60;content status&#x3D;OK&#x60;. 
    /// </summary>
    int64_t getRejectedOffersCount() const;
    void setRejectedOffersCount(int64_t const value);
    bool rejectedOffersCountIsSet() const;
    void unsetRejectedOffersCount();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedStatusType getStatus() const;
    void setStatus(org::openapitools::server::model::FeedStatusType const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// Количество предложений в прайс-листе. Выводится, если параметр &#x60;content status&#x3D;OK&#x60;. 
    /// </summary>
    int64_t getTotalOffersCount() const;
    void setTotalOffersCount(int64_t const value);
    bool totalOffersCountIsSet() const;
    void unsetTotalOffersCount();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedContentErrorDTO getError() const;
    void setError(org::openapitools::server::model::FeedContentErrorDTO const& value);
    bool errorIsSet() const;
    void unsetError();

    friend  void to_json(nlohmann::json& j, const FeedContentDTO& o);
    friend  void from_json(const nlohmann::json& j, FeedContentDTO& o);
protected:
    int64_t m_RejectedOffersCount;
    bool m_RejectedOffersCountIsSet;
    org::openapitools::server::model::FeedStatusType m_Status;
    bool m_StatusIsSet;
    int64_t m_TotalOffersCount;
    bool m_TotalOffersCountIsSet;
    org::openapitools::server::model::FeedContentErrorDTO m_Error;
    bool m_ErrorIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* FeedContentDTO_H_ */
