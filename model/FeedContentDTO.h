/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedContentDTO.h
 *
 * Информация о проверке содержимого прайс-листа, загруженного на Маркет.
 */

#ifndef FeedContentDTO_H_
#define FeedContentDTO_H_



#include "FeedContentErrorDTO.h"
#include "FeedStatusType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о проверке содержимого прайс-листа, загруженного на Маркет.
/// </summary>
class  FeedContentDTO 
{
public:
    FeedContentDTO() = default;
    explicit FeedContentDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedContentDTO() = default;

    FeedContentDTO(const FeedContentDTO& other) = default; // copy constructor
    FeedContentDTO(FeedContentDTO&& other) noexcept = default; // move constructor

    FeedContentDTO& operator=(const FeedContentDTO& other) = default; // copy assignment
    FeedContentDTO& operator=(FeedContentDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FeedContentDTO members

    /// <summary>
    /// Количество предложений, в которых найдены ошибки на этапе загрузки прайс-листа. Выводится, если параметр &#x60;content status&#x3D;OK&#x60;. 
    /// </summary>
    int64_t getRejectedOffersCount() const;
    void setRejectedOffersCount(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    FeedStatusType getStatus() const;
    void setStatus(FeedStatusType value);

    /// <summary>
    /// Количество предложений в прайс-листе. Выводится, если параметр &#x60;content status&#x3D;OK&#x60;. 
    /// </summary>
    int64_t getTotalOffersCount() const;
    void setTotalOffersCount(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    FeedContentErrorDTO getError() const;
    void setError(FeedContentErrorDTO value);

protected:
    int64_t m_RejectedOffersCount = 0L;
    FeedStatusType m_Status = FeedStatusType{};
    int64_t m_TotalOffersCount = 0L;
    FeedContentErrorDTO m_Error;
};

std::vector<FeedContentDTO> createFeedContentDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FeedContentDTO>(const FeedContentDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FeedContentDTO fromPt<FeedContentDTO>(const boost::property_tree::ptree& pt) {
    FeedContentDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FeedContentDTO_H_ */
