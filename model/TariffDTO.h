/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TariffDTO.h
 *
 * Информация о тарифах, по которым нужно заплатить за услуги Маркета.
 */

#ifndef TariffDTO_H_
#define TariffDTO_H_



#include "TariffParameterDTO.h"
#include "TariffType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о тарифах, по которым нужно заплатить за услуги Маркета.
/// </summary>
class  TariffDTO 
{
public:
    TariffDTO() = default;
    explicit TariffDTO(boost::property_tree::ptree const& pt);
    virtual ~TariffDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// TariffDTO members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TariffType> getType() const;
    void setType(std::shared_ptr<TariffType> value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах. 
    /// </summary>
    double getPercent() const;
    void setPercent(double value);

    /// <summary>
    /// Значение тарифа в рублях.
    /// </summary>
    double getAmount() const;
    void setAmount(double value);

    /// <summary>
    /// Параметры расчета тарифа.
    /// </summary>
    std::vector<std::shared_ptr<TariffParameterDTO>> getParameters() const;
    void setParameters(std::vector<std::shared_ptr<TariffParameterDTO>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::shared_ptr<TariffType> m_Type = std::make_shared<TariffType>();
    double m_Percent = 0.0;
    double m_Amount = 0.0;
    std::vector<std::shared_ptr<TariffParameterDTO>> m_Parameters;
};

std::vector<TariffDTO> createTariffDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* TariffDTO_H_ */
