/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GeneratePricesReportRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GeneratePricesReportRequest::GeneratePricesReportRequest()
{
    m_BusinessId = 0L;
    m_BusinessIdIsSet = false;
    m_CampaignId = 0L;
    m_CampaignIdIsSet = false;
    m_CategoryIdsIsSet = false;
    m_CreationDateFromIsSet = false;
    m_CreationDateToIsSet = false;
    
}

void GeneratePricesReportRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GeneratePricesReportRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GeneratePricesReportRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GeneratePricesReportRequest" : pathPrefix;

                 
    if (categoryIdsIsSet())
    {
        const std::vector<int64_t>& value = m_CategoryIds;
        const std::string currentValuePath = _pathPrefix + ".categoryIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
            
    return success;
}

bool GeneratePricesReportRequest::operator==(const GeneratePricesReportRequest& rhs) const
{
    return
    
    
    
    ((!businessIdIsSet() && !rhs.businessIdIsSet()) || (businessIdIsSet() && rhs.businessIdIsSet() && getBusinessId() == rhs.getBusinessId())) &&
    
    
    ((!campaignIdIsSet() && !rhs.campaignIdIsSet()) || (campaignIdIsSet() && rhs.campaignIdIsSet() && getCampaignId() == rhs.getCampaignId())) &&
    
    
    ((!categoryIdsIsSet() && !rhs.categoryIdsIsSet()) || (categoryIdsIsSet() && rhs.categoryIdsIsSet() && getCategoryIds() == rhs.getCategoryIds())) &&
    
    
    ((!creationDateFromIsSet() && !rhs.creationDateFromIsSet()) || (creationDateFromIsSet() && rhs.creationDateFromIsSet() && getCreationDateFrom() == rhs.getCreationDateFrom())) &&
    
    
    ((!creationDateToIsSet() && !rhs.creationDateToIsSet()) || (creationDateToIsSet() && rhs.creationDateToIsSet() && getCreationDateTo() == rhs.getCreationDateTo()))
    
    ;
}

bool GeneratePricesReportRequest::operator!=(const GeneratePricesReportRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GeneratePricesReportRequest& o)
{
    j = nlohmann::json::object();
    if(o.businessIdIsSet())
        j["businessId"] = o.m_BusinessId;
    if(o.campaignIdIsSet())
        j["campaignId"] = o.m_CampaignId;
    if(o.categoryIdsIsSet() || !o.m_CategoryIds.empty())
        j["categoryIds"] = o.m_CategoryIds;
    if(o.creationDateFromIsSet())
        j["creationDateFrom"] = o.m_CreationDateFrom;
    if(o.creationDateToIsSet())
        j["creationDateTo"] = o.m_CreationDateTo;
    
}

void from_json(const nlohmann::json& j, GeneratePricesReportRequest& o)
{
    if(j.find("businessId") != j.end())
    {
        j.at("businessId").get_to(o.m_BusinessId);
        o.m_BusinessIdIsSet = true;
    } 
    if(j.find("campaignId") != j.end())
    {
        j.at("campaignId").get_to(o.m_CampaignId);
        o.m_CampaignIdIsSet = true;
    } 
    if(j.find("categoryIds") != j.end())
    {
        j.at("categoryIds").get_to(o.m_CategoryIds);
        o.m_CategoryIdsIsSet = true;
    } 
    if(j.find("creationDateFrom") != j.end())
    {
        j.at("creationDateFrom").get_to(o.m_CreationDateFrom);
        o.m_CreationDateFromIsSet = true;
    } 
    if(j.find("creationDateTo") != j.end())
    {
        j.at("creationDateTo").get_to(o.m_CreationDateTo);
        o.m_CreationDateToIsSet = true;
    } 
    
}

int64_t GeneratePricesReportRequest::getBusinessId() const
{
    return m_BusinessId;
}
void GeneratePricesReportRequest::setBusinessId(int64_t const value)
{
    m_BusinessId = value;
    m_BusinessIdIsSet = true;
}
bool GeneratePricesReportRequest::businessIdIsSet() const
{
    return m_BusinessIdIsSet;
}
void GeneratePricesReportRequest::unsetBusinessId()
{
    m_BusinessIdIsSet = false;
}
int64_t GeneratePricesReportRequest::getCampaignId() const
{
    return m_CampaignId;
}
void GeneratePricesReportRequest::setCampaignId(int64_t const value)
{
    m_CampaignId = value;
    m_CampaignIdIsSet = true;
}
bool GeneratePricesReportRequest::campaignIdIsSet() const
{
    return m_CampaignIdIsSet;
}
void GeneratePricesReportRequest::unsetCampaignId()
{
    m_CampaignIdIsSet = false;
}
std::vector<int64_t> GeneratePricesReportRequest::getCategoryIds() const
{
    return m_CategoryIds;
}
void GeneratePricesReportRequest::setCategoryIds(std::vector<int64_t> const value)
{
    m_CategoryIds = value;
    m_CategoryIdsIsSet = true;
}
bool GeneratePricesReportRequest::categoryIdsIsSet() const
{
    return m_CategoryIdsIsSet;
}
void GeneratePricesReportRequest::unsetCategoryIds()
{
    m_CategoryIdsIsSet = false;
}
std::string GeneratePricesReportRequest::getCreationDateFrom() const
{
    return m_CreationDateFrom;
}
void GeneratePricesReportRequest::setCreationDateFrom(std::string const& value)
{
    m_CreationDateFrom = value;
    m_CreationDateFromIsSet = true;
}
bool GeneratePricesReportRequest::creationDateFromIsSet() const
{
    return m_CreationDateFromIsSet;
}
void GeneratePricesReportRequest::unsetCreationDateFrom()
{
    m_CreationDateFromIsSet = false;
}
std::string GeneratePricesReportRequest::getCreationDateTo() const
{
    return m_CreationDateTo;
}
void GeneratePricesReportRequest::setCreationDateTo(std::string const& value)
{
    m_CreationDateTo = value;
    m_CreationDateToIsSet = true;
}
bool GeneratePricesReportRequest::creationDateToIsSet() const
{
    return m_CreationDateToIsSet;
}
void GeneratePricesReportRequest::unsetCreationDateTo()
{
    m_CreationDateToIsSet = false;
}


} // namespace org::openapitools::server::model

