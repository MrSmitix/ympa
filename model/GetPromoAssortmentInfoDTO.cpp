/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetPromoAssortmentInfoDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetPromoAssortmentInfoDTO::GetPromoAssortmentInfoDTO()
{
    m_ActiveOffers = 0;
    m_PotentialOffers = 0;
    m_PotentialOffersIsSet = false;
    m_Processing = false;
    m_ProcessingIsSet = false;
    
}

void GetPromoAssortmentInfoDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetPromoAssortmentInfoDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetPromoAssortmentInfoDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetPromoAssortmentInfoDTO" : pathPrefix;

                
    return success;
}

bool GetPromoAssortmentInfoDTO::operator==(const GetPromoAssortmentInfoDTO& rhs) const
{
    return
    
    
    (getActiveOffers() == rhs.getActiveOffers())
     &&
    
    
    ((!potentialOffersIsSet() && !rhs.potentialOffersIsSet()) || (potentialOffersIsSet() && rhs.potentialOffersIsSet() && getPotentialOffers() == rhs.getPotentialOffers())) &&
    
    
    ((!processingIsSet() && !rhs.processingIsSet()) || (processingIsSet() && rhs.processingIsSet() && isProcessing() == rhs.isProcessing()))
    
    ;
}

bool GetPromoAssortmentInfoDTO::operator!=(const GetPromoAssortmentInfoDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetPromoAssortmentInfoDTO& o)
{
    j = nlohmann::json::object();
    j["activeOffers"] = o.m_ActiveOffers;
    if(o.potentialOffersIsSet())
        j["potentialOffers"] = o.m_PotentialOffers;
    if(o.processingIsSet())
        j["processing"] = o.m_Processing;
    
}

void from_json(const nlohmann::json& j, GetPromoAssortmentInfoDTO& o)
{
    j.at("activeOffers").get_to(o.m_ActiveOffers);
    if(j.find("potentialOffers") != j.end())
    {
        j.at("potentialOffers").get_to(o.m_PotentialOffers);
        o.m_PotentialOffersIsSet = true;
    } 
    if(j.find("processing") != j.end())
    {
        j.at("processing").get_to(o.m_Processing);
        o.m_ProcessingIsSet = true;
    } 
    
}

int32_t GetPromoAssortmentInfoDTO::getActiveOffers() const
{
    return m_ActiveOffers;
}
void GetPromoAssortmentInfoDTO::setActiveOffers(int32_t const value)
{
    m_ActiveOffers = value;
}
int32_t GetPromoAssortmentInfoDTO::getPotentialOffers() const
{
    return m_PotentialOffers;
}
void GetPromoAssortmentInfoDTO::setPotentialOffers(int32_t const value)
{
    m_PotentialOffers = value;
    m_PotentialOffersIsSet = true;
}
bool GetPromoAssortmentInfoDTO::potentialOffersIsSet() const
{
    return m_PotentialOffersIsSet;
}
void GetPromoAssortmentInfoDTO::unsetPotentialOffers()
{
    m_PotentialOffersIsSet = false;
}
bool GetPromoAssortmentInfoDTO::isProcessing() const
{
    return m_Processing;
}
void GetPromoAssortmentInfoDTO::setProcessing(bool const value)
{
    m_Processing = value;
    m_ProcessingIsSet = true;
}
bool GetPromoAssortmentInfoDTO::processingIsSet() const
{
    return m_ProcessingIsSet;
}
void GetPromoAssortmentInfoDTO::unsetProcessing()
{
    m_ProcessingIsSet = false;
}


} // namespace org::openapitools::server::model

