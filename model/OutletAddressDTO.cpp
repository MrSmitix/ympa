/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OutletAddressDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OutletAddressDTO::OutletAddressDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string OutletAddressDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void OutletAddressDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree OutletAddressDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void OutletAddressDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string OutletAddressDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void OutletAddressDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OutletAddressDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("regionId", m_RegionId);
	pt.put("street", m_Street);
	pt.put("number", m_number);
	pt.put("building", m_Building);
	pt.put("estate", m_Estate);
	pt.put("block", m_Block);
	pt.put("additional", m_Additional);
	pt.put("km", m_Km);
	pt.put("city", m_City);
	return pt;
}

void OutletAddressDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_RegionId = pt.get("regionId", 0L);
	m_Street = pt.get("street", "");
	m_number = pt.get("number", "");
	m_Building = pt.get("building", "");
	m_Estate = pt.get("estate", "");
	m_Block = pt.get("block", "");
	m_Additional = pt.get("additional", "");
	m_Km = pt.get("km", 0);
	m_City = pt.get("city", "");
}

int64_t OutletAddressDTO::getRegionId() const
{
    return m_RegionId;
}

void OutletAddressDTO::setRegionId(int64_t value)
{
	m_RegionId = value;
}
std::string OutletAddressDTO::getStreet() const
{
    return m_Street;
}

void OutletAddressDTO::setStreet(std::string value)
{
	m_Street = value;
}
std::string OutletAddressDTO::getNumber() const
{
    return m_number;
}

void OutletAddressDTO::setNumber(std::string value)
{
	m_number = value;
}
std::string OutletAddressDTO::getBuilding() const
{
    return m_Building;
}

void OutletAddressDTO::setBuilding(std::string value)
{
	m_Building = value;
}
std::string OutletAddressDTO::getEstate() const
{
    return m_Estate;
}

void OutletAddressDTO::setEstate(std::string value)
{
	m_Estate = value;
}
std::string OutletAddressDTO::getBlock() const
{
    return m_Block;
}

void OutletAddressDTO::setBlock(std::string value)
{
	m_Block = value;
}
std::string OutletAddressDTO::getAdditional() const
{
    return m_Additional;
}

void OutletAddressDTO::setAdditional(std::string value)
{
	m_Additional = value;
}
int32_t OutletAddressDTO::getKm() const
{
    return m_Km;
}

void OutletAddressDTO::setKm(int32_t value)
{
	m_Km = value;
}
std::string OutletAddressDTO::getCity() const
{
    return m_City;
}

void OutletAddressDTO::setCity(std::string value)
{
	m_City = value;
}

std::vector<OutletAddressDTO> createOutletAddressDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OutletAddressDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OutletAddressDTO(child.second));
    }

    return vec;
}

}
}
}
}

