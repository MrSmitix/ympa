/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedIndexLogsRecordDTO.h
 *
 * Список отчетов по индексации прайс-листа.
 */

#ifndef FeedIndexLogsRecordDTO_H_
#define FeedIndexLogsRecordDTO_H_



#include "FeedIndexLogsErrorDTO.h"
#include <string>
#include "FeedIndexLogsStatusType.h"
#include <vector>
#include "FeedIndexLogsIndexType.h"
#include "FeedIndexLogsOffersDTO.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Список отчетов по индексации прайс-листа.
/// </summary>
class  FeedIndexLogsRecordDTO 
{
public:
    FeedIndexLogsRecordDTO() = default;
    explicit FeedIndexLogsRecordDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedIndexLogsRecordDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// FeedIndexLogsRecordDTO members

    /// <summary>
    /// Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    std::string getDownloadTime() const;
    void setDownloadTime(std::string value);

    /// <summary>
    /// Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    std::string getFileTime() const;
    void setFileTime(std::string value);

    /// <summary>
    /// Идентификатор индексации.
    /// </summary>
    int64_t getGenerationId() const;
    void setGenerationId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedIndexLogsIndexType> getIndexType() const;
    void setIndexType(std::shared_ptr<FeedIndexLogsIndexType> value);

    /// <summary>
    /// Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    std::string getPublishedTime() const;
    void setPublishedTime(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedIndexLogsStatusType> getStatus() const;
    void setStatus(std::shared_ptr<FeedIndexLogsStatusType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedIndexLogsErrorDTO> getError() const;
    void setError(std::shared_ptr<FeedIndexLogsErrorDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedIndexLogsOffersDTO> getOffers() const;
    void setOffers(std::shared_ptr<FeedIndexLogsOffersDTO> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_DownloadTime = "";
    std::string m_FileTime = "";
    int64_t m_GenerationId = 0L;
    std::shared_ptr<FeedIndexLogsIndexType> m_IndexType = std::make_shared<FeedIndexLogsIndexType>();
    std::string m_PublishedTime = "";
    std::shared_ptr<FeedIndexLogsStatusType> m_Status = std::make_shared<FeedIndexLogsStatusType>();
    std::shared_ptr<FeedIndexLogsErrorDTO> m_Error;
    std::shared_ptr<FeedIndexLogsOffersDTO> m_Offers;
};

std::vector<FeedIndexLogsRecordDTO> createFeedIndexLogsRecordDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* FeedIndexLogsRecordDTO_H_ */
