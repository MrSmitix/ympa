/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FeedIndexLogsRecordDTO.h
 *
 * Список отчетов по индексации прайс-листа.
 */

#ifndef FeedIndexLogsRecordDTO_H_
#define FeedIndexLogsRecordDTO_H_


#include "FeedIndexLogsErrorDTO.h"
#include <string>
#include "FeedIndexLogsStatusType.h"
#include "FeedIndexLogsIndexType.h"
#include "FeedIndexLogsOffersDTO.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Список отчетов по индексации прайс-листа.
/// </summary>
class  FeedIndexLogsRecordDTO
{
public:
    FeedIndexLogsRecordDTO();
    virtual ~FeedIndexLogsRecordDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FeedIndexLogsRecordDTO& rhs) const;
    bool operator!=(const FeedIndexLogsRecordDTO& rhs) const;

    /////////////////////////////////////////////
    /// FeedIndexLogsRecordDTO members

    /// <summary>
    /// Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    std::string getDownloadTime() const;
    void setDownloadTime(std::string const& value);
    bool downloadTimeIsSet() const;
    void unsetDownloadTime();
    /// <summary>
    /// Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    std::string getFileTime() const;
    void setFileTime(std::string const& value);
    bool fileTimeIsSet() const;
    void unsetFileTime();
    /// <summary>
    /// Идентификатор индексации.
    /// </summary>
    int64_t getGenerationId() const;
    void setGenerationId(int64_t const value);
    bool generationIdIsSet() const;
    void unsetGenerationId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedIndexLogsIndexType getIndexType() const;
    void setIndexType(org::openapitools::server::model::FeedIndexLogsIndexType const& value);
    bool indexTypeIsSet() const;
    void unsetIndexType();
    /// <summary>
    /// Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    std::string getPublishedTime() const;
    void setPublishedTime(std::string const& value);
    bool publishedTimeIsSet() const;
    void unsetPublishedTime();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedIndexLogsStatusType getStatus() const;
    void setStatus(org::openapitools::server::model::FeedIndexLogsStatusType const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedIndexLogsErrorDTO getError() const;
    void setError(org::openapitools::server::model::FeedIndexLogsErrorDTO const& value);
    bool errorIsSet() const;
    void unsetError();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedIndexLogsOffersDTO getOffers() const;
    void setOffers(org::openapitools::server::model::FeedIndexLogsOffersDTO const& value);
    bool offersIsSet() const;
    void unsetOffers();

    friend  void to_json(nlohmann::json& j, const FeedIndexLogsRecordDTO& o);
    friend  void from_json(const nlohmann::json& j, FeedIndexLogsRecordDTO& o);
protected:
    std::string m_DownloadTime;
    bool m_DownloadTimeIsSet;
    std::string m_FileTime;
    bool m_FileTimeIsSet;
    int64_t m_GenerationId;
    bool m_GenerationIdIsSet;
    org::openapitools::server::model::FeedIndexLogsIndexType m_IndexType;
    bool m_IndexTypeIsSet;
    std::string m_PublishedTime;
    bool m_PublishedTimeIsSet;
    org::openapitools::server::model::FeedIndexLogsStatusType m_Status;
    bool m_StatusIsSet;
    org::openapitools::server::model::FeedIndexLogsErrorDTO m_Error;
    bool m_ErrorIsSet;
    org::openapitools::server::model::FeedIndexLogsOffersDTO m_Offers;
    bool m_OffersIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* FeedIndexLogsRecordDTO_H_ */
