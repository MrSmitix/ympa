/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BriefOrderItemInstanceDTO.h
 *
 * Идентификатор единицы товара.  Заполните только одно поле в зависимости от того, в какой системе маркирован товар.  Подробно о работе с маркируемыми товарами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/cz.html). 
 */

#ifndef BriefOrderItemInstanceDTO_H_
#define BriefOrderItemInstanceDTO_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Идентификатор единицы товара.  Заполните только одно поле в зависимости от того, в какой системе маркирован товар.  Подробно о работе с маркируемыми товарами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/cz.html). 
/// </summary>
class  BriefOrderItemInstanceDTO
{
public:
    BriefOrderItemInstanceDTO();
    virtual ~BriefOrderItemInstanceDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const BriefOrderItemInstanceDTO& rhs) const;
    bool operator!=(const BriefOrderItemInstanceDTO& rhs) const;

    /////////////////////////////////////////////
    /// BriefOrderItemInstanceDTO members

    /// <summary>
    /// Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).  {% note warning %}  Не экранируйте косую черту в коде символа-разделителя &#x60;\\u001d&#x60;!  ✅ &#x60;01030410947874432155Qbag!\\u001d93Zjqw&#x60;  ❌ &#x60;01030410947874432155Qbag!\\\\u001d93Zjqw&#x60;  Косые черты и кавычки в других местах экранируйте по правилам JSON: &#x60;\\\\&#x60; и &#x60;\\\&quot;&#x60;  {% endnote %} 
    /// </summary>
    std::string getCis() const;
    void setCis(std::string const& value);
    bool cisIsSet() const;
    void unsetCis();
    /// <summary>
    /// Уникальный идентификационный номер ювелирного изделия.  Представляет собой число из 16 цифр. 
    /// </summary>
    std::string getUin() const;
    void setUin(std::string const& value);
    bool uinIsSet() const;
    void unsetUin();
    /// <summary>
    /// Регистрационный номер партии товара.  Представляет собой строку из четырех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ/ХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на партию товара. Далее — дата, номер декларации и номер маркированного товара в декларации. 
    /// </summary>
    std::string getRnpt() const;
    void setRnpt(std::string const& value);
    bool rnptIsSet() const;
    void unsetRnpt();
    /// <summary>
    /// Грузовая таможенная декларация.  Представляет собой строку из трех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на ввезенные товары. Далее — дата и номер декларации. 
    /// </summary>
    std::string getGtd() const;
    void setGtd(std::string const& value);
    bool gtdIsSet() const;
    void unsetGtd();

    friend  void to_json(nlohmann::json& j, const BriefOrderItemInstanceDTO& o);
    friend  void from_json(const nlohmann::json& j, BriefOrderItemInstanceDTO& o);
protected:
    std::string m_Cis;
    bool m_CisIsSet;
    std::string m_Uin;
    bool m_UinIsSet;
    std::string m_Rnpt;
    bool m_RnptIsSet;
    std::string m_Gtd;
    bool m_GtdIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* BriefOrderItemInstanceDTO_H_ */
