/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GenerateStocksOnWarehousesReportRequest.h
 *
 * Данные, необходимые для генерации отчета. 
 */

#ifndef GenerateStocksOnWarehousesReportRequest_H_
#define GenerateStocksOnWarehousesReportRequest_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Данные, необходимые для генерации отчета. 
/// </summary>
class  GenerateStocksOnWarehousesReportRequest
{
public:
    GenerateStocksOnWarehousesReportRequest();
    virtual ~GenerateStocksOnWarehousesReportRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GenerateStocksOnWarehousesReportRequest& rhs) const;
    bool operator!=(const GenerateStocksOnWarehousesReportRequest& rhs) const;

    /////////////////////////////////////////////
    /// GenerateStocksOnWarehousesReportRequest members

    /// <summary>
    /// Идентификатор магазина.
    /// </summary>
    int64_t getCampaignId() const;
    void setCampaignId(int64_t const value);
    /// <summary>
    /// Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
    /// </summary>
    std::vector<int64_t> getWarehouseIds() const;
    void setWarehouseIds(std::vector<int64_t> const value);
    bool warehouseIdsIsSet() const;
    void unsetWarehouseIds();
    /// <summary>
    /// Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
    /// </summary>
    std::string getReportDate() const;
    void setReportDate(std::string const& value);
    bool reportDateIsSet() const;
    void unsetReportDate();
    /// <summary>
    /// Фильтр по категориям на Маркете (кроме модели FBY).
    /// </summary>
    std::vector<int64_t> getCategoryIds() const;
    void setCategoryIds(std::vector<int64_t> const value);
    bool categoryIdsIsSet() const;
    void unsetCategoryIds();
    /// <summary>
    /// Фильтр по наличию остатков (кроме модели FBY).
    /// </summary>
    bool isHasStocks() const;
    void setHasStocks(bool const value);
    bool hasStocksIsSet() const;
    void unsetHasStocks();

    friend  void to_json(nlohmann::json& j, const GenerateStocksOnWarehousesReportRequest& o);
    friend  void from_json(const nlohmann::json& j, GenerateStocksOnWarehousesReportRequest& o);
protected:
    int64_t m_CampaignId;

    std::vector<int64_t> m_WarehouseIds;
    bool m_WarehouseIdsIsSet;
    std::string m_ReportDate;
    bool m_ReportDateIsSet;
    std::vector<int64_t> m_CategoryIds;
    bool m_CategoryIdsIsSet;
    bool m_HasStocks;
    bool m_HasStocksIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GenerateStocksOnWarehousesReportRequest_H_ */
