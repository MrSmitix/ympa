/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SkuBidRecommendationItemDTO.h
 *
 * Список товаров с рекомендованными ставками.
 */

#ifndef SkuBidRecommendationItemDTO_H_
#define SkuBidRecommendationItemDTO_H_



#include "PriceRecommendationItemDTO.h"
#include <string>
#include "BidRecommendationItemDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Список товаров с рекомендованными ставками.
/// </summary>
class  SkuBidRecommendationItemDTO 
{
public:
    SkuBidRecommendationItemDTO() = default;
    explicit SkuBidRecommendationItemDTO(boost::property_tree::ptree const& pt);
    virtual ~SkuBidRecommendationItemDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// SkuBidRecommendationItemDTO members

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getSku() const;
    void setSku(std::string value);

    /// <summary>
    /// Значение ставки.
    /// </summary>
    int32_t getBid() const;
    void setBid(int32_t value);

    /// <summary>
    /// Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить. 
    /// </summary>
    std::vector<std::shared_ptr<BidRecommendationItemDTO>> getBidRecommendations() const;
    void setBidRecommendations(std::vector<std::shared_ptr<BidRecommendationItemDTO>> value);

    /// <summary>
    /// Рекомендованные цены.
    /// </summary>
    std::vector<std::shared_ptr<PriceRecommendationItemDTO>> getPriceRecommendations() const;
    void setPriceRecommendations(std::vector<std::shared_ptr<PriceRecommendationItemDTO>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Sku = "";
    int32_t m_Bid = 0;
    std::vector<std::shared_ptr<BidRecommendationItemDTO>> m_BidRecommendations;
    std::vector<std::shared_ptr<PriceRecommendationItemDTO>> m_PriceRecommendations;
};

std::vector<SkuBidRecommendationItemDTO> createSkuBidRecommendationItemDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* SkuBidRecommendationItemDTO_H_ */
