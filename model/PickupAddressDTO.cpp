/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PickupAddressDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PickupAddressDTO::PickupAddressDTO()
{
    m_Country = "";
    m_CountryIsSet = false;
    m_City = "";
    m_CityIsSet = false;
    m_Street = "";
    m_StreetIsSet = false;
    m_House = "";
    m_HouseIsSet = false;
    m_Postcode = "";
    m_PostcodeIsSet = false;
    
}

void PickupAddressDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PickupAddressDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PickupAddressDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PickupAddressDTO" : pathPrefix;

                        
    return success;
}

bool PickupAddressDTO::operator==(const PickupAddressDTO& rhs) const
{
    return
    
    
    
    ((!countryIsSet() && !rhs.countryIsSet()) || (countryIsSet() && rhs.countryIsSet() && getCountry() == rhs.getCountry())) &&
    
    
    ((!cityIsSet() && !rhs.cityIsSet()) || (cityIsSet() && rhs.cityIsSet() && getCity() == rhs.getCity())) &&
    
    
    ((!streetIsSet() && !rhs.streetIsSet()) || (streetIsSet() && rhs.streetIsSet() && getStreet() == rhs.getStreet())) &&
    
    
    ((!houseIsSet() && !rhs.houseIsSet()) || (houseIsSet() && rhs.houseIsSet() && getHouse() == rhs.getHouse())) &&
    
    
    ((!postcodeIsSet() && !rhs.postcodeIsSet()) || (postcodeIsSet() && rhs.postcodeIsSet() && getPostcode() == rhs.getPostcode()))
    
    ;
}

bool PickupAddressDTO::operator!=(const PickupAddressDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PickupAddressDTO& o)
{
    j = nlohmann::json::object();
    if(o.countryIsSet())
        j["country"] = o.m_Country;
    if(o.cityIsSet())
        j["city"] = o.m_City;
    if(o.streetIsSet())
        j["street"] = o.m_Street;
    if(o.houseIsSet())
        j["house"] = o.m_House;
    if(o.postcodeIsSet())
        j["postcode"] = o.m_Postcode;
    
}

void from_json(const nlohmann::json& j, PickupAddressDTO& o)
{
    if(j.find("country") != j.end())
    {
        j.at("country").get_to(o.m_Country);
        o.m_CountryIsSet = true;
    } 
    if(j.find("city") != j.end())
    {
        j.at("city").get_to(o.m_City);
        o.m_CityIsSet = true;
    } 
    if(j.find("street") != j.end())
    {
        j.at("street").get_to(o.m_Street);
        o.m_StreetIsSet = true;
    } 
    if(j.find("house") != j.end())
    {
        j.at("house").get_to(o.m_House);
        o.m_HouseIsSet = true;
    } 
    if(j.find("postcode") != j.end())
    {
        j.at("postcode").get_to(o.m_Postcode);
        o.m_PostcodeIsSet = true;
    } 
    
}

std::string PickupAddressDTO::getCountry() const
{
    return m_Country;
}
void PickupAddressDTO::setCountry(std::string const& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool PickupAddressDTO::countryIsSet() const
{
    return m_CountryIsSet;
}
void PickupAddressDTO::unsetCountry()
{
    m_CountryIsSet = false;
}
std::string PickupAddressDTO::getCity() const
{
    return m_City;
}
void PickupAddressDTO::setCity(std::string const& value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool PickupAddressDTO::cityIsSet() const
{
    return m_CityIsSet;
}
void PickupAddressDTO::unsetCity()
{
    m_CityIsSet = false;
}
std::string PickupAddressDTO::getStreet() const
{
    return m_Street;
}
void PickupAddressDTO::setStreet(std::string const& value)
{
    m_Street = value;
    m_StreetIsSet = true;
}
bool PickupAddressDTO::streetIsSet() const
{
    return m_StreetIsSet;
}
void PickupAddressDTO::unsetStreet()
{
    m_StreetIsSet = false;
}
std::string PickupAddressDTO::getHouse() const
{
    return m_House;
}
void PickupAddressDTO::setHouse(std::string const& value)
{
    m_House = value;
    m_HouseIsSet = true;
}
bool PickupAddressDTO::houseIsSet() const
{
    return m_HouseIsSet;
}
void PickupAddressDTO::unsetHouse()
{
    m_HouseIsSet = false;
}
std::string PickupAddressDTO::getPostcode() const
{
    return m_Postcode;
}
void PickupAddressDTO::setPostcode(std::string const& value)
{
    m_Postcode = value;
    m_PostcodeIsSet = true;
}
bool PickupAddressDTO::postcodeIsSet() const
{
    return m_PostcodeIsSet;
}
void PickupAddressDTO::unsetPostcode()
{
    m_PostcodeIsSet = false;
}


} // namespace org::openapitools::server::model

