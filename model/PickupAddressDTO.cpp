/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PickupAddressDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PickupAddressDTO::PickupAddressDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string PickupAddressDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void PickupAddressDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree PickupAddressDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void PickupAddressDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string PickupAddressDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void PickupAddressDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PickupAddressDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("country", m_Country);
	pt.put("city", m_City);
	pt.put("street", m_Street);
	pt.put("house", m_House);
	pt.put("postcode", m_Postcode);
	return pt;
}

void PickupAddressDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Country = pt.get("country", "");
	m_City = pt.get("city", "");
	m_Street = pt.get("street", "");
	m_House = pt.get("house", "");
	m_Postcode = pt.get("postcode", "");
}

std::string PickupAddressDTO::getCountry() const
{
    return m_Country;
}

void PickupAddressDTO::setCountry(std::string value)
{
	m_Country = value;
}
std::string PickupAddressDTO::getCity() const
{
    return m_City;
}

void PickupAddressDTO::setCity(std::string value)
{
	m_City = value;
}
std::string PickupAddressDTO::getStreet() const
{
    return m_Street;
}

void PickupAddressDTO::setStreet(std::string value)
{
	m_Street = value;
}
std::string PickupAddressDTO::getHouse() const
{
    return m_House;
}

void PickupAddressDTO::setHouse(std::string value)
{
	m_House = value;
}
std::string PickupAddressDTO::getPostcode() const
{
    return m_Postcode;
}

void PickupAddressDTO::setPostcode(std::string value)
{
	m_Postcode = value;
}

std::vector<PickupAddressDTO> createPickupAddressDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<PickupAddressDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(PickupAddressDTO(child.second));
    }

    return vec;
}

}
}
}
}

