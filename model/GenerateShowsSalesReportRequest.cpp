/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GenerateShowsSalesReportRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GenerateShowsSalesReportRequest::GenerateShowsSalesReportRequest()
{
    m_BusinessId = 0L;
    m_BusinessIdIsSet = false;
    m_CampaignId = 0L;
    m_CampaignIdIsSet = false;
    
}

void GenerateShowsSalesReportRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GenerateShowsSalesReportRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GenerateShowsSalesReportRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GenerateShowsSalesReportRequest" : pathPrefix;

                        
    return success;
}

bool GenerateShowsSalesReportRequest::operator==(const GenerateShowsSalesReportRequest& rhs) const
{
    return
    
    
    
    ((!businessIdIsSet() && !rhs.businessIdIsSet()) || (businessIdIsSet() && rhs.businessIdIsSet() && getBusinessId() == rhs.getBusinessId())) &&
    
    
    ((!campaignIdIsSet() && !rhs.campaignIdIsSet()) || (campaignIdIsSet() && rhs.campaignIdIsSet() && getCampaignId() == rhs.getCampaignId())) &&
    
    (getDateFrom() == rhs.getDateFrom())
     &&
    
    (getDateTo() == rhs.getDateTo())
     &&
    
    (getGrouping() == rhs.getGrouping())
    
    
    ;
}

bool GenerateShowsSalesReportRequest::operator!=(const GenerateShowsSalesReportRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GenerateShowsSalesReportRequest& o)
{
    j = nlohmann::json::object();
    if(o.businessIdIsSet())
        j["businessId"] = o.m_BusinessId;
    if(o.campaignIdIsSet())
        j["campaignId"] = o.m_CampaignId;
    j["dateFrom"] = o.m_DateFrom;
    j["dateTo"] = o.m_DateTo;
    j["grouping"] = o.m_Grouping;
    
}

void from_json(const nlohmann::json& j, GenerateShowsSalesReportRequest& o)
{
    if(j.find("businessId") != j.end())
    {
        j.at("businessId").get_to(o.m_BusinessId);
        o.m_BusinessIdIsSet = true;
    } 
    if(j.find("campaignId") != j.end())
    {
        j.at("campaignId").get_to(o.m_CampaignId);
        o.m_CampaignIdIsSet = true;
    } 
    j.at("dateFrom").get_to(o.m_DateFrom);
    j.at("dateTo").get_to(o.m_DateTo);
    j.at("grouping").get_to(o.m_Grouping);
    
}

int64_t GenerateShowsSalesReportRequest::getBusinessId() const
{
    return m_BusinessId;
}
void GenerateShowsSalesReportRequest::setBusinessId(int64_t const value)
{
    m_BusinessId = value;
    m_BusinessIdIsSet = true;
}
bool GenerateShowsSalesReportRequest::businessIdIsSet() const
{
    return m_BusinessIdIsSet;
}
void GenerateShowsSalesReportRequest::unsetBusinessId()
{
    m_BusinessIdIsSet = false;
}
int64_t GenerateShowsSalesReportRequest::getCampaignId() const
{
    return m_CampaignId;
}
void GenerateShowsSalesReportRequest::setCampaignId(int64_t const value)
{
    m_CampaignId = value;
    m_CampaignIdIsSet = true;
}
bool GenerateShowsSalesReportRequest::campaignIdIsSet() const
{
    return m_CampaignIdIsSet;
}
void GenerateShowsSalesReportRequest::unsetCampaignId()
{
    m_CampaignIdIsSet = false;
}
std::string GenerateShowsSalesReportRequest::getDateFrom() const
{
    return m_DateFrom;
}
void GenerateShowsSalesReportRequest::setDateFrom(std::string const& value)
{
    m_DateFrom = value;
}
std::string GenerateShowsSalesReportRequest::getDateTo() const
{
    return m_DateTo;
}
void GenerateShowsSalesReportRequest::setDateTo(std::string const& value)
{
    m_DateTo = value;
}
org::openapitools::server::model::ShowsSalesGroupingType GenerateShowsSalesReportRequest::getGrouping() const
{
    return m_Grouping;
}
void GenerateShowsSalesReportRequest::setGrouping(org::openapitools::server::model::ShowsSalesGroupingType const& value)
{
    m_Grouping = value;
}


} // namespace org::openapitools::server::model

