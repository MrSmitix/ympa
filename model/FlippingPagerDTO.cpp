/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FlippingPagerDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FlippingPagerDTO::FlippingPagerDTO()
{
    m_Total = 0;
    m_TotalIsSet = false;
    m_From = 0;
    m_FromIsSet = false;
    m_To = 0;
    m_ToIsSet = false;
    m_CurrentPage = 0;
    m_CurrentPageIsSet = false;
    m_PagesCount = 0;
    m_PagesCountIsSet = false;
    m_PageSize = 0;
    m_PageSizeIsSet = false;
    
}

void FlippingPagerDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FlippingPagerDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FlippingPagerDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FlippingPagerDTO" : pathPrefix;

                            
    return success;
}

bool FlippingPagerDTO::operator==(const FlippingPagerDTO& rhs) const
{
    return
    
    
    
    ((!totalIsSet() && !rhs.totalIsSet()) || (totalIsSet() && rhs.totalIsSet() && getTotal() == rhs.getTotal())) &&
    
    
    ((!fromIsSet() && !rhs.fromIsSet()) || (fromIsSet() && rhs.fromIsSet() && getFrom() == rhs.getFrom())) &&
    
    
    ((!toIsSet() && !rhs.toIsSet()) || (toIsSet() && rhs.toIsSet() && getTo() == rhs.getTo())) &&
    
    
    ((!currentPageIsSet() && !rhs.currentPageIsSet()) || (currentPageIsSet() && rhs.currentPageIsSet() && getCurrentPage() == rhs.getCurrentPage())) &&
    
    
    ((!pagesCountIsSet() && !rhs.pagesCountIsSet()) || (pagesCountIsSet() && rhs.pagesCountIsSet() && getPagesCount() == rhs.getPagesCount())) &&
    
    
    ((!pageSizeIsSet() && !rhs.pageSizeIsSet()) || (pageSizeIsSet() && rhs.pageSizeIsSet() && getPageSize() == rhs.getPageSize()))
    
    ;
}

bool FlippingPagerDTO::operator!=(const FlippingPagerDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FlippingPagerDTO& o)
{
    j = nlohmann::json::object();
    if(o.totalIsSet())
        j["total"] = o.m_Total;
    if(o.fromIsSet())
        j["from"] = o.m_From;
    if(o.toIsSet())
        j["to"] = o.m_To;
    if(o.currentPageIsSet())
        j["currentPage"] = o.m_CurrentPage;
    if(o.pagesCountIsSet())
        j["pagesCount"] = o.m_PagesCount;
    if(o.pageSizeIsSet())
        j["pageSize"] = o.m_PageSize;
    
}

void from_json(const nlohmann::json& j, FlippingPagerDTO& o)
{
    if(j.find("total") != j.end())
    {
        j.at("total").get_to(o.m_Total);
        o.m_TotalIsSet = true;
    } 
    if(j.find("from") != j.end())
    {
        j.at("from").get_to(o.m_From);
        o.m_FromIsSet = true;
    } 
    if(j.find("to") != j.end())
    {
        j.at("to").get_to(o.m_To);
        o.m_ToIsSet = true;
    } 
    if(j.find("currentPage") != j.end())
    {
        j.at("currentPage").get_to(o.m_CurrentPage);
        o.m_CurrentPageIsSet = true;
    } 
    if(j.find("pagesCount") != j.end())
    {
        j.at("pagesCount").get_to(o.m_PagesCount);
        o.m_PagesCountIsSet = true;
    } 
    if(j.find("pageSize") != j.end())
    {
        j.at("pageSize").get_to(o.m_PageSize);
        o.m_PageSizeIsSet = true;
    } 
    
}

int32_t FlippingPagerDTO::getTotal() const
{
    return m_Total;
}
void FlippingPagerDTO::setTotal(int32_t const value)
{
    m_Total = value;
    m_TotalIsSet = true;
}
bool FlippingPagerDTO::totalIsSet() const
{
    return m_TotalIsSet;
}
void FlippingPagerDTO::unsetTotal()
{
    m_TotalIsSet = false;
}
int32_t FlippingPagerDTO::getFrom() const
{
    return m_From;
}
void FlippingPagerDTO::setFrom(int32_t const value)
{
    m_From = value;
    m_FromIsSet = true;
}
bool FlippingPagerDTO::fromIsSet() const
{
    return m_FromIsSet;
}
void FlippingPagerDTO::unsetFrom()
{
    m_FromIsSet = false;
}
int32_t FlippingPagerDTO::getTo() const
{
    return m_To;
}
void FlippingPagerDTO::setTo(int32_t const value)
{
    m_To = value;
    m_ToIsSet = true;
}
bool FlippingPagerDTO::toIsSet() const
{
    return m_ToIsSet;
}
void FlippingPagerDTO::unsetTo()
{
    m_ToIsSet = false;
}
int32_t FlippingPagerDTO::getCurrentPage() const
{
    return m_CurrentPage;
}
void FlippingPagerDTO::setCurrentPage(int32_t const value)
{
    m_CurrentPage = value;
    m_CurrentPageIsSet = true;
}
bool FlippingPagerDTO::currentPageIsSet() const
{
    return m_CurrentPageIsSet;
}
void FlippingPagerDTO::unsetCurrentPage()
{
    m_CurrentPageIsSet = false;
}
int32_t FlippingPagerDTO::getPagesCount() const
{
    return m_PagesCount;
}
void FlippingPagerDTO::setPagesCount(int32_t const value)
{
    m_PagesCount = value;
    m_PagesCountIsSet = true;
}
bool FlippingPagerDTO::pagesCountIsSet() const
{
    return m_PagesCountIsSet;
}
void FlippingPagerDTO::unsetPagesCount()
{
    m_PagesCountIsSet = false;
}
int32_t FlippingPagerDTO::getPageSize() const
{
    return m_PageSize;
}
void FlippingPagerDTO::setPageSize(int32_t const value)
{
    m_PageSize = value;
    m_PageSizeIsSet = true;
}
bool FlippingPagerDTO::pageSizeIsSet() const
{
    return m_PageSizeIsSet;
}
void FlippingPagerDTO::unsetPageSize()
{
    m_PageSizeIsSet = false;
}


} // namespace org::openapitools::server::model

