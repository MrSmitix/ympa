/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FlippingPagerDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

FlippingPagerDTO::FlippingPagerDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string FlippingPagerDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void FlippingPagerDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree FlippingPagerDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("total", m_Total);
	pt.put("from", m_From);
	pt.put("to", m_To);
	pt.put("currentPage", m_CurrentPage);
	pt.put("pagesCount", m_PagesCount);
	pt.put("pageSize", m_PageSize);
	return pt;
}

void FlippingPagerDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Total = pt.get("total", 0);
	m_From = pt.get("from", 0);
	m_To = pt.get("to", 0);
	m_CurrentPage = pt.get("currentPage", 0);
	m_PagesCount = pt.get("pagesCount", 0);
	m_PageSize = pt.get("pageSize", 0);
}

int32_t FlippingPagerDTO::getTotal() const
{
    return m_Total;
}

void FlippingPagerDTO::setTotal(int32_t value)
{
    m_Total = value;
}


int32_t FlippingPagerDTO::getFrom() const
{
    return m_From;
}

void FlippingPagerDTO::setFrom(int32_t value)
{
    m_From = value;
}


int32_t FlippingPagerDTO::getTo() const
{
    return m_To;
}

void FlippingPagerDTO::setTo(int32_t value)
{
    m_To = value;
}


int32_t FlippingPagerDTO::getCurrentPage() const
{
    return m_CurrentPage;
}

void FlippingPagerDTO::setCurrentPage(int32_t value)
{
    m_CurrentPage = value;
}


int32_t FlippingPagerDTO::getPagesCount() const
{
    return m_PagesCount;
}

void FlippingPagerDTO::setPagesCount(int32_t value)
{
    m_PagesCount = value;
}


int32_t FlippingPagerDTO::getPageSize() const
{
    return m_PageSize;
}

void FlippingPagerDTO::setPageSize(int32_t value)
{
    m_PageSize = value;
}



std::vector<FlippingPagerDTO> createFlippingPagerDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<FlippingPagerDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(FlippingPagerDTO(child.second));
    }

    return vec;
}

}
}
}
}

