/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrderItemDTO.h
 *
 * Список товаров в заказе.
 */

#ifndef OrderItemDTO_H_
#define OrderItemDTO_H_


#include "OrderItemDetailDTO.h"
#include "OrderItemInstanceType.h"
#include "OrderItemSubsidyDTO.h"
#include "OrderItemPromoDTO.h"
#include <string>
#include "OrderItemInstanceDTO.h"
#include <vector>
#include "OrderVatType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Список товаров в заказе.
/// </summary>
class  OrderItemDTO
{
public:
    OrderItemDTO();
    virtual ~OrderItemDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OrderItemDTO& rhs) const;
    bool operator!=(const OrderItemDTO& rhs) const;

    /////////////////////////////////////////////
    /// OrderItemDTO members

    /// <summary>
    /// Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getOfferId() const;
    void setOfferId(std::string const& value);
    bool offerIdIsSet() const;
    void unsetOfferId();
    /// <summary>
    /// Название товара.
    /// </summary>
    std::string getOfferName() const;
    void setOfferName(std::string const& value);
    bool offerNameIsSet() const;
    void unsetOfferName();
    /// <summary>
    /// Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;). 
    /// </summary>
    double getPrice() const;
    void setPrice(double const value);
    bool priceIsSet() const;
    void unsetPrice();
    /// <summary>
    /// Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
    /// </summary>
    double getBuyerPrice() const;
    void setBuyerPrice(double const value);
    bool buyerPriceIsSet() const;
    void unsetBuyerPrice();
    /// <summary>
    /// Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
    /// </summary>
    double getBuyerPriceBeforeDiscount() const;
    void setBuyerPriceBeforeDiscount(double const value);
    bool buyerPriceBeforeDiscountIsSet() const;
    void unsetBuyerPriceBeforeDiscount();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
    /// </summary>
    double getPriceBeforeDiscount() const;
    void setPriceBeforeDiscount(double const value);
    bool priceBeforeDiscountIsSet() const;
    void unsetPriceBeforeDiscount();
    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int32_t getCount() const;
    void setCount(int32_t const value);
    bool countIsSet() const;
    void unsetCount();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderVatType getVat() const;
    void setVat(org::openapitools::server::model::OrderVatType const& value);
    bool vatIsSet() const;
    void unsetVat();
    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getShopSku() const;
    void setShopSku(std::string const& value);
    bool shopSkuIsSet() const;
    void unsetShopSku();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
    /// </summary>
    double getSubsidy() const;
    void setSubsidy(double const value);
    bool subsidyIsSet() const;
    void unsetSubsidy();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
    /// </summary>
    std::string getPartnerWarehouseId() const;
    void setPartnerWarehouseId(std::string const& value);
    bool partnerWarehouseIdIsSet() const;
    void unsetPartnerWarehouseId();
    /// <summary>
    /// Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
    /// </summary>
    std::vector<org::openapitools::server::model::OrderItemPromoDTO> getPromos() const;
    void setPromos(std::vector<org::openapitools::server::model::OrderItemPromoDTO> const& value);
    bool promosIsSet() const;
    void unsetPromos();
    /// <summary>
    /// Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует. 
    /// </summary>
    std::vector<org::openapitools::server::model::OrderItemInstanceDTO> getInstances() const;
    void setInstances(std::vector<org::openapitools::server::model::OrderItemInstanceDTO> const& value);
    bool instancesIsSet() const;
    void unsetInstances();
    /// <summary>
    /// Информация об удалении товара из заказа. 
    /// </summary>
    std::vector<org::openapitools::server::model::OrderItemDetailDTO> getDetails() const;
    void setDetails(std::vector<org::openapitools::server::model::OrderItemDetailDTO> const& value);
    bool detailsIsSet() const;
    void unsetDetails();
    /// <summary>
    /// Список субсидий по типам.
    /// </summary>
    std::vector<org::openapitools::server::model::OrderItemSubsidyDTO> getSubsidies() const;
    void setSubsidies(std::vector<org::openapitools::server::model::OrderItemSubsidyDTO> const& value);
    bool subsidiesIsSet() const;
    void unsetSubsidies();
    /// <summary>
    /// Список необходимых маркировок товара.
    /// </summary>
    std::vector<org::openapitools::server::model::OrderItemInstanceType> getRequiredInstanceTypes() const;
    void setRequiredInstanceTypes(std::vector<org::openapitools::server::model::OrderItemInstanceType> const& value);
    bool requiredInstanceTypesIsSet() const;
    void unsetRequiredInstanceTypes();

    friend  void to_json(nlohmann::json& j, const OrderItemDTO& o);
    friend  void from_json(const nlohmann::json& j, OrderItemDTO& o);
protected:
    int64_t m_Id;
    bool m_IdIsSet;
    std::string m_OfferId;
    bool m_OfferIdIsSet;
    std::string m_OfferName;
    bool m_OfferNameIsSet;
    double m_Price;
    bool m_PriceIsSet;
    double m_BuyerPrice;
    bool m_BuyerPriceIsSet;
    double m_BuyerPriceBeforeDiscount;
    bool m_BuyerPriceBeforeDiscountIsSet;
    double m_PriceBeforeDiscount;
    bool m_PriceBeforeDiscountIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    org::openapitools::server::model::OrderVatType m_Vat;
    bool m_VatIsSet;
    std::string m_ShopSku;
    bool m_ShopSkuIsSet;
    double m_Subsidy;
    bool m_SubsidyIsSet;
    std::string m_PartnerWarehouseId;
    bool m_PartnerWarehouseIdIsSet;
    std::vector<org::openapitools::server::model::OrderItemPromoDTO> m_Promos;
    bool m_PromosIsSet;
    std::vector<org::openapitools::server::model::OrderItemInstanceDTO> m_Instances;
    bool m_InstancesIsSet;
    std::vector<org::openapitools::server::model::OrderItemDetailDTO> m_Details;
    bool m_DetailsIsSet;
    std::vector<org::openapitools::server::model::OrderItemSubsidyDTO> m_Subsidies;
    bool m_SubsidiesIsSet;
    std::vector<org::openapitools::server::model::OrderItemInstanceType> m_RequiredInstanceTypes;
    bool m_RequiredInstanceTypesIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OrderItemDTO_H_ */
