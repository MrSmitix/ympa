/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderItemDTO.h
 *
 * Список товаров в заказе.
 */

#ifndef OrderItemDTO_H_
#define OrderItemDTO_H_



#include "OrderItemDetailDTO.h"
#include "OrderItemInstanceType.h"
#include "OrderItemSubsidyDTO.h"
#include "OrderItemPromoDTO.h"
#include <string>
#include "OrderItemInstanceDTO.h"
#include <vector>
#include "OrderVatType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Список товаров в заказе.
/// </summary>
class  OrderItemDTO 
{
public:
    OrderItemDTO() = default;
    explicit OrderItemDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderItemDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// OrderItemDTO members

    /// <summary>
    /// Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getOfferId() const;
    void setOfferId(std::string value);

    /// <summary>
    /// Название товара.
    /// </summary>
    std::string getOfferName() const;
    void setOfferName(std::string value);

    /// <summary>
    /// Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;). 
    /// </summary>
    double getPrice() const;
    void setPrice(double value);

    /// <summary>
    /// Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
    /// </summary>
    double getBuyerPrice() const;
    void setBuyerPrice(double value);

    /// <summary>
    /// Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
    /// </summary>
    double getBuyerPriceBeforeDiscount() const;
    void setBuyerPriceBeforeDiscount(double value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
    /// </summary>
    double getPriceBeforeDiscount() const;
    void setPriceBeforeDiscount(double value);

    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int32_t getCount() const;
    void setCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderVatType> getVat() const;
    void setVat(std::shared_ptr<OrderVatType> value);

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getShopSku() const;
    void setShopSku(std::string value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
    /// </summary>
    double getSubsidy() const;
    void setSubsidy(double value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
    /// </summary>
    std::string getPartnerWarehouseId() const;
    void setPartnerWarehouseId(std::string value);

    /// <summary>
    /// Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
    /// </summary>
    std::vector<std::shared_ptr<OrderItemPromoDTO>> getPromos() const;
    void setPromos(std::vector<std::shared_ptr<OrderItemPromoDTO>> value);

    /// <summary>
    /// Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует. 
    /// </summary>
    std::vector<std::shared_ptr<OrderItemInstanceDTO>> getInstances() const;
    void setInstances(std::vector<std::shared_ptr<OrderItemInstanceDTO>> value);

    /// <summary>
    /// Информация об удалении товара из заказа. 
    /// </summary>
    std::vector<std::shared_ptr<OrderItemDetailDTO>> getDetails() const;
    void setDetails(std::vector<std::shared_ptr<OrderItemDetailDTO>> value);

    /// <summary>
    /// Список субсидий по типам.
    /// </summary>
    std::vector<std::shared_ptr<OrderItemSubsidyDTO>> getSubsidies() const;
    void setSubsidies(std::vector<std::shared_ptr<OrderItemSubsidyDTO>> value);

    /// <summary>
    /// Список необходимых маркировок товара.
    /// </summary>
    std::vector<std::shared_ptr<OrderItemInstanceType>> getRequiredInstanceTypes() const;
    void setRequiredInstanceTypes(std::vector<std::shared_ptr<OrderItemInstanceType>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_Id = 0L;
    std::string m_OfferId = "";
    std::string m_OfferName = "";
    double m_Price = 0.0;
    double m_BuyerPrice = 0.0;
    double m_BuyerPriceBeforeDiscount = 0.0;
    double m_PriceBeforeDiscount = 0.0;
    int32_t m_Count = 0;
    std::shared_ptr<OrderVatType> m_Vat = std::make_shared<OrderVatType>();
    std::string m_ShopSku = "";
    double m_Subsidy = 0.0;
    std::string m_PartnerWarehouseId = "";
    std::vector<std::shared_ptr<OrderItemPromoDTO>> m_Promos;
    std::vector<std::shared_ptr<OrderItemInstanceDTO>> m_Instances;
    std::vector<std::shared_ptr<OrderItemDetailDTO>> m_Details;
    std::vector<std::shared_ptr<OrderItemSubsidyDTO>> m_Subsidies;
    std::vector<std::shared_ptr<OrderItemInstanceType>> m_RequiredInstanceTypes;
};

std::vector<OrderItemDTO> createOrderItemDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* OrderItemDTO_H_ */
