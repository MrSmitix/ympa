/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CampaignSettingsDTO.h
 *
 * Настройки магазина.
 */

#ifndef CampaignSettingsDTO_H_
#define CampaignSettingsDTO_H_



#include <string>
#include "CampaignSettingsLocalRegionDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Настройки магазина.
/// </summary>
class  CampaignSettingsDTO 
{
public:
    CampaignSettingsDTO() = default;
    explicit CampaignSettingsDTO(boost::property_tree::ptree const& pt);
    virtual ~CampaignSettingsDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// CampaignSettingsDTO members

    /// <summary>
    /// Идентификатор региона, в котором находится магазин.
    /// </summary>
    int64_t getCountryRegion() const;
    void setCountryRegion(int64_t value);

    /// <summary>
    /// Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — &#x60;null&#x60;. 
    /// </summary>
    std::string getShopName() const;
    void setShopName(std::string value);

    /// <summary>
    /// Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * &#x60;false&#x60; — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * &#x60;true&#x60; — магазин размещен на сайтах партнеров Яндекс Дистрибуции. 
    /// </summary>
    bool isShowInContext() const;
    void setShowInContext(bool value);

    /// <summary>
    /// Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * &#x60;false&#x60; — предложения не показываются в блоке cпецразмещения. * &#x60;true&#x60; — предложения показываются в блоке cпецразмещения. 
    /// </summary>
    bool isShowInPremium() const;
    void setShowInPremium(bool value);

    /// <summary>
    /// Признак использования внешней интернет-статистики. Возможные значения: * &#x60;false&#x60; — внешняя интернет-статистика не используется. * &#x60;true&#x60; — внешняя интернет-статистика используется. 
    /// </summary>
    bool isUseOpenStat() const;
    void setUseOpenStat(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CampaignSettingsLocalRegionDTO> getLocalRegion() const;
    void setLocalRegion(std::shared_ptr<CampaignSettingsLocalRegionDTO> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_CountryRegion = 0L;
    std::string m_ShopName = "";
    bool m_ShowInContext = false;
    bool m_ShowInPremium = false;
    bool m_UseOpenStat = false;
    std::shared_ptr<CampaignSettingsLocalRegionDTO> m_LocalRegion;
};

std::vector<CampaignSettingsDTO> createCampaignSettingsDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* CampaignSettingsDTO_H_ */
