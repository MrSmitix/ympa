/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrderDeliveryDatesDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrderDeliveryDatesDTO::OrderDeliveryDatesDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string OrderDeliveryDatesDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void OrderDeliveryDatesDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OrderDeliveryDatesDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("fromDate", m_FromDate);
	pt.put("toDate", m_ToDate);
	pt.put("fromTime", m_FromTime);
	pt.put("toTime", m_ToTime);
	pt.put("realDeliveryDate", m_RealDeliveryDate);
	return pt;
}

void OrderDeliveryDatesDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_FromDate = pt.get("fromDate", "");
	m_ToDate = pt.get("toDate", "");
	m_FromTime = pt.get("fromTime", "");
	m_ToTime = pt.get("toTime", "");
	m_RealDeliveryDate = pt.get("realDeliveryDate", "");
}

std::string OrderDeliveryDatesDTO::getFromDate() const
{
    return m_FromDate;
}

void OrderDeliveryDatesDTO::setFromDate(std::string value)
{
    m_FromDate = value;
}


std::string OrderDeliveryDatesDTO::getToDate() const
{
    return m_ToDate;
}

void OrderDeliveryDatesDTO::setToDate(std::string value)
{
    m_ToDate = value;
}


std::string OrderDeliveryDatesDTO::getFromTime() const
{
    return m_FromTime;
}

void OrderDeliveryDatesDTO::setFromTime(std::string value)
{
    m_FromTime = value;
}


std::string OrderDeliveryDatesDTO::getToTime() const
{
    return m_ToTime;
}

void OrderDeliveryDatesDTO::setToTime(std::string value)
{
    m_ToTime = value;
}


std::string OrderDeliveryDatesDTO::getRealDeliveryDate() const
{
    return m_RealDeliveryDate;
}

void OrderDeliveryDatesDTO::setRealDeliveryDate(std::string value)
{
    m_RealDeliveryDate = value;
}



std::vector<OrderDeliveryDatesDTO> createOrderDeliveryDatesDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OrderDeliveryDatesDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OrderDeliveryDatesDTO(child.second));
    }

    return vec;
}

}
}
}
}

