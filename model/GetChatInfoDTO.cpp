/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetChatInfoDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetChatInfoDTO::GetChatInfoDTO()
{
    m_ChatId = 0L;
    m_OrderId = 0L;
    m_CreatedAt = "";
    m_UpdatedAt = "";
    
}

void GetChatInfoDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetChatInfoDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetChatInfoDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetChatInfoDTO" : pathPrefix;

                            
    return success;
}

bool GetChatInfoDTO::operator==(const GetChatInfoDTO& rhs) const
{
    return
    
    
    (getChatId() == rhs.getChatId())
     &&
    
    (getOrderId() == rhs.getOrderId())
     &&
    
    (getType() == rhs.getType())
     &&
    
    (getStatus() == rhs.getStatus())
     &&
    
    (getCreatedAt() == rhs.getCreatedAt())
     &&
    
    (getUpdatedAt() == rhs.getUpdatedAt())
    
    
    ;
}

bool GetChatInfoDTO::operator!=(const GetChatInfoDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetChatInfoDTO& o)
{
    j = nlohmann::json::object();
    j["chatId"] = o.m_ChatId;
    j["orderId"] = o.m_OrderId;
    j["type"] = o.m_Type;
    j["status"] = o.m_Status;
    j["createdAt"] = o.m_CreatedAt;
    j["updatedAt"] = o.m_UpdatedAt;
    
}

void from_json(const nlohmann::json& j, GetChatInfoDTO& o)
{
    j.at("chatId").get_to(o.m_ChatId);
    j.at("orderId").get_to(o.m_OrderId);
    j.at("type").get_to(o.m_Type);
    j.at("status").get_to(o.m_Status);
    j.at("createdAt").get_to(o.m_CreatedAt);
    j.at("updatedAt").get_to(o.m_UpdatedAt);
    
}

int64_t GetChatInfoDTO::getChatId() const
{
    return m_ChatId;
}
void GetChatInfoDTO::setChatId(int64_t const value)
{
    m_ChatId = value;
}
int64_t GetChatInfoDTO::getOrderId() const
{
    return m_OrderId;
}
void GetChatInfoDTO::setOrderId(int64_t const value)
{
    m_OrderId = value;
}
org::openapitools::server::model::ChatType GetChatInfoDTO::getType() const
{
    return m_Type;
}
void GetChatInfoDTO::setType(org::openapitools::server::model::ChatType const& value)
{
    m_Type = value;
}
org::openapitools::server::model::ChatStatusType GetChatInfoDTO::getStatus() const
{
    return m_Status;
}
void GetChatInfoDTO::setStatus(org::openapitools::server::model::ChatStatusType const& value)
{
    m_Status = value;
}
std::string GetChatInfoDTO::getCreatedAt() const
{
    return m_CreatedAt;
}
void GetChatInfoDTO::setCreatedAt(std::string const& value)
{
    m_CreatedAt = value;
}
std::string GetChatInfoDTO::getUpdatedAt() const
{
    return m_UpdatedAt;
}
void GetChatInfoDTO::setUpdatedAt(std::string const& value)
{
    m_UpdatedAt = value;
}


} // namespace org::openapitools::server::model

