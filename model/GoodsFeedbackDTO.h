/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GoodsFeedbackDTO.h
 *
 * Отзыв о товаре.
 */

#ifndef GoodsFeedbackDTO_H_
#define GoodsFeedbackDTO_H_



#include "GoodsFeedbackIdentifiersDTO.h"
#include "GoodsFeedbackStatisticsDTO.h"
#include "GoodsFeedbackDescriptionDTO.h"
#include <string>
#include "GoodsFeedbackMediaDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Отзыв о товаре.
/// </summary>
class  GoodsFeedbackDTO 
{
public:
    GoodsFeedbackDTO() = default;
    explicit GoodsFeedbackDTO(boost::property_tree::ptree const& pt);
    virtual ~GoodsFeedbackDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// GoodsFeedbackDTO members

    /// <summary>
    /// Идентификатор отзыва. 
    /// </summary>
    int64_t getFeedbackId() const;
    void setFeedbackId(int64_t value);

    /// <summary>
    /// Дата и время создания отзыва.
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// Нужен ли ответ на отзыв.
    /// </summary>
    bool isNeedReaction() const;
    void setNeedReaction(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GoodsFeedbackIdentifiersDTO> getIdentifiers() const;
    void setIdentifiers(std::shared_ptr<GoodsFeedbackIdentifiersDTO> value);

    /// <summary>
    /// Имя автора отзыва.
    /// </summary>
    std::string getAuthor() const;
    void setAuthor(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GoodsFeedbackDescriptionDTO> getDescription() const;
    void setDescription(std::shared_ptr<GoodsFeedbackDescriptionDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GoodsFeedbackMediaDTO> getMedia() const;
    void setMedia(std::shared_ptr<GoodsFeedbackMediaDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GoodsFeedbackStatisticsDTO> getStatistics() const;
    void setStatistics(std::shared_ptr<GoodsFeedbackStatisticsDTO> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_FeedbackId = 0L;
    std::string m_CreatedAt = "";
    bool m_NeedReaction = false;
    std::shared_ptr<GoodsFeedbackIdentifiersDTO> m_Identifiers;
    std::string m_Author = "";
    std::shared_ptr<GoodsFeedbackDescriptionDTO> m_Description;
    std::shared_ptr<GoodsFeedbackMediaDTO> m_Media;
    std::shared_ptr<GoodsFeedbackStatisticsDTO> m_Statistics;
};

std::vector<GoodsFeedbackDTO> createGoodsFeedbackDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* GoodsFeedbackDTO_H_ */
