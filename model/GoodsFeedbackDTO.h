/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GoodsFeedbackDTO.h
 *
 * Отзыв о товаре.
 */

#ifndef GoodsFeedbackDTO_H_
#define GoodsFeedbackDTO_H_



#include "GoodsFeedbackIdentifiersDTO.h"
#include "GoodsFeedbackStatisticsDTO.h"
#include "GoodsFeedbackDescriptionDTO.h"
#include <string>
#include "GoodsFeedbackMediaDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Отзыв о товаре.
/// </summary>
class  GoodsFeedbackDTO 
{
public:
    GoodsFeedbackDTO() = default;
    explicit GoodsFeedbackDTO(boost::property_tree::ptree const& pt);
    virtual ~GoodsFeedbackDTO() = default;

    GoodsFeedbackDTO(const GoodsFeedbackDTO& other) = default; // copy constructor
    GoodsFeedbackDTO(GoodsFeedbackDTO&& other) noexcept = default; // move constructor

    GoodsFeedbackDTO& operator=(const GoodsFeedbackDTO& other) = default; // copy assignment
    GoodsFeedbackDTO& operator=(GoodsFeedbackDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GoodsFeedbackDTO members

    /// <summary>
    /// Идентификатор отзыва. 
    /// </summary>
    int64_t getFeedbackId() const;
    void setFeedbackId(int64_t value);

    /// <summary>
    /// Дата и время создания отзыва.
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// Нужен ли ответ на отзыв.
    /// </summary>
    bool isNeedReaction() const;
    void setNeedReaction(bool value);

    /// <summary>
    /// 
    /// </summary>
    GoodsFeedbackIdentifiersDTO getIdentifiers() const;
    void setIdentifiers(GoodsFeedbackIdentifiersDTO value);

    /// <summary>
    /// Имя автора отзыва.
    /// </summary>
    std::string getAuthor() const;
    void setAuthor(std::string value);

    /// <summary>
    /// 
    /// </summary>
    GoodsFeedbackDescriptionDTO getDescription() const;
    void setDescription(GoodsFeedbackDescriptionDTO value);

    /// <summary>
    /// 
    /// </summary>
    GoodsFeedbackMediaDTO getMedia() const;
    void setMedia(GoodsFeedbackMediaDTO value);

    /// <summary>
    /// 
    /// </summary>
    GoodsFeedbackStatisticsDTO getStatistics() const;
    void setStatistics(GoodsFeedbackStatisticsDTO value);

protected:
    int64_t m_FeedbackId = 0L;
    std::string m_CreatedAt = "";
    bool m_NeedReaction = false;
    GoodsFeedbackIdentifiersDTO m_Identifiers;
    std::string m_Author = "";
    GoodsFeedbackDescriptionDTO m_Description;
    GoodsFeedbackMediaDTO m_Media;
    GoodsFeedbackStatisticsDTO m_Statistics;
};

std::vector<GoodsFeedbackDTO> createGoodsFeedbackDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GoodsFeedbackDTO>(const GoodsFeedbackDTO& val) {
    return val.toPropertyTree();
}

template<>
inline GoodsFeedbackDTO fromPt<GoodsFeedbackDTO>(const boost::property_tree::ptree& pt) {
    GoodsFeedbackDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GoodsFeedbackDTO_H_ */
