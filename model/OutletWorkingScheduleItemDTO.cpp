/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OutletWorkingScheduleItemDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OutletWorkingScheduleItemDTO::OutletWorkingScheduleItemDTO()
{
    m_StartTime = "";
    m_EndTime = "";
    
}

void OutletWorkingScheduleItemDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OutletWorkingScheduleItemDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OutletWorkingScheduleItemDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OutletWorkingScheduleItemDTO" : pathPrefix;

                 
    
    /* StartTime */ {
        const std::string& value = m_StartTime;
        const std::string currentValuePath = _pathPrefix + ".startTime";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }

    }
         
    
    /* EndTime */ {
        const std::string& value = m_EndTime;
        const std::string currentValuePath = _pathPrefix + ".endTime";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }

    }
    
    return success;
}

bool OutletWorkingScheduleItemDTO::operator==(const OutletWorkingScheduleItemDTO& rhs) const
{
    return
    
    
    (getStartDay() == rhs.getStartDay())
     &&
    
    (getEndDay() == rhs.getEndDay())
     &&
    
    (getStartTime() == rhs.getStartTime())
     &&
    
    (getEndTime() == rhs.getEndTime())
    
    
    ;
}

bool OutletWorkingScheduleItemDTO::operator!=(const OutletWorkingScheduleItemDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OutletWorkingScheduleItemDTO& o)
{
    j = nlohmann::json::object();
    j["startDay"] = o.m_StartDay;
    j["endDay"] = o.m_EndDay;
    j["startTime"] = o.m_StartTime;
    j["endTime"] = o.m_EndTime;
    
}

void from_json(const nlohmann::json& j, OutletWorkingScheduleItemDTO& o)
{
    j.at("startDay").get_to(o.m_StartDay);
    j.at("endDay").get_to(o.m_EndDay);
    j.at("startTime").get_to(o.m_StartTime);
    j.at("endTime").get_to(o.m_EndTime);
    
}

org::openapitools::server::model::DayOfWeekType OutletWorkingScheduleItemDTO::getStartDay() const
{
    return m_StartDay;
}
void OutletWorkingScheduleItemDTO::setStartDay(org::openapitools::server::model::DayOfWeekType const& value)
{
    m_StartDay = value;
}
org::openapitools::server::model::DayOfWeekType OutletWorkingScheduleItemDTO::getEndDay() const
{
    return m_EndDay;
}
void OutletWorkingScheduleItemDTO::setEndDay(org::openapitools::server::model::DayOfWeekType const& value)
{
    m_EndDay = value;
}
std::string OutletWorkingScheduleItemDTO::getStartTime() const
{
    return m_StartTime;
}
void OutletWorkingScheduleItemDTO::setStartTime(std::string const& value)
{
    m_StartTime = value;
}
std::string OutletWorkingScheduleItemDTO::getEndTime() const
{
    return m_EndTime;
}
void OutletWorkingScheduleItemDTO::setEndTime(std::string const& value)
{
    m_EndTime = value;
}


} // namespace org::openapitools::server::model

