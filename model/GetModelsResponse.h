/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GetModelsResponse.h
 *
 * Ответ на запрос информации о моделях.
 */

#ifndef GetModelsResponse_H_
#define GetModelsResponse_H_


#include "CurrencyType.h"
#include "ModelDTO.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Ответ на запрос информации о моделях.
/// </summary>
class  GetModelsResponse
{
public:
    GetModelsResponse();
    virtual ~GetModelsResponse() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GetModelsResponse& rhs) const;
    bool operator!=(const GetModelsResponse& rhs) const;

    /////////////////////////////////////////////
    /// GetModelsResponse members

    /// <summary>
    /// Список моделей товаров.
    /// </summary>
    std::vector<org::openapitools::server::model::ModelDTO> getModels() const;
    void setModels(std::vector<org::openapitools::server::model::ModelDTO> const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CurrencyType getCurrency() const;
    void setCurrency(org::openapitools::server::model::CurrencyType const& value);
    bool currencyIsSet() const;
    void unsetCurrency();
    /// <summary>
    /// Идентификатор региона, для которого выводится информация о предложениях модели (доставляемых в этот регион).  Информацию о регионе по идентификатору можно получить с помощью запроса [GET regions/{regionId}](../../reference/regions/searchRegionsById.md). 
    /// </summary>
    int64_t getRegionId() const;
    void setRegionId(int64_t const value);
    bool regionIdIsSet() const;
    void unsetRegionId();

    friend  void to_json(nlohmann::json& j, const GetModelsResponse& o);
    friend  void from_json(const nlohmann::json& j, GetModelsResponse& o);
protected:
    std::vector<org::openapitools::server::model::ModelDTO> m_Models;

    org::openapitools::server::model::CurrencyType m_Currency;
    bool m_CurrencyIsSet;
    int64_t m_RegionId;
    bool m_RegionIdIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GetModelsResponse_H_ */
