/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetModelsResponse.h
 *
 * Ответ на запрос информации о моделях.
 */

#ifndef GetModelsResponse_H_
#define GetModelsResponse_H_



#include "CurrencyType.h"
#include "ModelDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "ModelsDTO.h"
#include "RegionalModelInfoDTO.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Ответ на запрос информации о моделях.
/// </summary>
class  GetModelsResponse : public ModelsDTO, public RegionalModelInfoDTO
{
public:
    GetModelsResponse() = default;
    explicit GetModelsResponse(boost::property_tree::ptree const& pt);
    virtual ~GetModelsResponse() = default;

    GetModelsResponse(const GetModelsResponse& other) = default; // copy constructor
    GetModelsResponse(GetModelsResponse&& other) noexcept = default; // move constructor

    GetModelsResponse& operator=(const GetModelsResponse& other) = default; // copy assignment
    GetModelsResponse& operator=(GetModelsResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GetModelsResponse members

    /// <summary>
    /// Список моделей товаров.
    /// </summary>
    std::vector<ModelDTO> getModels() const;
    void setModels(std::vector<ModelDTO> value);

    /// <summary>
    /// 
    /// </summary>
    CurrencyType getCurrency() const;
    void setCurrency(CurrencyType value);

    /// <summary>
    /// Идентификатор региона, для которого выводится информация о предложениях модели (доставляемых в этот регион).  Информацию о регионе по идентификатору можно получить с помощью запроса [GET regions/{regionId}](../../reference/regions/searchRegionsById.md). 
    /// </summary>
    int64_t getRegionId() const;
    void setRegionId(int64_t value);

protected:
    std::vector<ModelDTO> m_Models;
    CurrencyType m_Currency = CurrencyType{};
    int64_t m_RegionId = 0L;
};

std::vector<GetModelsResponse> createGetModelsResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GetModelsResponse>(const GetModelsResponse& val) {
    return val.toPropertyTree();
}

template<>
inline GetModelsResponse fromPt<GetModelsResponse>(const boost::property_tree::ptree& pt) {
    GetModelsResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GetModelsResponse_H_ */
