/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderShipmentDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderShipmentDTO::OrderShipmentDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_ShipmentDate = "";
    m_ShipmentDateIsSet = false;
    m_ShipmentTime = "";
    m_ShipmentTimeIsSet = false;
    m_TracksIsSet = false;
    m_BoxesIsSet = false;
    
}

void OrderShipmentDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderShipmentDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderShipmentDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderShipmentDTO" : pathPrefix;

                     
    if (tracksIsSet())
    {
        const std::vector<org::openapitools::server::model::OrderTrackDTO>& value = m_Tracks;
        const std::string currentValuePath = _pathPrefix + ".tracks";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderTrackDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".tracks") && success;
 
                i++;
            }
        }

    }
         
    if (boxesIsSet())
    {
        const std::vector<org::openapitools::server::model::OrderParcelBoxDTO>& value = m_Boxes;
        const std::string currentValuePath = _pathPrefix + ".boxes";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderParcelBoxDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".boxes") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool OrderShipmentDTO::operator==(const OrderShipmentDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!shipmentDateIsSet() && !rhs.shipmentDateIsSet()) || (shipmentDateIsSet() && rhs.shipmentDateIsSet() && getShipmentDate() == rhs.getShipmentDate())) &&
    
    
    ((!shipmentTimeIsSet() && !rhs.shipmentTimeIsSet()) || (shipmentTimeIsSet() && rhs.shipmentTimeIsSet() && getShipmentTime() == rhs.getShipmentTime())) &&
    
    
    ((!tracksIsSet() && !rhs.tracksIsSet()) || (tracksIsSet() && rhs.tracksIsSet() && getTracks() == rhs.getTracks())) &&
    
    
    ((!boxesIsSet() && !rhs.boxesIsSet()) || (boxesIsSet() && rhs.boxesIsSet() && getBoxes() == rhs.getBoxes()))
    
    ;
}

bool OrderShipmentDTO::operator!=(const OrderShipmentDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderShipmentDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.shipmentDateIsSet())
        j["shipmentDate"] = o.m_ShipmentDate;
    if(o.shipmentTimeIsSet())
        j["shipmentTime"] = o.m_ShipmentTime;
    if(o.tracksIsSet() || !o.m_Tracks.empty())
        j["tracks"] = o.m_Tracks;
    if(o.boxesIsSet() || !o.m_Boxes.empty())
        j["boxes"] = o.m_Boxes;
    
}

void from_json(const nlohmann::json& j, OrderShipmentDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("shipmentDate") != j.end())
    {
        j.at("shipmentDate").get_to(o.m_ShipmentDate);
        o.m_ShipmentDateIsSet = true;
    } 
    if(j.find("shipmentTime") != j.end())
    {
        j.at("shipmentTime").get_to(o.m_ShipmentTime);
        o.m_ShipmentTimeIsSet = true;
    } 
    if(j.find("tracks") != j.end())
    {
        j.at("tracks").get_to(o.m_Tracks);
        o.m_TracksIsSet = true;
    } 
    if(j.find("boxes") != j.end())
    {
        j.at("boxes").get_to(o.m_Boxes);
        o.m_BoxesIsSet = true;
    } 
    
}

int64_t OrderShipmentDTO::getId() const
{
    return m_Id;
}
void OrderShipmentDTO::setId(int64_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool OrderShipmentDTO::idIsSet() const
{
    return m_IdIsSet;
}
void OrderShipmentDTO::unsetId()
{
    m_IdIsSet = false;
}
std::string OrderShipmentDTO::getShipmentDate() const
{
    return m_ShipmentDate;
}
void OrderShipmentDTO::setShipmentDate(std::string const& value)
{
    m_ShipmentDate = value;
    m_ShipmentDateIsSet = true;
}
bool OrderShipmentDTO::shipmentDateIsSet() const
{
    return m_ShipmentDateIsSet;
}
void OrderShipmentDTO::unsetShipmentDate()
{
    m_ShipmentDateIsSet = false;
}
std::string OrderShipmentDTO::getShipmentTime() const
{
    return m_ShipmentTime;
}
void OrderShipmentDTO::setShipmentTime(std::string const& value)
{
    m_ShipmentTime = value;
    m_ShipmentTimeIsSet = true;
}
bool OrderShipmentDTO::shipmentTimeIsSet() const
{
    return m_ShipmentTimeIsSet;
}
void OrderShipmentDTO::unsetShipmentTime()
{
    m_ShipmentTimeIsSet = false;
}
std::vector<org::openapitools::server::model::OrderTrackDTO> OrderShipmentDTO::getTracks() const
{
    return m_Tracks;
}
void OrderShipmentDTO::setTracks(std::vector<org::openapitools::server::model::OrderTrackDTO> const& value)
{
    m_Tracks = value;
    m_TracksIsSet = true;
}
bool OrderShipmentDTO::tracksIsSet() const
{
    return m_TracksIsSet;
}
void OrderShipmentDTO::unsetTracks()
{
    m_TracksIsSet = false;
}
std::vector<org::openapitools::server::model::OrderParcelBoxDTO> OrderShipmentDTO::getBoxes() const
{
    return m_Boxes;
}
void OrderShipmentDTO::setBoxes(std::vector<org::openapitools::server::model::OrderParcelBoxDTO> const& value)
{
    m_Boxes = value;
    m_BoxesIsSet = true;
}
bool OrderShipmentDTO::boxesIsSet() const
{
    return m_BoxesIsSet;
}
void OrderShipmentDTO::unsetBoxes()
{
    m_BoxesIsSet = false;
}


} // namespace org::openapitools::server::model

