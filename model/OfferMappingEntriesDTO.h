/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OfferMappingEntriesDTO.h
 *
 * Информация о товарах в каталоге.
 */

#ifndef OfferMappingEntriesDTO_H_
#define OfferMappingEntriesDTO_H_


#include "OfferMappingEntryDTO.h"
#include "ScrollingPagerDTO.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о товарах в каталоге.
/// </summary>
class  OfferMappingEntriesDTO
{
public:
    OfferMappingEntriesDTO();
    virtual ~OfferMappingEntriesDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OfferMappingEntriesDTO& rhs) const;
    bool operator!=(const OfferMappingEntriesDTO& rhs) const;

    /////////////////////////////////////////////
    /// OfferMappingEntriesDTO members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ScrollingPagerDTO getPaging() const;
    void setPaging(org::openapitools::server::model::ScrollingPagerDTO const& value);
    bool pagingIsSet() const;
    void unsetPaging();
    /// <summary>
    /// Информация о товарах в каталоге.
    /// </summary>
    std::vector<org::openapitools::server::model::OfferMappingEntryDTO> getOfferMappingEntries() const;
    void setOfferMappingEntries(std::vector<org::openapitools::server::model::OfferMappingEntryDTO> const& value);

    friend  void to_json(nlohmann::json& j, const OfferMappingEntriesDTO& o);
    friend  void from_json(const nlohmann::json& j, OfferMappingEntriesDTO& o);
protected:
    org::openapitools::server::model::ScrollingPagerDTO m_Paging;
    bool m_PagingIsSet;
    std::vector<org::openapitools::server::model::OfferMappingEntryDTO> m_OfferMappingEntries;

    
};

} // namespace org::openapitools::server::model

#endif /* OfferMappingEntriesDTO_H_ */
