/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CalculateTariffsOfferDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CalculateTariffsOfferDTO::CalculateTariffsOfferDTO()
{
    m_CategoryId = 0L;
    m_Price = 0.0;
    m_Length = 0.0;
    m_Width = 0.0;
    m_Height = 0.0;
    m_Weight = 0.0;
    m_Quantity = 1;
    m_QuantityIsSet = false;
    
}

void CalculateTariffsOfferDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CalculateTariffsOfferDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CalculateTariffsOfferDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CalculateTariffsOfferDTO" : pathPrefix;

         
    
    /* CategoryId */ {
        const int64_t& value = m_CategoryId;
        const std::string currentValuePath = _pathPrefix + ".categoryId";
                
        
        if (value <= 0ll)
        {
            success = false;
            msg << currentValuePath << ": must be greater than 0;";
        }

    }
         
    
    /* Price */ {
        const double& value = m_Price;
        const std::string currentValuePath = _pathPrefix + ".price";
                
        
        if (value <= 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than 0;";
        }

    }
         
    
    /* Length */ {
        const double& value = m_Length;
        const std::string currentValuePath = _pathPrefix + ".length";
                
        
        if (value <= 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than 0;";
        }

    }
         
    
    /* Width */ {
        const double& value = m_Width;
        const std::string currentValuePath = _pathPrefix + ".width";
                
        
        if (value <= 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than 0;";
        }

    }
         
    
    /* Height */ {
        const double& value = m_Height;
        const std::string currentValuePath = _pathPrefix + ".height";
                
        
        if (value <= 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than 0;";
        }

    }
         
    
    /* Weight */ {
        const double& value = m_Weight;
        const std::string currentValuePath = _pathPrefix + ".weight";
                
        
        if (value <= 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than 0;";
        }

    }
         
    if (quantityIsSet())
    {
        const int32_t& value = m_Quantity;
        const std::string currentValuePath = _pathPrefix + ".quantity";
                
        
        if (value < 1)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }

    }
    
    return success;
}

bool CalculateTariffsOfferDTO::operator==(const CalculateTariffsOfferDTO& rhs) const
{
    return
    
    
    (getCategoryId() == rhs.getCategoryId())
     &&
    
    (getPrice() == rhs.getPrice())
     &&
    
    (getLength() == rhs.getLength())
     &&
    
    (getWidth() == rhs.getWidth())
     &&
    
    (getHeight() == rhs.getHeight())
     &&
    
    (getWeight() == rhs.getWeight())
     &&
    
    
    ((!quantityIsSet() && !rhs.quantityIsSet()) || (quantityIsSet() && rhs.quantityIsSet() && getQuantity() == rhs.getQuantity()))
    
    ;
}

bool CalculateTariffsOfferDTO::operator!=(const CalculateTariffsOfferDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CalculateTariffsOfferDTO& o)
{
    j = nlohmann::json::object();
    j["categoryId"] = o.m_CategoryId;
    j["price"] = o.m_Price;
    j["length"] = o.m_Length;
    j["width"] = o.m_Width;
    j["height"] = o.m_Height;
    j["weight"] = o.m_Weight;
    if(o.quantityIsSet())
        j["quantity"] = o.m_Quantity;
    
}

void from_json(const nlohmann::json& j, CalculateTariffsOfferDTO& o)
{
    j.at("categoryId").get_to(o.m_CategoryId);
    j.at("price").get_to(o.m_Price);
    j.at("length").get_to(o.m_Length);
    j.at("width").get_to(o.m_Width);
    j.at("height").get_to(o.m_Height);
    j.at("weight").get_to(o.m_Weight);
    if(j.find("quantity") != j.end())
    {
        j.at("quantity").get_to(o.m_Quantity);
        o.m_QuantityIsSet = true;
    } 
    
}

int64_t CalculateTariffsOfferDTO::getCategoryId() const
{
    return m_CategoryId;
}
void CalculateTariffsOfferDTO::setCategoryId(int64_t const value)
{
    m_CategoryId = value;
}
double CalculateTariffsOfferDTO::getPrice() const
{
    return m_Price;
}
void CalculateTariffsOfferDTO::setPrice(double const value)
{
    m_Price = value;
}
double CalculateTariffsOfferDTO::getLength() const
{
    return m_Length;
}
void CalculateTariffsOfferDTO::setLength(double const value)
{
    m_Length = value;
}
double CalculateTariffsOfferDTO::getWidth() const
{
    return m_Width;
}
void CalculateTariffsOfferDTO::setWidth(double const value)
{
    m_Width = value;
}
double CalculateTariffsOfferDTO::getHeight() const
{
    return m_Height;
}
void CalculateTariffsOfferDTO::setHeight(double const value)
{
    m_Height = value;
}
double CalculateTariffsOfferDTO::getWeight() const
{
    return m_Weight;
}
void CalculateTariffsOfferDTO::setWeight(double const value)
{
    m_Weight = value;
}
int32_t CalculateTariffsOfferDTO::getQuantity() const
{
    return m_Quantity;
}
void CalculateTariffsOfferDTO::setQuantity(int32_t const value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}
bool CalculateTariffsOfferDTO::quantityIsSet() const
{
    return m_QuantityIsSet;
}
void CalculateTariffsOfferDTO::unsetQuantity()
{
    m_QuantityIsSet = false;
}


} // namespace org::openapitools::server::model

