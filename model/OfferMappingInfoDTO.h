/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferMappingInfoDTO.h
 *
 * Информация о карточке товара.
 */

#ifndef OfferMappingInfoDTO_H_
#define OfferMappingInfoDTO_H_



#include "OfferMappingDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о карточке товара.
/// </summary>
class  OfferMappingInfoDTO 
{
public:
    OfferMappingInfoDTO() = default;
    explicit OfferMappingInfoDTO(boost::property_tree::ptree const& pt);
    virtual ~OfferMappingInfoDTO() = default;

    OfferMappingInfoDTO(const OfferMappingInfoDTO& other) = default; // copy constructor
    OfferMappingInfoDTO(OfferMappingInfoDTO&& other) noexcept = default; // move constructor

    OfferMappingInfoDTO& operator=(const OfferMappingInfoDTO& other) = default; // copy assignment
    OfferMappingInfoDTO& operator=(OfferMappingInfoDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OfferMappingInfoDTO members

    /// <summary>
    /// 
    /// </summary>
    OfferMappingDTO getMapping() const;
    void setMapping(OfferMappingDTO value);

    /// <summary>
    /// 
    /// </summary>
    OfferMappingDTO getAwaitingModerationMapping() const;
    void setAwaitingModerationMapping(OfferMappingDTO value);

    /// <summary>
    /// 
    /// </summary>
    OfferMappingDTO getRejectedMapping() const;
    void setRejectedMapping(OfferMappingDTO value);

protected:
    OfferMappingDTO m_Mapping;
    OfferMappingDTO m_AwaitingModerationMapping;
    OfferMappingDTO m_RejectedMapping;
};

std::vector<OfferMappingInfoDTO> createOfferMappingInfoDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OfferMappingInfoDTO>(const OfferMappingInfoDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OfferMappingInfoDTO fromPt<OfferMappingInfoDTO>(const boost::property_tree::ptree& pt) {
    OfferMappingInfoDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OfferMappingInfoDTO_H_ */
