/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderBuyerInfoDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderBuyerInfoDTO::OrderBuyerInfoDTO()
{
    m_Id = "";
    m_IdIsSet = false;
    m_LastName = "";
    m_LastNameIsSet = false;
    m_FirstName = "";
    m_FirstNameIsSet = false;
    m_MiddleName = "";
    m_MiddleNameIsSet = false;
    m_TypeIsSet = false;
    m_Phone = "";
    m_PhoneIsSet = false;
    
}

void OrderBuyerInfoDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderBuyerInfoDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderBuyerInfoDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderBuyerInfoDTO" : pathPrefix;

                            
    return success;
}

bool OrderBuyerInfoDTO::operator==(const OrderBuyerInfoDTO& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!lastNameIsSet() && !rhs.lastNameIsSet()) || (lastNameIsSet() && rhs.lastNameIsSet() && getLastName() == rhs.getLastName())) &&
    
    
    ((!firstNameIsSet() && !rhs.firstNameIsSet()) || (firstNameIsSet() && rhs.firstNameIsSet() && getFirstName() == rhs.getFirstName())) &&
    
    
    ((!middleNameIsSet() && !rhs.middleNameIsSet()) || (middleNameIsSet() && rhs.middleNameIsSet() && getMiddleName() == rhs.getMiddleName())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!phoneIsSet() && !rhs.phoneIsSet()) || (phoneIsSet() && rhs.phoneIsSet() && getPhone() == rhs.getPhone()))
    
    ;
}

bool OrderBuyerInfoDTO::operator!=(const OrderBuyerInfoDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderBuyerInfoDTO& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.lastNameIsSet())
        j["lastName"] = o.m_LastName;
    if(o.firstNameIsSet())
        j["firstName"] = o.m_FirstName;
    if(o.middleNameIsSet())
        j["middleName"] = o.m_MiddleName;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.phoneIsSet())
        j["phone"] = o.m_Phone;
    
}

void from_json(const nlohmann::json& j, OrderBuyerInfoDTO& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("lastName") != j.end())
    {
        j.at("lastName").get_to(o.m_LastName);
        o.m_LastNameIsSet = true;
    } 
    if(j.find("firstName") != j.end())
    {
        j.at("firstName").get_to(o.m_FirstName);
        o.m_FirstNameIsSet = true;
    } 
    if(j.find("middleName") != j.end())
    {
        j.at("middleName").get_to(o.m_MiddleName);
        o.m_MiddleNameIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("phone") != j.end())
    {
        j.at("phone").get_to(o.m_Phone);
        o.m_PhoneIsSet = true;
    } 
    
}

std::string OrderBuyerInfoDTO::getId() const
{
    return m_Id;
}
void OrderBuyerInfoDTO::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool OrderBuyerInfoDTO::idIsSet() const
{
    return m_IdIsSet;
}
void OrderBuyerInfoDTO::unsetId()
{
    m_IdIsSet = false;
}
std::string OrderBuyerInfoDTO::getLastName() const
{
    return m_LastName;
}
void OrderBuyerInfoDTO::setLastName(std::string const& value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}
bool OrderBuyerInfoDTO::lastNameIsSet() const
{
    return m_LastNameIsSet;
}
void OrderBuyerInfoDTO::unsetLastName()
{
    m_LastNameIsSet = false;
}
std::string OrderBuyerInfoDTO::getFirstName() const
{
    return m_FirstName;
}
void OrderBuyerInfoDTO::setFirstName(std::string const& value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}
bool OrderBuyerInfoDTO::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}
void OrderBuyerInfoDTO::unsetFirstName()
{
    m_FirstNameIsSet = false;
}
std::string OrderBuyerInfoDTO::getMiddleName() const
{
    return m_MiddleName;
}
void OrderBuyerInfoDTO::setMiddleName(std::string const& value)
{
    m_MiddleName = value;
    m_MiddleNameIsSet = true;
}
bool OrderBuyerInfoDTO::middleNameIsSet() const
{
    return m_MiddleNameIsSet;
}
void OrderBuyerInfoDTO::unsetMiddleName()
{
    m_MiddleNameIsSet = false;
}
org::openapitools::server::model::OrderBuyerType OrderBuyerInfoDTO::getType() const
{
    return m_Type;
}
void OrderBuyerInfoDTO::setType(org::openapitools::server::model::OrderBuyerType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool OrderBuyerInfoDTO::typeIsSet() const
{
    return m_TypeIsSet;
}
void OrderBuyerInfoDTO::unsetType()
{
    m_TypeIsSet = false;
}
std::string OrderBuyerInfoDTO::getPhone() const
{
    return m_Phone;
}
void OrderBuyerInfoDTO::setPhone(std::string const& value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}
bool OrderBuyerInfoDTO::phoneIsSet() const
{
    return m_PhoneIsSet;
}
void OrderBuyerInfoDTO::unsetPhone()
{
    m_PhoneIsSet = false;
}


} // namespace org::openapitools::server::model

