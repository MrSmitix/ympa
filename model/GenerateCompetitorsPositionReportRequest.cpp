/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GenerateCompetitorsPositionReportRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GenerateCompetitorsPositionReportRequest::GenerateCompetitorsPositionReportRequest()
{
    m_BusinessId = 0L;
    m_CategoryId = 0L;
    
}

void GenerateCompetitorsPositionReportRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GenerateCompetitorsPositionReportRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GenerateCompetitorsPositionReportRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GenerateCompetitorsPositionReportRequest" : pathPrefix;

                    
    return success;
}

bool GenerateCompetitorsPositionReportRequest::operator==(const GenerateCompetitorsPositionReportRequest& rhs) const
{
    return
    
    
    (getBusinessId() == rhs.getBusinessId())
     &&
    
    (getCategoryId() == rhs.getCategoryId())
     &&
    
    (getDateFrom() == rhs.getDateFrom())
     &&
    
    (getDateTo() == rhs.getDateTo())
    
    
    ;
}

bool GenerateCompetitorsPositionReportRequest::operator!=(const GenerateCompetitorsPositionReportRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GenerateCompetitorsPositionReportRequest& o)
{
    j = nlohmann::json::object();
    j["businessId"] = o.m_BusinessId;
    j["categoryId"] = o.m_CategoryId;
    j["dateFrom"] = o.m_DateFrom;
    j["dateTo"] = o.m_DateTo;
    
}

void from_json(const nlohmann::json& j, GenerateCompetitorsPositionReportRequest& o)
{
    j.at("businessId").get_to(o.m_BusinessId);
    j.at("categoryId").get_to(o.m_CategoryId);
    j.at("dateFrom").get_to(o.m_DateFrom);
    j.at("dateTo").get_to(o.m_DateTo);
    
}

int64_t GenerateCompetitorsPositionReportRequest::getBusinessId() const
{
    return m_BusinessId;
}
void GenerateCompetitorsPositionReportRequest::setBusinessId(int64_t const value)
{
    m_BusinessId = value;
}
int64_t GenerateCompetitorsPositionReportRequest::getCategoryId() const
{
    return m_CategoryId;
}
void GenerateCompetitorsPositionReportRequest::setCategoryId(int64_t const value)
{
    m_CategoryId = value;
}
std::string GenerateCompetitorsPositionReportRequest::getDateFrom() const
{
    return m_DateFrom;
}
void GenerateCompetitorsPositionReportRequest::setDateFrom(std::string const& value)
{
    m_DateFrom = value;
}
std::string GenerateCompetitorsPositionReportRequest::getDateTo() const
{
    return m_DateTo;
}
void GenerateCompetitorsPositionReportRequest::setDateTo(std::string const& value)
{
    m_DateTo = value;
}


} // namespace org::openapitools::server::model

