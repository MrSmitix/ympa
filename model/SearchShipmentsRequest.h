/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SearchShipmentsRequest.h
 *
 * Запрос информации об отгрузках.
 */

#ifndef SearchShipmentsRequest_H_
#define SearchShipmentsRequest_H_



#include "Set.h"
#include "ShipmentStatusType.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Запрос информации об отгрузках.
/// </summary>
class  SearchShipmentsRequest 
{
public:
    SearchShipmentsRequest() = default;
    explicit SearchShipmentsRequest(boost::property_tree::ptree const& pt);
    virtual ~SearchShipmentsRequest() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// SearchShipmentsRequest members

    /// <summary>
    /// Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getDateFrom() const;
    void setDateFrom(std::string value);

    /// <summary>
    /// Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getDateTo() const;
    void setDateTo(std::string value);

    /// <summary>
    /// Список статусов отгрузок.
    /// </summary>
    Set<std::shared_ptr<ShipmentStatusType>> getStatuses() const;
    void setStatuses(Set<std::shared_ptr<ShipmentStatusType>> value);

    /// <summary>
    /// Список идентификаторов заказов из отгрузок.
    /// </summary>
    Set<int64_t> getOrderIds() const;
    void setOrderIds(Set<int64_t> value);

    /// <summary>
    /// Возвращать ли отмененные заказы.  Значение по умолчанию — &#x60;true&#x60;. Если возвращать отмененные заказы не нужно, передайте значение &#x60;false&#x60;. 
    /// </summary>
    bool isCancelledOrders() const;
    void setCancelledOrders(bool value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_DateFrom = "";
    std::string m_DateTo = "";
    Set<std::shared_ptr<ShipmentStatusType>> m_Statuses;
    Set<int64_t> m_OrderIds;
    bool m_CancelledOrders = true;
};

std::vector<SearchShipmentsRequest> createSearchShipmentsRequestVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* SearchShipmentsRequest_H_ */
