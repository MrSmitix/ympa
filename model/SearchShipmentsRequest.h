/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SearchShipmentsRequest.h
 *
 * Запрос информации об отгрузках.
 */

#ifndef SearchShipmentsRequest_H_
#define SearchShipmentsRequest_H_



#include "ShipmentStatusType.h"
#include <string>
#include <set>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Запрос информации об отгрузках.
/// </summary>
class  SearchShipmentsRequest 
{
public:
    SearchShipmentsRequest() = default;
    explicit SearchShipmentsRequest(boost::property_tree::ptree const& pt);
    virtual ~SearchShipmentsRequest() = default;

    SearchShipmentsRequest(const SearchShipmentsRequest& other) = default; // copy constructor
    SearchShipmentsRequest(SearchShipmentsRequest&& other) noexcept = default; // move constructor

    SearchShipmentsRequest& operator=(const SearchShipmentsRequest& other) = default; // copy assignment
    SearchShipmentsRequest& operator=(SearchShipmentsRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// SearchShipmentsRequest members

    /// <summary>
    /// Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getDateFrom() const;
    void setDateFrom(std::string value);

    /// <summary>
    /// Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    std::string getDateTo() const;
    void setDateTo(std::string value);

    /// <summary>
    /// Список статусов отгрузок.
    /// </summary>
    std::set<ShipmentStatusType> getStatuses() const;
    void setStatuses(std::set<ShipmentStatusType> value);

    /// <summary>
    /// Список идентификаторов заказов из отгрузок.
    /// </summary>
    std::set<int64_t> getOrderIds() const;
    void setOrderIds(std::set<int64_t> value);

    /// <summary>
    /// Возвращать ли отмененные заказы.  Значение по умолчанию — &#x60;true&#x60;. Если возвращать отмененные заказы не нужно, передайте значение &#x60;false&#x60;. 
    /// </summary>
    bool isCancelledOrders() const;
    void setCancelledOrders(bool value);

protected:
    std::string m_DateFrom = "";
    std::string m_DateTo = "";
    std::set<ShipmentStatusType> m_Statuses;
    std::set<int64_t> m_OrderIds;
    bool m_CancelledOrders = true;
};

std::vector<SearchShipmentsRequest> createSearchShipmentsRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<SearchShipmentsRequest>(const SearchShipmentsRequest& val) {
    return val.toPropertyTree();
}

template<>
inline SearchShipmentsRequest fromPt<SearchShipmentsRequest>(const boost::property_tree::ptree& pt) {
    SearchShipmentsRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* SearchShipmentsRequest_H_ */
