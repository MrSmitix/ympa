/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ParameterValueConstraintsDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ParameterValueConstraintsDTO::ParameterValueConstraintsDTO()
{
    m_MinValue = 0.0;
    m_MinValueIsSet = false;
    m_MaxValue = 0.0;
    m_MaxValueIsSet = false;
    m_MaxLength = 0;
    m_MaxLengthIsSet = false;
    
}

void ParameterValueConstraintsDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ParameterValueConstraintsDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ParameterValueConstraintsDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ParameterValueConstraintsDTO" : pathPrefix;

                
    return success;
}

bool ParameterValueConstraintsDTO::operator==(const ParameterValueConstraintsDTO& rhs) const
{
    return
    
    
    
    ((!minValueIsSet() && !rhs.minValueIsSet()) || (minValueIsSet() && rhs.minValueIsSet() && getMinValue() == rhs.getMinValue())) &&
    
    
    ((!maxValueIsSet() && !rhs.maxValueIsSet()) || (maxValueIsSet() && rhs.maxValueIsSet() && getMaxValue() == rhs.getMaxValue())) &&
    
    
    ((!maxLengthIsSet() && !rhs.maxLengthIsSet()) || (maxLengthIsSet() && rhs.maxLengthIsSet() && getMaxLength() == rhs.getMaxLength()))
    
    ;
}

bool ParameterValueConstraintsDTO::operator!=(const ParameterValueConstraintsDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ParameterValueConstraintsDTO& o)
{
    j = nlohmann::json::object();
    if(o.minValueIsSet())
        j["minValue"] = o.m_MinValue;
    if(o.maxValueIsSet())
        j["maxValue"] = o.m_MaxValue;
    if(o.maxLengthIsSet())
        j["maxLength"] = o.m_MaxLength;
    
}

void from_json(const nlohmann::json& j, ParameterValueConstraintsDTO& o)
{
    if(j.find("minValue") != j.end())
    {
        j.at("minValue").get_to(o.m_MinValue);
        o.m_MinValueIsSet = true;
    } 
    if(j.find("maxValue") != j.end())
    {
        j.at("maxValue").get_to(o.m_MaxValue);
        o.m_MaxValueIsSet = true;
    } 
    if(j.find("maxLength") != j.end())
    {
        j.at("maxLength").get_to(o.m_MaxLength);
        o.m_MaxLengthIsSet = true;
    } 
    
}

double ParameterValueConstraintsDTO::getMinValue() const
{
    return m_MinValue;
}
void ParameterValueConstraintsDTO::setMinValue(double const value)
{
    m_MinValue = value;
    m_MinValueIsSet = true;
}
bool ParameterValueConstraintsDTO::minValueIsSet() const
{
    return m_MinValueIsSet;
}
void ParameterValueConstraintsDTO::unsetMinValue()
{
    m_MinValueIsSet = false;
}
double ParameterValueConstraintsDTO::getMaxValue() const
{
    return m_MaxValue;
}
void ParameterValueConstraintsDTO::setMaxValue(double const value)
{
    m_MaxValue = value;
    m_MaxValueIsSet = true;
}
bool ParameterValueConstraintsDTO::maxValueIsSet() const
{
    return m_MaxValueIsSet;
}
void ParameterValueConstraintsDTO::unsetMaxValue()
{
    m_MaxValueIsSet = false;
}
int32_t ParameterValueConstraintsDTO::getMaxLength() const
{
    return m_MaxLength;
}
void ParameterValueConstraintsDTO::setMaxLength(int32_t const value)
{
    m_MaxLength = value;
    m_MaxLengthIsSet = true;
}
bool ParameterValueConstraintsDTO::maxLengthIsSet() const
{
    return m_MaxLengthIsSet;
}
void ParameterValueConstraintsDTO::unsetMaxLength()
{
    m_MaxLengthIsSet = false;
}


} // namespace org::openapitools::server::model

