/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OfferMappingDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OfferMappingDTO::OfferMappingDTO()
{
    m_MarketSku = 0L;
    m_MarketSkuIsSet = false;
    m_ModelId = 0L;
    m_ModelIdIsSet = false;
    m_CategoryId = 0L;
    m_CategoryIdIsSet = false;
    
}

void OfferMappingDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OfferMappingDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OfferMappingDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OfferMappingDTO" : pathPrefix;

                
    return success;
}

bool OfferMappingDTO::operator==(const OfferMappingDTO& rhs) const
{
    return
    
    
    
    ((!marketSkuIsSet() && !rhs.marketSkuIsSet()) || (marketSkuIsSet() && rhs.marketSkuIsSet() && getMarketSku() == rhs.getMarketSku())) &&
    
    
    ((!modelIdIsSet() && !rhs.modelIdIsSet()) || (modelIdIsSet() && rhs.modelIdIsSet() && getModelId() == rhs.getModelId())) &&
    
    
    ((!categoryIdIsSet() && !rhs.categoryIdIsSet()) || (categoryIdIsSet() && rhs.categoryIdIsSet() && getCategoryId() == rhs.getCategoryId()))
    
    ;
}

bool OfferMappingDTO::operator!=(const OfferMappingDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OfferMappingDTO& o)
{
    j = nlohmann::json::object();
    if(o.marketSkuIsSet())
        j["marketSku"] = o.m_MarketSku;
    if(o.modelIdIsSet())
        j["modelId"] = o.m_ModelId;
    if(o.categoryIdIsSet())
        j["categoryId"] = o.m_CategoryId;
    
}

void from_json(const nlohmann::json& j, OfferMappingDTO& o)
{
    if(j.find("marketSku") != j.end())
    {
        j.at("marketSku").get_to(o.m_MarketSku);
        o.m_MarketSkuIsSet = true;
    } 
    if(j.find("modelId") != j.end())
    {
        j.at("modelId").get_to(o.m_ModelId);
        o.m_ModelIdIsSet = true;
    } 
    if(j.find("categoryId") != j.end())
    {
        j.at("categoryId").get_to(o.m_CategoryId);
        o.m_CategoryIdIsSet = true;
    } 
    
}

int64_t OfferMappingDTO::getMarketSku() const
{
    return m_MarketSku;
}
void OfferMappingDTO::setMarketSku(int64_t const value)
{
    m_MarketSku = value;
    m_MarketSkuIsSet = true;
}
bool OfferMappingDTO::marketSkuIsSet() const
{
    return m_MarketSkuIsSet;
}
void OfferMappingDTO::unsetMarketSku()
{
    m_MarketSkuIsSet = false;
}
int64_t OfferMappingDTO::getModelId() const
{
    return m_ModelId;
}
void OfferMappingDTO::setModelId(int64_t const value)
{
    m_ModelId = value;
    m_ModelIdIsSet = true;
}
bool OfferMappingDTO::modelIdIsSet() const
{
    return m_ModelIdIsSet;
}
void OfferMappingDTO::unsetModelId()
{
    m_ModelIdIsSet = false;
}
int64_t OfferMappingDTO::getCategoryId() const
{
    return m_CategoryId;
}
void OfferMappingDTO::setCategoryId(int64_t const value)
{
    m_CategoryId = value;
    m_CategoryIdIsSet = true;
}
bool OfferMappingDTO::categoryIdIsSet() const
{
    return m_CategoryIdIsSet;
}
void OfferMappingDTO::unsetCategoryId()
{
    m_CategoryIdIsSet = false;
}


} // namespace org::openapitools::server::model

