/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CategoryParameterDTO.h
 *
 * Характеристика товара.
 */

#ifndef CategoryParameterDTO_H_
#define CategoryParameterDTO_H_


#include "ValueRestrictionDTO.h"
#include "OfferCardRecommendationType.h"
#include "CategoryParameterUnitDTO.h"
#include "ParameterValueOptionDTO.h"
#include "ParameterType.h"
#include <string>
#include "ParameterValueConstraintsDTO.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Характеристика товара.
/// </summary>
class  CategoryParameterDTO
{
public:
    CategoryParameterDTO();
    virtual ~CategoryParameterDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CategoryParameterDTO& rhs) const;
    bool operator!=(const CategoryParameterDTO& rhs) const;

    /////////////////////////////////////////////
    /// CategoryParameterDTO members

    /// <summary>
    /// Идентификатор характеристики.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    /// <summary>
    /// Название характеристики.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ParameterType getType() const;
    void setType(org::openapitools::server::model::ParameterType const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CategoryParameterUnitDTO getUnit() const;
    void setUnit(org::openapitools::server::model::CategoryParameterUnitDTO const& value);
    bool unitIsSet() const;
    void unsetUnit();
    /// <summary>
    /// Описание характеристики.
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
    /// </summary>
    std::vector<org::openapitools::server::model::OfferCardRecommendationType> getRecommendationTypes() const;
    void setRecommendationTypes(std::vector<org::openapitools::server::model::OfferCardRecommendationType> const& value);
    bool recommendationTypesIsSet() const;
    void unsetRecommendationTypes();
    /// <summary>
    /// Обязательность характеристики.
    /// </summary>
    bool isRequired() const;
    void setRequired(bool const value);
    /// <summary>
    /// Используется ли характеристика в фильтре.
    /// </summary>
    bool isFiltering() const;
    void setFiltering(bool const value);
    /// <summary>
    /// Является ли характеристика особенностью варианта.
    /// </summary>
    bool isDistinctive() const;
    void setDistinctive(bool const value);
    /// <summary>
    /// Можно ли передать сразу несколько значений.
    /// </summary>
    bool isMultivalue() const;
    void setMultivalue(bool const value);
    /// <summary>
    /// Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;.
    /// </summary>
    bool isAllowCustomValues() const;
    void setAllowCustomValues(bool const value);
    /// <summary>
    /// Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;.
    /// </summary>
    std::vector<org::openapitools::server::model::ParameterValueOptionDTO> getValues() const;
    void setValues(std::vector<org::openapitools::server::model::ParameterValueOptionDTO> const& value);
    bool valuesIsSet() const;
    void unsetValues();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ParameterValueConstraintsDTO getConstraints() const;
    void setConstraints(org::openapitools::server::model::ParameterValueConstraintsDTO const& value);
    bool constraintsIsSet() const;
    void unsetConstraints();
    /// <summary>
    /// Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;.
    /// </summary>
    std::vector<org::openapitools::server::model::ValueRestrictionDTO> getValueRestrictions() const;
    void setValueRestrictions(std::vector<org::openapitools::server::model::ValueRestrictionDTO> const& value);
    bool valueRestrictionsIsSet() const;
    void unsetValueRestrictions();

    friend  void to_json(nlohmann::json& j, const CategoryParameterDTO& o);
    friend  void from_json(const nlohmann::json& j, CategoryParameterDTO& o);
protected:
    int64_t m_Id;

    std::string m_Name;
    bool m_NameIsSet;
    org::openapitools::server::model::ParameterType m_Type;

    org::openapitools::server::model::CategoryParameterUnitDTO m_Unit;
    bool m_UnitIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    std::vector<org::openapitools::server::model::OfferCardRecommendationType> m_RecommendationTypes;
    bool m_RecommendationTypesIsSet;
    bool m_Required;

    bool m_Filtering;

    bool m_Distinctive;

    bool m_Multivalue;

    bool m_AllowCustomValues;

    std::vector<org::openapitools::server::model::ParameterValueOptionDTO> m_Values;
    bool m_ValuesIsSet;
    org::openapitools::server::model::ParameterValueConstraintsDTO m_Constraints;
    bool m_ConstraintsIsSet;
    std::vector<org::openapitools::server::model::ValueRestrictionDTO> m_ValueRestrictions;
    bool m_ValueRestrictionsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CategoryParameterDTO_H_ */
