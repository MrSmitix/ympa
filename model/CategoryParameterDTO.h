/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CategoryParameterDTO.h
 *
 * Характеристика товара.
 */

#ifndef CategoryParameterDTO_H_
#define CategoryParameterDTO_H_



#include "ValueRestrictionDTO.h"
#include "OfferCardRecommendationType.h"
#include "CategoryParameterUnitDTO.h"
#include "ParameterValueOptionDTO.h"
#include "ParameterType.h"
#include <string>
#include "ParameterValueConstraintsDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Характеристика товара.
/// </summary>
class  CategoryParameterDTO 
{
public:
    CategoryParameterDTO() = default;
    explicit CategoryParameterDTO(boost::property_tree::ptree const& pt);
    virtual ~CategoryParameterDTO() = default;

    CategoryParameterDTO(const CategoryParameterDTO& other) = default; // copy constructor
    CategoryParameterDTO(CategoryParameterDTO&& other) noexcept = default; // move constructor

    CategoryParameterDTO& operator=(const CategoryParameterDTO& other) = default; // copy assignment
    CategoryParameterDTO& operator=(CategoryParameterDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CategoryParameterDTO members

    /// <summary>
    /// Идентификатор характеристики.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Название характеристики.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ParameterType getType() const;
    void setType(ParameterType value);

    /// <summary>
    /// 
    /// </summary>
    CategoryParameterUnitDTO getUnit() const;
    void setUnit(CategoryParameterUnitDTO value);

    /// <summary>
    /// Описание характеристики.
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
    /// </summary>
    std::vector<OfferCardRecommendationType> getRecommendationTypes() const;
    void setRecommendationTypes(std::vector<OfferCardRecommendationType> value);

    /// <summary>
    /// Обязательность характеристики.
    /// </summary>
    bool isRequired() const;
    void setRequired(bool value);

    /// <summary>
    /// Используется ли характеристика в фильтре.
    /// </summary>
    bool isFiltering() const;
    void setFiltering(bool value);

    /// <summary>
    /// Является ли характеристика особенностью варианта.
    /// </summary>
    bool isDistinctive() const;
    void setDistinctive(bool value);

    /// <summary>
    /// Можно ли передать сразу несколько значений.
    /// </summary>
    bool isMultivalue() const;
    void setMultivalue(bool value);

    /// <summary>
    /// Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;.
    /// </summary>
    bool isAllowCustomValues() const;
    void setAllowCustomValues(bool value);

    /// <summary>
    /// Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;.
    /// </summary>
    std::vector<ParameterValueOptionDTO> getValues() const;
    void setValues(std::vector<ParameterValueOptionDTO> value);

    /// <summary>
    /// 
    /// </summary>
    ParameterValueConstraintsDTO getConstraints() const;
    void setConstraints(ParameterValueConstraintsDTO value);

    /// <summary>
    /// Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;.
    /// </summary>
    std::vector<ValueRestrictionDTO> getValueRestrictions() const;
    void setValueRestrictions(std::vector<ValueRestrictionDTO> value);

protected:
    int64_t m_Id = 0L;
    std::string m_Name = "";
    ParameterType m_Type = ParameterType{};
    CategoryParameterUnitDTO m_Unit;
    std::string m_Description = "";
    std::vector<OfferCardRecommendationType> m_RecommendationTypes;
    bool m_Required = false;
    bool m_Filtering = false;
    bool m_Distinctive = false;
    bool m_Multivalue = false;
    bool m_AllowCustomValues = false;
    std::vector<ParameterValueOptionDTO> m_Values;
    ParameterValueConstraintsDTO m_Constraints;
    std::vector<ValueRestrictionDTO> m_ValueRestrictions;
};

std::vector<CategoryParameterDTO> createCategoryParameterDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CategoryParameterDTO>(const CategoryParameterDTO& val) {
    return val.toPropertyTree();
}

template<>
inline CategoryParameterDTO fromPt<CategoryParameterDTO>(const boost::property_tree::ptree& pt) {
    CategoryParameterDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CategoryParameterDTO_H_ */
