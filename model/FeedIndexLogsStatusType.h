/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FeedIndexLogsStatusType.h
 *
 * Статус индексации прайс-листа и проверки на соответствие техническим требованиям.  Возможные значения:  * &#x60;ERROR&#x60; — произошли ошибки. * &#x60;OK&#x60; — обработан без ошибок. * &#x60;WARNING&#x60; — наблюдались некритичные проблемы. 
 */

#ifndef FeedIndexLogsStatusType_H_
#define FeedIndexLogsStatusType_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Статус индексации прайс-листа и проверки на соответствие техническим требованиям.  Возможные значения:  * &#x60;ERROR&#x60; — произошли ошибки. * &#x60;OK&#x60; — обработан без ошибок. * &#x60;WARNING&#x60; — наблюдались некритичные проблемы. 
/// </summary>
class  FeedIndexLogsStatusType
{
public:
    FeedIndexLogsStatusType();
    virtual ~FeedIndexLogsStatusType() = default;

    enum class eFeedIndexLogsStatusType {
    // To have a valid default value.
    // Avoiding name clashes with user defined
    // enum values
    INVALID_VALUE_OPENAPI_GENERATED = 0,
    ERROR, 
    OK, 
    WARNING
    };

    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FeedIndexLogsStatusType& rhs) const;
    bool operator!=(const FeedIndexLogsStatusType& rhs) const;

    /////////////////////////////////////////////
    /// FeedIndexLogsStatusType members

    FeedIndexLogsStatusType::eFeedIndexLogsStatusType getValue() const;
    void setValue(FeedIndexLogsStatusType::eFeedIndexLogsStatusType value);
    
    friend  void to_json(nlohmann::json& j, const FeedIndexLogsStatusType& o);
    friend  void from_json(const nlohmann::json& j, FeedIndexLogsStatusType& o);
protected:
    FeedIndexLogsStatusType::eFeedIndexLogsStatusType m_value = FeedIndexLogsStatusType::eFeedIndexLogsStatusType::INVALID_VALUE_OPENAPI_GENERATED;
};

} // namespace org::openapitools::server::model

#endif /* FeedIndexLogsStatusType_H_ */
