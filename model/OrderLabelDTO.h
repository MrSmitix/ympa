/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderLabelDTO.h
 *
 * Данные для печати ярлыка.
 */

#ifndef OrderLabelDTO_H_
#define OrderLabelDTO_H_



#include <string>
#include <vector>
#include "ParcelBoxLabelDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Данные для печати ярлыка.
/// </summary>
class  OrderLabelDTO 
{
public:
    OrderLabelDTO() = default;
    explicit OrderLabelDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderLabelDTO() = default;

    OrderLabelDTO(const OrderLabelDTO& other) = default; // copy constructor
    OrderLabelDTO(OrderLabelDTO&& other) noexcept = default; // move constructor

    OrderLabelDTO& operator=(const OrderLabelDTO& other) = default; // copy assignment
    OrderLabelDTO& operator=(OrderLabelDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrderLabelDTO members

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getOrderId() const;
    void setOrderId(int64_t value);

    /// <summary>
    /// Количество коробок в заказе.
    /// </summary>
    int32_t getPlacesNumber() const;
    void setPlacesNumber(int32_t value);

    /// <summary>
    /// URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md). 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

    /// <summary>
    /// Информация на ярлыке.
    /// </summary>
    std::vector<ParcelBoxLabelDTO> getParcelBoxLabels() const;
    void setParcelBoxLabels(std::vector<ParcelBoxLabelDTO> value);

protected:
    int64_t m_OrderId = 0L;
    int32_t m_PlacesNumber = 0;
    std::string m_Url = "";
    std::vector<ParcelBoxLabelDTO> m_ParcelBoxLabels;
};

std::vector<OrderLabelDTO> createOrderLabelDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderLabelDTO>(const OrderLabelDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrderLabelDTO fromPt<OrderLabelDTO>(const boost::property_tree::ptree& pt) {
    OrderLabelDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderLabelDTO_H_ */
