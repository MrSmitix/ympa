/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ParcelBoxLabelDTO.h
 *
 * Информация о ярлыке для коробки.
 */

#ifndef ParcelBoxLabelDTO_H_
#define ParcelBoxLabelDTO_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о ярлыке для коробки.
/// </summary>
class  ParcelBoxLabelDTO
{
public:
    ParcelBoxLabelDTO();
    virtual ~ParcelBoxLabelDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ParcelBoxLabelDTO& rhs) const;
    bool operator!=(const ParcelBoxLabelDTO& rhs) const;

    /////////////////////////////////////////////
    /// ParcelBoxLabelDTO members

    /// <summary>
    /// Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string const& value);
    /// <summary>
    /// Юридическое название магазина.
    /// </summary>
    std::string getSupplierName() const;
    void setSupplierName(std::string const& value);
    /// <summary>
    /// Юридическое название службы доставки.
    /// </summary>
    std::string getDeliveryServiceName() const;
    void setDeliveryServiceName(std::string const& value);
    /// <summary>
    /// Идентификатор заказа в системе Маркета.
    /// </summary>
    int64_t getOrderId() const;
    void setOrderId(int64_t const value);
    /// <summary>
    /// Идентификатор заказа в информационной системе магазина.  Совпадает с &#x60;orderId&#x60;, если Маркету неизвестен номер заказа в системе магазина. 
    /// </summary>
    std::string getOrderNum() const;
    void setOrderNum(std::string const& value);
    /// <summary>
    /// Фамилия и инициалы получателя заказа.
    /// </summary>
    std::string getRecipientName() const;
    void setRecipientName(std::string const& value);
    /// <summary>
    /// Идентификатор коробки.
    /// </summary>
    int64_t getBoxId() const;
    void setBoxId(int64_t const value);
    /// <summary>
    /// Идентификатор коробки в информационной системе магазина.  Возвращается в формате: &#x60;номер заказа на Маркете-номер коробки&#x60;. Например, &#x60;7206821‑1&#x60;, &#x60;7206821‑2&#x60; и т. д. 
    /// </summary>
    std::string getFulfilmentId() const;
    void setFulfilmentId(std::string const& value);
    /// <summary>
    /// Номер коробки в заказе. Возвращается в формате: &#x60;номер места/общее количество мест&#x60;. 
    /// </summary>
    std::string getPlace() const;
    void setPlace(std::string const& value);
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: &#x60;weight кг&#x60;. 
    /// </summary>
    std::string getWeight() const;
    void setWeight(std::string const& value);
    /// <summary>
    /// Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
    /// </summary>
    std::string getDeliveryServiceId() const;
    void setDeliveryServiceId(std::string const& value);
    /// <summary>
    /// Адрес получателя.
    /// </summary>
    std::string getDeliveryAddress() const;
    void setDeliveryAddress(std::string const& value);
    bool deliveryAddressIsSet() const;
    void unsetDeliveryAddress();
    /// <summary>
    /// Дата отгрузки в формате &#x60;dd.MM.yyyy&#x60;.
    /// </summary>
    std::string getShipmentDate() const;
    void setShipmentDate(std::string const& value);
    bool shipmentDateIsSet() const;
    void unsetShipmentDate();

    friend  void to_json(nlohmann::json& j, const ParcelBoxLabelDTO& o);
    friend  void from_json(const nlohmann::json& j, ParcelBoxLabelDTO& o);
protected:
    std::string m_Url;

    std::string m_SupplierName;

    std::string m_DeliveryServiceName;

    int64_t m_OrderId;

    std::string m_OrderNum;

    std::string m_RecipientName;

    int64_t m_BoxId;

    std::string m_FulfilmentId;

    std::string m_Place;

    std::string m_Weight;

    std::string m_DeliveryServiceId;

    std::string m_DeliveryAddress;
    bool m_DeliveryAddressIsSet;
    std::string m_ShipmentDate;
    bool m_ShipmentDateIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ParcelBoxLabelDTO_H_ */
