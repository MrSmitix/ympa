/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ParcelBoxLabelDTO.h
 *
 * Информация о ярлыке для коробки.
 */

#ifndef ParcelBoxLabelDTO_H_
#define ParcelBoxLabelDTO_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о ярлыке для коробки.
/// </summary>
class  ParcelBoxLabelDTO 
{
public:
    ParcelBoxLabelDTO() = default;
    explicit ParcelBoxLabelDTO(boost::property_tree::ptree const& pt);
    virtual ~ParcelBoxLabelDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// ParcelBoxLabelDTO members

    /// <summary>
    /// Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

    /// <summary>
    /// Юридическое название магазина.
    /// </summary>
    std::string getSupplierName() const;
    void setSupplierName(std::string value);

    /// <summary>
    /// Юридическое название службы доставки.
    /// </summary>
    std::string getDeliveryServiceName() const;
    void setDeliveryServiceName(std::string value);

    /// <summary>
    /// Идентификатор заказа в системе Маркета.
    /// </summary>
    int64_t getOrderId() const;
    void setOrderId(int64_t value);

    /// <summary>
    /// Идентификатор заказа в информационной системе магазина.  Совпадает с &#x60;orderId&#x60;, если Маркету неизвестен номер заказа в системе магазина. 
    /// </summary>
    std::string getOrderNum() const;
    void setOrderNum(std::string value);

    /// <summary>
    /// Фамилия и инициалы получателя заказа.
    /// </summary>
    std::string getRecipientName() const;
    void setRecipientName(std::string value);

    /// <summary>
    /// Идентификатор коробки.
    /// </summary>
    int64_t getBoxId() const;
    void setBoxId(int64_t value);

    /// <summary>
    /// Идентификатор коробки в информационной системе магазина.  Возвращается в формате: &#x60;номер заказа на Маркете-номер коробки&#x60;. Например, &#x60;7206821‑1&#x60;, &#x60;7206821‑2&#x60; и т. д. 
    /// </summary>
    std::string getFulfilmentId() const;
    void setFulfilmentId(std::string value);

    /// <summary>
    /// Номер коробки в заказе. Возвращается в формате: &#x60;номер места/общее количество мест&#x60;. 
    /// </summary>
    std::string getPlace() const;
    void setPlace(std::string value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: &#x60;weight кг&#x60;. 
    /// </summary>
    std::string getWeight() const;
    void setWeight(std::string value);

    /// <summary>
    /// Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
    /// </summary>
    std::string getDeliveryServiceId() const;
    void setDeliveryServiceId(std::string value);

    /// <summary>
    /// Адрес получателя.
    /// </summary>
    std::string getDeliveryAddress() const;
    void setDeliveryAddress(std::string value);

    /// <summary>
    /// Дата отгрузки в формате &#x60;dd.MM.yyyy&#x60;.
    /// </summary>
    std::string getShipmentDate() const;
    void setShipmentDate(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Url = "";
    std::string m_SupplierName = "";
    std::string m_DeliveryServiceName = "";
    int64_t m_OrderId = 0L;
    std::string m_OrderNum = "";
    std::string m_RecipientName = "";
    int64_t m_BoxId = 0L;
    std::string m_FulfilmentId = "";
    std::string m_Place = "";
    std::string m_Weight = "";
    std::string m_DeliveryServiceId = "";
    std::string m_DeliveryAddress = "";
    std::string m_ShipmentDate = "";
};

std::vector<ParcelBoxLabelDTO> createParcelBoxLabelDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* ParcelBoxLabelDTO_H_ */
