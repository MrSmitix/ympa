/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BriefOrderItemDTO.h
 *
 * Информация о маркированном товаре.
 */

#ifndef BriefOrderItemDTO_H_
#define BriefOrderItemDTO_H_


#include <string>
#include "OrderItemInstanceDTO.h"
#include <vector>
#include "OrderVatType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о маркированном товаре.
/// </summary>
class  BriefOrderItemDTO
{
public:
    BriefOrderItemDTO();
    virtual ~BriefOrderItemDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const BriefOrderItemDTO& rhs) const;
    bool operator!=(const BriefOrderItemDTO& rhs) const;

    /////////////////////////////////////////////
    /// BriefOrderItemDTO members

    /// <summary>
    /// Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderVatType getVat() const;
    void setVat(org::openapitools::server::model::OrderVatType const& value);
    bool vatIsSet() const;
    void unsetVat();
    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int32_t getCount() const;
    void setCount(int32_t const value);
    bool countIsSet() const;
    void unsetCount();
    /// <summary>
    /// Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка. 
    /// </summary>
    double getPrice() const;
    void setPrice(double const value);
    bool priceIsSet() const;
    void unsetPrice();
    /// <summary>
    /// Название товара.
    /// </summary>
    std::string getOfferName() const;
    void setOfferName(std::string const& value);
    bool offerNameIsSet() const;
    void unsetOfferName();
    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getOfferId() const;
    void setOfferId(std::string const& value);
    bool offerIdIsSet() const;
    void unsetOfferId();
    /// <summary>
    /// Переданные вами коды маркировки.
    /// </summary>
    std::vector<org::openapitools::server::model::OrderItemInstanceDTO> getInstances() const;
    void setInstances(std::vector<org::openapitools::server::model::OrderItemInstanceDTO> const& value);
    bool instancesIsSet() const;
    void unsetInstances();

    friend  void to_json(nlohmann::json& j, const BriefOrderItemDTO& o);
    friend  void from_json(const nlohmann::json& j, BriefOrderItemDTO& o);
protected:
    int64_t m_Id;
    bool m_IdIsSet;
    org::openapitools::server::model::OrderVatType m_Vat;
    bool m_VatIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    double m_Price;
    bool m_PriceIsSet;
    std::string m_OfferName;
    bool m_OfferNameIsSet;
    std::string m_OfferId;
    bool m_OfferIdIsSet;
    std::vector<org::openapitools::server::model::OrderItemInstanceDTO> m_Instances;
    bool m_InstancesIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* BriefOrderItemDTO_H_ */
