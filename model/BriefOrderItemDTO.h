/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BriefOrderItemDTO.h
 *
 * Информация о маркированном товаре.
 */

#ifndef BriefOrderItemDTO_H_
#define BriefOrderItemDTO_H_



#include <string>
#include "OrderItemInstanceDTO.h"
#include <vector>
#include "OrderVatType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о маркированном товаре.
/// </summary>
class  BriefOrderItemDTO 
{
public:
    BriefOrderItemDTO() = default;
    explicit BriefOrderItemDTO(boost::property_tree::ptree const& pt);
    virtual ~BriefOrderItemDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// BriefOrderItemDTO members

    /// <summary>
    /// Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderVatType> getVat() const;
    void setVat(std::shared_ptr<OrderVatType> value);

    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int32_t getCount() const;
    void setCount(int32_t value);

    /// <summary>
    /// Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка. 
    /// </summary>
    double getPrice() const;
    void setPrice(double value);

    /// <summary>
    /// Название товара.
    /// </summary>
    std::string getOfferName() const;
    void setOfferName(std::string value);

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getOfferId() const;
    void setOfferId(std::string value);

    /// <summary>
    /// Переданные вами коды маркировки.
    /// </summary>
    std::vector<std::shared_ptr<OrderItemInstanceDTO>> getInstances() const;
    void setInstances(std::vector<std::shared_ptr<OrderItemInstanceDTO>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_Id = 0L;
    std::shared_ptr<OrderVatType> m_Vat = std::make_shared<OrderVatType>();
    int32_t m_Count = 0;
    double m_Price = 0.0;
    std::string m_OfferName = "";
    std::string m_OfferId = "";
    std::vector<std::shared_ptr<OrderItemInstanceDTO>> m_Instances;
};

std::vector<BriefOrderItemDTO> createBriefOrderItemDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* BriefOrderItemDTO_H_ */
