/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ReportInfoDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ReportInfoDTO::ReportInfoDTO()
{
    m_SubStatusIsSet = false;
    m_GenerationRequestedAt = "";
    m_GenerationFinishedAt = "";
    m_GenerationFinishedAtIsSet = false;
    m_file = "";
    m_fileIsSet = false;
    m_EstimatedGenerationTime = 0L;
    m_EstimatedGenerationTimeIsSet = false;
    
}

void ReportInfoDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ReportInfoDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ReportInfoDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ReportInfoDTO" : pathPrefix;

                            
    return success;
}

bool ReportInfoDTO::operator==(const ReportInfoDTO& rhs) const
{
    return
    
    
    (getStatus() == rhs.getStatus())
     &&
    
    
    ((!subStatusIsSet() && !rhs.subStatusIsSet()) || (subStatusIsSet() && rhs.subStatusIsSet() && getSubStatus() == rhs.getSubStatus())) &&
    
    (getGenerationRequestedAt() == rhs.getGenerationRequestedAt())
     &&
    
    
    ((!generationFinishedAtIsSet() && !rhs.generationFinishedAtIsSet()) || (generationFinishedAtIsSet() && rhs.generationFinishedAtIsSet() && getGenerationFinishedAt() == rhs.getGenerationFinishedAt())) &&
    
    
    ((!fileIsSet() && !rhs.fileIsSet()) || (fileIsSet() && rhs.fileIsSet() && getFile() == rhs.getFile())) &&
    
    
    ((!estimatedGenerationTimeIsSet() && !rhs.estimatedGenerationTimeIsSet()) || (estimatedGenerationTimeIsSet() && rhs.estimatedGenerationTimeIsSet() && getEstimatedGenerationTime() == rhs.getEstimatedGenerationTime()))
    
    ;
}

bool ReportInfoDTO::operator!=(const ReportInfoDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ReportInfoDTO& o)
{
    j = nlohmann::json::object();
    j["status"] = o.m_Status;
    if(o.subStatusIsSet())
        j["subStatus"] = o.m_SubStatus;
    j["generationRequestedAt"] = o.m_GenerationRequestedAt;
    if(o.generationFinishedAtIsSet())
        j["generationFinishedAt"] = o.m_GenerationFinishedAt;
    if(o.fileIsSet())
        j["file"] = o.m_file;
    if(o.estimatedGenerationTimeIsSet())
        j["estimatedGenerationTime"] = o.m_EstimatedGenerationTime;
    
}

void from_json(const nlohmann::json& j, ReportInfoDTO& o)
{
    j.at("status").get_to(o.m_Status);
    if(j.find("subStatus") != j.end())
    {
        j.at("subStatus").get_to(o.m_SubStatus);
        o.m_SubStatusIsSet = true;
    } 
    j.at("generationRequestedAt").get_to(o.m_GenerationRequestedAt);
    if(j.find("generationFinishedAt") != j.end())
    {
        j.at("generationFinishedAt").get_to(o.m_GenerationFinishedAt);
        o.m_GenerationFinishedAtIsSet = true;
    } 
    if(j.find("file") != j.end())
    {
        j.at("file").get_to(o.m_file);
        o.m_fileIsSet = true;
    } 
    if(j.find("estimatedGenerationTime") != j.end())
    {
        j.at("estimatedGenerationTime").get_to(o.m_EstimatedGenerationTime);
        o.m_EstimatedGenerationTimeIsSet = true;
    } 
    
}

org::openapitools::server::model::ReportStatusType ReportInfoDTO::getStatus() const
{
    return m_Status;
}
void ReportInfoDTO::setStatus(org::openapitools::server::model::ReportStatusType const& value)
{
    m_Status = value;
}
org::openapitools::server::model::ReportSubStatusType ReportInfoDTO::getSubStatus() const
{
    return m_SubStatus;
}
void ReportInfoDTO::setSubStatus(org::openapitools::server::model::ReportSubStatusType const& value)
{
    m_SubStatus = value;
    m_SubStatusIsSet = true;
}
bool ReportInfoDTO::subStatusIsSet() const
{
    return m_SubStatusIsSet;
}
void ReportInfoDTO::unsetSubStatus()
{
    m_SubStatusIsSet = false;
}
std::string ReportInfoDTO::getGenerationRequestedAt() const
{
    return m_GenerationRequestedAt;
}
void ReportInfoDTO::setGenerationRequestedAt(std::string const& value)
{
    m_GenerationRequestedAt = value;
}
std::string ReportInfoDTO::getGenerationFinishedAt() const
{
    return m_GenerationFinishedAt;
}
void ReportInfoDTO::setGenerationFinishedAt(std::string const& value)
{
    m_GenerationFinishedAt = value;
    m_GenerationFinishedAtIsSet = true;
}
bool ReportInfoDTO::generationFinishedAtIsSet() const
{
    return m_GenerationFinishedAtIsSet;
}
void ReportInfoDTO::unsetGenerationFinishedAt()
{
    m_GenerationFinishedAtIsSet = false;
}
std::string ReportInfoDTO::getFile() const
{
    return m_file;
}
void ReportInfoDTO::setFile(std::string const& value)
{
    m_file = value;
    m_fileIsSet = true;
}
bool ReportInfoDTO::fileIsSet() const
{
    return m_fileIsSet;
}
void ReportInfoDTO::unsetfile()
{
    m_fileIsSet = false;
}
int64_t ReportInfoDTO::getEstimatedGenerationTime() const
{
    return m_EstimatedGenerationTime;
}
void ReportInfoDTO::setEstimatedGenerationTime(int64_t const value)
{
    m_EstimatedGenerationTime = value;
    m_EstimatedGenerationTimeIsSet = true;
}
bool ReportInfoDTO::estimatedGenerationTimeIsSet() const
{
    return m_EstimatedGenerationTimeIsSet;
}
void ReportInfoDTO::unsetEstimatedGenerationTime()
{
    m_EstimatedGenerationTimeIsSet = false;
}


} // namespace org::openapitools::server::model

