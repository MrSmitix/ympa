/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GoodsFeedbackCommentDTO.h
 *
 * Комментарий к отзыву.
 */

#ifndef GoodsFeedbackCommentDTO_H_
#define GoodsFeedbackCommentDTO_H_



#include "GoodsFeedbackCommentAuthorDTO.h"
#include <string>
#include "GoodsFeedbackCommentStatusType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Комментарий к отзыву.
/// </summary>
class  GoodsFeedbackCommentDTO 
{
public:
    GoodsFeedbackCommentDTO() = default;
    explicit GoodsFeedbackCommentDTO(boost::property_tree::ptree const& pt);
    virtual ~GoodsFeedbackCommentDTO() = default;

    GoodsFeedbackCommentDTO(const GoodsFeedbackCommentDTO& other) = default; // copy constructor
    GoodsFeedbackCommentDTO(GoodsFeedbackCommentDTO&& other) noexcept = default; // move constructor

    GoodsFeedbackCommentDTO& operator=(const GoodsFeedbackCommentDTO& other) = default; // copy assignment
    GoodsFeedbackCommentDTO& operator=(GoodsFeedbackCommentDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GoodsFeedbackCommentDTO members

    /// <summary>
    /// Идентификатор комментария к отзыву. 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Текст комментария.
    /// </summary>
    std::string getText() const;
    void setText(std::string value);

    /// <summary>
    /// Может ли продавец изменять комментарий или удалять его.
    /// </summary>
    bool isCanModify() const;
    void setCanModify(bool value);

    /// <summary>
    /// Идентификатор комментария к отзыву. 
    /// </summary>
    int64_t getParentId() const;
    void setParentId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    GoodsFeedbackCommentAuthorDTO getAuthor() const;
    void setAuthor(GoodsFeedbackCommentAuthorDTO value);

    /// <summary>
    /// 
    /// </summary>
    GoodsFeedbackCommentStatusType getStatus() const;
    void setStatus(GoodsFeedbackCommentStatusType value);

protected:
    int64_t m_Id = 0L;
    std::string m_Text = "";
    bool m_CanModify = false;
    int64_t m_ParentId = 0L;
    GoodsFeedbackCommentAuthorDTO m_Author;
    GoodsFeedbackCommentStatusType m_Status = GoodsFeedbackCommentStatusType{};
};

std::vector<GoodsFeedbackCommentDTO> createGoodsFeedbackCommentDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GoodsFeedbackCommentDTO>(const GoodsFeedbackCommentDTO& val) {
    return val.toPropertyTree();
}

template<>
inline GoodsFeedbackCommentDTO fromPt<GoodsFeedbackCommentDTO>(const boost::property_tree::ptree& pt) {
    GoodsFeedbackCommentDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GoodsFeedbackCommentDTO_H_ */
