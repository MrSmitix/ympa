/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GoodsFeedbackCommentDTO.h
 *
 * Комментарий к отзыву.
 */

#ifndef GoodsFeedbackCommentDTO_H_
#define GoodsFeedbackCommentDTO_H_


#include "GoodsFeedbackCommentAuthorDTO.h"
#include <string>
#include "GoodsFeedbackCommentStatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Комментарий к отзыву.
/// </summary>
class  GoodsFeedbackCommentDTO
{
public:
    GoodsFeedbackCommentDTO();
    virtual ~GoodsFeedbackCommentDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GoodsFeedbackCommentDTO& rhs) const;
    bool operator!=(const GoodsFeedbackCommentDTO& rhs) const;

    /////////////////////////////////////////////
    /// GoodsFeedbackCommentDTO members

    /// <summary>
    /// Идентификатор комментария к отзыву. 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    /// <summary>
    /// Текст комментария.
    /// </summary>
    std::string getText() const;
    void setText(std::string const& value);
    /// <summary>
    /// Может ли продавец изменять комментарий или удалять его.
    /// </summary>
    bool isCanModify() const;
    void setCanModify(bool const value);
    bool canModifyIsSet() const;
    void unsetCanModify();
    /// <summary>
    /// Идентификатор комментария к отзыву. 
    /// </summary>
    int64_t getParentId() const;
    void setParentId(int64_t const value);
    bool parentIdIsSet() const;
    void unsetParentId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::GoodsFeedbackCommentAuthorDTO getAuthor() const;
    void setAuthor(org::openapitools::server::model::GoodsFeedbackCommentAuthorDTO const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::GoodsFeedbackCommentStatusType getStatus() const;
    void setStatus(org::openapitools::server::model::GoodsFeedbackCommentStatusType const& value);

    friend  void to_json(nlohmann::json& j, const GoodsFeedbackCommentDTO& o);
    friend  void from_json(const nlohmann::json& j, GoodsFeedbackCommentDTO& o);
protected:
    int64_t m_Id;

    std::string m_Text;

    bool m_CanModify;
    bool m_CanModifyIsSet;
    int64_t m_ParentId;
    bool m_ParentIdIsSet;
    org::openapitools::server::model::GoodsFeedbackCommentAuthorDTO m_Author;

    org::openapitools::server::model::GoodsFeedbackCommentStatusType m_Status;

    
};

} // namespace org::openapitools::server::model

#endif /* GoodsFeedbackCommentDTO_H_ */
