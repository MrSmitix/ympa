/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SetFeedParamsRequest.h
 *
 * Запрос на обновление изменение параметров прайс-листа.
 */

#ifndef SetFeedParamsRequest_H_
#define SetFeedParamsRequest_H_



#include "FeedParameterDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Запрос на обновление изменение параметров прайс-листа.
/// </summary>
class  SetFeedParamsRequest 
{
public:
    SetFeedParamsRequest() = default;
    explicit SetFeedParamsRequest(boost::property_tree::ptree const& pt);
    virtual ~SetFeedParamsRequest() = default;

    SetFeedParamsRequest(const SetFeedParamsRequest& other) = default; // copy constructor
    SetFeedParamsRequest(SetFeedParamsRequest&& other) noexcept = default; // move constructor

    SetFeedParamsRequest& operator=(const SetFeedParamsRequest& other) = default; // copy assignment
    SetFeedParamsRequest& operator=(SetFeedParamsRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// SetFeedParamsRequest members

    /// <summary>
    /// Параметры прайс-листа.  Обязательный параметр. 
    /// </summary>
    std::vector<FeedParameterDTO> getParameters() const;
    void setParameters(std::vector<FeedParameterDTO> value);

protected:
    std::vector<FeedParameterDTO> m_Parameters;
};

std::vector<SetFeedParamsRequest> createSetFeedParamsRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<SetFeedParamsRequest>(const SetFeedParamsRequest& val) {
    return val.toPropertyTree();
}

template<>
inline SetFeedParamsRequest fromPt<SetFeedParamsRequest>(const boost::property_tree::ptree& pt) {
    SetFeedParamsRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* SetFeedParamsRequest_H_ */
