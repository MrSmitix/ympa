/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OptionValuesLimitedDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OptionValuesLimitedDTO::OptionValuesLimitedDTO()
{
    m_LimitingOptionValueId = 0L;
    
}

void OptionValuesLimitedDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OptionValuesLimitedDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OptionValuesLimitedDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OptionValuesLimitedDTO" : pathPrefix;

             
    
    /* OptionValueIds */ {
        const std::vector<int64_t>& value = m_OptionValueIds;
        const std::string currentValuePath = _pathPrefix + ".optionValueIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int64_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool OptionValuesLimitedDTO::operator==(const OptionValuesLimitedDTO& rhs) const
{
    return
    
    
    (getLimitingOptionValueId() == rhs.getLimitingOptionValueId())
     &&
    
    (getOptionValueIds() == rhs.getOptionValueIds())
    
    
    ;
}

bool OptionValuesLimitedDTO::operator!=(const OptionValuesLimitedDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OptionValuesLimitedDTO& o)
{
    j = nlohmann::json::object();
    j["limitingOptionValueId"] = o.m_LimitingOptionValueId;
    j["optionValueIds"] = o.m_OptionValueIds;
    
}

void from_json(const nlohmann::json& j, OptionValuesLimitedDTO& o)
{
    j.at("limitingOptionValueId").get_to(o.m_LimitingOptionValueId);
    j.at("optionValueIds").get_to(o.m_OptionValueIds);
    
}

int64_t OptionValuesLimitedDTO::getLimitingOptionValueId() const
{
    return m_LimitingOptionValueId;
}
void OptionValuesLimitedDTO::setLimitingOptionValueId(int64_t const value)
{
    m_LimitingOptionValueId = value;
}
std::vector<int64_t> OptionValuesLimitedDTO::getOptionValueIds() const
{
    return m_OptionValueIds;
}
void OptionValuesLimitedDTO::setOptionValueIds(std::vector<int64_t> const value)
{
    m_OptionValueIds = value;
}


} // namespace org::openapitools::server::model

