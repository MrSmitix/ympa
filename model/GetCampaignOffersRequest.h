/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GetCampaignOffersRequest.h
 *
 * Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке. 
 */

#ifndef GetCampaignOffersRequest_H_
#define GetCampaignOffersRequest_H_


#include <string>
#include "OfferCampaignStatusType.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке. 
/// </summary>
class  GetCampaignOffersRequest
{
public:
    GetCampaignOffersRequest();
    virtual ~GetCampaignOffersRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GetCampaignOffersRequest& rhs) const;
    bool operator!=(const GetCampaignOffersRequest& rhs) const;

    /////////////////////////////////////////////
    /// GetCampaignOffersRequest members

    /// <summary>
    /// Идентификаторы товаров, информация о которых нужна.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60;  {% endnote %}    
    /// </summary>
    std::vector<std::string> getOfferIds() const;
    void setOfferIds(std::vector<std::string> const& value);
    bool offerIdsIsSet() const;
    void unsetOfferIds();
    /// <summary>
    /// Фильтр по статусам товаров. 
    /// </summary>
    std::vector<org::openapitools::server::model::OfferCampaignStatusType> getStatuses() const;
    void setStatuses(std::vector<org::openapitools::server::model::OfferCampaignStatusType> const& value);
    bool statusesIsSet() const;
    void unsetStatuses();
    /// <summary>
    /// Фильтр по категориям на Маркете.
    /// </summary>
    std::vector<int32_t> getCategoryIds() const;
    void setCategoryIds(std::vector<int32_t> const value);
    bool categoryIdsIsSet() const;
    void unsetCategoryIds();
    /// <summary>
    /// Фильтр по брендам.
    /// </summary>
    std::vector<std::string> getVendorNames() const;
    void setVendorNames(std::vector<std::string> const& value);
    bool vendorNamesIsSet() const;
    void unsetVendorNames();
    /// <summary>
    /// Фильтр по тегам.
    /// </summary>
    std::vector<std::string> getTags() const;
    void setTags(std::vector<std::string> const& value);
    bool tagsIsSet() const;
    void unsetTags();

    friend  void to_json(nlohmann::json& j, const GetCampaignOffersRequest& o);
    friend  void from_json(const nlohmann::json& j, GetCampaignOffersRequest& o);
protected:
    std::vector<std::string> m_OfferIds;
    bool m_OfferIdsIsSet;
    std::vector<org::openapitools::server::model::OfferCampaignStatusType> m_Statuses;
    bool m_StatusesIsSet;
    std::vector<int32_t> m_CategoryIds;
    bool m_CategoryIdsIsSet;
    std::vector<std::string> m_VendorNames;
    bool m_VendorNamesIsSet;
    std::vector<std::string> m_Tags;
    bool m_TagsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GetCampaignOffersRequest_H_ */
