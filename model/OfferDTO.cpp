/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OfferDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OfferDTO::OfferDTO()
{
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_FeedId = 0L;
    m_FeedIdIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_ShopCategoryId = "";
    m_ShopCategoryIdIsSet = false;
    m_MarketCategoryId = 0;
    m_MarketCategoryIdIsSet = false;
    m_PreDiscountPrice = 0.0;
    m_PreDiscountPriceIsSet = false;
    m_Discount = 0;
    m_DiscountIsSet = false;
    m_CutPrice = false;
    m_CutPriceIsSet = false;
    m_Url = "";
    m_UrlIsSet = false;
    m_ModelId = 0L;
    m_Name = "";
    m_NameIsSet = false;
    m_CurrencyIsSet = false;
    m_Bid = 0.0;
    m_BidIsSet = false;
    m_Cbid = 0.0;
    m_CbidIsSet = false;
    m_Fee = 0.0;
    m_FeeIsSet = false;
    m_Blocked = false;
    m_BlockedIsSet = false;
    
}

void OfferDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OfferDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OfferDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OfferDTO" : pathPrefix;

                                                                    
    return success;
}

bool OfferDTO::operator==(const OfferDTO& rhs) const
{
    return
    
    
    
    ((!priceIsSet() && !rhs.priceIsSet()) || (priceIsSet() && rhs.priceIsSet() && getPrice() == rhs.getPrice())) &&
    
    
    ((!feedIdIsSet() && !rhs.feedIdIsSet()) || (feedIdIsSet() && rhs.feedIdIsSet() && getFeedId() == rhs.getFeedId())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!shopCategoryIdIsSet() && !rhs.shopCategoryIdIsSet()) || (shopCategoryIdIsSet() && rhs.shopCategoryIdIsSet() && getShopCategoryId() == rhs.getShopCategoryId())) &&
    
    
    ((!marketCategoryIdIsSet() && !rhs.marketCategoryIdIsSet()) || (marketCategoryIdIsSet() && rhs.marketCategoryIdIsSet() && getMarketCategoryId() == rhs.getMarketCategoryId())) &&
    
    
    ((!preDiscountPriceIsSet() && !rhs.preDiscountPriceIsSet()) || (preDiscountPriceIsSet() && rhs.preDiscountPriceIsSet() && getPreDiscountPrice() == rhs.getPreDiscountPrice())) &&
    
    
    ((!discountIsSet() && !rhs.discountIsSet()) || (discountIsSet() && rhs.discountIsSet() && getDiscount() == rhs.getDiscount())) &&
    
    
    ((!cutPriceIsSet() && !rhs.cutPriceIsSet()) || (cutPriceIsSet() && rhs.cutPriceIsSet() && isCutPrice() == rhs.isCutPrice())) &&
    
    
    ((!urlIsSet() && !rhs.urlIsSet()) || (urlIsSet() && rhs.urlIsSet() && getUrl() == rhs.getUrl())) &&
    
    (getModelId() == rhs.getModelId())
     &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!currencyIsSet() && !rhs.currencyIsSet()) || (currencyIsSet() && rhs.currencyIsSet() && getCurrency() == rhs.getCurrency())) &&
    
    
    ((!bidIsSet() && !rhs.bidIsSet()) || (bidIsSet() && rhs.bidIsSet() && getBid() == rhs.getBid())) &&
    
    
    ((!cbidIsSet() && !rhs.cbidIsSet()) || (cbidIsSet() && rhs.cbidIsSet() && getCbid() == rhs.getCbid())) &&
    
    
    ((!feeIsSet() && !rhs.feeIsSet()) || (feeIsSet() && rhs.feeIsSet() && getFee() == rhs.getFee())) &&
    
    
    ((!blockedIsSet() && !rhs.blockedIsSet()) || (blockedIsSet() && rhs.blockedIsSet() && isBlocked() == rhs.isBlocked()))
    
    ;
}

bool OfferDTO::operator!=(const OfferDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OfferDTO& o)
{
    j = nlohmann::json::object();
    if(o.priceIsSet())
        j["price"] = o.m_Price;
    if(o.feedIdIsSet())
        j["feedId"] = o.m_FeedId;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.shopCategoryIdIsSet())
        j["shopCategoryId"] = o.m_ShopCategoryId;
    if(o.marketCategoryIdIsSet())
        j["marketCategoryId"] = o.m_MarketCategoryId;
    if(o.preDiscountPriceIsSet())
        j["preDiscountPrice"] = o.m_PreDiscountPrice;
    if(o.discountIsSet())
        j["discount"] = o.m_Discount;
    if(o.cutPriceIsSet())
        j["cutPrice"] = o.m_CutPrice;
    if(o.urlIsSet())
        j["url"] = o.m_Url;
    j["modelId"] = o.m_ModelId;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.currencyIsSet())
        j["currency"] = o.m_Currency;
    if(o.bidIsSet())
        j["bid"] = o.m_Bid;
    if(o.cbidIsSet())
        j["cbid"] = o.m_Cbid;
    if(o.feeIsSet())
        j["fee"] = o.m_Fee;
    if(o.blockedIsSet())
        j["blocked"] = o.m_Blocked;
    
}

void from_json(const nlohmann::json& j, OfferDTO& o)
{
    if(j.find("price") != j.end())
    {
        j.at("price").get_to(o.m_Price);
        o.m_PriceIsSet = true;
    } 
    if(j.find("feedId") != j.end())
    {
        j.at("feedId").get_to(o.m_FeedId);
        o.m_FeedIdIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("shopCategoryId") != j.end())
    {
        j.at("shopCategoryId").get_to(o.m_ShopCategoryId);
        o.m_ShopCategoryIdIsSet = true;
    } 
    if(j.find("marketCategoryId") != j.end())
    {
        j.at("marketCategoryId").get_to(o.m_MarketCategoryId);
        o.m_MarketCategoryIdIsSet = true;
    } 
    if(j.find("preDiscountPrice") != j.end())
    {
        j.at("preDiscountPrice").get_to(o.m_PreDiscountPrice);
        o.m_PreDiscountPriceIsSet = true;
    } 
    if(j.find("discount") != j.end())
    {
        j.at("discount").get_to(o.m_Discount);
        o.m_DiscountIsSet = true;
    } 
    if(j.find("cutPrice") != j.end())
    {
        j.at("cutPrice").get_to(o.m_CutPrice);
        o.m_CutPriceIsSet = true;
    } 
    if(j.find("url") != j.end())
    {
        j.at("url").get_to(o.m_Url);
        o.m_UrlIsSet = true;
    } 
    j.at("modelId").get_to(o.m_ModelId);
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("currency") != j.end())
    {
        j.at("currency").get_to(o.m_Currency);
        o.m_CurrencyIsSet = true;
    } 
    if(j.find("bid") != j.end())
    {
        j.at("bid").get_to(o.m_Bid);
        o.m_BidIsSet = true;
    } 
    if(j.find("cbid") != j.end())
    {
        j.at("cbid").get_to(o.m_Cbid);
        o.m_CbidIsSet = true;
    } 
    if(j.find("fee") != j.end())
    {
        j.at("fee").get_to(o.m_Fee);
        o.m_FeeIsSet = true;
    } 
    if(j.find("blocked") != j.end())
    {
        j.at("blocked").get_to(o.m_Blocked);
        o.m_BlockedIsSet = true;
    } 
    
}

double OfferDTO::getPrice() const
{
    return m_Price;
}
void OfferDTO::setPrice(double const value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool OfferDTO::priceIsSet() const
{
    return m_PriceIsSet;
}
void OfferDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
int64_t OfferDTO::getFeedId() const
{
    return m_FeedId;
}
void OfferDTO::setFeedId(int64_t const value)
{
    m_FeedId = value;
    m_FeedIdIsSet = true;
}
bool OfferDTO::feedIdIsSet() const
{
    return m_FeedIdIsSet;
}
void OfferDTO::unsetFeedId()
{
    m_FeedIdIsSet = false;
}
std::string OfferDTO::getId() const
{
    return m_Id;
}
void OfferDTO::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool OfferDTO::idIsSet() const
{
    return m_IdIsSet;
}
void OfferDTO::unsetId()
{
    m_IdIsSet = false;
}
std::string OfferDTO::getShopCategoryId() const
{
    return m_ShopCategoryId;
}
void OfferDTO::setShopCategoryId(std::string const& value)
{
    m_ShopCategoryId = value;
    m_ShopCategoryIdIsSet = true;
}
bool OfferDTO::shopCategoryIdIsSet() const
{
    return m_ShopCategoryIdIsSet;
}
void OfferDTO::unsetShopCategoryId()
{
    m_ShopCategoryIdIsSet = false;
}
int32_t OfferDTO::getMarketCategoryId() const
{
    return m_MarketCategoryId;
}
void OfferDTO::setMarketCategoryId(int32_t const value)
{
    m_MarketCategoryId = value;
    m_MarketCategoryIdIsSet = true;
}
bool OfferDTO::marketCategoryIdIsSet() const
{
    return m_MarketCategoryIdIsSet;
}
void OfferDTO::unsetMarketCategoryId()
{
    m_MarketCategoryIdIsSet = false;
}
double OfferDTO::getPreDiscountPrice() const
{
    return m_PreDiscountPrice;
}
void OfferDTO::setPreDiscountPrice(double const value)
{
    m_PreDiscountPrice = value;
    m_PreDiscountPriceIsSet = true;
}
bool OfferDTO::preDiscountPriceIsSet() const
{
    return m_PreDiscountPriceIsSet;
}
void OfferDTO::unsetPreDiscountPrice()
{
    m_PreDiscountPriceIsSet = false;
}
int32_t OfferDTO::getDiscount() const
{
    return m_Discount;
}
void OfferDTO::setDiscount(int32_t const value)
{
    m_Discount = value;
    m_DiscountIsSet = true;
}
bool OfferDTO::discountIsSet() const
{
    return m_DiscountIsSet;
}
void OfferDTO::unsetDiscount()
{
    m_DiscountIsSet = false;
}
bool OfferDTO::isCutPrice() const
{
    return m_CutPrice;
}
void OfferDTO::setCutPrice(bool const value)
{
    m_CutPrice = value;
    m_CutPriceIsSet = true;
}
bool OfferDTO::cutPriceIsSet() const
{
    return m_CutPriceIsSet;
}
void OfferDTO::unsetCutPrice()
{
    m_CutPriceIsSet = false;
}
std::string OfferDTO::getUrl() const
{
    return m_Url;
}
void OfferDTO::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool OfferDTO::urlIsSet() const
{
    return m_UrlIsSet;
}
void OfferDTO::unsetUrl()
{
    m_UrlIsSet = false;
}
int64_t OfferDTO::getModelId() const
{
    return m_ModelId;
}
void OfferDTO::setModelId(int64_t const value)
{
    m_ModelId = value;
}
std::string OfferDTO::getName() const
{
    return m_Name;
}
void OfferDTO::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OfferDTO::nameIsSet() const
{
    return m_NameIsSet;
}
void OfferDTO::unsetName()
{
    m_NameIsSet = false;
}
org::openapitools::server::model::CurrencyType OfferDTO::getCurrency() const
{
    return m_Currency;
}
void OfferDTO::setCurrency(org::openapitools::server::model::CurrencyType const& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool OfferDTO::currencyIsSet() const
{
    return m_CurrencyIsSet;
}
void OfferDTO::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
double OfferDTO::getBid() const
{
    return m_Bid;
}
void OfferDTO::setBid(double const value)
{
    m_Bid = value;
    m_BidIsSet = true;
}
bool OfferDTO::bidIsSet() const
{
    return m_BidIsSet;
}
void OfferDTO::unsetBid()
{
    m_BidIsSet = false;
}
double OfferDTO::getCbid() const
{
    return m_Cbid;
}
void OfferDTO::setCbid(double const value)
{
    m_Cbid = value;
    m_CbidIsSet = true;
}
bool OfferDTO::cbidIsSet() const
{
    return m_CbidIsSet;
}
void OfferDTO::unsetCbid()
{
    m_CbidIsSet = false;
}
double OfferDTO::getFee() const
{
    return m_Fee;
}
void OfferDTO::setFee(double const value)
{
    m_Fee = value;
    m_FeeIsSet = true;
}
bool OfferDTO::feeIsSet() const
{
    return m_FeeIsSet;
}
void OfferDTO::unsetFee()
{
    m_FeeIsSet = false;
}
bool OfferDTO::isBlocked() const
{
    return m_Blocked;
}
void OfferDTO::setBlocked(bool const value)
{
    m_Blocked = value;
    m_BlockedIsSet = true;
}
bool OfferDTO::blockedIsSet() const
{
    return m_BlockedIsSet;
}
void OfferDTO::unsetBlocked()
{
    m_BlockedIsSet = false;
}


} // namespace org::openapitools::server::model

