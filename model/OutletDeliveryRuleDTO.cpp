/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OutletDeliveryRuleDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OutletDeliveryRuleDTO::OutletDeliveryRuleDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string OutletDeliveryRuleDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void OutletDeliveryRuleDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree OutletDeliveryRuleDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void OutletDeliveryRuleDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string OutletDeliveryRuleDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void OutletDeliveryRuleDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OutletDeliveryRuleDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("minDeliveryDays", m_MinDeliveryDays);
	pt.put("maxDeliveryDays", m_MaxDeliveryDays);
	pt.put("deliveryServiceId", m_DeliveryServiceId);
	pt.put("orderBefore", m_OrderBefore);
	pt.put("priceFreePickup", m_PriceFreePickup);
	pt.put("unspecifiedDeliveryInterval", m_UnspecifiedDeliveryInterval);
	return pt;
}

void OutletDeliveryRuleDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_MinDeliveryDays = pt.get("minDeliveryDays", 0);
	m_MaxDeliveryDays = pt.get("maxDeliveryDays", 0);
	m_DeliveryServiceId = pt.get("deliveryServiceId", 0L);
	m_OrderBefore = pt.get("orderBefore", 0);
	m_PriceFreePickup = pt.get("priceFreePickup", 0.0);
	m_UnspecifiedDeliveryInterval = pt.get("unspecifiedDeliveryInterval", false);
}

int32_t OutletDeliveryRuleDTO::getMinDeliveryDays() const
{
    return m_MinDeliveryDays;
}

void OutletDeliveryRuleDTO::setMinDeliveryDays(int32_t value)
{
	m_MinDeliveryDays = value;
}
int32_t OutletDeliveryRuleDTO::getMaxDeliveryDays() const
{
    return m_MaxDeliveryDays;
}

void OutletDeliveryRuleDTO::setMaxDeliveryDays(int32_t value)
{
	m_MaxDeliveryDays = value;
}
int64_t OutletDeliveryRuleDTO::getDeliveryServiceId() const
{
    return m_DeliveryServiceId;
}

void OutletDeliveryRuleDTO::setDeliveryServiceId(int64_t value)
{
	m_DeliveryServiceId = value;
}
int32_t OutletDeliveryRuleDTO::getOrderBefore() const
{
    return m_OrderBefore;
}

void OutletDeliveryRuleDTO::setOrderBefore(int32_t value)
{
	m_OrderBefore = value;
}
double OutletDeliveryRuleDTO::getPriceFreePickup() const
{
    return m_PriceFreePickup;
}

void OutletDeliveryRuleDTO::setPriceFreePickup(double value)
{
	m_PriceFreePickup = value;
}
bool OutletDeliveryRuleDTO::isUnspecifiedDeliveryInterval() const
{
    return m_UnspecifiedDeliveryInterval;
}

void OutletDeliveryRuleDTO::setUnspecifiedDeliveryInterval(bool value)
{
	m_UnspecifiedDeliveryInterval = value;
}

std::vector<OutletDeliveryRuleDTO> createOutletDeliveryRuleDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OutletDeliveryRuleDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OutletDeliveryRuleDTO(child.second));
    }

    return vec;
}

}
}
}
}

