/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrderDTO.h
 *
 * Заказ.
 */

#ifndef OrderDTO_H_
#define OrderDTO_H_


#include "CurrencyType.h"
#include "OrderItemDTO.h"
#include "OrderPaymentMethodType.h"
#include "OrderStatusType.h"
#include "OrderSubsidyDTO.h"
#include "OrderTaxSystemType.h"
#include "OrderBuyerDTO.h"
#include "OrderDeliveryDTO.h"
#include "OrderPaymentType.h"
#include <string>
#include <vector>
#include "OrderSubstatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Заказ.
/// </summary>
class  OrderDTO
{
public:
    OrderDTO();
    virtual ~OrderDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OrderDTO& rhs) const;
    bool operator!=(const OrderDTO& rhs) const;

    /////////////////////////////////////////////
    /// OrderDTO members

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderStatusType getStatus() const;
    void setStatus(org::openapitools::server::model::OrderStatusType const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderSubstatusType getSubstatus() const;
    void setSubstatus(org::openapitools::server::model::OrderSubstatusType const& value);
    bool substatusIsSet() const;
    void unsetSubstatus();
    /// <summary>
    /// 
    /// </summary>
    std::string getCreationDate() const;
    void setCreationDate(std::string const& value);
    bool creationDateIsSet() const;
    void unsetCreationDate();
    /// <summary>
    /// 
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string const& value);
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CurrencyType getCurrency() const;
    void setCurrency(org::openapitools::server::model::CurrencyType const& value);
    bool currencyIsSet() const;
    void unsetCurrency();
    /// <summary>
    /// Платеж покупателя. 
    /// </summary>
    double getItemsTotal() const;
    void setItemsTotal(double const value);
    bool itemsTotalIsSet() const;
    void unsetItemsTotal();
    /// <summary>
    /// Стоимость доставки. 
    /// </summary>
    double getDeliveryTotal() const;
    void setDeliveryTotal(double const value);
    bool deliveryTotalIsSet() const;
    void unsetDeliveryTotal();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
    /// </summary>
    double getBuyerItemsTotal() const;
    void setBuyerItemsTotal(double const value);
    bool buyerItemsTotalIsSet() const;
    void unsetBuyerItemsTotal();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
    /// </summary>
    double getBuyerTotal() const;
    void setBuyerTotal(double const value);
    bool buyerTotalIsSet() const;
    void unsetBuyerTotal();
    /// <summary>
    /// Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
    /// </summary>
    double getBuyerItemsTotalBeforeDiscount() const;
    void setBuyerItemsTotalBeforeDiscount(double const value);
    bool buyerItemsTotalBeforeDiscountIsSet() const;
    void unsetBuyerItemsTotalBeforeDiscount();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (&#x60;buyerItemsTotalBeforeDiscount&#x60; + стоимость доставки). 
    /// </summary>
    double getBuyerTotalBeforeDiscount() const;
    void setBuyerTotalBeforeDiscount(double const value);
    bool buyerTotalBeforeDiscountIsSet() const;
    void unsetBuyerTotalBeforeDiscount();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderPaymentType getPaymentType() const;
    void setPaymentType(org::openapitools::server::model::OrderPaymentType const& value);
    bool paymentTypeIsSet() const;
    void unsetPaymentType();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderPaymentMethodType getPaymentMethod() const;
    void setPaymentMethod(org::openapitools::server::model::OrderPaymentMethodType const& value);
    bool paymentMethodIsSet() const;
    void unsetPaymentMethod();
    /// <summary>
    /// Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
    /// </summary>
    bool isFake() const;
    void setFake(bool const value);
    bool fakeIsSet() const;
    void unsetFake();
    /// <summary>
    /// Список товаров в заказе.
    /// </summary>
    std::vector<org::openapitools::server::model::OrderItemDTO> getItems() const;
    void setItems(std::vector<org::openapitools::server::model::OrderItemDTO> const& value);
    /// <summary>
    /// Список субсидий по типам.
    /// </summary>
    std::vector<org::openapitools::server::model::OrderSubsidyDTO> getSubsidies() const;
    void setSubsidies(std::vector<org::openapitools::server::model::OrderSubsidyDTO> const& value);
    bool subsidiesIsSet() const;
    void unsetSubsidies();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderDeliveryDTO getDelivery() const;
    void setDelivery(org::openapitools::server::model::OrderDeliveryDTO const& value);
    bool deliveryIsSet() const;
    void unsetDelivery();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderBuyerDTO getBuyer() const;
    void setBuyer(org::openapitools::server::model::OrderBuyerDTO const& value);
    bool buyerIsSet() const;
    void unsetBuyer();
    /// <summary>
    /// Комментарий к заказу.
    /// </summary>
    std::string getNotes() const;
    void setNotes(std::string const& value);
    bool notesIsSet() const;
    void unsetNotes();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderTaxSystemType getTaxSystem() const;
    void setTaxSystem(org::openapitools::server::model::OrderTaxSystemType const& value);
    bool taxSystemIsSet() const;
    void unsetTaxSystem();
    /// <summary>
    /// **Только для модели DBS**  Запрошена ли отмена. 
    /// </summary>
    bool isCancelRequested() const;
    void setCancelRequested(bool const value);
    bool cancelRequestedIsSet() const;
    void unsetCancelRequested();
    /// <summary>
    /// 
    /// </summary>
    std::string getExpiryDate() const;
    void setExpiryDate(std::string const& value);
    bool expiryDateIsSet() const;
    void unsetExpiryDate();

    friend  void to_json(nlohmann::json& j, const OrderDTO& o);
    friend  void from_json(const nlohmann::json& j, OrderDTO& o);
protected:
    int64_t m_Id;
    bool m_IdIsSet;
    org::openapitools::server::model::OrderStatusType m_Status;
    bool m_StatusIsSet;
    org::openapitools::server::model::OrderSubstatusType m_Substatus;
    bool m_SubstatusIsSet;
    std::string m_CreationDate;
    bool m_CreationDateIsSet;
    std::string m_UpdatedAt;
    bool m_UpdatedAtIsSet;
    org::openapitools::server::model::CurrencyType m_Currency;
    bool m_CurrencyIsSet;
    double m_ItemsTotal;
    bool m_ItemsTotalIsSet;
    double m_DeliveryTotal;
    bool m_DeliveryTotalIsSet;
    double m_BuyerItemsTotal;
    bool m_BuyerItemsTotalIsSet;
    double m_BuyerTotal;
    bool m_BuyerTotalIsSet;
    double m_BuyerItemsTotalBeforeDiscount;
    bool m_BuyerItemsTotalBeforeDiscountIsSet;
    double m_BuyerTotalBeforeDiscount;
    bool m_BuyerTotalBeforeDiscountIsSet;
    org::openapitools::server::model::OrderPaymentType m_PaymentType;
    bool m_PaymentTypeIsSet;
    org::openapitools::server::model::OrderPaymentMethodType m_PaymentMethod;
    bool m_PaymentMethodIsSet;
    bool m_Fake;
    bool m_FakeIsSet;
    std::vector<org::openapitools::server::model::OrderItemDTO> m_Items;

    std::vector<org::openapitools::server::model::OrderSubsidyDTO> m_Subsidies;
    bool m_SubsidiesIsSet;
    org::openapitools::server::model::OrderDeliveryDTO m_Delivery;
    bool m_DeliveryIsSet;
    org::openapitools::server::model::OrderBuyerDTO m_Buyer;
    bool m_BuyerIsSet;
    std::string m_Notes;
    bool m_NotesIsSet;
    org::openapitools::server::model::OrderTaxSystemType m_TaxSystem;
    bool m_TaxSystemIsSet;
    bool m_CancelRequested;
    bool m_CancelRequestedIsSet;
    std::string m_ExpiryDate;
    bool m_ExpiryDateIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OrderDTO_H_ */
