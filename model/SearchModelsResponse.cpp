/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SearchModelsResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SearchModelsResponse::SearchModelsResponse()
{
    m_CurrencyIsSet = false;
    m_RegionId = 0L;
    m_RegionIdIsSet = false;
    m_PagerIsSet = false;
    
}

void SearchModelsResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SearchModelsResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SearchModelsResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SearchModelsResponse" : pathPrefix;

         
    
    /* Models */ {
        const std::vector<org::openapitools::server::model::ModelDTO>& value = m_Models;
        const std::string currentValuePath = _pathPrefix + ".models";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ModelDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".models") && success;
 
                i++;
            }
        }

    }
                
    return success;
}

bool SearchModelsResponse::operator==(const SearchModelsResponse& rhs) const
{
    return
    
    
    (getModels() == rhs.getModels())
     &&
    
    
    ((!currencyIsSet() && !rhs.currencyIsSet()) || (currencyIsSet() && rhs.currencyIsSet() && getCurrency() == rhs.getCurrency())) &&
    
    
    ((!regionIdIsSet() && !rhs.regionIdIsSet()) || (regionIdIsSet() && rhs.regionIdIsSet() && getRegionId() == rhs.getRegionId())) &&
    
    
    ((!pagerIsSet() && !rhs.pagerIsSet()) || (pagerIsSet() && rhs.pagerIsSet() && getPager() == rhs.getPager()))
    
    ;
}

bool SearchModelsResponse::operator!=(const SearchModelsResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SearchModelsResponse& o)
{
    j = nlohmann::json::object();
    j["models"] = o.m_Models;
    if(o.currencyIsSet())
        j["currency"] = o.m_Currency;
    if(o.regionIdIsSet())
        j["regionId"] = o.m_RegionId;
    if(o.pagerIsSet())
        j["pager"] = o.m_Pager;
    
}

void from_json(const nlohmann::json& j, SearchModelsResponse& o)
{
    j.at("models").get_to(o.m_Models);
    if(j.find("currency") != j.end())
    {
        j.at("currency").get_to(o.m_Currency);
        o.m_CurrencyIsSet = true;
    } 
    if(j.find("regionId") != j.end())
    {
        j.at("regionId").get_to(o.m_RegionId);
        o.m_RegionIdIsSet = true;
    } 
    if(j.find("pager") != j.end())
    {
        j.at("pager").get_to(o.m_Pager);
        o.m_PagerIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::ModelDTO> SearchModelsResponse::getModels() const
{
    return m_Models;
}
void SearchModelsResponse::setModels(std::vector<org::openapitools::server::model::ModelDTO> const& value)
{
    m_Models = value;
}
org::openapitools::server::model::CurrencyType SearchModelsResponse::getCurrency() const
{
    return m_Currency;
}
void SearchModelsResponse::setCurrency(org::openapitools::server::model::CurrencyType const& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool SearchModelsResponse::currencyIsSet() const
{
    return m_CurrencyIsSet;
}
void SearchModelsResponse::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
int64_t SearchModelsResponse::getRegionId() const
{
    return m_RegionId;
}
void SearchModelsResponse::setRegionId(int64_t const value)
{
    m_RegionId = value;
    m_RegionIdIsSet = true;
}
bool SearchModelsResponse::regionIdIsSet() const
{
    return m_RegionIdIsSet;
}
void SearchModelsResponse::unsetRegionId()
{
    m_RegionIdIsSet = false;
}
org::openapitools::server::model::FlippingPagerDTO SearchModelsResponse::getPager() const
{
    return m_Pager;
}
void SearchModelsResponse::setPager(org::openapitools::server::model::FlippingPagerDTO const& value)
{
    m_Pager = value;
    m_PagerIsSet = true;
}
bool SearchModelsResponse::pagerIsSet() const
{
    return m_PagerIsSet;
}
void SearchModelsResponse::unsetPager()
{
    m_PagerIsSet = false;
}


} // namespace org::openapitools::server::model

