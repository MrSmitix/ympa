/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetPriceDTO.h
 *
 * Цена с указанием времени последнего обновления.
 */

#ifndef GetPriceDTO_H_
#define GetPriceDTO_H_



#include "CurrencyType.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "BasePriceDTO.h"
#include "UpdateTimeDTO.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Цена с указанием времени последнего обновления.
/// </summary>
class  GetPriceDTO : public BasePriceDTO, public UpdateTimeDTO
{
public:
    GetPriceDTO() = default;
    explicit GetPriceDTO(boost::property_tree::ptree const& pt);
    virtual ~GetPriceDTO() = default;

    GetPriceDTO(const GetPriceDTO& other) = default; // copy constructor
    GetPriceDTO(GetPriceDTO&& other) noexcept = default; // move constructor

    GetPriceDTO& operator=(const GetPriceDTO& other) = default; // copy assignment
    GetPriceDTO& operator=(GetPriceDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GetPriceDTO members

    /// <summary>
    /// Значение.
    /// </summary>
    double getValue() const;
    void setValue(double value);

    /// <summary>
    /// 
    /// </summary>
    CurrencyType getCurrencyId() const;
    void setCurrencyId(CurrencyType value);

    /// <summary>
    /// Время последнего обновления.
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string value);

protected:
    double m_Value = 0.0;
    CurrencyType m_CurrencyId = CurrencyType{};
    std::string m_UpdatedAt = "";
};

std::vector<GetPriceDTO> createGetPriceDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GetPriceDTO>(const GetPriceDTO& val) {
    return val.toPropertyTree();
}

template<>
inline GetPriceDTO fromPt<GetPriceDTO>(const boost::property_tree::ptree& pt) {
    GetPriceDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GetPriceDTO_H_ */
