/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderPaymentMethodType.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

OrderPaymentMethodType::OrderPaymentMethodType()
{
    
}

void OrderPaymentMethodType::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderPaymentMethodType::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderPaymentMethodType::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderPaymentMethodType" : pathPrefix;

    
    if (m_value == OrderPaymentMethodType::eOrderPaymentMethodType::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool OrderPaymentMethodType::operator==(const OrderPaymentMethodType& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool OrderPaymentMethodType::operator!=(const OrderPaymentMethodType& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderPaymentMethodType& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case OrderPaymentMethodType::eOrderPaymentMethodType::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::CASH_ON_DELIVERY:
            j = "CASH_ON_DELIVERY";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::CARD_ON_DELIVERY:
            j = "CARD_ON_DELIVERY";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::BOUND_CARD_ON_DELIVERY:
            j = "BOUND_CARD_ON_DELIVERY";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::YANDEX:
            j = "YANDEX";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::APPLE_PAY:
            j = "APPLE_PAY";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::EXTERNAL_CERTIFICATE:
            j = "EXTERNAL_CERTIFICATE";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::CREDIT:
            j = "CREDIT";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::GOOGLE_PAY:
            j = "GOOGLE_PAY";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::TINKOFF_CREDIT:
            j = "TINKOFF_CREDIT";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::SBP:
            j = "SBP";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::TINKOFF_INSTALLMENTS:
            j = "TINKOFF_INSTALLMENTS";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::B2B_ACCOUNT_PREPAYMENT:
            j = "B2B_ACCOUNT_PREPAYMENT";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::B2B_ACCOUNT_POSTPAYMENT:
            j = "B2B_ACCOUNT_POSTPAYMENT";
            break;
        case OrderPaymentMethodType::eOrderPaymentMethodType::UNKNOWN:
            j = "UNKNOWN";
            break;
    }
}

void from_json(const nlohmann::json& j, OrderPaymentMethodType& o)
{
    
    auto s = j.get<std::string>();
    if (s == "CASH_ON_DELIVERY") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::CASH_ON_DELIVERY);
    } 
    else if (s == "CARD_ON_DELIVERY") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::CARD_ON_DELIVERY);
    } 
    else if (s == "BOUND_CARD_ON_DELIVERY") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::BOUND_CARD_ON_DELIVERY);
    } 
    else if (s == "YANDEX") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::YANDEX);
    } 
    else if (s == "APPLE_PAY") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::APPLE_PAY);
    } 
    else if (s == "EXTERNAL_CERTIFICATE") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::EXTERNAL_CERTIFICATE);
    } 
    else if (s == "CREDIT") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::CREDIT);
    } 
    else if (s == "GOOGLE_PAY") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::GOOGLE_PAY);
    } 
    else if (s == "TINKOFF_CREDIT") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::TINKOFF_CREDIT);
    } 
    else if (s == "SBP") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::SBP);
    } 
    else if (s == "TINKOFF_INSTALLMENTS") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::TINKOFF_INSTALLMENTS);
    } 
    else if (s == "B2B_ACCOUNT_PREPAYMENT") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::B2B_ACCOUNT_PREPAYMENT);
    } 
    else if (s == "B2B_ACCOUNT_POSTPAYMENT") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::B2B_ACCOUNT_POSTPAYMENT);
    } 
    else if (s == "UNKNOWN") {
     o.setValue(OrderPaymentMethodType::eOrderPaymentMethodType::UNKNOWN);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " OrderPaymentMethodType::eOrderPaymentMethodType";
     throw std::invalid_argument(ss.str());
    } 

}

OrderPaymentMethodType::eOrderPaymentMethodType OrderPaymentMethodType::getValue() const
{
    return m_value;
}
void OrderPaymentMethodType::setValue(OrderPaymentMethodType::eOrderPaymentMethodType value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

