/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "EnrichedOrderBoxLayoutDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

EnrichedOrderBoxLayoutDTO::EnrichedOrderBoxLayoutDTO()
{
    m_BoxId = 0L;
    m_BoxIdIsSet = false;
    
}

void EnrichedOrderBoxLayoutDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool EnrichedOrderBoxLayoutDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool EnrichedOrderBoxLayoutDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "EnrichedOrderBoxLayoutDTO" : pathPrefix;

         
    
    /* Items */ {
        const std::vector<org::openapitools::server::model::OrderBoxLayoutItemDTO>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderBoxLayoutItemDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".items") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool EnrichedOrderBoxLayoutDTO::operator==(const EnrichedOrderBoxLayoutDTO& rhs) const
{
    return
    
    
    (getItems() == rhs.getItems())
     &&
    
    
    ((!boxIdIsSet() && !rhs.boxIdIsSet()) || (boxIdIsSet() && rhs.boxIdIsSet() && getBoxId() == rhs.getBoxId()))
    
    ;
}

bool EnrichedOrderBoxLayoutDTO::operator!=(const EnrichedOrderBoxLayoutDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const EnrichedOrderBoxLayoutDTO& o)
{
    j = nlohmann::json::object();
    j["items"] = o.m_Items;
    if(o.boxIdIsSet())
        j["boxId"] = o.m_BoxId;
    
}

void from_json(const nlohmann::json& j, EnrichedOrderBoxLayoutDTO& o)
{
    j.at("items").get_to(o.m_Items);
    if(j.find("boxId") != j.end())
    {
        j.at("boxId").get_to(o.m_BoxId);
        o.m_BoxIdIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::OrderBoxLayoutItemDTO> EnrichedOrderBoxLayoutDTO::getItems() const
{
    return m_Items;
}
void EnrichedOrderBoxLayoutDTO::setItems(std::vector<org::openapitools::server::model::OrderBoxLayoutItemDTO> const& value)
{
    m_Items = value;
}
int64_t EnrichedOrderBoxLayoutDTO::getBoxId() const
{
    return m_BoxId;
}
void EnrichedOrderBoxLayoutDTO::setBoxId(int64_t const value)
{
    m_BoxId = value;
    m_BoxIdIsSet = true;
}
bool EnrichedOrderBoxLayoutDTO::boxIdIsSet() const
{
    return m_BoxIdIsSet;
}
void EnrichedOrderBoxLayoutDTO::unsetBoxId()
{
    m_BoxIdIsSet = false;
}


} // namespace org::openapitools::server::model

