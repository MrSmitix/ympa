/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PriceCompetitivenessThresholdsDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PriceCompetitivenessThresholdsDTO::PriceCompetitivenessThresholdsDTO()
{
    m_OptimalPriceIsSet = false;
    m_AveragePriceIsSet = false;
    
}

void PriceCompetitivenessThresholdsDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PriceCompetitivenessThresholdsDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PriceCompetitivenessThresholdsDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PriceCompetitivenessThresholdsDTO" : pathPrefix;

            
    return success;
}

bool PriceCompetitivenessThresholdsDTO::operator==(const PriceCompetitivenessThresholdsDTO& rhs) const
{
    return
    
    
    
    ((!optimalPriceIsSet() && !rhs.optimalPriceIsSet()) || (optimalPriceIsSet() && rhs.optimalPriceIsSet() && getOptimalPrice() == rhs.getOptimalPrice())) &&
    
    
    ((!averagePriceIsSet() && !rhs.averagePriceIsSet()) || (averagePriceIsSet() && rhs.averagePriceIsSet() && getAveragePrice() == rhs.getAveragePrice()))
    
    ;
}

bool PriceCompetitivenessThresholdsDTO::operator!=(const PriceCompetitivenessThresholdsDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PriceCompetitivenessThresholdsDTO& o)
{
    j = nlohmann::json::object();
    if(o.optimalPriceIsSet())
        j["optimalPrice"] = o.m_OptimalPrice;
    if(o.averagePriceIsSet())
        j["averagePrice"] = o.m_AveragePrice;
    
}

void from_json(const nlohmann::json& j, PriceCompetitivenessThresholdsDTO& o)
{
    if(j.find("optimalPrice") != j.end())
    {
        j.at("optimalPrice").get_to(o.m_OptimalPrice);
        o.m_OptimalPriceIsSet = true;
    } 
    if(j.find("averagePrice") != j.end())
    {
        j.at("averagePrice").get_to(o.m_AveragePrice);
        o.m_AveragePriceIsSet = true;
    } 
    
}

org::openapitools::server::model::BasePriceDTO PriceCompetitivenessThresholdsDTO::getOptimalPrice() const
{
    return m_OptimalPrice;
}
void PriceCompetitivenessThresholdsDTO::setOptimalPrice(org::openapitools::server::model::BasePriceDTO const& value)
{
    m_OptimalPrice = value;
    m_OptimalPriceIsSet = true;
}
bool PriceCompetitivenessThresholdsDTO::optimalPriceIsSet() const
{
    return m_OptimalPriceIsSet;
}
void PriceCompetitivenessThresholdsDTO::unsetOptimalPrice()
{
    m_OptimalPriceIsSet = false;
}
org::openapitools::server::model::BasePriceDTO PriceCompetitivenessThresholdsDTO::getAveragePrice() const
{
    return m_AveragePrice;
}
void PriceCompetitivenessThresholdsDTO::setAveragePrice(org::openapitools::server::model::BasePriceDTO const& value)
{
    m_AveragePrice = value;
    m_AveragePriceIsSet = true;
}
bool PriceCompetitivenessThresholdsDTO::averagePriceIsSet() const
{
    return m_AveragePriceIsSet;
}
void PriceCompetitivenessThresholdsDTO::unsetAveragePrice()
{
    m_AveragePriceIsSet = false;
}


} // namespace org::openapitools::server::model

