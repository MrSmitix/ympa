/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnItemDTO.h
 *
 * Список товаров в возврате.
 */

#ifndef ReturnItemDTO_H_
#define ReturnItemDTO_H_



#include "ReturnInstanceDTO.h"
#include <string>
#include "TrackDTO.h"
#include <vector>
#include "ReturnDecisionDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Список товаров в возврате.
/// </summary>
class  ReturnItemDTO 
{
public:
    ReturnItemDTO() = default;
    explicit ReturnItemDTO(boost::property_tree::ptree const& pt);
    virtual ~ReturnItemDTO() = default;

    ReturnItemDTO(const ReturnItemDTO& other) = default; // copy constructor
    ReturnItemDTO(ReturnItemDTO&& other) noexcept = default; // move constructor

    ReturnItemDTO& operator=(const ReturnItemDTO& other) = default; // copy assignment
    ReturnItemDTO& operator=(ReturnItemDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ReturnItemDTO members

    /// <summary>
    /// SKU на Маркете.
    /// </summary>
    int64_t getMarketSku() const;
    void setMarketSku(int64_t value);

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getShopSku() const;
    void setShopSku(std::string value);

    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int64_t getCount() const;
    void setCount(int64_t value);

    /// <summary>
    /// Список решений по возврату.
    /// </summary>
    std::vector<ReturnDecisionDTO> getDecisions() const;
    void setDecisions(std::vector<ReturnDecisionDTO> value);

    /// <summary>
    /// Список логистических позиций возврата.
    /// </summary>
    std::vector<ReturnInstanceDTO> getInstances() const;
    void setInstances(std::vector<ReturnInstanceDTO> value);

    /// <summary>
    /// Список трек-кодов для почтовых отправлений.
    /// </summary>
    std::vector<TrackDTO> getTracks() const;
    void setTracks(std::vector<TrackDTO> value);

protected:
    int64_t m_MarketSku = 0L;
    std::string m_ShopSku = "";
    int64_t m_Count = 0L;
    std::vector<ReturnDecisionDTO> m_Decisions;
    std::vector<ReturnInstanceDTO> m_Instances;
    std::vector<TrackDTO> m_Tracks;
};

std::vector<ReturnItemDTO> createReturnItemDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ReturnItemDTO>(const ReturnItemDTO& val) {
    return val.toPropertyTree();
}

template<>
inline ReturnItemDTO fromPt<ReturnItemDTO>(const boost::property_tree::ptree& pt) {
    ReturnItemDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ReturnItemDTO_H_ */
