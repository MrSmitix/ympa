/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnInstanceStockType.h
 *
 * Тип остатка на складе.
 */

#ifndef ReturnInstanceStockType_H_
#define ReturnInstanceStockType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Тип остатка на складе.
/// </summary>
class  ReturnInstanceStockType 
{
public:
    ReturnInstanceStockType() = default;
    explicit ReturnInstanceStockType(boost::property_tree::ptree const& pt);
    virtual ~ReturnInstanceStockType() = default;

    ReturnInstanceStockType(const ReturnInstanceStockType& other) = default; // copy constructor
    ReturnInstanceStockType(ReturnInstanceStockType&& other) noexcept = default; // move constructor

    ReturnInstanceStockType& operator=(const ReturnInstanceStockType& other) = default; // copy assignment
    ReturnInstanceStockType& operator=(ReturnInstanceStockType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// ReturnInstanceStockType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_ReturnInstanceStockTypeEnumValue;
};

std::vector<ReturnInstanceStockType> createReturnInstanceStockTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ReturnInstanceStockType>(const ReturnInstanceStockType& val) {
    return val.toPropertyTree();
}

template<>
inline ReturnInstanceStockType fromPt<ReturnInstanceStockType>(const boost::property_tree::ptree& pt) {
    ReturnInstanceStockType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ReturnInstanceStockType_H_ */
