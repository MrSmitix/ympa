/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CalculateTariffsOfferInfoDTO.h
 *
 * Стоимость услуг.
 */

#ifndef CalculateTariffsOfferInfoDTO_H_
#define CalculateTariffsOfferInfoDTO_H_



#include "CalculateTariffsOfferDTO.h"
#include "CalculatedTariffDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Стоимость услуг.
/// </summary>
class  CalculateTariffsOfferInfoDTO 
{
public:
    CalculateTariffsOfferInfoDTO() = default;
    explicit CalculateTariffsOfferInfoDTO(boost::property_tree::ptree const& pt);
    virtual ~CalculateTariffsOfferInfoDTO() = default;

    CalculateTariffsOfferInfoDTO(const CalculateTariffsOfferInfoDTO& other) = default; // copy constructor
    CalculateTariffsOfferInfoDTO(CalculateTariffsOfferInfoDTO&& other) noexcept = default; // move constructor

    CalculateTariffsOfferInfoDTO& operator=(const CalculateTariffsOfferInfoDTO& other) = default; // copy assignment
    CalculateTariffsOfferInfoDTO& operator=(CalculateTariffsOfferInfoDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CalculateTariffsOfferInfoDTO members

    /// <summary>
    /// 
    /// </summary>
    CalculateTariffsOfferDTO getOffer() const;
    void setOffer(CalculateTariffsOfferDTO value);

    /// <summary>
    /// Список услуг и их стоимость.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги &#x60;SORTING&#x60; (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
    /// </summary>
    std::vector<CalculatedTariffDTO> getTariffs() const;
    void setTariffs(std::vector<CalculatedTariffDTO> value);

protected:
    CalculateTariffsOfferDTO m_Offer;
    std::vector<CalculatedTariffDTO> m_Tariffs;
};

std::vector<CalculateTariffsOfferInfoDTO> createCalculateTariffsOfferInfoDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CalculateTariffsOfferInfoDTO>(const CalculateTariffsOfferInfoDTO& val) {
    return val.toPropertyTree();
}

template<>
inline CalculateTariffsOfferInfoDTO fromPt<CalculateTariffsOfferInfoDTO>(const boost::property_tree::ptree& pt) {
    CalculateTariffsOfferInfoDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CalculateTariffsOfferInfoDTO_H_ */
