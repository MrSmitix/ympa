/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderItemModificationDTO.h
 *
 * Список товаров в заказе.  Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.  Обязательный параметр. 
 */

#ifndef OrderItemModificationDTO_H_
#define OrderItemModificationDTO_H_



#include "BriefOrderItemInstanceDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Список товаров в заказе.  Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.  Обязательный параметр. 
/// </summary>
class  OrderItemModificationDTO 
{
public:
    OrderItemModificationDTO() = default;
    explicit OrderItemModificationDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderItemModificationDTO() = default;

    OrderItemModificationDTO(const OrderItemModificationDTO& other) = default; // copy constructor
    OrderItemModificationDTO(OrderItemModificationDTO&& other) noexcept = default; // move constructor

    OrderItemModificationDTO& operator=(const OrderItemModificationDTO& other) = default; // copy assignment
    OrderItemModificationDTO& operator=(OrderItemModificationDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrderItemModificationDTO members

    /// <summary>
    /// Идентификатор товара в рамках заказа.  Получить идентификатор можно с помощью ресурсов [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  Обязательный параметр. 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Новое количество товара.
    /// </summary>
    int32_t getCount() const;
    void setCount(int32_t value);

    /// <summary>
    /// Информация о маркировке единиц товара.  Передавайте в запросе все единицы товара, который подлежит маркировке.  Обязательный параметр, если в заказе есть товары, подлежащие маркировке [в системе «Честный ЗНАК»](https://честныйзнак.рф/). 
    /// </summary>
    std::vector<BriefOrderItemInstanceDTO> getInstances() const;
    void setInstances(std::vector<BriefOrderItemInstanceDTO> value);

protected:
    int64_t m_Id = 0L;
    int32_t m_Count = 0;
    std::vector<BriefOrderItemInstanceDTO> m_Instances;
};

std::vector<OrderItemModificationDTO> createOrderItemModificationDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderItemModificationDTO>(const OrderItemModificationDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrderItemModificationDTO fromPt<OrderItemModificationDTO>(const boost::property_tree::ptree& pt) {
    OrderItemModificationDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderItemModificationDTO_H_ */
