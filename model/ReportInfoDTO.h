/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ReportInfoDTO.h
 *
 * Статус генерации и ссылка на готовый отчет.
 */

#ifndef ReportInfoDTO_H_
#define ReportInfoDTO_H_


#include <string>
#include "ReportStatusType.h"
#include "ReportSubStatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Статус генерации и ссылка на готовый отчет.
/// </summary>
class  ReportInfoDTO
{
public:
    ReportInfoDTO();
    virtual ~ReportInfoDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ReportInfoDTO& rhs) const;
    bool operator!=(const ReportInfoDTO& rhs) const;

    /////////////////////////////////////////////
    /// ReportInfoDTO members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ReportStatusType getStatus() const;
    void setStatus(org::openapitools::server::model::ReportStatusType const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ReportSubStatusType getSubStatus() const;
    void setSubStatus(org::openapitools::server::model::ReportSubStatusType const& value);
    bool subStatusIsSet() const;
    void unsetSubStatus();
    /// <summary>
    /// Дата и время запроса на генерацию.
    /// </summary>
    std::string getGenerationRequestedAt() const;
    void setGenerationRequestedAt(std::string const& value);
    /// <summary>
    /// Дата и время завершения генерации.
    /// </summary>
    std::string getGenerationFinishedAt() const;
    void setGenerationFinishedAt(std::string const& value);
    bool generationFinishedAtIsSet() const;
    void unsetGenerationFinishedAt();
    /// <summary>
    /// Ссылка на готовый отчет.
    /// </summary>
    std::string getFile() const;
    void setFile(std::string const& value);
    bool fileIsSet() const;
    void unsetfile();
    /// <summary>
    /// Ожидаемая продолжительность генерации в миллисекундах.
    /// </summary>
    int64_t getEstimatedGenerationTime() const;
    void setEstimatedGenerationTime(int64_t const value);
    bool estimatedGenerationTimeIsSet() const;
    void unsetEstimatedGenerationTime();

    friend  void to_json(nlohmann::json& j, const ReportInfoDTO& o);
    friend  void from_json(const nlohmann::json& j, ReportInfoDTO& o);
protected:
    org::openapitools::server::model::ReportStatusType m_Status;

    org::openapitools::server::model::ReportSubStatusType m_SubStatus;
    bool m_SubStatusIsSet;
    std::string m_GenerationRequestedAt;

    std::string m_GenerationFinishedAt;
    bool m_GenerationFinishedAtIsSet;
    std::string m_file;
    bool m_fileIsSet;
    int64_t m_EstimatedGenerationTime;
    bool m_EstimatedGenerationTimeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ReportInfoDTO_H_ */
