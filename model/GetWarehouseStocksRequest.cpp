/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetWarehouseStocksRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetWarehouseStocksRequest::GetWarehouseStocksRequest()
{
    m_WithTurnover = false;
    m_WithTurnoverIsSet = false;
    m_Archived = false;
    m_ArchivedIsSet = false;
    m_OfferIdsIsSet = false;
    
}

void GetWarehouseStocksRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetWarehouseStocksRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetWarehouseStocksRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetWarehouseStocksRequest" : pathPrefix;

                 
    if (offerIdsIsSet())
    {
        const std::set<std::string>& value = m_OfferIds;
        const std::string currentValuePath = _pathPrefix + ".offerIds";
                
        
        if (value.size() > 500)
        {
            success = false;
            msg << currentValuePath << ": must have at most 500 elements;";
        }
        if (!org::openapitools::server::helpers::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }
 
                i++;
            }
        }

    }
    
    return success;
}

bool GetWarehouseStocksRequest::operator==(const GetWarehouseStocksRequest& rhs) const
{
    return
    
    
    
    ((!withTurnoverIsSet() && !rhs.withTurnoverIsSet()) || (withTurnoverIsSet() && rhs.withTurnoverIsSet() && isWithTurnover() == rhs.isWithTurnover())) &&
    
    
    ((!archivedIsSet() && !rhs.archivedIsSet()) || (archivedIsSet() && rhs.archivedIsSet() && isArchived() == rhs.isArchived())) &&
    
    
    ((!offerIdsIsSet() && !rhs.offerIdsIsSet()) || (offerIdsIsSet() && rhs.offerIdsIsSet() && getOfferIds() == rhs.getOfferIds()))
    
    ;
}

bool GetWarehouseStocksRequest::operator!=(const GetWarehouseStocksRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetWarehouseStocksRequest& o)
{
    j = nlohmann::json::object();
    if(o.withTurnoverIsSet())
        j["withTurnover"] = o.m_WithTurnover;
    if(o.archivedIsSet())
        j["archived"] = o.m_Archived;
    if(o.offerIdsIsSet() || !o.m_OfferIds.empty())
        j["offerIds"] = o.m_OfferIds;
    
}

void from_json(const nlohmann::json& j, GetWarehouseStocksRequest& o)
{
    if(j.find("withTurnover") != j.end())
    {
        j.at("withTurnover").get_to(o.m_WithTurnover);
        o.m_WithTurnoverIsSet = true;
    } 
    if(j.find("archived") != j.end())
    {
        j.at("archived").get_to(o.m_Archived);
        o.m_ArchivedIsSet = true;
    } 
    if(j.find("offerIds") != j.end())
    {
        j.at("offerIds").get_to(o.m_OfferIds);
        o.m_OfferIdsIsSet = true;
    } 
    
}

bool GetWarehouseStocksRequest::isWithTurnover() const
{
    return m_WithTurnover;
}
void GetWarehouseStocksRequest::setWithTurnover(bool const value)
{
    m_WithTurnover = value;
    m_WithTurnoverIsSet = true;
}
bool GetWarehouseStocksRequest::withTurnoverIsSet() const
{
    return m_WithTurnoverIsSet;
}
void GetWarehouseStocksRequest::unsetWithTurnover()
{
    m_WithTurnoverIsSet = false;
}
bool GetWarehouseStocksRequest::isArchived() const
{
    return m_Archived;
}
void GetWarehouseStocksRequest::setArchived(bool const value)
{
    m_Archived = value;
    m_ArchivedIsSet = true;
}
bool GetWarehouseStocksRequest::archivedIsSet() const
{
    return m_ArchivedIsSet;
}
void GetWarehouseStocksRequest::unsetArchived()
{
    m_ArchivedIsSet = false;
}
std::set<std::string> GetWarehouseStocksRequest::getOfferIds() const
{
    return m_OfferIds;
}
void GetWarehouseStocksRequest::setOfferIds(std::set<std::string> const& value)
{
    m_OfferIds = value;
    m_OfferIdsIsSet = true;
}
bool GetWarehouseStocksRequest::offerIdsIsSet() const
{
    return m_OfferIdsIsSet;
}
void GetWarehouseStocksRequest::unsetOfferIds()
{
    m_OfferIdsIsSet = false;
}


} // namespace org::openapitools::server::model

