/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DeletePromoOffersRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

DeletePromoOffersRequest::DeletePromoOffersRequest()
{
    m_PromoId = "";
    m_DeleteAllOffers = false;
    m_DeleteAllOffersIsSet = false;
    m_OfferIdsIsSet = false;
    
}

void DeletePromoOffersRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool DeletePromoOffersRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool DeletePromoOffersRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "DeletePromoOffersRequest" : pathPrefix;

                 
    if (offerIdsIsSet())
    {
        const std::vector<std::string>& value = m_OfferIds;
        const std::string currentValuePath = _pathPrefix + ".offerIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 500)
        {
            success = false;
            msg << currentValuePath << ": must have at most 500 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }
 
                i++;
            }
        }

    }
    
    return success;
}

bool DeletePromoOffersRequest::operator==(const DeletePromoOffersRequest& rhs) const
{
    return
    
    
    (getPromoId() == rhs.getPromoId())
     &&
    
    
    ((!deleteAllOffersIsSet() && !rhs.deleteAllOffersIsSet()) || (deleteAllOffersIsSet() && rhs.deleteAllOffersIsSet() && isDeleteAllOffers() == rhs.isDeleteAllOffers())) &&
    
    
    ((!offerIdsIsSet() && !rhs.offerIdsIsSet()) || (offerIdsIsSet() && rhs.offerIdsIsSet() && getOfferIds() == rhs.getOfferIds()))
    
    ;
}

bool DeletePromoOffersRequest::operator!=(const DeletePromoOffersRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DeletePromoOffersRequest& o)
{
    j = nlohmann::json::object();
    j["promoId"] = o.m_PromoId;
    if(o.deleteAllOffersIsSet())
        j["deleteAllOffers"] = o.m_DeleteAllOffers;
    if(o.offerIdsIsSet() || !o.m_OfferIds.empty())
        j["offerIds"] = o.m_OfferIds;
    
}

void from_json(const nlohmann::json& j, DeletePromoOffersRequest& o)
{
    j.at("promoId").get_to(o.m_PromoId);
    if(j.find("deleteAllOffers") != j.end())
    {
        j.at("deleteAllOffers").get_to(o.m_DeleteAllOffers);
        o.m_DeleteAllOffersIsSet = true;
    } 
    if(j.find("offerIds") != j.end())
    {
        j.at("offerIds").get_to(o.m_OfferIds);
        o.m_OfferIdsIsSet = true;
    } 
    
}

std::string DeletePromoOffersRequest::getPromoId() const
{
    return m_PromoId;
}
void DeletePromoOffersRequest::setPromoId(std::string const& value)
{
    m_PromoId = value;
}
bool DeletePromoOffersRequest::isDeleteAllOffers() const
{
    return m_DeleteAllOffers;
}
void DeletePromoOffersRequest::setDeleteAllOffers(bool const value)
{
    m_DeleteAllOffers = value;
    m_DeleteAllOffersIsSet = true;
}
bool DeletePromoOffersRequest::deleteAllOffersIsSet() const
{
    return m_DeleteAllOffersIsSet;
}
void DeletePromoOffersRequest::unsetDeleteAllOffers()
{
    m_DeleteAllOffersIsSet = false;
}
std::vector<std::string> DeletePromoOffersRequest::getOfferIds() const
{
    return m_OfferIds;
}
void DeletePromoOffersRequest::setOfferIds(std::vector<std::string> const& value)
{
    m_OfferIds = value;
    m_OfferIdsIsSet = true;
}
bool DeletePromoOffersRequest::offerIdsIsSet() const
{
    return m_OfferIdsIsSet;
}
void DeletePromoOffersRequest::unsetOfferIds()
{
    m_OfferIdsIsSet = false;
}


} // namespace org::openapitools::server::model

