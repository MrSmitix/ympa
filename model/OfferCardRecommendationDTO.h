/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferCardRecommendationDTO.h
 *
 * Рекомендация по заполнению карточки товара.
 */

#ifndef OfferCardRecommendationDTO_H_
#define OfferCardRecommendationDTO_H_



#include "OfferCardRecommendationType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Рекомендация по заполнению карточки товара.
/// </summary>
class  OfferCardRecommendationDTO 
{
public:
    OfferCardRecommendationDTO() = default;
    explicit OfferCardRecommendationDTO(boost::property_tree::ptree const& pt);
    virtual ~OfferCardRecommendationDTO() = default;

    OfferCardRecommendationDTO(const OfferCardRecommendationDTO& other) = default; // copy constructor
    OfferCardRecommendationDTO(OfferCardRecommendationDTO&& other) noexcept = default; // move constructor

    OfferCardRecommendationDTO& operator=(const OfferCardRecommendationDTO& other) = default; // copy assignment
    OfferCardRecommendationDTO& operator=(OfferCardRecommendationDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OfferCardRecommendationDTO members

    /// <summary>
    /// 
    /// </summary>
    OfferCardRecommendationType getType() const;
    void setType(OfferCardRecommendationType value);

    /// <summary>
    /// Процент выполнения рекомендации. Указывается для рекомендаций некоторых типов.
    /// </summary>
    int32_t getPercent() const;
    void setPercent(int32_t value);

protected:
    OfferCardRecommendationType m_Type = OfferCardRecommendationType{};
    int32_t m_Percent = 0;
};

std::vector<OfferCardRecommendationDTO> createOfferCardRecommendationDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OfferCardRecommendationDTO>(const OfferCardRecommendationDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OfferCardRecommendationDTO fromPt<OfferCardRecommendationDTO>(const boost::property_tree::ptree& pt) {
    OfferCardRecommendationDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OfferCardRecommendationDTO_H_ */
