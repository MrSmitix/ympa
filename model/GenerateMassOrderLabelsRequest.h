/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateMassOrderLabelsRequest.h
 *
 * Данные, необходимые для генерации файла. 
 */

#ifndef GenerateMassOrderLabelsRequest_H_
#define GenerateMassOrderLabelsRequest_H_



#include <set>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Данные, необходимые для генерации файла. 
/// </summary>
class  GenerateMassOrderLabelsRequest 
{
public:
    GenerateMassOrderLabelsRequest() = default;
    explicit GenerateMassOrderLabelsRequest(boost::property_tree::ptree const& pt);
    virtual ~GenerateMassOrderLabelsRequest() = default;

    GenerateMassOrderLabelsRequest(const GenerateMassOrderLabelsRequest& other) = default; // copy constructor
    GenerateMassOrderLabelsRequest(GenerateMassOrderLabelsRequest&& other) noexcept = default; // move constructor

    GenerateMassOrderLabelsRequest& operator=(const GenerateMassOrderLabelsRequest& other) = default; // copy assignment
    GenerateMassOrderLabelsRequest& operator=(GenerateMassOrderLabelsRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GenerateMassOrderLabelsRequest members

    /// <summary>
    /// Идентификатор кабинета.
    /// </summary>
    int64_t getBusinessId() const;
    void setBusinessId(int64_t value);

    /// <summary>
    /// Список идентификаторов заказов.
    /// </summary>
    std::set<int64_t> getOrderIds() const;
    void setOrderIds(std::set<int64_t> value);

protected:
    int64_t m_BusinessId = 0L;
    std::set<int64_t> m_OrderIds;
};

std::vector<GenerateMassOrderLabelsRequest> createGenerateMassOrderLabelsRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GenerateMassOrderLabelsRequest>(const GenerateMassOrderLabelsRequest& val) {
    return val.toPropertyTree();
}

template<>
inline GenerateMassOrderLabelsRequest fromPt<GenerateMassOrderLabelsRequest>(const boost::property_tree::ptree& pt) {
    GenerateMassOrderLabelsRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GenerateMassOrderLabelsRequest_H_ */
