/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersStatsPaymentDTO.h
 *
 * Информация о денежных переводах по заказу.
 */

#ifndef OrdersStatsPaymentDTO_H_
#define OrdersStatsPaymentDTO_H_



#include "OrdersStatsPaymentOrderDTO.h"
#include "OrdersStatsPaymentType.h"
#include <string>
#include "OrdersStatsPaymentSourceType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о денежных переводах по заказу.
/// </summary>
class  OrdersStatsPaymentDTO 
{
public:
    OrdersStatsPaymentDTO() = default;
    explicit OrdersStatsPaymentDTO(boost::property_tree::ptree const& pt);
    virtual ~OrdersStatsPaymentDTO() = default;

    OrdersStatsPaymentDTO(const OrdersStatsPaymentDTO& other) = default; // copy constructor
    OrdersStatsPaymentDTO(OrdersStatsPaymentDTO&& other) noexcept = default; // move constructor

    OrdersStatsPaymentDTO& operator=(const OrdersStatsPaymentDTO& other) = default; // copy assignment
    OrdersStatsPaymentDTO& operator=(OrdersStatsPaymentDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrdersStatsPaymentDTO members

    /// <summary>
    /// Идентификатор денежного перевода.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Дата денежного перевода.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
    /// </summary>
    std::string getDate() const;
    void setDate(std::string value);

    /// <summary>
    /// 
    /// </summary>
    OrdersStatsPaymentType getType() const;
    void setType(OrdersStatsPaymentType value);

    /// <summary>
    /// 
    /// </summary>
    OrdersStatsPaymentSourceType getSource() const;
    void setSource(OrdersStatsPaymentSourceType value);

    /// <summary>
    /// Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. 
    /// </summary>
    double getTotal() const;
    void setTotal(double value);

    /// <summary>
    /// 
    /// </summary>
    OrdersStatsPaymentOrderDTO getPaymentOrder() const;
    void setPaymentOrder(OrdersStatsPaymentOrderDTO value);

protected:
    std::string m_Id = "";
    std::string m_date = "";
    OrdersStatsPaymentType m_Type = OrdersStatsPaymentType{};
    OrdersStatsPaymentSourceType m_Source = OrdersStatsPaymentSourceType{};
    double m_Total = 0.0;
    OrdersStatsPaymentOrderDTO m_PaymentOrder;
};

std::vector<OrdersStatsPaymentDTO> createOrdersStatsPaymentDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrdersStatsPaymentDTO>(const OrdersStatsPaymentDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrdersStatsPaymentDTO fromPt<OrdersStatsPaymentDTO>(const boost::property_tree::ptree& pt) {
    OrdersStatsPaymentDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrdersStatsPaymentDTO_H_ */
