/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersStatsPaymentDTO.h
 *
 * Информация о денежных переводах по заказу.
 */

#ifndef OrdersStatsPaymentDTO_H_
#define OrdersStatsPaymentDTO_H_



#include "OrdersStatsPaymentOrderDTO.h"
#include "OrdersStatsPaymentType.h"
#include <string>
#include "OrdersStatsPaymentSourceType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о денежных переводах по заказу.
/// </summary>
class  OrdersStatsPaymentDTO 
{
public:
    OrdersStatsPaymentDTO() = default;
    explicit OrdersStatsPaymentDTO(boost::property_tree::ptree const& pt);
    virtual ~OrdersStatsPaymentDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// OrdersStatsPaymentDTO members

    /// <summary>
    /// Идентификатор денежного перевода.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Дата денежного перевода.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
    /// </summary>
    std::string getDate() const;
    void setDate(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrdersStatsPaymentType> getType() const;
    void setType(std::shared_ptr<OrdersStatsPaymentType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrdersStatsPaymentSourceType> getSource() const;
    void setSource(std::shared_ptr<OrdersStatsPaymentSourceType> value);

    /// <summary>
    /// Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. 
    /// </summary>
    double getTotal() const;
    void setTotal(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrdersStatsPaymentOrderDTO> getPaymentOrder() const;
    void setPaymentOrder(std::shared_ptr<OrdersStatsPaymentOrderDTO> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Id = "";
    std::string m_date = "";
    std::shared_ptr<OrdersStatsPaymentType> m_Type = std::make_shared<OrdersStatsPaymentType>();
    std::shared_ptr<OrdersStatsPaymentSourceType> m_Source = std::make_shared<OrdersStatsPaymentSourceType>();
    double m_Total = 0.0;
    std::shared_ptr<OrdersStatsPaymentOrderDTO> m_PaymentOrder;
};

std::vector<OrdersStatsPaymentDTO> createOrdersStatsPaymentDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* OrdersStatsPaymentDTO_H_ */
