/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OutletAddressDTO.h
 *
 * Адрес точки продаж. 
 */

#ifndef OutletAddressDTO_H_
#define OutletAddressDTO_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Адрес точки продаж. 
/// </summary>
class  OutletAddressDTO
{
public:
    OutletAddressDTO();
    virtual ~OutletAddressDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OutletAddressDTO& rhs) const;
    bool operator!=(const OutletAddressDTO& rhs) const;

    /////////////////////////////////////////////
    /// OutletAddressDTO members

    /// <summary>
    /// Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
    /// </summary>
    int64_t getRegionId() const;
    void setRegionId(int64_t const value);
    /// <summary>
    /// Улица.
    /// </summary>
    std::string getStreet() const;
    void setStreet(std::string const& value);
    bool streetIsSet() const;
    void unsetStreet();
    /// <summary>
    /// Номер дома.
    /// </summary>
    std::string getNumber() const;
    void setNumber(std::string const& value);
    bool numberIsSet() const;
    void unsetnumber();
    /// <summary>
    /// Номер строения.
    /// </summary>
    std::string getBuilding() const;
    void setBuilding(std::string const& value);
    bool buildingIsSet() const;
    void unsetBuilding();
    /// <summary>
    /// Номер владения.
    /// </summary>
    std::string getEstate() const;
    void setEstate(std::string const& value);
    bool estateIsSet() const;
    void unsetEstate();
    /// <summary>
    /// Номер корпуса.
    /// </summary>
    std::string getBlock() const;
    void setBlock(std::string const& value);
    bool blockIsSet() const;
    void unsetBlock();
    /// <summary>
    /// Дополнительная информация.
    /// </summary>
    std::string getAdditional() const;
    void setAdditional(std::string const& value);
    bool additionalIsSet() const;
    void unsetAdditional();
    /// <summary>
    /// Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
    /// </summary>
    int32_t getKm() const;
    void setKm(int32_t const value);
    bool kmIsSet() const;
    void unsetKm();
    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %} 
    /// </summary>
    std::string getCity() const;
    void setCity(std::string const& value);
    bool cityIsSet() const;
    void unsetCity();

    friend  void to_json(nlohmann::json& j, const OutletAddressDTO& o);
    friend  void from_json(const nlohmann::json& j, OutletAddressDTO& o);
protected:
    int64_t m_RegionId;

    std::string m_Street;
    bool m_StreetIsSet;
    std::string m_number;
    bool m_numberIsSet;
    std::string m_Building;
    bool m_BuildingIsSet;
    std::string m_Estate;
    bool m_EstateIsSet;
    std::string m_Block;
    bool m_BlockIsSet;
    std::string m_Additional;
    bool m_AdditionalIsSet;
    int32_t m_Km;
    bool m_KmIsSet;
    std::string m_City;
    bool m_CityIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OutletAddressDTO_H_ */
