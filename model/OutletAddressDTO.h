/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OutletAddressDTO.h
 *
 * Адрес точки продаж. 
 */

#ifndef OutletAddressDTO_H_
#define OutletAddressDTO_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Адрес точки продаж. 
/// </summary>
class  OutletAddressDTO 
{
public:
    OutletAddressDTO() = default;
    explicit OutletAddressDTO(boost::property_tree::ptree const& pt);
    virtual ~OutletAddressDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// OutletAddressDTO members

    /// <summary>
    /// Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
    /// </summary>
    int64_t getRegionId() const;
    void setRegionId(int64_t value);

    /// <summary>
    /// Улица.
    /// </summary>
    std::string getStreet() const;
    void setStreet(std::string value);

    /// <summary>
    /// Номер дома.
    /// </summary>
    std::string getNumber() const;
    void setNumber(std::string value);

    /// <summary>
    /// Номер строения.
    /// </summary>
    std::string getBuilding() const;
    void setBuilding(std::string value);

    /// <summary>
    /// Номер владения.
    /// </summary>
    std::string getEstate() const;
    void setEstate(std::string value);

    /// <summary>
    /// Номер корпуса.
    /// </summary>
    std::string getBlock() const;
    void setBlock(std::string value);

    /// <summary>
    /// Дополнительная информация.
    /// </summary>
    std::string getAdditional() const;
    void setAdditional(std::string value);

    /// <summary>
    /// Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
    /// </summary>
    int32_t getKm() const;
    void setKm(int32_t value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %} 
    /// </summary>
    std::string getCity() const;
    void setCity(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_RegionId = 0L;
    std::string m_Street = "";
    std::string m_number = "";
    std::string m_Building = "";
    std::string m_Estate = "";
    std::string m_Block = "";
    std::string m_Additional = "";
    int32_t m_Km = 0;
    std::string m_City = "";
};

std::vector<OutletAddressDTO> createOutletAddressDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* OutletAddressDTO_H_ */
