/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrderItemPromoDTO.h
 *
 * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
 */

#ifndef OrderItemPromoDTO_H_
#define OrderItemPromoDTO_H_


#include <string>
#include "OrderPromoType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
/// </summary>
class  OrderItemPromoDTO
{
public:
    OrderItemPromoDTO();
    virtual ~OrderItemPromoDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OrderItemPromoDTO& rhs) const;
    bool operator!=(const OrderItemPromoDTO& rhs) const;

    /////////////////////////////////////////////
    /// OrderItemPromoDTO members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrderPromoType getType() const;
    void setType(org::openapitools::server::model::OrderPromoType const& value);
    /// <summary>
    /// Размер пользовательской скидки в валюте покупателя. 
    /// </summary>
    double getDiscount() const;
    void setDiscount(double const value);
    bool discountIsSet() const;
    void unsetDiscount();
    /// <summary>
    /// Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа. 
    /// </summary>
    double getSubsidy() const;
    void setSubsidy(double const value);
    bool subsidyIsSet() const;
    void unsetSubsidy();
    /// <summary>
    /// Идентификатор акции поставщика. 
    /// </summary>
    std::string getShopPromoId() const;
    void setShopPromoId(std::string const& value);
    bool shopPromoIdIsSet() const;
    void unsetShopPromoId();
    /// <summary>
    /// Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр &#x60;type&#x3D;MARKET_DEAL&#x60;. 
    /// </summary>
    std::string getMarketPromoId() const;
    void setMarketPromoId(std::string const& value);
    bool marketPromoIdIsSet() const;
    void unsetMarketPromoId();

    friend  void to_json(nlohmann::json& j, const OrderItemPromoDTO& o);
    friend  void from_json(const nlohmann::json& j, OrderItemPromoDTO& o);
protected:
    org::openapitools::server::model::OrderPromoType m_Type;

    double m_Discount;
    bool m_DiscountIsSet;
    double m_Subsidy;
    bool m_SubsidyIsSet;
    std::string m_ShopPromoId;
    bool m_ShopPromoIdIsSet;
    std::string m_MarketPromoId;
    bool m_MarketPromoIdIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OrderItemPromoDTO_H_ */
