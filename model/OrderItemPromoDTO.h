/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderItemPromoDTO.h
 *
 * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
 */

#ifndef OrderItemPromoDTO_H_
#define OrderItemPromoDTO_H_



#include <string>
#include "OrderPromoType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
/// </summary>
class  OrderItemPromoDTO 
{
public:
    OrderItemPromoDTO() = default;
    explicit OrderItemPromoDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderItemPromoDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// OrderItemPromoDTO members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderPromoType> getType() const;
    void setType(std::shared_ptr<OrderPromoType> value);

    /// <summary>
    /// Размер пользовательской скидки в валюте покупателя. 
    /// </summary>
    double getDiscount() const;
    void setDiscount(double value);

    /// <summary>
    /// Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа. 
    /// </summary>
    double getSubsidy() const;
    void setSubsidy(double value);

    /// <summary>
    /// Идентификатор акции поставщика. 
    /// </summary>
    std::string getShopPromoId() const;
    void setShopPromoId(std::string value);

    /// <summary>
    /// Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр &#x60;type&#x3D;MARKET_DEAL&#x60;. 
    /// </summary>
    std::string getMarketPromoId() const;
    void setMarketPromoId(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::shared_ptr<OrderPromoType> m_Type = std::make_shared<OrderPromoType>();
    double m_Discount = 0.0;
    double m_Subsidy = 0.0;
    std::string m_ShopPromoId = "";
    std::string m_MarketPromoId = "";
};

std::vector<OrderItemPromoDTO> createOrderItemPromoDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* OrderItemPromoDTO_H_ */
