/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MaxSaleQuantumDTO.h
 *
 * Лимит на установку кванта и минимального количества товаров по категориям. 
 */

#ifndef MaxSaleQuantumDTO_H_
#define MaxSaleQuantumDTO_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Лимит на установку кванта и минимального количества товаров по категориям. 
/// </summary>
class  MaxSaleQuantumDTO 
{
public:
    MaxSaleQuantumDTO() = default;
    explicit MaxSaleQuantumDTO(boost::property_tree::ptree const& pt);
    virtual ~MaxSaleQuantumDTO() = default;

    MaxSaleQuantumDTO(const MaxSaleQuantumDTO& other) = default; // copy constructor
    MaxSaleQuantumDTO(MaxSaleQuantumDTO&& other) noexcept = default; // move constructor

    MaxSaleQuantumDTO& operator=(const MaxSaleQuantumDTO& other) = default; // copy assignment
    MaxSaleQuantumDTO& operator=(MaxSaleQuantumDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MaxSaleQuantumDTO members

    /// <summary>
    /// Идентификатор категории.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Название категории.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Лимит на установку кванта и минимального количества товаров.
    /// </summary>
    int32_t getMaxSaleQuantum() const;
    void setMaxSaleQuantum(int32_t value);

protected:
    int64_t m_Id = 0L;
    std::string m_Name = "";
    int32_t m_MaxSaleQuantum = 0;
};

std::vector<MaxSaleQuantumDTO> createMaxSaleQuantumDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MaxSaleQuantumDTO>(const MaxSaleQuantumDTO& val) {
    return val.toPropertyTree();
}

template<>
inline MaxSaleQuantumDTO fromPt<MaxSaleQuantumDTO>(const boost::property_tree::ptree& pt) {
    MaxSaleQuantumDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MaxSaleQuantumDTO_H_ */
