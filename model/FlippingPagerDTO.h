/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FlippingPagerDTO.h
 *
 * Модель для пагинации.
 */

#ifndef FlippingPagerDTO_H_
#define FlippingPagerDTO_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Модель для пагинации.
/// </summary>
class  FlippingPagerDTO
{
public:
    FlippingPagerDTO();
    virtual ~FlippingPagerDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FlippingPagerDTO& rhs) const;
    bool operator!=(const FlippingPagerDTO& rhs) const;

    /////////////////////////////////////////////
    /// FlippingPagerDTO members

    /// <summary>
    /// Сколько всего найдено элементов.
    /// </summary>
    int32_t getTotal() const;
    void setTotal(int32_t const value);
    bool totalIsSet() const;
    void unsetTotal();
    /// <summary>
    /// Начальный номер найденного элемента на странице.
    /// </summary>
    int32_t getFrom() const;
    void setFrom(int32_t const value);
    bool fromIsSet() const;
    void unsetFrom();
    /// <summary>
    /// Конечный номер найденного элемента на странице.
    /// </summary>
    int32_t getTo() const;
    void setTo(int32_t const value);
    bool toIsSet() const;
    void unsetTo();
    /// <summary>
    /// Текущая страница.
    /// </summary>
    int32_t getCurrentPage() const;
    void setCurrentPage(int32_t const value);
    bool currentPageIsSet() const;
    void unsetCurrentPage();
    /// <summary>
    /// Общее количество страниц.
    /// </summary>
    int32_t getPagesCount() const;
    void setPagesCount(int32_t const value);
    bool pagesCountIsSet() const;
    void unsetPagesCount();
    /// <summary>
    /// Размер страницы.
    /// </summary>
    int32_t getPageSize() const;
    void setPageSize(int32_t const value);
    bool pageSizeIsSet() const;
    void unsetPageSize();

    friend  void to_json(nlohmann::json& j, const FlippingPagerDTO& o);
    friend  void from_json(const nlohmann::json& j, FlippingPagerDTO& o);
protected:
    int32_t m_Total;
    bool m_TotalIsSet;
    int32_t m_From;
    bool m_FromIsSet;
    int32_t m_To;
    bool m_ToIsSet;
    int32_t m_CurrentPage;
    bool m_CurrentPageIsSet;
    int32_t m_PagesCount;
    bool m_PagesCountIsSet;
    int32_t m_PageSize;
    bool m_PageSizeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* FlippingPagerDTO_H_ */
