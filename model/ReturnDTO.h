/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnDTO.h
 *
 * Возврат заказа.
 */

#ifndef ReturnDTO_H_
#define ReturnDTO_H_



#include "RefundStatusType.h"
#include "RecipientType.h"
#include "ReturnType.h"
#include "ReturnShipmentStatusType.h"
#include <string>
#include "LogisticPickupPointDTO.h"
#include "ReturnItemDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Возврат заказа.
/// </summary>
class  ReturnDTO 
{
public:
    ReturnDTO() = default;
    explicit ReturnDTO(boost::property_tree::ptree const& pt);
    virtual ~ReturnDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// ReturnDTO members

    /// <summary>
    /// Идентификатор возврата.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Номер заказа.
    /// </summary>
    int64_t getOrderId() const;
    void setOrderId(int64_t value);

    /// <summary>
    /// Дата создания возврата клиентом.
    /// </summary>
    std::string getCreationDate() const;
    void setCreationDate(std::string value);

    /// <summary>
    /// Дата обновления возврата.
    /// </summary>
    std::string getUpdateDate() const;
    void setUpdateDate(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RefundStatusType> getRefundStatus() const;
    void setRefundStatus(std::shared_ptr<RefundStatusType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LogisticPickupPointDTO> getLogisticPickupPoint() const;
    void setLogisticPickupPoint(std::shared_ptr<LogisticPickupPointDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RecipientType> getShipmentRecipientType() const;
    void setShipmentRecipientType(std::shared_ptr<RecipientType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReturnShipmentStatusType> getShipmentStatus() const;
    void setShipmentStatus(std::shared_ptr<ReturnShipmentStatusType> value);

    /// <summary>
    /// Сумма возврата.
    /// </summary>
    int64_t getRefundAmount() const;
    void setRefundAmount(int64_t value);

    /// <summary>
    /// Список товаров в возврате.
    /// </summary>
    std::vector<std::shared_ptr<ReturnItemDTO>> getItems() const;
    void setItems(std::vector<std::shared_ptr<ReturnItemDTO>> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReturnType> getReturnType() const;
    void setReturnType(std::shared_ptr<ReturnType> value);

    /// <summary>
    /// Используется ли опция **Быстрый возврат денег за дешевый брак**. 
    /// </summary>
    bool isFastReturn() const;
    void setFastReturn(bool value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_Id = 0L;
    int64_t m_OrderId = 0L;
    std::string m_CreationDate = "";
    std::string m_UpdateDate = "";
    std::shared_ptr<RefundStatusType> m_RefundStatus = std::make_shared<RefundStatusType>();
    std::shared_ptr<LogisticPickupPointDTO> m_LogisticPickupPoint;
    std::shared_ptr<RecipientType> m_ShipmentRecipientType = std::make_shared<RecipientType>();
    std::shared_ptr<ReturnShipmentStatusType> m_ShipmentStatus = std::make_shared<ReturnShipmentStatusType>();
    int64_t m_RefundAmount = 0L;
    std::vector<std::shared_ptr<ReturnItemDTO>> m_Items;
    std::shared_ptr<ReturnType> m_ReturnType = std::make_shared<ReturnType>();
    bool m_FastReturn = false;
};

std::vector<ReturnDTO> createReturnDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* ReturnDTO_H_ */
