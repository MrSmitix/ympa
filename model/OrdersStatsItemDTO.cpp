/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrdersStatsItemDTO.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrdersStatsItemDTO::OrdersStatsItemDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string OrdersStatsItemDTO::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void OrdersStatsItemDTO::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree OrdersStatsItemDTO::toPropertyTree()
{
    return toPropertyTree_internal();
}

void OrdersStatsItemDTO::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string OrdersStatsItemDTO::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void OrdersStatsItemDTO::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OrdersStatsItemDTO::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("offerName", m_OfferName);
	pt.put("marketSku", m_MarketSku);
	pt.put("shopSku", m_ShopSku);
	pt.put("count", m_Count);
	// generate tree for Prices
	if (!m_Prices.empty()) {
		for (const auto &childEntry : m_Prices) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("prices", tmp_node);
		tmp_node.clear();
	}
	if (m_Warehouse != nullptr) {
		pt.add_child("warehouse", m_Warehouse->toPropertyTree());
	}
	// generate tree for Details
	if (!m_Details.empty()) {
		for (const auto &childEntry : m_Details) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("details", tmp_node);
		tmp_node.clear();
	}
	// generate tree for CisList
	if (!m_CisList.empty()) {
		for (const auto &childEntry : m_CisList) {
            ptree CisList_node;
            CisList_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", CisList_node));
		}
		pt.add_child("cisList", tmp_node);
		tmp_node.clear();
	}
	pt.put("initialCount", m_InitialCount);
	pt.put("bidFee", m_BidFee);
	pt.put("cofinanceThreshold", m_CofinanceThreshold);
	pt.put("cofinanceValue", m_CofinanceValue);
	return pt;
}

void OrdersStatsItemDTO::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_OfferName = pt.get("offerName", "");
	m_MarketSku = pt.get("marketSku", 0L);
	m_ShopSku = pt.get("shopSku", "");
	m_Count = pt.get("count", 0);
	// push all items of Prices into member vector
	if (pt.get_child_optional("prices")) {
		for (const auto &childTree : pt.get_child("prices")) {
            std::shared_ptr<OrdersStatsPriceDTO> val =
                std::make_shared<OrdersStatsPriceDTO>(childTree.second);
            m_Prices.emplace_back(std::move(val));
		}
	}
	if (pt.get_child_optional("warehouse")) {
		m_Warehouse = std::make_shared<OrdersStatsWarehouseDTO>();
		m_Warehouse->fromPropertyTree(pt.get_child("warehouse"));
	}
	// push all items of Details into member vector
	if (pt.get_child_optional("details")) {
		for (const auto &childTree : pt.get_child("details")) {
            std::shared_ptr<OrdersStatsDetailsDTO> val =
                std::make_shared<OrdersStatsDetailsDTO>(childTree.second);
            m_Details.emplace_back(std::move(val));
		}
	}
	// push all items of CisList into member vector
	if (pt.get_child_optional("cisList")) {
		for (const auto &childTree : pt.get_child("cisList")) {
            std::string val =
                childTree.second.data();
            m_CisList.emplace_back(std::move(val));
		}
	}
	m_InitialCount = pt.get("initialCount", 0);
	m_BidFee = pt.get("bidFee", 0);
	m_CofinanceThreshold = pt.get("cofinanceThreshold", 0.0);
	m_CofinanceValue = pt.get("cofinanceValue", 0.0);
}

std::string OrdersStatsItemDTO::getOfferName() const
{
    return m_OfferName;
}

void OrdersStatsItemDTO::setOfferName(std::string value)
{
	m_OfferName = value;
}
int64_t OrdersStatsItemDTO::getMarketSku() const
{
    return m_MarketSku;
}

void OrdersStatsItemDTO::setMarketSku(int64_t value)
{
	m_MarketSku = value;
}
std::string OrdersStatsItemDTO::getShopSku() const
{
    return m_ShopSku;
}

void OrdersStatsItemDTO::setShopSku(std::string value)
{
	m_ShopSku = value;
}
int32_t OrdersStatsItemDTO::getCount() const
{
    return m_Count;
}

void OrdersStatsItemDTO::setCount(int32_t value)
{
	m_Count = value;
}
std::vector<std::shared_ptr<OrdersStatsPriceDTO>> OrdersStatsItemDTO::getPrices() const
{
    return m_Prices;
}

void OrdersStatsItemDTO::setPrices(std::vector<std::shared_ptr<OrdersStatsPriceDTO>> value)
{
	m_Prices = value;
}
std::shared_ptr<OrdersStatsWarehouseDTO> OrdersStatsItemDTO::getWarehouse() const
{
    return m_Warehouse;
}

void OrdersStatsItemDTO::setWarehouse(std::shared_ptr<OrdersStatsWarehouseDTO> value)
{
	m_Warehouse = value;
}
std::vector<std::shared_ptr<OrdersStatsDetailsDTO>> OrdersStatsItemDTO::getDetails() const
{
    return m_Details;
}

void OrdersStatsItemDTO::setDetails(std::vector<std::shared_ptr<OrdersStatsDetailsDTO>> value)
{
	m_Details = value;
}
std::vector<std::string> OrdersStatsItemDTO::getCisList() const
{
    return m_CisList;
}

void OrdersStatsItemDTO::setCisList(std::vector<std::string> value)
{
	m_CisList = value;
}
int32_t OrdersStatsItemDTO::getInitialCount() const
{
    return m_InitialCount;
}

void OrdersStatsItemDTO::setInitialCount(int32_t value)
{
	m_InitialCount = value;
}
int32_t OrdersStatsItemDTO::getBidFee() const
{
    return m_BidFee;
}

void OrdersStatsItemDTO::setBidFee(int32_t value)
{
	m_BidFee = value;
}
double OrdersStatsItemDTO::getCofinanceThreshold() const
{
    return m_CofinanceThreshold;
}

void OrdersStatsItemDTO::setCofinanceThreshold(double value)
{
	m_CofinanceThreshold = value;
}
double OrdersStatsItemDTO::getCofinanceValue() const
{
    return m_CofinanceValue;
}

void OrdersStatsItemDTO::setCofinanceValue(double value)
{
	m_CofinanceValue = value;
}

std::vector<OrdersStatsItemDTO> createOrdersStatsItemDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OrdersStatsItemDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OrdersStatsItemDTO(child.second));
    }

    return vec;
}

}
}
}
}

