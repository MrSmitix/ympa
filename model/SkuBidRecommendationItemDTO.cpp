/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SkuBidRecommendationItemDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SkuBidRecommendationItemDTO::SkuBidRecommendationItemDTO()
{
    m_Sku = "";
    m_Bid = 0;
    m_BidRecommendationsIsSet = false;
    m_PriceRecommendationsIsSet = false;
    
}

void SkuBidRecommendationItemDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SkuBidRecommendationItemDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SkuBidRecommendationItemDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SkuBidRecommendationItemDTO" : pathPrefix;

         
    
    /* Sku */ {
        const std::string& value = m_Sku;
        const std::string currentValuePath = _pathPrefix + ".sku";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }

    }
         
    
    /* Bid */ {
        const int32_t& value = m_Bid;
        const std::string currentValuePath = _pathPrefix + ".bid";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 9999)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 9999;";
        }

    }
         
    if (bidRecommendationsIsSet())
    {
        const std::vector<org::openapitools::server::model::BidRecommendationItemDTO>& value = m_BidRecommendations;
        const std::string currentValuePath = _pathPrefix + ".bidRecommendations";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::BidRecommendationItemDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".bidRecommendations") && success;
 
                i++;
            }
        }

    }
         
    if (priceRecommendationsIsSet())
    {
        const std::vector<org::openapitools::server::model::PriceRecommendationItemDTO>& value = m_PriceRecommendations;
        const std::string currentValuePath = _pathPrefix + ".priceRecommendations";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::PriceRecommendationItemDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".priceRecommendations") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool SkuBidRecommendationItemDTO::operator==(const SkuBidRecommendationItemDTO& rhs) const
{
    return
    
    
    (getSku() == rhs.getSku())
     &&
    
    (getBid() == rhs.getBid())
     &&
    
    
    ((!bidRecommendationsIsSet() && !rhs.bidRecommendationsIsSet()) || (bidRecommendationsIsSet() && rhs.bidRecommendationsIsSet() && getBidRecommendations() == rhs.getBidRecommendations())) &&
    
    
    ((!priceRecommendationsIsSet() && !rhs.priceRecommendationsIsSet()) || (priceRecommendationsIsSet() && rhs.priceRecommendationsIsSet() && getPriceRecommendations() == rhs.getPriceRecommendations()))
    
    ;
}

bool SkuBidRecommendationItemDTO::operator!=(const SkuBidRecommendationItemDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SkuBidRecommendationItemDTO& o)
{
    j = nlohmann::json::object();
    j["sku"] = o.m_Sku;
    j["bid"] = o.m_Bid;
    if(o.bidRecommendationsIsSet() || !o.m_BidRecommendations.empty())
        j["bidRecommendations"] = o.m_BidRecommendations;
    if(o.priceRecommendationsIsSet() || !o.m_PriceRecommendations.empty())
        j["priceRecommendations"] = o.m_PriceRecommendations;
    
}

void from_json(const nlohmann::json& j, SkuBidRecommendationItemDTO& o)
{
    j.at("sku").get_to(o.m_Sku);
    j.at("bid").get_to(o.m_Bid);
    if(j.find("bidRecommendations") != j.end())
    {
        j.at("bidRecommendations").get_to(o.m_BidRecommendations);
        o.m_BidRecommendationsIsSet = true;
    } 
    if(j.find("priceRecommendations") != j.end())
    {
        j.at("priceRecommendations").get_to(o.m_PriceRecommendations);
        o.m_PriceRecommendationsIsSet = true;
    } 
    
}

std::string SkuBidRecommendationItemDTO::getSku() const
{
    return m_Sku;
}
void SkuBidRecommendationItemDTO::setSku(std::string const& value)
{
    m_Sku = value;
}
int32_t SkuBidRecommendationItemDTO::getBid() const
{
    return m_Bid;
}
void SkuBidRecommendationItemDTO::setBid(int32_t const value)
{
    m_Bid = value;
}
std::vector<org::openapitools::server::model::BidRecommendationItemDTO> SkuBidRecommendationItemDTO::getBidRecommendations() const
{
    return m_BidRecommendations;
}
void SkuBidRecommendationItemDTO::setBidRecommendations(std::vector<org::openapitools::server::model::BidRecommendationItemDTO> const& value)
{
    m_BidRecommendations = value;
    m_BidRecommendationsIsSet = true;
}
bool SkuBidRecommendationItemDTO::bidRecommendationsIsSet() const
{
    return m_BidRecommendationsIsSet;
}
void SkuBidRecommendationItemDTO::unsetBidRecommendations()
{
    m_BidRecommendationsIsSet = false;
}
std::vector<org::openapitools::server::model::PriceRecommendationItemDTO> SkuBidRecommendationItemDTO::getPriceRecommendations() const
{
    return m_PriceRecommendations;
}
void SkuBidRecommendationItemDTO::setPriceRecommendations(std::vector<org::openapitools::server::model::PriceRecommendationItemDTO> const& value)
{
    m_PriceRecommendations = value;
    m_PriceRecommendationsIsSet = true;
}
bool SkuBidRecommendationItemDTO::priceRecommendationsIsSet() const
{
    return m_PriceRecommendationsIsSet;
}
void SkuBidRecommendationItemDTO::unsetPriceRecommendations()
{
    m_PriceRecommendationsIsSet = false;
}


} // namespace org::openapitools::server::model

