/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrdersStatsItemDTO.h
 *
 * Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;). 
 */

#ifndef OrdersStatsItemDTO_H_
#define OrdersStatsItemDTO_H_


#include "OrdersStatsPriceDTO.h"
#include "OrdersStatsWarehouseDTO.h"
#include <string>
#include "OrdersStatsDetailsDTO.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;). 
/// </summary>
class  OrdersStatsItemDTO
{
public:
    OrdersStatsItemDTO();
    virtual ~OrdersStatsItemDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OrdersStatsItemDTO& rhs) const;
    bool operator!=(const OrdersStatsItemDTO& rhs) const;

    /////////////////////////////////////////////
    /// OrdersStatsItemDTO members

    /// <summary>
    /// Название товара.
    /// </summary>
    std::string getOfferName() const;
    void setOfferName(std::string const& value);
    bool offerNameIsSet() const;
    void unsetOfferName();
    /// <summary>
    /// SKU на Маркете.
    /// </summary>
    int64_t getMarketSku() const;
    void setMarketSku(int64_t const value);
    bool marketSkuIsSet() const;
    void unsetMarketSku();
    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    std::string getShopSku() const;
    void setShopSku(std::string const& value);
    bool shopSkuIsSet() const;
    void unsetShopSku();
    /// <summary>
    /// Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;. 
    /// </summary>
    int32_t getCount() const;
    void setCount(int32_t const value);
    bool countIsSet() const;
    void unsetCount();
    /// <summary>
    /// Цена или скидки на товар.
    /// </summary>
    std::vector<org::openapitools::server::model::OrdersStatsPriceDTO> getPrices() const;
    void setPrices(std::vector<org::openapitools::server::model::OrdersStatsPriceDTO> const& value);
    bool pricesIsSet() const;
    void unsetPrices();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::OrdersStatsWarehouseDTO getWarehouse() const;
    void setWarehouse(org::openapitools::server::model::OrdersStatsWarehouseDTO const& value);
    bool warehouseIsSet() const;
    void unsetWarehouse();
    /// <summary>
    /// Информация об удалении товара из заказа.
    /// </summary>
    std::vector<org::openapitools::server::model::OrdersStatsDetailsDTO> getDetails() const;
    void setDetails(std::vector<org::openapitools::server::model::OrdersStatsDetailsDTO> const& value);
    bool detailsIsSet() const;
    void unsetDetails();
    /// <summary>
    /// Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
    /// </summary>
    std::vector<std::string> getCisList() const;
    void setCisList(std::vector<std::string> const& value);
    bool cisListIsSet() const;
    void unsetCisList();
    /// <summary>
    /// Первоначальное количество единиц товара.
    /// </summary>
    int32_t getInitialCount() const;
    void setInitialCount(int32_t const value);
    bool initialCountIsSet() const;
    void unsetInitialCount();
    /// <summary>
    /// Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
    /// </summary>
    int32_t getBidFee() const;
    void setBidFee(int32_t const value);
    bool bidFeeIsSet() const;
    void unsetBidFee();
    /// <summary>
    /// Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
    /// </summary>
    double getCofinanceThreshold() const;
    void setCofinanceThreshold(double const value);
    bool cofinanceThresholdIsSet() const;
    void unsetCofinanceThreshold();
    /// <summary>
    /// Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
    /// </summary>
    double getCofinanceValue() const;
    void setCofinanceValue(double const value);
    bool cofinanceValueIsSet() const;
    void unsetCofinanceValue();

    friend  void to_json(nlohmann::json& j, const OrdersStatsItemDTO& o);
    friend  void from_json(const nlohmann::json& j, OrdersStatsItemDTO& o);
protected:
    std::string m_OfferName;
    bool m_OfferNameIsSet;
    int64_t m_MarketSku;
    bool m_MarketSkuIsSet;
    std::string m_ShopSku;
    bool m_ShopSkuIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    std::vector<org::openapitools::server::model::OrdersStatsPriceDTO> m_Prices;
    bool m_PricesIsSet;
    org::openapitools::server::model::OrdersStatsWarehouseDTO m_Warehouse;
    bool m_WarehouseIsSet;
    std::vector<org::openapitools::server::model::OrdersStatsDetailsDTO> m_Details;
    bool m_DetailsIsSet;
    std::vector<std::string> m_CisList;
    bool m_CisListIsSet;
    int32_t m_InitialCount;
    bool m_InitialCountIsSet;
    int32_t m_BidFee;
    bool m_BidFeeIsSet;
    double m_CofinanceThreshold;
    bool m_CofinanceThresholdIsSet;
    double m_CofinanceValue;
    bool m_CofinanceValueIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OrdersStatsItemDTO_H_ */
