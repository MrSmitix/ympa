/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FulfillmentWarehouseDTO.h
 *
 * Склад Маркета (FBY).
 */

#ifndef FulfillmentWarehouseDTO_H_
#define FulfillmentWarehouseDTO_H_



#include <string>
#include "WarehouseAddressDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Склад Маркета (FBY).
/// </summary>
class  FulfillmentWarehouseDTO 
{
public:
    FulfillmentWarehouseDTO() = default;
    explicit FulfillmentWarehouseDTO(boost::property_tree::ptree const& pt);
    virtual ~FulfillmentWarehouseDTO() = default;

    FulfillmentWarehouseDTO(const FulfillmentWarehouseDTO& other) = default; // copy constructor
    FulfillmentWarehouseDTO(FulfillmentWarehouseDTO&& other) noexcept = default; // move constructor

    FulfillmentWarehouseDTO& operator=(const FulfillmentWarehouseDTO& other) = default; // copy assignment
    FulfillmentWarehouseDTO& operator=(FulfillmentWarehouseDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FulfillmentWarehouseDTO members

    /// <summary>
    /// Идентификатор склада.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Название склада.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    WarehouseAddressDTO getAddress() const;
    void setAddress(WarehouseAddressDTO value);

protected:
    int64_t m_Id = 0L;
    std::string m_Name = "";
    WarehouseAddressDTO m_Address;
};

std::vector<FulfillmentWarehouseDTO> createFulfillmentWarehouseDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FulfillmentWarehouseDTO>(const FulfillmentWarehouseDTO& val) {
    return val.toPropertyTree();
}

template<>
inline FulfillmentWarehouseDTO fromPt<FulfillmentWarehouseDTO>(const boost::property_tree::ptree& pt) {
    FulfillmentWarehouseDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FulfillmentWarehouseDTO_H_ */
