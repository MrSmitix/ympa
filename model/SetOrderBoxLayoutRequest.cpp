/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SetOrderBoxLayoutRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SetOrderBoxLayoutRequest::SetOrderBoxLayoutRequest()
{
    m_AllowRemove = false;
    m_AllowRemoveIsSet = false;
    
}

void SetOrderBoxLayoutRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SetOrderBoxLayoutRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SetOrderBoxLayoutRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SetOrderBoxLayoutRequest" : pathPrefix;

         
    
    /* Boxes */ {
        const std::vector<org::openapitools::server::model::OrderBoxLayoutDTO>& value = m_Boxes;
        const std::string currentValuePath = _pathPrefix + ".boxes";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OrderBoxLayoutDTO& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".boxes") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool SetOrderBoxLayoutRequest::operator==(const SetOrderBoxLayoutRequest& rhs) const
{
    return
    
    
    (getBoxes() == rhs.getBoxes())
     &&
    
    
    ((!allowRemoveIsSet() && !rhs.allowRemoveIsSet()) || (allowRemoveIsSet() && rhs.allowRemoveIsSet() && isAllowRemove() == rhs.isAllowRemove()))
    
    ;
}

bool SetOrderBoxLayoutRequest::operator!=(const SetOrderBoxLayoutRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SetOrderBoxLayoutRequest& o)
{
    j = nlohmann::json::object();
    j["boxes"] = o.m_Boxes;
    if(o.allowRemoveIsSet())
        j["allowRemove"] = o.m_AllowRemove;
    
}

void from_json(const nlohmann::json& j, SetOrderBoxLayoutRequest& o)
{
    j.at("boxes").get_to(o.m_Boxes);
    if(j.find("allowRemove") != j.end())
    {
        j.at("allowRemove").get_to(o.m_AllowRemove);
        o.m_AllowRemoveIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::OrderBoxLayoutDTO> SetOrderBoxLayoutRequest::getBoxes() const
{
    return m_Boxes;
}
void SetOrderBoxLayoutRequest::setBoxes(std::vector<org::openapitools::server::model::OrderBoxLayoutDTO> const& value)
{
    m_Boxes = value;
}
bool SetOrderBoxLayoutRequest::isAllowRemove() const
{
    return m_AllowRemove;
}
void SetOrderBoxLayoutRequest::setAllowRemove(bool const value)
{
    m_AllowRemove = value;
    m_AllowRemoveIsSet = true;
}
bool SetOrderBoxLayoutRequest::allowRemoveIsSet() const
{
    return m_AllowRemoveIsSet;
}
void SetOrderBoxLayoutRequest::unsetAllowRemove()
{
    m_AllowRemoveIsSet = false;
}


} // namespace org::openapitools::server::model

