/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrderBoxLayoutItemDTO.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrderBoxLayoutItemDTO::OrderBoxLayoutItemDTO(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string OrderBoxLayoutItemDTO::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void OrderBoxLayoutItemDTO::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OrderBoxLayoutItemDTO::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("fullCount", m_FullCount);
	pt.add_child("partialCount", m_PartialCount.toPropertyTree());
	// generate tree for Instances
    tmp_node.clear();
	if (!m_Instances.empty()) {
        tmp_node = toPt(m_Instances);
		pt.add_child("instances", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void OrderBoxLayoutItemDTO::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", 0L);
	m_FullCount = pt.get("fullCount", 0);
	if (pt.get_child_optional("partialCount")) {
        m_PartialCount = fromPt<OrderBoxLayoutPartialCountDTO>(pt.get_child("partialCount"));
	}
	// push all items of Instances into member
	if (pt.get_child_optional("instances")) {
        m_Instances = fromPt<std::vector<BriefOrderItemInstanceDTO>>(pt.get_child("instances"));
	}
}

int64_t OrderBoxLayoutItemDTO::getId() const
{
    return m_Id;
}

void OrderBoxLayoutItemDTO::setId(int64_t value)
{
    m_Id = value;
}


int32_t OrderBoxLayoutItemDTO::getFullCount() const
{
    return m_FullCount;
}

void OrderBoxLayoutItemDTO::setFullCount(int32_t value)
{
    m_FullCount = value;
}


OrderBoxLayoutPartialCountDTO OrderBoxLayoutItemDTO::getPartialCount() const
{
    return m_PartialCount;
}

void OrderBoxLayoutItemDTO::setPartialCount(OrderBoxLayoutPartialCountDTO value)
{
    m_PartialCount = value;
}


std::vector<BriefOrderItemInstanceDTO> OrderBoxLayoutItemDTO::getInstances() const
{
    return m_Instances;
}

void OrderBoxLayoutItemDTO::setInstances(std::vector<BriefOrderItemInstanceDTO> value)
{
    m_Instances = value;
}



std::vector<OrderBoxLayoutItemDTO> createOrderBoxLayoutItemDTOVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OrderBoxLayoutItemDTO>();
    for (const auto& child: pt) {
        vec.emplace_back(OrderBoxLayoutItemDTO(child.second));
    }

    return vec;
}

}
}
}
}

