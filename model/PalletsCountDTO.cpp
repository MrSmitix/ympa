/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PalletsCountDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PalletsCountDTO::PalletsCountDTO()
{
    m_Planned = 0;
    m_PlannedIsSet = false;
    m_Fact = 0;
    m_FactIsSet = false;
    
}

void PalletsCountDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PalletsCountDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PalletsCountDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PalletsCountDTO" : pathPrefix;

            
    return success;
}

bool PalletsCountDTO::operator==(const PalletsCountDTO& rhs) const
{
    return
    
    
    
    ((!plannedIsSet() && !rhs.plannedIsSet()) || (plannedIsSet() && rhs.plannedIsSet() && getPlanned() == rhs.getPlanned())) &&
    
    
    ((!factIsSet() && !rhs.factIsSet()) || (factIsSet() && rhs.factIsSet() && getFact() == rhs.getFact()))
    
    ;
}

bool PalletsCountDTO::operator!=(const PalletsCountDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PalletsCountDTO& o)
{
    j = nlohmann::json::object();
    if(o.plannedIsSet())
        j["planned"] = o.m_Planned;
    if(o.factIsSet())
        j["fact"] = o.m_Fact;
    
}

void from_json(const nlohmann::json& j, PalletsCountDTO& o)
{
    if(j.find("planned") != j.end())
    {
        j.at("planned").get_to(o.m_Planned);
        o.m_PlannedIsSet = true;
    } 
    if(j.find("fact") != j.end())
    {
        j.at("fact").get_to(o.m_Fact);
        o.m_FactIsSet = true;
    } 
    
}

int32_t PalletsCountDTO::getPlanned() const
{
    return m_Planned;
}
void PalletsCountDTO::setPlanned(int32_t const value)
{
    m_Planned = value;
    m_PlannedIsSet = true;
}
bool PalletsCountDTO::plannedIsSet() const
{
    return m_PlannedIsSet;
}
void PalletsCountDTO::unsetPlanned()
{
    m_PlannedIsSet = false;
}
int32_t PalletsCountDTO::getFact() const
{
    return m_Fact;
}
void PalletsCountDTO::setFact(int32_t const value)
{
    m_Fact = value;
    m_FactIsSet = true;
}
bool PalletsCountDTO::factIsSet() const
{
    return m_FactIsSet;
}
void PalletsCountDTO::unsetFact()
{
    m_FactIsSet = false;
}


} // namespace org::openapitools::server::model

