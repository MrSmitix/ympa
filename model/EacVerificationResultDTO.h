/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * EacVerificationResultDTO.h
 *
 * Результат выполнения запроса.
 */

#ifndef EacVerificationResultDTO_H_
#define EacVerificationResultDTO_H_


#include "EacVerificationStatusType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Результат выполнения запроса.
/// </summary>
class  EacVerificationResultDTO
{
public:
    EacVerificationResultDTO();
    virtual ~EacVerificationResultDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const EacVerificationResultDTO& rhs) const;
    bool operator!=(const EacVerificationResultDTO& rhs) const;

    /////////////////////////////////////////////
    /// EacVerificationResultDTO members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::EacVerificationStatusType getVerificationResult() const;
    void setVerificationResult(org::openapitools::server::model::EacVerificationStatusType const& value);
    bool verificationResultIsSet() const;
    void unsetVerificationResult();
    /// <summary>
    /// Количество оставшихся попыток проверки кода.  Возвращается, если магазин отправил некорректный код.  Когда все попытки будут исчерпаны, код обновится. 
    /// </summary>
    int32_t getAttemptsLeft() const;
    void setAttemptsLeft(int32_t const value);
    bool attemptsLeftIsSet() const;
    void unsetAttemptsLeft();

    friend  void to_json(nlohmann::json& j, const EacVerificationResultDTO& o);
    friend  void from_json(const nlohmann::json& j, EacVerificationResultDTO& o);
protected:
    org::openapitools::server::model::EacVerificationStatusType m_VerificationResult;
    bool m_VerificationResultIsSet;
    int32_t m_AttemptsLeft;
    bool m_AttemptsLeftIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* EacVerificationResultDTO_H_ */
