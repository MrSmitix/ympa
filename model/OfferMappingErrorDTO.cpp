/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OfferMappingErrorDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OfferMappingErrorDTO::OfferMappingErrorDTO()
{
    m_ParameterId = 0L;
    m_ParameterIdIsSet = false;
    m_Message = "";
    
}

void OfferMappingErrorDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OfferMappingErrorDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OfferMappingErrorDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OfferMappingErrorDTO" : pathPrefix;

                
    return success;
}

bool OfferMappingErrorDTO::operator==(const OfferMappingErrorDTO& rhs) const
{
    return
    
    
    (getType() == rhs.getType())
     &&
    
    
    ((!parameterIdIsSet() && !rhs.parameterIdIsSet()) || (parameterIdIsSet() && rhs.parameterIdIsSet() && getParameterId() == rhs.getParameterId())) &&
    
    (getMessage() == rhs.getMessage())
    
    
    ;
}

bool OfferMappingErrorDTO::operator!=(const OfferMappingErrorDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OfferMappingErrorDTO& o)
{
    j = nlohmann::json::object();
    j["type"] = o.m_Type;
    if(o.parameterIdIsSet())
        j["parameterId"] = o.m_ParameterId;
    j["message"] = o.m_Message;
    
}

void from_json(const nlohmann::json& j, OfferMappingErrorDTO& o)
{
    j.at("type").get_to(o.m_Type);
    if(j.find("parameterId") != j.end())
    {
        j.at("parameterId").get_to(o.m_ParameterId);
        o.m_ParameterIdIsSet = true;
    } 
    j.at("message").get_to(o.m_Message);
    
}

org::openapitools::server::model::OfferMappingErrorType OfferMappingErrorDTO::getType() const
{
    return m_Type;
}
void OfferMappingErrorDTO::setType(org::openapitools::server::model::OfferMappingErrorType const& value)
{
    m_Type = value;
}
int64_t OfferMappingErrorDTO::getParameterId() const
{
    return m_ParameterId;
}
void OfferMappingErrorDTO::setParameterId(int64_t const value)
{
    m_ParameterId = value;
    m_ParameterIdIsSet = true;
}
bool OfferMappingErrorDTO::parameterIdIsSet() const
{
    return m_ParameterIdIsSet;
}
void OfferMappingErrorDTO::unsetParameterId()
{
    m_ParameterIdIsSet = false;
}
std::string OfferMappingErrorDTO::getMessage() const
{
    return m_Message;
}
void OfferMappingErrorDTO::setMessage(std::string const& value)
{
    m_Message = value;
}


} // namespace org::openapitools::server::model

