/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderItemInstanceDTO.h
 *
 * Переданные вами для данной позиции коды маркировки или УИНы. Коды «Честного знака» возвращаются в двух вариантах — с криптохвостом и без. 
 */

#ifndef OrderItemInstanceDTO_H_
#define OrderItemInstanceDTO_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Переданные вами для данной позиции коды маркировки или УИНы. Коды «Честного знака» возвращаются в двух вариантах — с криптохвостом и без. 
/// </summary>
class  OrderItemInstanceDTO 
{
public:
    OrderItemInstanceDTO() = default;
    explicit OrderItemInstanceDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderItemInstanceDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// OrderItemInstanceDTO members

    /// <summary>
    /// Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/) без криптохвоста.
    /// </summary>
    std::string getCis() const;
    void setCis(std::string value);

    /// <summary>
    /// Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/) с криптохвостом.
    /// </summary>
    std::string getCisFull() const;
    void setCisFull(std::string value);

    /// <summary>
    /// УИН ювелирного изделия (16-значный код) Производитель получает УИН, когда регистрирует изделие в системе контроля за оборотом драгоценных металлов и камней — ГИИС ДМДК. 
    /// </summary>
    std::string getUin() const;
    void setUin(std::string value);

    /// <summary>
    /// Регистрационный номер партии товара.  Представляет собой строку из четырех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ/ХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на партию товара. Далее — дата, номер декларации и номер маркированного товара в декларации. 
    /// </summary>
    std::string getRnpt() const;
    void setRnpt(std::string value);

    /// <summary>
    /// Грузовая таможенная декларация.  Представляет собой строку из трех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на ввезенные товары. Далее — дата и номер декларации. 
    /// </summary>
    std::string getGtd() const;
    void setGtd(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Cis = "";
    std::string m_CisFull = "";
    std::string m_Uin = "";
    std::string m_Rnpt = "";
    std::string m_Gtd = "";
};

std::vector<OrderItemInstanceDTO> createOrderItemInstanceDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* OrderItemInstanceDTO_H_ */
