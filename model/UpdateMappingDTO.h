/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateMappingDTO.h
 *
 * Карточка на Маркете, которая, с вашей точки зрения, подходит товару. Чтобы определить идентификатор подходящей карточки, воспользуйтесь поиском в кабинете (**Товары** → **Каталог** → **Загрузить товары**).  По результатам проверки Маркет может привязать товар к более подходящей карточке. 
 */

#ifndef UpdateMappingDTO_H_
#define UpdateMappingDTO_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Карточка на Маркете, которая, с вашей точки зрения, подходит товару. Чтобы определить идентификатор подходящей карточки, воспользуйтесь поиском в кабинете (**Товары** → **Каталог** → **Загрузить товары**).  По результатам проверки Маркет может привязать товар к более подходящей карточке. 
/// </summary>
class  UpdateMappingDTO 
{
public:
    UpdateMappingDTO() = default;
    explicit UpdateMappingDTO(boost::property_tree::ptree const& pt);
    virtual ~UpdateMappingDTO() = default;

    UpdateMappingDTO(const UpdateMappingDTO& other) = default; // copy constructor
    UpdateMappingDTO(UpdateMappingDTO&& other) noexcept = default; // move constructor

    UpdateMappingDTO& operator=(const UpdateMappingDTO& other) = default; // copy assignment
    UpdateMappingDTO& operator=(UpdateMappingDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UpdateMappingDTO members

    /// <summary>
    /// SKU на Маркете.
    /// </summary>
    int64_t getMarketSku() const;
    void setMarketSku(int64_t value);

protected:
    int64_t m_MarketSku = 0L;
};

std::vector<UpdateMappingDTO> createUpdateMappingDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UpdateMappingDTO>(const UpdateMappingDTO& val) {
    return val.toPropertyTree();
}

template<>
inline UpdateMappingDTO fromPt<UpdateMappingDTO>(const boost::property_tree::ptree& pt) {
    UpdateMappingDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UpdateMappingDTO_H_ */
