/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrdersStatsPriceDTO.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrdersStatsPriceDTO::OrdersStatsPriceDTO()
{
    m_TypeIsSet = false;
    m_CostPerItem = 0.0;
    m_CostPerItemIsSet = false;
    m_Total = 0.0;
    m_TotalIsSet = false;
    
}

void OrdersStatsPriceDTO::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrdersStatsPriceDTO::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrdersStatsPriceDTO::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrdersStatsPriceDTO" : pathPrefix;

                
    return success;
}

bool OrdersStatsPriceDTO::operator==(const OrdersStatsPriceDTO& rhs) const
{
    return
    
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!costPerItemIsSet() && !rhs.costPerItemIsSet()) || (costPerItemIsSet() && rhs.costPerItemIsSet() && getCostPerItem() == rhs.getCostPerItem())) &&
    
    
    ((!totalIsSet() && !rhs.totalIsSet()) || (totalIsSet() && rhs.totalIsSet() && getTotal() == rhs.getTotal()))
    
    ;
}

bool OrdersStatsPriceDTO::operator!=(const OrdersStatsPriceDTO& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrdersStatsPriceDTO& o)
{
    j = nlohmann::json::object();
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.costPerItemIsSet())
        j["costPerItem"] = o.m_CostPerItem;
    if(o.totalIsSet())
        j["total"] = o.m_Total;
    
}

void from_json(const nlohmann::json& j, OrdersStatsPriceDTO& o)
{
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("costPerItem") != j.end())
    {
        j.at("costPerItem").get_to(o.m_CostPerItem);
        o.m_CostPerItemIsSet = true;
    } 
    if(j.find("total") != j.end())
    {
        j.at("total").get_to(o.m_Total);
        o.m_TotalIsSet = true;
    } 
    
}

org::openapitools::server::model::OrdersStatsPriceType OrdersStatsPriceDTO::getType() const
{
    return m_Type;
}
void OrdersStatsPriceDTO::setType(org::openapitools::server::model::OrdersStatsPriceType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool OrdersStatsPriceDTO::typeIsSet() const
{
    return m_TypeIsSet;
}
void OrdersStatsPriceDTO::unsetType()
{
    m_TypeIsSet = false;
}
double OrdersStatsPriceDTO::getCostPerItem() const
{
    return m_CostPerItem;
}
void OrdersStatsPriceDTO::setCostPerItem(double const value)
{
    m_CostPerItem = value;
    m_CostPerItemIsSet = true;
}
bool OrdersStatsPriceDTO::costPerItemIsSet() const
{
    return m_CostPerItemIsSet;
}
void OrdersStatsPriceDTO::unsetCostPerItem()
{
    m_CostPerItemIsSet = false;
}
double OrdersStatsPriceDTO::getTotal() const
{
    return m_Total;
}
void OrdersStatsPriceDTO::setTotal(double const value)
{
    m_Total = value;
    m_TotalIsSet = true;
}
bool OrdersStatsPriceDTO::totalIsSet() const
{
    return m_TotalIsSet;
}
void OrdersStatsPriceDTO::unsetTotal()
{
    m_TotalIsSet = false;
}


} // namespace org::openapitools::server::model

