/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetOfferCardsContentStatusRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetOfferCardsContentStatusRequest::GetOfferCardsContentStatusRequest()
{
    m_OfferIdsIsSet = false;
    m_CardStatusesIsSet = false;
    m_CategoryIdsIsSet = false;
    
}

void GetOfferCardsContentStatusRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetOfferCardsContentStatusRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetOfferCardsContentStatusRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetOfferCardsContentStatusRequest" : pathPrefix;

         
    if (offerIdsIsSet())
    {
        const std::set<std::string>& value = m_OfferIds;
        const std::string currentValuePath = _pathPrefix + ".offerIds";
                
        
        if (value.size() > 200)
        {
            success = false;
            msg << currentValuePath << ": must have at most 200 elements;";
        }
        if (!org::openapitools::server::helpers::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 255)
        {
            success = false;
            msg << currentValuePath << ": must be at most 255 characters long;";
        }
 
                i++;
            }
        }

    }
         
    if (cardStatusesIsSet())
    {
        const std::set<org::openapitools::server::model::OfferCardStatusType>& value = m_CardStatuses;
        const std::string currentValuePath = _pathPrefix + ".cardStatuses";
                
        
        if (!org::openapitools::server::helpers::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OfferCardStatusType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
         
    if (categoryIdsIsSet())
    {
        const std::set<int32_t>& value = m_CategoryIds;
        const std::string currentValuePath = _pathPrefix + ".categoryIds";
                
        
        if (value.size() > 200)
        {
            success = false;
            msg << currentValuePath << ": must have at most 200 elements;";
        }
        if (!org::openapitools::server::helpers::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int32_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool GetOfferCardsContentStatusRequest::operator==(const GetOfferCardsContentStatusRequest& rhs) const
{
    return
    
    
    
    ((!offerIdsIsSet() && !rhs.offerIdsIsSet()) || (offerIdsIsSet() && rhs.offerIdsIsSet() && getOfferIds() == rhs.getOfferIds())) &&
    
    
    ((!cardStatusesIsSet() && !rhs.cardStatusesIsSet()) || (cardStatusesIsSet() && rhs.cardStatusesIsSet() && getCardStatuses() == rhs.getCardStatuses())) &&
    
    
    ((!categoryIdsIsSet() && !rhs.categoryIdsIsSet()) || (categoryIdsIsSet() && rhs.categoryIdsIsSet() && getCategoryIds() == rhs.getCategoryIds()))
    
    ;
}

bool GetOfferCardsContentStatusRequest::operator!=(const GetOfferCardsContentStatusRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetOfferCardsContentStatusRequest& o)
{
    j = nlohmann::json::object();
    if(o.offerIdsIsSet() || !o.m_OfferIds.empty())
        j["offerIds"] = o.m_OfferIds;
    if(o.cardStatusesIsSet() || !o.m_CardStatuses.empty())
        j["cardStatuses"] = o.m_CardStatuses;
    if(o.categoryIdsIsSet() || !o.m_CategoryIds.empty())
        j["categoryIds"] = o.m_CategoryIds;
    
}

void from_json(const nlohmann::json& j, GetOfferCardsContentStatusRequest& o)
{
    if(j.find("offerIds") != j.end())
    {
        j.at("offerIds").get_to(o.m_OfferIds);
        o.m_OfferIdsIsSet = true;
    } 
    if(j.find("cardStatuses") != j.end())
    {
        j.at("cardStatuses").get_to(o.m_CardStatuses);
        o.m_CardStatusesIsSet = true;
    } 
    if(j.find("categoryIds") != j.end())
    {
        j.at("categoryIds").get_to(o.m_CategoryIds);
        o.m_CategoryIdsIsSet = true;
    } 
    
}

std::set<std::string> GetOfferCardsContentStatusRequest::getOfferIds() const
{
    return m_OfferIds;
}
void GetOfferCardsContentStatusRequest::setOfferIds(std::set<std::string> const& value)
{
    m_OfferIds = value;
    m_OfferIdsIsSet = true;
}
bool GetOfferCardsContentStatusRequest::offerIdsIsSet() const
{
    return m_OfferIdsIsSet;
}
void GetOfferCardsContentStatusRequest::unsetOfferIds()
{
    m_OfferIdsIsSet = false;
}
std::set<org::openapitools::server::model::OfferCardStatusType> GetOfferCardsContentStatusRequest::getCardStatuses() const
{
    return m_CardStatuses;
}
void GetOfferCardsContentStatusRequest::setCardStatuses(std::set<org::openapitools::server::model::OfferCardStatusType> const& value)
{
    m_CardStatuses = value;
    m_CardStatusesIsSet = true;
}
bool GetOfferCardsContentStatusRequest::cardStatusesIsSet() const
{
    return m_CardStatusesIsSet;
}
void GetOfferCardsContentStatusRequest::unsetCardStatuses()
{
    m_CardStatusesIsSet = false;
}
std::set<int32_t> GetOfferCardsContentStatusRequest::getCategoryIds() const
{
    return m_CategoryIds;
}
void GetOfferCardsContentStatusRequest::setCategoryIds(std::set<int32_t> const value)
{
    m_CategoryIds = value;
    m_CategoryIdsIsSet = true;
}
bool GetOfferCardsContentStatusRequest::categoryIdsIsSet() const
{
    return m_CategoryIdsIsSet;
}
void GetOfferCardsContentStatusRequest::unsetCategoryIds()
{
    m_CategoryIdsIsSet = false;
}


} // namespace org::openapitools::server::model

