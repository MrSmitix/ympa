/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedDTO.h
 *
 * Информация о прайс-листе.
 */

#ifndef FeedDTO_H_
#define FeedDTO_H_



#include "FeedPlacementDTO.h"
#include "FeedPublicationDTO.h"
#include <string>
#include "FeedContentDTO.h"
#include "FeedDownloadDTO.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Информация о прайс-листе.
/// </summary>
class  FeedDTO 
{
public:
    FeedDTO() = default;
    explicit FeedDTO(boost::property_tree::ptree const& pt);
    virtual ~FeedDTO() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// FeedDTO members

    /// <summary>
    /// Идентификатор прайс-листа.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
    /// </summary>
    std::string getLogin() const;
    void setLogin(std::string value);

    /// <summary>
    /// Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
    /// </summary>
    std::string getPassword() const;
    void setPassword(std::string value);

    /// <summary>
    /// Дата загрузки прайс-листа на Маркет.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Параметр выводится при размещении прайс-листа на сервере Маркета. 
    /// </summary>
    std::string getUploadDate() const;
    void setUploadDate(std::string value);

    /// <summary>
    /// URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedContentDTO> getContent() const;
    void setContent(std::shared_ptr<FeedContentDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedDownloadDTO> getDownload() const;
    void setDownload(std::shared_ptr<FeedDownloadDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedPlacementDTO> getPlacement() const;
    void setPlacement(std::shared_ptr<FeedPlacementDTO> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedPublicationDTO> getPublication() const;
    void setPublication(std::shared_ptr<FeedPublicationDTO> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_Id = 0L;
    std::string m_Login = "";
    std::string m_Name = "";
    std::string m_Password = "";
    std::string m_UploadDate = "";
    std::string m_Url = "";
    std::shared_ptr<FeedContentDTO> m_Content;
    std::shared_ptr<FeedDownloadDTO> m_Download;
    std::shared_ptr<FeedPlacementDTO> m_Placement;
    std::shared_ptr<FeedPublicationDTO> m_Publication;
};

std::vector<FeedDTO> createFeedDTOVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* FeedDTO_H_ */
