/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FeedDTO.h
 *
 * Информация о прайс-листе.
 */

#ifndef FeedDTO_H_
#define FeedDTO_H_


#include "FeedPlacementDTO.h"
#include "FeedPublicationDTO.h"
#include <string>
#include "FeedContentDTO.h"
#include "FeedDownloadDTO.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Информация о прайс-листе.
/// </summary>
class  FeedDTO
{
public:
    FeedDTO();
    virtual ~FeedDTO() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FeedDTO& rhs) const;
    bool operator!=(const FeedDTO& rhs) const;

    /////////////////////////////////////////////
    /// FeedDTO members

    /// <summary>
    /// Идентификатор прайс-листа.
    /// </summary>
    int64_t getId() const;
    void setId(int64_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
    /// </summary>
    std::string getLogin() const;
    void setLogin(std::string const& value);
    bool loginIsSet() const;
    void unsetLogin();
    /// <summary>
    /// Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
    /// </summary>
    std::string getPassword() const;
    void setPassword(std::string const& value);
    bool passwordIsSet() const;
    void unsetPassword();
    /// <summary>
    /// Дата загрузки прайс-листа на Маркет.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Параметр выводится при размещении прайс-листа на сервере Маркета. 
    /// </summary>
    std::string getUploadDate() const;
    void setUploadDate(std::string const& value);
    bool uploadDateIsSet() const;
    void unsetUploadDate();
    /// <summary>
    /// URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string const& value);
    bool urlIsSet() const;
    void unsetUrl();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedContentDTO getContent() const;
    void setContent(org::openapitools::server::model::FeedContentDTO const& value);
    bool contentIsSet() const;
    void unsetContent();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedDownloadDTO getDownload() const;
    void setDownload(org::openapitools::server::model::FeedDownloadDTO const& value);
    bool downloadIsSet() const;
    void unsetDownload();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedPlacementDTO getPlacement() const;
    void setPlacement(org::openapitools::server::model::FeedPlacementDTO const& value);
    bool placementIsSet() const;
    void unsetPlacement();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FeedPublicationDTO getPublication() const;
    void setPublication(org::openapitools::server::model::FeedPublicationDTO const& value);
    bool publicationIsSet() const;
    void unsetPublication();

    friend  void to_json(nlohmann::json& j, const FeedDTO& o);
    friend  void from_json(const nlohmann::json& j, FeedDTO& o);
protected:
    int64_t m_Id;
    bool m_IdIsSet;
    std::string m_Login;
    bool m_LoginIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Password;
    bool m_PasswordIsSet;
    std::string m_UploadDate;
    bool m_UploadDateIsSet;
    std::string m_Url;
    bool m_UrlIsSet;
    org::openapitools::server::model::FeedContentDTO m_Content;
    bool m_ContentIsSet;
    org::openapitools::server::model::FeedDownloadDTO m_Download;
    bool m_DownloadIsSet;
    org::openapitools::server::model::FeedPlacementDTO m_Placement;
    bool m_PlacementIsSet;
    org::openapitools::server::model::FeedPublicationDTO m_Publication;
    bool m_PublicationIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* FeedDTO_H_ */
