/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderStatusChangeDTO.h
 *
 * Заказ.
 */

#ifndef OrderStatusChangeDTO_H_
#define OrderStatusChangeDTO_H_



#include "OrderStatusType.h"
#include "OrderStatusChangeDeliveryDTO.h"
#include "OrderSubstatusType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Заказ.
/// </summary>
class  OrderStatusChangeDTO 
{
public:
    OrderStatusChangeDTO() = default;
    explicit OrderStatusChangeDTO(boost::property_tree::ptree const& pt);
    virtual ~OrderStatusChangeDTO() = default;

    OrderStatusChangeDTO(const OrderStatusChangeDTO& other) = default; // copy constructor
    OrderStatusChangeDTO(OrderStatusChangeDTO&& other) noexcept = default; // move constructor

    OrderStatusChangeDTO& operator=(const OrderStatusChangeDTO& other) = default; // copy assignment
    OrderStatusChangeDTO& operator=(OrderStatusChangeDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrderStatusChangeDTO members

    /// <summary>
    /// 
    /// </summary>
    OrderStatusType getStatus() const;
    void setStatus(OrderStatusType value);

    /// <summary>
    /// 
    /// </summary>
    OrderSubstatusType getSubstatus() const;
    void setSubstatus(OrderSubstatusType value);

    /// <summary>
    /// 
    /// </summary>
    OrderStatusChangeDeliveryDTO getDelivery() const;
    void setDelivery(OrderStatusChangeDeliveryDTO value);

protected:
    OrderStatusType m_Status = OrderStatusType{};
    OrderSubstatusType m_Substatus = OrderSubstatusType{};
    OrderStatusChangeDeliveryDTO m_Delivery;
};

std::vector<OrderStatusChangeDTO> createOrderStatusChangeDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderStatusChangeDTO>(const OrderStatusChangeDTO& val) {
    return val.toPropertyTree();
}

template<>
inline OrderStatusChangeDTO fromPt<OrderStatusChangeDTO>(const boost::property_tree::ptree& pt) {
    OrderStatusChangeDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderStatusChangeDTO_H_ */
