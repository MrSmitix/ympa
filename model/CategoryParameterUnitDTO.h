/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CategoryParameterUnitDTO.h
 *
 * Единицы измерения характеристики товара.
 */

#ifndef CategoryParameterUnitDTO_H_
#define CategoryParameterUnitDTO_H_



#include "UnitDTO.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Единицы измерения характеристики товара.
/// </summary>
class  CategoryParameterUnitDTO 
{
public:
    CategoryParameterUnitDTO() = default;
    explicit CategoryParameterUnitDTO(boost::property_tree::ptree const& pt);
    virtual ~CategoryParameterUnitDTO() = default;

    CategoryParameterUnitDTO(const CategoryParameterUnitDTO& other) = default; // copy constructor
    CategoryParameterUnitDTO(CategoryParameterUnitDTO&& other) noexcept = default; // move constructor

    CategoryParameterUnitDTO& operator=(const CategoryParameterUnitDTO& other) = default; // copy assignment
    CategoryParameterUnitDTO& operator=(CategoryParameterUnitDTO&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CategoryParameterUnitDTO members

    /// <summary>
    /// Единица измерения по умолчанию.
    /// </summary>
    int64_t getDefaultUnitId() const;
    void setDefaultUnitId(int64_t value);

    /// <summary>
    /// Допустимые единицы измерения.
    /// </summary>
    std::vector<UnitDTO> getUnits() const;
    void setUnits(std::vector<UnitDTO> value);

protected:
    int64_t m_DefaultUnitId = 0L;
    std::vector<UnitDTO> m_Units;
};

std::vector<CategoryParameterUnitDTO> createCategoryParameterUnitDTOVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CategoryParameterUnitDTO>(const CategoryParameterUnitDTO& val) {
    return val.toPropertyTree();
}

template<>
inline CategoryParameterUnitDTO fromPt<CategoryParameterUnitDTO>(const boost::property_tree::ptree& pt) {
    CategoryParameterUnitDTO ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CategoryParameterUnitDTO_H_ */
