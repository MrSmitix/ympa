/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIOrderDeliveryApi
{
public:
	OpenAPIOrderDeliveryApi();
	~OpenAPIOrderDeliveryApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class GetOrderBuyerInfoRequest;
	class GetOrderBuyerInfoResponse;
	class SetOrderDeliveryDateRequest;
	class SetOrderDeliveryDateResponse;
	class SetOrderDeliveryTrackCodeRequest;
	class SetOrderDeliveryTrackCodeResponse;
	class UpdateOrderStorageLimitRequest;
	class UpdateOrderStorageLimitResponse;
	class VerifyOrderEacRequest;
	class VerifyOrderEacResponse;
	
    DECLARE_DELEGATE_OneParam(FGetOrderBuyerInfoDelegate, const GetOrderBuyerInfoResponse&);
    DECLARE_DELEGATE_OneParam(FSetOrderDeliveryDateDelegate, const SetOrderDeliveryDateResponse&);
    DECLARE_DELEGATE_OneParam(FSetOrderDeliveryTrackCodeDelegate, const SetOrderDeliveryTrackCodeResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateOrderStorageLimitDelegate, const UpdateOrderStorageLimitResponse&);
    DECLARE_DELEGATE_OneParam(FVerifyOrderEacDelegate, const VerifyOrderEacResponse&);
    
    FHttpRequestPtr GetOrderBuyerInfo(const GetOrderBuyerInfoRequest& Request, const FGetOrderBuyerInfoDelegate& Delegate = FGetOrderBuyerInfoDelegate()) const;
    FHttpRequestPtr SetOrderDeliveryDate(const SetOrderDeliveryDateRequest& Request, const FSetOrderDeliveryDateDelegate& Delegate = FSetOrderDeliveryDateDelegate()) const;
    FHttpRequestPtr SetOrderDeliveryTrackCode(const SetOrderDeliveryTrackCodeRequest& Request, const FSetOrderDeliveryTrackCodeDelegate& Delegate = FSetOrderDeliveryTrackCodeDelegate()) const;
    FHttpRequestPtr UpdateOrderStorageLimit(const UpdateOrderStorageLimitRequest& Request, const FUpdateOrderStorageLimitDelegate& Delegate = FUpdateOrderStorageLimitDelegate()) const;
    FHttpRequestPtr VerifyOrderEac(const VerifyOrderEacRequest& Request, const FVerifyOrderEacDelegate& Delegate = FVerifyOrderEacDelegate()) const;
    
private:
    void OnGetOrderBuyerInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetOrderBuyerInfoDelegate Delegate) const;
    void OnSetOrderDeliveryDateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetOrderDeliveryDateDelegate Delegate) const;
    void OnSetOrderDeliveryTrackCodeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetOrderDeliveryTrackCodeDelegate Delegate) const;
    void OnUpdateOrderStorageLimitResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateOrderStorageLimitDelegate Delegate) const;
    void OnVerifyOrderEacResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVerifyOrderEacDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
