/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIReturnsApi.h"

#include "OpenAPIHelpers.h"
#include "OpenAPIApiClientDataErrorResponse.h"
#include "OpenAPIApiForbiddenErrorResponse.h"
#include "OpenAPIApiLimitErrorResponse.h"
#include "OpenAPIApiNotFoundErrorResponse.h"
#include "OpenAPIApiServerErrorResponse.h"
#include "OpenAPIApiUnauthorizedErrorResponse.h"
#include "OpenAPIEmptyApiResponse.h"
#include "OpenAPIGetReturnResponse.h"
#include "OpenAPIGetReturnsResponse.h"
#include "OpenAPIRefundStatusType.h"
#include "OpenAPIReturnType.h"
#include "OpenAPISetReturnDecisionRequest.h"

namespace OpenAPI
{

/* Информация о невыкупе или возврате
 *
 * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
*/
class OPENAPI_API OpenAPIReturnsApi::GetReturnRequest : public Request
{
public:
    virtual ~GetReturnRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  */
	int64 CampaignId = 0;
	/* Идентификатор заказа. */
	int64 OrderId = 0;
	/* Идентификатор возврата. */
	int64 ReturnId = 0;
};

class OPENAPI_API OpenAPIReturnsApi::GetReturnResponse : public Response
{
public:
    virtual ~GetReturnResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGetReturnResponse Content;
};

/* Получение заявления на возврат
 *
 * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
*/
class OPENAPI_API OpenAPIReturnsApi::GetReturnApplicationRequest : public Request
{
public:
    virtual ~GetReturnApplicationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  */
	int64 CampaignId = 0;
	/* Идентификатор заказа. */
	int64 OrderId = 0;
	/* Идентификатор возврата. */
	int64 ReturnId = 0;
};

class OPENAPI_API OpenAPIReturnsApi::GetReturnApplicationResponse : public Response
{
public:
    virtual ~GetReturnApplicationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    HttpFileInput Content;
};

/* Получение фотографии возврата
 *
 * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
*/
class OPENAPI_API OpenAPIReturnsApi::GetReturnPhotoRequest : public Request
{
public:
    virtual ~GetReturnPhotoRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  */
	int64 CampaignId = 0;
	/* Идентификатор заказа. */
	int64 OrderId = 0;
	/* Идентификатор возврата. */
	int64 ReturnId = 0;
	/* Идентификатор товара в возврате. */
	int64 ItemId = 0;
	/* Хеш ссылки изображения для загрузки. */
	FString ImageHash;
};

class OPENAPI_API OpenAPIReturnsApi::GetReturnPhotoResponse : public Response
{
public:
    virtual ~GetReturnPhotoResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    HttpFileInput Content;
};

/* Список невыкупов и возвратов
 *
 * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
*/
class OPENAPI_API OpenAPIReturnsApi::GetReturnsRequest : public Request
{
public:
    virtual ~GetReturnsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  */
	int64 CampaignId = 0;
	/* Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются.  */
	TOptional<FString> PageToken;
	/* Количество значений на одной странице.  */
	TOptional<int32> Limit;
	/* Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50.  */
	TOptional<TArray<int64>> OrderIds;
	/* Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую.  */
	TOptional<TArray<OpenAPIRefundStatusType>> Statuses;
	/* Тип заказа для фильтрации:  * `RETURN` — возврат.  * `UNREDEEMED` — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы.  */
	TOptional<OpenAPIReturnType> Type;
	/* Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`.  */
	TOptional<FDateTime> FromDate;
	/* Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`.  */
	TOptional<FDateTime> ToDate;
	/* {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `fromDate`.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  */
	TOptional<FDateTime> FromDate2;
	/* {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `toDate`.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  */
	TOptional<FDateTime> ToDate2;
};

class OPENAPI_API OpenAPIReturnsApi::GetReturnsResponse : public Response
{
public:
    virtual ~GetReturnsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGetReturnsResponse Content;
};

/* Принятие или изменение решения по возврату
 *
 * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
*/
class OPENAPI_API OpenAPIReturnsApi::SetReturnDecisionRequest : public Request
{
public:
    virtual ~SetReturnDecisionRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  */
	int64 CampaignId = 0;
	/* Идентификатор заказа. */
	int64 OrderId = 0;
	/* Идентификатор возврата. */
	int64 ReturnId = 0;
	OpenAPISetReturnDecisionRequest OpenAPISetReturnDecisionRequest;
};

class OPENAPI_API OpenAPIReturnsApi::SetReturnDecisionResponse : public Response
{
public:
    virtual ~SetReturnDecisionResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIEmptyApiResponse Content;
};

/* Подтверждение решения по возврату
 *
 * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
*/
class OPENAPI_API OpenAPIReturnsApi::SubmitReturnDecisionRequest : public Request
{
public:
    virtual ~SubmitReturnDecisionRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  */
	int64 CampaignId = 0;
	/* Идентификатор заказа. */
	int64 OrderId = 0;
	/* Идентификатор возврата. */
	int64 ReturnId = 0;
};

class OPENAPI_API OpenAPIReturnsApi::SubmitReturnDecisionResponse : public Response
{
public:
    virtual ~SubmitReturnDecisionResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIEmptyApiResponse Content;
};

}
