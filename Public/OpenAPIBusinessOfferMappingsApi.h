/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIBusinessOfferMappingsApi
{
public:
	OpenAPIBusinessOfferMappingsApi();
	~OpenAPIBusinessOfferMappingsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AddOffersToArchiveRequest;
	class AddOffersToArchiveResponse;
	class DeleteOffersRequest;
	class DeleteOffersResponse;
	class DeleteOffersFromArchiveRequest;
	class DeleteOffersFromArchiveResponse;
	class GetOfferMappingsRequest;
	class GetOfferMappingsResponse;
	class GetSuggestedOfferMappingsRequest;
	class GetSuggestedOfferMappingsResponse;
	class UpdateOfferMappingsRequest;
	class UpdateOfferMappingsResponse;
	
    DECLARE_DELEGATE_OneParam(FAddOffersToArchiveDelegate, const AddOffersToArchiveResponse&);
    DECLARE_DELEGATE_OneParam(FDeleteOffersDelegate, const DeleteOffersResponse&);
    DECLARE_DELEGATE_OneParam(FDeleteOffersFromArchiveDelegate, const DeleteOffersFromArchiveResponse&);
    DECLARE_DELEGATE_OneParam(FGetOfferMappingsDelegate, const GetOfferMappingsResponse&);
    DECLARE_DELEGATE_OneParam(FGetSuggestedOfferMappingsDelegate, const GetSuggestedOfferMappingsResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateOfferMappingsDelegate, const UpdateOfferMappingsResponse&);
    
    FHttpRequestPtr AddOffersToArchive(const AddOffersToArchiveRequest& Request, const FAddOffersToArchiveDelegate& Delegate = FAddOffersToArchiveDelegate()) const;
    FHttpRequestPtr DeleteOffers(const DeleteOffersRequest& Request, const FDeleteOffersDelegate& Delegate = FDeleteOffersDelegate()) const;
    FHttpRequestPtr DeleteOffersFromArchive(const DeleteOffersFromArchiveRequest& Request, const FDeleteOffersFromArchiveDelegate& Delegate = FDeleteOffersFromArchiveDelegate()) const;
    FHttpRequestPtr GetOfferMappings(const GetOfferMappingsRequest& Request, const FGetOfferMappingsDelegate& Delegate = FGetOfferMappingsDelegate()) const;
    FHttpRequestPtr GetSuggestedOfferMappings(const GetSuggestedOfferMappingsRequest& Request, const FGetSuggestedOfferMappingsDelegate& Delegate = FGetSuggestedOfferMappingsDelegate()) const;
    FHttpRequestPtr UpdateOfferMappings(const UpdateOfferMappingsRequest& Request, const FUpdateOfferMappingsDelegate& Delegate = FUpdateOfferMappingsDelegate()) const;
    
private:
    void OnAddOffersToArchiveResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddOffersToArchiveDelegate Delegate) const;
    void OnDeleteOffersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteOffersDelegate Delegate) const;
    void OnDeleteOffersFromArchiveResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteOffersFromArchiveDelegate Delegate) const;
    void OnGetOfferMappingsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetOfferMappingsDelegate Delegate) const;
    void OnGetSuggestedOfferMappingsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetSuggestedOfferMappingsDelegate Delegate) const;
    void OnUpdateOfferMappingsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateOfferMappingsDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
