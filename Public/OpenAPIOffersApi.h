/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIOffersApi
{
public:
	OpenAPIOffersApi();
	~OpenAPIOffersApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class DeleteCampaignOffersRequest;
	class DeleteCampaignOffersResponse;
	class GetAllOffersRequest;
	class GetAllOffersResponse;
	class GetCampaignOffersRequest;
	class GetCampaignOffersResponse;
	class GetOfferRecommendationsRequest;
	class GetOfferRecommendationsResponse;
	class GetOffersRequest;
	class GetOffersResponse;
	class UpdateCampaignOffersRequest;
	class UpdateCampaignOffersResponse;
	
    DECLARE_DELEGATE_OneParam(FDeleteCampaignOffersDelegate, const DeleteCampaignOffersResponse&);
    DECLARE_DELEGATE_OneParam(FGetAllOffersDelegate, const GetAllOffersResponse&);
    DECLARE_DELEGATE_OneParam(FGetCampaignOffersDelegate, const GetCampaignOffersResponse&);
    DECLARE_DELEGATE_OneParam(FGetOfferRecommendationsDelegate, const GetOfferRecommendationsResponse&);
    DECLARE_DELEGATE_OneParam(FGetOffersDelegate, const GetOffersResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateCampaignOffersDelegate, const UpdateCampaignOffersResponse&);
    
    FHttpRequestPtr DeleteCampaignOffers(const DeleteCampaignOffersRequest& Request, const FDeleteCampaignOffersDelegate& Delegate = FDeleteCampaignOffersDelegate()) const;
    FHttpRequestPtr GetAllOffers(const GetAllOffersRequest& Request, const FGetAllOffersDelegate& Delegate = FGetAllOffersDelegate()) const;
    FHttpRequestPtr GetCampaignOffers(const GetCampaignOffersRequest& Request, const FGetCampaignOffersDelegate& Delegate = FGetCampaignOffersDelegate()) const;
    FHttpRequestPtr GetOfferRecommendations(const GetOfferRecommendationsRequest& Request, const FGetOfferRecommendationsDelegate& Delegate = FGetOfferRecommendationsDelegate()) const;
    FHttpRequestPtr GetOffers(const GetOffersRequest& Request, const FGetOffersDelegate& Delegate = FGetOffersDelegate()) const;
    FHttpRequestPtr UpdateCampaignOffers(const UpdateCampaignOffersRequest& Request, const FUpdateCampaignOffersDelegate& Delegate = FUpdateCampaignOffersDelegate()) const;
    
private:
    void OnDeleteCampaignOffersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteCampaignOffersDelegate Delegate) const;
    void OnGetAllOffersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAllOffersDelegate Delegate) const;
    void OnGetCampaignOffersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCampaignOffersDelegate Delegate) const;
    void OnGetOfferRecommendationsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetOfferRecommendationsDelegate Delegate) const;
    void OnGetOffersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetOffersDelegate Delegate) const;
    void OnUpdateCampaignOffersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateCampaignOffersDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
