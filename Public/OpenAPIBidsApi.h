/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIBidsApi
{
public:
	OpenAPIBidsApi();
	~OpenAPIBidsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class GetBidsInfoForBusinessRequest;
	class GetBidsInfoForBusinessResponse;
	class GetBidsRecommendationsRequest;
	class GetBidsRecommendationsResponse;
	class PutBidsForBusinessRequest;
	class PutBidsForBusinessResponse;
	class PutBidsForCampaignRequest;
	class PutBidsForCampaignResponse;
	
    DECLARE_DELEGATE_OneParam(FGetBidsInfoForBusinessDelegate, const GetBidsInfoForBusinessResponse&);
    DECLARE_DELEGATE_OneParam(FGetBidsRecommendationsDelegate, const GetBidsRecommendationsResponse&);
    DECLARE_DELEGATE_OneParam(FPutBidsForBusinessDelegate, const PutBidsForBusinessResponse&);
    DECLARE_DELEGATE_OneParam(FPutBidsForCampaignDelegate, const PutBidsForCampaignResponse&);
    
    FHttpRequestPtr GetBidsInfoForBusiness(const GetBidsInfoForBusinessRequest& Request, const FGetBidsInfoForBusinessDelegate& Delegate = FGetBidsInfoForBusinessDelegate()) const;
    FHttpRequestPtr GetBidsRecommendations(const GetBidsRecommendationsRequest& Request, const FGetBidsRecommendationsDelegate& Delegate = FGetBidsRecommendationsDelegate()) const;
    FHttpRequestPtr PutBidsForBusiness(const PutBidsForBusinessRequest& Request, const FPutBidsForBusinessDelegate& Delegate = FPutBidsForBusinessDelegate()) const;
    FHttpRequestPtr PutBidsForCampaign(const PutBidsForCampaignRequest& Request, const FPutBidsForCampaignDelegate& Delegate = FPutBidsForCampaignDelegate()) const;
    
private:
    void OnGetBidsInfoForBusinessResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetBidsInfoForBusinessDelegate Delegate) const;
    void OnGetBidsRecommendationsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetBidsRecommendationsDelegate Delegate) const;
    void OnPutBidsForBusinessResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPutBidsForBusinessDelegate Delegate) const;
    void OnPutBidsForCampaignResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPutBidsForCampaignDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
