/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIRegionsApi
{
public:
	OpenAPIRegionsApi();
	~OpenAPIRegionsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class SearchRegionChildrenRequest;
	class SearchRegionChildrenResponse;
	class SearchRegionsByIdRequest;
	class SearchRegionsByIdResponse;
	class SearchRegionsByNameRequest;
	class SearchRegionsByNameResponse;
	
    DECLARE_DELEGATE_OneParam(FSearchRegionChildrenDelegate, const SearchRegionChildrenResponse&);
    DECLARE_DELEGATE_OneParam(FSearchRegionsByIdDelegate, const SearchRegionsByIdResponse&);
    DECLARE_DELEGATE_OneParam(FSearchRegionsByNameDelegate, const SearchRegionsByNameResponse&);
    
    FHttpRequestPtr SearchRegionChildren(const SearchRegionChildrenRequest& Request, const FSearchRegionChildrenDelegate& Delegate = FSearchRegionChildrenDelegate()) const;
    FHttpRequestPtr SearchRegionsById(const SearchRegionsByIdRequest& Request, const FSearchRegionsByIdDelegate& Delegate = FSearchRegionsByIdDelegate()) const;
    FHttpRequestPtr SearchRegionsByName(const SearchRegionsByNameRequest& Request, const FSearchRegionsByNameDelegate& Delegate = FSearchRegionsByNameDelegate()) const;
    
private:
    void OnSearchRegionChildrenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSearchRegionChildrenDelegate Delegate) const;
    void OnSearchRegionsByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSearchRegionsByIdDelegate Delegate) const;
    void OnSearchRegionsByNameResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSearchRegionsByNameDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
