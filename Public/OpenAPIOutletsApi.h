/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIOutletsApi
{
public:
	OpenAPIOutletsApi();
	~OpenAPIOutletsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CreateOutletRequest;
	class CreateOutletResponse;
	class DeleteOutletRequest;
	class DeleteOutletResponse;
	class GetOutletRequest;
	class GetOutletResponse;
	class GetOutletsRequest;
	class GetOutletsResponse;
	class UpdateOutletRequest;
	class UpdateOutletResponse;
	
    DECLARE_DELEGATE_OneParam(FCreateOutletDelegate, const CreateOutletResponse&);
    DECLARE_DELEGATE_OneParam(FDeleteOutletDelegate, const DeleteOutletResponse&);
    DECLARE_DELEGATE_OneParam(FGetOutletDelegate, const GetOutletResponse&);
    DECLARE_DELEGATE_OneParam(FGetOutletsDelegate, const GetOutletsResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateOutletDelegate, const UpdateOutletResponse&);
    
    FHttpRequestPtr CreateOutlet(const CreateOutletRequest& Request, const FCreateOutletDelegate& Delegate = FCreateOutletDelegate()) const;
    FHttpRequestPtr DeleteOutlet(const DeleteOutletRequest& Request, const FDeleteOutletDelegate& Delegate = FDeleteOutletDelegate()) const;
    FHttpRequestPtr GetOutlet(const GetOutletRequest& Request, const FGetOutletDelegate& Delegate = FGetOutletDelegate()) const;
    FHttpRequestPtr GetOutlets(const GetOutletsRequest& Request, const FGetOutletsDelegate& Delegate = FGetOutletsDelegate()) const;
    FHttpRequestPtr UpdateOutlet(const UpdateOutletRequest& Request, const FUpdateOutletDelegate& Delegate = FUpdateOutletDelegate()) const;
    
private:
    void OnCreateOutletResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateOutletDelegate Delegate) const;
    void OnDeleteOutletResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteOutletDelegate Delegate) const;
    void OnGetOutletResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetOutletDelegate Delegate) const;
    void OnGetOutletsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetOutletsDelegate Delegate) const;
    void OnUpdateOutletResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateOutletDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
