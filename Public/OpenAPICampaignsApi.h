/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPICampaignsApi
{
public:
	OpenAPICampaignsApi();
	~OpenAPICampaignsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class GetCampaignRequest;
	class GetCampaignResponse;
	class GetCampaignLoginsRequest;
	class GetCampaignLoginsResponse;
	class GetCampaignRegionRequest;
	class GetCampaignRegionResponse;
	class GetCampaignSettingsRequest;
	class GetCampaignSettingsResponse;
	class GetCampaignsRequest;
	class GetCampaignsResponse;
	class GetCampaignsByLoginRequest;
	class GetCampaignsByLoginResponse;
	
    DECLARE_DELEGATE_OneParam(FGetCampaignDelegate, const GetCampaignResponse&);
    DECLARE_DELEGATE_OneParam(FGetCampaignLoginsDelegate, const GetCampaignLoginsResponse&);
    DECLARE_DELEGATE_OneParam(FGetCampaignRegionDelegate, const GetCampaignRegionResponse&);
    DECLARE_DELEGATE_OneParam(FGetCampaignSettingsDelegate, const GetCampaignSettingsResponse&);
    DECLARE_DELEGATE_OneParam(FGetCampaignsDelegate, const GetCampaignsResponse&);
    DECLARE_DELEGATE_OneParam(FGetCampaignsByLoginDelegate, const GetCampaignsByLoginResponse&);
    
    FHttpRequestPtr GetCampaign(const GetCampaignRequest& Request, const FGetCampaignDelegate& Delegate = FGetCampaignDelegate()) const;
    FHttpRequestPtr GetCampaignLogins(const GetCampaignLoginsRequest& Request, const FGetCampaignLoginsDelegate& Delegate = FGetCampaignLoginsDelegate()) const;
    FHttpRequestPtr GetCampaignRegion(const GetCampaignRegionRequest& Request, const FGetCampaignRegionDelegate& Delegate = FGetCampaignRegionDelegate()) const;
    FHttpRequestPtr GetCampaignSettings(const GetCampaignSettingsRequest& Request, const FGetCampaignSettingsDelegate& Delegate = FGetCampaignSettingsDelegate()) const;
    FHttpRequestPtr GetCampaigns(const GetCampaignsRequest& Request, const FGetCampaignsDelegate& Delegate = FGetCampaignsDelegate()) const;
    FHttpRequestPtr GetCampaignsByLogin(const GetCampaignsByLoginRequest& Request, const FGetCampaignsByLoginDelegate& Delegate = FGetCampaignsByLoginDelegate()) const;
    
private:
    void OnGetCampaignResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCampaignDelegate Delegate) const;
    void OnGetCampaignLoginsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCampaignLoginsDelegate Delegate) const;
    void OnGetCampaignRegionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCampaignRegionDelegate Delegate) const;
    void OnGetCampaignSettingsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCampaignSettingsDelegate Delegate) const;
    void OnGetCampaignsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCampaignsDelegate Delegate) const;
    void OnGetCampaignsByLoginResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCampaignsByLoginDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
