/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIOrdersApi
{
public:
	OpenAPIOrdersApi();
	~OpenAPIOrdersApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AcceptOrderCancellationRequest;
	class AcceptOrderCancellationResponse;
	class GetOrderRequest;
	class GetOrderResponse;
	class GetOrdersRequest;
	class GetOrdersResponse;
	class ProvideOrderDigitalCodesRequest;
	class ProvideOrderDigitalCodesResponse;
	class ProvideOrderItemIdentifiersRequest;
	class ProvideOrderItemIdentifiersResponse;
	class SetOrderBoxLayoutRequest;
	class SetOrderBoxLayoutResponse;
	class SetOrderShipmentBoxesRequest;
	class SetOrderShipmentBoxesResponse;
	class UpdateOrderItemsRequest;
	class UpdateOrderItemsResponse;
	class UpdateOrderStatusRequest;
	class UpdateOrderStatusResponse;
	class UpdateOrderStatusesRequest;
	class UpdateOrderStatusesResponse;
	
    DECLARE_DELEGATE_OneParam(FAcceptOrderCancellationDelegate, const AcceptOrderCancellationResponse&);
    DECLARE_DELEGATE_OneParam(FGetOrderDelegate, const GetOrderResponse&);
    DECLARE_DELEGATE_OneParam(FGetOrdersDelegate, const GetOrdersResponse&);
    DECLARE_DELEGATE_OneParam(FProvideOrderDigitalCodesDelegate, const ProvideOrderDigitalCodesResponse&);
    DECLARE_DELEGATE_OneParam(FProvideOrderItemIdentifiersDelegate, const ProvideOrderItemIdentifiersResponse&);
    DECLARE_DELEGATE_OneParam(FSetOrderBoxLayoutDelegate, const SetOrderBoxLayoutResponse&);
    DECLARE_DELEGATE_OneParam(FSetOrderShipmentBoxesDelegate, const SetOrderShipmentBoxesResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateOrderItemsDelegate, const UpdateOrderItemsResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateOrderStatusDelegate, const UpdateOrderStatusResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateOrderStatusesDelegate, const UpdateOrderStatusesResponse&);
    
    FHttpRequestPtr AcceptOrderCancellation(const AcceptOrderCancellationRequest& Request, const FAcceptOrderCancellationDelegate& Delegate = FAcceptOrderCancellationDelegate()) const;
    FHttpRequestPtr GetOrder(const GetOrderRequest& Request, const FGetOrderDelegate& Delegate = FGetOrderDelegate()) const;
    FHttpRequestPtr GetOrders(const GetOrdersRequest& Request, const FGetOrdersDelegate& Delegate = FGetOrdersDelegate()) const;
    FHttpRequestPtr ProvideOrderDigitalCodes(const ProvideOrderDigitalCodesRequest& Request, const FProvideOrderDigitalCodesDelegate& Delegate = FProvideOrderDigitalCodesDelegate()) const;
    FHttpRequestPtr ProvideOrderItemIdentifiers(const ProvideOrderItemIdentifiersRequest& Request, const FProvideOrderItemIdentifiersDelegate& Delegate = FProvideOrderItemIdentifiersDelegate()) const;
    FHttpRequestPtr SetOrderBoxLayout(const SetOrderBoxLayoutRequest& Request, const FSetOrderBoxLayoutDelegate& Delegate = FSetOrderBoxLayoutDelegate()) const;
    FHttpRequestPtr SetOrderShipmentBoxes(const SetOrderShipmentBoxesRequest& Request, const FSetOrderShipmentBoxesDelegate& Delegate = FSetOrderShipmentBoxesDelegate()) const;
    FHttpRequestPtr UpdateOrderItems(const UpdateOrderItemsRequest& Request, const FUpdateOrderItemsDelegate& Delegate = FUpdateOrderItemsDelegate()) const;
    FHttpRequestPtr UpdateOrderStatus(const UpdateOrderStatusRequest& Request, const FUpdateOrderStatusDelegate& Delegate = FUpdateOrderStatusDelegate()) const;
    FHttpRequestPtr UpdateOrderStatuses(const UpdateOrderStatusesRequest& Request, const FUpdateOrderStatusesDelegate& Delegate = FUpdateOrderStatusesDelegate()) const;
    
private:
    void OnAcceptOrderCancellationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAcceptOrderCancellationDelegate Delegate) const;
    void OnGetOrderResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetOrderDelegate Delegate) const;
    void OnGetOrdersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetOrdersDelegate Delegate) const;
    void OnProvideOrderDigitalCodesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FProvideOrderDigitalCodesDelegate Delegate) const;
    void OnProvideOrderItemIdentifiersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FProvideOrderItemIdentifiersDelegate Delegate) const;
    void OnSetOrderBoxLayoutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetOrderBoxLayoutDelegate Delegate) const;
    void OnSetOrderShipmentBoxesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetOrderShipmentBoxesDelegate Delegate) const;
    void OnUpdateOrderItemsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateOrderItemsDelegate Delegate) const;
    void OnUpdateOrderStatusResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateOrderStatusDelegate Delegate) const;
    void OnUpdateOrderStatusesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateOrderStatusesDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
