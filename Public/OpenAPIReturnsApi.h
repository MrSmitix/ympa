/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIReturnsApi
{
public:
	OpenAPIReturnsApi();
	~OpenAPIReturnsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class GetReturnRequest;
	class GetReturnResponse;
	class GetReturnApplicationRequest;
	class GetReturnApplicationResponse;
	class GetReturnPhotoRequest;
	class GetReturnPhotoResponse;
	class GetReturnsRequest;
	class GetReturnsResponse;
	class SetReturnDecisionRequest;
	class SetReturnDecisionResponse;
	class SubmitReturnDecisionRequest;
	class SubmitReturnDecisionResponse;
	
    DECLARE_DELEGATE_OneParam(FGetReturnDelegate, const GetReturnResponse&);
    DECLARE_DELEGATE_OneParam(FGetReturnApplicationDelegate, const GetReturnApplicationResponse&);
    DECLARE_DELEGATE_OneParam(FGetReturnPhotoDelegate, const GetReturnPhotoResponse&);
    DECLARE_DELEGATE_OneParam(FGetReturnsDelegate, const GetReturnsResponse&);
    DECLARE_DELEGATE_OneParam(FSetReturnDecisionDelegate, const SetReturnDecisionResponse&);
    DECLARE_DELEGATE_OneParam(FSubmitReturnDecisionDelegate, const SubmitReturnDecisionResponse&);
    
    FHttpRequestPtr GetReturn(const GetReturnRequest& Request, const FGetReturnDelegate& Delegate = FGetReturnDelegate()) const;
    FHttpRequestPtr GetReturnApplication(const GetReturnApplicationRequest& Request, const FGetReturnApplicationDelegate& Delegate = FGetReturnApplicationDelegate()) const;
    FHttpRequestPtr GetReturnPhoto(const GetReturnPhotoRequest& Request, const FGetReturnPhotoDelegate& Delegate = FGetReturnPhotoDelegate()) const;
    FHttpRequestPtr GetReturns(const GetReturnsRequest& Request, const FGetReturnsDelegate& Delegate = FGetReturnsDelegate()) const;
    FHttpRequestPtr SetReturnDecision(const SetReturnDecisionRequest& Request, const FSetReturnDecisionDelegate& Delegate = FSetReturnDecisionDelegate()) const;
    FHttpRequestPtr SubmitReturnDecision(const SubmitReturnDecisionRequest& Request, const FSubmitReturnDecisionDelegate& Delegate = FSubmitReturnDecisionDelegate()) const;
    
private:
    void OnGetReturnResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetReturnDelegate Delegate) const;
    void OnGetReturnApplicationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetReturnApplicationDelegate Delegate) const;
    void OnGetReturnPhotoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetReturnPhotoDelegate Delegate) const;
    void OnGetReturnsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetReturnsDelegate Delegate) const;
    void OnSetReturnDecisionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetReturnDecisionDelegate Delegate) const;
    void OnSubmitReturnDecisionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSubmitReturnDecisionDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
