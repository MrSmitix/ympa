/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIFeedsApi
{
public:
	OpenAPIFeedsApi();
	~OpenAPIFeedsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class GetFeedRequest;
	class GetFeedResponse;
	class GetFeedIndexLogsRequest;
	class GetFeedIndexLogsResponse;
	class GetFeedsRequest;
	class GetFeedsResponse;
	class RefreshFeedRequest;
	class RefreshFeedResponse;
	class SetFeedParamsRequest;
	class SetFeedParamsResponse;
	
    DECLARE_DELEGATE_OneParam(FGetFeedDelegate, const GetFeedResponse&);
    DECLARE_DELEGATE_OneParam(FGetFeedIndexLogsDelegate, const GetFeedIndexLogsResponse&);
    DECLARE_DELEGATE_OneParam(FGetFeedsDelegate, const GetFeedsResponse&);
    DECLARE_DELEGATE_OneParam(FRefreshFeedDelegate, const RefreshFeedResponse&);
    DECLARE_DELEGATE_OneParam(FSetFeedParamsDelegate, const SetFeedParamsResponse&);
    
    FHttpRequestPtr GetFeed(const GetFeedRequest& Request, const FGetFeedDelegate& Delegate = FGetFeedDelegate()) const;
    FHttpRequestPtr GetFeedIndexLogs(const GetFeedIndexLogsRequest& Request, const FGetFeedIndexLogsDelegate& Delegate = FGetFeedIndexLogsDelegate()) const;
    FHttpRequestPtr GetFeeds(const GetFeedsRequest& Request, const FGetFeedsDelegate& Delegate = FGetFeedsDelegate()) const;
    FHttpRequestPtr RefreshFeed(const RefreshFeedRequest& Request, const FRefreshFeedDelegate& Delegate = FRefreshFeedDelegate()) const;
    FHttpRequestPtr SetFeedParams(const SetFeedParamsRequest& Request, const FSetFeedParamsDelegate& Delegate = FSetFeedParamsDelegate()) const;
    
private:
    void OnGetFeedResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFeedDelegate Delegate) const;
    void OnGetFeedIndexLogsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFeedIndexLogsDelegate Delegate) const;
    void OnGetFeedsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFeedsDelegate Delegate) const;
    void OnRefreshFeedResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRefreshFeedDelegate Delegate) const;
    void OnSetFeedParamsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetFeedParamsDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
