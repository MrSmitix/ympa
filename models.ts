/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface AcceptOrderCancellationRequest {
  /**
   * Решение об отмене заказа:  * `true` — заказ отменяется, служба доставки узнала об отмене до передачи заказа покупателю. * `false` — заказ не отменяется, так как он уже доставлен покупателю курьером или передан в пункт выдачи заказов. 
   */
  accepted: boolean;
  reason?: OrderCancellationReasonType;
}


/**
 * Запрос на скрытие оферов.
 */
export interface AddHiddenOffersRequest {
  /**
   * Список скрытых товаров. 
   */
  hiddenOffers: Array<HiddenOfferDTO>;
}


/**
 * Товары, которые не удалось поместить в архив.
 */
export interface AddOffersToArchiveDTO {
  /**
   * Список товаров, которые не удалось поместить в архив.
   */
  notArchivedOffers?: Array<AddOffersToArchiveErrorDTO>;
}


/**
 * Товар, который не удалось поместить в архив.
 */
export interface AddOffersToArchiveErrorDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  error: AddOffersToArchiveErrorType;
}


/**
 * Причина, по которой товар не удалось поместить в архив:  * `OFFER_HAS_STOCKS` — товар хранится на складе Маркета. 
 */
export type AddOffersToArchiveErrorType = 'OFFER_HAS_STOCKS' | 'UNKNOWN';

/**
 * Товары, которые нужно поместить в архив. 
 */
export interface AddOffersToArchiveRequest {
  /**
   * Список товаров, которые нужно поместить в архив.
   */
  offerIds: Array<string>;
}


/**
 * Результат архивации товаров.
 */
export interface AddOffersToArchiveResponse {
  status?: ApiResponseStatusType;
  result?: AddOffersToArchiveDTO;
}


/**
 * Составляющие индекса качества.  **Для модели DBS:** * `DBS_CANCELLATION_RATE` — доля отмененных товаров. * `DBS_LATE_DELIVERY_RATE` — доля заказов, доставленных после плановой даты.  **Для моделей FBS и Экспресс:** * `FBS_CANCELLATION_RATE` — доля отмененных товаров. * `FBS_LATE_SHIP_RATE` — доля не вовремя отгруженных заказов. 
 */
export type AffectedOrderQualityRatingComponentType = 'DBS_CANCELLATION_RATE' | 'DBS_LATE_DELIVERY_RATE' | 'FBS_CANCELLATION_RATE' | 'FBS_LATE_SHIP_RATE';

/**
 * Возраст в заданных единицах измерения.
 */
export interface AgeDTO {
  /**
   * Значение. 
   */
  value: number;
  ageUnit: AgeUnitType;
}


/**
 * Единицы измерения возраста:  * `YEAR` — год. * `MONTH` — месяц. 
 */
export type AgeUnitType = 'YEAR' | 'MONTH';

/**
 * Ошибка в данных переданных от клиента.
 */
export interface ApiClientDataErrorResponse {
  status?: ApiResponseStatusType;
  /**
   * Список ошибок.
   */
  errors?: Array<ApiErrorDTO>;
}


/**
 * Общий формат ошибки.
 */
export interface ApiErrorDTO {
  /**
   * Код ошибки.
   */
  code: string;
  /**
   * Описание ошибки.
   */
  message?: string;
}


/**
 * Стандартная обертка для ошибок сервера.
 */
export interface ApiErrorResponse {
  status?: ApiResponseStatusType;
  /**
   * Список ошибок.
   */
  errors?: Array<ApiErrorDTO>;
}


/**
 * Неверны авторизационные данные, указанные в запросе, или запрещен доступ к запрашиваемому ресурсу.
 */
export interface ApiForbiddenErrorResponse {
  status?: ApiResponseStatusType;
  /**
   * Список ошибок.
   */
  errors?: Array<ApiErrorDTO>;
}


/**
 * Превышено ограничение на доступ к ресурсу.
 */
export interface ApiLimitErrorResponse {
  status?: ApiResponseStatusType;
  /**
   * Список ошибок.
   */
  errors?: Array<ApiErrorDTO>;
}


/**
 * Ресурс из запроса заблокирован от применения к нему указанного метода.
 */
export interface ApiLockedErrorResponse {
  status?: ApiResponseStatusType;
  /**
   * Список ошибок.
   */
  errors?: Array<ApiErrorDTO>;
}


/**
 * Запрашиваемый ресурс не найден.
 */
export interface ApiNotFoundErrorResponse {
  status?: ApiResponseStatusType;
  /**
   * Список ошибок.
   */
  errors?: Array<ApiErrorDTO>;
}


/**
 * Стандартная обертка для ответов сервера.
 */
export interface ApiResponse {
  status?: ApiResponseStatusType;
}


/**
 * Тип ответа.
 */
export type ApiResponseStatusType = 'OK' | 'ERROR';

/**
 * Внутренняя ошибка сервера.
 */
export interface ApiServerErrorResponse {
  status?: ApiResponseStatusType;
  /**
   * Список ошибок.
   */
  errors?: Array<ApiErrorDTO>;
}


/**
 * В запросе не указаны авторизационные данные.
 */
export interface ApiUnauthorizedErrorResponse {
  status?: ApiResponseStatusType;
  /**
   * Список ошибок.
   */
  errors?: Array<ApiErrorDTO>;
}


/**
 * Информация о новой цене на товар.
 */
export interface BaseCampaignOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  quantum?: QuantumDTO;
  /**
   * Есть ли товар в продаже. 
   */
  available?: boolean;
}


/**
 * Основные параметры товара.
 */
export interface BaseOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  /**
   * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
   */
  name?: string;
  /**
   * Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
   */
  marketCategoryId?: number;
  /**
   * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
   */
  category?: string;
  /**
   * Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) 
   */
  pictures?: Array<string>;
  /**
   * Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) 
   */
  videos?: Array<string>;
  /**
   * Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся. 
   */
  manuals?: Array<OfferManualDTO>;
  /**
   * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
   */
  vendor?: string;
  /**
   * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
   */
  barcodes?: Array<string>;
  /**
   * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
   */
  description?: string;
  /**
   * Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). 
   */
  manufacturerCountries?: Array<string>;
  weightDimensions?: OfferWeightDimensionsDTO;
  /**
   * Артикул товара от производителя.
   */
  vendorCode?: string;
  /**
   * Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. 
   */
  tags?: Array<string>;
  shelfLife?: TimePeriodDTO;
  lifeTime?: TimePeriodDTO;
  guaranteePeriod?: TimePeriodDTO;
  /**
   * Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. 
   */
  customsCommodityCode?: string;
  /**
   * Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). 
   */
  certificates?: Array<string>;
  /**
   * Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. 
   */
  boxCount?: number;
  condition?: OfferConditionDTO;
  type?: OfferType;
  /**
   * Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) 
   */
  downloadable?: boolean;
  /**
   * Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. 
   */
  adult?: boolean;
  age?: AgeDTO;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. 
   */
  params?: Array<OfferParamDTO>;
}


/**
 * Цена на товар.
 */
export interface BasePriceDTO {
  /**
   * Значение.
   */
  value: number;
  currencyId: CurrencyType;
}


/**
 * Информация об отгрузке.
 */
export interface BaseShipmentDTO {
  /**
   * Идентификатор отгрузки.
   */
  id?: number;
  /**
   * Начало планового интервала отгрузки.
   */
  planIntervalFrom?: string;
  /**
   * Конец планового интервала отгрузки.
   */
  planIntervalTo?: string;
  shipmentType?: ShipmentType;
  warehouse?: PartnerShipmentWarehouseDTO;
  warehouseTo?: PartnerShipmentWarehouseDTO;
  /**
   * Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.
   */
  externalId?: string;
  deliveryService?: DeliveryServiceDTO;
  palletsCount?: PalletsCountDTO;
  /**
   * Идентификаторы заказов в отгрузке.
   */
  orderIds: Set<number>;
  /**
   * Количество заказов, которое Маркет запланировал к отгрузке.
   */
  draftCount?: number;
  /**
   * Количество заказов, которое Маркет подтвердил к отгрузке.
   */
  plannedCount?: number;
  /**
   * Количество заказов, принятых в сортировочном центре или пункте приема.
   */
  factCount?: number;
}


/**
 * Рекомендованная ставка и возможная доля показов.
 */
export interface BidRecommendationItemDTO {
  /**
   * Значение ставки.
   */
  bid: number;
  /**
   * Доля показов. 
   */
  showPercent: number;
}


/**
 * Информация о маркированном товаре.
 */
export interface BriefOrderItemDTO {
  /**
   * Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
   */
  id?: number;
  vat?: OrderVatType;
  /**
   * Количество единиц товара.
   */
  count?: number;
  /**
   * Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка. 
   */
  price?: number;
  /**
   * Название товара.
   */
  offerName?: string;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId?: string;
  /**
   * Переданные вами коды маркировки.
   */
  instances?: Array<OrderItemInstanceDTO>;
}


/**
 * Идентификатор единицы товара.  Заполните только одно поле в зависимости от того, в какой системе маркирован товар.  Подробно о работе с маркируемыми товарами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/cz.html). 
 */
export interface BriefOrderItemInstanceDTO {
  /**
   * Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).  {% note warning %}  Не экранируйте косую черту в коде символа-разделителя `\\u001d`!  ✅ `01030410947874432155Qbag!\\u001d93Zjqw`  ❌ `01030410947874432155Qbag!\\\\u001d93Zjqw`  Косые черты и кавычки в других местах экранируйте по правилам JSON: `\\\\` и `\\\"`  {% endnote %} 
   */
  cis?: string;
  /**
   * Уникальный идентификационный номер ювелирного изделия.  Представляет собой число из 16 цифр. 
   */
  uin?: string;
  /**
   * Регистрационный номер партии товара.  Представляет собой строку из четырех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ/ХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на партию товара. Далее — дата, номер декларации и номер маркированного товара в декларации. 
   */
  rnpt?: string;
  /**
   * Грузовая таможенная декларация.  Представляет собой строку из трех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на ввезенные товары. Далее — дата и номер декларации. 
   */
  gtd?: string;
}


/**
 * Информация о кабинете.
 */
export interface BusinessDTO {
  /**
   * Идентификатор кабинета.
   */
  id?: number;
  /**
   * Название бизнеса.
   */
  name?: string;
}


/**
 * Настройки кабинета.
 */
export interface BusinessSettingsDTO {
  /**
   * Можно ли установить только [базовую цену](*rule): * `false` — можно задать и базовую цену, и цены в конкретных магазинах. * `true` — можно задать только базовую цену. 
   */
  onlyDefaultPrice?: boolean;
  currency?: CurrencyType;
}


/**
 * Параметры товара, для которого нужно рассчитать стоимость услуг.
 */
export interface CalculateTariffsOfferDTO {
  /**
   * Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
   */
  categoryId: number;
  /**
   * Цена на товар в рублях.
   */
  price: number;
  /**
   * Длина товара в сантиметрах.
   */
  length: number;
  /**
   * Ширина товара в сантиметрах.
   */
  width: number;
  /**
   * Высота товара в сантиметрах.
   */
  height: number;
  /**
   * Вес товара в килограммах.
   */
  weight: number;
  /**
   * Квант продажи — количество единиц товара в одном товарном предложении.
   */
  quantity?: number;
}


/**
 * Стоимость услуг.
 */
export interface CalculateTariffsOfferInfoDTO {
  offer: CalculateTariffsOfferDTO;
  /**
   * Список услуг и их стоимость.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
   */
  tariffs: Array<CalculatedTariffDTO>;
}


/**
 * Параметры для расчета стоимости услуг.
 */
export interface CalculateTariffsParametersDTO {
  /**
   * Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр `campaignId`, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр `sellingProgram`. Совместное использование параметров приведет к ошибке. 
   */
  campaignId?: number;
  sellingProgram?: SellingProgramType;
  frequency?: PaymentFrequencyType;
}


export interface CalculateTariffsRequest {
  parameters: CalculateTariffsParametersDTO;
  /**
   * Товары, для которых нужно рассчитать стоимость услуг.
   */
  offers: Array<CalculateTariffsOfferDTO>;
}


export interface CalculateTariffsResponse {
  status?: ApiResponseStatusType;
  result?: CalculateTariffsResponseDTO;
}


/**
 * Расчет стоимости услуг.
 */
export interface CalculateTariffsResponseDTO {
  /**
   * Стоимость услуг.
   */
  offers: Array<CalculateTariffsOfferInfoDTO>;
}


/**
 * Информация об услугах Маркета.
 */
export interface CalculatedTariffDTO {
  type: CalculatedTariffType;
  /**
   * Стоимость услуги в рублях.
   */
  amount?: number;
  /**
   * Параметры расчета тарифа.
   */
  parameters: Array<TariffParameterDTO>;
}


/**
 * Услуга Маркета:  * `AGENCY_COMMISSION` — прием платежа покупателя.  * `PAYMENT_TRANSFER` — перевод платежа покупателя.  * `FEE` — размещение товара на Маркете.  * `DELIVERY_TO_CUSTOMER` — доставка покупателю.  * `CROSSREGIONAL_DELIVERY` — доставка в федеральный округ, город или населенный пункт.  * `EXPRESS_DELIVERY` — экспресс-доставка покупателю.  * `SORTING` — обработка заказа.  * `MIDDLE_MILE` — средняя миля.  Подробнее об услугах Маркета читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/introduction/rates/index.html). 
 */
export type CalculatedTariffType = 'AGENCY_COMMISSION' | 'PAYMENT_TRANSFER' | 'FEE' | 'DELIVERY_TO_CUSTOMER' | 'CROSSREGIONAL_DELIVERY' | 'EXPRESS_DELIVERY' | 'SORTING' | 'MIDDLE_MILE';

/**
 * Информация о магазине.
 */
export interface CampaignDTO {
  /**
   * URL магазина.
   */
  domain?: string;
  /**
   * Идентификатор кампании.
   */
  id?: number;
  /**
   * Идентификатор плательщика в Яндекс Балансе.
   */
  clientId?: number;
  business?: BusinessDTO;
  placementType?: PlacementType;
}


/**
 * Информация об индексе качества магазина.
 */
export interface CampaignQualityRatingDTO {
  /**
   * Идентификатор магазина.
   */
  campaignId: number;
  /**
   * Список значений индекса качества.
   */
  ratings: Array<QualityRatingDTO>;
}


/**
 * Настройки магазина.
 */
export interface CampaignSettingsDTO {
  /**
   * Идентификатор региона, в котором находится магазин.
   */
  countryRegion?: number;
  /**
   * Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — `null`. 
   */
  shopName?: string;
  /**
   * Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * `false` — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * `true` — магазин размещен на сайтах партнеров Яндекс Дистрибуции. 
   */
  showInContext?: boolean;
  /**
   * Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * `false` — предложения не показываются в блоке cпецразмещения. * `true` — предложения показываются в блоке cпецразмещения. 
   */
  showInPremium?: boolean;
  /**
   * Признак использования внешней интернет-статистики. Возможные значения: * `false` — внешняя интернет-статистика не используется. * `true` — внешняя интернет-статистика используется. 
   */
  useOpenStat?: boolean;
  localRegion?: CampaignSettingsLocalRegionDTO;
}


/**
 * Информация о доставке в своем регионе магазина.
 */
export interface CampaignSettingsDeliveryDTO {
  schedule?: CampaignSettingsScheduleDTO;
}


/**
 * Информация о своем регионе магазина.
 */
export interface CampaignSettingsLocalRegionDTO {
  /**
   * Идентификатор региона.
   */
  id?: number;
  /**
   * Название региона.
   */
  name?: string;
  type?: RegionType;
  deliveryOptionsSource?: CampaignSettingsScheduleSourceType;
  delivery?: CampaignSettingsDeliveryDTO;
}


/**
 * Расписание работы службы доставки в своем регионе.
 */
export interface CampaignSettingsScheduleDTO {
  /**
   * Признак работы службы доставки в государственные праздники. Возможные значения. * `false` — служба доставки не работает в праздничные дни. * `true` — служба доставки работает в праздничные дни. 
   */
  availableOnHolidays?: boolean;
  /**
   * Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.
   */
  customHolidays: Array<string>;
  /**
   * Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.
   */
  customWorkingDays: Array<string>;
  period?: CampaignSettingsTimePeriodDTO;
  /**
   * Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.
   */
  totalHolidays: Array<string>;
  /**
   * Список выходных дней недели и государственных праздников.
   */
  weeklyHolidays: Array<number>;
}


/**
 * Источник информации о расписании работы службы доставки. Возможные значения: * `WEB` — информация получена из настроек кабинета продавца на Маркете. * `YML` — информация получена из прайс-листа магазина. 
 */
export type CampaignSettingsScheduleSourceType = 'WEB' | 'YML';

/**
 * Период, за который рассчитывается итоговый список нерабочих дней службы доставки.
 */
export interface CampaignSettingsTimePeriodDTO {
  /**
   * Формат даты: `ДД-ММ-ГГГГ`. 
   */
  fromDate?: string;
  /**
   * Формат даты: `ДД-ММ-ГГГГ`. 
   */
  toDate?: string;
}


/**
 * Информация об индексе качества магазинов.
 */
export interface CampaignsQualityRatingDTO {
  /**
   * Список магазинов c информацией об их индексе качества.
   */
  campaignRatings: Array<CampaignQualityRatingDTO>;
}


/**
 * Информация о параметрах категории.
 */
export interface CategoryContentParametersDTO {
  /**
   * Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
   */
  categoryId: number;
  /**
   * Список характеристик.
   */
  parameters?: Array<CategoryParameterDTO>;
}


/**
 * Информация о категории.  Категория считается листовой, если у нее нет дочерних категорий. 
 */
export interface CategoryDTO {
  /**
   * Идентификатор категории.
   */
  id: number;
  /**
   * Название категории.
   */
  name: string;
  /**
   * Дочерние категории.
   */
  children?: Array<CategoryDTO>;
}


/**
 * Текст ошибки.
 */
export interface CategoryErrorDTO {
  /**
   * Идентификатор категории.
   */
  categoryId?: number;
  type?: CategoryErrorType;
}


/**
 * Типы ошибок:  * `UNKNOWN_CATEGORY` — указана неизвестная категория. * `CATEGORY_IS_NOT_LEAF` — указана нелистовая категория. Укажите ту, которая не имеет дочерних категорий. 
 */
export type CategoryErrorType = 'UNKNOWN_CATEGORY' | 'CATEGORY_IS_NOT_LEAF';

/**
 * Характеристика товара.
 */
export interface CategoryParameterDTO {
  /**
   * Идентификатор характеристики.
   */
  id: number;
  /**
   * Название характеристики.
   */
  name?: string;
  type: ParameterType;
  unit?: CategoryParameterUnitDTO;
  /**
   * Описание характеристики.
   */
  description?: string;
  /**
   * Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
   */
  recommendationTypes?: Array<OfferCardRecommendationType>;
  /**
   * Обязательность характеристики.
   */
  required: boolean;
  /**
   * Используется ли характеристика в фильтре.
   */
  filtering: boolean;
  /**
   * Является ли характеристика особенностью варианта.
   */
  distinctive: boolean;
  /**
   * Можно ли передать сразу несколько значений.
   */
  multivalue: boolean;
  /**
   * Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
   */
  allowCustomValues: boolean;
  /**
   * Список допустимых значений параметра. Только для характеристик типа `ENUM`.
   */
  values?: Array<ParameterValueOptionDTO>;
  constraints?: ParameterValueConstraintsDTO;
  /**
   * Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.
   */
  valueRestrictions?: Array<ValueRestrictionDTO>;
}


/**
 * Единицы измерения характеристики товара.
 */
export interface CategoryParameterUnitDTO {
  /**
   * Единица измерения по умолчанию.
   */
  defaultUnitId: number;
  /**
   * Допустимые единицы измерения.
   */
  units: Array<UnitDTO>;
}


export interface ChangeOutletRequest {
  /**
   * Название точки продаж. 
   */
  name: string;
  type: OutletType;
  /**
   * Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. 
   */
  coords?: string;
  /**
   * Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж. 
   */
  isMain?: boolean;
  /**
   * Идентификатор точки продаж, присвоенный магазином.
   */
  shopOutletCode?: string;
  visibility?: OutletVisibilityType;
  address: OutletAddressDTO;
  /**
   * Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. 
   */
  phones: Array<string>;
  workingSchedule: OutletWorkingScheduleDTO;
  /**
   * Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. 
   */
  deliveryRules?: Array<OutletDeliveryRuleDTO>;
  /**
   * Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
   */
  storagePeriod?: number;
}


/**
 * Каналы продвижения товаров:  * `PUSH` — пуш-уведомление из приложения Яндекс Маркет.  * `STRETCH_MAIN` — верхний баннер-растяжка на главной странице Яндекс Маркета.  * `MAIN_PAGE_CAROUSEL` — карусель акций на главной странице Яндекс Маркета.  * `PRODUCT_RETAIL_PAGE` — товар на странице ритейл-повода.  * `MAIN_PAGE_CAROUSEL_WEB` — карусель акций на главной странице веб версии Яндекс Маркета.  * `PRODUCT_SEPARATE_LANDING` — товар на лендинге акции.  * `SUPER_SHELF_CATEGORY` — полка в категориях.  * `CAROUSEL_RETAIL_PAGE` — карусель на лендинге ритейл-повода.  * `POPUP_APPLICATION` — всплывающее окно в приложении Яндекс Маркет.  * `POST_TELEGRAM` — пост в Телеграм-канале Яндекс Маркета.  * `CPA` — реклама в партнерской сети Яндекс Маркета.  * `WEB_PERFORMANCE_DIRECT` — реклама в Яндекс Директе.  * `APP_PERFORMANCE` — реклама в AppStore и Google Play.  * `BANNER_PICKUP_POINT` — баннер в ПВЗ Маркета.  * `BLOGGER_PERFORMANCE` — рекламная интеграция у блогеров.  * `DIGITAL_CHANNEL_BANNER` — баннер в digital-каналах и социальных сетях VK, Одноклассники.  * `YANDEX_ECOSYSTEM_CHANNELS` — реклама в других сервисах Яндекса: GO, Delivery, Еда.  * `PARTNERS_MAIN_BANNER` — баннер на главной странице mail.ru, auto.ru, ya.ru.  * `OTHER` — прочее. 
 */
export interface ChannelType {
}


/**
 * Информация о сообщениях.
 */
export interface ChatMessageDTO {
  /**
   * Идентификатор сообщения.
   */
  messageId: number;
  /**
   * Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
   */
  createdAt: string;
  sender: ChatMessageSenderType;
  /**
   * Текст сообщения.  Необязательный параметр, если возвращается параметр `payload`. 
   */
  message?: string;
  /**
   * Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр `message`. 
   */
  payload?: Array<ChatMessagePayloadDTO>;
}


/**
 * Информация о приложенных к сообщению файлах.
 */
export interface ChatMessagePayloadDTO {
  /**
   * Имя файла.
   */
  name: string;
  /**
   * Ссылка для скачивания файла.
   */
  url: string;
  /**
   * Размер файла в байтах.
   */
  size: number;
}


/**
 * Кто отправил сообщение:  * `PARTNER` — магазин. * `CUSTOMER` — покупатель. * `MARKET` — Маркет. * `SUPPORT` — сотрудник службы поддержки Маркета. 
 */
export type ChatMessageSenderType = 'PARTNER' | 'CUSTOMER' | 'MARKET' | 'SUPPORT';

/**
 * Информация о сообщениях.
 */
export interface ChatMessagesResultDTO {
  /**
   * Идентификатор заказа.
   */
  orderId: number;
  /**
   * Информация о сообщениях.
   */
  messages: Array<ChatMessageDTO>;
  paging?: ForwardScrollingPagerDTO;
}


/**
 * Статус чата:  * `NEW` — новый чат. * `WAITING_FOR_CUSTOMER` — нужен ответ покупателя. * `WAITING_FOR_PARTNER` — нужен ответ магазина. * `WAITING_FOR_ARBITER` — нужен ответ арбитра. * `WAITING_FOR_MARKET` — нужен ответ Маркета. * `FINISHED` — чат завершен. 
 */
export type ChatStatusType = 'NEW' | 'WAITING_FOR_CUSTOMER' | 'WAITING_FOR_PARTNER' | 'WAITING_FOR_ARBITER' | 'WAITING_FOR_MARKET' | 'FINISHED';

/**
 * Тип чата:  * `CHAT` — чат с покупателем. * `ARBITRAGE` — спор. 
 */
export type ChatType = 'CHAT' | 'ARBITRAGE';

/**
 * Запрос на подтверждение цены. 
 */
export interface ConfirmPricesRequest {
  /**
   * Идентификаторы товаров, у которых подтверждается цена.
   */
  offerIds: Array<string>;
}


/**
 * Запрос для подтверждения отгрузки.
 */
export interface ConfirmShipmentRequest {
  /**
   * Идентификатор отгрузки в системе поставщика.
   */
  externalShipmentId?: string;
}


/**
 * Заказ, для которого нужно создать чат. 
 */
export interface CreateChatRequest {
  /**
   * Идентификатор заказа на Маркете.
   */
  orderId: number;
}


/**
 * Результат создания чата.
 */
export interface CreateChatResponse {
  status?: ApiResponseStatusType;
  result?: CreateChatResultDTO;
}


/**
 * Информация о созданном чате.
 */
export interface CreateChatResultDTO {
  /**
   * Идентификатор чата.
   */
  chatId: number;
}


/**
 * Ответ на запрос о создании точки продаж.
 */
export interface CreateOutletResponse {
  status?: ApiResponseStatusType;
  result?: OutletResponseDTO;
}


/**
 * Коды валют. Возможные значения: * `BYR` — белорусский рубль. * `KZT` — казахстанский тенге. * `RUR` — российский рубль. * `UAH` — украинская гривна. 
 */
export type CurrencyType = 'RUR' | 'USD' | 'EUR' | 'UAH' | 'AUD' | 'GBP' | 'BYR' | 'BYN' | 'DKK' | 'ISK' | 'KZT' | 'CAD' | 'CNY' | 'NOK' | 'XDR' | 'SGD' | 'TRY' | 'SEK' | 'CHF' | 'JPY' | 'AZN' | 'ALL' | 'DZD' | 'AOA' | 'ARS' | 'AMD' | 'AFN' | 'BHD' | 'BGN' | 'BOB' | 'BWP' | 'BND' | 'BRL' | 'BIF' | 'HUF' | 'VEF' | 'KPW' | 'VND' | 'GMD' | 'GHS' | 'GNF' | 'HKD' | 'GEL' | 'AED' | 'EGP' | 'ZMK' | 'ILS' | 'INR' | 'IDR' | 'JOD' | 'IQD' | 'IRR' | 'YER' | 'QAR' | 'KES' | 'KGS' | 'COP' | 'CDF' | 'CRC' | 'KWD' | 'CUP' | 'LAK' | 'LVL' | 'SLL' | 'LBP' | 'LYD' | 'SZL' | 'LTL' | 'MUR' | 'MRO' | 'MKD' | 'MWK' | 'MGA' | 'MYR' | 'MAD' | 'MXN' | 'MZN' | 'MDL' | 'MNT' | 'NPR' | 'NGN' | 'NIO' | 'NZD' | 'OMR' | 'PKR' | 'PYG' | 'PEN' | 'PLN' | 'KHR' | 'SAR' | 'RON' | 'SCR' | 'SYP' | 'SKK' | 'SOS' | 'SDG' | 'SRD' | 'TJS' | 'THB' | 'TWD' | 'BDT' | 'TZS' | 'TND' | 'TMM' | 'UGX' | 'UZS' | 'UYU' | 'PHP' | 'DJF' | 'XAF' | 'XOF' | 'HRK' | 'CZK' | 'CLP' | 'LKR' | 'EEK' | 'ETB' | 'RSD' | 'ZAR' | 'KRW' | 'NAD' | 'TL' | 'UE';

/**
 * День недели:  * `MONDAY` — понедельник. * `TUESDAY` — вторник. * `WEDNESDAY` — среда. * `THURSDAY` — четверг. * `FRIDAY` — пятница. * `SATURDAY` — суббота. * `SUNDAY` — воскресенье. 
 */
export type DayOfWeekType = 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY';

/**
 * Список товаров, которые не удалось удалить, потому что они не найдены или хранятся на складе Маркета.
 */
export interface DeleteCampaignOffersDTO {
  /**
   * Список SKU.
   */
  notDeletedOfferIds?: Array<string>;
}


/**
 * Фильтрации удаляемых товаров по offerIds. 
 */
export interface DeleteCampaignOffersRequest {
  /**
   * Идентификаторы товаров в каталоге.
   */
  offerIds: Array<string>;
}


/**
 * Результат удаления товаров.
 */
export interface DeleteCampaignOffersResponse {
  status?: ApiResponseStatusType;
  result?: DeleteCampaignOffersDTO;
}


/**
 * Фильтр запроса отзывов по бизнесу. 
 */
export interface DeleteGoodsFeedbackCommentRequest {
  /**
   * Идентификатор комментария к отзыву. 
   */
  id: number;
}


/**
 * Запрос на возобновление показа оферов.
 */
export interface DeleteHiddenOffersRequest {
  /**
   * Список скрытых товаров. 
   */
  hiddenOffers: Array<HiddenOfferDTO>;
}


/**
 * Список товаров, которые не удалось удалить, потому что они хранятся на складе Маркета.
 */
export interface DeleteOffersDTO {
  /**
   * Список SKU товаров, которые не удалось удалить.
   */
  notDeletedOfferIds?: Array<string>;
}


/**
 * Товары, которые не удалось восстановить из архива.
 */
export interface DeleteOffersFromArchiveDTO {
  /**
   * Список товаров, которые не удалось восстановить из архива.
   */
  notUnarchivedOfferIds?: Array<string>;
}


/**
 * Товары, которые нужно восстановить из архива. 
 */
export interface DeleteOffersFromArchiveRequest {
  /**
   * Список товаров, которые нужно восстановить из архива.
   */
  offerIds: Array<string>;
}


/**
 * Результат разархивации товаров.
 */
export interface DeleteOffersFromArchiveResponse {
  status?: ApiResponseStatusType;
  result?: DeleteOffersFromArchiveDTO;
}


/**
 * Фильтрации удаляемых товаров по offerIds. 
 */
export interface DeleteOffersRequest {
  /**
   * Список SKU товаров, которые нужно удалить.
   */
  offerIds: Array<string>;
}


/**
 * Результат удаления товаров.
 */
export interface DeleteOffersResponse {
  status?: ApiResponseStatusType;
  result?: DeleteOffersDTO;
}


/**
 * Удаление товаров из акции.  Чтобы убрать:  * все товары из акции и больше не участвовать в ней, передайте значение `true` в параметре `deleteAllOffers`;  * часть товаров, передайте их идентификаторы в параметре `offersIds`. 
 */
export interface DeletePromoOffersRequest {
  /**
   * Идентификатор акции.
   */
  promoId: string;
  /**
   * Чтобы убрать все товары из акции и больше не участвовать в ней, передайте значение `true` и не передавайте параметр `offerIds`.
   */
  deleteAllOffers?: boolean;
  /**
   * Товары, которые нужно убрать из акции.
   */
  offerIds?: Array<string>;
}


/**
 * Результат удаления товаров из акции.
 */
export interface DeletePromoOffersResponse {
  status?: ApiResponseStatusType;
  result?: DeletePromoOffersResultDTO;
}


/**
 * Результат удаления товаров из акции.  Возвращается, только если в запросе был передан параметр `offerIds`. 
 */
export interface DeletePromoOffersResultDTO {
  /**
   * Товары, при удалении которых появились ошибки.  Возвращается, только если есть такие товары. 
   */
  rejectedOffers?: Array<RejectedPromoOfferDeleteDTO>;
}


/**
 * Служба доставки.
 */
export interface DeliveryServiceDTO {
  /**
   * Идентификатор службы доставки.
   */
  id?: number;
  /**
   * Наименование службы доставки.
   */
  name?: string;
}


/**
 * Информация о службе доставки.
 */
export interface DeliveryServiceInfoDTO {
  /**
   * Идентификатор службы доставки.
   */
  id: number;
  /**
   * Наименование службы доставки.
   */
  name: string;
}


/**
 * Информация о службах доставки.
 */
export interface DeliveryServicesDTO {
  /**
   * Информация о службе доставки.
   */
  deliveryService: Array<DeliveryServiceInfoDTO>;
}


/**
 * Информация о документе.
 */
export interface DocumentDTO {
  status?: OrderDocumentStatusType;
  /**
   * Номер документа.
   */
  number?: string;
  /**
   * Дата создания документа.
   */
  date?: string;
}


/**
 * Результат выполнения запроса.
 */
export interface EacVerificationResultDTO {
  verificationResult?: EacVerificationStatusType;
  /**
   * Количество оставшихся попыток проверки кода.  Возвращается, если магазин отправил некорректный код.  Когда все попытки будут исчерпаны, код обновится. 
   */
  attemptsLeft?: number;
}


/**
 * Статус проверки кода подтверждения:  * `ACCEPTED` — код верный. * `REJECTED` — код неверный. * `NEED_UPDATE` — Маркет отправит новый код. Значение возвращается, если превышено количество попыток отправки кода. 
 */
export type EacVerificationStatusType = 'ACCEPTED' | 'REJECTED' | 'NEED_UPDATE';

/**
 * Пустой ответ сервера.
 */
export interface EmptyApiResponse {
  status?: ApiResponseStatusType;
}


/**
 * Информация о рекомендованных карточках товаров.
 */
export interface EnrichedMappingsOfferDTO {
  /**
   * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
   */
  name?: string;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  shopSku?: string;
  /**
   * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
   */
  category?: string;
  /**
   * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
   */
  vendor?: string;
  /**
   * Артикул товара от производителя.
   */
  vendorCode?: string;
  /**
   * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
   */
  description?: string;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  id?: string;
  /**
   * Идентификатор фида.
   */
  feedId?: number;
  /**
   * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
   */
  barcodes?: Array<string>;
  /**
   * URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
   */
  urls?: Array<string>;
  /**
   * Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. 
   */
  pictures?: Array<string>;
  /**
   * Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
   */
  manufacturer?: string;
  /**
   * Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
   */
  manufacturerCountries?: Array<string>;
  /**
   * Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
   */
  minShipment?: number;
  /**
   * Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
   */
  transportUnitSize?: number;
  /**
   * Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
   */
  quantumOfSupply?: number;
  /**
   * Срок, за который продавец поставляет товары на склад, в днях.
   */
  deliveryDurationDays?: number;
  /**
   * Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
   */
  boxCount?: number;
  /**
   * Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
   */
  customsCommodityCodes?: Array<string>;
  weightDimensions?: OfferWeightDimensionsDTO;
  /**
   * Дни недели, в которые продавец поставляет товары на склад.
   */
  supplyScheduleDays?: Array<DayOfWeekType>;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
   */
  shelfLifeDays?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
   */
  lifeTimeDays?: number;
  /**
   * Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
   */
  guaranteePeriodDays?: number;
  processingState?: OfferProcessingStateDTO;
  availability?: OfferAvailabilityStatusType;
  shelfLife?: TimePeriodDTO;
  lifeTime?: TimePeriodDTO;
  guaranteePeriod?: TimePeriodDTO;
  /**
   * Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
   */
  certificate?: string;
  /**
   * Цена на товар в рублях.
   */
  price?: number;
  /**
   * Идентификатор категории для рекомендованной карточки товара на Маркете.  Возвращается только вместе с параметром ##marketSku##. 
   */
  marketCategoryId?: number;
  /**
   * Название категории для рекомендованной карточки товара на Маркете.  Может отсутствовать в ответе. 
   */
  marketCategoryName?: string;
  /**
   * Идентификатор модели для рекомендованной карточки товара на Маркете.  Может отсутствовать в ответе. 
   */
  marketModelId?: number;
  /**
   * Название модели для рекомендованной карточки товара на Маркете.  Возвращается только вместе с параметром ##marketSku##. 
   */
  marketModelName?: string;
  /**
   * SKU на Маркете.
   */
  marketSku?: number;
  /**
   * Название товара с рекомендованной карточки на Маркете.  Может отсутствовать в ответе. 
   */
  marketSkuName?: string;
}


/**
 * Модель товара.
 */
export interface EnrichedModelDTO {
  /**
   * Идентификатор модели товара.
   */
  id?: number;
  /**
   * Название модели товара.
   */
  name?: string;
  prices?: ModelPriceDTO;
  /**
   * Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
   */
  offers?: Array<ModelOfferDTO>;
  /**
   * Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
   */
  offlineOffers?: number;
  /**
   * Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
   */
  onlineOffers?: number;
}


/**
 * Список моделей товаров.
 */
export interface EnrichedModelsDTO {
  /**
   * Список моделей товаров.
   */
  models: Array<EnrichedModelDTO>;
}


/**
 * Информация о коробке.
 */
export interface EnrichedOrderBoxLayoutDTO {
  /**
   * Список товаров в коробке.  Если в коробке едет часть большого товара, в списке может быть только один пункт. 
   */
  items: Array<OrderBoxLayoutItemDTO>;
  /**
   * Идентификатор коробки.
   */
  boxId?: number;
}


/**
 * Информация об отгрузке.
 */
export interface ExtensionShipmentDTO {
  currentStatus?: ShipmentStatusChangeDTO;
  /**
   * Доступные действия над отгрузкой.
   */
  availableActions: Set<ShipmentActionType>;
}


/**
 * Информация о проверке содержимого прайс-листа, загруженного на Маркет.
 */
export interface FeedContentDTO {
  /**
   * Количество предложений, в которых найдены ошибки на этапе загрузки прайс-листа. Выводится, если параметр `content status=OK`. 
   */
  rejectedOffersCount?: number;
  status?: FeedStatusType;
  /**
   * Количество предложений в прайс-листе. Выводится, если параметр `content status=OK`. 
   */
  totalOffersCount?: number;
  error?: FeedContentErrorDTO;
}


/**
 * Информация об ошибке в содержимом прайс-листа. Выводится, если параметр `content status=ERROR`. 
 */
export interface FeedContentErrorDTO {
  type?: FeedContentErrorType;
}


/**
 * Тип ошибки в содержимом прайс-листа.  Возможные значения:  * `PARSE_ERROR` — ошибка при проверке прайс-листа, не связанная с форматом YML. Например, прайс-лист пустой или его не удалось разархивировать. * `PARSE_XML_ERROR` — несоответствие техническим требованиям формата YML. Например, элементы и их значения описаны некорректно. * `TOO_MANY_REJECTED_OFFERS` — более чем в половине предложений из прайс-листа найдены ошибки. Все предложения из прайс-листа не будут опубликованы на Маркете. 
 */
export type FeedContentErrorType = 'PARSE_ERROR' | 'PARSE_XML_ERROR' | 'TOO_MANY_REJECTED_OFFERS';

/**
 * Информация о прайс-листе.
 */
export interface FeedDTO {
  /**
   * Идентификатор прайс-листа.
   */
  id?: number;
  /**
   * Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
   */
  login?: string;
  /**
   * Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. 
   */
  name?: string;
  /**
   * Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
   */
  password?: string;
  /**
   * Дата загрузки прайс-листа на Маркет.  Формат даты: `ДД-ММ-ГГГГ`.  Параметр выводится при размещении прайс-листа на сервере Маркета. 
   */
  uploadDate?: string;
  /**
   * URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. 
   */
  url?: string;
  content?: FeedContentDTO;
  download?: FeedDownloadDTO;
  placement?: FeedPlacementDTO;
  publication?: FeedPublicationDTO;
}


/**
 * Информация о последней загрузке прайс-листа.
 */
export interface FeedDownloadDTO {
  status?: FeedStatusType;
  error?: FeedDownloadErrorDTO;
}


/**
 * Информация об ошибке при загрузке прайс-листа. Выводится, если параметр `download status=ERROR`. 
 */
export interface FeedDownloadErrorDTO {
  /**
   * HTTP-код ошибки индексации прайс-листа. Выводится, если `type=DOWNLOAD_HTTP_ERROR`. 
   */
  httpStatusCode?: number;
  type?: FeedDownloadErrorType;
  /**
   * Описание ошибки. Выводится, если `type=DOWNLOAD_ERROR`. 
   */
  description?: string;
}


/**
 * Тип ошибки загрузки прайс-листа.  Возможные значения:  * `DOWNLOAD_ERROR` — ошибка загрузки прайс-листа. Например, проблема с DNS-сервером или обрыв интернет-соединения.   Проблема описана в параметре `description`.  * `DOWNLOAD_HTTP_ERROR` — Яндекс Маркет передал запрос на получение прайс-листа и получил в ответ HTTP-код, отличный от 2xx.  HTTP-код выведен в параметре `httpStatusCode`. 
 */
export type FeedDownloadErrorType = 'DOWNLOAD_ERROR' | 'DOWNLOAD_HTTP_ERROR';

/**
 * Информация об ошибке, произошедшей во время индексации прайс-листа.  Выводится, если во время индексации произошли ошибки (`index-log-record status=ERROR`). 
 */
export interface FeedIndexLogsErrorDTO {
  /**
   * HTTP-код ошибки индексации прайс-листа.  Выводится, если `type=DOWNLOAD_HTTP_ERROR`. 
   */
  httpStatusCode?: number;
  type?: FeedIndexLogsErrorType;
  /**
   * Описание ошибки.  Выводится, если `type=DOWNLOAD_ERROR`. 
   */
  description?: string;
}


/**
 * Тип ошибки индексации прайс-листа.  Возможные значения:  * `DOWNLOAD_ERROR` — ошибка загрузки прайс-листа. Например, проблема с DNS-сервером или обрыв интернет-соединения.    Проблема описана в параметре `description`.  * `DOWNLOAD_HTTP_ERROR` — Маркет передал запрос на получение прайс-листа и получил в ответ HTTP-код, отличный от 2xx.    HTTP-код выведен в параметре `httpStatusCode`.  * `PARSE_ERROR` — ошибка при проверке прайс-листа, не связанная с форматом YML. Например, прайс-лист пустой или его не удалось разархивировать.  * `PARSE_XML_ERROR` — несоответствие техническим требованиям формата YML. Например, элементы и их значения описаны некорректно.  * `TOO_MANY_REJECTED_OFFERS` — более чем в половине предложений из прайс-листа найдены ошибки. Все предложения из прайс-листа не будут опубликованы на Маркете. 
 */
export type FeedIndexLogsErrorType = 'DOWNLOAD_ERROR' | 'DOWNLOAD_HTTP_ERROR' | 'PARSE_ERROR' | 'PARSE_XML_ERROR' | 'TOO_MANY_REJECTED_OFFERS' | 'NOT_INDEXED';

/**
 * Информация о прайс-листе.
 */
export interface FeedIndexLogsFeedDTO {
  /**
   * Идентификатор прайс-листа.
   */
  id?: number;
}


/**
 * Тип обновления.  Возможные значения:  * `DIFF` — частичное обновление данных на Яндекс Маркете (например, обновление цен ранее опубликованных предложений и публикация новых). * `FAST_PRICE` — только обновление цен ранее опубликованных предложений. * `FULL` — полное обновление данных на Яндекс Маркете. 
 */
export type FeedIndexLogsIndexType = 'DIFF' | 'FAST_PRICE' | 'FULL';

/**
 * Информация о предложениях прайс-листа.
 */
export interface FeedIndexLogsOffersDTO {
  /**
   * Количество предложений, который не опубликованы на Маркете из-за найденных ошибок.
   */
  rejectedCount?: number;
  /**
   * Количество предложений в прайс-листе.
   */
  totalCount?: number;
}


/**
 * Список отчетов по индексации прайс-листа.
 */
export interface FeedIndexLogsRecordDTO {
  /**
   * Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
   */
  downloadTime?: string;
  /**
   * Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
   */
  fileTime?: string;
  /**
   * Идентификатор индексации.
   */
  generationId?: number;
  indexType?: FeedIndexLogsIndexType;
  /**
   * Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
   */
  publishedTime?: string;
  status?: FeedIndexLogsStatusType;
  error?: FeedIndexLogsErrorDTO;
  offers?: FeedIndexLogsOffersDTO;
}


/**
 * Результат выполнения запроса отчета по индексации прайс-листа.
 */
export interface FeedIndexLogsResultDTO {
  feed?: FeedIndexLogsFeedDTO;
  /**
   * Список отчетов по индексации прайс-листа.
   */
  indexLogRecords: Array<FeedIndexLogsRecordDTO>;
  /**
   * Количество отчетов на всех страницах выходных данных.
   */
  total?: number;
}


/**
 * Статус индексации прайс-листа и проверки на соответствие техническим требованиям.  Возможные значения:  * `ERROR` — произошли ошибки. * `OK` — обработан без ошибок. * `WARNING` — наблюдались некритичные проблемы. 
 */
export type FeedIndexLogsStatusType = 'ERROR' | 'OK' | 'WARNING';

/**
 * Параметр прайс-листа.
 */
export interface FeedParameterDTO {
  /**
   * Удалить ли значение параметра.  Возможное значение: * `true` — удалить значение параметра.  Используется вместе с параметром `name`. 
   */
  deleted?: boolean;
  /**
   * Название параметра.  Возможное значение: - `reparseIntervalMinutes` — период скачивания прайс-листа. Маркет будет скачивать прайс-лист через количество минут, указанное в параметре `value`. Например, при `value=1440`, Маркет будет скачивать прайс-лист один раз в сутки.  {% note alert %}  Несмотря на установленное значение, Маркет скачает прайс-лист один раз в сутки.  {% endnote %}  Обязательный параметр. 
   */
  name: string;
  /**
   * Значения параметра.  Используется вместе с параметром `name`. 
   */
  values?: Array<number>;
}


/**
 * Информация о размещении предложений из прайс-листа на Маркете на момент выполнения запроса.
 */
export interface FeedPlacementDTO {
  status?: FeedStatusType;
  /**
   * Количество предложений из прайс-листа, которые размещаются на Яндекс Маркете в момент выполнения запроса.
   */
  totalOffersCount?: number;
}


/**
 * Информация о последней публикации предложений из прайс-листа на Маркете.
 */
export interface FeedPublicationDTO {
  status?: FeedStatusType;
  full?: FeedPublicationFullDTO;
  priceAndStockUpdate?: FeedPublicationPriceAndStockUpdateDTO;
}


/**
 * Информация о последней публикации предложений из прайс-листа на Маркете. 
 */
export interface FeedPublicationFullDTO {
  /**
   * Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
   */
  fileTime?: string;
  /**
   * Дата и время публикации предложений из прайс-листа на Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
   */
  publishedTime?: string;
}


/**
 * Последнее обновление цен и наличия товаров на Маркете. Если последнее по времени обновление было полным, в параметре выводятся те же данные, что и в параметре `full`. Выводится, если параметр `publication status=OK`. 
 */
export interface FeedPublicationPriceAndStockUpdateDTO {
  /**
   * Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
   */
  fileTime?: string;
  /**
   * Дата и время публикации предложений из прайс-листа на Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
   */
  publishedTime?: string;
}


/**
 * Статус прайс-листа.  Возможные значения:    * `ERROR` — найдены ошибки.   * `NA` — прайс-лист не загружался более семи дней или на этапе загрузки произошла ошибка.   * `OK` — ошибок не найдено. 
 */
export type FeedStatusType = 'ERROR' | 'NA' | 'OK';

/**
 * Информация об авторе отзыва.  Если отзыв оставлен анонимно, параметр не возвращается. 
 */
export interface FeedbackAuthorDTO {
  /**
   * Имя автора отзыва.
   */
  name?: string;
  region?: RegionDTO;
}


/**
 * Информация об авторе комментария.
 */
export interface FeedbackCommentAuthorDTO {
  type?: FeedbackCommentAuthorType;
  /**
   * Имя автора отзыва или название магазина.
   */
  name?: string;
}


/**
 * Тип автора:  * `USER` — пользователь. * `SHOP` — магазин. 
 */
export type FeedbackCommentAuthorType = 'USER' | 'SHOP';

/**
 * Комментарий к отзыву на магазин.
 */
export interface FeedbackCommentDTO {
  /**
   * Идентификатор ответа.
   */
  id?: number;
  /**
   * Идентификатор родительского ответа.
   */
  parentId?: number;
  /**
   * Текст ответа.
   */
  body?: string;
  /**
   * Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
   */
  createdAt?: string;
  /**
   * Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
   */
  updatedAt?: string;
  author?: FeedbackCommentAuthorDTO;
  /**
   * Дочерние ответы.
   */
  children?: Array<FeedbackCommentDTO>;
}


/**
 * Отзыв пользователя Яндекс Маркета об указанном магазине.
 */
export interface FeedbackDTO {
  /**
   * Идентификатор отзыва.
   */
  id?: number;
  /**
   * Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
   */
  createdAt?: string;
  /**
   * Комментарий автора отзыва.
   */
  text?: string;
  state?: FeedbackStateType;
  author?: FeedbackAuthorDTO;
  /**
   * Достоинства магазина, описанные в отзыве.
   */
  pro?: string;
  /**
   * Недостатки магазина, описанные в отзыве.
   */
  contra?: string;
  /**
   * Переписка автора отзыва с магазином.
   */
  comments: Array<FeedbackCommentDTO>;
  shop?: FeedbackShopDTO;
  /**
   * Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. 
   */
  resolved?: boolean;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет. 
   */
  verified?: boolean;
  /**
   * Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет. 
   */
  recommend?: boolean;
  grades?: FeedbackGradesDTO;
  order?: FeedbackOrderDTO;
}


/**
 * Способ покупки, указанный в отзыве:  * `DELIVERY` — доставка. * `PICKUP` — самовывоз. * `INSTORE` — в магазине. 
 */
export type FeedbackDeliveryType = 'DELIVERY' | 'PICKUP' | 'INSTORE';

/**
 * Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
 */
export interface FeedbackFactorDTO {
  /**
   * Идентификатор параметра.
   */
  id?: number;
  /**
   * Название параметра. Например, `Скорость обработки заказа`.
   */
  title?: string;
  /**
   * Описание параметра. Например, `Как быстро с вами связались для подтверждения заказа?`.
   */
  description?: string;
  /**
   * Оценка по параметру, указанная в отзыве: от `1` (низшая оценка) до `5` (высшая оценка). 
   */
  value?: number;
}


/**
 * Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
 */
export interface FeedbackGradesDTO {
  /**
   * Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»).
   */
  average?: number;
  /**
   * Количество пользователей, считающих отзыв полезным.
   */
  agreeCount?: number;
  /**
   * Количество пользователей, считающих отзыв бесполезным.
   */
  rejectCount?: number;
  /**
   * Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
   */
  factors: Array<FeedbackFactorDTO>;
}


/**
 * Отзывы пользователей Яндекс Маркета об указанном магазине.
 */
export interface FeedbackListDTO {
  paging?: ScrollingPagerDTO;
  /**
   * Список отзывов.  Содержит не более 20 отзывов. 
   */
  feedbackList: Array<FeedbackDTO>;
}


/**
 * Информация о заказе, указанная в отзыве.
 */
export interface FeedbackOrderDTO {
  /**
   * Номер заказа, указанный в отзыве.
   */
  shopOrderId?: string;
  delivery?: FeedbackDeliveryType;
}


/**
 * Статус реакции на отзыв:  * `ALL` — все отзывы.  * `NEED_REACTION` — отзывы, на которые нужно ответить. 
 */
export type FeedbackReactionStatusType = 'ALL' | 'NEED_REACTION';

/**
 * Информация о магазине.
 */
export interface FeedbackShopDTO {
  /**
   * Название магазина.
   */
  name?: string;
}


/**
 * Статус отзыва:  * `LAST` — актуален. * `PREVIOUS` — устарел. * `DELETED` — удален. 
 */
export type FeedbackStateType = 'LAST' | 'PREVIOUS' | 'DELETED';

/**
 * Фильтр по заполненности или незаполненности поля:  * `SPECIFIED` — вывести товары, у которых поле заполнено. * `EMPTY` — вывести товары, у которых поле не заполнено. 
 */
export type FieldStateType = 'SPECIFIED' | 'EMPTY';

/**
 * Модель для пагинации.
 */
export interface FlippingPagerDTO {
  /**
   * Сколько всего найдено элементов.
   */
  total?: number;
  /**
   * Начальный номер найденного элемента на странице.
   */
  from?: number;
  /**
   * Конечный номер найденного элемента на странице.
   */
  to?: number;
  /**
   * Текущая страница.
   */
  currentPage?: number;
  /**
   * Общее количество страниц.
   */
  pagesCount?: number;
  /**
   * Размер страницы.
   */
  pageSize?: number;
}


/**
 * Ссылка на следующую страницу. 
 */
export interface ForwardScrollingPagerDTO {
  /**
   * Идентификатор следующей страницы результатов.
   */
  nextPageToken?: string;
}


/**
 * Склад Маркета (FBY).
 */
export interface FulfillmentWarehouseDTO {
  /**
   * Идентификатор склада.
   */
  id: number;
  /**
   * Название склада.
   */
  name: string;
  address?: WarehouseAddressDTO;
}


/**
 * Список складов Маркета (FBY).
 */
export interface FulfillmentWarehousesDTO {
  /**
   * Список складов Маркета (FBY).
   */
  warehouses: Array<FulfillmentWarehouseDTO>;
}


/**
 * Информация о точке продаж.
 */
export interface FullOutletDTO {
  /**
   * Название точки продаж. 
   */
  name: string;
  type: OutletType;
  /**
   * Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. 
   */
  coords?: string;
  /**
   * Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж. 
   */
  isMain?: boolean;
  /**
   * Идентификатор точки продаж, присвоенный магазином.
   */
  shopOutletCode?: string;
  visibility?: OutletVisibilityType;
  address: OutletAddressDTO;
  /**
   * Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. 
   */
  phones: Array<string>;
  workingSchedule: OutletWorkingScheduleDTO;
  /**
   * Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. 
   */
  deliveryRules?: Array<OutletDeliveryRuleDTO>;
  /**
   * Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
   */
  storagePeriod?: number;
  /**
   * Идентификатор точки продаж, присвоенный Маркетом.
   */
  id?: number;
  status?: OutletStatusType;
  region?: RegionDTO;
  /**
   * Идентификатор точки продаж, заданный магазином.
   */
  shopOutletId?: string;
  /**
   * Рабочее время.
   */
  workingTime?: string;
  /**
   * Статус модерации.
   */
  moderationReason?: string;
}


/**
 * Информация о лицензии.
 */
export interface FullOutletLicenseDTO {
  /**
   * Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре `number`. 
   */
  id?: number;
  /**
   * Идентификатор точки продаж, для которой действительна лицензия.
   */
  outletId?: number;
  licenseType?: LicenseType;
  /**
   * Номер лицензии.
   */
  number?: string;
  /**
   * Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение `2017-11-13T00:00:00+03:00`.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре `dateOfExpiry`. 
   */
  dateOfIssue?: string;
  /**
   * Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение `2022-11-20T00:00:00+03:00`.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре `dateOfIssue`. 
   */
  dateOfExpiry?: string;
  checkStatus?: LicenseCheckStatusType;
  /**
   * Причина, по которой лицензия не прошла проверку.  Параметр возвращается, только если параметр `checkStatus` имеет значение `FAIL`. 
   */
  checkComment?: string;
}


/**
 * Данные, необходимые для генерации отчета. 
 */
export interface GenerateBoostConsolidatedRequest {
  /**
   * Идентификатор бизнеса.
   */
  businessId: number;
  /**
   * Начало периода, включительно.
   */
  dateFrom: string;
  /**
   * Конец периода, включительно.
   */
  dateTo: string;
}


/**
 * Данные, необходимые для генерации отчета.
 */
export interface GenerateCompetitorsPositionReportRequest {
  /**
   * Идентификатор бизнеса.
   */
  businessId: number;
  /**
   * Идентификатор категории.
   */
  categoryId: number;
  /**
   * Начало периода, включительно.
   */
  dateFrom: string;
  /**
   * Конец периода, включительно.
   */
  dateTo: string;
}


/**
 * Данные, необходимые для генерации отчета. 
 */
export interface GenerateGoodsFeedbackRequest {
  /**
   * Идентификатор бизнеса.
   */
  businessId: number;
}


/**
 * Данные, необходимые для генерации отчета.
 */
export interface GenerateGoodsMovementReportRequest {
  /**
   * Идентификатор кампании.
   */
  campaignId: number;
  /**
   * Начало периода, включительно.
   */
  dateFrom: string;
  /**
   * Конец периода, включительно.
   */
  dateTo: string;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  shopSku?: string;
}


/**
 * Данные, необходимые для генерации отчета: идентификатор магазина и период, за который нужен отчет. 
 */
export interface GenerateGoodsRealizationReportRequest {
  /**
   * Идентификатор кампании.
   */
  campaignId: number;
  /**
   * Год.
   */
  year: number;
  /**
   * Номер месяца.
   */
  month: number;
}


/**
 * Данные, необходимые для генерации отчета. 
 */
export interface GenerateGoodsTurnoverRequest {
  /**
   * Идентификатор кампании.
   */
  campaignId: number;
  /**
   * Дата, за которую нужно рассчитать оборачиваемость. Если параметр не указан, используется текущая дата.
   */
  date?: string;
}


/**
 * Данные, необходимые для генерации файла. 
 */
export interface GenerateMassOrderLabelsRequest {
  /**
   * Идентификатор кабинета.
   */
  businessId: number;
  /**
   * Список идентификаторов заказов.
   */
  orderIds: Set<number>;
}


/**
 * Данные, необходимые для генерации отчета.
 */
export interface GeneratePricesReportRequest {
  /**
   * Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан `campaignId`. 
   */
  businessId?: number;
  /**
   * Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать `businessId` не нужно. 
   */
  campaignId?: number;
  /**
   * Фильтр по категориям на Маркете.
   */
  categoryIds?: Array<number>;
  /**
   * Фильтр по времени появления предложения — начало периода.  Формат даты: `ДД-ММ-ГГГГ`. 
   */
  creationDateFrom?: string;
  /**
   * Фильтр по времени появления предложения — окончание периода.  Формат даты: `ДД-ММ-ГГГГ`. 
   */
  creationDateTo?: string;
}


/**
 * Идентификатор, который понадобится для отслеживания статуса генерации и получения готового отчета.
 */
export interface GenerateReportDTO {
  /**
   * Идентификатор, который понадобится для отслеживания статуса генерации и получения готового отчета.
   */
  reportId: string;
  /**
   * Ожидаемая продолжительность генерации в миллисекундах.
   */
  estimatedGenerationTime: number;
}


/**
 * Ответ на запрос генерации отчета.
 */
export interface GenerateReportResponse {
  status?: ApiResponseStatusType;
  result?: GenerateReportDTO;
}


/**
 * Данные, необходимые для генерации отчета. 
 */
export interface GenerateShelfsStatisticsRequest {
  /**
   * Идентификатор бизнеса.
   */
  businessId: number;
  /**
   * Начало периода, включительно.
   */
  dateFrom: string;
  /**
   * Конец периода, включительно.
   */
  dateTo: string;
  attributionType: ShelfsStatisticsAttributionType;
}


/**
 * Данные, необходимые для генерации документа. 
 */
export interface GenerateShipmentListDocumentReportRequest {
  /**
   * Идентификатор кампании.
   */
  campaignId: number;
  /**
   * Идентификатор отгрузки.
   */
  shipmentId?: number;
  /**
   * Фильтр по идентификаторам заказа в отгрузке.
   */
  orderIds?: Array<number>;
}


/**
 * Данные, необходимые для генерации отчета.
 */
export interface GenerateShowsSalesReportRequest {
  /**
   * Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу. 
   */
  businessId?: number;
  /**
   * Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу. 
   */
  campaignId?: number;
  /**
   * Начало периода, включительно.
   */
  dateFrom: string;
  /**
   * Конец периода, включительно.
   */
  dateTo: string;
  grouping: ShowsSalesGroupingType;
}


/**
 * Данные, необходимые для генерации отчета. 
 */
export interface GenerateStocksOnWarehousesReportRequest {
  /**
   * Идентификатор магазина.
   */
  campaignId: number;
  /**
   * Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
   */
  warehouseIds?: Array<number>;
  /**
   * Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
   */
  reportDate?: string;
  /**
   * Фильтр по категориям на Маркете (кроме модели FBY).
   */
  categoryIds?: Array<number>;
  /**
   * Фильтр по наличию остатков (кроме модели FBY).
   */
  hasStocks?: boolean;
}


/**
 * Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 
 */
export interface GenerateUnitedMarketplaceServicesReportRequest {
  /**
   * Идентификатор бизнеса.
   */
  businessId: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно. 
   */
  dateTimeFrom?: string;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год. 
   */
  dateTimeTo?: string;
  /**
   * Начало периода, включительно.
   */
  dateFrom?: string;
  /**
   * Конец периода, включительно. Максимальный период — 1 год.
   */
  dateTo?: string;
  /**
   * Начальный год формирования акта.
   */
  yearFrom?: number;
  /**
   * Начальный номер месяца формирования акта.
   */
  monthFrom?: number;
  /**
   * Конечный год формирования акта.
   */
  yearTo?: number;
  /**
   * Конечный номер месяца формирования акта.
   */
  monthTo?: number;
  /**
   * Список моделей, которые нужны в отчете. 
   */
  placementPrograms?: Array<PlacementType>;
  /**
   * Список ИНН, которые нужны в отчете.
   */
  inns?: Array<string>;
  /**
   * Список магазинов, которые нужны в отчете.
   */
  campaignIds?: Array<number>;
}


/**
 * Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 
 */
export interface GenerateUnitedNettingReportRequest {
  /**
   * Идентификатор бизнеса.
   */
  businessId: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно. 
   */
  dateTimeFrom?: string;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год. 
   */
  dateTimeTo?: string;
  /**
   * Начало периода, включительно.
   */
  dateFrom?: string;
  /**
   * Конец периода, включительно. Максимальный период — 1 год.
   */
  dateTo?: string;
  /**
   * Номер платежного поручения.
   */
  bankOrderId?: number;
  /**
   * Дата платежного поручения.
   */
  bankOrderDateTime?: string;
  /**
   * Список моделей, которые нужны в отчете. 
   */
  placementPrograms?: Array<PlacementType>;
  /**
   * Список ИНН, которые нужны в отчете.
   */
  inns?: Array<string>;
  /**
   * Список магазинов, которые нужны в отчете.
   */
  campaignIds?: Array<number>;
}


/**
 * Данные, необходимые для генерации отчета. 
 */
export interface GenerateUnitedOrdersRequest {
  /**
   * Идентификатор бизнеса.
   */
  businessId: number;
  /**
   * Начало периода, включительно.
   */
  dateFrom: string;
  /**
   * Конец периода, включительно. Максимальный период — 1 год.
   */
  dateTo: string;
  /**
   * Список магазинов, которые нужны в отчете.
   */
  campaignIds?: Array<number>;
  /**
   * Идентификатор акции, товары из которой нужны в отчете.
   */
  promoId?: string;
}


/**
 * Список предложений.
 */
export interface GetAllOffersResponse {
  /**
   * Список предложений магазина.
   */
  offers: Array<OfferDTO>;
}


/**
 * description.
 */
export interface GetBidsInfoRequest {
  /**
   * Список товаров, для которых нужно получить значения ставок.  Если список не задан, постранично возвращаются все товары со ставками.  Если список задан, результаты возвращаются одной страницей, а параметры `page_token` и `limit` игнорируются. 
   */
  skus?: Array<string>;
}


/**
 * description.
 */
export interface GetBidsInfoResponse {
  status?: ApiResponseStatusType;
  result?: GetBidsInfoResponseDTO;
}


/**
 * Список товаров с указанными ставками.
 */
export interface GetBidsInfoResponseDTO {
  /**
   * Страница списка товаров.
   */
  bids: Array<SkuBidItemDTO>;
  paging?: ForwardScrollingPagerDTO;
}


/**
 * description.
 */
export interface GetBidsRecommendationsRequest {
  /**
   * Список товаров, для которых нужно получить рекомендации по ставкам. 
   */
  skus: Array<string>;
}


/**
 * description.
 */
export interface GetBidsRecommendationsResponse {
  status?: ApiResponseStatusType;
  result?: GetBidsRecommendationsResponseDTO;
}


/**
 * Список товаров с рекомендованными ставками.
 */
export interface GetBidsRecommendationsResponseDTO {
  /**
   * Список товаров с рекомендованными ставками.
   */
  recommendations: Array<SkuBidRecommendationItemDTO>;
}


export interface GetBusinessBuyerInfoResponse {
  status?: ApiResponseStatusType;
  result?: OrderBusinessBuyerDTO;
}


export interface GetBusinessDocumentsInfoResponse {
  status?: ApiResponseStatusType;
  result?: OrderBusinessDocumentsDTO;
}


/**
 * Информация о кабинете и его настройках.
 */
export interface GetBusinessSettingsInfoDTO {
  info?: BusinessDTO;
  settings?: BusinessSettingsDTO;
}


/**
 * Ответ на запрос настроек кабинета.
 */
export interface GetBusinessSettingsResponse {
  status?: ApiResponseStatusType;
  result?: GetBusinessSettingsInfoDTO;
}


/**
 * Ответ на запрос списка логинов, связанных с магазином.
 */
export interface GetCampaignLoginsResponse {
  /**
   * Список логинов.
   */
  logins: Array<string>;
}


/**
 * Параметры размещения товара в магазине.
 */
export interface GetCampaignOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  quantum?: QuantumDTO;
  /**
   * Есть ли товар в продаже. 
   */
  available?: boolean;
  basicPrice?: GetPriceWithDiscountDTO;
  campaignPrice?: GetPriceWithVatDTO;
  status?: OfferCampaignStatusType;
  /**
   * Ошибки, препятствующие размещению товара на витрине. 
   */
  errors?: Array<OfferErrorDTO>;
  /**
   * Предупреждения, не препятствующие размещению товара на витрине. 
   */
  warnings?: Array<OfferErrorDTO>;
}


/**
 * Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке. 
 */
export interface GetCampaignOffersRequest {
  /**
   * Идентификаторы товаров, информация о которых нужна.  {% note warning \"Такой список возвращается только целиком\" %}  Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * `page_token` * `limit`  {% endnote %}    
   */
  offerIds?: Array<string>;
  /**
   * Фильтр по статусам товаров. 
   */
  statuses?: Array<OfferCampaignStatusType>;
  /**
   * Фильтр по категориям на Маркете.
   */
  categoryIds?: Array<number>;
  /**
   * Фильтр по брендам.
   */
  vendorNames?: Array<string>;
  /**
   * Фильтр по тегам.
   */
  tags?: Array<string>;
}


/**
 * Ответ на запрос списка товаров в магазине.
 */
export interface GetCampaignOffersResponse {
  status?: ApiResponseStatusType;
  result?: GetCampaignOffersResultDTO;
}


/**
 * Список товаров в заданном магазине.
 */
export interface GetCampaignOffersResultDTO {
  paging?: ScrollingPagerDTO;
  /**
   * Страница списка товаров.
   */
  offers: Array<GetCampaignOfferDTO>;
}


/**
 * Ответ на запрос региона магазина.
 */
export interface GetCampaignRegionResponse {
  region?: RegionDTO;
}


/**
 * Информация о магазине к данным идентификатора кампании.
 */
export interface GetCampaignResponse {
  campaign?: CampaignDTO;
}


/**
 * Ответ на запрос настроек магазина.
 */
export interface GetCampaignSettingsResponse {
  settings?: CampaignSettingsDTO;
}


/**
 * Результаты поиска магазинов.
 */
export interface GetCampaignsResponse {
  /**
   * Список с информацией по каждому магазину.
   */
  campaigns: Array<CampaignDTO>;
  pager?: FlippingPagerDTO;
}


/**
 * Категории и лимит на установку кванта и минимального количества товаров.
 */
export interface GetCategoriesMaxSaleQuantumDTO {
  /**
   * Категории и лимит на установку кванта и минимального количества товаров.
   */
  results: Array<MaxSaleQuantumDTO>;
  /**
   * Ошибки, которые появились из-за переданных категорий.
   */
  errors?: Array<CategoryErrorDTO>;
}


/**
 * Список категорий, для которых нужно вернуть лимит на установку кванта и минимального количества товаров. 
 */
export interface GetCategoriesMaxSaleQuantumRequest {
  /**
   * Идентификаторы листовых категории на Маркете — тех, у которых нет дочерних категорий.
   */
  marketCategoryIds: Set<number>;
}


export interface GetCategoriesMaxSaleQuantumResponse {
  status?: ApiResponseStatusType;
  /**
   * Категории и лимит на установку кванта и минимального количества товаров.
   */
  results: Array<MaxSaleQuantumDTO>;
  /**
   * Ошибки, которые появились из-за переданных категорий.
   */
  errors?: Array<CategoryErrorDTO>;
}


/**
 * Параметры запроса категорий. 
 */
export interface GetCategoriesRequest {
  language?: LanguageType;
}


export interface GetCategoriesResponse {
  status?: ApiResponseStatusType;
  result?: CategoryDTO;
}


/**
 * Ответ со списком характеристик для категории и их допустимыми значениями.
 */
export interface GetCategoryContentParametersResponse {
  status?: ApiResponseStatusType;
  result?: CategoryContentParametersDTO;
}


/**
 * Историю какого чата нужно получить — и начиная с какого сообщения. 
 */
export interface GetChatHistoryRequest {
  /**
   * Идентификатор сообщения, начиная с которого нужно получить все последующие сообщения.
   */
  messageIdFrom?: number;
}


export interface GetChatHistoryResponse {
  status?: ApiResponseStatusType;
  result?: ChatMessagesResultDTO;
}


/**
 * Информация о чатах.
 */
export interface GetChatInfoDTO {
  /**
   * Идентификатор чата.
   */
  chatId: number;
  /**
   * Идентификатор заказа.
   */
  orderId: number;
  type: ChatType;
  status: ChatStatusType;
  /**
   * Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
   */
  createdAt: string;
  /**
   * Дата и время последнего сообщения в чате.
   */
  updatedAt: string;
}


/**
 * Список чатов.
 */
export interface GetChatsInfoDTO {
  /**
   * Информация о чатах.
   */
  chats: Array<GetChatInfoDTO>;
  paging?: ForwardScrollingPagerDTO;
}


/**
 * Фильтры по чатам, которые нужно вернуть. 
 */
export interface GetChatsRequest {
  /**
   * Фильтр по идентификаторам заказов на Маркете.
   */
  orderIds?: Array<number>;
  /**
   * Фильтр по типам чатов.
   */
  types?: Array<ChatType>;
  /**
   * Фильтр по статусам чатов.
   */
  statuses?: Array<ChatStatusType>;
}


export interface GetChatsResponse {
  status?: ApiResponseStatusType;
  result?: GetChatsInfoDTO;
}


/**
 * Ответ на запрос списка служб доставки.
 */
export interface GetDeliveryServicesResponse {
  result?: DeliveryServicesDTO;
}


export interface GetFeedIndexLogsResponse {
  status?: ApiResponseStatusType;
  result?: FeedIndexLogsResultDTO;
}


/**
 * Ответ на запрос информации о прайс-листе.
 */
export interface GetFeedResponse {
  feed?: FeedDTO;
}


export interface GetFeedbackListResponse {
  status?: ApiResponseStatusType;
  result?: FeedbackListDTO;
}


/**
 * Ответ на запрос списка прайс-листов.
 */
export interface GetFeedsResponse {
  /**
   * Список прайс-листов.
   */
  feeds: Array<FeedDTO>;
}


export interface GetFulfillmentWarehousesResponse {
  status?: ApiResponseStatusType;
  result?: FulfillmentWarehousesDTO;
}


/**
 * Фильтр запроса комментариев отзыва. 
 */
export interface GetGoodsFeedbackCommentsRequest {
  /**
   * Идентификатор отзыва. 
   */
  feedbackId: number;
}


export interface GetGoodsFeedbackCommentsResponse {
  status?: ApiResponseStatusType;
  result?: GoodsFeedbackCommentListDTO;
}


/**
 * Фильтр запроса отзывов в кабинете. 
 */
export interface GetGoodsFeedbackRequest {
  /**
   * Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты. 
   */
  dateTimeFrom?: string;
  /**
   * Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 
   */
  dateTimeTo?: string;
  reactionStatus?: FeedbackReactionStatusType;
  /**
   * Оценка товара.
   */
  ratingValues?: Set<number>;
  /**
   * Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 
   */
  modelIds?: Set<number>;
  /**
   * Фильтр отзывов за баллы Плюса.
   */
  paid?: boolean;
}


export interface GetGoodsFeedbackResponse {
  status?: ApiResponseStatusType;
  result?: GoodsFeedbackListDTO;
}


/**
 * Запрос отчета по товарам.
 */
export interface GetGoodsStatsRequest {
  /**
   * Список ваших идентификаторов SKU. 
   */
  shopSkus: Set<string>;
}


/**
 * Ответ на запрос отчета по товарам.
 */
export interface GetGoodsStatsResponse {
  status?: ApiResponseStatusType;
  result?: GoodsStatsDTO;
}


/**
 * Ответ на запрос списка скрытий.
 */
export interface GetHiddenOffersResponse {
  status?: ApiResponseStatusType;
  result?: GetHiddenOffersResultDTO;
}


/**
 * Список скрытых вами товаров. 
 */
export interface GetHiddenOffersResultDTO {
  paging?: ScrollingPagerDTO;
  /**
   * Список скрытых товаров.
   */
  hiddenOffers: Array<HiddenOfferDTO>;
}


/**
 * Информация о товарах в каталоге. 
 */
export interface GetMappingDTO {
  /**
   * SKU на Маркете.
   */
  marketSku?: number;
  /**
   * Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
   */
  marketSkuName?: string;
  /**
   * Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
   */
  marketModelId?: number;
  /**
   * Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
   */
  marketModelName?: string;
  /**
   * Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
   */
  marketCategoryId?: number;
  /**
   * Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
   */
  marketCategoryName?: string;
}


/**
 * Ответ на запрос списка предложений для моделей.
 */
export interface GetModelsOffersResponse {
  /**
   * Список моделей товаров.
   */
  models: Array<EnrichedModelDTO>;
  currency?: CurrencyType;
  /**
   * Идентификатор региона, для которого выводится информация о предложениях модели (доставляемых в этот регион).  Информацию о регионе по идентификатору можно получить с помощью запроса [GET regions/{regionId}](../../reference/regions/searchRegionsById.md). 
   */
  regionId?: number;
}


/**
 * Запрос информации о моделях.
 */
export interface GetModelsRequest {
  /**
   * Список моделей.
   */
  models: Array<number>;
}


/**
 * Ответ на запрос информации о моделях.
 */
export interface GetModelsResponse {
  /**
   * Список моделей товаров.
   */
  models: Array<ModelDTO>;
  currency?: CurrencyType;
  /**
   * Идентификатор региона, для которого выводится информация о предложениях модели (доставляемых в этот регион).  Информацию о регионе по идентификатору можно получить с помощью запроса [GET regions/{regionId}](../../reference/regions/searchRegionsById.md). 
   */
  regionId?: number;
}


export interface GetOfferCardsContentStatusRequest {
  /**
   * Идентификаторы товаров, информация о которых нужна. <br><br> ⚠️ Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым. 
   */
  offerIds?: Set<string>;
  /**
   * Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html) 
   */
  cardStatuses?: Set<OfferCardStatusType>;
  /**
   * Фильтр по категориям на Маркете.
   */
  categoryIds?: Set<number>;
}


/**
 * Ответ со списком состояний товаров и пагинацией.
 */
export interface GetOfferCardsContentStatusResponse {
  status?: ApiResponseStatusType;
  result?: OfferCardsContentStatusDTO;
}


/**
 * Параметры товара.
 */
export interface GetOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  /**
   * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
   */
  name?: string;
  /**
   * Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
   */
  marketCategoryId?: number;
  /**
   * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
   */
  category?: string;
  /**
   * Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) 
   */
  pictures?: Array<string>;
  /**
   * Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) 
   */
  videos?: Array<string>;
  /**
   * Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся. 
   */
  manuals?: Array<OfferManualDTO>;
  /**
   * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
   */
  vendor?: string;
  /**
   * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
   */
  barcodes?: Array<string>;
  /**
   * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
   */
  description?: string;
  /**
   * Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). 
   */
  manufacturerCountries?: Array<string>;
  weightDimensions?: OfferWeightDimensionsDTO;
  /**
   * Артикул товара от производителя.
   */
  vendorCode?: string;
  /**
   * Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. 
   */
  tags?: Array<string>;
  shelfLife?: TimePeriodDTO;
  lifeTime?: TimePeriodDTO;
  guaranteePeriod?: TimePeriodDTO;
  /**
   * Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. 
   */
  customsCommodityCode?: string;
  /**
   * Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). 
   */
  certificates?: Array<string>;
  /**
   * Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. 
   */
  boxCount?: number;
  condition?: OfferConditionDTO;
  type?: OfferType;
  /**
   * Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) 
   */
  downloadable?: boolean;
  /**
   * Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. 
   */
  adult?: boolean;
  age?: AgeDTO;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. 
   */
  params?: Array<OfferParamDTO>;
  basicPrice?: GetPriceWithDiscountDTO;
  purchasePrice?: GetPriceDTO;
  additionalExpenses?: GetPriceDTO;
  cofinancePrice?: GetPriceDTO;
  cardStatus?: OfferCardStatusType;
  /**
   * Список магазинов, в которых размещен товар. 
   */
  campaigns?: Array<OfferCampaignStatusDTO>;
  /**
   * Информация о том, какие для товара доступны модели размещения. 
   */
  sellingPrograms?: Array<OfferSellingProgramDTO>;
  /**
   * Товар помещен в архив. 
   */
  archived?: boolean;
}


/**
 * Информация о товаре.
 */
export interface GetOfferMappingDTO {
  offer?: GetOfferDTO;
  mapping?: GetMappingDTO;
}


/**
 * Ответ на запрос списка товаров в каталоге.
 */
export interface GetOfferMappingEntriesResponse {
  status?: ApiResponseStatusType;
  result?: OfferMappingEntriesDTO;
}


export interface GetOfferMappingsRequest {
  /**
   * Идентификаторы товаров, информация о которых нужна.  {% note warning \"Такой список возвращается только целиком\" %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте: * `page_token`; * `limit`; * `cardStatuses`; * `categoryIds`; * `vendorNames`; * `tags`; * `archived`.  {% endnote %}    
   */
  offerIds?: Array<string>;
  /**
   * Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html) 
   */
  cardStatuses?: Array<OfferCardStatusType>;
  /**
   * Фильтр по категориям на Маркете.
   */
  categoryIds?: Array<number>;
  /**
   * Фильтр по брендам.
   */
  vendorNames?: Array<string>;
  /**
   * Фильтр по тегам.
   */
  tags?: Array<string>;
  /**
   * Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить товары, находящиеся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращаются товары, не находящиеся в архиве. 
   */
  archived?: boolean;
}


export interface GetOfferMappingsResponse {
  status?: ApiResponseStatusType;
  result?: GetOfferMappingsResultDTO;
}


/**
 * Информация о товарах.
 */
export interface GetOfferMappingsResultDTO {
  paging?: ScrollingPagerDTO;
  /**
   * Информация о товарах.
   */
  offerMappings: Array<GetOfferMappingDTO>;
}


export interface GetOfferRecommendationsRequest {
  /**
   * Идентификаторы товаров, информация о которых нужна. ⚠️ Не используйте это поле одновременно с остальными фильтрами. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.
   */
  offerIds?: Array<string>;
  cofinancePriceFilter?: FieldStateType;
  recommendedCofinancePriceFilter?: FieldStateType;
  competitivenessFilter?: PriceCompetitivenessType;
}


export interface GetOfferRecommendationsResponse {
  status?: ApiResponseStatusType;
  result?: OfferRecommendationsResultDTO;
}


/**
 * Список предложений с пагинатором.
 */
export interface GetOffersResponse {
  /**
   * Список предложений магазина.
   */
  offers: Array<OfferDTO>;
  pager?: FlippingPagerDTO;
}


export interface GetOrderBuyerInfoResponse {
  status?: ApiResponseStatusType;
  result?: OrderBuyerInfoDTO;
}


/**
 * Ответ с информацией для печати ярлыков.
 */
export interface GetOrderLabelsDataResponse {
  status?: ApiResponseStatusType;
  result?: OrderLabelDTO;
}


export interface GetOrderResponse {
  order?: OrderDTO;
}


/**
 * Модель для ответа API списка информации по заказам.
 */
export interface GetOrdersResponse {
  pager?: FlippingPagerDTO;
  /**
   * Модель заказа. 
   */
  orders: Array<OrderDTO>;
  paging?: ForwardScrollingPagerDTO;
}


/**
 * Запрос информации по заказам.
 */
export interface GetOrdersStatsRequest {
  /**
   * Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 
   */
  dateFrom?: string;
  /**
   * Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 
   */
  dateTo?: string;
  /**
   * Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 
   */
  updateFrom?: string;
  /**
   * Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 
   */
  updateTo?: string;
  /**
   * Список идентификаторов заказов.
   */
  orders?: Array<number>;
  /**
   * Список статусов заказов.
   */
  statuses?: Array<OrderStatsStatusType>;
  /**
   * Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 
   */
  hasCis?: boolean;
}


/**
 * Ответ на запрос информации по заказам.
 */
export interface GetOrdersStatsResponse {
  status?: ApiResponseStatusType;
  result?: OrdersStatsDTO;
}


export interface GetOutletLicensesResponse {
  status?: ApiResponseStatusType;
  result?: OutletLicensesResponseDTO;
}


/**
 * Ответ на запрос информации о точке продаж.
 */
export interface GetOutletResponse {
  outlet?: FullOutletDTO;
}


/**
 * Ответ на запрос информации о точках продаж.
 */
export interface GetOutletsResponse {
  /**
   * Информация о точках продаж.
   */
  outlets: Array<FullOutletDTO>;
  paging?: ScrollingPagerDTO;
  pager?: FlippingPagerDTO;
}


/**
 * Цена с указанием времени последнего обновления.
 */
export interface GetPriceDTO {
  /**
   * Значение.
   */
  value: number;
  currencyId: CurrencyType;
  /**
   * Время последнего обновления.
   */
  updatedAt: string;
}


/**
 * Цена с указанием скидки и времени последнего обновления.
 */
export interface GetPriceWithDiscountDTO {
  /**
   * Значение.
   */
  value: number;
  currencyId: CurrencyType;
  /**
   * Цена до скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. 
   */
  discountBase?: number;
  /**
   * Время последнего обновления.
   */
  updatedAt: string;
}


/**
 * Цена с указанием ставки НДС и времени последнего обновления.
 */
export interface GetPriceWithVatDTO {
  /**
   * Цена на товар.
   */
  value?: number;
  /**
   * Цена на товар без скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. 
   */
  discountBase?: number;
  currencyId?: CurrencyType;
  /**
   * Идентификатор ставки НДС, применяемой для товара:  * `2` — 10%. * `5` — 0%. * `6` — не облагается НДС. * `7` — 20%.  Если параметр не указан, используется ставка НДС, установленная в кабинете. 
   */
  vat?: number;
  /**
   * Время последнего обновления.
   */
  updatedAt: string;
}


/**
 * Запрос списка цен.
 */
export interface GetPricesByOfferIdsRequest {
  /**
   * Список SKU.  {% note warning \"Такой список возвращается только целиком\" %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * `page_token` * `limit`  {% endnote %}    
   */
  offerIds?: Array<string>;
}


/**
 * Ответ на запрос списка цен.
 */
export interface GetPricesByOfferIdsResponse {
  status?: ApiResponseStatusType;
  result?: OfferPriceByOfferIdsListResponseDTO;
}


/**
 * Ответ на запрос списка цен.
 */
export interface GetPricesResponse {
  status?: ApiResponseStatusType;
  result?: OfferPriceListResponseDTO;
}


/**
 * Информация о товарах в акции.
 */
export interface GetPromoAssortmentInfoDTO {
  /**
   * Количество товаров, которые участвуют или участвовали в акции.  Учитываются только товары, которые были добавлены вручную.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
   */
  activeOffers: number;
  /**
   * Количество доступных товаров в акции.  Параметр возвращается только для текущих и будущих акций. 
   */
  potentialOffers?: number;
  /**
   * Есть ли изменения в ассортименте, которые еще не применились. Сохранение изменений занимает некоторое время.  Параметр возвращается только для текущих и будущих акций. 
   */
  processing?: boolean;
}


/**
 * Информация об акции «Бестселлеры Маркета».
 */
export interface GetPromoBestsellerInfoDTO {
  /**
   * Является ли акция «Бестселлером Маркета». Подробнее об этой акции читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/bestsellers).
   */
  bestseller: boolean;
  /**
   * До какой даты можно добавить товар в акцию «Бестселлеры Маркета».  Параметр возвращается только для текущих и будущих акций «Бестселлеры Маркета». 
   */
  entryDeadline?: string;
}


/**
 * Ограничения в акции.
 */
export interface GetPromoConstraintsDTO {
  /**
   * Идентификаторы складов, для которых действует акция. Товары, которые лежат на других складах, не будут продаваться по акции.  Параметр возвращается, только если в условиях акции есть ограничение по складу. 
   */
  warehouseIds?: Array<number>;
}


/**
 * Информация об акции.
 */
export interface GetPromoDTO {
  /**
   * Идентификатор акции.
   */
  id: string;
  /**
   * Название акции.
   */
  name: string;
  period: PromoPeriodDTO;
  /**
   * Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением `true`, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением `false`.  Для прошедших акций всегда возвращается со значением `true`.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
   */
  participating: boolean;
  assortmentInfo: GetPromoAssortmentInfoDTO;
  mechanicsInfo: GetPromoMechanicsInfoDTO;
  bestsellerInfo: GetPromoBestsellerInfoDTO;
  /**
   * Список каналов продвижения товаров.
   */
  channels?: Array<ChannelType>;
  constraints?: GetPromoConstraintsDTO;
}


/**
 * Информация о типе акции.
 */
export interface GetPromoMechanicsInfoDTO {
  type: MechanicsType;
  promocodeInfo?: GetPromoPromocodeInfoDTO;
}


/**
 * Товар, который участвует или может участвовать в акции.
 */
export interface GetPromoOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  status: PromoOfferParticipationStatusType;
  params: PromoOfferParamsDTO;
  autoParticipatingDetails?: PromoOfferAutoParticipatingDetailsDTO;
}


/**
 * Получение списка товаров, которые участвуют или могут участвовать в акции.
 */
export interface GetPromoOffersRequest {
  /**
   * Идентификатор акции.
   */
  promoId: string;
  statusType?: PromoOfferParticipationStatusFilterType;
}


export interface GetPromoOffersResponse {
  status?: ApiResponseStatusType;
  result?: GetPromoOffersResultDTO;
}


/**
 * Список товаров, которые участвуют или могут участвовать в акции.
 */
export interface GetPromoOffersResultDTO {
  /**
   * Товары, которые участвуют или могут участвовать в акции.
   */
  offers: Array<GetPromoOfferDTO>;
  paging?: ForwardScrollingPagerDTO;
}


/**
 * Информация для типа `MARKET_PROMOCODE`.  Параметр заполняется только для этого типа акции. 
 */
export interface GetPromoPromocodeInfoDTO {
  /**
   * Промокод.
   */
  promocode: string;
  /**
   * Процент скидки по промокоду.
   */
  discount: number;
}


/**
 * Фильтры для получения списка акций.
 */
export interface GetPromosRequest {
  participation?: PromoParticipationType;
  mechanics?: MechanicsType;
}


export interface GetPromosResponse {
  status?: ApiResponseStatusType;
  result?: GetPromosResultDTO;
}


/**
 * Информация об акциях Маркета.
 */
export interface GetPromosResultDTO {
  /**
   * Акции Маркета.
   */
  promos: Array<GetPromoDTO>;
}


export interface GetQualityRatingDetailsResponse {
  status?: ApiResponseStatusType;
  result?: QualityRatingDetailsDTO;
}


/**
 * Запрос информации по индексу качества.
 */
export interface GetQualityRatingRequest {
  /**
   * Начало периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть раньше 30 дней от текущей даты. 
   */
  dateFrom?: string;
  /**
   * Конец периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть позже текущей даты. 
   */
  dateTo?: string;
  /**
   * Список идентификаторов магазинов.
   */
  campaignIds: Set<number>;
}


/**
 * Информация об индексе качества магазинов.
 */
export interface GetQualityRatingResponse {
  status?: ApiResponseStatusType;
  result?: CampaignsQualityRatingDTO;
}


/**
 * Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке. 
 */
export interface GetQuarantineOffersRequest {
  /**
   * Идентификаторы товаров, информация о которых нужна. <br><br> ⚠️ Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым. 
   */
  offerIds?: Array<string>;
  /**
   * Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html) 
   */
  cardStatuses?: Array<OfferCardStatusType>;
  /**
   * Фильтр по категориям на Маркете.
   */
  categoryIds?: Array<number>;
  /**
   * Фильтр по брендам.
   */
  vendorNames?: Array<string>;
  /**
   * Фильтр по тегам.
   */
  tags?: Array<string>;
}


/**
 * Ответ на запрос списка товаров в карантине.
 */
export interface GetQuarantineOffersResponse {
  status?: ApiResponseStatusType;
  result?: GetQuarantineOffersResultDTO;
}


/**
 * Список товаров в карантине.
 */
export interface GetQuarantineOffersResultDTO {
  paging?: ScrollingPagerDTO;
  /**
   * Страница списка товаров в карантине.
   */
  offers: Array<QuarantineOfferDTO>;
}


export interface GetRegionWithChildrenResponse {
  pager?: FlippingPagerDTO;
  regions?: RegionDTO;
}


export interface GetRegionsResponse {
  /**
   * Регион доставки.
   */
  regions: Array<RegionDTO>;
  paging?: ForwardScrollingPagerDTO;
}


/**
 * Ответ на запрос информации об отчете.
 */
export interface GetReportInfoResponse {
  status?: ApiResponseStatusType;
  result?: ReportInfoDTO;
}


export interface GetReturnResponse {
  status?: ApiResponseStatusType;
  result?: ReturnDTO;
}


export interface GetReturnsResponse {
  status?: ApiResponseStatusType;
  result?: PagedReturnsDTO;
}


export interface GetShipmentOrdersInfoResponse {
  status?: ApiResponseStatusType;
  result?: OrdersShipmentInfoDTO;
}


export interface GetShipmentResponse {
  status?: ApiResponseStatusType;
  result?: ShipmentDTO;
}


/**
 * Запрос рекомендованных карточек товара.
 */
export interface GetSuggestedOfferMappingEntriesRequest {
  /**
   * Список товаров.
   */
  offers: Array<MappingsOfferDTO>;
}


/**
 * Ответ со списком рекомендованных карточек товара.
 */
export interface GetSuggestedOfferMappingEntriesResponse {
  status?: ApiResponseStatusType;
  result?: OfferMappingSuggestionsListDTO;
}


export interface GetSuggestedOfferMappingsRequest {
  /**
   * Список товаров.
   */
  offers?: Array<SuggestedOfferDTO>;
}


export interface GetSuggestedOfferMappingsResponse {
  status?: ApiResponseStatusType;
  result?: GetSuggestedOfferMappingsResultDTO;
}


/**
 * Подобранные карточки на Маркете.
 */
export interface GetSuggestedOfferMappingsResultDTO {
  /**
   * Список товаров.
   */
  offers: Array<SuggestedOfferMappingDTO>;
}


/**
 * Список складов с информацией об остатках на каждом из них.
 */
export interface GetWarehouseStocksDTO {
  paging?: ScrollingPagerDTO;
  /**
   * Страница списка складов.
   */
  warehouses: Array<WarehouseOffersDTO>;
}


/**
 * Фильтры для запроса остатков. 
 */
export interface GetWarehouseStocksRequest {
  /**
   * **Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию — `false`. Если информация нужна, передайте значение `true`. 
   */
  withTurnover?: boolean;
  /**
   * Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращается информация о товарах, которые не находятся в архиве. 
   */
  archived?: boolean;
  /**
   * Фильтр по вашим SKU товаров.  Возвращается информация об остатках всех переданных SKU, включая товары в архиве.  {% note warning \"Такой список возвращается только целиком\" %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * `page_token` * `limit` * `archived`  {% endnote %}    
   */
  offerIds?: Set<string>;
}


export interface GetWarehouseStocksResponse {
  status?: ApiResponseStatusType;
  result?: GetWarehouseStocksDTO;
}


export interface GetWarehousesResponse {
  status?: ApiResponseStatusType;
  result?: WarehousesDTO;
}


/**
 * Информация об авторе комментария.
 */
export interface GoodsFeedbackCommentAuthorDTO {
  type?: GoodsFeedbackCommentAuthorType;
  /**
   * Имя автора или название кабинета.
   */
  name?: string;
}


/**
 * Тип автора:  * `USER` — пользователь. * `BUSINESS` — кабинет. 
 */
export type GoodsFeedbackCommentAuthorType = 'USER' | 'BUSINESS';

/**
 * Комментарий к отзыву.
 */
export interface GoodsFeedbackCommentDTO {
  /**
   * Идентификатор комментария к отзыву. 
   */
  id: number;
  /**
   * Текст комментария.
   */
  text: string;
  /**
   * Может ли продавец изменять комментарий или удалять его.
   */
  canModify?: boolean;
  /**
   * Идентификатор комментария к отзыву. 
   */
  parentId?: number;
  author: GoodsFeedbackCommentAuthorDTO;
  status: GoodsFeedbackCommentStatusType;
}


/**
 * Комментарии к отзыву.
 */
export interface GoodsFeedbackCommentListDTO {
  /**
   * Список комментариев.
   */
  comments: Array<GoodsFeedbackCommentDTO>;
  paging?: ForwardScrollingPagerDTO;
}


/**
 * Статус комментария:  * `PUBLISHED` — опубликован. * `UNMODERATED` — не проверен. * `BANNED` — заблокирован. * `DELETED` — удален. 
 */
export type GoodsFeedbackCommentStatusType = 'PUBLISHED' | 'UNMODERATED' | 'BANNED' | 'DELETED';

/**
 * Отзыв о товаре.
 */
export interface GoodsFeedbackDTO {
  /**
   * Идентификатор отзыва. 
   */
  feedbackId: number;
  /**
   * Дата и время создания отзыва.
   */
  createdAt: string;
  /**
   * Нужен ли ответ на отзыв.
   */
  needReaction: boolean;
  identifiers: GoodsFeedbackIdentifiersDTO;
  /**
   * Имя автора отзыва.
   */
  author?: string;
  description?: GoodsFeedbackDescriptionDTO;
  media?: GoodsFeedbackMediaDTO;
  statistics: GoodsFeedbackStatisticsDTO;
}


/**
 * Текстовая часть отзыва.
 */
export interface GoodsFeedbackDescriptionDTO {
  /**
   * Описание плюсов товара в отзыве.
   */
  advantages?: string;
  /**
   * Описание минусов товара в отзыве.
   */
  disadvantages?: string;
  /**
   * Комментарий в отзыве.
   */
  comment?: string;
}


/**
 * Идентификаторы, которые связаны с отзывом.
 */
export interface GoodsFeedbackIdentifiersDTO {
  /**
   * Идентификатор заказа на Маркете.
   */
  orderId: number;
  /**
   * Идентификатор модели товара.
   */
  modelId: number;
}


/**
 * Список отзывов о товарах. 
 */
export interface GoodsFeedbackListDTO {
  /**
   * Список отзывов.
   */
  feedbacks: Array<GoodsFeedbackDTO>;
  paging?: ForwardScrollingPagerDTO;
}


/**
 * Фото и видео.
 */
export interface GoodsFeedbackMediaDTO {
  /**
   * Ссылки на фото.
   */
  photos?: Array<string>;
  /**
   * Ссылки на видео.
   */
  videos?: Array<string>;
}


/**
 * Статистическая информация по отзыву.
 */
export interface GoodsFeedbackStatisticsDTO {
  /**
   * Оценка товара.
   */
  rating: number;
  /**
   * Количество комментариев к отзыву.  Учитываются только ответы на отзывы, а не дочерние комментарии. 
   */
  commentsCount: number;
  /**
   * Рекомендуют ли этот товар.
   */
  recommended?: boolean;
  /**
   * Количество баллов Плюса, которое автор получил за отзыв.
   */
  paidAmount?: number;
}


/**
 * Отчет по товарам.
 */
export interface GoodsStatsDTO {
  /**
   * Список товаров.
   */
  shopSkus: Array<GoodsStatsGoodsDTO>;
}


/**
 * Информация о товаре.
 */
export interface GoodsStatsGoodsDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  shopSku?: string;
  /**
   * SKU на Маркете.
   */
  marketSku?: number;
  /**
   * Название товара.
   */
  name?: string;
  /**
   * Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).
   */
  price?: number;
  /**
   * Идентификатор категории товара на Маркете.
   */
  categoryId?: number;
  /**
   * Название категории товара на Маркете.
   */
  categoryName?: string;
  weightDimensions?: GoodsStatsWeightDimensionsDTO;
  /**
   * Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. 
   */
  warehouses?: Array<GoodsStatsWarehouseDTO>;
  /**
   * Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
   */
  tariffs?: Array<TariffDTO>;
  /**
   * Ссылки (URL) изображений товара в хорошем качестве.
   */
  pictures?: Array<string>;
}


/**
 * Информация о складе.
 */
export interface GoodsStatsWarehouseDTO {
  /**
   * Идентификатор склада.
   */
  id?: number;
  /**
   * Название склада.
   */
  name?: string;
  /**
   * Информация об остатках товаров на складе.
   */
  stocks: Array<WarehouseStockDTO>;
}


/**
 * Информация о весе и габаритах товара.  Если товар уже привязан к карточке (`marketSku`), в ответе вернутся габариты из карточки Маркета, а не размеры, которые вы передаете. 
 */
export interface GoodsStatsWeightDimensionsDTO {
  /**
   * Длина товара в сантиметрах.
   */
  length?: number;
  /**
   * Ширина товара в сантиметрах.
   */
  width?: number;
  /**
   * Высота товара в сантиметрах.
   */
  height?: number;
  /**
   * Вес товара в килограммах.
   */
  weight?: number;
}


/**
 * GPS-координаты широты и долготы. 
 */
export interface GpsDTO {
  /**
   * Широта.
   */
  latitude: number;
  /**
   * Долгота.
   */
  longitude: number;
}


/**
 * Информация о скрытии.
 */
export interface HiddenOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
}


/**
 * Язык:  * `RU` — русский.  * `EN` — английский. 
 */
export type LanguageType = 'RU' | 'EN';

/**
 * Статус проверки лицензии:  * `NEW` — лицензия проверяется. * `SUCCESS` — лицензия прошла проверку. * `FAIL` — лицензия не прошла проверку. 
 */
export type LicenseCheckStatusType = 'NEW' | 'SUCCESS' | 'FAIL' | 'REVOKE' | 'DONT_WANT' | 'FAIL_MANUAL';

/**
 * Тип лицензии:  * `ALCOHOL` — лицензия на розничную продажу алкогольной продукции. 
 */
export type LicenseType = 'ALCOHOL' | 'UNKNOWN';

/**
 * Описание пункта вывоза для возврата.
 */
export interface LogisticPickupPointDTO {
  /**
   * Идентификатор пункта вывоза.
   */
  id?: number;
  /**
   * Название пункта вывоза.
   */
  name?: string;
  address?: PickupAddressDTO;
  /**
   * Дополнительные инструкции к вывозу.
   */
  instruction?: string;
  type?: LogisticPointType;
  /**
   * Идентификатор логистического партнера, к которому относится логистическая точка.
   */
  logisticPartnerId?: number;
}


/**
 * Тип логистической точки:    * `WAREHOUSE` — склад.   * `PICKUP_POINT` — обычная точка выдачи заказов (ПВЗ).   * `PICKUP_TERMINAL` — постамат.   * `PICKUP_POST_OFFICE` — отделение почтовой связи (ОПС).   * `PICKUP_MIXED` — торговый зал и пункт выдачи заказов.   * `PICKUP_RETAIL` — торговый зал. 
 */
export type LogisticPointType = 'WAREHOUSE' | 'PICKUP_POINT' | 'PICKUP_TERMINAL' | 'PICKUP_POST_OFFICE' | 'PICKUP_MIXED' | 'PICKUP_RETAIL' | 'UNKNOWN';

/**
 * Информация о товарах в каталоге.
 */
export interface MappingsOfferDTO {
  /**
   * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
   */
  name?: string;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  shopSku?: string;
  /**
   * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
   */
  category?: string;
  /**
   * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
   */
  vendor?: string;
  /**
   * Артикул товара от производителя.
   */
  vendorCode?: string;
  /**
   * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
   */
  description?: string;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  id?: string;
  /**
   * Идентификатор фида.
   */
  feedId?: number;
  /**
   * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
   */
  barcodes?: Array<string>;
  /**
   * URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
   */
  urls?: Array<string>;
  /**
   * Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. 
   */
  pictures?: Array<string>;
  /**
   * Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
   */
  manufacturer?: string;
  /**
   * Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
   */
  manufacturerCountries?: Array<string>;
  /**
   * Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
   */
  minShipment?: number;
  /**
   * Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
   */
  transportUnitSize?: number;
  /**
   * Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
   */
  quantumOfSupply?: number;
  /**
   * Срок, за который продавец поставляет товары на склад, в днях.
   */
  deliveryDurationDays?: number;
  /**
   * Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
   */
  boxCount?: number;
  /**
   * Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
   */
  customsCommodityCodes?: Array<string>;
  weightDimensions?: OfferWeightDimensionsDTO;
  /**
   * Дни недели, в которые продавец поставляет товары на склад.
   */
  supplyScheduleDays?: Array<DayOfWeekType>;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
   */
  shelfLifeDays?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
   */
  lifeTimeDays?: number;
  /**
   * Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
   */
  guaranteePeriodDays?: number;
  processingState?: OfferProcessingStateDTO;
  availability?: OfferAvailabilityStatusType;
  shelfLife?: TimePeriodDTO;
  lifeTime?: TimePeriodDTO;
  guaranteePeriod?: TimePeriodDTO;
  /**
   * Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
   */
  certificate?: string;
  /**
   * Цена на товар в рублях.
   */
  price?: number;
}


/**
 * Базовая информация о товарах в каталоге.
 */
export interface MappingsOfferInfoDTO {
  /**
   * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
   */
  name?: string;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  shopSku?: string;
  /**
   * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
   */
  category?: string;
  /**
   * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
   */
  vendor?: string;
  /**
   * Артикул товара от производителя.
   */
  vendorCode?: string;
  /**
   * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
   */
  description?: string;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  id?: string;
  /**
   * Идентификатор фида.
   */
  feedId?: number;
  /**
   * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
   */
  barcodes?: Array<string>;
  /**
   * URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
   */
  urls?: Array<string>;
  /**
   * Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. 
   */
  pictures?: Array<string>;
  /**
   * Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
   */
  manufacturer?: string;
  /**
   * Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
   */
  manufacturerCountries?: Array<string>;
  /**
   * Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
   */
  minShipment?: number;
  /**
   * Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
   */
  transportUnitSize?: number;
  /**
   * Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
   */
  quantumOfSupply?: number;
  /**
   * Срок, за который продавец поставляет товары на склад, в днях.
   */
  deliveryDurationDays?: number;
  /**
   * Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
   */
  boxCount?: number;
  /**
   * Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
   */
  customsCommodityCodes?: Array<string>;
  weightDimensions?: OfferWeightDimensionsDTO;
  /**
   * Дни недели, в которые продавец поставляет товары на склад.
   */
  supplyScheduleDays?: Array<DayOfWeekType>;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
   */
  shelfLifeDays?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
   */
  lifeTimeDays?: number;
  /**
   * Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
   */
  guaranteePeriodDays?: number;
  processingState?: OfferProcessingStateDTO;
  availability?: OfferAvailabilityStatusType;
  shelfLife?: TimePeriodDTO;
  lifeTime?: TimePeriodDTO;
  guaranteePeriod?: TimePeriodDTO;
  /**
   * Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
   */
  certificate?: string;
}


/**
 * Лимит на установку кванта и минимального количества товаров по категориям. 
 */
export interface MaxSaleQuantumDTO {
  /**
   * Идентификатор категории.
   */
  id: number;
  /**
   * Название категории.
   */
  name?: string;
  /**
   * Лимит на установку кванта и минимального количества товаров.
   */
  maxSaleQuantum?: number;
}


/**
 * Тип акции:  * `DIRECT_DISCOUNT` — прямая скидка.  * `BLUE_FLASH` — флеш-акция.  * `MARKET_PROMOCODE` — скидка по промокоду. 
 */
export type MechanicsType = 'DIRECT_DISCOUNT' | 'BLUE_FLASH' | 'MARKET_PROMOCODE';

/**
 * Модель товара.
 */
export interface ModelDTO {
  /**
   * Идентификатор модели товара.
   */
  id?: number;
  /**
   * Название модели товара.
   */
  name?: string;
  prices?: ModelPriceDTO;
}


/**
 * Информация о предложении.
 */
export interface ModelOfferDTO {
  /**
   * Скидка на предложение в процентах.
   */
  discount?: number;
  /**
   * Наименование предложения.
   */
  name?: string;
  /**
   * Позиция предложения в выдаче Маркета на карточке модели.
   */
  pos?: number;
  /**
   * Цена предложения без скидки магазина.
   */
  preDiscountPrice?: number;
  /**
   * Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.
   */
  price?: number;
  /**
   * Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре `regionId`. Предложения, доставляемые из других регионов, показываются после них. 
   */
  regionId?: number;
  /**
   * Стоимость доставки товара в регион:  * `0` — доставка осуществляется бесплатно. * `-1` — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. 
   */
  shippingCost?: number;
  /**
   * Название магазина (в том виде, в котором отображается на Маркете).
   */
  shopName?: string;
  /**
   * Рейтинг магазина.  Возможные значения: * `-1` — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение `-1`. * `1`. * `2`. * `3`. * `4`. * `5`. 
   */
  shopRating?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
   */
  inStock?: number;
}


/**
 * Информация о ценах на модель товара.
 */
export interface ModelPriceDTO {
  /**
   * Средняя цена предложения для модели в регионе.
   */
  avg?: number;
  /**
   * Максимальная цена предложения для модели в регионе.
   */
  max?: number;
  /**
   * Минимальная цена предложения для модели в регионе.
   */
  min?: number;
}


/**
 * Список моделей товаров.
 */
export interface ModelsDTO {
  /**
   * Список моделей товаров.
   */
  models: Array<ModelDTO>;
}


/**
 * Планы по поставкам:  * `ACTIVE` — поставки будут. * `INACTIVE` — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. Через 60 дней после того, как товар закончится на складе, этот статус изменится на `DELISTED`. * `DELISTED` — архив: товар закончился на складе, и его поставок больше не будет. Если товар вернется на склад (например, покупатель вернет заказ), этот статус изменится на `INACTIVE`. 
 */
export type OfferAvailabilityStatusType = 'ACTIVE' | 'INACTIVE' | 'DELISTED';

/**
 * Статус товара в магазине.
 */
export interface OfferCampaignStatusDTO {
  /**
   * Идентификатор кампании. 
   */
  campaignId: number;
  status: OfferCampaignStatusType;
}


/**
 * Статус товара:  * `PUBLISHED` — Готов к продаже. * `CHECKING` — На проверке. * `DISABLED_BY_PARTNER` — Скрыт вами. * `REJECTED_BY_MARKET` — Отклонен. * `DISABLED_AUTOMATICALLY` — Исправьте ошибки. * `CREATING_CARD` — Создается карточка. * `NO_CARD` — Нужна карточка. * `NO_STOCKS` — Нет на складе. * `ARCHIVED` — В архиве.  [Что обозначает каждый из статусов](https://yandex.ru/support/marketplace/assortment/add/statuses.html) 
 */
export type OfferCampaignStatusType = 'PUBLISHED' | 'CHECKING' | 'DISABLED_BY_PARTNER' | 'DISABLED_AUTOMATICALLY' | 'REJECTED_BY_MARKET' | 'CREATING_CARD' | 'NO_CARD' | 'NO_STOCKS' | 'ARCHIVED';

/**
 * Информация о состоянии карточки товара.  Если поле `mapping` отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
 */
export interface OfferCardDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  mapping?: GetMappingDTO;
  /**
   * Список характеристик с их значениями. 
   */
  parameterValues?: Array<ParameterValueDTO>;
  cardStatus?: OfferCardStatusType;
  /**
   * Процент заполненности карточки.
   */
  contentRating?: number;
  /**
   * Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. 
   */
  recommendations?: Array<OfferCardRecommendationDTO>;
  /**
   * Ошибки в контенте, препятствующие размещению товара на витрине.
   */
  errors?: Array<OfferErrorDTO>;
  /**
   * Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
   */
  warnings?: Array<OfferErrorDTO>;
}


/**
 * Рекомендация по заполнению карточки товара.
 */
export interface OfferCardRecommendationDTO {
  type: OfferCardRecommendationType;
  /**
   * Процент выполнения рекомендации. Указывается для рекомендаций некоторых типов.
   */
  percent?: number;
}


/**
 * Рекомендация по дополнению или замене контента. Не возвращается для карточек, которые заполнены Маркетом или содержат бывшие в употреблении товары.  Часть рекомендаций относятся к **основным параметрам**, которые есть у товаров любых категорий. Другие — к тем **характеристикам**, которые есть у товара потому, что он относится к определенной категории.  **1. Рекомендации, относящиеся к основным параметрам**  Каждая такая рекомендация относится к **единственному параметру**. Чтобы заполнить этот параметр, пользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  Рекомендации по заполнению параметров в `updateOfferMappings`:  * `RECOGNIZED_VENDOR` — напишите название производителя так, как его пишет сам производитель (параметр `vendor`). * `PICTURE_COUNT` — добавьте изображения (параметр `pictures`). * `FIRST_PICTURE_SIZE` — замените первое изображение более крупным (параметр `pictures`). * `TITLE_LENGTH` — измените название (параметр `name`). Составьте название по схеме: тип + бренд или производитель + модель + особенности, если есть (размер, вес, цвет). * `DESCRIPTION_LENGTH` — добавьте описание рекомендуемого размера (параметр `description`). * `AVERAGE_PICTURE_SIZE` — замените все изображения на изображения высокого качества (параметр `pictures`). * `FIRST_VIDEO_LENGTH` — добавьте первое видео рекомендуемой длины (параметр `videos`). * `AVERAGE_VIDEO_SIZE` — замените все видео на видео высокого качества (параметр `videos`). * `VIDEO_COUNT` — добавьте больше видео (параметр `videos`).  Рекомендуемые значения параметров описаны в [Справке Яндекс Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/add/).  **2. Рекомендации, относящиеся к характеристикам по категориям**  Каждая такая рекомендация предполагает заполнение **одной или нескольких характеристик**. Чтобы узнать, какие именно характеристики нужно заполнить, воспользуйтесь запросом [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md). Например, если вы получили рекомендацию `MAIN`, нужно заполнить характеристики, имеющие `MAIN` в массиве `recommendationTypes`.  Рекомендации:  * `MAIN` — заполните ключевые характеристики товара, которые используются в поиске и фильтрах. * `ADDITIONAL` — заполните дополнительные характеристики товара. * `DISTINCTIVE` — заполните характеристики, которыми отличаются друг от друга варианты товара.  **3. Устаревшие рекомендации**  * `HAS_VIDEO`. * `FILTERABLE`. * `HAS_DESCRIPTION`. * `HAS_BARCODE`. 
 */
export type OfferCardRecommendationType = 'HAS_VIDEO' | 'RECOGNIZED_VENDOR' | 'MAIN' | 'ADDITIONAL' | 'DISTINCTIVE' | 'FILTERABLE' | 'PICTURE_COUNT' | 'HAS_DESCRIPTION' | 'HAS_BARCODE' | 'FIRST_PICTURE_SIZE' | 'TITLE_LENGTH' | 'DESCRIPTION_LENGTH' | 'AVERAGE_PICTURE_SIZE' | 'FIRST_VIDEO_SIZE' | 'FIRST_VIDEO_LENGTH' | 'AVERAGE_VIDEO_SIZE' | 'VIDEO_COUNT';

/**
 * Статус карточки товара:  * `HAS_CARD_CAN_NOT_UPDATE` — Карточка Маркета. * `HAS_CARD_CAN_UPDATE` — Можно дополнить. * `HAS_CARD_CAN_UPDATE_ERRORS` — Изменения не приняты. * `HAS_CARD_CAN_UPDATE_PROCESSING` — Изменения на проверке. * `NO_CARD_NEED_CONTENT` — Создайте карточку. * `NO_CARD_MARKET_WILL_CREATE` — Создаст Маркет. * `NO_CARD_ERRORS` — Не создана из-за ошибки. * `NO_CARD_PROCESSING` — Проверяем данные. * `NO_CARD_ADD_TO_CAMPAIGN` — Разместите товар в магазине.  [Что обозначает каждый из статусов](https://yandex.ru/support/marketplace/assortment/content/statuses.html) 
 */
export type OfferCardStatusType = 'HAS_CARD_CAN_NOT_UPDATE' | 'HAS_CARD_CAN_UPDATE' | 'HAS_CARD_CAN_UPDATE_ERRORS' | 'HAS_CARD_CAN_UPDATE_PROCESSING' | 'NO_CARD_NEED_CONTENT' | 'NO_CARD_MARKET_WILL_CREATE' | 'NO_CARD_ERRORS' | 'NO_CARD_PROCESSING' | 'NO_CARD_ADD_TO_CAMPAIGN';

/**
 * Список товаров с информацией о состоянии карточек.
 */
export interface OfferCardsContentStatusDTO {
  /**
   * Страница списка товаров с информацией о состоянии карточек.
   */
  offerCards: Array<OfferCardDTO>;
  paging?: ForwardScrollingPagerDTO;
}


/**
 * Состояние уцененного товара. 
 */
export interface OfferConditionDTO {
  type?: OfferConditionType;
  quality?: OfferConditionQualityType;
  /**
   * Описание товара. Подробно опишите дефекты, насколько они заметны и где их искать. 
   */
  reason?: string;
}


/**
 * Внешний вид товара:  * `PERFECT` — идеальный. * `EXCELLENT` — отличный. * `GOOD` — хороший. * `NOT_SPECIFIED` — не выбран. 
 */
export type OfferConditionQualityType = 'PERFECT' | 'EXCELLENT' | 'GOOD' | 'NOT_SPECIFIED';

/**
 * Тип уценки:  * `PREOWNED` —  бывший в употреблении товар, раньше принадлежал другому человеку. * `SHOWCASESAMPLE` — витринный образец. * `REFURBISHED` — повторная продажа товара. * `REDUCTION` — товар с дефектами. * `RENOVATED` — восстановленный товар. * `NOT_SPECIFIED` — не выбран.  `REFURBISHED` — специальное значение для одежды, обуви и аксессуаров. Используется только для уцененных товаров из этой категории. Другие значения для одежды, обуви и аксессуаров не используются. 
 */
export type OfferConditionType = 'PREOWNED' | 'SHOWCASESAMPLE' | 'REFURBISHED' | 'REDUCTION' | 'RENOVATED' | 'NOT_SPECIFIED';

/**
 * Товар с указанными характеристиками.
 */
export interface OfferContentDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  /**
   * Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
   */
  categoryId: number;
  /**
   * Список характеристик с их значениями.  С `parameterValues` обязательно передавайте `marketCategoryId` — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее `parameterId` с пустым `value`.  Максимальное количество характеристик — 300. 
   */
  parameterValues: Array<ParameterValueDTO>;
}


/**
 * Текст ошибки.
 */
export interface OfferContentErrorDTO {
  type: OfferContentErrorType;
  /**
   * Идентификатор характеристики, с которой связана ошибка.
   */
  parameterId?: number;
  /**
   * Текст ошибки.
   */
  message: string;
}


/**
 * Типы ошибок:  * `OFFER_NOT_FOUND` — такого товара нет в каталоге. * `UNKNOWN_CATEGORY` — указана неизвестная категория. * `CATEGORY_MISMATCH` — указана категория, которая не совпадает с категорией товара. * `UNKNOWN_PARAMETER` — передана характеристика, которой нет среди характеристик категории. * `UNEXPECTED_BOOLEAN_VALUE` — вместо boolean-значения передано что-то другое. * `NUMBER_FORMAT` — передана строка, не обозначающая число, вместо числа. * `VALUE_BLANK` — передано пустое значение. * `INVALID_UNIT_ID` — передана единица измерения, недопустимая для характеристики. * `INVALID_GROUP_ID_LENGTH` — в названии превышено допустимое значение символов — 255. * `INVALID_GROUP_ID_CHARACTERS` — переданы [недопустимые символы](*ascii-code). 
 */
export type OfferContentErrorType = 'OFFER_NOT_FOUND' | 'UNKNOWN_CATEGORY' | 'CATEGORY_MISMATCH' | 'UNKNOWN_PARAMETER' | 'UNEXPECTED_BOOLEAN_VALUE' | 'NUMBER_FORMAT' | 'VALUE_BLANK' | 'INVALID_UNIT_ID' | 'INVALID_GROUP_ID_LENGTH' | 'INVALID_GROUP_ID_CHARACTERS';

/**
 * Предложение.
 */
export interface OfferDTO {
  /**
   * Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. 
   */
  price?: number;
  /**
   * Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. 
   */
  feedId?: number;
  /**
   * Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. 
   */
  id?: string;
  /**
   * Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
   */
  shopCategoryId?: string;
  /**
   * Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. 
   */
  marketCategoryId?: number;
  /**
   * Цена предложения без скидки.
   */
  preDiscountPrice?: number;
  /**
   * Скидка на предложение в процентах.
   */
  discount?: number;
  /**
   * Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API. 
   */
  cutPrice?: boolean;
  /**
   * URL-адрес предложения на сайте магазина.
   */
  url?: string;
  /**
   * Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %} 
   */
  modelId: number;
  /**
   * Наименование предложения.
   */
  name?: string;
  currency?: CurrencyType;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
   */
  bid?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
   */
  cbid?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. 
   */
  fee?: number;
  /**
   * Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. 
   */
  blocked?: boolean;
}


/**
 * Сообщение об ошибке, связанной с размещением товара.
 */
export interface OfferErrorDTO {
  /**
   * Тип ошибки.
   */
  message?: string;
  /**
   * Пояснение.
   */
  comment?: string;
}


/**
 * Информация о состоянии цены на товар.
 */
export interface OfferForRecommendationDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId?: string;
  price?: BasePriceDTO;
  cofinancePrice?: GetPriceDTO;
  competitiveness?: PriceCompetitivenessType;
  /**
   * Количество показов карточки товара за последние 7 дней.
   */
  shows?: number;
}


/**
 * Инструкция по использованию товара. 
 */
export interface OfferManualDTO {
  /**
   * Ссылка на инструкцию.
   */
  url: string;
  /**
   * Название инструкции, которое будет отображаться на карточке товара. 
   */
  title?: string;
}


/**
 * Информация о текущей карточке товара на Маркете.
 */
export interface OfferMappingDTO {
  /**
   * SKU на Маркете.
   */
  marketSku?: number;
  /**
   * Идентификатор модели для текущей карточки товара на Маркете.  Например, две лопатки разных цветов имеют разные SKU на Маркете (параметр `marketSku`), но одинаковый идентификатор модели товара. 
   */
  modelId?: number;
  /**
   * Идентификатор категории для текущей карточки товара на Маркете.
   */
  categoryId?: number;
}


/**
 * Информация о товарах в каталоге.
 */
export interface OfferMappingEntriesDTO {
  paging?: ScrollingPagerDTO;
  /**
   * Информация о товарах в каталоге.
   */
  offerMappingEntries: Array<OfferMappingEntryDTO>;
}


/**
 * Список товаров. 
 */
export interface OfferMappingEntryDTO {
  mapping?: OfferMappingDTO;
  awaitingModerationMapping?: OfferMappingDTO;
  rejectedMapping?: OfferMappingDTO;
  offer?: MappingsOfferDTO;
}


/**
 * Текст ошибки.
 */
export interface OfferMappingErrorDTO {
  type: OfferMappingErrorType;
  /**
   * Идентификатор характеристики, с которой связана ошибка.
   */
  parameterId?: number;
  /**
   * Текст ошибки.
   */
  message: string;
}


/**
 * Типы ошибок:  * `UNKNOWN_CATEGORY` — указана неизвестная категория. * `CATEGORY_MISMATCH` — указана категория, которая не совпадает с категорией товара. * `EMPTY_MARKET_CATEGORY` — не указана категория Маркета при передаче характеристик категории. * `UNKNOWN_PARAMETER` — передана характеристика, которой нет среди характеристик категории. * `UNEXPECTED_BOOLEAN_VALUE` — вместо boolean-значения передано что-то другое. * `NUMBER_FORMAT` — передана строка, не обозначающая число, вместо числа. * `VALUE_BLANK` — передано пустое значение. * `INVALID_UNIT_ID` — передана единица измерения, недопустимая для характеристики. * `INVALID_GROUP_ID_LENGTH` — в названии превышено допустимое значение символов — 255. * `INVALID_GROUP_ID_CHARACTERS` — переданы [недопустимые символы](*ascii-code). * `INVALID_PICKER_URL` — передана ссылка на изображение для миниатюры, которой нет в переданных ссылках на изображение товара. 
 */
export type OfferMappingErrorType = 'UNKNOWN_CATEGORY' | 'CATEGORY_MISMATCH' | 'EMPTY_MARKET_CATEGORY' | 'UNKNOWN_PARAMETER' | 'UNEXPECTED_BOOLEAN_VALUE' | 'NUMBER_FORMAT' | 'VALUE_BLANK' | 'INVALID_UNIT_ID' | 'INVALID_GROUP_ID_LENGTH' | 'INVALID_GROUP_ID_CHARACTERS' | 'INVALID_PICKER_URL';

/**
 * Информация о карточке товара.
 */
export interface OfferMappingInfoDTO {
  mapping?: OfferMappingDTO;
  awaitingModerationMapping?: OfferMappingDTO;
  rejectedMapping?: OfferMappingDTO;
}


/**
 * Вид маппинга.
 */
export type OfferMappingKindType = 'ACTIVE' | 'ALL';

/**
 * Список рекомендованных карточек товара.
 */
export interface OfferMappingSuggestionsListDTO {
  /**
   * Список товаров.
   */
  offers: Array<EnrichedMappingsOfferDTO>;
}


/**
 * Параметры товара.  Если у товара несколько значений одного параметра, передайте их с одним и тем же `name`, но разными `value`.  {% cut \"Пример\" %}  ```json \"params\": [   {     \"name\": \"Цвет\",     \"value\": \"Зеленый\"   },   {     \"name\": \"Цвет\",     \"value\": \"Желтый\"   } ] ```  {% endcut %} 
 */
export interface OfferParamDTO {
  /**
   * Название.  Должно совпадать с названием характеристики на Маркете. Узнать его можно из Excel-шаблона категории или через запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md). 
   */
  name: string;
  /**
   * Значение. 
   */
  value: string;
}


/**
 * Список цен.
 */
export interface OfferPriceByOfferIdsListResponseDTO {
  /**
   * Страница списка цен.
   */
  offers: Array<OfferPriceByOfferIdsResponseDTO>;
  paging?: ScrollingPagerDTO;
}


/**
 * Информация об установленной цене.
 */
export interface OfferPriceByOfferIdsResponseDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId?: string;
  price?: PriceDTO;
  /**
   * Дата и время последнего обновления цены.
   */
  updatedAt?: string;
}


/**
 * Товар с информацией о новой цене на него.
 */
export interface OfferPriceDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId?: string;
  price?: PriceDTO;
}


/**
 * Список цен на товары.
 */
export interface OfferPriceListResponseDTO {
  /**
   * Страница списка.
   */
  offers: Array<OfferPriceResponseDTO>;
  paging?: ScrollingPagerDTO;
  /**
   * Количество всех цен магазина, измененных через API.
   */
  total?: number;
}


/**
 * Информация об установленной цене на товар.
 */
export interface OfferPriceResponseDTO {
  /**
   * Идентификатор предложения из прайс-листа.
   */
  id?: string;
  price?: PriceDTO;
  /**
   * SKU на Маркете.
   */
  marketSku?: number;
  /**
   * Дата и время последнего обновления цены на товар.
   */
  updatedAt?: string;
}


/**
 * Причины, по которым товар не прошел модерацию.
 */
export interface OfferProcessingNoteDTO {
  type?: OfferProcessingNoteType;
  /**
   * Дополнительная информация о причине отклонения товара. 
   */
  payload?: string;
}


/**
 * Тип причины, по которой товар не прошел модерацию:  * `ASSORTMENT` — товар производится в разных вариантах. Каждый из них нужно описать как отдельный товар (входной параметр `offer-mapping-entry` запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md) или строка в каталоге, если вы загружаете товары через кабинет продавца на Маркете). * `CANCELLED` — товар отозван с модерации по вашей инициативе. * `CONFLICTING_INFORMATION` _(ранее ошибочно `CONFLICTING`)_ — вы предоставили противоречивую информацию о товаре. Параметры, которые нужно исправить, указаны в параметре `payload`. * `DEPARTMENT_FROZEN` — правила размещения товаров в данной категории перерабатываются, поэтому товар пока не может пройти модерацию. * `INCORRECT_INFORMATION` — информация о товаре, которую вы предоставили, противоречит описанию от производителя. Параметры, которые нужно исправить, указаны в параметре `payload`. * `LEGAL_CONFLICT` — товар не прошел модерацию по юридическим причинам. Например, он официально не продается в России или у вас нет разрешения на его продажу. * `NEED_CLASSIFICATION_INFORMATION` — информации о товаре, которую вы предоставили, не хватает, чтобы отнести его к категории. Проверьте, что правильно указали название, категорию, производителя и страны производства товара, а также URL изображений или страниц с описанием, по которым можно идентифицировать товар. * `NEED_INFORMATION` — товар раньше не продавался в России и пока не размещается на Маркете. Для него можно создать карточку. Подробнее см. в разделе [Работа с карточкой товара](https://yandex.ru/support/marketplace/assortment/content/index.html) Справки Маркета для продавцов. * `NEED_PICTURES` — для идентификации товара нужны его изображения. Отправьте URL изображений товара в запросе [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md) или загрузите обновленный каталог через кабинет продавца на Маркете. * `NEED_VENDOR` — неверно указан производитель товара. * `NO_CATEGORY`, `NO_KNOWLEDGE` — товары из указанной категории пока не размещаются на Маркете. Если категория появится, товар будет снова отправлен на модерацию. * `NO_PARAMETERS_IN_SHOP_TITLE` — товар производится в разных вариантах, и из указанного названия непонятно, о каком идет речь. Параметры, которые нужно добавить в название товара, указаны в параметре `payload`. * `NO_SIZE_MEASURE` — для этого товара нужна размерная сетка. Отправьте ее в службу поддержки или вашему менеджеру. Требования к размерной сетке указаны в параметре `payload`. * `UNKNOWN` — товар не прошел модерацию по другой причине. Обратитесь в службу поддержки или к вашему менеджеру. 
 */
export type OfferProcessingNoteType = 'ASSORTMENT' | 'CANCELLED' | 'CONFLICTING_INFORMATION' | 'OTHER' | 'DEPARTMENT_FROZEN' | 'INCORRECT_INFORMATION' | 'LEGAL_CONFLICT' | 'NEED_CLASSIFICATION_INFORMATION' | 'NEED_INFORMATION' | 'NEED_PICTURES' | 'NEED_VENDOR' | 'NO_CATEGORY' | 'NO_KNOWLEDGE' | 'NO_PARAMETERS_IN_SHOP_TITLE' | 'NO_SIZE_MEASURE' | 'SAMPLE_LINE';

/**
 * Информация о статусе публикации товара на Маркете.
 */
export interface OfferProcessingStateDTO {
  status?: OfferProcessingStatusType;
  /**
   * Причины, по которым товар не прошел модерацию.
   */
  notes?: Array<OfferProcessingNoteDTO>;
}


/**
 * Статус публикации товара:  * `READY` — товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену. * `IN_WORK` — товар проходит модерацию. Это занимает несколько дней. * `NEED_CONTENT` — для товара без SKU на Маркете `marketSku` нужно найти карточку самостоятельно (через API или кабинет продавца на Маркете) или создать ее, если товар еще не продается на Маркете. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре `notes`. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. 
 */
export type OfferProcessingStatusType = 'UNKNOWN' | 'READY' | 'IN_WORK' | 'NEED_INFO' | 'NEED_MAPPING' | 'NEED_CONTENT' | 'CONTENT_PROCESSING' | 'SUSPENDED' | 'REJECTED' | 'REVIEW' | 'CREATE_ERROR' | 'UPDATE_ERROR';

/**
 * Информация о состоянии цен и рекомендации. 
 */
export interface OfferRecommendationDTO {
  offer?: OfferForRecommendationDTO;
  recommendation?: OfferRecommendationInfoDTO;
}


/**
 * Рекомендации, касающиеся цены на товар.
 */
export interface OfferRecommendationInfoDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId?: string;
  recommendedCofinancePrice?: BasePriceDTO;
  competitivenessThresholds?: PriceCompetitivenessThresholdsDTO;
}


/**
 * Список товаров с рекомендациями.
 */
export interface OfferRecommendationsResultDTO {
  paging?: ScrollingPagerDTO;
  /**
   * Страница списка товаров.
   */
  offerRecommendations: Array<OfferRecommendationDTO>;
}


/**
 * Информация о том, по каким моделям можно продавать товар, а по каким нельзя.
 */
export interface OfferSellingProgramDTO {
  sellingProgram: SellingProgramType;
  status: OfferSellingProgramStatusType;
}


/**
 * Информация о доступности или недоступности.  * `FINE` — доступно. * `REJECT` — недоступно. 
 */
export type OfferSellingProgramStatusType = 'FINE' | 'REJECT';

/**
 * Особый тип товара:  * `MEDICINE` — лекарства. * `BOOK` — бумажные и электронные книги. * `AUDIOBOOK` — аудиокниги. * `ARTIST_TITLE` — музыкальная и видеопродукция. * `ON_DEMAND` — товары на заказ.  {% note info \"Если ваш товар — книга\" %}  Укажите год издания в характеристиках товара. [Подробнее о параметре](../../reference/business-assortment/updateOfferMappings.md#offerparamdto)  {% endnote %} 
 */
export type OfferType = 'DEFAULT' | 'MEDICINE' | 'BOOK' | 'AUDIOBOOK' | 'ARTIST_TITLE' | 'ON_DEMAND';

/**
 * Габариты упаковки и вес товара.  Если товар занимает несколько коробок, перед измерением размеров сложите их компактно.  ![Схема измерения многоместных грузов](../../_images/reference/boxes-measure.png) 
 */
export interface OfferWeightDimensionsDTO {
  /**
   * Длина упаковки в см. 
   */
  length: number;
  /**
   * Ширина упаковки в см. 
   */
  width: number;
  /**
   * Высота упаковки в см. 
   */
  height: number;
  /**
   * Вес товара в кг с учетом упаковки (брутто). 
   */
  weight: number;
}


/**
 * Найденные предложения магазина.
 */
export interface OffersDTO {
  /**
   * Список предложений магазина.
   */
  offers: Array<OfferDTO>;
}


/**
 * Значение ограничивающей характеристики и список допустимых значений ограничиваемой характеристики.
 */
export interface OptionValuesLimitedDTO {
  /**
   * Идентификатор значения ограничивающей характеристики.
   */
  limitingOptionValueId: number;
  /**
   * Идентификаторы допустимых значений ограничиваемой характеристики. 
   */
  optionValueIds: Array<number>;
}


/**
 * Информация о коробке.
 */
export interface OrderBoxLayoutDTO {
  /**
   * Список товаров в коробке.  Если в коробке едет часть большого товара, в списке может быть только один пункт. 
   */
  items: Array<OrderBoxLayoutItemDTO>;
}


/**
 * Информация о товаре в коробке.
 */
export interface OrderBoxLayoutItemDTO {
  /**
   * Идентификатор товара в заказе.  {% cut \"Где его взять\" %}  Идентификатор приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`.  {% endcut %}   
   */
  id: number;
  /**
   * Количество единиц товара в коробке.  Используйте это поле, если в коробке поедут целые товары, не разделенные на части. Не используйте это поле одновременно с `partialCount`. 
   */
  fullCount?: number;
  partialCount?: OrderBoxLayoutPartialCountDTO;
  /**
   * Переданные вами коды маркировки.
   */
  instances?: Array<BriefOrderItemInstanceDTO>;
}


/**
 * Информация о части товара в коробке.
 */
export interface OrderBoxLayoutPartialCountDTO {
  /**
   * Номер части, начиная с 1.
   */
  current: number;
  /**
   * На сколько всего частей разделен товар.
   */
  total: number;
}


/**
 * Распределение товаров по коробкам.
 */
export interface OrderBoxesLayoutDTO {
  /**
   * Список коробок.
   */
  boxes: Array<EnrichedOrderBoxLayoutDTO>;
}


/**
 * Информация о покупателе. 
 */
export interface OrderBusinessBuyerDTO {
  /**
   * ИНН.
   */
  inn?: string;
  /**
   * КПП.
   */
  kpp?: string;
  /**
   * Наименование юридического лица.
   */
  organizationName?: string;
  /**
   * Юридический адрес.
   */
  organizationJurAddress?: string;
}


/**
 * Информация о документах. 
 */
export interface OrderBusinessDocumentsDTO {
  upd?: DocumentDTO;
  ukd?: DocumentDTO;
  torgTwelve?: DocumentDTO;
  sf?: DocumentDTO;
  ksf?: DocumentDTO;
}


/**
 * Информация о покупателе с базовыми полями.
 */
export interface OrderBuyerBasicInfoDTO {
  /**
   * Идентификатор покупателя.
   */
  id?: string;
  /**
   * Фамилия покупателя.
   */
  lastName?: string;
  /**
   * Имя покупателя.
   */
  firstName?: string;
  /**
   * Отчество покупателя.
   */
  middleName?: string;
  type?: OrderBuyerType;
}


/**
 * Информация о покупателе.  Параметры `id`, `lastName`, `firstName` и `middleName` возвращаются, только если вы работаете по модели DBS. 
 */
export interface OrderBuyerDTO {
  /**
   * Идентификатор покупателя.
   */
  id?: string;
  /**
   * Фамилия покупателя.
   */
  lastName?: string;
  /**
   * Имя покупателя.
   */
  firstName?: string;
  /**
   * Отчество покупателя.
   */
  middleName?: string;
  type?: OrderBuyerType;
}


/**
 * Информация о покупателе и его номере телефона.
 */
export interface OrderBuyerInfoDTO {
  /**
   * Идентификатор покупателя.
   */
  id?: string;
  /**
   * Фамилия покупателя.
   */
  lastName?: string;
  /**
   * Имя покупателя.
   */
  firstName?: string;
  /**
   * Отчество покупателя.
   */
  middleName?: string;
  type?: OrderBuyerType;
  /**
   * Подменный номер телефона покупателя. Подробнее о таких номерах читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/orders/dbs/call#fake-number).  Формат номера: `+<код_страны><код_региона><номер_телефона>`. 
   */
  phone?: string;
}


/**
 * Тип покупателя:  * `PERSON` — физическое лицо.  * `BUSINESS` — организация. 
 */
export type OrderBuyerType = 'PERSON' | 'BUSINESS';

/**
 * Варианты причин, по которым заказ не может быть отменен.  * `ORDER_DELIVERED` — заказ уже доставлен. * `ORDER_IN_DELIVERY` — заказ уже у курьера. 
 */
export type OrderCancellationReasonType = 'ORDER_DELIVERED' | 'ORDER_IN_DELIVERY';

/**
 * Информация о курьере.
 */
export interface OrderCourierDTO {
  /**
   * Полное имя курьера.
   */
  fullName?: string;
  /**
   * Номер телефона курьера.
   */
  phone?: string;
  /**
   * Добавочный номер телефона.
   */
  phoneExtension?: string;
  /**
   * Номер транспортного средства.
   */
  vehicleNumber?: string;
  /**
   * Описание машины. Например, модель и цвет.
   */
  vehicleDescription?: string;
}


/**
 * Заказ.
 */
export interface OrderDTO {
  /**
   * Идентификатор заказа.
   */
  id?: number;
  status?: OrderStatusType;
  substatus?: OrderSubstatusType;
  creationDate?: string;
  updatedAt?: string;
  currency?: CurrencyType;
  /**
   * Платеж покупателя. 
   */
  itemsTotal?: number;
  /**
   * Стоимость доставки. 
   */
  deliveryTotal?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
   */
  buyerItemsTotal?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
   */
  buyerTotal?: number;
  /**
   * Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
   */
  buyerItemsTotalBeforeDiscount?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). 
   */
  buyerTotalBeforeDiscount?: number;
  paymentType?: OrderPaymentType;
  paymentMethod?: OrderPaymentMethodType;
  /**
   * Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
   */
  fake?: boolean;
  /**
   * Список товаров в заказе.
   */
  items: Array<OrderItemDTO>;
  /**
   * Список субсидий по типам.
   */
  subsidies?: Array<OrderSubsidyDTO>;
  delivery?: OrderDeliveryDTO;
  buyer?: OrderBuyerDTO;
  /**
   * Комментарий к заказу.
   */
  notes?: string;
  taxSystem?: OrderTaxSystemType;
  /**
   * **Только для модели DBS**  Запрошена ли отмена. 
   */
  cancelRequested?: boolean;
  expiryDate?: string;
}


/**
 * Адрес доставки.  Указывается, если `type=DELIVERY`, `type=POST` или `type=PICKUP` (адрес пункта выдачи). 
 */
export interface OrderDeliveryAddressDTO {
  /**
   * Страна.  Обязательный параметр. 
   */
  country?: string;
  /**
   * Почтовый индекс.  Указывается, если выбрана доставка почтой (`delivery type=POST`). 
   */
  postcode?: string;
  /**
   * Город или населенный пункт.  Обязательный параметр. 
   */
  city?: string;
  /**
   * Район.
   */
  district?: string;
  /**
   * Станция метро.
   */
  subway?: string;
  /**
   * Улица.  Обязательный параметр. 
   */
  street?: string;
  /**
   * Дом или владение.  Обязательный параметр. 
   */
  house?: string;
  /**
   * Корпус или строение.
   */
  block?: string;
  /**
   * Подъезд.
   */
  entrance?: string;
  /**
   * Код домофона.
   */
  entryphone?: string;
  /**
   * Этаж.
   */
  floor?: string;
  /**
   * Квартира или офис.
   */
  apartment?: string;
  /**
   * Телефон получателя заказа.  Обязательный параметр. 
   */
  phone?: string;
  /**
   * Фамилия, имя и отчество получателя заказа.  Обязательный параметр. 
   */
  recipient?: string;
  gps?: GpsDTO;
}


/**
 * Информация о доставке.
 */
export interface OrderDeliveryDTO {
  /**
   * Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
   */
  id?: string;
  type?: OrderDeliveryType;
  /**
   * Наименование службы доставки.
   */
  serviceName?: string;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Стоимость доставки смотрите в параметре `deliveryTotal`.  {% endnote %}  Стоимость доставки в валюте заказа. 
   */
  price?: number;
  deliveryPartnerType?: OrderDeliveryPartnerType;
  courier?: OrderCourierDTO;
  dates?: OrderDeliveryDatesDTO;
  region?: RegionDTO;
  address?: OrderDeliveryAddressDTO;
  vat?: OrderVatType;
  /**
   * Идентификатор службы доставки.
   */
  deliveryServiceId?: number;
  liftType?: OrderLiftType;
  /**
   * Стоимость подъема на этаж.
   */
  liftPrice?: number;
  /**
   * Идентификатор пункта самовывоза, присвоенный магазином.
   */
  outletCode?: string;
  /**
   * Формат даты: `ДД-ММ-ГГГГ`. 
   */
  outletStorageLimitDate?: string;
  dispatchType?: OrderDeliveryDispatchType;
  /**
   * Информация для отслеживания перемещений посылки.
   */
  tracks?: Array<OrderTrackDTO>;
  /**
   * Информация о посылках.
   */
  shipments?: Array<OrderShipmentDTO>;
  /**
   * Приблизительная ли дата доставки.
   */
  estimated?: boolean;
  eacType?: OrderDeliveryEacType;
  /**
   * Код подтверждения ЭАПП (для типа `MERCHANT_TO_COURIER`). 
   */
  eacCode?: string;
}


/**
 * Информация о новой дате доставки заказа.
 */
export interface OrderDeliveryDateDTO {
  /**
   * Новая дата доставки заказа.  Формат даты: `ГГГГ-ММ-ДД`. 
   */
  toDate: string;
}


/**
 * Причина переноса доставки заказа. Возможные причины изменения даты:   - ```USER_MOVED_DELIVERY_DATES``` — покупатель попросил изменить дату или вы договорились привезти ему заказ раньше изначальной даты. Кроме этого указывается для подтверждения даты доставки товаров на заказ с долгой (31-60 дней) доставкой.   - ```PARTNER_MOVED_DELIVERY_DATES``` — магазин не может доставить заказ в срок. 
 */
export type OrderDeliveryDateReasonType = 'USER_MOVED_DELIVERY_DATES' | 'PARTNER_MOVED_DELIVERY_DATES';

/**
 * Диапазон дат доставки.
 */
export interface OrderDeliveryDatesDTO {
  /**
   * Формат даты: `ДД-ММ-ГГГГ`. 
   */
  fromDate?: string;
  /**
   * Формат даты: `ДД-ММ-ГГГГ`. 
   */
  toDate?: string;
  /**
   * Начало интервала времени доставки.  Передается только совместно с параметром `type=DELIVERY`.  Формат времени: 24-часовой, `ЧЧ:ММ`. В качестве минут всегда должно быть указано `00` (исключение — `23:59`).  Минимальное значение: `00:00`. 
   */
  fromTime?: string;
  /**
   * Конец интервала времени доставки.  Передается только совместно с параметром `type=DELIVERY`.  Формат времени: 24-часовой, `ЧЧ:ММ`. В качестве минут всегда должно быть указано `00` (исключение — `23:59`).  Максимальное значение: `23:59`. 
   */
  toTime?: string;
  /**
   * Формат даты: `ДД-ММ-ГГГГ`. 
   */
  realDeliveryDate?: string;
}


/**
 * Способ отгрузки:  * `BUYER` — доставка покупателю.  * `MARKET_PARTNER_OUTLET` — доставка в пункт выдачи партнера.  * `MARKET_BRANDED_OUTLET` — доставка в пункт выдачи заказов Маркета.  * `SHOP_OUTLET` — доставка в пункт выдачи заказов магазина.  * `DROPOFF` — доставка в пункт выдачи, который принимает заказы от продавцов и передает их курьерам.  * `UNKNOWN` — неизвестный тип. 
 */
export type OrderDeliveryDispatchType = 'UNKNOWN' | 'BUYER' | 'MARKET_PARTNER_OUTLET' | 'MARKET_BRANDED_OUTLET' | 'SHOP_OUTLET' | 'DROPOFF';

/**
 * Тип кода подтверждения ЭАПП:  * `MERCHANT_TO_COURIER` — продавец передает код курьеру.  * `COURIER_TO_MERCHANT` — курьер передает код продавцу.  * `CHECKING_BY_MERCHANT` — продавец проверяет код на своей стороне. 
 */
export type OrderDeliveryEacType = 'MERCHANT_TO_COURIER' | 'COURIER_TO_MERCHANT' | 'CHECKING_BY_MERCHANT';

/**
 * Тип сотрудничества со службой доставки в рамках конкретного заказа:  * `SHOP` — магазин работает со службой доставки напрямую или доставляет заказы самостоятельно.  * `YANDEX_MARKET` — магазин работает со службой доставки через Маркет.  * `UNKNOWN` — неизвестный тип. 
 */
export type OrderDeliveryPartnerType = 'SHOP' | 'YANDEX_MARKET' | 'UNKNOWN';

/**
 * Способ доставки заказа:  * `DELIVERY` — курьерская доставка.  * `PICKUP` — самовывоз.  * `POST` — почта.  * `DIGITAL` — для цифровых товаров.  * `UNKNOWN` — неизвестный тип. 
 */
export type OrderDeliveryType = 'DELIVERY' | 'PICKUP' | 'POST' | 'DIGITAL' | 'UNKNOWN';

/**
 * Ключ цифрового товара.
 */
export interface OrderDigitalItemDTO {
  /**
   * Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`. 
   */
  id: number;
  /**
   * Сам ключ.
   */
  code: string;
  /**
   * Инструкция по активации.
   */
  slip: string;
  /**
   * Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: `ГГГГ-ММ-ДД`. 
   */
  activate_till: string;
}


/**
 * Статус документа:  * `READY` — готов. * `NOT_READY` — не готов. 
 */
export type OrderDocumentStatusType = 'READY' | 'NOT_READY';

/**
 * Список товаров в заказе.
 */
export interface OrderItemDTO {
  /**
   * Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
   */
  id?: number;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId?: string;
  /**
   * Название товара.
   */
  offerName?: string;
  /**
   * Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`). 
   */
  price?: number;
  /**
   * Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
   */
  buyerPrice?: number;
  /**
   * Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
   */
  buyerPriceBeforeDiscount?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
   */
  priceBeforeDiscount?: number;
  /**
   * Количество единиц товара.
   */
  count?: number;
  vat?: OrderVatType;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  shopSku?: string;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
   */
  subsidy?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
   */
  partnerWarehouseId?: string;
  /**
   * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
   */
  promos?: Array<OrderItemPromoDTO>;
  /**
   * Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. 
   */
  instances?: Array<OrderItemInstanceDTO>;
  /**
   * Информация об удалении товара из заказа. 
   */
  details?: Array<OrderItemDetailDTO>;
  /**
   * Список субсидий по типам.
   */
  subsidies?: Array<OrderItemSubsidyDTO>;
  /**
   * Список необходимых маркировок товара.
   */
  requiredInstanceTypes?: Array<OrderItemInstanceType>;
}


/**
 * Детали по товару в заказе.
 */
export interface OrderItemDetailDTO {
  /**
   * Количество единиц товара.
   */
  itemCount?: number;
  itemStatus?: OrderItemStatusType;
  /**
   * Формат даты: `ДД-ММ-ГГГГ`. 
   */
  updateDate?: string;
}


/**
 * Переданные вами для данной позиции коды маркировки или УИНы. Коды «Честного знака» возвращаются в двух вариантах — с криптохвостом и без. 
 */
export interface OrderItemInstanceDTO {
  /**
   * Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/) без криптохвоста.
   */
  cis?: string;
  /**
   * Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/) с криптохвостом.
   */
  cisFull?: string;
  /**
   * УИН ювелирного изделия (16-значный код) Производитель получает УИН, когда регистрирует изделие в системе контроля за оборотом драгоценных металлов и камней — ГИИС ДМДК. 
   */
  uin?: string;
  /**
   * Регистрационный номер партии товара.  Представляет собой строку из четырех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ/ХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на партию товара. Далее — дата, номер декларации и номер маркированного товара в декларации. 
   */
  rnpt?: string;
  /**
   * Грузовая таможенная декларация.  Представляет собой строку из трех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на ввезенные товары. Далее — дата и номер декларации. 
   */
  gtd?: string;
}


/**
 * Позиция в корзине, требующая маркировки.
 */
export interface OrderItemInstanceModificationDTO {
  /**
   * Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`. 
   */
  id: number;
  /**
   * Список кодов маркировки единиц товара. 
   */
  instances: Array<BriefOrderItemInstanceDTO>;
}


/**
 * Вид маркировки товара:  * `CIS` — КИЗ, идентификатор единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).  * `UIN` — УИН, уникальный идентификационный номер.  * `RNPT` — РНПТ, регистрационный номер партии товара.  * `GTD` — номер ГТД, грузовой таможенной декларации. 
 */
export type OrderItemInstanceType = 'CIS' | 'UIN' | 'RNPT' | 'GTD';

/**
 * Список товаров в заказе.  Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.  Обязательный параметр. 
 */
export interface OrderItemModificationDTO {
  /**
   * Идентификатор товара в рамках заказа.  Получить идентификатор можно с помощью ресурсов [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  Обязательный параметр. 
   */
  id: number;
  /**
   * Новое количество товара.
   */
  count: number;
  /**
   * Информация о маркировке единиц товара.  Передавайте в запросе все единицы товара, который подлежит маркировке.  Обязательный параметр, если в заказе есть товары, подлежащие маркировке [в системе «Честный ЗНАК»](https://честныйзнак.рф/). 
   */
  instances?: Array<BriefOrderItemInstanceDTO>;
}


/**
 * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
 */
export interface OrderItemPromoDTO {
  type: OrderPromoType;
  /**
   * Размер пользовательской скидки в валюте покупателя. 
   */
  discount?: number;
  /**
   * Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа. 
   */
  subsidy?: number;
  /**
   * Идентификатор акции поставщика. 
   */
  shopPromoId?: string;
  /**
   * Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр `type=MARKET_DEAL`. 
   */
  marketPromoId?: string;
}


/**
 * Возвращенный или невыкупленный товар:  * `REJECTED` — невыкупленный.  * `RETURNED` — возвращенный. 
 */
export type OrderItemStatusType = 'REJECTED' | 'RETURNED';

/**
 * Общее вознаграждение партнеру за все скидки на товар:  * по промокодам, купонам и акциям; * по баллам Плюса.  Передается в валюте заказа. 
 */
export interface OrderItemSubsidyDTO {
  type?: OrderItemSubsidyType;
  /**
   * Сумма субсидии.
   */
  amount?: number;
}


/**
 * Тип субсидии:  * `YANDEX_CASHBACK` — скидка по подписке Яндекс Плюс.  * `SUBSIDY` — скидка Маркета (по акциям, промокодам, купонам и т. д.). 
 */
export type OrderItemSubsidyType = 'YANDEX_CASHBACK' | 'SUBSIDY';

/**
 * Причина обновления состава заказа.
 */
export type OrderItemsModificationRequestReasonType = 'PARTNER_REQUESTED_REMOVE' | 'USER_REQUESTED_REMOVE';

/**
 * Краткие сведения о промаркированных товарах. Параметр возвращается, если ответ `OK`. 
 */
export interface OrderItemsModificationResultDTO {
  /**
   * Список позиций в заказе, подлежащих маркировке.
   */
  items: Array<BriefOrderItemDTO>;
}


/**
 * Данные для печати ярлыка.
 */
export interface OrderLabelDTO {
  /**
   * Идентификатор заказа.
   */
  orderId: number;
  /**
   * Количество коробок в заказе.
   */
  placesNumber: number;
  /**
   * URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md). 
   */
  url: string;
  /**
   * Информация на ярлыке.
   */
  parcelBoxLabels: Array<ParcelBoxLabelDTO>;
}


/**
 * Тип подъема заказа на этаж:  * `NOT_NEEDED` — не требуется.  * `MANUAL` — ручной.  * `ELEVATOR` — лифт.  * `CARGO_ELEVATOR` — грузовой лифт.  * `FREE` — любой из перечисленных выше, если включена опция бесплатного подъема.  * `UNKNOWN` — неизвестный тип. 
 */
export type OrderLiftType = 'NOT_NEEDED' | 'MANUAL' | 'ELEVATOR' | 'CARGO_ELEVATOR' | 'FREE' | 'UNKNOWN';

/**
 * Информация о грузоместе.
 */
export interface OrderParcelBoxDTO {
  /**
   * Идентификатор грузоместа.
   */
  id?: number;
  /**
   * Идентификатор грузового места в информационной системе магазина.
   */
  fulfilmentId?: string;
}


/**
 * Способ оплаты заказа:  * Значения, если выбрана оплата при оформлении заказа (`\"paymentType\": \"PREPAID\"`):    * `YANDEX` — банковской картой.    * `APPLE_PAY` — Apple Pay.    * `GOOGLE_PAY` — Google Pay.    * `CREDIT` — в кредит.    * `TINKOFF_CREDIT` — в кредит в Тинькофф Банке.    * `TINKOFF_INSTALLMENTS` — рассрочка в Тинькофф Банке.    * `EXTERNAL_CERTIFICATE` — подарочным сертификатом (например, из приложения «Сбербанк Онлайн»).    * `SBP` — через систему быстрых платежей.    * `B2B_ACCOUNT_PREPAYMENT` — заказ оплачивает организация.   * Значения, если выбрана оплата при получении заказа (`\"paymentType\": \"POSTPAID\"`):    * `CARD_ON_DELIVERY` — банковской картой.    * `BOUND_CARD_ON_DELIVERY` — привязанной картой при получении.    * `CASH_ON_DELIVERY` — наличными.    * `B2B_ACCOUNT_POSTPAYMENT` — заказ оплачивает организация после доставки.  * `UNKNOWN` — неизвестный тип.  Значение по умолчанию: `CASH_ON_DELIVERY`. 
 */
export type OrderPaymentMethodType = 'CASH_ON_DELIVERY' | 'CARD_ON_DELIVERY' | 'BOUND_CARD_ON_DELIVERY' | 'YANDEX' | 'APPLE_PAY' | 'EXTERNAL_CERTIFICATE' | 'CREDIT' | 'GOOGLE_PAY' | 'TINKOFF_CREDIT' | 'SBP' | 'TINKOFF_INSTALLMENTS' | 'B2B_ACCOUNT_PREPAYMENT' | 'B2B_ACCOUNT_POSTPAYMENT' | 'UNKNOWN';

/**
 * Тип оплаты заказа:  * `PREPAID` — оплата при оформлении заказа.  * `POSTPAID` — оплата при получении заказа.  * `UNKNOWN` — неизвестный тип.  Если параметр отсутствует, заказ будет оплачен при получении. 
 */
export type OrderPaymentType = 'PREPAID' | 'POSTPAID' | 'UNKNOWN';

/**
 * Тип скидки:  * `DIRECT_DISCOUNT` — прямая скидка, которую устанавливает продавец или Маркет.  * `BLUE_SET` — комплекты.  * `BLUE_FLASH` — флеш-акция.  * `MARKET_COUPON` — скидка по промокоду Маркета.  * `MARKET_PROMOCODE` — скидка по промокоду магазина.  * `MARKET_BLUE` — скидка на Маркете.  * `YANDEX_PLUS` — бесплатная доставка с подпиской Яндекс Плюс.  * `YANDEX_EMPLOYEE` — бесплатная доставка по определенным адресам.  * `LIMITED_FREE_DELIVERY_PROMO` — бесплатная доставка по ограниченному предложению.  * `FREE_DELIVERY_THRESHOLD` — бесплатная доставка при достижении определенной суммы заказа.  * `MULTICART_DISCOUNT` — скидка за то, что оформлена мультикорзина.  * `FREE_DELIVERY_FOR_LDI` — бесплатная доставка за то, что один из товаров крупногабаритный.  * `FREE_DELIVERY_FOR_LSC` — бесплатная доставка за то, что одна из корзин в мультикорзине крупногабаритная.  * `FREE_PICKUP` — бесплатная доставка в пункт выдачи заказов.  * `CHEAPEST_AS_GIFT` — самый дешевый товар в подарок.  * `CASHBACK` — кешбэк.  * `SUPPLIER_MULTICART_DISCOUNT` — скидка за доставку.  * `SPREAD_DISCOUNT_COUNT` — скидка за количество одинаковых товаров.  * `SPREAD_DISCOUNT_RECEIPT` — скидка от суммы чека.  * `ANNOUNCEMENT_PROMO` — информационная акция, скидка не применяется к товарам.  * `DISCOUNT_BY_PAYMENT_TYPE` — прямая скидка при оплате картой Плюса.  * `PERCENT_DISCOUNT` — прямая скидка в процентах.  * `DCO_EXTRA_DISCOUNT` — дополнительная скидка, необходимая для расчета субсидии от Маркета.  * `EMPTY_PROMO` — скрытые промокоды.  * `BLOCKING_PROMO` — блокирующее промо.  * `UNKNOWN` — неизвестный тип.  Устаревшие типы:  * `GENERIC_BUNDLE`.  * `MARKET_DEAL`.  * `MARKET_PRIME`.  * `MARKET_COIN`.  * `BERU_PLUS`.  * `PRICE_DROP_AS_YOU_SHOP`.  * `SECRET_SALE`. 
 */
export type OrderPromoType = 'DIRECT_DISCOUNT' | 'BLUE_SET' | 'BLUE_FLASH' | 'GENERIC_BUNDLE' | 'MARKET_COUPON' | 'MARKET_PROMOCODE' | 'MARKET_DEAL' | 'MARKET_BLUE' | 'MARKET_PRIME' | 'YANDEX_PLUS' | 'BERU_PLUS' | 'MARKET_COIN' | 'YANDEX_EMPLOYEE' | 'LIMITED_FREE_DELIVERY_PROMO' | 'FREE_DELIVERY_THRESHOLD' | 'MULTICART_DISCOUNT' | 'PRICE_DROP_AS_YOU_SHOP' | 'FREE_DELIVERY_FOR_LDI' | 'FREE_DELIVERY_FOR_LSC' | 'SECRET_SALE' | 'FREE_PICKUP' | 'CHEAPEST_AS_GIFT' | 'CASHBACK' | 'SUPPLIER_MULTICART_DISCOUNT' | 'SPREAD_DISCOUNT_COUNT' | 'SPREAD_DISCOUNT_RECEIPT' | 'ANNOUNCEMENT_PROMO' | 'DISCOUNT_BY_PAYMENT_TYPE' | 'PERCENT_DISCOUNT' | 'DCO_EXTRA_DISCOUNT' | 'EMPTY_PROMO' | 'BLOCKING_PROMO' | 'UNKNOWN';

/**
 * Список посылок.  В параметре может указываться несколько посылок. 
 */
export interface OrderShipmentDTO {
  /**
   * Идентификатор посылки, присвоенный Маркетом.
   */
  id?: number;
  /**
   * Формат даты: `ДД-ММ-ГГГГ`. 
   */
  shipmentDate?: string;
  /**
   * **Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус `READY_TO_SHIP`. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, `ЧЧ:ММ`.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. 
   */
  shipmentTime?: string;
  /**
   * **Только для модели DBS**  Информация для отслеживания перемещений посылки. 
   */
  tracks?: Array<OrderTrackDTO>;
  /**
   * Список грузовых мест.
   */
  boxes?: Array<OrderParcelBoxDTO>;
}


/**
 * Информация по заказу.
 */
export interface OrderStateDTO {
  /**
   * Идентификатор заказа.
   */
  id: number;
  status: OrderStatusType;
  substatus?: OrderSubstatusType;
}


/**
 * Текущий статус заказа:  * `CANCELLED_BEFORE_PROCESSING` — заказ отменен до начала его обработки.  * `CANCELLED_IN_DELIVERY` — заказ отменен во время его доставки.  * `CANCELLED_IN_PROCESSING` — заказ отменен во время его обработки.  * `DELIVERY` — заказ передан службе доставки.  * `DELIVERED` — заказ доставлен.  * `PARTIALLY_DELIVERED` — заказ частично доставлен.  * `PARTIALLY_RETURNED` — заказ частично возвращен покупателем.  * `PENDING` — заказ ожидает подтверждения.  * `PICKUP` — заказ доставлен в пункт выдачи.  * `PROCESSING` — заказ в обработке.  * `RESERVED` — товар зарезервирован на складе.  * `RETURNED` — заказ полностью возвращен покупателем.  * `UNKNOWN` — неизвестный статус заказа.  * `UNPAID` — заказ от юридического лица ожидает оплаты.  * `LOST` — заказ утерян. 
 */
export type OrderStatsStatusType = 'CANCELLED_BEFORE_PROCESSING' | 'CANCELLED_IN_DELIVERY' | 'CANCELLED_IN_PROCESSING' | 'DELIVERY' | 'DELIVERED' | 'PARTIALLY_DELIVERED' | 'PARTIALLY_RETURNED' | 'PENDING' | 'PICKUP' | 'PROCESSING' | 'RESERVED' | 'RETURNED' | 'UNKNOWN' | 'UNPAID' | 'LOST';

/**
 * Заказ.
 */
export interface OrderStatusChangeDTO {
  status: OrderStatusType;
  substatus?: OrderSubstatusType;
  delivery?: OrderStatusChangeDeliveryDTO;
}


/**
 * Информация о доставке.
 */
export interface OrderStatusChangeDeliveryDTO {
  dates?: OrderStatusChangeDeliveryDatesDTO;
}


/**
 * Диапазон дат доставки.
 */
export interface OrderStatusChangeDeliveryDatesDTO {
  /**
   * **Только для модели DBS**  Фактическая дата доставки. <br><br> Когда передавать параметр `realDeliveryDate`:  * Не передавайте параметр, если:   * переводите заказ в любой статус, кроме `PICKUP` или `DELIVERED`;   * меняете статус заказа на `PICKUP` или `DELIVERED` в день доставки — будет указана дата выполнения запроса. * Передавайте дату доставки, если переводите заказ в статус `PICKUP` или `DELIVERED` не в день доставки. Нельзя указывать дату доставки в будущем.    {% note warning \"Индекс качества\" %}    Передача статуса после установленного срока снижает индекс качества. О сроках читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/tech#dbs).    {% endnote %}      
   */
  realDeliveryDate?: string;
}


/**
 * Статус заказа:  * `CANCELLED` — отменен.  * `DELIVERED` — получен покупателем.  * `DELIVERY` — передан в службу доставки.  * `PICKUP` — доставлен в пункт самовывоза.  * `PROCESSING` — находится в обработке.  * `PENDING` — ожидает обработки со стороны продавца.  * `UNPAID` — оформлен, но еще не оплачен (если выбрана оплата при оформлении).  * `PLACING` — оформляется, подготовка к резервированию.  * `RESERVED` — зарезервирован, но недооформлен.  * `PARTIALLY_RETURNED` — возвращен частично.  * `RETURNED` — возвращен полностью.  * `UNKNOWN` — неизвестный статус.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
 */
export type OrderStatusType = 'PLACING' | 'RESERVED' | 'UNPAID' | 'PROCESSING' | 'DELIVERY' | 'PICKUP' | 'DELIVERED' | 'CANCELLED' | 'PENDING' | 'PARTIALLY_RETURNED' | 'RETURNED' | 'UNKNOWN';

/**
 * Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам, купонам и акциям; * по баллам Плюса; * по доставке (DBS).  Передается в валюте заказа. 
 */
export interface OrderSubsidyDTO {
  type?: OrderSubsidyType;
  /**
   * Сумма субсидии.
   */
  amount?: number;
}


/**
 * Тип субсидии:  * `YANDEX_CASHBACK` — скидка по подписке Яндекс Плюс.  * `SUBSIDY` — скидка Маркета (по акциям, промокодам, купонам и т. д.)  * `DELIVERY` — скидка за доставку (DBS). 
 */
export type OrderSubsidyType = 'YANDEX_CASHBACK' | 'SUBSIDY' | 'DELIVERY';

/**
 * Этап обработки заказа (если он имеет статус `PROCESSING`) или причина отмены заказа (если он имеет статус `CANCELLED`).  * Значения для заказа в статусе `PROCESSING`:      * `STARTED` — заказ подтвержден, его можно начать обрабатывать.      * `READY_TO_SHIP` — заказ собран и готов к отправке.  * Значения для заказа в статусе `CANCELLED`:      * `PROCESSING_EXPIRED` — значение более не используется.      * `REPLACING_ORDER` — покупатель решил заменить товар другим по собственной инициативе.      * `RESERVATION_EXPIRED` — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.      * `SHOP_FAILED` — магазин не может выполнить заказ.      * `USER_CHANGED_MIND` — покупатель отменил заказ по личным причинам.      * `USER_NOT_PAID` — покупатель не оплатил заказ (для типа оплаты `PREPAID`) в течение 30 минут.      * `USER_REFUSED_DELIVERY` — покупателя не устроили условия доставки.      * `USER_REFUSED_PRODUCT` — покупателю не подошел товар.      * `USER_REFUSED_QUALITY` — покупателя не устроило качество товара.      * `USER_UNREACHABLE` — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:        * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;       * перерыв между первым и третьим звонком не менее 90 минут;       * соединение не короче 5 секунд.        Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400.  * `TECHNICAL_ERROR` — техническая ошибка на стороне Маркета. Обратитесь в поддержку.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
 */
export type OrderSubstatusType = 'RESERVATION_EXPIRED' | 'USER_NOT_PAID' | 'USER_UNREACHABLE' | 'USER_CHANGED_MIND' | 'USER_REFUSED_DELIVERY' | 'USER_REFUSED_PRODUCT' | 'SHOP_FAILED' | 'USER_REFUSED_QUALITY' | 'REPLACING_ORDER' | 'PROCESSING_EXPIRED' | 'PENDING_EXPIRED' | 'SHOP_PENDING_CANCELLED' | 'PENDING_CANCELLED' | 'USER_FRAUD' | 'RESERVATION_FAILED' | 'USER_PLACED_OTHER_ORDER' | 'USER_BOUGHT_CHEAPER' | 'MISSING_ITEM' | 'BROKEN_ITEM' | 'WRONG_ITEM' | 'PICKUP_EXPIRED' | 'DELIVERY_PROBLEMS' | 'LATE_CONTACT' | 'CUSTOM' | 'DELIVERY_SERVICE_FAILED' | 'WAREHOUSE_FAILED_TO_SHIP' | 'DELIVERY_SERIVCE_UNDELIVERED' | 'DELIVERY_SERVICE_UNDELIVERED' | 'PREORDER' | 'AWAIT_CONFIRMATION' | 'STARTED' | 'PACKAGING' | 'READY_TO_SHIP' | 'SHIPPED' | 'ASYNC_PROCESSING' | 'USER_REFUSED_TO_PROVIDE_PERSONAL_DATA' | 'WAITING_USER_INPUT' | 'WAITING_BANK_DECISION' | 'BANK_REJECT_CREDIT_OFFER' | 'CUSTOMER_REJECT_CREDIT_OFFER' | 'CREDIT_OFFER_FAILED' | 'AWAIT_DELIVERY_DATES_CONFIRMATION' | 'SERVICE_FAULT' | 'DELIVERY_SERVICE_RECEIVED' | 'USER_RECEIVED' | 'WAITING_FOR_STOCKS' | 'AS_PART_OF_MULTI_ORDER' | 'READY_FOR_LAST_MILE' | 'LAST_MILE_STARTED' | 'ANTIFRAUD' | 'DELIVERY_USER_NOT_RECEIVED' | 'DELIVERY_SERVICE_DELIVERED' | 'DELIVERED_USER_NOT_RECEIVED' | 'USER_WANTED_ANOTHER_PAYMENT_METHOD' | 'USER_RECEIVED_TECHNICAL_ERROR' | 'USER_FORGOT_TO_USE_BONUS' | 'RECEIVED_ON_DISTRIBUTION_CENTER' | 'DELIVERY_SERVICE_NOT_RECEIVED' | 'DELIVERY_SERVICE_LOST' | 'SHIPPED_TO_WRONG_DELIVERY_SERVICE' | 'DELIVERED_USER_RECEIVED' | 'WAITING_TINKOFF_DECISION' | 'COURIER_SEARCH' | 'COURIER_FOUND' | 'COURIER_IN_TRANSIT_TO_SENDER' | 'COURIER_ARRIVED_TO_SENDER' | 'COURIER_RECEIVED' | 'COURIER_NOT_FOUND' | 'COURIER_NOT_DELIVER_ORDER' | 'COURIER_RETURNS_ORDER' | 'COURIER_RETURNED_ORDER' | 'WAITING_USER_DELIVERY_INPUT' | 'PICKUP_SERVICE_RECEIVED' | 'PICKUP_USER_RECEIVED' | 'CANCELLED_COURIER_NOT_FOUND' | 'COURIER_NOT_COME_FOR_ORDER' | 'DELIVERY_NOT_MANAGED_REGION' | 'INCOMPLETE_CONTACT_INFORMATION' | 'INCOMPLETE_MULTI_ORDER' | 'INAPPROPRIATE_WEIGHT_SIZE' | 'TECHNICAL_ERROR' | 'SORTING_CENTER_LOST' | 'COURIER_SEARCH_NOT_STARTED' | 'LOST' | 'AWAIT_PAYMENT' | 'AWAIT_LAVKA_RESERVATION' | 'USER_WANTS_TO_CHANGE_ADDRESS' | 'FULL_NOT_RANSOM' | 'PRESCRIPTION_MISMATCH' | 'DROPOFF_LOST' | 'DROPOFF_CLOSED' | 'DELIVERY_TO_STORE_STARTED' | 'USER_WANTS_TO_CHANGE_DELIVERY_DATE' | 'WRONG_ITEM_DELIVERED' | 'DAMAGED_BOX' | 'AWAIT_DELIVERY_DATES' | 'LAST_MILE_COURIER_SEARCH' | 'PICKUP_POINT_CLOSED' | 'LEGAL_INFO_CHANGED' | 'USER_HAS_NO_TIME_TO_PICKUP_ORDER' | 'DELIVERY_CUSTOMS_ARRIVED' | 'DELIVERY_CUSTOMS_CLEARED' | 'FIRST_MILE_DELIVERY_SERVICE_RECEIVED' | 'AWAIT_AUTO_DELIVERY_DATES' | 'AWAIT_USER_PERSONAL_DATA' | 'NO_PERSONAL_DATA_EXPIRED' | 'CUSTOMS_PROBLEMS' | 'AWAIT_CASHIER' | 'WAITING_POSTPAID_BUDGET_RESERVATION' | 'AWAIT_SERVICEABLE_CONFIRMATION' | 'POSTPAID_BUDGET_RESERVATION_FAILED' | 'AWAIT_CUSTOM_PRICE_CONFIRMATION' | 'READY_FOR_PICKUP' | 'UNKNOWN';

/**
 * Система налогообложения (СНО) магазина на момент оформления заказа:  * `ECHN` — единый сельскохозяйственный налог (ЕСХН).  * `ENVD` — единый налог на вмененный доход (ЕНВД).  * `OSN` — общая система налогообложения (ОСН).  * `PSN` — патентная система налогообложения (ПСН).  * `USN` — упрощенная система налогообложения (УСН).  * `USN_MINUS_COST` — упрощенная система налогообложения, доходы, уменьшенные на величину расходов (УСН «Доходы минус расходы»).  * `NPD` — налог на профессиональный доход (НПД).  * `UNKNOWN_VALUE` — неизвестное значение. Используется только совместно с параметром `payment-method=YANDEX`. 
 */
export type OrderTaxSystemType = 'OSN' | 'USN' | 'USN_MINUS_COST' | 'ENVD' | 'ECHN' | 'PSN' | 'NPD' | 'UNKNOWN_VALUE';

/**
 * Информация о трек-номере посылки (DBS).
 */
export interface OrderTrackDTO {
  /**
   * Трек‑номер посылки.
   */
  trackCode?: string;
  /**
   * Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
   */
  deliveryServiceId?: number;
}


/**
 * Изменился ли статус заказа:  * `OK` — статус изменен.  * `ERROR` — статус не изменен. В этом случае появится сообщение об ошибке в параметре `errorDetails`. 
 */
export type OrderUpdateStatusType = 'OK' | 'ERROR';

/**
 * Ставка налога на добавленную стоимость (НДС) на товар:  * `NO_VAT` — НДС не облагается, используется только для отдельных видов услуг.  * `VAT_0` — НДС 0%. Например, используется при продаже товаров, вывезенных в таможенной процедуре экспорта, или при оказании услуг по международной перевозке товаров.  * `VAT_10` — НДС 10%. Например, используется при реализации отдельных продовольственных и медицинских товаров.  * `VAT_10_110` — НДС 10/110. Расчетная ставка НДС 10%, применяется только при предоплате.  * `VAT_20` — НДС 20%. Основная ставка с 2019 года.  * `VAT_20_120` — НДС 20/120. Расчетная ставка НДС 20%, применяется только при предоплате.  * `VAT_18` — НДС 18%. Основная ставка до 2019 года.  * `VAT_18_118` — НДС 18/118. Ставка использовалась до 1 января 2019 года при предоплате.  * `UNKNOWN_VALUE` — неизвестный тип.  Используется только совместно с параметром `payment-method=YANDEX`. 
 */
export type OrderVatType = 'NO_VAT' | 'VAT_0' | 'VAT_10' | 'VAT_10_110' | 'VAT_20' | 'VAT_20_120' | 'VAT_18' | 'VAT_18_118' | 'UNKNOWN_VALUE';

/**
 * Годные/негодные ярлыки по заказам в отгрузке.
 */
export interface OrdersShipmentInfoDTO {
  /**
   * Идентификаторы заказов в отгрузке, для которых можно распечатать ярлыки.
   */
  orderIdsWithLabels: Set<number>;
  /**
   * Идентификаторы заказов в отгрузке, для которых нельзя распечатать ярлыки.
   */
  orderIdsWithoutLabels: Set<number>;
}


/**
 * Информация о стоимости услуг.
 */
export interface OrdersStatsCommissionDTO {
  type?: OrdersStatsCommissionType;
  /**
   * Сумма в рублях, которая была выставлена в момент создания заказа и которую нужно оплатить. Точность — два знака после запятой. 
   */
  actual?: number;
}


/**
 * Услуга:  * `FEE` — размещение товара на Маркете. * `FULFILLMENT` — складская обработка. Не возвращается с 1 января 2024 года. * `LOYALTY_PARTICIPATION_FEE` — участие в программе лояльности и отзывы за баллы. * `AUCTION_PROMOTION` — буст продаж с оплатой за продажи. * `INSTALLMENT` — рассрочка. Не возвращается с 24 февраля 2022 года. * `DELIVERY_TO_CUSTOMER` — доставка покупателю (FBY, FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `EXPRESS_DELIVERY_TO_CUSTOMER` — экспресс-доставка покупателю (Экспресс). * `AGENCY` — прием платежа покупателя. * `PAYMENT_TRANSFER` — перевод платежа покупателя. * `RETURNED_ORDERS_STORAGE` — хранение невыкупов и возвратов (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `SORTING` — обработка заказа (FBS). * `INTAKE_SORTING` — организация забора заказов со склада продавца (FBS). * `RETURN_PROCESSING` — обработка заказов на складе (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `ILLIQUID_GOODS_SALE` — вознаграждение за продажу невывезенных товаров. 
 */
export type OrdersStatsCommissionType = 'FEE' | 'FULFILLMENT' | 'LOYALTY_PARTICIPATION_FEE' | 'AUCTION_PROMOTION' | 'INSTALLMENT' | 'DELIVERY_TO_CUSTOMER' | 'EXPRESS_DELIVERY_TO_CUSTOMER' | 'AGENCY' | 'PAYMENT_TRANSFER' | 'RETURNED_ORDERS_STORAGE' | 'SORTING' | 'INTAKE_SORTING' | 'RETURN_PROCESSING' | 'ILLIQUID_GOODS_SALE';

/**
 * Информация по заказам.
 */
export interface OrdersStatsDTO {
  /**
   * Список заказов.
   */
  orders: Array<OrdersStatsOrderDTO>;
  paging?: ForwardScrollingPagerDTO;
}


/**
 * Информация о регионе доставки.
 */
export interface OrdersStatsDeliveryRegionDTO {
  /**
   * Идентификатор региона доставки.
   */
  id?: number;
  /**
   * Название региона доставки.
   */
  name?: string;
}


/**
 * Информация об удалении товара из заказа.
 */
export interface OrdersStatsDetailsDTO {
  itemStatus?: OrdersStatsItemStatusType;
  /**
   * Количество товара со статусом, указанном в параметре `itemStatus`.
   */
  itemCount?: number;
  /**
   * Дата, когда товар получил статус, указанный в параметре `itemStatus`.  Формат даты: `ГГГГ-ММ-ДД`. 
   */
  updateDate?: string;
  stockType?: OrdersStatsStockType;
}


/**
 * Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке `items` — только в списке `initialItems`.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке `items` (с уменьшенным количеством единиц `count`), и в списке `initialItems` (с первоначальным количеством единиц `initialCount`). 
 */
export interface OrdersStatsItemDTO {
  /**
   * Название товара.
   */
  offerName?: string;
  /**
   * SKU на Маркете.
   */
  marketSku?: number;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  shopSku?: string;
  /**
   * Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`. 
   */
  count?: number;
  /**
   * Цена или скидки на товар.
   */
  prices?: Array<OrdersStatsPriceDTO>;
  warehouse?: OrdersStatsWarehouseDTO;
  /**
   * Информация об удалении товара из заказа.
   */
  details?: Array<OrdersStatsDetailsDTO>;
  /**
   * Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
   */
  cisList?: Array<string>;
  /**
   * Первоначальное количество единиц товара.
   */
  initialCount?: number;
  /**
   * Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
   */
  bidFee?: number;
  /**
   * Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
   */
  cofinanceThreshold?: number;
  /**
   * Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
   */
  cofinanceValue?: number;
}


/**
 * Статус товара:  * `REJECTED` — товар был добавлен в созданный заказ, но не был оплачен. * `RETURNED` — товар вернули. 
 */
export type OrdersStatsItemStatusType = 'REJECTED' | 'RETURNED';

/**
 * Информация о заказе.
 */
export interface OrdersStatsOrderDTO {
  /**
   * Идентификатор заказа.
   */
  id?: number;
  /**
   * Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`. 
   */
  creationDate?: string;
  /**
   * Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва). 
   */
  statusUpdateDate?: string;
  status?: OrderStatsStatusType;
  /**
   * Идентификатор заказа в информационной системе магазина.
   */
  partnerOrderId?: string;
  paymentType?: OrdersStatsOrderPaymentType;
  /**
   * Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
   */
  fake?: boolean;
  deliveryRegion?: OrdersStatsDeliveryRegionDTO;
  /**
   * Список товаров в заказе после возможных изменений.
   */
  items: Array<OrdersStatsItemDTO>;
  /**
   * Список товаров в заказе до изменений.
   */
  initialItems?: Array<OrdersStatsItemDTO>;
  /**
   * Информация о денежных переводах по заказу.
   */
  payments: Array<OrdersStatsPaymentDTO>;
  /**
   * Информация о комиссиях за заказ.
   */
  commissions: Array<OrdersStatsCommissionDTO>;
}


/**
 * Тип оплаты заказа: - `CREDIT` — заказ оформлен в кредит. - `POSTPAID` — заказ оплачен после того, как был получен. - `PREPAID` — заказ оплачен до того, как был получен. 
 */
export type OrdersStatsOrderPaymentType = 'CREDIT' | 'POSTPAID' | 'PREPAID' | 'TINKOFF_CREDIT';

/**
 * Информация о денежных переводах по заказу.
 */
export interface OrdersStatsPaymentDTO {
  /**
   * Идентификатор денежного перевода.
   */
  id?: string;
  /**
   * Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`. 
   */
  date?: string;
  type?: OrdersStatsPaymentType;
  source?: OrdersStatsPaymentSourceType;
  /**
   * Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. 
   */
  total?: number;
  paymentOrder?: OrdersStatsPaymentOrderDTO;
}


/**
 * Информация о платежном получении.
 */
export interface OrdersStatsPaymentOrderDTO {
  /**
   * Номер платежного поручения.
   */
  id?: string;
  /**
   * Дата платежного поручения.  Формат даты: `ГГГГ‑ММ‑ДД`. 
   */
  date?: string;
}


/**
 * Способ денежного перевода: - `BUYER` — оплата или возврат деньгами. - `CASHBACK` — оплата или возврат баллами Плюса. - `MARKETPLACE` — оплата или возврат купонами. - `SPLIT` — оплата картой по частям (Сплит). 
 */
export type OrdersStatsPaymentSourceType = 'BUYER' | 'CASHBACK' | 'MARKETPLACE' | 'SPLIT';

/**
 * Тип денежного перевода: - `PAYMENT` — оплата. - `REFUND` — возврат. 
 */
export type OrdersStatsPaymentType = 'PAYMENT' | 'REFUND' | 'UNKNOWN';

/**
 * Цена или скидки на товар.
 */
export interface OrdersStatsPriceDTO {
  type?: OrdersStatsPriceType;
  /**
   * Цена или скидка на единицу товара в заказе. Указана в рублях. Точность — два знака после запятой. 
   */
  costPerItem?: number;
  /**
   * Суммарная цена или скидка на все единицы товара в заказе. Указана в рублях. Точность — два знака после запятой. 
   */
  total?: number;
}


/**
 * Тип скидки или цена на товар: - `BUYER` — цена на товар с учетом скидок, в том числе купонов. - `CASHBACK` — баллы Плюса. - `MARKETPLACE` — купоны. 
 */
export type OrdersStatsPriceType = 'BUYER' | 'CASHBACK' | 'MARKETPLACE';

/**
 * Тип товара:  * `DEFECT` — товар бракованный.  * `FIT` — товар надлежащего качества. 
 */
export type OrdersStatsStockType = 'FIT' | 'FREEZE' | 'AVAILABLE' | 'QUARANTINE' | 'UTILIZATION' | 'DEFECT' | 'EXPIRED';

/**
 * Информация о складе, на котором хранится товар.
 */
export interface OrdersStatsWarehouseDTO {
  /**
   * Идентификатор склада.
   */
  id?: number;
  /**
   * Название склада.
   */
  name?: string;
}


/**
 * Адрес точки продаж. 
 */
export interface OutletAddressDTO {
  /**
   * Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
   */
  regionId: number;
  /**
   * Улица.
   */
  street?: string;
  /**
   * Номер дома.
   */
  number?: string;
  /**
   * Номер строения.
   */
  building?: string;
  /**
   * Номер владения.
   */
  estate?: string;
  /**
   * Номер корпуса.
   */
  block?: string;
  /**
   * Дополнительная информация.
   */
  additional?: string;
  /**
   * Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
   */
  km?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 
   */
  city?: string;
}


/**
 * Информация о точке продаж.
 */
export interface OutletDTO {
  /**
   * Название точки продаж. 
   */
  name: string;
  type: OutletType;
  /**
   * Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. 
   */
  coords?: string;
  /**
   * Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж. 
   */
  isMain?: boolean;
  /**
   * Идентификатор точки продаж, присвоенный магазином.
   */
  shopOutletCode?: string;
  visibility?: OutletVisibilityType;
  address: OutletAddressDTO;
  /**
   * Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. 
   */
  phones: Array<string>;
  workingSchedule: OutletWorkingScheduleDTO;
  /**
   * Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. 
   */
  deliveryRules?: Array<OutletDeliveryRuleDTO>;
  /**
   * Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
   */
  storagePeriod?: number;
}


/**
 * Информация об условиях доставки для данной точки продаж.
 */
export interface OutletDeliveryRuleDTO {
  /**
   * Минимальный срок доставки товаров в точку продаж. Указан в рабочих днях.  Минимальное значение: `0` — доставка в день заказа.  Максимальное значение: `60`.  Допустимые сроки доставки (разница между `minDeliveryDays` и `maxDeliveryDays`) зависят от региона.  Для доставки по своему региону разница не должна превышать двух дней. Например, если `minDeliveryDays` равно 1, то для `maxDeliveryDays` допускаются значения от 1 до 3.  Для доставки в другие регионы:  * Если `minDeliveryDays` до 18 дней, разница не должна превышать четырех дней. Например, если `minDeliveryDays` равно 10, то для `maxDeliveryDays` допускаются значения от 10 до 14. * Если `minDeliveryDays` больше 18 дней, разница должна быть не больше чем в два раза. Например, если `minDeliveryDays` равно 21, то для `maxDeliveryDays` допускаются значения от 21 до 42.  Обязательный параметр, если `type=\"DEPOT\"` или `type=\"MIXED\"`.  Взаимоисключающий с параметром `unspecifiedDeliveryInterval`. 
   */
  minDeliveryDays?: number;
  /**
   * Максимальный срок доставки товаров в точку продаж. Указан в рабочих днях.  Минимальное значение: `0` — доставка в день заказа.  Максимальное значение: `60`.  Допустимые сроки доставки (разница между `minDeliveryDays` и `maxDeliveryDays`) зависят от региона.  Для доставки по своему региону разница не должна превышать двух дней. Например, если `minDeliveryDays` равно 1, то для `maxDeliveryDays` допускаются значения от 1 до 3.  Для доставки в другие регионы:  * Если `minDeliveryDays` до 18 дней, разница не должна превышать четырех дней. Например, если `minDeliveryDays` равно 10, то для `maxDeliveryDays` допускаются значения от 10 до 14. * Если `minDeliveryDays` больше 18 дней, разница должна быть не больше чем в два раза. Например, если `minDeliveryDays` равно 21, то для `maxDeliveryDays` допускаются значения от 21 до 42.  Обязательный параметр, если `type=\"DEPOT\"` или `type=\"MIXED\"`.  Взаимоисключающий с параметром `unspecifiedDeliveryInterval`. 
   */
  maxDeliveryDays?: number;
  /**
   * Идентификатор службы доставки товаров в точку продаж.  Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md). 
   */
  deliveryServiceId?: number;
  /**
   * Час, до которого покупателю нужно сделать заказ, чтобы он был доставлен в точку продаж в сроки от `minDeliveryDays` до `maxDeliveryDays`.  Если покупатель оформит заказ после указанного часа, он будет доставлен в сроки от `minDeliveryDays` + 1 рабочий день до `maxDeliveryDays` + 1 рабочий день.  Значение по умолчанию: `24`. 
   */
  orderBefore?: number;
  /**
   * Цена на товар, начиная с которой действует бесплатный самовывоз товара из точки продаж.
   */
  priceFreePickup?: number;
  /**
   * Признак доставки товаров в точку продаж на заказ.  Признак выставлен, если:  * точный срок доставки в точку продаж заранее неизвестен (например, если магазин собирает несколько заказов для отправки в точку или населенный пункт); * все товары изготавливаются или поставляются на заказ.  Возможные значения: * `true` — товары доставляются в точку продаж на заказ.  Параметр указывается только со значением `true`.  Взаимоисключающий с параметрами `minDeliveryDays` и `maxDeliveryDays`. 
   */
  unspecifiedDeliveryInterval?: boolean;
}


/**
 * Информация о лицензии.
 */
export interface OutletLicenseDTO {
  /**
   * Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре `number`. 
   */
  id?: number;
  /**
   * Идентификатор точки продаж, для которой действительна лицензия.
   */
  outletId?: number;
  licenseType?: LicenseType;
  /**
   * Номер лицензии.
   */
  number?: string;
  /**
   * Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение `2017-11-13T00:00:00+03:00`.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре `dateOfExpiry`. 
   */
  dateOfIssue?: string;
  /**
   * Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение `2022-11-20T00:00:00+03:00`.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре `dateOfIssue`. 
   */
  dateOfExpiry?: string;
}


/**
 * Ответ на запрос информации о лицензиях для точек продаж.
 */
export interface OutletLicensesResponseDTO {
  /**
   * Список лицензий.
   */
  licenses: Array<FullOutletLicenseDTO>;
}


/**
 * Результат выполнения запроса. Выводится, если `status=\"OK\"`. 
 */
export interface OutletResponseDTO {
  /**
   * Идентификатор точки продаж, присвоенный Маркетом.
   */
  id?: number;
}


/**
 * Статус точки продаж.  Возможные значения:  * `AT_MODERATION` — проверяется. * `FAILED` — не прошла проверку и отклонена модератором. * `MODERATED` — проверена и одобрена. * `NONMODERATED` — новая точка, нуждается в проверке. 
 */
export type OutletStatusType = 'AT_MODERATION' | 'FAILED' | 'MODERATED' | 'NONMODERATED' | 'UNKNOWN';

/**
 * Тип точки продаж.  Возможные значения:  * `DEPOT` — пункт выдачи заказов. * `MIXED` — смешанный тип точки продаж (торговый зал и пункт выдачи заказов). * `RETAIL` — розничная точка продаж (торговый зал). 
 */
export type OutletType = 'DEPOT' | 'MIXED' | 'RETAIL' | 'NOT_DEFINED';

/**
 * Состояние точки продаж.  Возможные значения:  * `HIDDEN` — точка продаж выключена. * `VISIBLE` — точка продаж включена. 
 */
export type OutletVisibilityType = 'HIDDEN' | 'VISIBLE' | 'UNKNOWN';

/**
 * Список режимов работы точки продаж. 
 */
export interface OutletWorkingScheduleDTO {
  /**
   * Признак, работает ли точка продаж в дни государственных праздников.  Возможные значения:  * `false` — точка продаж не работает в дни государственных праздников. * `true` — точка продаж работает в дни государственных праздников. 
   */
  workInHoliday?: boolean;
  /**
   * Список расписаний работы точки продаж. 
   */
  scheduleItems: Array<OutletWorkingScheduleItemDTO>;
}


/**
 * Расписание работы точки продаж.
 */
export interface OutletWorkingScheduleItemDTO {
  startDay: DayOfWeekType;
  endDay: DayOfWeekType;
  /**
   * Точка продаж работает c указанного часа.  Формат: `ЧЧ:ММ`. 
   */
  startTime: string;
  /**
   * Точка продаж работает до указанного часа.  Формат: `ЧЧ:ММ`. 
   */
  endTime: string;
}


/**
 * Размещение ярлыков на странице: * `A7` — в PDF-файле будут страницы формата близкому к A7. На каждой странице размещается ярлык размером 75 × 120 мм (80,4 × 125,6 мм с учетом полей). * `A4` — в PDF-файле будут страницы формата A4. На каждой странице размещаются восемь ярлыков размером 70,6 × 99,1 мм без полей. 
 */
export type PageFormatType = 'A7' | 'A4';

/**
 * Возвраты.
 */
export interface PagedReturnsDTO {
  paging?: ForwardScrollingPagerDTO;
  /**
   * Список возвратов.
   */
  returns: Array<ReturnDTO>;
}


/**
 * Количество палет в отгрузке.
 */
export interface PalletsCountDTO {
  /**
   * Количество палет, которое заявил продавец.
   */
  planned?: number;
  /**
   * Количество палет, которое приняли в сортировочном центре.
   */
  fact?: number;
}


/**
 * Тип данных:  * `TEXT` — текст. * `ENUM` — список возможных значений. * `BOOLEAN` — `true` или `false`. * `NUMERIC` — число. 
 */
export type ParameterType = 'TEXT' | 'ENUM' | 'BOOLEAN' | 'NUMERIC';

/**
 * Ограничения на значения характеристик.
 */
export interface ParameterValueConstraintsDTO {
  /**
   * Минимальное число.
   */
  minValue?: number;
  /**
   * Максимальное число.
   */
  maxValue?: number;
  /**
   * Максимальная длина текста.
   */
  maxLength?: number;
}


/**
 * Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — `ENUM`. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле `multivalue` имеет значение `true`.  Для этого в `parameterValues` передавайте каждое значение отдельно — несколько объектов с параметрами `parameterId`, `valueId` и `value`. Параметр `parameterId` должен быть одинаковым. 
 */
export interface ParameterValueDTO {
  /**
   * Идентификатор характеристики.
   */
  parameterId: number;
  /**
   * Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию.
   */
  unitId?: number;
  /**
   * Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`. 
   */
  valueId?: number;
  /**
   * Значение.
   */
  value?: string;
}


/**
 * Значение характеристики.
 */
export interface ParameterValueOptionDTO {
  /**
   * Идентификатор значения.
   */
  id: number;
  /**
   * Значение.
   */
  value: string;
  /**
   * Описание значения.
   */
  description?: string;
}


/**
 * Элемент отображает одно грузовое место. Вложенные поля больше не используются, передавайте элемент пустым в запросах и не обращайте внимание на содержимое в ответах.
 */
export interface ParcelBoxDTO {
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
   */
  id?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
   */
  fulfilmentId?: string;
}


/**
 * Информация о ярлыке для коробки.
 */
export interface ParcelBoxLabelDTO {
  /**
   * Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 
   */
  url: string;
  /**
   * Юридическое название магазина.
   */
  supplierName: string;
  /**
   * Юридическое название службы доставки.
   */
  deliveryServiceName: string;
  /**
   * Идентификатор заказа в системе Маркета.
   */
  orderId: number;
  /**
   * Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина. 
   */
  orderNum: string;
  /**
   * Фамилия и инициалы получателя заказа.
   */
  recipientName: string;
  /**
   * Идентификатор коробки.
   */
  boxId: number;
  /**
   * Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д. 
   */
  fulfilmentId: string;
  /**
   * Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`. 
   */
  place: string;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`. 
   */
  weight: string;
  /**
   * Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
   */
  deliveryServiceId: string;
  /**
   * Адрес получателя.
   */
  deliveryAddress?: string;
  /**
   * Дата отгрузки в формате `dd.MM.yyyy`.
   */
  shipmentDate?: string;
}


/**
 * Информация о грузовых местах в заказе.
 */
export interface ParcelDTO {
  /**
   * Список грузовых мест. Маркет определяет количество мест по длине этого списка.
   */
  boxes: Array<ParcelBoxDTO>;
}


/**
 * Данные о складе отправления.
 */
export interface PartnerShipmentWarehouseDTO {
  /**
   * Идентификатор склада отправления.
   */
  id?: number;
  /**
   * Наименование склада отправления.
   */
  name?: string;
  /**
   * Адрес склада отправления.
   */
  address?: string;
}


/**
 * Частота выплат:  * `DAILY` — ежедневно. * `WEEKLY` — раз в неделю. * `BIWEEKLY` — раз в две недели. * `MONTHLY` — раз в месяц.  Подробнее о графике выплат читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/introduction/rates/acquiring.html). 
 */
export type PaymentFrequencyType = 'DAILY' | 'WEEKLY' | 'BIWEEKLY' | 'MONTHLY';

/**
 * Адрес доставки.
 */
export interface PickupAddressDTO {
  /**
   * Страна.
   */
  country?: string;
  /**
   * Город.
   */
  city?: string;
  /**
   * Улица.
   */
  street?: string;
  /**
   * Номер дома.
   */
  house?: string;
  /**
   * Почтовый индекс.
   */
  postcode?: string;
}


/**
 * Модель, по которой работает магазин:  * `FBS` — FBS или Экспресс. * `FBY` — FBY. * `DBS` — DBS. 
 */
export type PlacementType = 'FBS' | 'FBY' | 'DBS';

/**
 * Максимальные значения цены, при которых она является привлекательной или умеренной.
 */
export interface PriceCompetitivenessThresholdsDTO {
  optimalPrice?: BasePriceDTO;
  averagePrice?: BasePriceDTO;
}


/**
 * Привлекательность цены:  * `OPTIMAL` — привлекательная. * `AVERAGE` — умеренная. * `LOW` — непривлекательная. 
 */
export type PriceCompetitivenessType = 'OPTIMAL' | 'AVERAGE' | 'LOW';

/**
 * Цена с указанием скидки, валюты и времени последнего обновления.
 */
export interface PriceDTO {
  /**
   * Цена на товар.
   */
  value?: number;
  /**
   * Цена на товар без скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. 
   */
  discountBase?: number;
  currencyId?: CurrencyType;
  /**
   * Идентификатор ставки НДС, применяемой для товара:  * `2` — 10%. * `5` — 0%. * `6` — не облагается НДС. * `7` — 20%.  Если параметр не указан, используется ставка НДС, установленная в кабинете. 
   */
  vat?: number;
}


/**
 * Причина попадания товара в карантин.
 */
export interface PriceQuarantineVerdictDTO {
  type?: PriceQuarantineVerdictType;
  /**
   * Цена, из-за которой товар попал в карантин, и значения для сравнения. Конкретный набор параметров зависит от типа карантина.
   */
  params: Array<PriceQuarantineVerdictParameterDTO>;
}


/**
 * Имя параметра причины скрытия товара по цене.  * `CURRENT_PRICE` — цена, из-за которой товар попал в карантин. * `LAST_VALID_PRICE` — последняя цена до попадания в карантин (только для карантина типа `PRICE_CHANGE`). * `MIN_PRICE` — порог попадания в карантин (только для карантина типов `LOW_PRICE` и `LOW_PRICE_PROMO`). * `CURRENCY` — валюта. 
 */
export type PriceQuarantineVerdictParamNameType = 'CURRENT_PRICE' | 'LAST_VALID_PRICE' | 'MIN_PRICE' | 'CURRENCY';

/**
 * Параметр карантина.
 */
export interface PriceQuarantineVerdictParameterDTO {
  name: PriceQuarantineVerdictParamNameType;
  /**
   * Значение параметра.
   */
  value: string;
}


/**
 * Типы карантина:  * `PRICE_CHANGE` — новая цена слишком сильно отличается от прежней. В поле `params` будет  новая цена `CURRENT_PRICE` и последняя цена до попадания в карантин `LAST_VALID_PRICE`. * `LOW_PRICE` — установленная цена слишком сильно отличается от рыночной. В поле `params` будет установленная вами цена `CURRENT_PRICE` и порог попадания в карантин `MIN_PRICE`. * `LOW_PRICE_PROMO` — цена после применения акций слишком сильно отличается от рыночной. В поле `params` будет цена после применения акций `CURRENT_PRICE` и порог попадания в карантин `MIN_PRICE`. 
 */
export type PriceQuarantineVerdictType = 'PRICE_CHANGE' | 'LOW_PRICE' | 'LOW_PRICE_PROMO';

/**
 * Рекомендованная цена.
 */
export interface PriceRecommendationItemDTO {
  /**
   * Идентификатор кампании.
   */
  campaignId: number;
  /**
   * Рекомендованная цена на товар. Чтобы продвижение хорошо работало, цена на товар должна быть не выше этого значения. [Подробно о рекомендованных ценах](https://yandex.ru/support/marketplace/marketing/campaigns.html#prices) 
   */
  price: number;
}


/**
 * Тип цены.
 */
export interface PriceSuggestDTO {
  type?: PriceSuggestType;
  /**
   * Цена в рублях.
   */
  price?: number;
}


/**
 * Товар с ценами для продвижения.
 */
export interface PriceSuggestOfferDTO {
  /**
   * SKU на Маркете.
   */
  marketSku?: number;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId?: string;
  /**
   * Цены для продвижения. 
   */
  priceSuggestion?: Array<PriceSuggestDTO>;
}


/**
 * Тип цены:  * `BUYBOX` — самая низкая цена на товар, по которой он продается сейчас. Эта цена обновляется в режиме реального времени. Если вы установите цену ниже, начнет показываться ваше предложение. Если для этого значения в параметре `price` указана цена, которая совпадает с вашей, значит, ваш товар уже показывается на витрине. Если кроме вас этот товар продают другие продавцы по такой же цене, их предложения также будут отображаться вместе с вашими по очереди. * `DEFAULT_OFFER` — рекомендованная Маркетом цена, которая привлекает покупателей. Рассчитывается только для популярных на сервисе товаров и обновляется раз в четыре часа. * `MIN_PRICE_MARKET` — минимальная цена на Маркете. Самая низкая цена среди всех предложений товара на Маркете во всех регионах, включая те, которые не видны на витрине. Эта цена обновляется в режиме реального времени и обеспечивает большее количество показов на Маркете, чем самая низкая или рекомендованная цена. 
 */
export type PriceSuggestType = 'BUYBOX' | 'DEFAULT_OFFER' | 'MIN_PRICE_MARKET';

/**
 * Информация об автоматическом добавлении товара в акцию.  Причины, по которым товар не был добавлен автоматически в других магазинах, можно узнать в кабинете продавца на Маркете на странице акции.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
 */
export interface PromoOfferAutoParticipatingDetailsDTO {
  /**
   * Магазины, в которых товар добавлен в акцию автоматически.  Возвращается, если статус товара в акции — `PARTIALLY_AUTO`. 
   */
  campaignIds?: Array<number>;
}


/**
 * Параметры товара в акции с типом `DIRECT_DISCOUNT` или `BLUE_FLASH`.
 */
export interface PromoOfferDiscountParamsDTO {
  /**
   * Зачеркнутая цена — та, по которой товар продавался до акции.  Указывается в рублях.  Возвращается, только если товар участвует в акции. 
   */
  price?: number;
  /**
   * Цена по акции — та, по которой вы хотите продавать товар.  Указывается в рублях.  Возвращается, только если товар участвует в акции. 
   */
  promoPrice?: number;
  /**
   * Максимально возможная цена для участия в акции.  Указывается в рублях.  Возвращается для всех товаров. 
   */
  maxPromoPrice: number;
}


/**
 * Параметры товара в акции.  Возвращается параметр, который соответствует типу акции. 
 */
export interface PromoOfferParamsDTO {
  discountParams?: PromoOfferDiscountParamsDTO;
  promocodeParams?: PromoOfferPromocodeParamsDTO;
}


/**
 * Фильтр для товаров, которые добавлены в акцию вручную:  * `MANUALLY_ADDED` — товары, которые добавлены вручную.  * `NOT_MANUALLY_ADDED`— товары, которые не участвуют в акции и те, которые добавлены автоматически.  Если не передать параметр `statusType`, вернутся все товары.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
 */
export type PromoOfferParticipationStatusFilterType = 'MANUALLY_ADDED' | 'NOT_MANUALLY_ADDED';

/**
 * Статус товара в акции:  * `AUTO` — добавлен автоматически во всех магазинах кабинета, в которых товар доступен для покупки.  * `PARTIALLY_AUTO` — добавлен автоматически у части магазинов.  * `MANUAL` — добавлен вручную.  * `NOT_PARTICIPATING` — не участвует в акции.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
 */
export type PromoOfferParticipationStatusType = 'AUTO' | 'PARTIALLY_AUTO' | 'MANUAL' | 'NOT_PARTICIPATING';

/**
 * Параметры товара в акции с типом `MARKET_PROMOCODE`.
 */
export interface PromoOfferPromocodeParamsDTO {
  /**
   * Максимально возможная цена для участия в акции до применения промокода.  Указывается в рублях.  Возвращается для всех товаров. 
   */
  maxPrice: number;
}


/**
 * Предупреждение, которое появилось при добавлении товара:  * `DEEP_DISCOUNT_OFFER` — большая разница с ценой в каталоге. Проверьте, нет ли ошибки.  * `CATALOG_PRICE_IS_LOWER_THAN_PROMO` — [базовая цена](*basic-price) в кабинете ниже цены по акции. У товара в акции будет отображаться базовая цена.  * `SHOP_PRICES_ARE_LOWER_THAN_PROMO` — цена в отдельном магазине ниже цены по акции. У товара в акции будет отображаться цена в магазине. Для остальных магазинов будет действовать цена по акции.  * `PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE` — в отдельном магазине цена с учетом промокода выше максимально возможной цены. Товар не будет участвовать в акции.  * `SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO` — товар в отдельном магазине не подходит под условия акции. 
 */
export type PromoOfferUpdateWarningCodeType = 'DEEP_DISCOUNT_OFFER' | 'CATALOG_PRICE_IS_LOWER_THAN_PROMO' | 'SHOP_PRICES_ARE_LOWER_THAN_PROMO' | 'PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE' | 'SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO';

/**
 * Предупреждение, которое появилось при добавлении товара в акцию или изменении его цен.
 */
export interface PromoOfferUpdateWarningDTO {
  code: PromoOfferUpdateWarningCodeType;
  /**
   * Идентификаторы магазинов в кабинете, для которых получены предупреждения.  Не возвращается, если предупреждения действуют для всех магазинов в кабинете. 
   */
  campaignIds?: Array<number>;
}


/**
 * Какие акции вернутся:  * `PARTICIPATING_NOW` — текущие и будущие акции продавца.  * `PARTICIPATED` — завершенные акции продавца за последний год. Если за год их было меньше 15, в ответе придут 15 последних акций за все время. 
 */
export type PromoParticipationType = 'PARTICIPATING_NOW' | 'PARTICIPATED';

/**
 * Время проведения акции.
 */
export interface PromoPeriodDTO {
  /**
   * Дата и время начала акции.
   */
  dateTimeFrom: string;
  /**
   * Дата и время окончания акции.
   */
  dateTimeTo: string;
}


/**
 * Запрос на передачу ключей цифровых товаров.
 */
export interface ProvideOrderDigitalCodesRequest {
  /**
   * Список проданных ключей.  Если в заказе есть несколько **одинаковых** товаров (например, несколько ключей к одной и той же подписке), передайте каждый в виде отдельного элемента массива. `id` у этих элементов должен быть один и тот же. 
   */
  items: Array<OrderDigitalItemDTO>;
}


export interface ProvideOrderItemIdentifiersRequest {
  /**
   * Список позиций, требующих маркировки. 
   */
  items: Array<OrderItemInstanceModificationDTO>;
}


export interface ProvideOrderItemIdentifiersResponse {
  status?: ApiResponseStatusType;
  result?: OrderItemsModificationResultDTO;
}


/**
 * description.
 */
export interface PutSkuBidsRequest {
  /**
   * Список товаров и ставки для продвижения, которые на них нужно установить.
   */
  bids: Array<SkuBidItemDTO>;
}


/**
 * Информация о заказе, который повлиял на индекс качества.
 */
export interface QualityRatingAffectedOrderDTO {
  /**
   * Идентификатор заказа.
   */
  orderId: number;
  /**
   * Описание проблемы.
   */
  description: string;
  componentType: AffectedOrderQualityRatingComponentType;
}


/**
 * Составляющая индекса качества.
 */
export interface QualityRatingComponentDTO {
  /**
   * Значение составляющей в процентах.
   */
  value: number;
  componentType: QualityRatingComponentType;
}


/**
 * Составляющие индекса качества.  **Для модели DBS:** * `DBS_CANCELLATION_RATE` — доля отмененных товаров. * `DBS_LATE_DELIVERY_RATE` — доля заказов, доставленных после плановой даты.  **Для моделей FBS и Экспресс:** * `FBS_CANCELLATION_RATE` — доля отмененных товаров. * `FBS_LATE_SHIP_RATE` — доля не вовремя отгруженных заказов.  **Для модели FBY:** * `FBY_LATE_DELIVERY_RATE` — доля товаров, которые приехали на склад с опозданием. * `FBY_CANCELLATION_RATE` — доля отмененных или недоставленных товаров. * `FBY_DELIVERY_DIFF_RATE` — доля товаров, которые не прибыли вместе с поставкой или которые не приняли. * `FBY_LATE_EDITING_RATE` — доля товаров, которые поздно убрали из заявки. 
 */
export type QualityRatingComponentType = 'DBS_CANCELLATION_RATE' | 'DBS_LATE_DELIVERY_RATE' | 'FBS_CANCELLATION_RATE' | 'FBS_LATE_SHIP_RATE' | 'FBY_LATE_DELIVERY_RATE' | 'FBY_CANCELLATION_RATE' | 'FBY_DELIVERY_DIFF_RATE' | 'FBY_LATE_EDITING_RATE';

/**
 * Информация об индексе качества.
 */
export interface QualityRatingDTO {
  /**
   * Значение индекса качества.
   */
  rating: number;
  /**
   * Дата вычисления.  Формат даты: `ГГГГ‑ММ‑ДД`. 
   */
  calculationDate: string;
  /**
   * Составляющие индекса качества.
   */
  components: Array<QualityRatingComponentDTO>;
}


/**
 * Информация о заказах, которые повлияли на индекс качества.
 */
export interface QualityRatingDetailsDTO {
  /**
   * Список заказов, которые повлияли на индекс качества.
   */
  affectedOrders: Array<QualityRatingAffectedOrderDTO>;
}


/**
 * Настройка продажи квантами.  Чтобы сбросить установленные ранее значения, передайте пустой параметр `quantum`.  {% cut \"Пример\" %}  ```json {   \"offers\": [     {       \"offerId\": \"08e35dc1-89a2-11e3-8055-0015e9b8c48d\",       \"quantum\": {}     }   ] } ```  {% endcut %} 
 */
export interface QuantumDTO {
  /**
   * Минимальное количество единиц товара в заказе. Например, если указать 10, покупатель сможет добавить в корзину не меньше 10 единиц.  ⚠️ Если количество товара на складе меньше заданного, ограничение не сработает и покупатель сможет его заказать. 
   */
  minQuantity?: number;
  /**
   * На сколько единиц покупатель сможет увеличить количество товара в корзине.  Например, если задать 5, покупатель сможет добавить к заказу только 5, 10, 15, ... единиц товара.  ⚠️ Если количество товара на складе не дотягивает до кванта, ограничение не сработает и покупатель сможет заказать количество, не кратное кванту. 
   */
  stepQuantity?: number;
}


/**
 * Товар в карантине.
 */
export interface QuarantineOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId?: string;
  currentPrice?: BasePriceDTO;
  lastValidPrice?: BasePriceDTO;
  /**
   * Причины попадания товара в карантин.
   */
  verdicts?: Array<PriceQuarantineVerdictDTO>;
}


/**
 * Способ возврата товара покупателем:  * `SHOP` — в точку возврата магазина.  * `DELIVERY_SERVICE` — отправить курьером.  * `POST` — почта. 
 */
export type RecipientType = 'SHOP' | 'DELIVERY_SERVICE' | 'POST';

/**
 * Cтатус возврата денег:  * `STARTED_BY_USER` — создан клиентом из личного кабинета.  * `REFUND_IN_PROGRESS` — ждет решение о возврате денег.  * `REFUNDED` — по возврату проведены все возвратные денежные транзакции.  * `FAILED` — невозможно провести возврат покупателю.  * `WAITING_FOR_DECISION` — ожидает решения.  * `DECISION_MADE` — по возврату принято решение.  * `REFUNDED_WITH_BONUSES` — возврат осуществлен баллами Плюса или промокодом.  * `REFUNDED_BY_SHOP` — магазин сделал самостоятельно возврат денег.  * `COMPLETE_WITHOUT_REFUND` — возврат денег не требуется.  * `CANCELLED` — возврат отменен. 
 */
export type RefundStatusType = 'STARTED_BY_USER' | 'REFUND_IN_PROGRESS' | 'REFUNDED' | 'FAILED' | 'WAITING_FOR_DECISION' | 'DECISION_MADE' | 'REFUNDED_WITH_BONUSES' | 'REFUNDED_BY_SHOP' | 'CANCELLED' | 'COMPLETE_WITHOUT_REFUND' | 'UNKNOWN';

/**
 * Регион доставки.
 */
export interface RegionDTO {
  /**
   * Идентификатор региона.
   */
  id?: number;
  /**
   * Название региона.
   */
  name: string;
  type: RegionType;
  parent?: RegionDTO;
  /**
   * Дочерние регионы.
   */
  children?: Array<RegionDTO>;
}


/**
 * Тип региона.  Возможные значения:  * `CITY_DISTRICT` — район города.  * `CITY` — крупный город.  * `CONTINENT` — континент.  * `COUNTRY_DISTRICT` — область.  * `COUNTRY` — страна.  * `REGION` — регион.  * `REPUBLIC_AREA` — район субъекта федерации.  * `REPUBLIC` — субъект федерации.  * `SUBWAY_STATION` — станция метро.  * `VILLAGE` — город.  * `OTHER` — неизвестный регион. 
 */
export type RegionType = 'OTHER' | 'CONTINENT' | 'REGION' | 'COUNTRY' | 'COUNTRY_DISTRICT' | 'REPUBLIC' | 'CITY' | 'VILLAGE' | 'CITY_DISTRICT' | 'SUBWAY_STATION' | 'REPUBLIC_AREA';

/**
 * Региональная информация.
 */
export interface RegionalModelInfoDTO {
  currency?: CurrencyType;
  /**
   * Идентификатор региона, для которого выводится информация о предложениях модели (доставляемых в этот регион).  Информацию о регионе по идентификатору можно получить с помощью запроса [GET regions/{regionId}](../../reference/regions/searchRegionsById.md). 
   */
  regionId?: number;
}


/**
 * Информация о товаре и ошибки, которые появились при его удалении.
 */
export interface RejectedPromoOfferDeleteDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  reason: RejectedPromoOfferDeleteReasonType;
}


/**
 * Описание ошибки:  * `OFFER_DOES_NOT_EXIST` — в кабинете нет товара с таким SKU. 
 */
export type RejectedPromoOfferDeleteReasonType = 'OFFER_DOES_NOT_EXIST';

/**
 * Описание отклоненного изменения.
 */
export interface RejectedPromoOfferUpdateDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  reason: RejectedPromoOfferUpdateReasonType;
}


/**
 * Причина отклонения изменения:  * `OFFER_DOES_NOT_EXIST` — в кабинете нет товара с таким SKU.  * `OFFER_DUPLICATION` — один и тот же товар передан несколько раз.  * `OFFER_NOT_ELIGIBLE_FOR_PROMO` — товар не подходит под условия акции.  * `OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED` — товар не добавлен в акцию по техническим причинам.  * `DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED` — истек срок добавления товаров в акцию.  * `EMPTY_OLD_PRICE` — не указана зачеркнутая цена.  * `EMPTY_PROMO_PRICE` — не указана цена по акции.  * `MAX_PROMO_PRICE_EXCEEDED` — цена по акции превышает максимально возможную цену для участия в акции.  * `PROMO_PRICE_BIGGER_THAN_MAX` — цена по акции больше 95% от зачеркнутой цены.  * `PROMO_PRICE_SMALLER_THAN_MIN` — цена по акции меньше 1% от зачеркнутой цены. 
 */
export type RejectedPromoOfferUpdateReasonType = 'OFFER_DOES_NOT_EXIST' | 'OFFER_DUPLICATION' | 'OFFER_NOT_ELIGIBLE_FOR_PROMO' | 'OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED' | 'DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED' | 'EMPTY_OLD_PRICE' | 'EMPTY_PROMO_PRICE' | 'MAX_PROMO_PRICE_EXCEEDED' | 'PROMO_PRICE_BIGGER_THAN_MAX' | 'PROMO_PRICE_SMALLER_THAN_MIN';

/**
 * Формат отчета:  * `FILE` — файл с электронной таблицей. * `CSV` — ZIP-архив с CSV-файлами на каждый лист отчета. 
 */
export type ReportFormatType = 'FILE' | 'CSV';

/**
 * Статус генерации и ссылка на готовый отчет.
 */
export interface ReportInfoDTO {
  status: ReportStatusType;
  subStatus?: ReportSubStatusType;
  /**
   * Дата и время запроса на генерацию.
   */
  generationRequestedAt: string;
  /**
   * Дата и время завершения генерации.
   */
  generationFinishedAt?: string;
  /**
   * Ссылка на готовый отчет.
   */
  file?: string;
  /**
   * Ожидаемая продолжительность генерации в миллисекундах.
   */
  estimatedGenerationTime?: number;
}


/**
 * Статус генерации отчета:  * `PENDING` — отчет ожидает генерации. * `PROCESSING` — отчет генерируется. * `FAILED` — во время генерации произошла ошибка. * `DONE` — отчет готов. 
 */
export type ReportStatusType = 'PENDING' | 'PROCESSING' | 'FAILED' | 'DONE';

/**
 * Подстатус генерации отчета: * `NO_DATA` — для такого отчета нет данных. * `TOO_LARGE` — отчет превысил допустимый размер — укажите меньший период времени или уточните условия запроса. * `RESOURCE_NOT_FOUND` — для такого отчета не удалось найти часть сущностей. 
 */
export type ReportSubStatusType = 'NO_DATA' | 'TOO_LARGE' | 'RESOURCE_NOT_FOUND';

/**
 * Возврат заказа.
 */
export interface ReturnDTO {
  /**
   * Идентификатор возврата.
   */
  id?: number;
  /**
   * Номер заказа.
   */
  orderId?: number;
  /**
   * Дата создания возврата клиентом.
   */
  creationDate?: string;
  /**
   * Дата обновления возврата.
   */
  updateDate?: string;
  refundStatus?: RefundStatusType;
  logisticPickupPoint?: LogisticPickupPointDTO;
  shipmentRecipientType?: RecipientType;
  shipmentStatus?: ReturnShipmentStatusType;
  /**
   * Сумма возврата.
   */
  refundAmount?: number;
  /**
   * Список товаров в возврате.
   */
  items: Array<ReturnItemDTO>;
  returnType?: ReturnType;
  /**
   * Используется ли опция **Быстрый возврат денег за дешевый брак**. 
   */
  fastReturn?: boolean;
}


/**
 * Решения по возвратам.
 */
export interface ReturnDecisionDTO {
  /**
   * Идентификатор товара в возврате.
   */
  returnItemId?: number;
  /**
   * Количество единиц товара.
   */
  count?: number;
  /**
   * Комментарий.
   */
  comment?: string;
  reasonType?: ReturnDecisionReasonType;
  subreasonType?: ReturnDecisionSubreasonType;
  decisionType?: ReturnDecisionType;
  /**
   * Сумма возврата.
   */
  refundAmount?: number;
  /**
   * Компенсация за обратную доставку.
   */
  partnerCompensation?: number;
  /**
   * Список хеш-кодов фотографий товара от покупателя.
   */
  images?: Array<string>;
}


/**
 * Причины возврата:  * `BAD_QUALITY` — бракованный товар (есть недостатки).  * `DO_NOT_FIT` — товар не подошел.  * `WRONG_ITEM` — привезли не тот товар.  * `DAMAGE_DELIVERY` — товар поврежден при доставке.  * `LOYALTY_FAIL` — невозможно установить виновного в браке/пересорте.  * `CONTENT_FAIL` — ошибочное описание товара по вине Маркета.  * `UNKNOWN` — причина не известна. 
 */
export type ReturnDecisionReasonType = 'BAD_QUALITY' | 'DOES_NOT_FIT' | 'WRONG_ITEM' | 'DAMAGE_DELIVERY' | 'LOYALTY_FAIL' | 'CONTENT_FAIL' | 'UNKNOWN';

/**
 * Детали причин возврата:   * `DO_NOT_FIT`:     * `USER_DID_NOT_LIKE` — товар не понравился.     * `USER_CHANGED_MIND` — передумал покупать.     * `DELIVERED_TOO_LONG` — длительный срок доставки, поэтому передумал.    * `BAD_QUALITY`:     * `BAD_PACKAGE` — упаковка товара была нарушена.     * `DAMAGED` — царапины, сколы.     * `NOT_WORKING` — не включается / не работает.     * `INCOMPLETENESS` — некомплект (не хватает детали в наборе, к товару).    * `WRONG_ITEM`:     * `WRONG_ITEM` — не тот товар.     * `WRONG_COLOR` — не соответствует по цвету.     * `DID_NOT_MATCH_DESCRIPTION` — не соответствует заявленным характеристикам/описанию. 
 */
export type ReturnDecisionSubreasonType = 'USER_DID_NOT_LIKE' | 'USER_CHANGED_MIND' | 'DELIVERED_TOO_LONG' | 'BAD_PACKAGE' | 'DAMAGED' | 'NOT_WORKING' | 'INCOMPLETENESS' | 'WRONG_ITEM' | 'WRONG_COLOR' | 'DID_NOT_MATCH_DESCRIPTION' | 'UNKNOWN';

/**
 * Решение по возврату:  * `REFUND_MONEY` — вернуть деньги покупателю.  * `REFUND_MONEY_INCLUDING_SHIPMENT` — вернуть деньги за товар и пересылку.  * `REPAIR` — отремонтировать товар.  * `REPLACE` — заменить товар.  * `SEND_TO_EXAMINATION` — взять товар на экспертизу.  * `DECLINE_REFUND` — отказать в возврате.  * `OTHER_DECISION` — другое решение. 
 */
export type ReturnDecisionType = 'REFUND_MONEY' | 'REFUND_MONEY_INCLUDING_SHIPMENT' | 'REPAIR' | 'REPLACE' | 'SEND_TO_EXAMINATION' | 'DECLINE_REFUND' | 'OTHER_DECISION' | 'UNKNOWN';

/**
 * Логистическая информация по возврату.
 */
export interface ReturnInstanceDTO {
  stockType?: ReturnInstanceStockType;
  status?: ReturnInstanceStatusType;
  /**
   * Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
   */
  cis?: string;
  /**
   * Международный идентификатор мобильного оборудования.
   */
  imei?: string;
}


/**
 * Логистический статус конкретного товара.
 */
export type ReturnInstanceStatusType = 'CREATED' | 'RECEIVED' | 'IN_TRANSIT' | 'READY_FOR_PICKUP' | 'PICKED' | 'RECEIVED_ON_FULFILLMENT' | 'CANCELLED' | 'LOST' | 'UTILIZED' | 'PREPARED_FOR_UTILIZATION' | 'EXPROPRIATED' | 'NOT_IN_DEMAND';

/**
 * Тип остатка на складе.
 */
export type ReturnInstanceStockType = 'FIT' | 'DEFECT' | 'ANOMALY' | 'SURPLUS' | 'EXPIRED' | 'MISGRADING' | 'UNDEFINED' | 'INCORRECT_IMEI' | 'INCORRECT_SERIAL_NUMBER' | 'INCORRECT_CIS' | 'PART_MISSING' | 'NON_COMPLIENT' | 'NOT_ACCEPTABLE' | 'SERVICE' | 'MARKDOWN' | 'DEMO' | 'REPAIR' | 'FIRMWARE' | 'UNKNOWN';

/**
 * Список товаров в возврате.
 */
export interface ReturnItemDTO {
  /**
   * SKU на Маркете.
   */
  marketSku?: number;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  shopSku: string;
  /**
   * Количество единиц товара.
   */
  count: number;
  /**
   * Список решений по возврату.
   */
  decisions?: Array<ReturnDecisionDTO>;
  /**
   * Список логистических позиций возврата.
   */
  instances?: Array<ReturnInstanceDTO>;
  /**
   * Список трек-кодов для почтовых отправлений.
   */
  tracks?: Array<TrackDTO>;
}


/**
 * Решение по возврату.
 */
export type ReturnRequestDecisionType = 'REFUND_MONEY' | 'REFUND_MONEY_INCLUDING_SHIPMENT' | 'REPAIR' | 'REPLACE' | 'SEND_TO_EXAMINATION' | 'DECLINE_REFUND' | 'OTHER_DECISION';

/**
 * Статус передачи возврата:  * `CREATED` — возврат создан.  * `RECEIVED` — принят у покупателя.  * `IN_TRANSIT` — возврат в пути.  * `READY_FOR_PICKUP` — возврат готов к выдаче магазину.  * `PICKED` — возврат выдан магазину.  * `LOST` — возврат утерян при транспортировке.  * `CANCELLED` — возврат отменен.  * `FULFILMENT_RECEIVED` — возврат принят на складе Маркета.  * `PREPARED_FOR_UTILIZATION` — возврат передан в утилизацию.  * `UTILIZED` — возврат утилизирован. 
 */
export type ReturnShipmentStatusType = 'CREATED' | 'RECEIVED' | 'IN_TRANSIT' | 'READY_FOR_PICKUP' | 'PICKED' | 'LOST' | 'EXPIRED' | 'CANCELLED' | 'FULFILMENT_RECEIVED' | 'PREPARED_FOR_UTILIZATION' | 'NOT_IN_DEMAND' | 'UTILIZED' | 'READY_FOR_EXPROPRIATION' | 'RECEIVED_FOR_EXPROPRIATION';

/**
 * Тип заказа для фильтрации:  * `RETURN` — возврат.  * `UNREDEEMED` — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. 
 */
export type ReturnType = 'UNREDEEMED' | 'RETURN';

/**
 * Информация о страницах результатов.
 */
export interface ScrollingPagerDTO {
  /**
   * Идентификатор следующей страницы результатов.
   */
  nextPageToken?: string;
  /**
   * Идентификатор предыдущей страницы результатов.
   */
  prevPageToken?: string;
}


export interface SearchModelsResponse {
  /**
   * Список моделей товаров.
   */
  models: Array<ModelDTO>;
  currency?: CurrencyType;
  /**
   * Идентификатор региона, для которого выводится информация о предложениях модели (доставляемых в этот регион).  Информацию о регионе по идентификатору можно получить с помощью запроса [GET regions/{regionId}](../../reference/regions/searchRegionsById.md). 
   */
  regionId?: number;
  pager?: FlippingPagerDTO;
}


/**
 * Запрос информации об отгрузках.
 */
export interface SearchShipmentsRequest {
  /**
   * Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 
   */
  dateFrom: string;
  /**
   * Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 
   */
  dateTo: string;
  /**
   * Список статусов отгрузок.
   */
  statuses?: Set<ShipmentStatusType>;
  /**
   * Список идентификаторов заказов из отгрузок.
   */
  orderIds?: Set<number>;
  /**
   * Возвращать ли отмененные заказы.  Значение по умолчанию — `true`. Если возвращать отмененные заказы не нужно, передайте значение `false`. 
   */
  cancelledOrders?: boolean;
}


/**
 * Ответ на запрос информации об отгрузках.
 */
export interface SearchShipmentsResponse {
  status?: ApiResponseStatusType;
  result?: SearchShipmentsResponseDTO;
}


/**
 * Информация об отгрузках.
 */
export interface SearchShipmentsResponseDTO {
  /**
   * Список с информацией об отгрузках.
   */
  shipments: Array<ShipmentInfoDTO>;
  paging?: ForwardScrollingPagerDTO;
}


/**
 * Модель размещения:  * `FBY` — FBY. * `FBS` — FBS. * `DBS` — DBS. * `EXPRESS` — Экспресс. 
 */
export type SellingProgramType = 'FBY' | 'FBS' | 'DBS' | 'EXPRESS';

/**
 * В какой чат нужно отправить сообщение и текст сообщения.
 */
export interface SendMessageToChatRequest {
  /**
   * Текст сообщения. Максимальная длина — 4096 символа.
   */
  message: string;
}


/**
 * Запрос на обновление изменение параметров прайс-листа.
 */
export interface SetFeedParamsRequest {
  /**
   * Параметры прайс-листа.  Обязательный параметр. 
   */
  parameters: Array<FeedParameterDTO>;
}


export interface SetOrderBoxLayoutRequest {
  /**
   * Список коробок.
   */
  boxes: Array<OrderBoxLayoutDTO>;
  /**
   * Передайте `true`, если вы собираетесь удалить часть товаров из заказа.
   */
  allowRemove?: boolean;
}


export interface SetOrderBoxLayoutResponse {
  status?: ApiResponseStatusType;
  result?: OrderBoxesLayoutDTO;
}


export interface SetOrderDeliveryDateRequest {
  dates: OrderDeliveryDateDTO;
  reason: OrderDeliveryDateReasonType;
}


export interface SetOrderDeliveryTrackCodeRequest {
  /**
   * Трек‑номер посылки.
   */
  trackCode: string;
  /**
   * Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
   */
  deliveryServiceId: number;
}


export interface SetOrderShipmentBoxesRequest {
  /**
   * Список грузовых мест. Маркет определяет количество мест по длине этого списка.
   */
  boxes: Array<ParcelBoxDTO>;
}


export interface SetOrderShipmentBoxesResponse {
  status?: ApiResponseStatusType;
  result?: ShipmentBoxesDTO;
}


/**
 * Решения по позиции в возврате.
 */
export interface SetReturnDecisionRequest {
  /**
   * Идентификатор товара в возврате.
   */
  returnItemId: number;
  decisionType: ReturnRequestDecisionType;
  /**
   * Комментарий к решению. Укажите:  * для `REFUND_MONEY_INCLUDING_SHIPMENT`— стоимость обратной пересылки;  * для `REPAIR` — когда вы устраните недостатки товара;  * для `DECLINE_REFUND` — причину отказа;  * для `OTHER_DECISION` — какое решение вы предлагаете. 
   */
  comment?: string;
}


/**
 * Запрос на передачу количества упаковок в отгрузке.
 */
export interface SetShipmentPalletsCountRequest {
  /**
   * Количество упаковок в отгрузке.
   */
  placesCount: number;
}


/**
 * Тип атрибуции:   * `CLICKS` — по кликам.   * `SHOWS` — по показам. <br><br>  О том, какие данные в отчете зависят и не зависят от типа атрибуции, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf#stats). 
 */
export type ShelfsStatisticsAttributionType = 'CLICKS' | 'SHOWS';

/**
 * Действия с отгрузкой:  * `CONFIRM` — подтвердить отгрузку. * `DOWNLOAD_ACT` — скачать акт приема-передачи отгрузки. * `DOWNLOAD_INBOUND_ACT` — скачать список принятых заказов. * `DOWNLOAD_DISCREPANCY_ACT` — скачать акт расхождений. * `CHANGE_PALLETS_COUNT` — указать количество палет. 
 */
export type ShipmentActionType = 'CONFIRM' | 'DOWNLOAD_ACT' | 'DOWNLOAD_INBOUND_ACT' | 'DOWNLOAD_DISCREPANCY_ACT' | 'CHANGE_PALLETS_COUNT';

/**
 * В ответе Маркет возвращает переданный вами список грузовых мест. Не обращайте на это поле внимания. 
 */
export interface ShipmentBoxesDTO {
  /**
   * Список грузовых мест. Маркет определил количество мест по длине этого списка. 
   */
  boxes: Array<ParcelBoxDTO>;
}


/**
 * Информация об отгрузке.
 */
export interface ShipmentDTO {
  /**
   * Идентификатор отгрузки.
   */
  id?: number;
  /**
   * Начало планового интервала отгрузки.
   */
  planIntervalFrom?: string;
  /**
   * Конец планового интервала отгрузки.
   */
  planIntervalTo?: string;
  shipmentType?: ShipmentType;
  warehouse?: PartnerShipmentWarehouseDTO;
  warehouseTo?: PartnerShipmentWarehouseDTO;
  /**
   * Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.
   */
  externalId?: string;
  deliveryService?: DeliveryServiceDTO;
  palletsCount?: PalletsCountDTO;
  /**
   * Идентификаторы заказов в отгрузке.
   */
  orderIds: Set<number>;
  /**
   * Количество заказов, которое Маркет запланировал к отгрузке.
   */
  draftCount?: number;
  /**
   * Количество заказов, которое Маркет подтвердил к отгрузке.
   */
  plannedCount?: number;
  /**
   * Количество заказов, принятых в сортировочном центре или пункте приема.
   */
  factCount?: number;
  currentStatus?: ShipmentStatusChangeDTO;
  /**
   * Доступные действия над отгрузкой.
   */
  availableActions: Set<ShipmentActionType>;
}


/**
 * Список с информацией об отгрузках.
 */
export interface ShipmentInfoDTO {
  /**
   * Идентификатор отгрузки.
   */
  id?: number;
  /**
   * Начало планового интервала отгрузки.
   */
  planIntervalFrom?: string;
  /**
   * Конец планового интервала отгрузки.
   */
  planIntervalTo?: string;
  shipmentType?: ShipmentType;
  warehouse?: PartnerShipmentWarehouseDTO;
  warehouseTo?: PartnerShipmentWarehouseDTO;
  /**
   * Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.
   */
  externalId?: string;
  deliveryService?: DeliveryServiceDTO;
  palletsCount?: PalletsCountDTO;
  /**
   * Идентификаторы заказов в отгрузке.
   */
  orderIds: Set<number>;
  /**
   * Количество заказов, которое Маркет запланировал к отгрузке.
   */
  draftCount?: number;
  /**
   * Количество заказов, которое Маркет подтвердил к отгрузке.
   */
  plannedCount?: number;
  /**
   * Количество заказов, принятых в сортировочном центре или пункте приема.
   */
  factCount?: number;
  status?: ShipmentStatusType;
  /**
   * Описание статуса отгрузки.
   */
  statusDescription?: string;
  /**
   * Время последнего изменения статуса отгрузки.
   */
  statusUpdateTime?: string;
}


/**
 * Формат страницы: * `A4` — формат страницы A4. * `A8` — формат страницы A8. 
 */
export type ShipmentPalletLabelPageFormatType = 'A4' | 'A8';

/**
 * Статус отгрузки.
 */
export interface ShipmentStatusChangeDTO {
  status?: ShipmentStatusType;
  /**
   * Описание статуса отгрузки.
   */
  description?: string;
  /**
   * Время последнего изменения статуса отгрузки.
   */
  updateTime?: string;
}


/**
 * Статус отгрузки:  * `OUTBOUND_CREATED` — формируется. * `OUTBOUND_READY_FOR_CONFIRMATION` — можно обрабатывать. * `OUTBOUND_CONFIRMED` — подтверждена и готова к отправке. * `OUTBOUND_SIGNED` — по ней подписан электронный акт приема-передачи. * `ACCEPTED` — принята в сортировочном центре или пункте приема. * `ACCEPTED_WITH_DISCREPANCIES` — принята с расхождениями. * `FINISHED` — завершена. * `ERROR` — отменена из-за ошибки. 
 */
export type ShipmentStatusType = 'OUTBOUND_CREATED' | 'OUTBOUND_READY_FOR_CONFIRMATION' | 'OUTBOUND_CONFIRMED' | 'OUTBOUND_SIGNED' | 'FINISHED' | 'ACCEPTED' | 'ACCEPTED_WITH_DISCREPANCIES' | 'ERROR';

/**
 * Способ отгрузки заказов:  * `IMPORT` — вы самостоятельно привозите заказы в выбранный сортировочный центр или пункт приема заказов. * `WITHDRAW` — вы отгружаете заказы со своего склада курьерам Яндекс Маркета. 
 */
export type ShipmentType = 'IMPORT' | 'WITHDRAW';

/**
 * Группировка данных отчета. Возможные значения: * `CATEGORIES` — группировка по категориям. * `OFFERS` — группировка по товарам. 
 */
export type ShowsSalesGroupingType = 'CATEGORIES' | 'OFFERS';

/**
 * Идентификаторы отзывов.
 */
export interface SkipGoodsFeedbackReactionRequest {
  /**
   * Список идентификаторов отзывов, на которые магазин не будет отвечать.
   */
  feedbackIds: Set<number>;
}


/**
 * Список товаров и ставок на них.
 */
export interface SkuBidItemDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  sku: string;
  /**
   * Значение ставки.
   */
  bid: number;
}


/**
 * Список товаров с рекомендованными ставками.
 */
export interface SkuBidRecommendationItemDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  sku: string;
  /**
   * Значение ставки.
   */
  bid: number;
  /**
   * Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить. 
   */
  bidRecommendations?: Array<BidRecommendationItemDTO>;
  /**
   * Рекомендованные цены.
   */
  priceRecommendations?: Array<PriceRecommendationItemDTO>;
}


/**
 * Направление сортировки.  Возможные значения: - `ASC` — сортировка по возрастанию. - `DESC` — сортировка по убыванию. 
 */
export type SortOrderType = 'ASC' | 'DESC';

/**
 * Товар, для которого требуется получить цены для продвижения.
 */
export interface SuggestOfferPriceDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId?: string;
  /**
   * SKU на Маркете.
   */
  marketSku?: number;
}


/**
 * Запрос на получение списка цен для продвижения.
 */
export interface SuggestPricesRequest {
  /**
   * Список товаров.
   */
  offers: Array<SuggestOfferPriceDTO>;
}


/**
 * Ответ на запрос списка цен для продвижения.
 */
export interface SuggestPricesResponse {
  status?: ApiResponseStatusType;
  result?: SuggestPricesResultDTO;
}


/**
 * Результат запроса цен для продвижения.
 */
export interface SuggestPricesResultDTO {
  /**
   * Список товаров с ценами для продвижения.
   */
  offers: Array<PriceSuggestOfferDTO>;
}


/**
 * Информация о товаре.
 */
export interface SuggestedOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId?: string;
  /**
   * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
   */
  name?: string;
  /**
   * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
   */
  category?: string;
  /**
   * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
   */
  vendor?: string;
  /**
   * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
   */
  barcodes?: Array<string>;
  /**
   * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
   */
  description?: string;
  /**
   * Артикул товара от производителя.
   */
  vendorCode?: string;
  basicPrice?: BasePriceDTO;
}


/**
 * Товар с соответствующей карточкой на Маркете.
 */
export interface SuggestedOfferMappingDTO {
  offer?: SuggestedOfferDTO;
  mapping?: GetMappingDTO;
}


/**
 * Информация о тарифах, по которым нужно заплатить за услуги Маркета.
 */
export interface TariffDTO {
  type: TariffType;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах. 
   */
  percent?: number;
  /**
   * Значение тарифа в рублях.
   */
  amount: number;
  /**
   * Параметры расчета тарифа.
   */
  parameters: Array<TariffParameterDTO>;
}


/**
 * Детали расчета конкретной услуги Маркета.
 */
export interface TariffParameterDTO {
  /**
   * Название параметра.
   */
  name: string;
  /**
   * Значение параметра.
   */
  value: string;
}


/**
 * Услуга Маркета или дополнительный тариф к услуге размещения:  * `AGENCY_COMMISSION` — прием платежа покупателя.  * `PAYMENT_TRANSFER` — перевод платежа покупателя.  * `STORAGE` — хранение товара на складе Маркета в течение суток.  * `SURPLUS` — хранение излишков на складе Маркета.  * `WITHDRAW` — вывоз товара со склада Маркета.  * `FEE` — размещение товара на Маркете.  * `DELIVERY_TO_CUSTOMER` — доставка покупателю.  * `CROSSREGIONAL_DELIVERY` — доставка в федеральный округ, город или населенный пункт.  * `CROSSREGIONAL_DELIVERY_RETURN` — доставка невыкупов и возвратов.  * `DISPOSAL` — утилизация.  * `SORTING_CENTER_STORAGE` — хранение невыкупов и возвратов.  * `EXPRESS_DELIVERY` — экспресс-доставка покупателю.  * `FF_XDOC_SUPPLY_BOX` — поставка товара через транзитный склад (за короб).  * `FF_XDOC_SUPPLY_PALLET` — поставка товара через транзитный склад (за палету).  * `SORTING` — обработка заказа.  * `MIDDLE_MILE` — средняя миля.  * `RETURN_PROCESSING` — обработка невыкупов и возвратов.  * `EXPRESS_CANCELLED_BY_PARTNER` — отмена заказа с экспресс-доставкой.  * `DELIVERY_TO_CUSTOMER_RETURN` — возврат доставляемого товара на склад.  * `CROSSBORDER_DELIVERY` — доставка из-за рубежа.  * `INTAKE_SORTING_BULKY_CARGO` — сортировка заказов с крупногабаритными товарами, которые Маркет забрал со склада продавца.  * `INTAKE_SORTING_SMALL_GOODS` — сортировка заказов с малогабаритными товарами, которые Маркет забрал со склада продавца.  * `INTAKE_SORTING_DAILY` — организация забора заказов со склада продавца.  * `FF_STORAGE_BILLING` — хранения товаров на складе.  * `CANCELLED_ORDER_FEE_QI` — отмена заказа по вине продавца.  * `LATE_ORDER_EXECUTION_FEE_QI` — несвоевременная отгрузка или доставка.  Подробнее об услугах Маркета читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/introduction/rates/index.html). 
 */
export type TariffType = 'AGENCY_COMMISSION' | 'PAYMENT_TRANSFER' | 'STORAGE' | 'WITHDRAW' | 'SURPLUS' | 'FEE' | 'DELIVERY_TO_CUSTOMER' | 'CROSSREGIONAL_DELIVERY' | 'CROSSREGIONAL_DELIVERY_RETURN' | 'DISPOSAL' | 'SORTING_CENTER_STORAGE' | 'EXPRESS_DELIVERY' | 'FF_XDOC_SUPPLY_BOX' | 'FF_XDOC_SUPPLY_PALLET' | 'SORTING' | 'MIDDLE_MILE' | 'RETURN_PROCESSING' | 'EXPRESS_CANCELLED_BY_PARTNER' | 'DELIVERY_TO_CUSTOMER_RETURN' | 'CROSSBORDER_DELIVERY' | 'INTAKE_SORTING_BULKY_CARGO' | 'INTAKE_SORTING_SMALL_GOODS' | 'INTAKE_SORTING_DAILY' | 'FF_STORAGE_BILLING' | 'CANCELLED_ORDER_FEE_QI' | 'LATE_ORDER_EXECUTION_FEE_QI';

/**
 * Временной отрезок с комментарием. Требования к содержанию комментария зависят от контекста использования параметра и указаны в описании поля, которое его содержит.
 */
export interface TimePeriodDTO {
  /**
   * Продолжительность в указанных единицах.
   */
  timePeriod: number;
  timeUnit: TimeUnitType;
  /**
   * Комментарий.
   */
  comment?: string;
}


/**
 * Единица измерения времени:  * `HOUR` — час. * `DAY` — сутки. * `WEEK` — неделя. * `MONTH` — месяц. * `YEAR` — год. 
 */
export type TimeUnitType = 'HOUR' | 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';

/**
 * Информация о трек-номерах.
 */
export interface TrackDTO {
  /**
   * Трек-код почтового отправления.
   */
  trackCode?: string;
}


/**
 * Запрос переноса заказов из отгрузки.
 */
export interface TransferOrdersFromShipmentRequest {
  /**
   * Список заказов, которые вы не успеваете подготовить.
   */
  orderIds: Array<number>;
}


/**
 * Информация об оборачиваемости товара.
 */
export interface TurnoverDTO {
  turnover: TurnoverType;
  /**
   * Значение в днях. [Что это за число?](https://yandex.ru/support/marketplace/analytics/turnover.html)
   */
  turnoverDays?: number;
}


/**
 * Оценка оборачиваемости.  |enum|Диапазон оборачиваемости|Комментарий| |-|-|-| |`LOW`|`turnoverDays` ≥ 120|| |`ALMOST_LOW`|100 ≤ `turnoverDays` < 120|| |`HIGH`|45 ≤ `turnoverDays` < 100|| |`VERY_HIGH`|0 ≤ `turnoverDays` < 45|| |`NO_SALES`|—|Продаж нет.| |`FREE_STORE`|Любое значение.|Товары этой категории сейчас хранятся бесплатно.| 
 */
export type TurnoverType = 'LOW' | 'ALMOST_LOW' | 'HIGH' | 'VERY_HIGH' | 'NO_SALES' | 'FREE_STORE';

/**
 * Единица измерения.
 */
export interface UnitDTO {
  /**
   * Идентификатор единицы измерения.
   */
  id: number;
  /**
   * Сокращенное название единицы измерения.
   */
  name: string;
  /**
   * Полное название единицы измерения.
   */
  fullName: string;
}


/**
 * Товар с новой ценой.
 */
export interface UpdateBusinessOfferPriceDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  price: UpdatePriceWithDiscountDTO;
}


/**
 * Запрос на установку базовых цен на товары.
 */
export interface UpdateBusinessPricesRequest {
  /**
   * Список товаров с ценами.
   */
  offers: Array<UpdateBusinessOfferPriceDTO>;
}


/**
 * Параметры размещения товара в магазине.
 */
export interface UpdateCampaignOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  quantum?: QuantumDTO;
  /**
   * Есть ли товар в продаже. 
   */
  available?: boolean;
  /**
   * Ставка НДС, применяемая для товара. Задается цифрой:  * `2` — 10%. * `5` — 0%. * `6` — не облагается НДС. * `7` — 20%.  Если параметр не указан, используется ставка НДС, установленная в кабинете продавца на Маркете. 
   */
  vat?: number;
}


/**
 * Запрос на обновление предложений товаров магазина.
 */
export interface UpdateCampaignOffersRequest {
  /**
   * Параметры размещения товаров в заданном магазине.
   */
  offers: Array<UpdateCampaignOfferDTO>;
}


/**
 * Комментарий к отзыву или другому комментарию.
 */
export interface UpdateGoodsFeedbackCommentDTO {
  /**
   * Идентификатор комментария к отзыву. 
   */
  id?: number;
  /**
   * Идентификатор комментария к отзыву. 
   */
  parentId?: number;
  /**
   * Текст комментария.
   */
  text: string;
}


/**
 * Комментарий к отзыву.
 */
export interface UpdateGoodsFeedbackCommentRequest {
  /**
   * Идентификатор отзыва. 
   */
  feedbackId: number;
  comment: UpdateGoodsFeedbackCommentDTO;
}


export interface UpdateGoodsFeedbackCommentResponse {
  status?: ApiResponseStatusType;
  result?: GoodsFeedbackCommentDTO;
}


/**
 * Карточка на Маркете, которая, с вашей точки зрения, подходит товару. Чтобы определить идентификатор подходящей карточки, воспользуйтесь поиском в кабинете (**Товары** → **Каталог** → **Загрузить товары**).  По результатам проверки Маркет может привязать товар к более подходящей карточке. 
 */
export interface UpdateMappingDTO {
  /**
   * SKU на Маркете.
   */
  marketSku?: number;
}


/**
 * Информация о товарах в каталоге.
 */
export interface UpdateMappingsOfferDTO {
  /**
   * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
   */
  name?: string;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  shopSku?: string;
  /**
   * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
   */
  category?: string;
  /**
   * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
   */
  vendor?: string;
  /**
   * Артикул товара от производителя.
   */
  vendorCode?: string;
  /**
   * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
   */
  description?: string;
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  id?: string;
  /**
   * Идентификатор фида.
   */
  feedId?: number;
  /**
   * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
   */
  barcodes?: Array<string>;
  /**
   * URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
   */
  urls?: Array<string>;
  /**
   * Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. 
   */
  pictures?: Array<string>;
  /**
   * Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
   */
  manufacturer?: string;
  /**
   * Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
   */
  manufacturerCountries?: Array<string>;
  /**
   * Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
   */
  minShipment?: number;
  /**
   * Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
   */
  transportUnitSize?: number;
  /**
   * Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
   */
  quantumOfSupply?: number;
  /**
   * Срок, за который продавец поставляет товары на склад, в днях.
   */
  deliveryDurationDays?: number;
  /**
   * Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
   */
  boxCount?: number;
  /**
   * Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
   */
  customsCommodityCodes?: Array<string>;
  weightDimensions?: OfferWeightDimensionsDTO;
  /**
   * Дни недели, в которые продавец поставляет товары на склад.
   */
  supplyScheduleDays?: Array<DayOfWeekType>;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
   */
  shelfLifeDays?: number;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
   */
  lifeTimeDays?: number;
  /**
   * Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
   */
  guaranteePeriodDays?: number;
  processingState?: OfferProcessingStateDTO;
  availability?: OfferAvailabilityStatusType;
  shelfLife?: TimePeriodDTO;
  lifeTime?: TimePeriodDTO;
  guaranteePeriod?: TimePeriodDTO;
  /**
   * Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
   */
  certificate?: string;
}


/**
 * Запрос на установку новых значений для параметров.
 */
export interface UpdateOfferContentRequest {
  /**
   * Список товаров с указанными характеристиками.
   */
  offersContent: Array<OfferContentDTO>;
}


/**
 * Описывает проблемы, которые появились при сохранении товара.
 */
export interface UpdateOfferContentResponse {
  status?: ApiResponseStatusType;
  /**
   * Ошибки и предупреждения, которые появились при обработке переданных значений. Каждый элемент списка соответствует одному товару.  Если ошибок и предупреждений нет, поле не передается. 
   */
  results?: Array<UpdateOfferContentResultDTO>;
}


/**
 * Ошибки и предупреждения, которые появились из-за переданных характеристик.
 */
export interface UpdateOfferContentResultDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  /**
   * Ошибки — информация в каталоге не обновится.
   */
  errors?: Array<OfferContentErrorDTO>;
  /**
   * Предупреждения — информация в каталоге обновится.
   */
  warnings?: Array<OfferContentErrorDTO>;
}


/**
 * Параметры товара.
 */
export interface UpdateOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  /**
   * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
   */
  name?: string;
  /**
   * Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
   */
  marketCategoryId?: number;
  /**
   * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
   */
  category?: string;
  /**
   * Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) 
   */
  pictures?: Array<string>;
  /**
   * Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) 
   */
  videos?: Array<string>;
  /**
   * Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся. 
   */
  manuals?: Array<OfferManualDTO>;
  /**
   * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
   */
  vendor?: string;
  /**
   * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
   */
  barcodes?: Array<string>;
  /**
   * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
   */
  description?: string;
  /**
   * Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). 
   */
  manufacturerCountries?: Array<string>;
  weightDimensions?: OfferWeightDimensionsDTO;
  /**
   * Артикул товара от производителя.
   */
  vendorCode?: string;
  /**
   * Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. 
   */
  tags?: Array<string>;
  shelfLife?: TimePeriodDTO;
  lifeTime?: TimePeriodDTO;
  guaranteePeriod?: TimePeriodDTO;
  /**
   * Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. 
   */
  customsCommodityCode?: string;
  /**
   * Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). 
   */
  certificates?: Array<string>;
  /**
   * Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. 
   */
  boxCount?: number;
  condition?: OfferConditionDTO;
  type?: OfferType;
  /**
   * Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) 
   */
  downloadable?: boolean;
  /**
   * Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. 
   */
  adult?: boolean;
  age?: AgeDTO;
  /**
   * {% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. 
   */
  params?: Array<OfferParamDTO>;
  /**
   * Список характеристик с их значениями.  С `parameterValues` обязательно передавайте `marketCategoryId` — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее `parameterId` с пустым `value`.  Максимальное количество характеристик — 300. 
   */
  parameterValues?: Array<ParameterValueDTO>;
  basicPrice?: UpdatePriceWithDiscountDTO;
  purchasePrice?: BasePriceDTO;
  additionalExpenses?: BasePriceDTO;
  cofinancePrice?: BasePriceDTO;
}


/**
 * Информация о товаре.
 */
export interface UpdateOfferMappingDTO {
  offer: UpdateOfferDTO;
  mapping?: UpdateMappingDTO;
}


/**
 * Список товаров.  В теле запроса можно передать от одного до 500 товаров.  Обязательный параметр. 
 */
export interface UpdateOfferMappingEntryDTO {
  mapping?: OfferMappingDTO;
  awaitingModerationMapping?: OfferMappingDTO;
  rejectedMapping?: OfferMappingDTO;
  offer?: UpdateMappingsOfferDTO;
}


/**
 * Запрос на обновление товаров.
 */
export interface UpdateOfferMappingEntryRequest {
  /**
   * Информация о товарах в каталоге.
   */
  offerMappingEntries: Array<UpdateOfferMappingEntryDTO>;
}


/**
 * Ошибки и предупреждения, которые появились из-за переданных характеристик.
 */
export interface UpdateOfferMappingResultDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  /**
   * Ошибки — информация в каталоге не обновится.
   */
  errors?: Array<OfferMappingErrorDTO>;
  /**
   * Предупреждения — информация в каталоге обновится.
   */
  warnings?: Array<OfferMappingErrorDTO>;
}


export interface UpdateOfferMappingsRequest {
  /**
   * Перечень товаров, которые нужно добавить или обновить.
   */
  offerMappings: Array<UpdateOfferMappingDTO>;
  /**
   * Будут использоваться только переданные вами изображения товаров.  Значение по умолчанию — `false`. Если вы хотите заменить изображения, которые добавил Маркет, передайте значение `true`. 
   */
  onlyPartnerMediaContent?: boolean;
}


/**
 * Описывает проблемы, возникшие при сохранении товара.
 */
export interface UpdateOfferMappingsResponse {
  status?: ApiResponseStatusType;
  /**
   * Ошибки и предупреждения, которые появились при обработке списка характеристик. Каждый элемент списка соответствует одному товару.  Если ошибок и предупреждений нет, поле не передается. 
   */
  results?: Array<UpdateOfferMappingResultDTO>;
}


/**
 * Запрос на обновление состава заказа.
 */
export interface UpdateOrderItemRequest {
  /**
   * Список товаров в заказе.  Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.  Обязательный параметр. 
   */
  items: Array<OrderItemModificationDTO>;
  reason?: OrderItemsModificationRequestReasonType;
}


/**
 * Список заказов.
 */
export interface UpdateOrderStatusDTO {
  /**
   * Идентификатор заказа.
   */
  id?: number;
  status?: OrderStatusType;
  substatus?: OrderSubstatusType;
  updateStatus?: OrderUpdateStatusType;
  /**
   * Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр `updateStatus` принимает значение `ERROR`. 
   */
  errorDetails?: string;
}


export interface UpdateOrderStatusRequest {
  order: OrderStatusChangeDTO;
}


/**
 * Информация об изменении статуса заказа.
 */
export interface UpdateOrderStatusResponse {
  order?: OrderDTO;
}


/**
 * Список заказов, статус которых обновился.
 */
export interface UpdateOrderStatusesDTO {
  /**
   * Список с обновленными заказами.
   */
  orders: Array<UpdateOrderStatusDTO>;
}


/**
 * Список заказов.
 */
export interface UpdateOrderStatusesRequest {
  /**
   * Список заказов.
   */
  orders: Array<OrderStateDTO>;
}


export interface UpdateOrderStatusesResponse {
  status?: ApiResponseStatusType;
  result?: UpdateOrderStatusesDTO;
}


/**
 * Запрос на обновление срока хранения заказа в ПВЗ.
 */
export interface UpdateOrderStorageLimitRequest {
  /**
   * Новая дата, до которой заказ будет храниться в пункте выдачи.  Срок хранения можно увеличить не больше, чем на 30 дней.  Формат даты: `ГГГГ-ММ-ДД`. 
   */
  newDate: string;
}


/**
 * Запрос на создание или изменение лицензий для точек продаж.
 */
export interface UpdateOutletLicenseRequest {
  /**
   * Список лицензий. Обязательный параметр, должен содержать информацию хотя бы об одной лицензии. 
   */
  licenses: Array<OutletLicenseDTO>;
}


/**
 * Цена с указанием скидки.
 */
export interface UpdatePriceWithDiscountDTO {
  /**
   * Значение.
   */
  value: number;
  currencyId: CurrencyType;
  /**
   * Цена до скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. 
   */
  discountBase?: number;
}


/**
 * Запрос на установку цен на товары.
 */
export interface UpdatePricesRequest {
  /**
   * Список товаров.
   */
  offers: Array<OfferPriceDTO>;
}


/**
 * Описание товаров, которые участвуют в акции.
 */
export interface UpdatePromoOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  params?: UpdatePromoOfferParamsDTO;
}


/**
 * Параметры товара в акции с типом `DIRECT_DISCOUNT` или `BLUE_FLASH`.  Обязательный параметр для акций с этими типами. 
 */
export interface UpdatePromoOfferDiscountParamsDTO {
  /**
   * Зачеркнутая цена — та, по которой товар продавался до акции.  Указывается в рублях.  Число должно быть целым. 
   */
  price?: number;
  /**
   * Цена по акции — та, по которой вы хотите продавать товар.  Указывается в рублях.  Число должно быть целым. 
   */
  promoPrice?: number;
}


/**
 * Параметры товара, который участвует в акции.
 */
export interface UpdatePromoOfferParamsDTO {
  discountParams?: UpdatePromoOfferDiscountParamsDTO;
}


/**
 * Добавление товаров в акцию или обновление их параметров.  Чтобы добавить товары в акцию или обновить параметры каких-то товаров, передайте их в параметре `offers`. 
 */
export interface UpdatePromoOffersRequest {
  /**
   * Идентификатор акции.
   */
  promoId: string;
  /**
   * Товары, которые необходимо добавить в акцию или цены которых нужно изменить.
   */
  offers: Array<UpdatePromoOfferDTO>;
}


/**
 * Результат добавления товаров в акцию.
 */
export interface UpdatePromoOffersResponse {
  status?: ApiResponseStatusType;
  result?: UpdatePromoOffersResultDTO;
}


/**
 * Ошибки и предупреждения, которые появились при добавлении товаров в акцию.
 */
export interface UpdatePromoOffersResultDTO {
  /**
   * Изменения, которые были отклонены.  Возвращается, только если есть отклоненные изменения. 
   */
  rejectedOffers?: Array<RejectedPromoOfferUpdateDTO>;
  /**
   * Изменения, по которым есть предупреждения. Они информируют о возможных проблемах. Информация о товарах обновится.  Возвращается, только если есть предупреждения. 
   */
  warningOffers?: Array<WarningPromoOfferUpdateDTO>;
}


/**
 * Информация об остатках одного товара на одном из складов.
 */
export interface UpdateStockDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  sku: string;
  /**
   * Информация об остатках товара. 
   */
  items: Array<UpdateStockItemDTO>;
}


/**
 * Информация об остатках товара. 
 */
export interface UpdateStockItemDTO {
  /**
   * Количество доступного товара. 
   */
  count: number;
  /**
   * Дата и время последнего обновления информации об остатках. <br><br> Если вы не передали параметр `updatedAt`, используется текущее время. <br><br> Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
   */
  updatedAt?: string;
}


/**
 * Запрос на изменение информации по остаткам товаров.
 */
export interface UpdateStocksRequest {
  /**
   * Данные об остатках товаров. 
   */
  skus: Set<UpdateStockDTO>;
}


/**
 * Время последнего обновления.
 */
export interface UpdateTimeDTO {
  /**
   * Время последнего обновления.
   */
  updatedAt: string;
}


/**
 * Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: `S`, `M`, `L`, `44`, `46`, `48`, `42/164`, `46/176`, `44S`.  Если ограничивающая характеристика **размерная сетка** принимает значение `RU`, список возможных значений размера сокращается до `44`, `46`, `48`. 
 */
export interface ValueRestrictionDTO {
  /**
   * Идентификатор ограничивающей характеристики.
   */
  limitingParameterId: number;
  /**
   * Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.
   */
  limitedValues: Array<OptionValuesLimitedDTO>;
}


export interface VerifyOrderEacRequest {
  /**
   * Код для подтверждения ЭАПП.
   */
  code?: string;
}


export interface VerifyOrderEacResponse {
  status?: ApiResponseStatusType;
  result?: EacVerificationResultDTO;
}


/**
 * Адрес склада.
 */
export interface WarehouseAddressDTO {
  /**
   * Город.
   */
  city: string;
  /**
   * Улица.
   */
  street?: string;
  /**
   * Номер дома.
   */
  number?: string;
  /**
   * Номер строения.
   */
  building?: string;
  /**
   * Номер корпуса.
   */
  block?: string;
  gps: GpsDTO;
}


/**
 * Информация о складе.
 */
export interface WarehouseDTO {
  /**
   * Идентификатор склада.
   */
  id: number;
  /**
   * Название склада.
   */
  name: string;
  /**
   * Идентификатор кампании в API и идентификатор магазина.
   */
  campaignId: number;
  /**
   * Возможна ли доставка по модели Экспресс.
   */
  express: boolean;
  address?: WarehouseAddressDTO;
}


/**
 * Информация о группе складов.
 */
export interface WarehouseGroupDTO {
  /**
   * Название группы складов.
   */
  name: string;
  mainWarehouse: WarehouseDTO;
  /**
   * Список складов, входящих в группу.
   */
  warehouses: Array<WarehouseDTO>;
}


/**
 * Информация об остатках товара.
 */
export interface WarehouseOfferDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  turnoverSummary?: TurnoverDTO;
  /**
   * Информация об остатках.
   */
  stocks: Array<WarehouseStockDTO>;
  /**
   * Дата и время последнего обновления информации об остатках.  Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2023-11-21T00:42:42+03:00`. 
   */
  updatedAt?: string;
}


/**
 * Информация об остатках товаров на складе.
 */
export interface WarehouseOffersDTO {
  /**
   * Идентификатор склада.
   */
  warehouseId: number;
  /**
   * Информация об остатках.
   */
  offers: Array<WarehouseOfferDTO>;
}


/**
 * Информация об остатках товара.
 */
export interface WarehouseStockDTO {
  type: WarehouseStockType;
  /**
   * Значение остатков.
   */
  count: number;
}


/**
 * Тип остатков товаров на складе:  * `AVAILABLE` (соответствует типу «Доступный к заказу» в отчете «Остатки на складе» в кабинете продавца на Маркете) — товар, доступный для продажи.  * `DEFECT` (соответствует типу «Брак») — товар с браком.  * `EXPIRED` (соответствует типу «Просрочен») — товар с истекшим сроком годности.  * `FIT` (соответствует типу «Годный») — товар, который доступен для продажи или уже зарезервирован.  * `FREEZE` — товар, который зарезервирован для заказов.  * `QUARANTINE` (соответствует типу «Карантин») — товар, временно недоступный для продажи (например, товар перемещают из одного помещения склада в другое).  * `UTILIZATION` — товар, который будет утилизирован. 
 */
export type WarehouseStockType = 'FIT' | 'FREEZE' | 'AVAILABLE' | 'QUARANTINE' | 'UTILIZATION' | 'DEFECT' | 'EXPIRED';

/**
 * Информация о складах и группах складов.
 */
export interface WarehousesDTO {
  /**
   * Список складов, не входящих в группы.
   */
  warehouses: Array<WarehouseDTO>;
  /**
   * Список групп складов.
   */
  warehouseGroups: Array<WarehouseGroupDTO>;
}


/**
 * Описание предупреждения, которое появилось при добавлении товара.
 */
export interface WarningPromoOfferUpdateDTO {
  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   */
  offerId: string;
  /**
   * Предупреждения, которые появились при добавлении товара в акцию или изменении его цен.
   */
  warnings: Array<PromoOfferUpdateWarningDTO>;
}

